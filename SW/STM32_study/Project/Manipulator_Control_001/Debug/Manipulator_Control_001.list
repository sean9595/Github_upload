
Manipulator_Control_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008374  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800862c  0800862c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008634  08008634  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800863c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  24000010  0800864c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001dc  0800864c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e67a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003082  00000000  00000000  0003e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a0  00000000  00000000  00041740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f68  00000000  00000000  000427e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037884  00000000  00000000  00043748  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010c3f  00000000  00000000  0007afcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00162ef9  00000000  00000000  0008bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001eeb04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004538  00000000  00000000  001eeb80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080085f4 	.word	0x080085f4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080085f4 	.word	0x080085f4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005dc:	2003      	movs	r0, #3
 80005de:	f000 f987 	bl	80008f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005e2:	f001 fac9 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 80005e6:	4601      	mov	r1, r0
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <HAL_Init+0x60>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	f003 030f 	and.w	r3, r3, #15
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_Init+0x64>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	f003 031f 	and.w	r3, r3, #31
 80005fa:	fa21 f303 	lsr.w	r3, r1, r3
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <HAL_Init+0x68>)
 8000600:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_Init+0x68>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <HAL_Init+0x60>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 030f 	and.w	r3, r3, #15
 800060e:	490b      	ldr	r1, [pc, #44]	; (800063c <HAL_Init+0x64>)
 8000610:	5ccb      	ldrb	r3, [r1, r3]
 8000612:	f003 031f 	and.w	r3, r3, #31
 8000616:	fa22 f303 	lsr.w	r3, r2, r3
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_Init+0x6c>)
 800061c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 f812 	bl	8000648 <HAL_InitTick>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e002      	b.n	8000634 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800062e:	f007 fc21 	bl	8007e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58024400 	.word	0x58024400
 800063c:	0800861c 	.word	0x0800861c
 8000640:	24000008 	.word	0x24000008
 8000644:	2400000c 	.word	0x2400000c

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000650:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <HAL_InitTick+0x60>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e021      	b.n	80006a0 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <HAL_InitTick+0x64>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_InitTick+0x60>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066a:	fbb3 f3f1 	udiv	r3, r3, r1
 800066e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f96f 	bl	8000956 <HAL_SYSTICK_Config>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	e00e      	b.n	80006a0 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b0f      	cmp	r3, #15
 8000686:	d80a      	bhi.n	800069e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000688:	2200      	movs	r2, #0
 800068a:	6879      	ldr	r1, [r7, #4]
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
 8000690:	f000 f939 	bl	8000906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <HAL_InitTick+0x68>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	24000004 	.word	0x24000004
 80006ac:	24000008 	.word	0x24000008
 80006b0:	24000000 	.word	0x24000000

080006b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x20>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_IncTick+0x24>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4413      	add	r3, r2
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_IncTick+0x24>)
 80006c6:	6013      	str	r3, [r2, #0]
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	24000004 	.word	0x24000004
 80006d8:	2400002c 	.word	0x2400002c

080006dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <HAL_GetTick+0x14>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2400002c 	.word	0x2400002c

080006f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff ffee 	bl	80006dc <HAL_GetTick>
 8000700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800070c:	d005      	beq.n	800071a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_Delay+0x40>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071a:	bf00      	nop
 800071c:	f7ff ffde 	bl	80006dc <HAL_GetTick>
 8000720:	4602      	mov	r2, r0
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	429a      	cmp	r2, r3
 800072a:	d8f7      	bhi.n	800071c <HAL_Delay+0x28>
  {
  }
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	24000004 	.word	0x24000004

08000738 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_GetREVID+0x14>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	5c001000 	.word	0x5c001000

08000750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f003 0307 	and.w	r3, r3, #7
 800075e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000762:	68db      	ldr	r3, [r3, #12]
 8000764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	4313      	orrs	r3, r2
 800077c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800077e:	4a04      	ldr	r2, [pc, #16]	; (8000790 <__NVIC_SetPriorityGrouping+0x40>)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	60d3      	str	r3, [r2, #12]
}
 8000784:	bf00      	nop
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	05fa0000 	.word	0x05fa0000

08000798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <__NVIC_GetPriorityGrouping+0x18>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0a1b      	lsrs	r3, r3, #8
 80007a2:	f003 0307 	and.w	r3, r3, #7
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	db0b      	blt.n	80007de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f003 021f 	and.w	r2, r3, #31
 80007cc:	4907      	ldr	r1, [pc, #28]	; (80007ec <__NVIC_EnableIRQ+0x38>)
 80007ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007d2:	095b      	lsrs	r3, r3, #5
 80007d4:	2001      	movs	r0, #1
 80007d6:	fa00 f202 	lsl.w	r2, r0, r2
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008bc:	d301      	bcc.n	80008c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008be:	2301      	movs	r3, #1
 80008c0:	e00f      	b.n	80008e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <SysTick_Config+0x40>)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ca:	210f      	movs	r1, #15
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f7ff ff8e 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <SysTick_Config+0x40>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <SysTick_Config+0x40>)
 80008dc:	2207      	movs	r2, #7
 80008de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	e000e010 	.word	0xe000e010

080008f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff ff29 	bl	8000750 <__NVIC_SetPriorityGrouping>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
 8000912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff40 	bl	8000798 <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff33 	bl	80007b4 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa4 	bl	80008ac <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e188      	b.n	8000c94 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b02      	cmp	r3, #2
 800098c:	d004      	beq.n	8000998 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e17d      	b.n	8000c94 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a8c      	ldr	r2, [pc, #560]	; (8000bd0 <HAL_DMA_Abort_IT+0x260>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d04a      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a8b      	ldr	r2, [pc, #556]	; (8000bd4 <HAL_DMA_Abort_IT+0x264>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d045      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a89      	ldr	r2, [pc, #548]	; (8000bd8 <HAL_DMA_Abort_IT+0x268>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d040      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a88      	ldr	r2, [pc, #544]	; (8000bdc <HAL_DMA_Abort_IT+0x26c>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d03b      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a86      	ldr	r2, [pc, #536]	; (8000be0 <HAL_DMA_Abort_IT+0x270>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d036      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a85      	ldr	r2, [pc, #532]	; (8000be4 <HAL_DMA_Abort_IT+0x274>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d031      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a83      	ldr	r2, [pc, #524]	; (8000be8 <HAL_DMA_Abort_IT+0x278>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d02c      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a82      	ldr	r2, [pc, #520]	; (8000bec <HAL_DMA_Abort_IT+0x27c>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d027      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a80      	ldr	r2, [pc, #512]	; (8000bf0 <HAL_DMA_Abort_IT+0x280>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d022      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a7f      	ldr	r2, [pc, #508]	; (8000bf4 <HAL_DMA_Abort_IT+0x284>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d01d      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a7d      	ldr	r2, [pc, #500]	; (8000bf8 <HAL_DMA_Abort_IT+0x288>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d018      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a7c      	ldr	r2, [pc, #496]	; (8000bfc <HAL_DMA_Abort_IT+0x28c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d013      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a7a      	ldr	r2, [pc, #488]	; (8000c00 <HAL_DMA_Abort_IT+0x290>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00e      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a79      	ldr	r2, [pc, #484]	; (8000c04 <HAL_DMA_Abort_IT+0x294>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d009      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a77      	ldr	r2, [pc, #476]	; (8000c08 <HAL_DMA_Abort_IT+0x298>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d004      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a76      	ldr	r2, [pc, #472]	; (8000c0c <HAL_DMA_Abort_IT+0x29c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_DMA_Abort_IT+0xcc>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_DMA_Abort_IT+0xce>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d065      	beq.n	8000b0e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2204      	movs	r2, #4
 8000a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a60      	ldr	r2, [pc, #384]	; (8000bd0 <HAL_DMA_Abort_IT+0x260>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d04a      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a5e      	ldr	r2, [pc, #376]	; (8000bd4 <HAL_DMA_Abort_IT+0x264>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d045      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a5d      	ldr	r2, [pc, #372]	; (8000bd8 <HAL_DMA_Abort_IT+0x268>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d040      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a5b      	ldr	r2, [pc, #364]	; (8000bdc <HAL_DMA_Abort_IT+0x26c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d03b      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a5a      	ldr	r2, [pc, #360]	; (8000be0 <HAL_DMA_Abort_IT+0x270>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d036      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a58      	ldr	r2, [pc, #352]	; (8000be4 <HAL_DMA_Abort_IT+0x274>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d031      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a57      	ldr	r2, [pc, #348]	; (8000be8 <HAL_DMA_Abort_IT+0x278>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d02c      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a55      	ldr	r2, [pc, #340]	; (8000bec <HAL_DMA_Abort_IT+0x27c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d027      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a54      	ldr	r2, [pc, #336]	; (8000bf0 <HAL_DMA_Abort_IT+0x280>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d022      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a52      	ldr	r2, [pc, #328]	; (8000bf4 <HAL_DMA_Abort_IT+0x284>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d01d      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <HAL_DMA_Abort_IT+0x288>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d018      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a4f      	ldr	r2, [pc, #316]	; (8000bfc <HAL_DMA_Abort_IT+0x28c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d013      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <HAL_DMA_Abort_IT+0x290>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d00e      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a4c      	ldr	r2, [pc, #304]	; (8000c04 <HAL_DMA_Abort_IT+0x294>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d009      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a4b      	ldr	r2, [pc, #300]	; (8000c08 <HAL_DMA_Abort_IT+0x298>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d004      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a49      	ldr	r2, [pc, #292]	; (8000c0c <HAL_DMA_Abort_IT+0x29c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d108      	bne.n	8000afc <HAL_DMA_Abort_IT+0x18c>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0201 	bic.w	r2, r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	e0ca      	b.n	8000c92 <HAL_DMA_Abort_IT+0x322>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f022 0201 	bic.w	r2, r2, #1
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e0c1      	b.n	8000c92 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f022 020e 	bic.w	r2, r2, #14
 8000b1c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a2b      	ldr	r2, [pc, #172]	; (8000bd0 <HAL_DMA_Abort_IT+0x260>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d04a      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <HAL_DMA_Abort_IT+0x264>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d045      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_DMA_Abort_IT+0x268>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d040      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a26      	ldr	r2, [pc, #152]	; (8000bdc <HAL_DMA_Abort_IT+0x26c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d03b      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a25      	ldr	r2, [pc, #148]	; (8000be0 <HAL_DMA_Abort_IT+0x270>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d036      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_DMA_Abort_IT+0x274>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d031      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a22      	ldr	r2, [pc, #136]	; (8000be8 <HAL_DMA_Abort_IT+0x278>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d02c      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_DMA_Abort_IT+0x27c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d027      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_DMA_Abort_IT+0x280>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d022      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <HAL_DMA_Abort_IT+0x284>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d01d      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a1c      	ldr	r2, [pc, #112]	; (8000bf8 <HAL_DMA_Abort_IT+0x288>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d018      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_DMA_Abort_IT+0x28c>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d013      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_DMA_Abort_IT+0x290>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00e      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_DMA_Abort_IT+0x294>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d009      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <HAL_DMA_Abort_IT+0x298>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d004      	beq.n	8000bbe <HAL_DMA_Abort_IT+0x24e>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_DMA_Abort_IT+0x29c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d128      	bne.n	8000c10 <HAL_DMA_Abort_IT+0x2a0>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0201 	bic.w	r2, r2, #1
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	e027      	b.n	8000c20 <HAL_DMA_Abort_IT+0x2b0>
 8000bd0:	40020010 	.word	0x40020010
 8000bd4:	40020028 	.word	0x40020028
 8000bd8:	40020040 	.word	0x40020040
 8000bdc:	40020058 	.word	0x40020058
 8000be0:	40020070 	.word	0x40020070
 8000be4:	40020088 	.word	0x40020088
 8000be8:	400200a0 	.word	0x400200a0
 8000bec:	400200b8 	.word	0x400200b8
 8000bf0:	40020410 	.word	0x40020410
 8000bf4:	40020428 	.word	0x40020428
 8000bf8:	40020440 	.word	0x40020440
 8000bfc:	40020458 	.word	0x40020458
 8000c00:	40020470 	.word	0x40020470
 8000c04:	40020488 	.word	0x40020488
 8000c08:	400204a0 	.word	0x400204a0
 8000c0c:	400204b8 	.word	0x400204b8
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f022 0201 	bic.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c34:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	2201      	movs	r2, #1
 8000c40:	409a      	lsls	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8000c4e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d00c      	beq.n	8000c72 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000c62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000c66:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8000c70:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2200      	movs	r2, #0
 8000c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000caa:	4b89      	ldr	r3, [pc, #548]	; (8000ed0 <HAL_GPIO_Init+0x234>)
 8000cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000cae:	e194      	b.n	8000fda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f000 8186 	beq.w	8000fd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x3c>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b12      	cmp	r3, #18
 8000cd6:	d123      	bne.n	8000d20 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	08da      	lsrs	r2, r3, #3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3208      	adds	r2, #8
 8000ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	08da      	lsrs	r2, r3, #3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3208      	adds	r2, #8
 8000d1a:	69b9      	ldr	r1, [r7, #24]
 8000d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4013      	ands	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0203 	and.w	r2, r3, #3
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d00b      	beq.n	8000d74 <HAL_GPIO_Init+0xd8>
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d68:	2b11      	cmp	r3, #17
 8000d6a:	d003      	beq.n	8000d74 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b12      	cmp	r3, #18
 8000d72:	d130      	bne.n	8000dd6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000daa:	2201      	movs	r2, #1
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	091b      	lsrs	r3, r3, #4
 8000dc0:	f003 0201 	and.w	r2, r3, #1
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80e0 	beq.w	8000fd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e14:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e1a:	4a2e      	ldr	r2, [pc, #184]	; (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_GPIO_Init+0x238>)
 8000e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e32:	4a29      	ldr	r2, [pc, #164]	; (8000ed8 <HAL_GPIO_Init+0x23c>)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_GPIO_Init+0x240>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d052      	beq.n	8000f04 <HAL_GPIO_Init+0x268>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_GPIO_Init+0x244>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d031      	beq.n	8000eca <HAL_GPIO_Init+0x22e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <HAL_GPIO_Init+0x248>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x22a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <HAL_GPIO_Init+0x24c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x226>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_GPIO_Init+0x250>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x222>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a1b      	ldr	r2, [pc, #108]	; (8000ef0 <HAL_GPIO_Init+0x254>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x21e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a1a      	ldr	r2, [pc, #104]	; (8000ef4 <HAL_GPIO_Init+0x258>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <HAL_GPIO_Init+0x25c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x216>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_GPIO_Init+0x260>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x212>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a17      	ldr	r2, [pc, #92]	; (8000f00 <HAL_GPIO_Init+0x264>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x20e>
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	e02d      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eaa:	230a      	movs	r3, #10
 8000eac:	e02b      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eae:	2308      	movs	r3, #8
 8000eb0:	e029      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e027      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	e025      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e023      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e021      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e01f      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e01d      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e01b      	b.n	8000f06 <HAL_GPIO_Init+0x26a>
 8000ece:	bf00      	nop
 8000ed0:	58000080 	.word	0x58000080
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58000400 	.word	0x58000400
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58020800 	.word	0x58020800
 8000ee8:	58020c00 	.word	0x58020c00
 8000eec:	58021000 	.word	0x58021000
 8000ef0:	58021400 	.word	0x58021400
 8000ef4:	58021800 	.word	0x58021800
 8000ef8:	58021c00 	.word	0x58021c00
 8000efc:	58022000 	.word	0x58022000
 8000f00:	58022400 	.word	0x58022400
 8000f04:	2300      	movs	r3, #0
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f16:	4938      	ldr	r1, [pc, #224]	; (8000ff8 <HAL_GPIO_Init+0x35c>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f47f ae63 	bne.w	8000cb0 <HAL_GPIO_Init+0x14>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	58000400 	.word	0x58000400

08000ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
 8001008:	4613      	mov	r3, r2
 800100a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800100c:	787b      	ldrb	r3, [r7, #1]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001012:	887a      	ldrh	r2, [r7, #2]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001018:	e003      	b.n	8001022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	041a      	lsls	r2, r3, #16
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	619a      	str	r2, [r3, #24]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_PWREx_ConfigSupply+0x6c>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	2b04      	cmp	r3, #4
 8001042:	d008      	beq.n	8001056 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_PWREx_ConfigSupply+0x6c>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	d001      	beq.n	8001056 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e01d      	b.n	8001092 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_PWREx_ConfigSupply+0x6c>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	f023 0207 	bic.w	r2, r3, #7
 800105e:	490f      	ldr	r1, [pc, #60]	; (800109c <HAL_PWREx_ConfigSupply+0x6c>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4313      	orrs	r3, r2
 8001064:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001066:	f7ff fb39 	bl	80006dc <HAL_GetTick>
 800106a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800106c:	e009      	b.n	8001082 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800106e:	f7ff fb35 	bl	80006dc <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800107c:	d901      	bls.n	8001082 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e007      	b.n	8001092 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_PWREx_ConfigSupply+0x6c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800108a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800108e:	d1ee      	bne.n	800106e <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	58024800 	.word	0x58024800

080010a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80010aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	58024800 	.word	0x58024800

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e3a4      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8087 	beq.w	80011ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e0:	4b9a      	ldr	r3, [pc, #616]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010ea:	4b98      	ldr	r3, [pc, #608]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	2b10      	cmp	r3, #16
 80010f4:	d007      	beq.n	8001106 <HAL_RCC_OscConfig+0x46>
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	2b18      	cmp	r3, #24
 80010fa:	d110      	bne.n	800111e <HAL_RCC_OscConfig+0x5e>
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d10b      	bne.n	800111e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001106:	4b91      	ldr	r3, [pc, #580]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d06c      	beq.n	80011ec <HAL_RCC_OscConfig+0x12c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d168      	bne.n	80011ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e37e      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001126:	d106      	bne.n	8001136 <HAL_RCC_OscConfig+0x76>
 8001128:	4b88      	ldr	r3, [pc, #544]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a87      	ldr	r2, [pc, #540]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800112e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001132:	6013      	str	r3, [r2, #0]
 8001134:	e02e      	b.n	8001194 <HAL_RCC_OscConfig+0xd4>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x98>
 800113e:	4b83      	ldr	r3, [pc, #524]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a82      	ldr	r2, [pc, #520]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b80      	ldr	r3, [pc, #512]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a7f      	ldr	r2, [pc, #508]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e01d      	b.n	8001194 <HAL_RCC_OscConfig+0xd4>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0xbc>
 8001162:	4b7a      	ldr	r3, [pc, #488]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a79      	ldr	r2, [pc, #484]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	4b77      	ldr	r3, [pc, #476]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a76      	ldr	r2, [pc, #472]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	e00b      	b.n	8001194 <HAL_RCC_OscConfig+0xd4>
 800117c:	4b73      	ldr	r3, [pc, #460]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a72      	ldr	r2, [pc, #456]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b70      	ldr	r3, [pc, #448]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a6f      	ldr	r2, [pc, #444]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800118e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d013      	beq.n	80011c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fa9e 	bl	80006dc <HAL_GetTick>
 80011a0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fa9a 	bl	80006dc <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e332      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b6:	4b65      	ldr	r3, [pc, #404]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0xe4>
 80011c2:	e014      	b.n	80011ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff fa8a 	bl	80006dc <HAL_GetTick>
 80011c8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fa86 	bl	80006dc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e31e      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011de:	4b5b      	ldr	r3, [pc, #364]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x10c>
 80011ea:	e000      	b.n	80011ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80b0 	beq.w	800135c <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fc:	4b53      	ldr	r3, [pc, #332]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001204:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001206:	4b51      	ldr	r3, [pc, #324]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <HAL_RCC_OscConfig+0x162>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	2b18      	cmp	r3, #24
 8001216:	d149      	bne.n	80012ac <HAL_RCC_OscConfig+0x1ec>
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d144      	bne.n	80012ac <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001222:	4b4a      	ldr	r3, [pc, #296]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_RCC_OscConfig+0x17a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e2f0      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 0219 	bic.w	r2, r3, #25
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	4941      	ldr	r1, [pc, #260]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fa46 	bl	80006dc <HAL_GetTick>
 8001250:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fa42 	bl	80006dc <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e2da      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001266:	4b39      	ldr	r3, [pc, #228]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f0      	beq.n	8001254 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	f7ff fa61 	bl	8000738 <HAL_GetREVID>
 8001276:	4602      	mov	r2, r0
 8001278:	f241 0303 	movw	r3, #4099	; 0x1003
 800127c:	429a      	cmp	r2, r3
 800127e:	d80a      	bhi.n	8001296 <HAL_RCC_OscConfig+0x1d6>
 8001280:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	031b      	lsls	r3, r3, #12
 800128e:	492f      	ldr	r1, [pc, #188]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001290:	4313      	orrs	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001294:	e062      	b.n	800135c <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	061b      	lsls	r3, r3, #24
 80012a4:	4929      	ldr	r1, [pc, #164]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012aa:	e057      	b.n	800135c <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d038      	beq.n	8001326 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f023 0219 	bic.w	r2, r3, #25
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4922      	ldr	r1, [pc, #136]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c6:	f7ff fa09 	bl	80006dc <HAL_GetTick>
 80012ca:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fa05 	bl	80006dc <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e29d      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	f7ff fa24 	bl	8000738 <HAL_GetREVID>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d80a      	bhi.n	8001310 <HAL_RCC_OscConfig+0x250>
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	031b      	lsls	r3, r3, #12
 8001308:	4910      	ldr	r1, [pc, #64]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
 800130e:	e025      	b.n	800135c <HAL_RCC_OscConfig+0x29c>
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	061b      	lsls	r3, r3, #24
 800131e:	490b      	ldr	r1, [pc, #44]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
 8001324:	e01a      	b.n	800135c <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a08      	ldr	r2, [pc, #32]	; (800134c <HAL_RCC_OscConfig+0x28c>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff f9d3 	bl	80006dc <HAL_GetTick>
 8001336:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff f9cf 	bl	80006dc <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d903      	bls.n	8001350 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e267      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
 800134c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001350:	4ba0      	ldr	r3, [pc, #640]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ee      	bne.n	800133a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 808f 	beq.w	8001488 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800136a:	4b9a      	ldr	r3, [pc, #616]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001372:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001374:	4b97      	ldr	r3, [pc, #604]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001378:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2b08      	cmp	r3, #8
 800137e:	d007      	beq.n	8001390 <HAL_RCC_OscConfig+0x2d0>
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b18      	cmp	r3, #24
 8001384:	d12d      	bne.n	80013e2 <HAL_RCC_OscConfig+0x322>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b01      	cmp	r3, #1
 800138e:	d128      	bne.n	80013e2 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001390:	4b90      	ldr	r3, [pc, #576]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_OscConfig+0x2e8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b80      	cmp	r3, #128	; 0x80
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e239      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a8:	f7ff f9c6 	bl	8000738 <HAL_GetREVID>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d80a      	bhi.n	80013cc <HAL_RCC_OscConfig+0x30c>
 80013b6:	4b87      	ldr	r3, [pc, #540]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a1b      	ldr	r3, [r3, #32]
 80013c2:	069b      	lsls	r3, r3, #26
 80013c4:	4983      	ldr	r1, [pc, #524]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ca:	e05d      	b.n	8001488 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	061b      	lsls	r3, r3, #24
 80013da:	497e      	ldr	r1, [pc, #504]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013e0:	e052      	b.n	8001488 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d035      	beq.n	8001456 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80013ea:	4b7a      	ldr	r3, [pc, #488]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a79      	ldr	r2, [pc, #484]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff f971 	bl	80006dc <HAL_GetTick>
 80013fa:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80013fe:	f7ff f96d 	bl	80006dc <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e205      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001410:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800141c:	f7ff f98c 	bl	8000738 <HAL_GetREVID>
 8001420:	4602      	mov	r2, r0
 8001422:	f241 0303 	movw	r3, #4099	; 0x1003
 8001426:	429a      	cmp	r2, r3
 8001428:	d80a      	bhi.n	8001440 <HAL_RCC_OscConfig+0x380>
 800142a:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	069b      	lsls	r3, r3, #26
 8001438:	4966      	ldr	r1, [pc, #408]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800143a:	4313      	orrs	r3, r2
 800143c:	604b      	str	r3, [r1, #4]
 800143e:	e023      	b.n	8001488 <HAL_RCC_OscConfig+0x3c8>
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	4961      	ldr	r1, [pc, #388]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001450:	4313      	orrs	r3, r2
 8001452:	60cb      	str	r3, [r1, #12]
 8001454:	e018      	b.n	8001488 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001456:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a5e      	ldr	r2, [pc, #376]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800145c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff f93b 	bl	80006dc <HAL_GetTick>
 8001466:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800146a:	f7ff f937 	bl	80006dc <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1cf      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d036      	beq.n	8001502 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d019      	beq.n	80014d0 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149c:	4b4d      	ldr	r3, [pc, #308]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a8:	f7ff f918 	bl	80006dc <HAL_GetTick>
 80014ac:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014b0:	f7ff f914 	bl	80006dc <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e1ac      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x3f0>
 80014ce:	e018      	b.n	8001502 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d0:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d4:	4a3f      	ldr	r2, [pc, #252]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80014d6:	f023 0301 	bic.w	r3, r3, #1
 80014da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff f8fe 	bl	80006dc <HAL_GetTick>
 80014e0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff f8fa 	bl	80006dc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e192      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80014f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	2b00      	cmp	r3, #0
 800150c:	d036      	beq.n	800157c <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d019      	beq.n	800154a <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800151c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001520:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001522:	f7ff f8db 	bl	80006dc <HAL_GetTick>
 8001526:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800152a:	f7ff f8d7 	bl	80006dc <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e16f      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x46a>
 8001548:	e018      	b.n	800157c <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001554:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001556:	f7ff f8c1 	bl	80006dc <HAL_GetTick>
 800155a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800155e:	f7ff f8bd 	bl	80006dc <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e155      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 8086 	beq.w	8001696 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <HAL_RCC_OscConfig+0x518>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <HAL_RCC_OscConfig+0x518>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001596:	f7ff f8a1 	bl	80006dc <HAL_GetTick>
 800159a:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff f89d 	bl	80006dc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b64      	cmp	r3, #100	; 0x64
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e135      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_RCC_OscConfig+0x518>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10b      	bne.n	80015dc <HAL_RCC_OscConfig+0x51c>
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a02      	ldr	r2, [pc, #8]	; (80015d4 <HAL_RCC_OscConfig+0x514>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e032      	b.n	8001638 <HAL_RCC_OscConfig+0x578>
 80015d2:	bf00      	nop
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58024800 	.word	0x58024800
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10c      	bne.n	80015fe <HAL_RCC_OscConfig+0x53e>
 80015e4:	4b8f      	ldr	r3, [pc, #572]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80015e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e8:	4a8e      	ldr	r2, [pc, #568]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80015ea:	f023 0301 	bic.w	r3, r3, #1
 80015ee:	6713      	str	r3, [r2, #112]	; 0x70
 80015f0:	4b8c      	ldr	r3, [pc, #560]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f4:	4a8b      	ldr	r2, [pc, #556]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80015f6:	f023 0304 	bic.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	; 0x70
 80015fc:	e01c      	b.n	8001638 <HAL_RCC_OscConfig+0x578>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x560>
 8001606:	4b87      	ldr	r3, [pc, #540]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	4a86      	ldr	r2, [pc, #536]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6713      	str	r3, [r2, #112]	; 0x70
 8001612:	4b84      	ldr	r3, [pc, #528]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a83      	ldr	r2, [pc, #524]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0x578>
 8001620:	4b80      	ldr	r3, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001624:	4a7f      	ldr	r2, [pc, #508]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001626:	f023 0301 	bic.w	r3, r3, #1
 800162a:	6713      	str	r3, [r2, #112]	; 0x70
 800162c:	4b7d      	ldr	r3, [pc, #500]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	4a7c      	ldr	r2, [pc, #496]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001632:	f023 0304 	bic.w	r3, r3, #4
 8001636:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d015      	beq.n	800166c <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001640:	f7ff f84c 	bl	80006dc <HAL_GetTick>
 8001644:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff f848 	bl	80006dc <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0de      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165e:	4b71      	ldr	r3, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0ee      	beq.n	8001648 <HAL_RCC_OscConfig+0x588>
 800166a:	e014      	b.n	8001696 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff f836 	bl	80006dc <HAL_GetTick>
 8001670:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff f832 	bl	80006dc <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e0c8      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800168a:	4b66      	ldr	r3, [pc, #408]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1ee      	bne.n	8001674 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80bd 	beq.w	800181a <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016a0:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016a8:	2b18      	cmp	r3, #24
 80016aa:	f000 80b4 	beq.w	8001816 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	f040 8095 	bne.w	80017e2 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a59      	ldr	r2, [pc, #356]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80016be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff f80a 	bl	80006dc <HAL_GetTick>
 80016c8:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff f806 	bl	80006dc <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e09e      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016de:	4b51      	ldr	r3, [pc, #324]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80016ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ee:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <HAL_RCC_OscConfig+0x768>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	430a      	orrs	r2, r1
 80016fe:	4949      	ldr	r1, [pc, #292]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001700:	4313      	orrs	r3, r2
 8001702:	628b      	str	r3, [r1, #40]	; 0x28
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	3b01      	subs	r3, #1
 800170a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001712:	3b01      	subs	r3, #1
 8001714:	025b      	lsls	r3, r3, #9
 8001716:	b29b      	uxth	r3, r3
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171e:	3b01      	subs	r3, #1
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	3b01      	subs	r3, #1
 800172e:	061b      	lsls	r3, r3, #24
 8001730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001734:	493b      	ldr	r1, [pc, #236]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001736:	4313      	orrs	r3, r2
 8001738:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173e:	4a39      	ldr	r2, [pc, #228]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174a:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_RCC_OscConfig+0x76c>)
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001752:	00d2      	lsls	r2, r2, #3
 8001754:	4933      	ldr	r1, [pc, #204]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001756:	4313      	orrs	r3, r2
 8001758:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800175a:	4b32      	ldr	r3, [pc, #200]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800175c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175e:	f023 020c 	bic.w	r2, r3, #12
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	492f      	ldr	r1, [pc, #188]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001768:	4313      	orrs	r3, r2
 800176a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800176c:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f023 0202 	bic.w	r2, r3, #2
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	492a      	ldr	r1, [pc, #168]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800177a:	4313      	orrs	r3, r2
 800177c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800177e:	4b29      	ldr	r3, [pc, #164]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	4a25      	ldr	r2, [pc, #148]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001796:	4b23      	ldr	r3, [pc, #140]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	4a22      	ldr	r2, [pc, #136]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80017b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7fe ff8f 	bl	80006dc <HAL_GetTick>
 80017be:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c2:	f7fe ff8b 	bl	80006dc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e023      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x702>
 80017e0:	e01b      	b.n	800181a <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a0f      	ldr	r2, [pc, #60]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 80017e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7fe ff75 	bl	80006dc <HAL_GetTick>
 80017f2:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7fe ff71 	bl	80006dc <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e009      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_RCC_OscConfig+0x764>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x736>
 8001814:	e001      	b.n	800181a <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	58024400 	.word	0x58024400
 8001828:	fffffc0c 	.word	0xfffffc0c
 800182c:	ffff0007 	.word	0xffff0007

08001830 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e18d      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001844:	4b8a      	ldr	r3, [pc, #552]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 030f 	and.w	r3, r3, #15
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d910      	bls.n	8001874 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b87      	ldr	r3, [pc, #540]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f023 020f 	bic.w	r2, r3, #15
 800185a:	4985      	ldr	r1, [pc, #532]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001862:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d001      	beq.n	8001874 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e175      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d010      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800188c:	429a      	cmp	r2, r3
 800188e:	d908      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001890:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	4975      	ldr	r1, [pc, #468]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	4b70      	ldr	r3, [pc, #448]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d908      	bls.n	80018d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80018be:	4b6d      	ldr	r3, [pc, #436]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	496a      	ldr	r1, [pc, #424]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d908      	bls.n	80018fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	495e      	ldr	r1, [pc, #376]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69da      	ldr	r2, [r3, #28]
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001916:	429a      	cmp	r2, r3
 8001918:	d908      	bls.n	800192c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69db      	ldr	r3, [r3, #28]
 8001926:	4953      	ldr	r1, [pc, #332]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001928:	4313      	orrs	r3, r2
 800192a:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d010      	beq.n	800195a <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	429a      	cmp	r2, r3
 8001946:	d908      	bls.n	800195a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001948:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f023 020f 	bic.w	r2, r3, #15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4947      	ldr	r1, [pc, #284]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001956:	4313      	orrs	r3, r2
 8001958:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d055      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	4940      	ldr	r1, [pc, #256]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001974:	4313      	orrs	r3, r2
 8001976:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d107      	bne.n	8001990 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d121      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0e7      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2b03      	cmp	r3, #3
 8001996:	d107      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d115      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0db      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0cf      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c0:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e0c7      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f023 0207 	bic.w	r2, r3, #7
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4925      	ldr	r1, [pc, #148]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7fe fe7b 	bl	80006dc <HAL_GetTick>
 80019e6:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ea:	f7fe fe77 	bl	80006dc <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0af      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a00:	4b1c      	ldr	r3, [pc, #112]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d1eb      	bne.n	80019ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d010      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d208      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f023 020f 	bic.w	r2, r3, #15
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	490e      	ldr	r1, [pc, #56]	; (8001a74 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d214      	bcs.n	8001a78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 020f 	bic.w	r2, r3, #15
 8001a56:	4906      	ldr	r1, [pc, #24]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCC_ClockConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e077      	b.n	8001b60 <HAL_RCC_ClockConfig+0x330>
 8001a70:	52002000 	.word	0x52002000
 8001a74:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d208      	bcs.n	8001aa6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a94:	4b34      	ldr	r3, [pc, #208]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	4931      	ldr	r1, [pc, #196]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d010      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d208      	bcs.n	8001ad4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	4926      	ldr	r1, [pc, #152]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d208      	bcs.n	8001b02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	491a      	ldr	r1, [pc, #104]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d010      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d208      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	490f      	ldr	r1, [pc, #60]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b30:	f000 f822 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_RCC_ClockConfig+0x338>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_ClockConfig+0x33c>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	fa21 f303 	lsr.w	r3, r1, r3
 8001b4c:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_RCC_ClockConfig+0x340>)
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <HAL_RCC_ClockConfig+0x344>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd77 	bl	8000648 <HAL_InitTick>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	0800861c 	.word	0x0800861c
 8001b70:	24000008 	.word	0x24000008
 8001b74:	24000000 	.word	0x24000000

08001b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b7e:	4baf      	ldr	r3, [pc, #700]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b86:	2b18      	cmp	r3, #24
 8001b88:	f200 814e 	bhi.w	8001e28 <HAL_RCC_GetSysClockFreq+0x2b0>
 8001b8c:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001bf9 	.word	0x08001bf9
 8001b98:	08001e29 	.word	0x08001e29
 8001b9c:	08001e29 	.word	0x08001e29
 8001ba0:	08001e29 	.word	0x08001e29
 8001ba4:	08001e29 	.word	0x08001e29
 8001ba8:	08001e29 	.word	0x08001e29
 8001bac:	08001e29 	.word	0x08001e29
 8001bb0:	08001e29 	.word	0x08001e29
 8001bb4:	08001c1f 	.word	0x08001c1f
 8001bb8:	08001e29 	.word	0x08001e29
 8001bbc:	08001e29 	.word	0x08001e29
 8001bc0:	08001e29 	.word	0x08001e29
 8001bc4:	08001e29 	.word	0x08001e29
 8001bc8:	08001e29 	.word	0x08001e29
 8001bcc:	08001e29 	.word	0x08001e29
 8001bd0:	08001e29 	.word	0x08001e29
 8001bd4:	08001c25 	.word	0x08001c25
 8001bd8:	08001e29 	.word	0x08001e29
 8001bdc:	08001e29 	.word	0x08001e29
 8001be0:	08001e29 	.word	0x08001e29
 8001be4:	08001e29 	.word	0x08001e29
 8001be8:	08001e29 	.word	0x08001e29
 8001bec:	08001e29 	.word	0x08001e29
 8001bf0:	08001e29 	.word	0x08001e29
 8001bf4:	08001c2b 	.word	0x08001c2b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001bf8:	4b90      	ldr	r3, [pc, #576]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c04:	4b8d      	ldr	r3, [pc, #564]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	4a8c      	ldr	r2, [pc, #560]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001c16:	e10a      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c18:	4b89      	ldr	r3, [pc, #548]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c1a:	61bb      	str	r3, [r7, #24]
    break;
 8001c1c:	e107      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c1e:	4b89      	ldr	r3, [pc, #548]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001c20:	61bb      	str	r3, [r7, #24]
    break;
 8001c22:	e104      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001c24:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8001c26:	61bb      	str	r3, [r7, #24]
    break;
 8001c28:	e101      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c2a:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c3e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c40:	4b7e      	ldr	r3, [pc, #504]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4e:	08db      	lsrs	r3, r3, #3
 8001c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	fb02 f303 	mul.w	r3, r2, r3
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c62:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80da 	beq.w	8001e22 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d05a      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x1b2>
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d302      	bcc.n	8001c7e <HAL_RCC_GetSysClockFreq+0x106>
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d078      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0x1f6>
 8001c7c:	e099      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d02d      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	4a6a      	ldr	r2, [pc, #424]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	ee07 3a90 	vmov	s15, r3
 8001cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cb4:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cc4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cc8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001e4c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001ce4:	e087      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001e50 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cf8:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d08:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d0c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001e4c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d28:	e065      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d34:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d44:	ee07 3a90 	vmov	s15, r3
 8001d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d50:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001e4c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001d6c:	e043      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	ee07 3a90 	vmov	s15, r3
 8001d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d78:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001e58 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d80:	4b2e      	ldr	r3, [pc, #184]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d88:	ee07 3a90 	vmov	s15, r3
 8001d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d90:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d94:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001e4c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001d98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001db0:	e021      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dbc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dc4:	4b1d      	ldr	r3, [pc, #116]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dd8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001e4c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001df4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	0a5b      	lsrs	r3, r3, #9
 8001dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e00:	3301      	adds	r3, #1
 8001e02:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	ee07 3a90 	vmov	s15, r3
 8001e0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e1a:	ee17 3a90 	vmov	r3, s15
 8001e1e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001e20:	e005      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
    break;
 8001e26:	e002      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001e2a:	61bb      	str	r3, [r7, #24]
    break;
 8001e2c:	bf00      	nop
  }

  return sysclockfreq;
 8001e2e:	69bb      	ldr	r3, [r7, #24]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3724      	adds	r7, #36	; 0x24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	03d09000 	.word	0x03d09000
 8001e44:	003d0900 	.word	0x003d0900
 8001e48:	007a1200 	.word	0x007a1200
 8001e4c:	46000000 	.word	0x46000000
 8001e50:	4c742400 	.word	0x4c742400
 8001e54:	4a742400 	.word	0x4a742400
 8001e58:	4af42400 	.word	0x4af42400

08001e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e60:	f001 f9e2 	bl	8003228 <HAL_RCCEx_GetD1SysClockFreq>
 8001e64:	4601      	mov	r1, r0
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_RCC_GetHCLKFreq+0x30>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	fa21 f303 	lsr.w	r3, r1, r3
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x34>)
 8001e7c:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_RCC_GetHCLKFreq+0x34>)
 8001e80:	681b      	ldr	r3, [r3, #0]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	0800861c 	.word	0x0800861c
 8001e90:	2400000c 	.word	0x2400000c

08001e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001e98:	f7ff ffe0 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	0800861c 	.word	0x0800861c

08001ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8001ec4:	f7ff ffca 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8001ec8:	4601      	mov	r1, r0
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ed6:	5cd3      	ldrb	r3, [r2, r3]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	58024400 	.word	0x58024400
 8001ee8:	0800861c 	.word	0x0800861c

08001eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d03d      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f10:	d013      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f16:	d802      	bhi.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001f1c:	e01f      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f22:	d013      	beq.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f28:	d01c      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001f2a:	e018      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f2c:	4baf      	ldr	r3, [pc, #700]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	4aae      	ldr	r2, [pc, #696]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f38:	e015      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	2102      	movs	r1, #2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 f98d 	bl	8003260 <RCCEx_PLL2_Config>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f4a:	e00c      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3324      	adds	r3, #36	; 0x24
 8001f50:	2102      	movs	r1, #2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 fa36 	bl	80033c4 <RCCEx_PLL3_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001f5c:	e003      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	75fb      	strb	r3, [r7, #23]
      break;
 8001f62:	e000      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f66:	7dfb      	ldrb	r3, [r7, #23]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001f6c:	4b9f      	ldr	r3, [pc, #636]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f78:	499c      	ldr	r1, [pc, #624]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8001f7e:	e001      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03d      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d826      	bhi.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fb5 	.word	0x08001fb5
 8001fa4:	08001fc3 	.word	0x08001fc3
 8001fa8:	08001fd5 	.word	0x08001fd5
 8001fac:	08001fed 	.word	0x08001fed
 8001fb0:	08001fed 	.word	0x08001fed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fb4:	4b8d      	ldr	r3, [pc, #564]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	4a8c      	ldr	r2, [pc, #560]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001fc0:	e015      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 f949 	bl	8003260 <RCCEx_PLL2_Config>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001fd2:	e00c      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3324      	adds	r3, #36	; 0x24
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f001 f9f2 	bl	80033c4 <RCCEx_PLL3_Config>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8001fe4:	e003      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8001fea:	e000      	b.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8001fec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d109      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ff4:	4b7d      	ldr	r3, [pc, #500]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff8:	f023 0207 	bic.w	r2, r3, #7
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	497a      	ldr	r1, [pc, #488]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002002:	4313      	orrs	r3, r2
 8002004:	650b      	str	r3, [r1, #80]	; 0x50
 8002006:	e001      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03e      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d01c      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d804      	bhi.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8002024:	2b00      	cmp	r3, #0
 8002026:	d008      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002028:	2b40      	cmp	r3, #64	; 0x40
 800202a:	d00d      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800202c:	e01e      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800202e:	2bc0      	cmp	r3, #192	; 0xc0
 8002030:	d01f      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002036:	d01e      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002038:	e018      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800203a:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	4a6b      	ldr	r2, [pc, #428]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002046:	e017      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f001 f906 	bl	8003260 <RCCEx_PLL2_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002058:	e00e      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3324      	adds	r3, #36	; 0x24
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f9af 	bl	80033c4 <RCCEx_PLL3_Config>
 8002066:	4603      	mov	r3, r0
 8002068:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800206a:	e005      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	75fb      	strb	r3, [r7, #23]
      break;
 8002070:	e002      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002072:	bf00      	nop
 8002074:	e000      	b.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800207e:	4b5b      	ldr	r3, [pc, #364]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002082:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4958      	ldr	r1, [pc, #352]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800208c:	4313      	orrs	r3, r2
 800208e:	650b      	str	r3, [r1, #80]	; 0x50
 8002090:	e001      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d044      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80020a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ac:	d01f      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x202>
 80020ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b2:	d805      	bhi.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80020b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020bc:	d00e      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80020be:	e01f      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80020c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80020c4:	d01f      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80020c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020ca:	d01e      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80020cc:	e018      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	4a46      	ldr	r2, [pc, #280]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020da:	e017      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3304      	adds	r3, #4
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f001 f8bc 	bl	8003260 <RCCEx_PLL2_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80020ec:	e00e      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3324      	adds	r3, #36	; 0x24
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f001 f965 	bl	80033c4 <RCCEx_PLL3_Config>
 80020fa:	4603      	mov	r3, r0
 80020fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80020fe:	e005      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	75fb      	strb	r3, [r7, #23]
      break;
 8002104:	e002      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8002106:	bf00      	nop
 8002108:	e000      	b.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800210a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800210c:	7dfb      	ldrb	r3, [r7, #23]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10a      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002112:	4b36      	ldr	r3, [pc, #216]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002120:	4932      	ldr	r1, [pc, #200]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002122:	4313      	orrs	r3, r2
 8002124:	658b      	str	r3, [r1, #88]	; 0x58
 8002126:	e001      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002128:	7dfb      	ldrb	r3, [r7, #23]
 800212a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002134:	2b00      	cmp	r3, #0
 8002136:	d044      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800213e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002142:	d01f      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002148:	d805      	bhi.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800214e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002152:	d00e      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002154:	e01f      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002156:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800215a:	d01f      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800215c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002160:	d01e      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002162:	e018      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800216a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800216e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002170:	e017      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3304      	adds	r3, #4
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f001 f871 	bl	8003260 <RCCEx_PLL2_Config>
 800217e:	4603      	mov	r3, r0
 8002180:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002182:	e00e      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3324      	adds	r3, #36	; 0x24
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f001 f91a 	bl	80033c4 <RCCEx_PLL3_Config>
 8002190:	4603      	mov	r3, r0
 8002192:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002194:	e005      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	75fb      	strb	r3, [r7, #23]
      break;
 800219a:	e002      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800219c:	bf00      	nop
 800219e:	e000      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80021a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021b6:	490d      	ldr	r1, [pc, #52]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	658b      	str	r3, [r1, #88]	; 0x58
 80021bc:	e001      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
 80021c0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d035      	beq.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d00c      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d802      	bhi.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01b      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80021de:	e017      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d00c      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x312>
 80021e4:	2b30      	cmp	r3, #48	; 0x30
 80021e6:	d018      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80021e8:	e012      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80021ea:	bf00      	nop
 80021ec:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021f0:	4baf      	ldr	r3, [pc, #700]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	4aae      	ldr	r2, [pc, #696]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80021f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80021fc:	e00e      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	2102      	movs	r1, #2
 8002204:	4618      	mov	r0, r3
 8002206:	f001 f82b 	bl	8003260 <RCCEx_PLL2_Config>
 800220a:	4603      	mov	r3, r0
 800220c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800220e:	e005      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	75fb      	strb	r3, [r7, #23]
      break;
 8002214:	e002      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8002216:	bf00      	nop
 8002218:	e000      	b.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800221a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d109      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002222:	4ba3      	ldr	r3, [pc, #652]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002226:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222e:	49a0      	ldr	r1, [pc, #640]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002230:	4313      	orrs	r3, r2
 8002232:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002234:	e001      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002236:	7dfb      	ldrb	r3, [r7, #23]
 8002238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d042      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800224e:	d01f      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002254:	d805      	bhi.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225e:	d00e      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8002260:	e01f      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8002262:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002266:	d01f      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226c:	d01e      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800226e:	e018      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002270:	4b8f      	ldr	r3, [pc, #572]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	4a8e      	ldr	r2, [pc, #568]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800227c:	e017      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3304      	adds	r3, #4
 8002282:	2100      	movs	r1, #0
 8002284:	4618      	mov	r0, r3
 8002286:	f000 ffeb 	bl	8003260 <RCCEx_PLL2_Config>
 800228a:	4603      	mov	r3, r0
 800228c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800228e:	e00e      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3324      	adds	r3, #36	; 0x24
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f894 	bl	80033c4 <RCCEx_PLL3_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80022a0:	e005      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
      break;
 80022a6:	e002      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80022a8:	bf00      	nop
 80022aa:	e000      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80022ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ae:	7dfb      	ldrb	r3, [r7, #23]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80022b4:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c0:	497b      	ldr	r1, [pc, #492]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	650b      	str	r3, [r1, #80]	; 0x50
 80022c6:	e001      	b.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c8:	7dfb      	ldrb	r3, [r7, #23]
 80022ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d042      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022e0:	d01b      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80022e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022e6:	d805      	bhi.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d022      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80022f2:	e01b      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x440>
 80022f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022f8:	d01d      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80022fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022fe:	d01c      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8002300:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002304:	d01b      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8002306:	e011      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	2101      	movs	r1, #1
 800230e:	4618      	mov	r0, r3
 8002310:	f000 ffa6 	bl	8003260 <RCCEx_PLL2_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002318:	e012      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3324      	adds	r3, #36	; 0x24
 800231e:	2101      	movs	r1, #1
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f84f 	bl	80033c4 <RCCEx_PLL3_Config>
 8002326:	4603      	mov	r3, r0
 8002328:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800232a:	e009      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	75fb      	strb	r3, [r7, #23]
      break;
 8002330:	e006      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002332:	bf00      	nop
 8002334:	e004      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8002336:	bf00      	nop
 8002338:	e002      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800233a:	bf00      	nop
 800233c:	e000      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800233e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002346:	4b5a      	ldr	r3, [pc, #360]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002352:	4957      	ldr	r1, [pc, #348]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	650b      	str	r3, [r1, #80]	; 0x50
 8002358:	e001      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d044      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002374:	d01b      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800237a:	d805      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d022      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002380:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002384:	d00a      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002386:	e01b      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238c:	d01d      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800238e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002392:	d01c      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002394:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002398:	d01b      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800239a:	e011      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	2101      	movs	r1, #1
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 ff5c 	bl	8003260 <RCCEx_PLL2_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80023ac:	e012      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3324      	adds	r3, #36	; 0x24
 80023b2:	2101      	movs	r1, #1
 80023b4:	4618      	mov	r0, r3
 80023b6:	f001 f805 	bl	80033c4 <RCCEx_PLL3_Config>
 80023ba:	4603      	mov	r3, r0
 80023bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80023be:	e009      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	75fb      	strb	r3, [r7, #23]
      break;
 80023c4:	e006      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023c6:	bf00      	nop
 80023c8:	e004      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023ca:	bf00      	nop
 80023cc:	e002      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023ce:	bf00      	nop
 80023d0:	e000      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80023d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80023da:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80023e8:	4931      	ldr	r1, [pc, #196]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	658b      	str	r3, [r1, #88]	; 0x58
 80023ee:	e001      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d02d      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002408:	d005      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800240a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800240e:	d009      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002414:	e00f      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002422:	e00c      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f000 ff18 	bl	8003260 <RCCEx_PLL2_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002434:	e003      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
      break;
 800243a:	e000      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800243c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800243e:	7dfb      	ldrb	r3, [r7, #23]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002448:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002450:	4917      	ldr	r1, [pc, #92]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	650b      	str	r3, [r1, #80]	; 0x50
 8002456:	e001      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
 800245a:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d035      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246c:	2b03      	cmp	r3, #3
 800246e:	d81b      	bhi.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	080024b5 	.word	0x080024b5
 800247c:	08002489 	.word	0x08002489
 8002480:	08002497 	.word	0x08002497
 8002484:	080024b5 	.word	0x080024b5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002488:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800248e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002494:	e00f      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3304      	adds	r3, #4
 800249a:	2102      	movs	r1, #2
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fedf 	bl	8003260 <RCCEx_PLL2_Config>
 80024a2:	4603      	mov	r3, r0
 80024a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80024a6:	e006      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	75fb      	strb	r3, [r7, #23]
      break;
 80024ac:	e003      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80024ae:	bf00      	nop
 80024b0:	58024400 	.word	0x58024400
      break;
 80024b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024b6:	7dfb      	ldrb	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80024bc:	4bba      	ldr	r3, [pc, #744]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c0:	f023 0203 	bic.w	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	49b7      	ldr	r1, [pc, #732]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80024ce:	e001      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 8086 	beq.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e2:	4bb2      	ldr	r3, [pc, #712]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4ab1      	ldr	r2, [pc, #708]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80024e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024ee:	f7fe f8f5 	bl	80006dc <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024f4:	e009      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f6:	f7fe f8f1 	bl	80006dc <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b64      	cmp	r3, #100	; 0x64
 8002502:	d902      	bls.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	75fb      	strb	r3, [r7, #23]
        break;
 8002508:	e005      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800250a:	4ba8      	ldr	r3, [pc, #672]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0ef      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d166      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800251c:	4ba2      	ldr	r3, [pc, #648]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800251e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002526:	4053      	eors	r3, r2
 8002528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252c:	2b00      	cmp	r3, #0
 800252e:	d013      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002530:	4b9d      	ldr	r3, [pc, #628]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002538:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800253a:	4b9b      	ldr	r3, [pc, #620]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	4a9a      	ldr	r2, [pc, #616]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002546:	4b98      	ldr	r3, [pc, #608]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254a:	4a97      	ldr	r2, [pc, #604]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002550:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002552:	4a95      	ldr	r2, [pc, #596]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002562:	d115      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe f8ba 	bl	80006dc <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800256a:	e00b      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7fe f8b6 	bl	80006dc <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d902      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	75fb      	strb	r3, [r7, #23]
            break;
 8002582:	e005      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002584:	4b88      	ldr	r3, [pc, #544]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ed      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d126      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800259c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a4:	d10d      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80025a6:	4b80      	ldr	r3, [pc, #512]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025b4:	0919      	lsrs	r1, r3, #4
 80025b6:	4b7e      	ldr	r3, [pc, #504]	; (80027b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80025b8:	400b      	ands	r3, r1
 80025ba:	497b      	ldr	r1, [pc, #492]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	610b      	str	r3, [r1, #16]
 80025c0:	e005      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80025c2:	4b79      	ldr	r3, [pc, #484]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	4a78      	ldr	r2, [pc, #480]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025cc:	6113      	str	r3, [r2, #16]
 80025ce:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	4972      	ldr	r1, [pc, #456]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	670b      	str	r3, [r1, #112]	; 0x70
 80025e2:	e004      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
 80025e6:	75bb      	strb	r3, [r7, #22]
 80025e8:	e001      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
 80025ec:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d07d      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fe:	2b28      	cmp	r3, #40	; 0x28
 8002600:	d866      	bhi.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	080026d7 	.word	0x080026d7
 800260c:	080026d1 	.word	0x080026d1
 8002610:	080026d1 	.word	0x080026d1
 8002614:	080026d1 	.word	0x080026d1
 8002618:	080026d1 	.word	0x080026d1
 800261c:	080026d1 	.word	0x080026d1
 8002620:	080026d1 	.word	0x080026d1
 8002624:	080026d1 	.word	0x080026d1
 8002628:	080026ad 	.word	0x080026ad
 800262c:	080026d1 	.word	0x080026d1
 8002630:	080026d1 	.word	0x080026d1
 8002634:	080026d1 	.word	0x080026d1
 8002638:	080026d1 	.word	0x080026d1
 800263c:	080026d1 	.word	0x080026d1
 8002640:	080026d1 	.word	0x080026d1
 8002644:	080026d1 	.word	0x080026d1
 8002648:	080026bf 	.word	0x080026bf
 800264c:	080026d1 	.word	0x080026d1
 8002650:	080026d1 	.word	0x080026d1
 8002654:	080026d1 	.word	0x080026d1
 8002658:	080026d1 	.word	0x080026d1
 800265c:	080026d1 	.word	0x080026d1
 8002660:	080026d1 	.word	0x080026d1
 8002664:	080026d1 	.word	0x080026d1
 8002668:	080026d7 	.word	0x080026d7
 800266c:	080026d1 	.word	0x080026d1
 8002670:	080026d1 	.word	0x080026d1
 8002674:	080026d1 	.word	0x080026d1
 8002678:	080026d1 	.word	0x080026d1
 800267c:	080026d1 	.word	0x080026d1
 8002680:	080026d1 	.word	0x080026d1
 8002684:	080026d1 	.word	0x080026d1
 8002688:	080026d7 	.word	0x080026d7
 800268c:	080026d1 	.word	0x080026d1
 8002690:	080026d1 	.word	0x080026d1
 8002694:	080026d1 	.word	0x080026d1
 8002698:	080026d1 	.word	0x080026d1
 800269c:	080026d1 	.word	0x080026d1
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026d1 	.word	0x080026d1
 80026a8:	080026d7 	.word	0x080026d7
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	2101      	movs	r1, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fdd4 	bl	8003260 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80026bc:	e00c      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3324      	adds	r3, #36	; 0x24
 80026c2:	2101      	movs	r1, #1
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fe7d 	bl	80033c4 <RCCEx_PLL3_Config>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80026ce:	e003      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	75fb      	strb	r3, [r7, #23]
      break;
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80026d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80026de:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ea:	492f      	ldr	r1, [pc, #188]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	654b      	str	r3, [r1, #84]	; 0x54
 80026f0:	e001      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d037      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	2b05      	cmp	r3, #5
 8002708:	d820      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002753 	.word	0x08002753
 8002714:	08002729 	.word	0x08002729
 8002718:	0800273b 	.word	0x0800273b
 800271c:	08002753 	.word	0x08002753
 8002720:	08002753 	.word	0x08002753
 8002724:	08002753 	.word	0x08002753
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fd96 	bl	8003260 <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002738:	e00c      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3324      	adds	r3, #36	; 0x24
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fe3f 	bl	80033c4 <RCCEx_PLL3_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800274a:	e003      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	75fb      	strb	r3, [r7, #23]
      break;
 8002750:	e000      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800275a:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800275c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275e:	f023 0207 	bic.w	r2, r3, #7
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002766:	4910      	ldr	r1, [pc, #64]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	654b      	str	r3, [r1, #84]	; 0x54
 800276c:	e001      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d040      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002784:	2b05      	cmp	r3, #5
 8002786:	d827      	bhi.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027df 	.word	0x080027df
 8002794:	080027b5 	.word	0x080027b5
 8002798:	080027c7 	.word	0x080027c7
 800279c:	080027df 	.word	0x080027df
 80027a0:	080027df 	.word	0x080027df
 80027a4:	080027df 	.word	0x080027df
 80027a8:	58024400 	.word	0x58024400
 80027ac:	58024800 	.word	0x58024800
 80027b0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 fd50 	bl	8003260 <RCCEx_PLL2_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80027c4:	e00c      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3324      	adds	r3, #36	; 0x24
 80027ca:	2101      	movs	r1, #1
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fdf9 	bl	80033c4 <RCCEx_PLL3_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80027d6:	e003      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	75fb      	strb	r3, [r7, #23]
      break;
 80027dc:	e000      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80027de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e6:	4bb3      	ldr	r3, [pc, #716]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	f023 0207 	bic.w	r2, r3, #7
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f4:	49af      	ldr	r1, [pc, #700]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	658b      	str	r3, [r1, #88]	; 0x58
 80027fa:	e001      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d044      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002816:	d01b      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800281c:	d805      	bhi.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d022      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002828:	e01b      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d01d      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002834:	d01c      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800283a:	d01b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800283c:	e011      	b.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f000 fd0b 	bl	8003260 <RCCEx_PLL2_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800284e:	e012      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3324      	adds	r3, #36	; 0x24
 8002854:	2102      	movs	r1, #2
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fdb4 	bl	80033c4 <RCCEx_PLL3_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002860:	e009      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
      break;
 8002866:	e006      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002868:	bf00      	nop
 800286a:	e004      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800286c:	bf00      	nop
 800286e:	e002      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002870:	bf00      	nop
 8002872:	e000      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002874:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002876:	7dfb      	ldrb	r3, [r7, #23]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10a      	bne.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287c:	4b8d      	ldr	r3, [pc, #564]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288a:	498a      	ldr	r1, [pc, #552]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800288c:	4313      	orrs	r3, r2
 800288e:	654b      	str	r3, [r1, #84]	; 0x54
 8002890:	e001      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d044      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ac:	d01b      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80028ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028b2:	d805      	bhi.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d022      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80028b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80028be:	e01b      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d01d      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80028c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80028ca:	d01c      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80028cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028d0:	d01b      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80028d2:	e011      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fcc0 	bl	8003260 <RCCEx_PLL2_Config>
 80028e0:	4603      	mov	r3, r0
 80028e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80028e4:	e012      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3324      	adds	r3, #36	; 0x24
 80028ea:	2102      	movs	r1, #2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fd69 	bl	80033c4 <RCCEx_PLL3_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80028f6:	e009      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	75fb      	strb	r3, [r7, #23]
      break;
 80028fc:	e006      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80028fe:	bf00      	nop
 8002900:	e004      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002902:	bf00      	nop
 8002904:	e002      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800290a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002912:	4b68      	ldr	r3, [pc, #416]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002920:	4964      	ldr	r1, [pc, #400]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002922:	4313      	orrs	r3, r2
 8002924:	658b      	str	r3, [r1, #88]	; 0x58
 8002926:	e001      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002934:	2b00      	cmp	r3, #0
 8002936:	d044      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800293e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002942:	d01b      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002948:	d805      	bhi.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d022      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800294e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002954:	e01b      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002956:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800295a:	d01d      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800295c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002960:	d01c      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002962:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002966:	d01b      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002968:	e011      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3304      	adds	r3, #4
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fc75 	bl	8003260 <RCCEx_PLL2_Config>
 8002976:	4603      	mov	r3, r0
 8002978:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800297a:	e012      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3324      	adds	r3, #36	; 0x24
 8002980:	2102      	movs	r1, #2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 fd1e 	bl	80033c4 <RCCEx_PLL3_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800298c:	e009      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
      break;
 8002992:	e006      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002994:	bf00      	nop
 8002996:	e004      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002998:	bf00      	nop
 800299a:	e002      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800299c:	bf00      	nop
 800299e:	e000      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80029a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029b6:	493f      	ldr	r1, [pc, #252]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	658b      	str	r3, [r1, #88]	; 0x58
 80029bc:	e001      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d01b      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d8:	d10b      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3324      	adds	r3, #36	; 0x24
 80029de:	2102      	movs	r1, #2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fcef 	bl	80033c4 <RCCEx_PLL3_Config>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00c      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	75bb      	strb	r3, [r7, #22]
 80029f0:	e009      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80029f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a00:	492c      	ldr	r1, [pc, #176]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01b      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3324      	adds	r3, #36	; 0x24
 8002a22:	2102      	movs	r1, #2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fccd 	bl	80033c4 <RCCEx_PLL3_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00c      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	75bb      	strb	r3, [r7, #22]
 8002a34:	e009      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a36:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a44:	491b      	ldr	r1, [pc, #108]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d032      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d00d      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8002a62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a66:	d016      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fbf4 	bl	8003260 <RCCEx_PLL2_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002a7c:	e00c      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3324      	adds	r3, #36	; 0x24
 8002a82:	2102      	movs	r1, #2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 fc9d 	bl	80033c4 <RCCEx_PLL3_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8002a8e:	e003      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
      break;
 8002a94:	e000      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8002a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a98:	7dfb      	ldrb	r3, [r7, #23]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002aac:	4901      	ldr	r1, [pc, #4]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ab2:	e003      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8002ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab8:	7dfb      	ldrb	r3, [r7, #23]
 8002aba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02f      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad2:	d00c      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8002ad4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ad8:	d015      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8002ada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ade:	d10f      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ae0:	4b79      	ldr	r3, [pc, #484]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	4a78      	ldr	r2, [pc, #480]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8002aec:	e00c      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3324      	adds	r3, #36	; 0x24
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fc65 	bl	80033c4 <RCCEx_PLL3_Config>
 8002afa:	4603      	mov	r3, r0
 8002afc:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8002afe:	e003      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	75fb      	strb	r3, [r7, #23]
      break;
 8002b04:	e000      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8002b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b08:	7dfb      	ldrb	r3, [r7, #23]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10a      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b0e:	4b6e      	ldr	r3, [pc, #440]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1c:	496a      	ldr	r1, [pc, #424]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	654b      	str	r3, [r1, #84]	; 0x54
 8002b22:	e001      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
 8002b26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d029      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8002b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b40:	d007      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8002b42:	e00f      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b44:	4b60      	ldr	r3, [pc, #384]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	4a5f      	ldr	r2, [pc, #380]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002b50:	e00b      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2102      	movs	r1, #2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fb81 	bl	8003260 <RCCEx_PLL2_Config>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	75fb      	strb	r3, [r7, #23]
      break;
 8002b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002b70:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7c:	4952      	ldr	r1, [pc, #328]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3324      	adds	r3, #36	; 0x24
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fc12 	bl	80033c4 <RCCEx_PLL3_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d02f      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbe:	d00c      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8002bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc4:	d802      	bhi.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d011      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8002bca:	e00d      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8002bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bd0:	d00f      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8002bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8002bd8:	e006      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8002be6:	e007      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	75fb      	strb	r3, [r7, #23]
      break;
 8002bec:	e004      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e002      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002bf2:	bf00      	nop
 8002bf4:	e000      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8002bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bfe:	4b32      	ldr	r3, [pc, #200]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0a:	492f      	ldr	r1, [pc, #188]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	654b      	str	r3, [r1, #84]	; 0x54
 8002c10:	e001      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
 8002c14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c22:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4926      	ldr	r1, [pc, #152]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d009      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002c40:	4b21      	ldr	r3, [pc, #132]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c4e:	491e      	ldr	r1, [pc, #120]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	4a11      	ldr	r2, [pc, #68]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c88:	6113      	str	r3, [r2, #16]
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002c94:	490c      	ldr	r1, [pc, #48]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da08      	bge.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002ca2:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cae:	4906      	ldr	r1, [pc, #24]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8002cb4:	7dbb      	ldrb	r3, [r7, #22]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	58024400 	.word	0x58024400

08002ccc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002cd0:	f7ff f8c4 	bl	8001e5c <HAL_RCC_GetHCLKFreq>
 8002cd4:	4601      	mov	r1, r0
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002ce2:	5cd3      	ldrb	r3, [r2, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	0800861c 	.word	0x0800861c

08002cf8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b089      	sub	sp, #36	; 0x24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d00:	4b9d      	ldr	r3, [pc, #628]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002d0a:	4b9b      	ldr	r3, [pc, #620]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	0b1b      	lsrs	r3, r3, #12
 8002d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d14:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002d16:	4b98      	ldr	r3, [pc, #608]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	f003 0310 	and.w	r3, r3, #16
 8002d1e:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002d20:	4b95      	ldr	r3, [pc, #596]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d24:	08db      	lsrs	r3, r3, #3
 8002d26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	ee07 3a90 	vmov	s15, r3
 8002d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d38:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 810a 	beq.w	8002f58 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d05a      	beq.n	8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d302      	bcc.n	8002d54 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d078      	beq.n	8002e44 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8002d52:	e099      	b.n	8002e88 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d54:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d02d      	beq.n	8002dbc <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d60:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	4a84      	ldr	r2, [pc, #528]	; (8002f7c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d70:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d8a:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8002f80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8002dba:	e087      	b.n	8002ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002f84 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8002dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dce:	4b6a      	ldr	r3, [pc, #424]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd6:	ee07 3a90 	vmov	s15, r3
 8002dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8002de2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8002f80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002dfe:	e065      	b.n	8002ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8002f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8002e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e12:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e1a:	ee07 3a90 	vmov	s15, r3
 8002e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e26:	eddf 5a56 	vldr	s11, [pc, #344]	; 8002f80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002e42:	e043      	b.n	8002ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8002f8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8002e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e6a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8002f80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002e86:	e021      	b.n	8002ecc <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8002f88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8002e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ea2:	ee07 3a90 	vmov	s15, r3
 8002ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002eae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002f80 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8002eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8002eca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	0a5b      	lsrs	r3, r3, #9
 8002ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ee6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef2:	ee17 2a90 	vmov	r2, s15
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8002efa:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f04:	ee07 3a90 	vmov	s15, r3
 8002f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f14:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f20:	ee17 2a90 	vmov	r2, s15
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	0e1b      	lsrs	r3, r3, #24
 8002f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f4e:	ee17 2a90 	vmov	r2, s15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002f56:	e008      	b.n	8002f6a <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
}
 8002f6a:	bf00      	nop
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	03d09000 	.word	0x03d09000
 8002f80:	46000000 	.word	0x46000000
 8002f84:	4c742400 	.word	0x4c742400
 8002f88:	4a742400 	.word	0x4a742400
 8002f8c:	4af42400 	.word	0x4af42400

08002f90 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b089      	sub	sp, #36	; 0x24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f98:	4b9d      	ldr	r3, [pc, #628]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002fa2:	4b9b      	ldr	r3, [pc, #620]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	0d1b      	lsrs	r3, r3, #20
 8002fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fac:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002fae:	4b98      	ldr	r3, [pc, #608]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002fb8:	4b95      	ldr	r3, [pc, #596]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	08db      	lsrs	r3, r3, #3
 8002fbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	fb02 f303 	mul.w	r3, r2, r3
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 810a 	beq.w	80031f0 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d05a      	beq.n	8003098 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d302      	bcc.n	8002fec <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d078      	beq.n	80030dc <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8002fea:	e099      	b.n	8003120 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fec:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d02d      	beq.n	8003054 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ff8:	4b85      	ldr	r3, [pc, #532]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	4a84      	ldr	r2, [pc, #528]	; (8003214 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8003004:	fa22 f303 	lsr.w	r3, r2, r3
 8003008:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003022:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003032:	ed97 6a03 	vldr	s12, [r7, #12]
 8003036:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003218 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800303a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800303e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003052:	e087      	b.n	8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800321c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8003062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003066:	4b6a      	ldr	r3, [pc, #424]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003076:	ed97 6a03 	vldr	s12, [r7, #12]
 800307a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003218 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800307e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800308a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003096:	e065      	b.n	8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80030a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030aa:	4b59      	ldr	r3, [pc, #356]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80030be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003218 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80030c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80030da:	e043      	b.n	8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003224 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80030ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ee:	4b48      	ldr	r3, [pc, #288]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003102:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003218 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8003106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800310a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800310e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800311e:	e021      	b.n	8003164 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003220 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800312e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003142:	ed97 6a03 	vldr	s12, [r7, #12]
 8003146:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003218 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800314a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003162:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003164:	4b2a      	ldr	r3, [pc, #168]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	0a5b      	lsrs	r3, r3, #9
 800316a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800316e:	ee07 3a90 	vmov	s15, r3
 8003172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800317a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800317e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318a:	ee17 2a90 	vmov	r2, s15
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319c:	ee07 3a90 	vmov	s15, r3
 80031a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b8:	ee17 2a90 	vmov	r2, s15
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80031c0:	4b13      	ldr	r3, [pc, #76]	; (8003210 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	0e1b      	lsrs	r3, r3, #24
 80031c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ca:	ee07 3a90 	vmov	s15, r3
 80031ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031da:	edd7 6a07 	vldr	s13, [r7, #28]
 80031de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031e6:	ee17 2a90 	vmov	r2, s15
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80031ee:	e008      	b.n	8003202 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
}
 8003202:	bf00      	nop
 8003204:	3724      	adds	r7, #36	; 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400
 8003214:	03d09000 	.word	0x03d09000
 8003218:	46000000 	.word	0x46000000
 800321c:	4c742400 	.word	0x4c742400
 8003220:	4a742400 	.word	0x4a742400
 8003224:	4af42400 	.word	0x4af42400

08003228 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800322c:	f7fe fca4 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8003230:	4601      	mov	r1, r0
 8003232:	4b08      	ldr	r3, [pc, #32]	; (8003254 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	4a06      	ldr	r2, [pc, #24]	; (8003258 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800323e:	5cd3      	ldrb	r3, [r2, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa21 f303 	lsr.w	r3, r1, r3
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800324a:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	58024400 	.word	0x58024400
 8003258:	0800861c 	.word	0x0800861c
 800325c:	24000008 	.word	0x24000008

08003260 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800326e:	4b53      	ldr	r3, [pc, #332]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b03      	cmp	r3, #3
 8003278:	d101      	bne.n	800327e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e099      	b.n	80033b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800327e:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a4e      	ldr	r2, [pc, #312]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003284:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800328a:	f7fd fa27 	bl	80006dc <HAL_GetTick>
 800328e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003290:	e008      	b.n	80032a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003292:	f7fd fa23 	bl	80006dc <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e086      	b.n	80033b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032a4:	4b45      	ldr	r3, [pc, #276]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1f0      	bne.n	8003292 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80032b0:	4b42      	ldr	r3, [pc, #264]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	031b      	lsls	r3, r3, #12
 80032be:	493f      	ldr	r1, [pc, #252]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	628b      	str	r3, [r1, #40]	; 0x28
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	025b      	lsls	r3, r3, #9
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	431a      	orrs	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	3b01      	subs	r3, #1
 80032e0:	041b      	lsls	r3, r3, #16
 80032e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032f4:	4931      	ldr	r1, [pc, #196]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80032fa:	4b30      	ldr	r3, [pc, #192]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 80032fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	492d      	ldr	r1, [pc, #180]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800330c:	4b2b      	ldr	r3, [pc, #172]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	f023 0220 	bic.w	r2, r3, #32
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4928      	ldr	r1, [pc, #160]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800331e:	4b27      	ldr	r3, [pc, #156]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	4a26      	ldr	r2, [pc, #152]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003324:	f023 0310 	bic.w	r3, r3, #16
 8003328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800332a:	4b24      	ldr	r3, [pc, #144]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 800332c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <RCCEx_PLL2_Config+0x160>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	69d2      	ldr	r2, [r2, #28]
 8003336:	00d2      	lsls	r2, r2, #3
 8003338:	4920      	ldr	r1, [pc, #128]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 800333a:	4313      	orrs	r3, r2
 800333c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003344:	f043 0310 	orr.w	r3, r3, #16
 8003348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d106      	bne.n	800335e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800335a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800335c:	e00f      	b.n	800337e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d106      	bne.n	8003372 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003364:	4b15      	ldr	r3, [pc, #84]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	4a14      	ldr	r2, [pc, #80]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 800336a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003370:	e005      	b.n	800337e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003372:	4b12      	ldr	r3, [pc, #72]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	4a11      	ldr	r2, [pc, #68]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800337c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800337e:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a0e      	ldr	r2, [pc, #56]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 8003384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800338a:	f7fd f9a7 	bl	80006dc <HAL_GetTick>
 800338e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003390:	e008      	b.n	80033a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003392:	f7fd f9a3 	bl	80006dc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e006      	b.n	80033b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <RCCEx_PLL2_Config+0x15c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	58024400 	.word	0x58024400
 80033c0:	ffff0007 	.word	0xffff0007

080033c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80033d2:	4b53      	ldr	r3, [pc, #332]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d101      	bne.n	80033e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e099      	b.n	8003516 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80033e2:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a4e      	ldr	r2, [pc, #312]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80033e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ee:	f7fd f975 	bl	80006dc <HAL_GetTick>
 80033f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033f4:	e008      	b.n	8003408 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80033f6:	f7fd f971 	bl	80006dc <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e086      	b.n	8003516 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003408:	4b45      	ldr	r3, [pc, #276]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f0      	bne.n	80033f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003414:	4b42      	ldr	r3, [pc, #264]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 8003416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003418:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	051b      	lsls	r3, r3, #20
 8003422:	493f      	ldr	r1, [pc, #252]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 8003424:	4313      	orrs	r3, r2
 8003426:	628b      	str	r3, [r1, #40]	; 0x28
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	3b01      	subs	r3, #1
 800342e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	3b01      	subs	r3, #1
 8003438:	025b      	lsls	r3, r3, #9
 800343a:	b29b      	uxth	r3, r3
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	3b01      	subs	r3, #1
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	3b01      	subs	r3, #1
 8003452:	061b      	lsls	r3, r3, #24
 8003454:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003458:	4931      	ldr	r1, [pc, #196]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800345e:	4b30      	ldr	r3, [pc, #192]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	492d      	ldr	r1, [pc, #180]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 800346c:	4313      	orrs	r3, r2
 800346e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003470:	4b2b      	ldr	r3, [pc, #172]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	4928      	ldr	r1, [pc, #160]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003482:	4b27      	ldr	r3, [pc, #156]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	4a26      	ldr	r2, [pc, #152]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 8003488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800348c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 8003490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003492:	4b24      	ldr	r3, [pc, #144]	; (8003524 <RCCEx_PLL3_Config+0x160>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	69d2      	ldr	r2, [r2, #28]
 800349a:	00d2      	lsls	r2, r2, #3
 800349c:	4920      	ldr	r1, [pc, #128]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80034a2:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d106      	bne.n	80034c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	4a19      	ldr	r2, [pc, #100]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034c0:	e00f      	b.n	80034e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d106      	bne.n	80034d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80034c8:	4b15      	ldr	r3, [pc, #84]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a14      	ldr	r2, [pc, #80]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034d4:	e005      	b.n	80034e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	4a11      	ldr	r2, [pc, #68]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a0e      	ldr	r2, [pc, #56]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 80034e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ee:	f7fd f8f5 	bl	80006dc <HAL_GetTick>
 80034f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80034f4:	e008      	b.n	8003508 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80034f6:	f7fd f8f1 	bl	80006dc <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e006      	b.n	8003516 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <RCCEx_PLL3_Config+0x15c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	58024400 	.word	0x58024400
 8003524:	ffff0007 	.word	0xffff0007

08003528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e01d      	b.n	8003576 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f004 fe5c 	bl	800820c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f000 fc38 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_TIM_Base_Start_IT+0x50>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b06      	cmp	r3, #6
 80035a8:	d00b      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x42>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	d007      	beq.n	80035c2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	00010007 	.word	0x00010007

080035d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e01d      	b.n	8003622 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f815 	bl	800362a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4610      	mov	r0, r2
 8003614:	f000 fbe2 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b0c      	cmp	r3, #12
 800364e:	d841      	bhi.n	80036d4 <HAL_TIM_PWM_Start_IT+0x94>
 8003650:	a201      	add	r2, pc, #4	; (adr r2, 8003658 <HAL_TIM_PWM_Start_IT+0x18>)
 8003652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003656:	bf00      	nop
 8003658:	0800368d 	.word	0x0800368d
 800365c:	080036d5 	.word	0x080036d5
 8003660:	080036d5 	.word	0x080036d5
 8003664:	080036d5 	.word	0x080036d5
 8003668:	0800369f 	.word	0x0800369f
 800366c:	080036d5 	.word	0x080036d5
 8003670:	080036d5 	.word	0x080036d5
 8003674:	080036d5 	.word	0x080036d5
 8003678:	080036b1 	.word	0x080036b1
 800367c:	080036d5 	.word	0x080036d5
 8003680:	080036d5 	.word	0x080036d5
 8003684:	080036d5 	.word	0x080036d5
 8003688:	080036c3 	.word	0x080036c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0202 	orr.w	r2, r2, #2
 800369a:	60da      	str	r2, [r3, #12]
      break;
 800369c:	e01b      	b.n	80036d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0204 	orr.w	r2, r2, #4
 80036ac:	60da      	str	r2, [r3, #12]
      break;
 80036ae:	e012      	b.n	80036d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0208 	orr.w	r2, r2, #8
 80036be:	60da      	str	r2, [r3, #12]
      break;
 80036c0:	e009      	b.n	80036d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0210 	orr.w	r2, r2, #16
 80036d0:	60da      	str	r2, [r3, #12]
      break;
 80036d2:	e000      	b.n	80036d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80036d4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 ff82 	bl	80045e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_TIM_PWM_Start_IT+0x124>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_TIM_PWM_Start_IT+0xd6>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <HAL_TIM_PWM_Start_IT+0x128>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_TIM_PWM_Start_IT+0xd6>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_TIM_PWM_Start_IT+0x12c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_TIM_PWM_Start_IT+0xd6>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1a      	ldr	r2, [pc, #104]	; (8003770 <HAL_TIM_PWM_Start_IT+0x130>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIM_PWM_Start_IT+0xd6>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a18      	ldr	r2, [pc, #96]	; (8003774 <HAL_TIM_PWM_Start_IT+0x134>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_TIM_PWM_Start_IT+0xda>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <HAL_TIM_PWM_Start_IT+0xdc>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_TIM_PWM_Start_IT+0x138>)
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d00b      	beq.n	800375a <HAL_TIM_PWM_Start_IT+0x11a>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d007      	beq.n	800375a <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40010000 	.word	0x40010000
 8003768:	40010400 	.word	0x40010400
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	40014800 	.word	0x40014800
 8003778:	00010007 	.word	0x00010007

0800377c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d122      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d11b      	bne.n	80037d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0202 	mvn.w	r2, #2
 80037a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 faee 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 80037c4:	e005      	b.n	80037d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fae0 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 faf1 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d122      	bne.n	800382c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d11b      	bne.n	800382c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0204 	mvn.w	r2, #4
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fac4 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 8003818:	e005      	b.n	8003826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fab6 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fac7 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b08      	cmp	r3, #8
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b08      	cmp	r3, #8
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0208 	mvn.w	r2, #8
 8003850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2204      	movs	r2, #4
 8003856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fa9a 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa8c 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 fa9d 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b10      	cmp	r3, #16
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2208      	movs	r2, #8
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fa70 	bl	8003da0 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fa62 	bl	8003d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 fa73 	bl	8003db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0201 	mvn.w	r2, #1
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f004 fd74 	bl	80083e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b80      	cmp	r3, #128	; 0x80
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 feea 	bl	8004700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393a:	d10e      	bne.n	800395a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d107      	bne.n	800395a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fedd 	bl	8004714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003964:	2b40      	cmp	r3, #64	; 0x40
 8003966:	d10e      	bne.n	8003986 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003972:	2b40      	cmp	r3, #64	; 0x40
 8003974:	d107      	bne.n	8003986 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800397e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fa21 	bl	8003dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b20      	cmp	r3, #32
 8003992:	d10e      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d107      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f06f 0220 	mvn.w	r2, #32
 80039aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fe9d 	bl	80046ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
	...

080039bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e105      	b.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b14      	cmp	r3, #20
 80039ea:	f200 80f0 	bhi.w	8003bce <HAL_TIM_PWM_ConfigChannel+0x212>
 80039ee:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f4:	08003a49 	.word	0x08003a49
 80039f8:	08003bcf 	.word	0x08003bcf
 80039fc:	08003bcf 	.word	0x08003bcf
 8003a00:	08003bcf 	.word	0x08003bcf
 8003a04:	08003a89 	.word	0x08003a89
 8003a08:	08003bcf 	.word	0x08003bcf
 8003a0c:	08003bcf 	.word	0x08003bcf
 8003a10:	08003bcf 	.word	0x08003bcf
 8003a14:	08003acb 	.word	0x08003acb
 8003a18:	08003bcf 	.word	0x08003bcf
 8003a1c:	08003bcf 	.word	0x08003bcf
 8003a20:	08003bcf 	.word	0x08003bcf
 8003a24:	08003b0b 	.word	0x08003b0b
 8003a28:	08003bcf 	.word	0x08003bcf
 8003a2c:	08003bcf 	.word	0x08003bcf
 8003a30:	08003bcf 	.word	0x08003bcf
 8003a34:	08003b4d 	.word	0x08003b4d
 8003a38:	08003bcf 	.word	0x08003bcf
 8003a3c:	08003bcf 	.word	0x08003bcf
 8003a40:	08003bcf 	.word	0x08003bcf
 8003a44:	08003b8d 	.word	0x08003b8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fa5e 	bl	8003f10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0208 	orr.w	r2, r2, #8
 8003a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699a      	ldr	r2, [r3, #24]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0204 	bic.w	r2, r2, #4
 8003a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6999      	ldr	r1, [r3, #24]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	619a      	str	r2, [r3, #24]
      break;
 8003a86:	e0a3      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68b9      	ldr	r1, [r7, #8]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 face 	bl	8004030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699a      	ldr	r2, [r3, #24]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6999      	ldr	r1, [r3, #24]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	021a      	lsls	r2, r3, #8
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	619a      	str	r2, [r3, #24]
      break;
 8003ac8:	e082      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68b9      	ldr	r1, [r7, #8]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fb37 	bl	8004144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0208 	orr.w	r2, r2, #8
 8003ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69da      	ldr	r2, [r3, #28]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0204 	bic.w	r2, r2, #4
 8003af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	61da      	str	r2, [r3, #28]
      break;
 8003b08:	e062      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68b9      	ldr	r1, [r7, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fb9d 	bl	8004250 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69da      	ldr	r2, [r3, #28]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69d9      	ldr	r1, [r3, #28]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	021a      	lsls	r2, r3, #8
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	61da      	str	r2, [r3, #28]
      break;
 8003b4a:	e041      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fbe4 	bl	8004320 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0208 	orr.w	r2, r2, #8
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0204 	bic.w	r2, r2, #4
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b8a:	e021      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68b9      	ldr	r1, [r7, #8]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fc26 	bl	80043e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ba6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bcc:	e000      	b.n	8003bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003bce:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop

08003bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIM_ConfigClockSource+0x18>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e0b7      	b.n	8003d74 <HAL_TIM_ConfigClockSource+0x188>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4b57      	ldr	r3, [pc, #348]	; (8003d7c <HAL_TIM_ConfigClockSource+0x190>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c2a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b70      	cmp	r3, #112	; 0x70
 8003c3a:	d02e      	beq.n	8003c9a <HAL_TIM_ConfigClockSource+0xae>
 8003c3c:	2b70      	cmp	r3, #112	; 0x70
 8003c3e:	d812      	bhi.n	8003c66 <HAL_TIM_ConfigClockSource+0x7a>
 8003c40:	2b30      	cmp	r3, #48	; 0x30
 8003c42:	f000 8084 	beq.w	8003d4e <HAL_TIM_ConfigClockSource+0x162>
 8003c46:	2b30      	cmp	r3, #48	; 0x30
 8003c48:	d806      	bhi.n	8003c58 <HAL_TIM_ConfigClockSource+0x6c>
 8003c4a:	2b10      	cmp	r3, #16
 8003c4c:	d07f      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
 8003c4e:	2b20      	cmp	r3, #32
 8003c50:	d07d      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d07b      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c56:	e084      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003c58:	2b50      	cmp	r3, #80	; 0x50
 8003c5a:	d048      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x102>
 8003c5c:	2b60      	cmp	r3, #96	; 0x60
 8003c5e:	d056      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x122>
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d064      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8003c64:	e07d      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003c66:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c6a:	d070      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
 8003c6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003c70:	d809      	bhi.n	8003c86 <HAL_TIM_ConfigClockSource+0x9a>
 8003c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c76:	d027      	beq.n	8003cc8 <HAL_TIM_ConfigClockSource+0xdc>
 8003c78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7c:	d067      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c82:	d06d      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c84:	e06d      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8003c86:	4a3e      	ldr	r2, [pc, #248]	; (8003d80 <HAL_TIM_ConfigClockSource+0x194>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d060      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
 8003c8c:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <HAL_TIM_ConfigClockSource+0x198>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d05d      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
 8003c92:	4a3d      	ldr	r2, [pc, #244]	; (8003d88 <HAL_TIM_ConfigClockSource+0x19c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d05a      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x162>
      break;
 8003c98:	e063      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6899      	ldr	r1, [r3, #8]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f000 fc7d 	bl	80045a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cbc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	609a      	str	r2, [r3, #8]
      break;
 8003cc6:	e04c      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6899      	ldr	r1, [r3, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f000 fc66 	bl	80045a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cea:	609a      	str	r2, [r3, #8]
      break;
 8003cec:	e039      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 fbd6 	bl	80044ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2150      	movs	r1, #80	; 0x50
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fc30 	bl	800456c <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e029      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 fbf5 	bl	800450a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2160      	movs	r1, #96	; 0x60
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fc20 	bl	800456c <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e019      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 fbb6 	bl	80044ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2140      	movs	r1, #64	; 0x40
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fc10 	bl	800456c <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e009      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f000 fc07 	bl	800456c <TIM_ITRx_SetConfig>
      break;
 8003d5e:	e000      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003d60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	ffceff88 	.word	0xffceff88
 8003d80:	00100030 	.word	0x00100030
 8003d84:	00100040 	.word	0x00100040
 8003d88:	00100020 	.word	0x00100020

08003d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a40      	ldr	r2, [pc, #256]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfa:	d00f      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3d      	ldr	r2, [pc, #244]	; (8003ef4 <TIM_Base_SetConfig+0x118>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3c      	ldr	r2, [pc, #240]	; (8003ef8 <TIM_Base_SetConfig+0x11c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <TIM_Base_SetConfig+0x120>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3a      	ldr	r2, [pc, #232]	; (8003f00 <TIM_Base_SetConfig+0x124>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d108      	bne.n	8003e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2f      	ldr	r2, [pc, #188]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01f      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d01b      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2c      	ldr	r2, [pc, #176]	; (8003ef4 <TIM_Base_SetConfig+0x118>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d017      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a2b      	ldr	r2, [pc, #172]	; (8003ef8 <TIM_Base_SetConfig+0x11c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <TIM_Base_SetConfig+0x120>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00f      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <TIM_Base_SetConfig+0x124>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00b      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a28      	ldr	r2, [pc, #160]	; (8003f04 <TIM_Base_SetConfig+0x128>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a27      	ldr	r2, [pc, #156]	; (8003f08 <TIM_Base_SetConfig+0x12c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_Base_SetConfig+0x9a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <TIM_Base_SetConfig+0x130>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d108      	bne.n	8003e88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <TIM_Base_SetConfig+0x114>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d00f      	beq.n	8003ed4 <TIM_Base_SetConfig+0xf8>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <TIM_Base_SetConfig+0x124>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00b      	beq.n	8003ed4 <TIM_Base_SetConfig+0xf8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <TIM_Base_SetConfig+0x128>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d007      	beq.n	8003ed4 <TIM_Base_SetConfig+0xf8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <TIM_Base_SetConfig+0x12c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d003      	beq.n	8003ed4 <TIM_Base_SetConfig+0xf8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a0f      	ldr	r2, [pc, #60]	; (8003f0c <TIM_Base_SetConfig+0x130>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d103      	bne.n	8003edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	691a      	ldr	r2, [r3, #16]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	615a      	str	r2, [r3, #20]
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40010000 	.word	0x40010000
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	40000800 	.word	0x40000800
 8003efc:	40000c00 	.word	0x40000c00
 8003f00:	40010400 	.word	0x40010400
 8003f04:	40014000 	.word	0x40014000
 8003f08:	40014400 	.word	0x40014400
 8003f0c:	40014800 	.word	0x40014800

08003f10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	f023 0201 	bic.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4b37      	ldr	r3, [pc, #220]	; (8004018 <TIM_OC1_SetConfig+0x108>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0303 	bic.w	r3, r3, #3
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f023 0302 	bic.w	r3, r3, #2
 8003f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a2d      	ldr	r2, [pc, #180]	; (800401c <TIM_OC1_SetConfig+0x10c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00f      	beq.n	8003f8c <TIM_OC1_SetConfig+0x7c>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <TIM_OC1_SetConfig+0x110>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00b      	beq.n	8003f8c <TIM_OC1_SetConfig+0x7c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a2b      	ldr	r2, [pc, #172]	; (8004024 <TIM_OC1_SetConfig+0x114>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d007      	beq.n	8003f8c <TIM_OC1_SetConfig+0x7c>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <TIM_OC1_SetConfig+0x118>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d003      	beq.n	8003f8c <TIM_OC1_SetConfig+0x7c>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a29      	ldr	r2, [pc, #164]	; (800402c <TIM_OC1_SetConfig+0x11c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d10c      	bne.n	8003fa6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f023 0308 	bic.w	r3, r3, #8
 8003f92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 0304 	bic.w	r3, r3, #4
 8003fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <TIM_OC1_SetConfig+0x10c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00f      	beq.n	8003fce <TIM_OC1_SetConfig+0xbe>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a1b      	ldr	r2, [pc, #108]	; (8004020 <TIM_OC1_SetConfig+0x110>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <TIM_OC1_SetConfig+0xbe>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <TIM_OC1_SetConfig+0x114>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d007      	beq.n	8003fce <TIM_OC1_SetConfig+0xbe>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a19      	ldr	r2, [pc, #100]	; (8004028 <TIM_OC1_SetConfig+0x118>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <TIM_OC1_SetConfig+0xbe>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a18      	ldr	r2, [pc, #96]	; (800402c <TIM_OC1_SetConfig+0x11c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d111      	bne.n	8003ff2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	fffeff8f 	.word	0xfffeff8f
 800401c:	40010000 	.word	0x40010000
 8004020:	40010400 	.word	0x40010400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800

08004030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0210 	bic.w	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <TIM_OC2_SetConfig+0xfc>)
 800405c:	4013      	ands	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0320 	bic.w	r3, r3, #32
 800407a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a29      	ldr	r2, [pc, #164]	; (8004130 <TIM_OC2_SetConfig+0x100>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d003      	beq.n	8004098 <TIM_OC2_SetConfig+0x68>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a28      	ldr	r2, [pc, #160]	; (8004134 <TIM_OC2_SetConfig+0x104>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10d      	bne.n	80040b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <TIM_OC2_SetConfig+0x100>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00f      	beq.n	80040dc <TIM_OC2_SetConfig+0xac>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <TIM_OC2_SetConfig+0x104>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_OC2_SetConfig+0xac>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1c      	ldr	r2, [pc, #112]	; (8004138 <TIM_OC2_SetConfig+0x108>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_OC2_SetConfig+0xac>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1b      	ldr	r2, [pc, #108]	; (800413c <TIM_OC2_SetConfig+0x10c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC2_SetConfig+0xac>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <TIM_OC2_SetConfig+0x110>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d113      	bne.n	8004104 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	feff8fff 	.word	0xfeff8fff
 8004130:	40010000 	.word	0x40010000
 8004134:	40010400 	.word	0x40010400
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800

08004144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <TIM_OC3_SetConfig+0xf8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <TIM_OC3_SetConfig+0x66>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a26      	ldr	r2, [pc, #152]	; (8004240 <TIM_OC3_SetConfig+0xfc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d10d      	bne.n	80041c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a1c      	ldr	r2, [pc, #112]	; (800423c <TIM_OC3_SetConfig+0xf8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00f      	beq.n	80041ee <TIM_OC3_SetConfig+0xaa>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a1b      	ldr	r2, [pc, #108]	; (8004240 <TIM_OC3_SetConfig+0xfc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_OC3_SetConfig+0xaa>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <TIM_OC3_SetConfig+0x100>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_OC3_SetConfig+0xaa>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <TIM_OC3_SetConfig+0x104>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_OC3_SetConfig+0xaa>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a18      	ldr	r2, [pc, #96]	; (800424c <TIM_OC3_SetConfig+0x108>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d113      	bne.n	8004216 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40010000 	.word	0x40010000
 8004240:	40010400 	.word	0x40010400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004286:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	021b      	lsls	r3, r3, #8
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800429a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	031b      	lsls	r3, r3, #12
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a18      	ldr	r2, [pc, #96]	; (800430c <TIM_OC4_SetConfig+0xbc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00f      	beq.n	80042d0 <TIM_OC4_SetConfig+0x80>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <TIM_OC4_SetConfig+0xc0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00b      	beq.n	80042d0 <TIM_OC4_SetConfig+0x80>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a16      	ldr	r2, [pc, #88]	; (8004314 <TIM_OC4_SetConfig+0xc4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d007      	beq.n	80042d0 <TIM_OC4_SetConfig+0x80>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a15      	ldr	r2, [pc, #84]	; (8004318 <TIM_OC4_SetConfig+0xc8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_OC4_SetConfig+0x80>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a14      	ldr	r2, [pc, #80]	; (800431c <TIM_OC4_SetConfig+0xcc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d109      	bne.n	80042e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	019b      	lsls	r3, r3, #6
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	621a      	str	r2, [r3, #32]
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40010000 	.word	0x40010000
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800

08004320 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004360:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <TIM_OC5_SetConfig+0xb0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d00f      	beq.n	8004396 <TIM_OC5_SetConfig+0x76>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <TIM_OC5_SetConfig+0xb4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00b      	beq.n	8004396 <TIM_OC5_SetConfig+0x76>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <TIM_OC5_SetConfig+0xb8>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d007      	beq.n	8004396 <TIM_OC5_SetConfig+0x76>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <TIM_OC5_SetConfig+0xbc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d003      	beq.n	8004396 <TIM_OC5_SetConfig+0x76>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a13      	ldr	r2, [pc, #76]	; (80043e0 <TIM_OC5_SetConfig+0xc0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d109      	bne.n	80043aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	621a      	str	r2, [r3, #32]
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40014000 	.word	0x40014000
 80043dc:	40014400 	.word	0x40014400
 80043e0:	40014800 	.word	0x40014800

080043e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	051b      	lsls	r3, r3, #20
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a18      	ldr	r2, [pc, #96]	; (8004498 <TIM_OC6_SetConfig+0xb4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00f      	beq.n	800445c <TIM_OC6_SetConfig+0x78>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a17      	ldr	r2, [pc, #92]	; (800449c <TIM_OC6_SetConfig+0xb8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00b      	beq.n	800445c <TIM_OC6_SetConfig+0x78>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <TIM_OC6_SetConfig+0xbc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <TIM_OC6_SetConfig+0x78>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a15      	ldr	r2, [pc, #84]	; (80044a4 <TIM_OC6_SetConfig+0xc0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d003      	beq.n	800445c <TIM_OC6_SetConfig+0x78>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <TIM_OC6_SetConfig+0xc4>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d109      	bne.n	8004470 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004462:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	029b      	lsls	r3, r3, #10
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40010400 	.word	0x40010400
 80044a0:	40014000 	.word	0x40014000
 80044a4:	40014400 	.word	0x40014400
 80044a8:	40014800 	.word	0x40014800

080044ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f023 030a 	bic.w	r3, r3, #10
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800450a:	b480      	push	{r7}
 800450c:	b087      	sub	sp, #28
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0210 	bic.w	r2, r3, #16
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	031b      	lsls	r3, r3, #12
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004546:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	693a      	ldr	r2, [r7, #16]
 800454e:	4313      	orrs	r3, r2
 8004550:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	621a      	str	r2, [r3, #32]
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
	...

0800456c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <TIM_ITRx_SetConfig+0x38>)
 8004580:	4013      	ands	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	f043 0307 	orr.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	609a      	str	r2, [r3, #8]
}
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	ffcfff8f 	.word	0xffcfff8f

080045a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	371c      	adds	r7, #28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2201      	movs	r2, #1
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1a      	ldr	r2, [r3, #32]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	43db      	mvns	r3, r3
 800460a:	401a      	ands	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004648:	2302      	movs	r3, #2
 800464a:	e045      	b.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2202      	movs	r2, #2
 8004658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	; (80046e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d108      	bne.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004686:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004698:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40010000 	.word	0x40010000
 80046e8:	40010400 	.word	0x40010400

080046ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e042      	b.n	80047c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d106      	bne.n	8004752 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f003 fea9 	bl	80084a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2224      	movs	r2, #36	; 0x24
 8004756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0201 	bic.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f9c0 	bl	8004af0 <UART_SetConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e022      	b.n	80047c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f002 fb32 	bl	8006dec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f002 fbb9 	bl	8006f30 <UART_CheckIdleState>
 80047be:	4603      	mov	r3, r0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d118      	bne.n	800482a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d013      	beq.n	800482a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0320 	and.w	r3, r3, #32
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d009      	beq.n	800482a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 8145 	beq.w	8004aaa <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	4798      	blx	r3
      }
      return;
 8004828:	e13f      	b.n	8004aaa <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80e8 	beq.w	8004a02 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4ba1      	ldr	r3, [pc, #644]	; (8004abc <HAL_UART_IRQHandler+0x2f4>)
 8004836:	4013      	ands	r3, r2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	4ba0      	ldr	r3, [pc, #640]	; (8004ac0 <HAL_UART_IRQHandler+0x2f8>)
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 80dd 	beq.w	8004a02 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d010      	beq.n	8004874 <HAL_UART_IRQHandler+0xac>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2201      	movs	r2, #1
 8004862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d010      	beq.n	80048a0 <HAL_UART_IRQHandler+0xd8>
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2202      	movs	r2, #2
 800488e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d010      	beq.n	80048cc <HAL_UART_IRQHandler+0x104>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2204      	movs	r2, #4
 80048ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f043 0202 	orr.w	r2, r3, #2
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d015      	beq.n	8004902 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4b76      	ldr	r3, [pc, #472]	; (8004abc <HAL_UART_IRQHandler+0x2f4>)
 80048e4:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2208      	movs	r2, #8
 80048f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f043 0208 	orr.w	r2, r3, #8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d011      	beq.n	8004930 <HAL_UART_IRQHandler+0x168>
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00c      	beq.n	8004930 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800491e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004926:	f043 0220 	orr.w	r2, r3, #32
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80b9 	beq.w	8004aae <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f003 0320 	and.w	r3, r3, #32
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d004      	beq.n	800498a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004986:	2b00      	cmp	r3, #0
 8004988:	d031      	beq.n	80049ee <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f002 fb98 	bl	80070c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d123      	bne.n	80049e6 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d013      	beq.n	80049de <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049ba:	4a42      	ldr	r2, [pc, #264]	; (8004ac4 <HAL_UART_IRQHandler+0x2fc>)
 80049bc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7fb ffd4 	bl	8000970 <HAL_DMA_Abort_IT>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80049d8:	4610      	mov	r0, r2
 80049da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049dc:	e00f      	b.n	80049fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f87c 	bl	8004adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	e00b      	b.n	80049fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f878 	bl	8004adc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ec:	e007      	b.n	80049fe <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f874 	bl	8004adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80049fc:	e057      	b.n	8004aae <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fe:	bf00      	nop
    return;
 8004a00:	e055      	b.n	8004aae <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00d      	beq.n	8004a28 <HAL_UART_IRQHandler+0x260>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f002 fba1 	bl	8007168 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a26:	e045      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d012      	beq.n	8004a58 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d008      	beq.n	8004a58 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d031      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	4798      	blx	r3
    }
    return;
 8004a56:	e02c      	b.n	8004ab2 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <HAL_UART_IRQHandler+0x2ac>
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f002 fb61 	bl	8007134 <UART_EndTransmit_IT>
    return;
 8004a72:	e01f      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_UART_IRQHandler+0x2c8>
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f002 fb81 	bl	8007190 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a8e:	e011      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	da09      	bge.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f002 fb6b 	bl	800717c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aa6:	bf00      	nop
 8004aa8:	e004      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
      return;
 8004aaa:	bf00      	nop
 8004aac:	e002      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004aae:	bf00      	nop
 8004ab0:	e000      	b.n	8004ab4 <HAL_UART_IRQHandler+0x2ec>
    return;
 8004ab2:	bf00      	nop
  }
}
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	10000001 	.word	0x10000001
 8004ac0:	04000120 	.word	0x04000120
 8004ac4:	08007109 	.word	0x08007109

08004ac8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004af4:	b090      	sub	sp, #64	; 0x40
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b26:	4313      	orrs	r3, r2
 8004b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4bc1      	ldr	r3, [pc, #772]	; (8004e38 <UART_SetConfig+0x348>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4ab7      	ldr	r2, [pc, #732]	; (8004e3c <UART_SetConfig+0x34c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d004      	beq.n	8004b6e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	4bb2      	ldr	r3, [pc, #712]	; (8004e40 <UART_SetConfig+0x350>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b7e:	430b      	orrs	r3, r1
 8004b80:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	f023 010f 	bic.w	r1, r3, #15
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4aa9      	ldr	r2, [pc, #676]	; (8004e44 <UART_SetConfig+0x354>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d177      	bne.n	8004c92 <UART_SetConfig+0x1a2>
 8004ba2:	4ba9      	ldr	r3, [pc, #676]	; (8004e48 <UART_SetConfig+0x358>)
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004baa:	2b28      	cmp	r3, #40	; 0x28
 8004bac:	d86c      	bhi.n	8004c88 <UART_SetConfig+0x198>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0xc4>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004c59 	.word	0x08004c59
 8004bb8:	08004c89 	.word	0x08004c89
 8004bbc:	08004c89 	.word	0x08004c89
 8004bc0:	08004c89 	.word	0x08004c89
 8004bc4:	08004c89 	.word	0x08004c89
 8004bc8:	08004c89 	.word	0x08004c89
 8004bcc:	08004c89 	.word	0x08004c89
 8004bd0:	08004c89 	.word	0x08004c89
 8004bd4:	08004c61 	.word	0x08004c61
 8004bd8:	08004c89 	.word	0x08004c89
 8004bdc:	08004c89 	.word	0x08004c89
 8004be0:	08004c89 	.word	0x08004c89
 8004be4:	08004c89 	.word	0x08004c89
 8004be8:	08004c89 	.word	0x08004c89
 8004bec:	08004c89 	.word	0x08004c89
 8004bf0:	08004c89 	.word	0x08004c89
 8004bf4:	08004c69 	.word	0x08004c69
 8004bf8:	08004c89 	.word	0x08004c89
 8004bfc:	08004c89 	.word	0x08004c89
 8004c00:	08004c89 	.word	0x08004c89
 8004c04:	08004c89 	.word	0x08004c89
 8004c08:	08004c89 	.word	0x08004c89
 8004c0c:	08004c89 	.word	0x08004c89
 8004c10:	08004c89 	.word	0x08004c89
 8004c14:	08004c71 	.word	0x08004c71
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004c89 	.word	0x08004c89
 8004c2c:	08004c89 	.word	0x08004c89
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c79 	.word	0x08004c79
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c89 	.word	0x08004c89
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c89 	.word	0x08004c89
 8004c48:	08004c89 	.word	0x08004c89
 8004c4c:	08004c89 	.word	0x08004c89
 8004c50:	08004c89 	.word	0x08004c89
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	2301      	movs	r3, #1
 8004c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c5e:	e233      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004c60:	2304      	movs	r3, #4
 8004c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c66:	e22f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c6e:	e22b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004c70:	2310      	movs	r3, #16
 8004c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c76:	e227      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004c78:	2320      	movs	r3, #32
 8004c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c7e:	e223      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004c80:	2340      	movs	r3, #64	; 0x40
 8004c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c86:	e21f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004c8e:	bf00      	nop
 8004c90:	e21a      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a6d      	ldr	r2, [pc, #436]	; (8004e4c <UART_SetConfig+0x35c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d132      	bne.n	8004d02 <UART_SetConfig+0x212>
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <UART_SetConfig+0x358>)
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	2b05      	cmp	r3, #5
 8004ca6:	d827      	bhi.n	8004cf8 <UART_SetConfig+0x208>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0x1c0>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cd1 	.word	0x08004cd1
 8004cb8:	08004cd9 	.word	0x08004cd9
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cce:	e1fb      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cd6:	e1f7      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cde:	e1f3      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004ce6:	e1ef      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004ce8:	2320      	movs	r3, #32
 8004cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cee:	e1eb      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004cf0:	2340      	movs	r3, #64	; 0x40
 8004cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cf6:	e1e7      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004cfe:	bf00      	nop
 8004d00:	e1e2      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a52      	ldr	r2, [pc, #328]	; (8004e50 <UART_SetConfig+0x360>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d132      	bne.n	8004d72 <UART_SetConfig+0x282>
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <UART_SetConfig+0x358>)
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d827      	bhi.n	8004d68 <UART_SetConfig+0x278>
 8004d18:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <UART_SetConfig+0x230>)
 8004d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1e:	bf00      	nop
 8004d20:	08004d39 	.word	0x08004d39
 8004d24:	08004d41 	.word	0x08004d41
 8004d28:	08004d49 	.word	0x08004d49
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d3e:	e1c3      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d46:	e1bf      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d4e:	e1bb      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d56:	e1b7      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d58:	2320      	movs	r3, #32
 8004d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d5e:	e1b3      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d60:	2340      	movs	r3, #64	; 0x40
 8004d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d66:	e1af      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d68:	2380      	movs	r3, #128	; 0x80
 8004d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d6e:	bf00      	nop
 8004d70:	e1aa      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a37      	ldr	r2, [pc, #220]	; (8004e54 <UART_SetConfig+0x364>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d132      	bne.n	8004de2 <UART_SetConfig+0x2f2>
 8004d7c:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <UART_SetConfig+0x358>)
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	2b05      	cmp	r3, #5
 8004d86:	d827      	bhi.n	8004dd8 <UART_SetConfig+0x2e8>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <UART_SetConfig+0x2a0>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004da9 	.word	0x08004da9
 8004d94:	08004db1 	.word	0x08004db1
 8004d98:	08004db9 	.word	0x08004db9
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004dc9 	.word	0x08004dc9
 8004da4:	08004dd1 	.word	0x08004dd1
 8004da8:	2300      	movs	r3, #0
 8004daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dae:	e18b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004db0:	2304      	movs	r3, #4
 8004db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004db6:	e187      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004db8:	2308      	movs	r3, #8
 8004dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dbe:	e183      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dc6:	e17f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dce:	e17b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004dd0:	2340      	movs	r3, #64	; 0x40
 8004dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dd6:	e177      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004dde:	bf00      	nop
 8004de0:	e172      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <UART_SetConfig+0x368>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d144      	bne.n	8004e76 <UART_SetConfig+0x386>
 8004dec:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <UART_SetConfig+0x358>)
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	2b05      	cmp	r3, #5
 8004df6:	d839      	bhi.n	8004e6c <UART_SetConfig+0x37c>
 8004df8:	a201      	add	r2, pc, #4	; (adr r2, 8004e00 <UART_SetConfig+0x310>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e19 	.word	0x08004e19
 8004e04:	08004e21 	.word	0x08004e21
 8004e08:	08004e29 	.word	0x08004e29
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	08004e5d 	.word	0x08004e5d
 8004e14:	08004e65 	.word	0x08004e65
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e1e:	e153      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004e20:	2304      	movs	r3, #4
 8004e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e26:	e14f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004e28:	2308      	movs	r3, #8
 8004e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e2e:	e14b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004e30:	2310      	movs	r3, #16
 8004e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e36:	e147      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004e38:	cfff69f3 	.word	0xcfff69f3
 8004e3c:	58000c00 	.word	0x58000c00
 8004e40:	11fff4ff 	.word	0x11fff4ff
 8004e44:	40011000 	.word	0x40011000
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	40004400 	.word	0x40004400
 8004e50:	40004800 	.word	0x40004800
 8004e54:	40004c00 	.word	0x40004c00
 8004e58:	40005000 	.word	0x40005000
 8004e5c:	2320      	movs	r3, #32
 8004e5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e62:	e131      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004e64:	2340      	movs	r3, #64	; 0x40
 8004e66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e6a:	e12d      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e72:	bf00      	nop
 8004e74:	e128      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4ac3      	ldr	r2, [pc, #780]	; (8005188 <UART_SetConfig+0x698>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d178      	bne.n	8004f72 <UART_SetConfig+0x482>
 8004e80:	4bc2      	ldr	r3, [pc, #776]	; (800518c <UART_SetConfig+0x69c>)
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e88:	2b28      	cmp	r3, #40	; 0x28
 8004e8a:	d86d      	bhi.n	8004f68 <UART_SetConfig+0x478>
 8004e8c:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <UART_SetConfig+0x3a4>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004f39 	.word	0x08004f39
 8004e98:	08004f69 	.word	0x08004f69
 8004e9c:	08004f69 	.word	0x08004f69
 8004ea0:	08004f69 	.word	0x08004f69
 8004ea4:	08004f69 	.word	0x08004f69
 8004ea8:	08004f69 	.word	0x08004f69
 8004eac:	08004f69 	.word	0x08004f69
 8004eb0:	08004f69 	.word	0x08004f69
 8004eb4:	08004f41 	.word	0x08004f41
 8004eb8:	08004f69 	.word	0x08004f69
 8004ebc:	08004f69 	.word	0x08004f69
 8004ec0:	08004f69 	.word	0x08004f69
 8004ec4:	08004f69 	.word	0x08004f69
 8004ec8:	08004f69 	.word	0x08004f69
 8004ecc:	08004f69 	.word	0x08004f69
 8004ed0:	08004f69 	.word	0x08004f69
 8004ed4:	08004f49 	.word	0x08004f49
 8004ed8:	08004f69 	.word	0x08004f69
 8004edc:	08004f69 	.word	0x08004f69
 8004ee0:	08004f69 	.word	0x08004f69
 8004ee4:	08004f69 	.word	0x08004f69
 8004ee8:	08004f69 	.word	0x08004f69
 8004eec:	08004f69 	.word	0x08004f69
 8004ef0:	08004f69 	.word	0x08004f69
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	08004f69 	.word	0x08004f69
 8004efc:	08004f69 	.word	0x08004f69
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004f69 	.word	0x08004f69
 8004f08:	08004f69 	.word	0x08004f69
 8004f0c:	08004f69 	.word	0x08004f69
 8004f10:	08004f69 	.word	0x08004f69
 8004f14:	08004f59 	.word	0x08004f59
 8004f18:	08004f69 	.word	0x08004f69
 8004f1c:	08004f69 	.word	0x08004f69
 8004f20:	08004f69 	.word	0x08004f69
 8004f24:	08004f69 	.word	0x08004f69
 8004f28:	08004f69 	.word	0x08004f69
 8004f2c:	08004f69 	.word	0x08004f69
 8004f30:	08004f69 	.word	0x08004f69
 8004f34:	08004f61 	.word	0x08004f61
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f3e:	e0c3      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004f40:	2304      	movs	r3, #4
 8004f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f46:	e0bf      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f4e:	e0bb      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004f50:	2310      	movs	r3, #16
 8004f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f56:	e0b7      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004f58:	2320      	movs	r3, #32
 8004f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f5e:	e0b3      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004f60:	2340      	movs	r3, #64	; 0x40
 8004f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f66:	e0af      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004f6e:	bf00      	nop
 8004f70:	e0aa      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a86      	ldr	r2, [pc, #536]	; (8005190 <UART_SetConfig+0x6a0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d132      	bne.n	8004fe2 <UART_SetConfig+0x4f2>
 8004f7c:	4b83      	ldr	r3, [pc, #524]	; (800518c <UART_SetConfig+0x69c>)
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	2b05      	cmp	r3, #5
 8004f86:	d827      	bhi.n	8004fd8 <UART_SetConfig+0x4e8>
 8004f88:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x4a0>)
 8004f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8e:	bf00      	nop
 8004f90:	08004fa9 	.word	0x08004fa9
 8004f94:	08004fb1 	.word	0x08004fb1
 8004f98:	08004fb9 	.word	0x08004fb9
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fc9 	.word	0x08004fc9
 8004fa4:	08004fd1 	.word	0x08004fd1
 8004fa8:	2300      	movs	r3, #0
 8004faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fae:	e08b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004fb0:	2304      	movs	r3, #4
 8004fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fb6:	e087      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fbe:	e083      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fc6:	e07f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004fc8:	2320      	movs	r3, #32
 8004fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fce:	e07b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004fd0:	2340      	movs	r3, #64	; 0x40
 8004fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fd6:	e077      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fde:	bf00      	nop
 8004fe0:	e072      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a6b      	ldr	r2, [pc, #428]	; (8005194 <UART_SetConfig+0x6a4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d132      	bne.n	8005052 <UART_SetConfig+0x562>
 8004fec:	4b67      	ldr	r3, [pc, #412]	; (800518c <UART_SetConfig+0x69c>)
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	2b05      	cmp	r3, #5
 8004ff6:	d827      	bhi.n	8005048 <UART_SetConfig+0x558>
 8004ff8:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <UART_SetConfig+0x510>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	08005019 	.word	0x08005019
 8005004:	08005021 	.word	0x08005021
 8005008:	08005029 	.word	0x08005029
 800500c:	08005031 	.word	0x08005031
 8005010:	08005039 	.word	0x08005039
 8005014:	08005041 	.word	0x08005041
 8005018:	2300      	movs	r3, #0
 800501a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800501e:	e053      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005020:	2304      	movs	r3, #4
 8005022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005026:	e04f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005028:	2308      	movs	r3, #8
 800502a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800502e:	e04b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005030:	2310      	movs	r3, #16
 8005032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005036:	e047      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005038:	2320      	movs	r3, #32
 800503a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800503e:	e043      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005040:	2340      	movs	r3, #64	; 0x40
 8005042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005046:	e03f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800504e:	bf00      	nop
 8005050:	e03a      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a50      	ldr	r2, [pc, #320]	; (8005198 <UART_SetConfig+0x6a8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d132      	bne.n	80050c2 <UART_SetConfig+0x5d2>
 800505c:	4b4b      	ldr	r3, [pc, #300]	; (800518c <UART_SetConfig+0x69c>)
 800505e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	2b05      	cmp	r3, #5
 8005066:	d827      	bhi.n	80050b8 <UART_SetConfig+0x5c8>
 8005068:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <UART_SetConfig+0x580>)
 800506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506e:	bf00      	nop
 8005070:	08005089 	.word	0x08005089
 8005074:	08005091 	.word	0x08005091
 8005078:	08005099 	.word	0x08005099
 800507c:	080050a1 	.word	0x080050a1
 8005080:	080050a9 	.word	0x080050a9
 8005084:	080050b1 	.word	0x080050b1
 8005088:	2302      	movs	r3, #2
 800508a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800508e:	e01b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005090:	2304      	movs	r3, #4
 8005092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005096:	e017      	b.n	80050c8 <UART_SetConfig+0x5d8>
 8005098:	2308      	movs	r3, #8
 800509a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800509e:	e013      	b.n	80050c8 <UART_SetConfig+0x5d8>
 80050a0:	2310      	movs	r3, #16
 80050a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80050a6:	e00f      	b.n	80050c8 <UART_SetConfig+0x5d8>
 80050a8:	2320      	movs	r3, #32
 80050aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80050ae:	e00b      	b.n	80050c8 <UART_SetConfig+0x5d8>
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80050b6:	e007      	b.n	80050c8 <UART_SetConfig+0x5d8>
 80050b8:	2380      	movs	r3, #128	; 0x80
 80050ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <UART_SetConfig+0x5d8>
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a32      	ldr	r2, [pc, #200]	; (8005198 <UART_SetConfig+0x6a8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f040 86f7 	bne.w	8005ec2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80050d8:	2b08      	cmp	r3, #8
 80050da:	f000 80c0 	beq.w	800525e <UART_SetConfig+0x76e>
 80050de:	2b08      	cmp	r3, #8
 80050e0:	dc04      	bgt.n	80050ec <UART_SetConfig+0x5fc>
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d00c      	beq.n	8005100 <UART_SetConfig+0x610>
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d065      	beq.n	80051b6 <UART_SetConfig+0x6c6>
 80050ea:	e27a      	b.n	80055e2 <UART_SetConfig+0xaf2>
 80050ec:	2b20      	cmp	r3, #32
 80050ee:	f000 81b0 	beq.w	8005452 <UART_SetConfig+0x962>
 80050f2:	2b40      	cmp	r3, #64	; 0x40
 80050f4:	f000 821e 	beq.w	8005534 <UART_SetConfig+0xa44>
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	f000 8104 	beq.w	8005306 <UART_SetConfig+0x816>
 80050fe:	e270      	b.n	80055e2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005100:	f7fd fde4 	bl	8002ccc <HAL_RCCEx_GetD3PCLK1Freq>
 8005104:	4602      	mov	r2, r0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	d04e      	beq.n	80051ac <UART_SetConfig+0x6bc>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	2b01      	cmp	r3, #1
 8005114:	d048      	beq.n	80051a8 <UART_SetConfig+0x6b8>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b02      	cmp	r3, #2
 800511c:	d042      	beq.n	80051a4 <UART_SetConfig+0x6b4>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b03      	cmp	r3, #3
 8005124:	d03c      	beq.n	80051a0 <UART_SetConfig+0x6b0>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	2b04      	cmp	r3, #4
 800512c:	d036      	beq.n	800519c <UART_SetConfig+0x6ac>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b05      	cmp	r3, #5
 8005134:	d026      	beq.n	8005184 <UART_SetConfig+0x694>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b06      	cmp	r3, #6
 800513c:	d020      	beq.n	8005180 <UART_SetConfig+0x690>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	2b07      	cmp	r3, #7
 8005144:	d01a      	beq.n	800517c <UART_SetConfig+0x68c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b08      	cmp	r3, #8
 800514c:	d014      	beq.n	8005178 <UART_SetConfig+0x688>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b09      	cmp	r3, #9
 8005154:	d00e      	beq.n	8005174 <UART_SetConfig+0x684>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	2b0a      	cmp	r3, #10
 800515c:	d008      	beq.n	8005170 <UART_SetConfig+0x680>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2b0b      	cmp	r3, #11
 8005164:	d102      	bne.n	800516c <UART_SetConfig+0x67c>
 8005166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800516a:	e020      	b.n	80051ae <UART_SetConfig+0x6be>
 800516c:	2301      	movs	r3, #1
 800516e:	e01e      	b.n	80051ae <UART_SetConfig+0x6be>
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	e01c      	b.n	80051ae <UART_SetConfig+0x6be>
 8005174:	2340      	movs	r3, #64	; 0x40
 8005176:	e01a      	b.n	80051ae <UART_SetConfig+0x6be>
 8005178:	2320      	movs	r3, #32
 800517a:	e018      	b.n	80051ae <UART_SetConfig+0x6be>
 800517c:	2310      	movs	r3, #16
 800517e:	e016      	b.n	80051ae <UART_SetConfig+0x6be>
 8005180:	230c      	movs	r3, #12
 8005182:	e014      	b.n	80051ae <UART_SetConfig+0x6be>
 8005184:	230a      	movs	r3, #10
 8005186:	e012      	b.n	80051ae <UART_SetConfig+0x6be>
 8005188:	40011400 	.word	0x40011400
 800518c:	58024400 	.word	0x58024400
 8005190:	40007800 	.word	0x40007800
 8005194:	40007c00 	.word	0x40007c00
 8005198:	58000c00 	.word	0x58000c00
 800519c:	2308      	movs	r3, #8
 800519e:	e006      	b.n	80051ae <UART_SetConfig+0x6be>
 80051a0:	2306      	movs	r3, #6
 80051a2:	e004      	b.n	80051ae <UART_SetConfig+0x6be>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e002      	b.n	80051ae <UART_SetConfig+0x6be>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e000      	b.n	80051ae <UART_SetConfig+0x6be>
 80051ac:	2301      	movs	r3, #1
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80051b4:	e219      	b.n	80055ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051b6:	f107 0318 	add.w	r3, r7, #24
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fd fd9c 	bl	8002cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d044      	beq.n	8005254 <UART_SetConfig+0x764>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d03e      	beq.n	8005250 <UART_SetConfig+0x760>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d038      	beq.n	800524c <UART_SetConfig+0x75c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d032      	beq.n	8005248 <UART_SetConfig+0x758>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d02c      	beq.n	8005244 <UART_SetConfig+0x754>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	2b05      	cmp	r3, #5
 80051f0:	d026      	beq.n	8005240 <UART_SetConfig+0x750>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d020      	beq.n	800523c <UART_SetConfig+0x74c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b07      	cmp	r3, #7
 8005200:	d01a      	beq.n	8005238 <UART_SetConfig+0x748>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	2b08      	cmp	r3, #8
 8005208:	d014      	beq.n	8005234 <UART_SetConfig+0x744>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	2b09      	cmp	r3, #9
 8005210:	d00e      	beq.n	8005230 <UART_SetConfig+0x740>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b0a      	cmp	r3, #10
 8005218:	d008      	beq.n	800522c <UART_SetConfig+0x73c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2b0b      	cmp	r3, #11
 8005220:	d102      	bne.n	8005228 <UART_SetConfig+0x738>
 8005222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005226:	e016      	b.n	8005256 <UART_SetConfig+0x766>
 8005228:	2301      	movs	r3, #1
 800522a:	e014      	b.n	8005256 <UART_SetConfig+0x766>
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	e012      	b.n	8005256 <UART_SetConfig+0x766>
 8005230:	2340      	movs	r3, #64	; 0x40
 8005232:	e010      	b.n	8005256 <UART_SetConfig+0x766>
 8005234:	2320      	movs	r3, #32
 8005236:	e00e      	b.n	8005256 <UART_SetConfig+0x766>
 8005238:	2310      	movs	r3, #16
 800523a:	e00c      	b.n	8005256 <UART_SetConfig+0x766>
 800523c:	230c      	movs	r3, #12
 800523e:	e00a      	b.n	8005256 <UART_SetConfig+0x766>
 8005240:	230a      	movs	r3, #10
 8005242:	e008      	b.n	8005256 <UART_SetConfig+0x766>
 8005244:	2308      	movs	r3, #8
 8005246:	e006      	b.n	8005256 <UART_SetConfig+0x766>
 8005248:	2306      	movs	r3, #6
 800524a:	e004      	b.n	8005256 <UART_SetConfig+0x766>
 800524c:	2304      	movs	r3, #4
 800524e:	e002      	b.n	8005256 <UART_SetConfig+0x766>
 8005250:	2302      	movs	r3, #2
 8005252:	e000      	b.n	8005256 <UART_SetConfig+0x766>
 8005254:	2301      	movs	r3, #1
 8005256:	fbb2 f3f3 	udiv	r3, r2, r3
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800525c:	e1c5      	b.n	80055ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fe94 	bl	8002f90 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d044      	beq.n	80052fc <UART_SetConfig+0x80c>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	2b01      	cmp	r3, #1
 8005278:	d03e      	beq.n	80052f8 <UART_SetConfig+0x808>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b02      	cmp	r3, #2
 8005280:	d038      	beq.n	80052f4 <UART_SetConfig+0x804>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2b03      	cmp	r3, #3
 8005288:	d032      	beq.n	80052f0 <UART_SetConfig+0x800>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528e:	2b04      	cmp	r3, #4
 8005290:	d02c      	beq.n	80052ec <UART_SetConfig+0x7fc>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b05      	cmp	r3, #5
 8005298:	d026      	beq.n	80052e8 <UART_SetConfig+0x7f8>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d020      	beq.n	80052e4 <UART_SetConfig+0x7f4>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	d01a      	beq.n	80052e0 <UART_SetConfig+0x7f0>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d014      	beq.n	80052dc <UART_SetConfig+0x7ec>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	2b09      	cmp	r3, #9
 80052b8:	d00e      	beq.n	80052d8 <UART_SetConfig+0x7e8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	2b0a      	cmp	r3, #10
 80052c0:	d008      	beq.n	80052d4 <UART_SetConfig+0x7e4>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	2b0b      	cmp	r3, #11
 80052c8:	d102      	bne.n	80052d0 <UART_SetConfig+0x7e0>
 80052ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052ce:	e016      	b.n	80052fe <UART_SetConfig+0x80e>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e014      	b.n	80052fe <UART_SetConfig+0x80e>
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	e012      	b.n	80052fe <UART_SetConfig+0x80e>
 80052d8:	2340      	movs	r3, #64	; 0x40
 80052da:	e010      	b.n	80052fe <UART_SetConfig+0x80e>
 80052dc:	2320      	movs	r3, #32
 80052de:	e00e      	b.n	80052fe <UART_SetConfig+0x80e>
 80052e0:	2310      	movs	r3, #16
 80052e2:	e00c      	b.n	80052fe <UART_SetConfig+0x80e>
 80052e4:	230c      	movs	r3, #12
 80052e6:	e00a      	b.n	80052fe <UART_SetConfig+0x80e>
 80052e8:	230a      	movs	r3, #10
 80052ea:	e008      	b.n	80052fe <UART_SetConfig+0x80e>
 80052ec:	2308      	movs	r3, #8
 80052ee:	e006      	b.n	80052fe <UART_SetConfig+0x80e>
 80052f0:	2306      	movs	r3, #6
 80052f2:	e004      	b.n	80052fe <UART_SetConfig+0x80e>
 80052f4:	2304      	movs	r3, #4
 80052f6:	e002      	b.n	80052fe <UART_SetConfig+0x80e>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e000      	b.n	80052fe <UART_SetConfig+0x80e>
 80052fc:	2301      	movs	r3, #1
 80052fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005304:	e171      	b.n	80055ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005306:	4b7a      	ldr	r3, [pc, #488]	; (80054f0 <UART_SetConfig+0xa00>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d054      	beq.n	80053bc <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005312:	4b77      	ldr	r3, [pc, #476]	; (80054f0 <UART_SetConfig+0xa00>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	08db      	lsrs	r3, r3, #3
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	4a75      	ldr	r2, [pc, #468]	; (80054f4 <UART_SetConfig+0xa04>)
 800531e:	40da      	lsrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	d044      	beq.n	80053b2 <UART_SetConfig+0x8c2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	2b01      	cmp	r3, #1
 800532e:	d03e      	beq.n	80053ae <UART_SetConfig+0x8be>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005334:	2b02      	cmp	r3, #2
 8005336:	d038      	beq.n	80053aa <UART_SetConfig+0x8ba>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2b03      	cmp	r3, #3
 800533e:	d032      	beq.n	80053a6 <UART_SetConfig+0x8b6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	2b04      	cmp	r3, #4
 8005346:	d02c      	beq.n	80053a2 <UART_SetConfig+0x8b2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	2b05      	cmp	r3, #5
 800534e:	d026      	beq.n	800539e <UART_SetConfig+0x8ae>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005354:	2b06      	cmp	r3, #6
 8005356:	d020      	beq.n	800539a <UART_SetConfig+0x8aa>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535c:	2b07      	cmp	r3, #7
 800535e:	d01a      	beq.n	8005396 <UART_SetConfig+0x8a6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	2b08      	cmp	r3, #8
 8005366:	d014      	beq.n	8005392 <UART_SetConfig+0x8a2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	2b09      	cmp	r3, #9
 800536e:	d00e      	beq.n	800538e <UART_SetConfig+0x89e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	2b0a      	cmp	r3, #10
 8005376:	d008      	beq.n	800538a <UART_SetConfig+0x89a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	2b0b      	cmp	r3, #11
 800537e:	d102      	bne.n	8005386 <UART_SetConfig+0x896>
 8005380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005384:	e016      	b.n	80053b4 <UART_SetConfig+0x8c4>
 8005386:	2301      	movs	r3, #1
 8005388:	e014      	b.n	80053b4 <UART_SetConfig+0x8c4>
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	e012      	b.n	80053b4 <UART_SetConfig+0x8c4>
 800538e:	2340      	movs	r3, #64	; 0x40
 8005390:	e010      	b.n	80053b4 <UART_SetConfig+0x8c4>
 8005392:	2320      	movs	r3, #32
 8005394:	e00e      	b.n	80053b4 <UART_SetConfig+0x8c4>
 8005396:	2310      	movs	r3, #16
 8005398:	e00c      	b.n	80053b4 <UART_SetConfig+0x8c4>
 800539a:	230c      	movs	r3, #12
 800539c:	e00a      	b.n	80053b4 <UART_SetConfig+0x8c4>
 800539e:	230a      	movs	r3, #10
 80053a0:	e008      	b.n	80053b4 <UART_SetConfig+0x8c4>
 80053a2:	2308      	movs	r3, #8
 80053a4:	e006      	b.n	80053b4 <UART_SetConfig+0x8c4>
 80053a6:	2306      	movs	r3, #6
 80053a8:	e004      	b.n	80053b4 <UART_SetConfig+0x8c4>
 80053aa:	2304      	movs	r3, #4
 80053ac:	e002      	b.n	80053b4 <UART_SetConfig+0x8c4>
 80053ae:	2302      	movs	r3, #2
 80053b0:	e000      	b.n	80053b4 <UART_SetConfig+0x8c4>
 80053b2:	2301      	movs	r3, #1
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80053ba:	e116      	b.n	80055ea <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d043      	beq.n	800544c <UART_SetConfig+0x95c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d03d      	beq.n	8005448 <UART_SetConfig+0x958>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d037      	beq.n	8005444 <UART_SetConfig+0x954>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d031      	beq.n	8005440 <UART_SetConfig+0x950>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d02b      	beq.n	800543c <UART_SetConfig+0x94c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b05      	cmp	r3, #5
 80053ea:	d025      	beq.n	8005438 <UART_SetConfig+0x948>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	d01f      	beq.n	8005434 <UART_SetConfig+0x944>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b07      	cmp	r3, #7
 80053fa:	d019      	beq.n	8005430 <UART_SetConfig+0x940>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b08      	cmp	r3, #8
 8005402:	d013      	beq.n	800542c <UART_SetConfig+0x93c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b09      	cmp	r3, #9
 800540a:	d00d      	beq.n	8005428 <UART_SetConfig+0x938>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b0a      	cmp	r3, #10
 8005412:	d007      	beq.n	8005424 <UART_SetConfig+0x934>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b0b      	cmp	r3, #11
 800541a:	d101      	bne.n	8005420 <UART_SetConfig+0x930>
 800541c:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <UART_SetConfig+0xa08>)
 800541e:	e016      	b.n	800544e <UART_SetConfig+0x95e>
 8005420:	4b34      	ldr	r3, [pc, #208]	; (80054f4 <UART_SetConfig+0xa04>)
 8005422:	e014      	b.n	800544e <UART_SetConfig+0x95e>
 8005424:	4b35      	ldr	r3, [pc, #212]	; (80054fc <UART_SetConfig+0xa0c>)
 8005426:	e012      	b.n	800544e <UART_SetConfig+0x95e>
 8005428:	4b35      	ldr	r3, [pc, #212]	; (8005500 <UART_SetConfig+0xa10>)
 800542a:	e010      	b.n	800544e <UART_SetConfig+0x95e>
 800542c:	4b35      	ldr	r3, [pc, #212]	; (8005504 <UART_SetConfig+0xa14>)
 800542e:	e00e      	b.n	800544e <UART_SetConfig+0x95e>
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <UART_SetConfig+0xa18>)
 8005432:	e00c      	b.n	800544e <UART_SetConfig+0x95e>
 8005434:	4b35      	ldr	r3, [pc, #212]	; (800550c <UART_SetConfig+0xa1c>)
 8005436:	e00a      	b.n	800544e <UART_SetConfig+0x95e>
 8005438:	4b35      	ldr	r3, [pc, #212]	; (8005510 <UART_SetConfig+0xa20>)
 800543a:	e008      	b.n	800544e <UART_SetConfig+0x95e>
 800543c:	4b35      	ldr	r3, [pc, #212]	; (8005514 <UART_SetConfig+0xa24>)
 800543e:	e006      	b.n	800544e <UART_SetConfig+0x95e>
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <UART_SetConfig+0xa28>)
 8005442:	e004      	b.n	800544e <UART_SetConfig+0x95e>
 8005444:	4b35      	ldr	r3, [pc, #212]	; (800551c <UART_SetConfig+0xa2c>)
 8005446:	e002      	b.n	800544e <UART_SetConfig+0x95e>
 8005448:	4b35      	ldr	r3, [pc, #212]	; (8005520 <UART_SetConfig+0xa30>)
 800544a:	e000      	b.n	800544e <UART_SetConfig+0x95e>
 800544c:	4b29      	ldr	r3, [pc, #164]	; (80054f4 <UART_SetConfig+0xa04>)
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005450:	e0cb      	b.n	80055ea <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2b00      	cmp	r3, #0
 8005458:	d046      	beq.n	80054e8 <UART_SetConfig+0x9f8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2b01      	cmp	r3, #1
 8005460:	d040      	beq.n	80054e4 <UART_SetConfig+0x9f4>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	2b02      	cmp	r3, #2
 8005468:	d03a      	beq.n	80054e0 <UART_SetConfig+0x9f0>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2b03      	cmp	r3, #3
 8005470:	d034      	beq.n	80054dc <UART_SetConfig+0x9ec>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	2b04      	cmp	r3, #4
 8005478:	d02e      	beq.n	80054d8 <UART_SetConfig+0x9e8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b05      	cmp	r3, #5
 8005480:	d028      	beq.n	80054d4 <UART_SetConfig+0x9e4>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b06      	cmp	r3, #6
 8005488:	d022      	beq.n	80054d0 <UART_SetConfig+0x9e0>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800548e:	2b07      	cmp	r3, #7
 8005490:	d01c      	beq.n	80054cc <UART_SetConfig+0x9dc>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b08      	cmp	r3, #8
 8005498:	d016      	beq.n	80054c8 <UART_SetConfig+0x9d8>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549e:	2b09      	cmp	r3, #9
 80054a0:	d00f      	beq.n	80054c2 <UART_SetConfig+0x9d2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	2b0a      	cmp	r3, #10
 80054a8:	d008      	beq.n	80054bc <UART_SetConfig+0x9cc>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	2b0b      	cmp	r3, #11
 80054b0:	d102      	bne.n	80054b8 <UART_SetConfig+0x9c8>
 80054b2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80054b6:	e018      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054b8:	4b13      	ldr	r3, [pc, #76]	; (8005508 <UART_SetConfig+0xa18>)
 80054ba:	e016      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054bc:	f647 2312 	movw	r3, #31250	; 0x7a12
 80054c0:	e013      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054c2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80054c6:	e010      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054c8:	4b16      	ldr	r3, [pc, #88]	; (8005524 <UART_SetConfig+0xa34>)
 80054ca:	e00e      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054cc:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <UART_SetConfig+0xa08>)
 80054ce:	e00c      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054d0:	4b15      	ldr	r3, [pc, #84]	; (8005528 <UART_SetConfig+0xa38>)
 80054d2:	e00a      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054d4:	4b15      	ldr	r3, [pc, #84]	; (800552c <UART_SetConfig+0xa3c>)
 80054d6:	e008      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054d8:	4b08      	ldr	r3, [pc, #32]	; (80054fc <UART_SetConfig+0xa0c>)
 80054da:	e006      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054dc:	4b14      	ldr	r3, [pc, #80]	; (8005530 <UART_SetConfig+0xa40>)
 80054de:	e004      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054e0:	4b07      	ldr	r3, [pc, #28]	; (8005500 <UART_SetConfig+0xa10>)
 80054e2:	e002      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054e4:	4b07      	ldr	r3, [pc, #28]	; (8005504 <UART_SetConfig+0xa14>)
 80054e6:	e000      	b.n	80054ea <UART_SetConfig+0x9fa>
 80054e8:	4b07      	ldr	r3, [pc, #28]	; (8005508 <UART_SetConfig+0xa18>)
 80054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ec:	e07d      	b.n	80055ea <UART_SetConfig+0xafa>
 80054ee:	bf00      	nop
 80054f0:	58024400 	.word	0x58024400
 80054f4:	03d09000 	.word	0x03d09000
 80054f8:	0003d090 	.word	0x0003d090
 80054fc:	0007a120 	.word	0x0007a120
 8005500:	000f4240 	.word	0x000f4240
 8005504:	001e8480 	.word	0x001e8480
 8005508:	003d0900 	.word	0x003d0900
 800550c:	00516155 	.word	0x00516155
 8005510:	0061a800 	.word	0x0061a800
 8005514:	007a1200 	.word	0x007a1200
 8005518:	00a2c2aa 	.word	0x00a2c2aa
 800551c:	00f42400 	.word	0x00f42400
 8005520:	01e84800 	.word	0x01e84800
 8005524:	0001e848 	.word	0x0001e848
 8005528:	00051615 	.word	0x00051615
 800552c:	00061a80 	.word	0x00061a80
 8005530:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	d04e      	beq.n	80055da <UART_SetConfig+0xaea>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	2b01      	cmp	r3, #1
 8005542:	d047      	beq.n	80055d4 <UART_SetConfig+0xae4>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2b02      	cmp	r3, #2
 800554a:	d040      	beq.n	80055ce <UART_SetConfig+0xade>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2b03      	cmp	r3, #3
 8005552:	d039      	beq.n	80055c8 <UART_SetConfig+0xad8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	2b04      	cmp	r3, #4
 800555a:	d032      	beq.n	80055c2 <UART_SetConfig+0xad2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	2b05      	cmp	r3, #5
 8005562:	d02b      	beq.n	80055bc <UART_SetConfig+0xacc>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	2b06      	cmp	r3, #6
 800556a:	d024      	beq.n	80055b6 <UART_SetConfig+0xac6>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	2b07      	cmp	r3, #7
 8005572:	d01d      	beq.n	80055b0 <UART_SetConfig+0xac0>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	2b08      	cmp	r3, #8
 800557a:	d016      	beq.n	80055aa <UART_SetConfig+0xaba>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	2b09      	cmp	r3, #9
 8005582:	d00f      	beq.n	80055a4 <UART_SetConfig+0xab4>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b0a      	cmp	r3, #10
 800558a:	d008      	beq.n	800559e <UART_SetConfig+0xaae>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b0b      	cmp	r3, #11
 8005592:	d101      	bne.n	8005598 <UART_SetConfig+0xaa8>
 8005594:	2380      	movs	r3, #128	; 0x80
 8005596:	e022      	b.n	80055de <UART_SetConfig+0xaee>
 8005598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559c:	e01f      	b.n	80055de <UART_SetConfig+0xaee>
 800559e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a2:	e01c      	b.n	80055de <UART_SetConfig+0xaee>
 80055a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a8:	e019      	b.n	80055de <UART_SetConfig+0xaee>
 80055aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ae:	e016      	b.n	80055de <UART_SetConfig+0xaee>
 80055b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055b4:	e013      	b.n	80055de <UART_SetConfig+0xaee>
 80055b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80055ba:	e010      	b.n	80055de <UART_SetConfig+0xaee>
 80055bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80055c0:	e00d      	b.n	80055de <UART_SetConfig+0xaee>
 80055c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055c6:	e00a      	b.n	80055de <UART_SetConfig+0xaee>
 80055c8:	f241 5355 	movw	r3, #5461	; 0x1555
 80055cc:	e007      	b.n	80055de <UART_SetConfig+0xaee>
 80055ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055d2:	e004      	b.n	80055de <UART_SetConfig+0xaee>
 80055d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055d8:	e001      	b.n	80055de <UART_SetConfig+0xaee>
 80055da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055e0:	e003      	b.n	80055ea <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80055e8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f001 83e8 	beq.w	8006dc2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4613      	mov	r3, r2
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	4413      	add	r3, r2
 80055fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fe:	429a      	cmp	r2, r3
 8005600:	d305      	bcc.n	800560e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560a:	429a      	cmp	r2, r3
 800560c:	d904      	bls.n	8005618 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005614:	f001 bbd5 	b.w	8006dc2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8005618:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800561c:	2b08      	cmp	r3, #8
 800561e:	f000 8154 	beq.w	80058ca <UART_SetConfig+0xdda>
 8005622:	2b08      	cmp	r3, #8
 8005624:	dc06      	bgt.n	8005634 <UART_SetConfig+0xb44>
 8005626:	2b02      	cmp	r3, #2
 8005628:	d00f      	beq.n	800564a <UART_SetConfig+0xb5a>
 800562a:	2b04      	cmp	r3, #4
 800562c:	f000 80ac 	beq.w	8005788 <UART_SetConfig+0xc98>
 8005630:	f000 bc30 	b.w	8005e94 <UART_SetConfig+0x13a4>
 8005634:	2b20      	cmp	r3, #32
 8005636:	f000 832d 	beq.w	8005c94 <UART_SetConfig+0x11a4>
 800563a:	2b40      	cmp	r3, #64	; 0x40
 800563c:	f000 83a5 	beq.w	8005d8a <UART_SetConfig+0x129a>
 8005640:	2b10      	cmp	r3, #16
 8005642:	f000 81e3 	beq.w	8005a0c <UART_SetConfig+0xf1c>
 8005646:	f000 bc25 	b.w	8005e94 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800564a:	f7fd fb3f 	bl	8002ccc <HAL_RCCEx_GetD3PCLK1Freq>
 800564e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	4618      	mov	r0, r3
 8005654:	f04f 0100 	mov.w	r1, #0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	d067      	beq.n	8005730 <UART_SetConfig+0xc40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	2b01      	cmp	r3, #1
 8005666:	d05e      	beq.n	8005726 <UART_SetConfig+0xc36>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	2b02      	cmp	r3, #2
 800566e:	d055      	beq.n	800571c <UART_SetConfig+0xc2c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b03      	cmp	r3, #3
 8005676:	d04c      	beq.n	8005712 <UART_SetConfig+0xc22>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567c:	2b04      	cmp	r3, #4
 800567e:	d043      	beq.n	8005708 <UART_SetConfig+0xc18>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005684:	2b05      	cmp	r3, #5
 8005686:	d03a      	beq.n	80056fe <UART_SetConfig+0xc0e>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	2b06      	cmp	r3, #6
 800568e:	d031      	beq.n	80056f4 <UART_SetConfig+0xc04>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2b07      	cmp	r3, #7
 8005696:	d028      	beq.n	80056ea <UART_SetConfig+0xbfa>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	2b08      	cmp	r3, #8
 800569e:	d01f      	beq.n	80056e0 <UART_SetConfig+0xbf0>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	2b09      	cmp	r3, #9
 80056a6:	d016      	beq.n	80056d6 <UART_SetConfig+0xbe6>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	2b0a      	cmp	r3, #10
 80056ae:	d00d      	beq.n	80056cc <UART_SetConfig+0xbdc>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	2b0b      	cmp	r3, #11
 80056b6:	d104      	bne.n	80056c2 <UART_SetConfig+0xbd2>
 80056b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056bc:	f04f 0400 	mov.w	r4, #0
 80056c0:	e03a      	b.n	8005738 <UART_SetConfig+0xc48>
 80056c2:	f04f 0301 	mov.w	r3, #1
 80056c6:	f04f 0400 	mov.w	r4, #0
 80056ca:	e035      	b.n	8005738 <UART_SetConfig+0xc48>
 80056cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80056d0:	f04f 0400 	mov.w	r4, #0
 80056d4:	e030      	b.n	8005738 <UART_SetConfig+0xc48>
 80056d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80056da:	f04f 0400 	mov.w	r4, #0
 80056de:	e02b      	b.n	8005738 <UART_SetConfig+0xc48>
 80056e0:	f04f 0320 	mov.w	r3, #32
 80056e4:	f04f 0400 	mov.w	r4, #0
 80056e8:	e026      	b.n	8005738 <UART_SetConfig+0xc48>
 80056ea:	f04f 0310 	mov.w	r3, #16
 80056ee:	f04f 0400 	mov.w	r4, #0
 80056f2:	e021      	b.n	8005738 <UART_SetConfig+0xc48>
 80056f4:	f04f 030c 	mov.w	r3, #12
 80056f8:	f04f 0400 	mov.w	r4, #0
 80056fc:	e01c      	b.n	8005738 <UART_SetConfig+0xc48>
 80056fe:	f04f 030a 	mov.w	r3, #10
 8005702:	f04f 0400 	mov.w	r4, #0
 8005706:	e017      	b.n	8005738 <UART_SetConfig+0xc48>
 8005708:	f04f 0308 	mov.w	r3, #8
 800570c:	f04f 0400 	mov.w	r4, #0
 8005710:	e012      	b.n	8005738 <UART_SetConfig+0xc48>
 8005712:	f04f 0306 	mov.w	r3, #6
 8005716:	f04f 0400 	mov.w	r4, #0
 800571a:	e00d      	b.n	8005738 <UART_SetConfig+0xc48>
 800571c:	f04f 0304 	mov.w	r3, #4
 8005720:	f04f 0400 	mov.w	r4, #0
 8005724:	e008      	b.n	8005738 <UART_SetConfig+0xc48>
 8005726:	f04f 0302 	mov.w	r3, #2
 800572a:	f04f 0400 	mov.w	r4, #0
 800572e:	e003      	b.n	8005738 <UART_SetConfig+0xc48>
 8005730:	f04f 0301 	mov.w	r3, #1
 8005734:	f04f 0400 	mov.w	r4, #0
 8005738:	461a      	mov	r2, r3
 800573a:	4623      	mov	r3, r4
 800573c:	f7fa fdcc 	bl	80002d8 <__aeabi_uldivmod>
 8005740:	4603      	mov	r3, r0
 8005742:	460c      	mov	r4, r1
 8005744:	4619      	mov	r1, r3
 8005746:	4622      	mov	r2, r4
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	f04f 0400 	mov.w	r4, #0
 8005750:	0214      	lsls	r4, r2, #8
 8005752:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005756:	020b      	lsls	r3, r1, #8
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6852      	ldr	r2, [r2, #4]
 800575c:	0852      	lsrs	r2, r2, #1
 800575e:	4611      	mov	r1, r2
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	eb13 0b01 	adds.w	fp, r3, r1
 8005768:	eb44 0c02 	adc.w	ip, r4, r2
 800576c:	4658      	mov	r0, fp
 800576e:	4661      	mov	r1, ip
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f04f 0400 	mov.w	r4, #0
 8005778:	461a      	mov	r2, r3
 800577a:	4623      	mov	r3, r4
 800577c:	f7fa fdac 	bl	80002d8 <__aeabi_uldivmod>
 8005780:	4603      	mov	r3, r0
 8005782:	460c      	mov	r4, r1
 8005784:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005786:	e389      	b.n	8005e9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005788:	f107 0318 	add.w	r3, r7, #24
 800578c:	4618      	mov	r0, r3
 800578e:	f7fd fab3 	bl	8002cf8 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4618      	mov	r0, r3
 8005796:	f04f 0100 	mov.w	r1, #0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d067      	beq.n	8005872 <UART_SetConfig+0xd82>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d05e      	beq.n	8005868 <UART_SetConfig+0xd78>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d055      	beq.n	800585e <UART_SetConfig+0xd6e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d04c      	beq.n	8005854 <UART_SetConfig+0xd64>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d043      	beq.n	800584a <UART_SetConfig+0xd5a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d03a      	beq.n	8005840 <UART_SetConfig+0xd50>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	2b06      	cmp	r3, #6
 80057d0:	d031      	beq.n	8005836 <UART_SetConfig+0xd46>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	2b07      	cmp	r3, #7
 80057d8:	d028      	beq.n	800582c <UART_SetConfig+0xd3c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d01f      	beq.n	8005822 <UART_SetConfig+0xd32>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	d016      	beq.n	8005818 <UART_SetConfig+0xd28>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ee:	2b0a      	cmp	r3, #10
 80057f0:	d00d      	beq.n	800580e <UART_SetConfig+0xd1e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b0b      	cmp	r3, #11
 80057f8:	d104      	bne.n	8005804 <UART_SetConfig+0xd14>
 80057fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80057fe:	f04f 0400 	mov.w	r4, #0
 8005802:	e03a      	b.n	800587a <UART_SetConfig+0xd8a>
 8005804:	f04f 0301 	mov.w	r3, #1
 8005808:	f04f 0400 	mov.w	r4, #0
 800580c:	e035      	b.n	800587a <UART_SetConfig+0xd8a>
 800580e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005812:	f04f 0400 	mov.w	r4, #0
 8005816:	e030      	b.n	800587a <UART_SetConfig+0xd8a>
 8005818:	f04f 0340 	mov.w	r3, #64	; 0x40
 800581c:	f04f 0400 	mov.w	r4, #0
 8005820:	e02b      	b.n	800587a <UART_SetConfig+0xd8a>
 8005822:	f04f 0320 	mov.w	r3, #32
 8005826:	f04f 0400 	mov.w	r4, #0
 800582a:	e026      	b.n	800587a <UART_SetConfig+0xd8a>
 800582c:	f04f 0310 	mov.w	r3, #16
 8005830:	f04f 0400 	mov.w	r4, #0
 8005834:	e021      	b.n	800587a <UART_SetConfig+0xd8a>
 8005836:	f04f 030c 	mov.w	r3, #12
 800583a:	f04f 0400 	mov.w	r4, #0
 800583e:	e01c      	b.n	800587a <UART_SetConfig+0xd8a>
 8005840:	f04f 030a 	mov.w	r3, #10
 8005844:	f04f 0400 	mov.w	r4, #0
 8005848:	e017      	b.n	800587a <UART_SetConfig+0xd8a>
 800584a:	f04f 0308 	mov.w	r3, #8
 800584e:	f04f 0400 	mov.w	r4, #0
 8005852:	e012      	b.n	800587a <UART_SetConfig+0xd8a>
 8005854:	f04f 0306 	mov.w	r3, #6
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	e00d      	b.n	800587a <UART_SetConfig+0xd8a>
 800585e:	f04f 0304 	mov.w	r3, #4
 8005862:	f04f 0400 	mov.w	r4, #0
 8005866:	e008      	b.n	800587a <UART_SetConfig+0xd8a>
 8005868:	f04f 0302 	mov.w	r3, #2
 800586c:	f04f 0400 	mov.w	r4, #0
 8005870:	e003      	b.n	800587a <UART_SetConfig+0xd8a>
 8005872:	f04f 0301 	mov.w	r3, #1
 8005876:	f04f 0400 	mov.w	r4, #0
 800587a:	461a      	mov	r2, r3
 800587c:	4623      	mov	r3, r4
 800587e:	f7fa fd2b 	bl	80002d8 <__aeabi_uldivmod>
 8005882:	4603      	mov	r3, r0
 8005884:	460c      	mov	r4, r1
 8005886:	4619      	mov	r1, r3
 8005888:	4622      	mov	r2, r4
 800588a:	f04f 0300 	mov.w	r3, #0
 800588e:	f04f 0400 	mov.w	r4, #0
 8005892:	0214      	lsls	r4, r2, #8
 8005894:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005898:	020b      	lsls	r3, r1, #8
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6852      	ldr	r2, [r2, #4]
 800589e:	0852      	lsrs	r2, r2, #1
 80058a0:	4611      	mov	r1, r2
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	eb13 0b01 	adds.w	fp, r3, r1
 80058aa:	eb44 0c02 	adc.w	ip, r4, r2
 80058ae:	4658      	mov	r0, fp
 80058b0:	4661      	mov	r1, ip
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f04f 0400 	mov.w	r4, #0
 80058ba:	461a      	mov	r2, r3
 80058bc:	4623      	mov	r3, r4
 80058be:	f7fa fd0b 	bl	80002d8 <__aeabi_uldivmod>
 80058c2:	4603      	mov	r3, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80058c8:	e2e8      	b.n	8005e9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058ca:	f107 030c 	add.w	r3, r7, #12
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fd fb5e 	bl	8002f90 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d067      	beq.n	80059b4 <UART_SetConfig+0xec4>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d05e      	beq.n	80059aa <UART_SetConfig+0xeba>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d055      	beq.n	80059a0 <UART_SetConfig+0xeb0>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d04c      	beq.n	8005996 <UART_SetConfig+0xea6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	2b04      	cmp	r3, #4
 8005902:	d043      	beq.n	800598c <UART_SetConfig+0xe9c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	2b05      	cmp	r3, #5
 800590a:	d03a      	beq.n	8005982 <UART_SetConfig+0xe92>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b06      	cmp	r3, #6
 8005912:	d031      	beq.n	8005978 <UART_SetConfig+0xe88>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	2b07      	cmp	r3, #7
 800591a:	d028      	beq.n	800596e <UART_SetConfig+0xe7e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	2b08      	cmp	r3, #8
 8005922:	d01f      	beq.n	8005964 <UART_SetConfig+0xe74>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	2b09      	cmp	r3, #9
 800592a:	d016      	beq.n	800595a <UART_SetConfig+0xe6a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	2b0a      	cmp	r3, #10
 8005932:	d00d      	beq.n	8005950 <UART_SetConfig+0xe60>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	2b0b      	cmp	r3, #11
 800593a:	d104      	bne.n	8005946 <UART_SetConfig+0xe56>
 800593c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005940:	f04f 0400 	mov.w	r4, #0
 8005944:	e03a      	b.n	80059bc <UART_SetConfig+0xecc>
 8005946:	f04f 0301 	mov.w	r3, #1
 800594a:	f04f 0400 	mov.w	r4, #0
 800594e:	e035      	b.n	80059bc <UART_SetConfig+0xecc>
 8005950:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005954:	f04f 0400 	mov.w	r4, #0
 8005958:	e030      	b.n	80059bc <UART_SetConfig+0xecc>
 800595a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800595e:	f04f 0400 	mov.w	r4, #0
 8005962:	e02b      	b.n	80059bc <UART_SetConfig+0xecc>
 8005964:	f04f 0320 	mov.w	r3, #32
 8005968:	f04f 0400 	mov.w	r4, #0
 800596c:	e026      	b.n	80059bc <UART_SetConfig+0xecc>
 800596e:	f04f 0310 	mov.w	r3, #16
 8005972:	f04f 0400 	mov.w	r4, #0
 8005976:	e021      	b.n	80059bc <UART_SetConfig+0xecc>
 8005978:	f04f 030c 	mov.w	r3, #12
 800597c:	f04f 0400 	mov.w	r4, #0
 8005980:	e01c      	b.n	80059bc <UART_SetConfig+0xecc>
 8005982:	f04f 030a 	mov.w	r3, #10
 8005986:	f04f 0400 	mov.w	r4, #0
 800598a:	e017      	b.n	80059bc <UART_SetConfig+0xecc>
 800598c:	f04f 0308 	mov.w	r3, #8
 8005990:	f04f 0400 	mov.w	r4, #0
 8005994:	e012      	b.n	80059bc <UART_SetConfig+0xecc>
 8005996:	f04f 0306 	mov.w	r3, #6
 800599a:	f04f 0400 	mov.w	r4, #0
 800599e:	e00d      	b.n	80059bc <UART_SetConfig+0xecc>
 80059a0:	f04f 0304 	mov.w	r3, #4
 80059a4:	f04f 0400 	mov.w	r4, #0
 80059a8:	e008      	b.n	80059bc <UART_SetConfig+0xecc>
 80059aa:	f04f 0302 	mov.w	r3, #2
 80059ae:	f04f 0400 	mov.w	r4, #0
 80059b2:	e003      	b.n	80059bc <UART_SetConfig+0xecc>
 80059b4:	f04f 0301 	mov.w	r3, #1
 80059b8:	f04f 0400 	mov.w	r4, #0
 80059bc:	461a      	mov	r2, r3
 80059be:	4623      	mov	r3, r4
 80059c0:	f7fa fc8a 	bl	80002d8 <__aeabi_uldivmod>
 80059c4:	4603      	mov	r3, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	4619      	mov	r1, r3
 80059ca:	4622      	mov	r2, r4
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	f04f 0400 	mov.w	r4, #0
 80059d4:	0214      	lsls	r4, r2, #8
 80059d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80059da:	020b      	lsls	r3, r1, #8
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6852      	ldr	r2, [r2, #4]
 80059e0:	0852      	lsrs	r2, r2, #1
 80059e2:	4611      	mov	r1, r2
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	eb13 0b01 	adds.w	fp, r3, r1
 80059ec:	eb44 0c02 	adc.w	ip, r4, r2
 80059f0:	4658      	mov	r0, fp
 80059f2:	4661      	mov	r1, ip
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f04f 0400 	mov.w	r4, #0
 80059fc:	461a      	mov	r2, r3
 80059fe:	4623      	mov	r3, r4
 8005a00:	f7fa fc6a 	bl	80002d8 <__aeabi_uldivmod>
 8005a04:	4603      	mov	r3, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a0a:	e247      	b.n	8005e9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a0c:	4b96      	ldr	r3, [pc, #600]	; (8005c68 <UART_SetConfig+0x1178>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80a3 	beq.w	8005b60 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a1a:	4b93      	ldr	r3, [pc, #588]	; (8005c68 <UART_SetConfig+0x1178>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	08db      	lsrs	r3, r3, #3
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	4a91      	ldr	r2, [pc, #580]	; (8005c6c <UART_SetConfig+0x117c>)
 8005a26:	fa22 f303 	lsr.w	r3, r2, r3
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f04f 0100 	mov.w	r1, #0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d067      	beq.n	8005b08 <UART_SetConfig+0x1018>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d05e      	beq.n	8005afe <UART_SetConfig+0x100e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d055      	beq.n	8005af4 <UART_SetConfig+0x1004>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	2b03      	cmp	r3, #3
 8005a4e:	d04c      	beq.n	8005aea <UART_SetConfig+0xffa>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d043      	beq.n	8005ae0 <UART_SetConfig+0xff0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2b05      	cmp	r3, #5
 8005a5e:	d03a      	beq.n	8005ad6 <UART_SetConfig+0xfe6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	2b06      	cmp	r3, #6
 8005a66:	d031      	beq.n	8005acc <UART_SetConfig+0xfdc>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	2b07      	cmp	r3, #7
 8005a6e:	d028      	beq.n	8005ac2 <UART_SetConfig+0xfd2>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	d01f      	beq.n	8005ab8 <UART_SetConfig+0xfc8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	2b09      	cmp	r3, #9
 8005a7e:	d016      	beq.n	8005aae <UART_SetConfig+0xfbe>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	2b0a      	cmp	r3, #10
 8005a86:	d00d      	beq.n	8005aa4 <UART_SetConfig+0xfb4>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	2b0b      	cmp	r3, #11
 8005a8e:	d104      	bne.n	8005a9a <UART_SetConfig+0xfaa>
 8005a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a94:	f04f 0400 	mov.w	r4, #0
 8005a98:	e03a      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005a9a:	f04f 0301 	mov.w	r3, #1
 8005a9e:	f04f 0400 	mov.w	r4, #0
 8005aa2:	e035      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005aa4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005aa8:	f04f 0400 	mov.w	r4, #0
 8005aac:	e030      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005aae:	f04f 0340 	mov.w	r3, #64	; 0x40
 8005ab2:	f04f 0400 	mov.w	r4, #0
 8005ab6:	e02b      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005ab8:	f04f 0320 	mov.w	r3, #32
 8005abc:	f04f 0400 	mov.w	r4, #0
 8005ac0:	e026      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005ac2:	f04f 0310 	mov.w	r3, #16
 8005ac6:	f04f 0400 	mov.w	r4, #0
 8005aca:	e021      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005acc:	f04f 030c 	mov.w	r3, #12
 8005ad0:	f04f 0400 	mov.w	r4, #0
 8005ad4:	e01c      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005ad6:	f04f 030a 	mov.w	r3, #10
 8005ada:	f04f 0400 	mov.w	r4, #0
 8005ade:	e017      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005ae0:	f04f 0308 	mov.w	r3, #8
 8005ae4:	f04f 0400 	mov.w	r4, #0
 8005ae8:	e012      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005aea:	f04f 0306 	mov.w	r3, #6
 8005aee:	f04f 0400 	mov.w	r4, #0
 8005af2:	e00d      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005af4:	f04f 0304 	mov.w	r3, #4
 8005af8:	f04f 0400 	mov.w	r4, #0
 8005afc:	e008      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005afe:	f04f 0302 	mov.w	r3, #2
 8005b02:	f04f 0400 	mov.w	r4, #0
 8005b06:	e003      	b.n	8005b10 <UART_SetConfig+0x1020>
 8005b08:	f04f 0301 	mov.w	r3, #1
 8005b0c:	f04f 0400 	mov.w	r4, #0
 8005b10:	461a      	mov	r2, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	f7fa fbe0 	bl	80002d8 <__aeabi_uldivmod>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	4622      	mov	r2, r4
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	f04f 0400 	mov.w	r4, #0
 8005b28:	0214      	lsls	r4, r2, #8
 8005b2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005b2e:	020b      	lsls	r3, r1, #8
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6852      	ldr	r2, [r2, #4]
 8005b34:	0852      	lsrs	r2, r2, #1
 8005b36:	4611      	mov	r1, r2
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	eb13 0b01 	adds.w	fp, r3, r1
 8005b40:	eb44 0c02 	adc.w	ip, r4, r2
 8005b44:	4658      	mov	r0, fp
 8005b46:	4661      	mov	r1, ip
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f04f 0400 	mov.w	r4, #0
 8005b50:	461a      	mov	r2, r3
 8005b52:	4623      	mov	r3, r4
 8005b54:	f7fa fbc0 	bl	80002d8 <__aeabi_uldivmod>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8005b5e:	e19d      	b.n	8005e9c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d05b      	beq.n	8005c20 <UART_SetConfig+0x1130>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d053      	beq.n	8005c18 <UART_SetConfig+0x1128>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d04b      	beq.n	8005c10 <UART_SetConfig+0x1120>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d043      	beq.n	8005c08 <UART_SetConfig+0x1118>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d03b      	beq.n	8005c00 <UART_SetConfig+0x1110>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d033      	beq.n	8005bf8 <UART_SetConfig+0x1108>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d02b      	beq.n	8005bf0 <UART_SetConfig+0x1100>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b07      	cmp	r3, #7
 8005b9e:	d023      	beq.n	8005be8 <UART_SetConfig+0x10f8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d01b      	beq.n	8005be0 <UART_SetConfig+0x10f0>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d013      	beq.n	8005bd8 <UART_SetConfig+0x10e8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b0a      	cmp	r3, #10
 8005bb6:	d00b      	beq.n	8005bd0 <UART_SetConfig+0x10e0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	2b0b      	cmp	r3, #11
 8005bbe:	d103      	bne.n	8005bc8 <UART_SetConfig+0x10d8>
 8005bc0:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <UART_SetConfig+0x117c>)
 8005bc2:	f04f 0400 	mov.w	r4, #0
 8005bc6:	e02e      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <UART_SetConfig+0x1180>)
 8005bca:	f04f 0403 	mov.w	r4, #3
 8005bce:	e02a      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005bd0:	4b28      	ldr	r3, [pc, #160]	; (8005c74 <UART_SetConfig+0x1184>)
 8005bd2:	f04f 0400 	mov.w	r4, #0
 8005bd6:	e026      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005bd8:	4b27      	ldr	r3, [pc, #156]	; (8005c78 <UART_SetConfig+0x1188>)
 8005bda:	f04f 0400 	mov.w	r4, #0
 8005bde:	e022      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005be0:	4b26      	ldr	r3, [pc, #152]	; (8005c7c <UART_SetConfig+0x118c>)
 8005be2:	f04f 0400 	mov.w	r4, #0
 8005be6:	e01e      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005be8:	4b25      	ldr	r3, [pc, #148]	; (8005c80 <UART_SetConfig+0x1190>)
 8005bea:	f04f 0400 	mov.w	r4, #0
 8005bee:	e01a      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005bf0:	a419      	add	r4, pc, #100	; (adr r4, 8005c58 <UART_SetConfig+0x1168>)
 8005bf2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005bf6:	e016      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005bf8:	4b22      	ldr	r3, [pc, #136]	; (8005c84 <UART_SetConfig+0x1194>)
 8005bfa:	f04f 0400 	mov.w	r4, #0
 8005bfe:	e012      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <UART_SetConfig+0x1198>)
 8005c02:	f04f 0400 	mov.w	r4, #0
 8005c06:	e00e      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005c08:	a415      	add	r4, pc, #84	; (adr r4, 8005c60 <UART_SetConfig+0x1170>)
 8005c0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005c0e:	e00a      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005c10:	4b1e      	ldr	r3, [pc, #120]	; (8005c8c <UART_SetConfig+0x119c>)
 8005c12:	f04f 0400 	mov.w	r4, #0
 8005c16:	e006      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005c18:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <UART_SetConfig+0x11a0>)
 8005c1a:	f04f 0401 	mov.w	r4, #1
 8005c1e:	e002      	b.n	8005c26 <UART_SetConfig+0x1136>
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <UART_SetConfig+0x1180>)
 8005c22:	f04f 0403 	mov.w	r4, #3
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6852      	ldr	r2, [r2, #4]
 8005c2a:	0852      	lsrs	r2, r2, #1
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	f04f 0200 	mov.w	r2, #0
 8005c32:	eb13 0b01 	adds.w	fp, r3, r1
 8005c36:	eb44 0c02 	adc.w	ip, r4, r2
 8005c3a:	4658      	mov	r0, fp
 8005c3c:	4661      	mov	r1, ip
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f04f 0400 	mov.w	r4, #0
 8005c46:	461a      	mov	r2, r3
 8005c48:	4623      	mov	r3, r4
 8005c4a:	f7fa fb45 	bl	80002d8 <__aeabi_uldivmod>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	460c      	mov	r4, r1
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c54:	e122      	b.n	8005e9c <UART_SetConfig+0x13ac>
 8005c56:	bf00      	nop
 8005c58:	51615500 	.word	0x51615500
 8005c5c:	00000000 	.word	0x00000000
 8005c60:	a2c2aa00 	.word	0xa2c2aa00
 8005c64:	00000000 	.word	0x00000000
 8005c68:	58024400 	.word	0x58024400
 8005c6c:	03d09000 	.word	0x03d09000
 8005c70:	d0900000 	.word	0xd0900000
 8005c74:	07a12000 	.word	0x07a12000
 8005c78:	0f424000 	.word	0x0f424000
 8005c7c:	1e848000 	.word	0x1e848000
 8005c80:	3d090000 	.word	0x3d090000
 8005c84:	61a80000 	.word	0x61a80000
 8005c88:	7a120000 	.word	0x7a120000
 8005c8c:	f4240000 	.word	0xf4240000
 8005c90:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05b      	beq.n	8005d54 <UART_SetConfig+0x1264>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d053      	beq.n	8005d4c <UART_SetConfig+0x125c>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d04b      	beq.n	8005d44 <UART_SetConfig+0x1254>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b03      	cmp	r3, #3
 8005cb2:	d043      	beq.n	8005d3c <UART_SetConfig+0x124c>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	2b04      	cmp	r3, #4
 8005cba:	d03b      	beq.n	8005d34 <UART_SetConfig+0x1244>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b05      	cmp	r3, #5
 8005cc2:	d033      	beq.n	8005d2c <UART_SetConfig+0x123c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc8:	2b06      	cmp	r3, #6
 8005cca:	d02b      	beq.n	8005d24 <UART_SetConfig+0x1234>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	2b07      	cmp	r3, #7
 8005cd2:	d023      	beq.n	8005d1c <UART_SetConfig+0x122c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d01b      	beq.n	8005d14 <UART_SetConfig+0x1224>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b09      	cmp	r3, #9
 8005ce2:	d013      	beq.n	8005d0c <UART_SetConfig+0x121c>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b0a      	cmp	r3, #10
 8005cea:	d00b      	beq.n	8005d04 <UART_SetConfig+0x1214>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b0b      	cmp	r3, #11
 8005cf2:	d103      	bne.n	8005cfc <UART_SetConfig+0x120c>
 8005cf4:	4bc0      	ldr	r3, [pc, #768]	; (8005ff8 <UART_SetConfig+0x1508>)
 8005cf6:	f04f 0400 	mov.w	r4, #0
 8005cfa:	e02e      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005cfc:	4bbf      	ldr	r3, [pc, #764]	; (8005ffc <UART_SetConfig+0x150c>)
 8005cfe:	f04f 0400 	mov.w	r4, #0
 8005d02:	e02a      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d04:	4bbe      	ldr	r3, [pc, #760]	; (8006000 <UART_SetConfig+0x1510>)
 8005d06:	f04f 0400 	mov.w	r4, #0
 8005d0a:	e026      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d0c:	4bbd      	ldr	r3, [pc, #756]	; (8006004 <UART_SetConfig+0x1514>)
 8005d0e:	f04f 0400 	mov.w	r4, #0
 8005d12:	e022      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d14:	4bbc      	ldr	r3, [pc, #752]	; (8006008 <UART_SetConfig+0x1518>)
 8005d16:	f04f 0400 	mov.w	r4, #0
 8005d1a:	e01e      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d1c:	4bbb      	ldr	r3, [pc, #748]	; (800600c <UART_SetConfig+0x151c>)
 8005d1e:	f04f 0400 	mov.w	r4, #0
 8005d22:	e01a      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d24:	a4b0      	add	r4, pc, #704	; (adr r4, 8005fe8 <UART_SetConfig+0x14f8>)
 8005d26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d2a:	e016      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d2c:	4bb8      	ldr	r3, [pc, #736]	; (8006010 <UART_SetConfig+0x1520>)
 8005d2e:	f04f 0400 	mov.w	r4, #0
 8005d32:	e012      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d34:	4bb7      	ldr	r3, [pc, #732]	; (8006014 <UART_SetConfig+0x1524>)
 8005d36:	f04f 0400 	mov.w	r4, #0
 8005d3a:	e00e      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d3c:	a4ac      	add	r4, pc, #688	; (adr r4, 8005ff0 <UART_SetConfig+0x1500>)
 8005d3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d42:	e00a      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d44:	4bb4      	ldr	r3, [pc, #720]	; (8006018 <UART_SetConfig+0x1528>)
 8005d46:	f04f 0400 	mov.w	r4, #0
 8005d4a:	e006      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d4c:	4bb3      	ldr	r3, [pc, #716]	; (800601c <UART_SetConfig+0x152c>)
 8005d4e:	f04f 0400 	mov.w	r4, #0
 8005d52:	e002      	b.n	8005d5a <UART_SetConfig+0x126a>
 8005d54:	4ba9      	ldr	r3, [pc, #676]	; (8005ffc <UART_SetConfig+0x150c>)
 8005d56:	f04f 0400 	mov.w	r4, #0
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6852      	ldr	r2, [r2, #4]
 8005d5e:	0852      	lsrs	r2, r2, #1
 8005d60:	4611      	mov	r1, r2
 8005d62:	f04f 0200 	mov.w	r2, #0
 8005d66:	eb13 0b01 	adds.w	fp, r3, r1
 8005d6a:	eb44 0c02 	adc.w	ip, r4, r2
 8005d6e:	4658      	mov	r0, fp
 8005d70:	4661      	mov	r1, ip
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f04f 0400 	mov.w	r4, #0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	f7fa faab 	bl	80002d8 <__aeabi_uldivmod>
 8005d82:	4603      	mov	r3, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d88:	e088      	b.n	8005e9c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d064      	beq.n	8005e5c <UART_SetConfig+0x136c>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d05b      	beq.n	8005e52 <UART_SetConfig+0x1362>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d052      	beq.n	8005e48 <UART_SetConfig+0x1358>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d04a      	beq.n	8005e40 <UART_SetConfig+0x1350>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d041      	beq.n	8005e36 <UART_SetConfig+0x1346>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d039      	beq.n	8005e2e <UART_SetConfig+0x133e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	2b06      	cmp	r3, #6
 8005dc0:	d031      	beq.n	8005e26 <UART_SetConfig+0x1336>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc6:	2b07      	cmp	r3, #7
 8005dc8:	d028      	beq.n	8005e1c <UART_SetConfig+0x132c>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	2b08      	cmp	r3, #8
 8005dd0:	d01f      	beq.n	8005e12 <UART_SetConfig+0x1322>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	2b09      	cmp	r3, #9
 8005dd8:	d016      	beq.n	8005e08 <UART_SetConfig+0x1318>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	2b0a      	cmp	r3, #10
 8005de0:	d00d      	beq.n	8005dfe <UART_SetConfig+0x130e>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	2b0b      	cmp	r3, #11
 8005de8:	d104      	bne.n	8005df4 <UART_SetConfig+0x1304>
 8005dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dee:	f04f 0400 	mov.w	r4, #0
 8005df2:	e037      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005df4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005df8:	f04f 0400 	mov.w	r4, #0
 8005dfc:	e032      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005dfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e02:	f04f 0400 	mov.w	r4, #0
 8005e06:	e02d      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e0c:	f04f 0400 	mov.w	r4, #0
 8005e10:	e028      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e16:	f04f 0400 	mov.w	r4, #0
 8005e1a:	e023      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e1c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005e20:	f04f 0400 	mov.w	r4, #0
 8005e24:	e01e      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e26:	4b7e      	ldr	r3, [pc, #504]	; (8006020 <UART_SetConfig+0x1530>)
 8005e28:	f04f 0400 	mov.w	r4, #0
 8005e2c:	e01a      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e2e:	4b7d      	ldr	r3, [pc, #500]	; (8006024 <UART_SetConfig+0x1534>)
 8005e30:	f04f 0400 	mov.w	r4, #0
 8005e34:	e016      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005e3a:	f04f 0400 	mov.w	r4, #0
 8005e3e:	e011      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e40:	4b79      	ldr	r3, [pc, #484]	; (8006028 <UART_SetConfig+0x1538>)
 8005e42:	f04f 0400 	mov.w	r4, #0
 8005e46:	e00d      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e4c:	f04f 0400 	mov.w	r4, #0
 8005e50:	e008      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e56:	f04f 0400 	mov.w	r4, #0
 8005e5a:	e003      	b.n	8005e64 <UART_SetConfig+0x1374>
 8005e5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005e60:	f04f 0400 	mov.w	r4, #0
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6852      	ldr	r2, [r2, #4]
 8005e68:	0852      	lsrs	r2, r2, #1
 8005e6a:	4611      	mov	r1, r2
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	eb13 0b01 	adds.w	fp, r3, r1
 8005e74:	eb44 0c02 	adc.w	ip, r4, r2
 8005e78:	4658      	mov	r0, fp
 8005e7a:	4661      	mov	r1, ip
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f04f 0400 	mov.w	r4, #0
 8005e84:	461a      	mov	r2, r3
 8005e86:	4623      	mov	r3, r4
 8005e88:	f7fa fa26 	bl	80002d8 <__aeabi_uldivmod>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e92:	e003      	b.n	8005e9c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8005e9a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ea2:	d309      	bcc.n	8005eb8 <UART_SetConfig+0x13c8>
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eaa:	d205      	bcs.n	8005eb8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	f000 bf85 	b.w	8006dc2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	f000 bf80 	b.w	8006dc2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eca:	f040 83da 	bne.w	8006682 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8005ece:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ed2:	2b40      	cmp	r3, #64	; 0x40
 8005ed4:	f200 83b3 	bhi.w	800663e <UART_SetConfig+0x1b4e>
 8005ed8:	a201      	add	r2, pc, #4	; (adr r2, 8005ee0 <UART_SetConfig+0x13f0>)
 8005eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ede:	bf00      	nop
 8005ee0:	0800602d 	.word	0x0800602d
 8005ee4:	080060e5 	.word	0x080060e5
 8005ee8:	0800663f 	.word	0x0800663f
 8005eec:	0800663f 	.word	0x0800663f
 8005ef0:	0800619d 	.word	0x0800619d
 8005ef4:	0800663f 	.word	0x0800663f
 8005ef8:	0800663f 	.word	0x0800663f
 8005efc:	0800663f 	.word	0x0800663f
 8005f00:	08006259 	.word	0x08006259
 8005f04:	0800663f 	.word	0x0800663f
 8005f08:	0800663f 	.word	0x0800663f
 8005f0c:	0800663f 	.word	0x0800663f
 8005f10:	0800663f 	.word	0x0800663f
 8005f14:	0800663f 	.word	0x0800663f
 8005f18:	0800663f 	.word	0x0800663f
 8005f1c:	0800663f 	.word	0x0800663f
 8005f20:	08006315 	.word	0x08006315
 8005f24:	0800663f 	.word	0x0800663f
 8005f28:	0800663f 	.word	0x0800663f
 8005f2c:	0800663f 	.word	0x0800663f
 8005f30:	0800663f 	.word	0x0800663f
 8005f34:	0800663f 	.word	0x0800663f
 8005f38:	0800663f 	.word	0x0800663f
 8005f3c:	0800663f 	.word	0x0800663f
 8005f40:	0800663f 	.word	0x0800663f
 8005f44:	0800663f 	.word	0x0800663f
 8005f48:	0800663f 	.word	0x0800663f
 8005f4c:	0800663f 	.word	0x0800663f
 8005f50:	0800663f 	.word	0x0800663f
 8005f54:	0800663f 	.word	0x0800663f
 8005f58:	0800663f 	.word	0x0800663f
 8005f5c:	0800663f 	.word	0x0800663f
 8005f60:	08006487 	.word	0x08006487
 8005f64:	0800663f 	.word	0x0800663f
 8005f68:	0800663f 	.word	0x0800663f
 8005f6c:	0800663f 	.word	0x0800663f
 8005f70:	0800663f 	.word	0x0800663f
 8005f74:	0800663f 	.word	0x0800663f
 8005f78:	0800663f 	.word	0x0800663f
 8005f7c:	0800663f 	.word	0x0800663f
 8005f80:	0800663f 	.word	0x0800663f
 8005f84:	0800663f 	.word	0x0800663f
 8005f88:	0800663f 	.word	0x0800663f
 8005f8c:	0800663f 	.word	0x0800663f
 8005f90:	0800663f 	.word	0x0800663f
 8005f94:	0800663f 	.word	0x0800663f
 8005f98:	0800663f 	.word	0x0800663f
 8005f9c:	0800663f 	.word	0x0800663f
 8005fa0:	0800663f 	.word	0x0800663f
 8005fa4:	0800663f 	.word	0x0800663f
 8005fa8:	0800663f 	.word	0x0800663f
 8005fac:	0800663f 	.word	0x0800663f
 8005fb0:	0800663f 	.word	0x0800663f
 8005fb4:	0800663f 	.word	0x0800663f
 8005fb8:	0800663f 	.word	0x0800663f
 8005fbc:	0800663f 	.word	0x0800663f
 8005fc0:	0800663f 	.word	0x0800663f
 8005fc4:	0800663f 	.word	0x0800663f
 8005fc8:	0800663f 	.word	0x0800663f
 8005fcc:	0800663f 	.word	0x0800663f
 8005fd0:	0800663f 	.word	0x0800663f
 8005fd4:	0800663f 	.word	0x0800663f
 8005fd8:	0800663f 	.word	0x0800663f
 8005fdc:	0800663f 	.word	0x0800663f
 8005fe0:	0800657d 	.word	0x0800657d
 8005fe4:	f3af 8000 	nop.w
 8005fe8:	05161500 	.word	0x05161500
 8005fec:	00000000 	.word	0x00000000
 8005ff0:	0a2c2a00 	.word	0x0a2c2a00
 8005ff4:	00000000 	.word	0x00000000
 8005ff8:	003d0900 	.word	0x003d0900
 8005ffc:	3d090000 	.word	0x3d090000
 8006000:	007a1200 	.word	0x007a1200
 8006004:	00f42400 	.word	0x00f42400
 8006008:	01e84800 	.word	0x01e84800
 800600c:	03d09000 	.word	0x03d09000
 8006010:	061a8000 	.word	0x061a8000
 8006014:	07a12000 	.word	0x07a12000
 8006018:	0f424000 	.word	0x0f424000
 800601c:	1e848000 	.word	0x1e848000
 8006020:	000aaa00 	.word	0x000aaa00
 8006024:	000ccc00 	.word	0x000ccc00
 8006028:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fb ff32 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 8006030:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	2b00      	cmp	r3, #0
 8006038:	d044      	beq.n	80060c4 <UART_SetConfig+0x15d4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b01      	cmp	r3, #1
 8006040:	d03e      	beq.n	80060c0 <UART_SetConfig+0x15d0>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	2b02      	cmp	r3, #2
 8006048:	d038      	beq.n	80060bc <UART_SetConfig+0x15cc>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b03      	cmp	r3, #3
 8006050:	d032      	beq.n	80060b8 <UART_SetConfig+0x15c8>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	2b04      	cmp	r3, #4
 8006058:	d02c      	beq.n	80060b4 <UART_SetConfig+0x15c4>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605e:	2b05      	cmp	r3, #5
 8006060:	d026      	beq.n	80060b0 <UART_SetConfig+0x15c0>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b06      	cmp	r3, #6
 8006068:	d020      	beq.n	80060ac <UART_SetConfig+0x15bc>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	2b07      	cmp	r3, #7
 8006070:	d01a      	beq.n	80060a8 <UART_SetConfig+0x15b8>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	2b08      	cmp	r3, #8
 8006078:	d014      	beq.n	80060a4 <UART_SetConfig+0x15b4>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	2b09      	cmp	r3, #9
 8006080:	d00e      	beq.n	80060a0 <UART_SetConfig+0x15b0>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	2b0a      	cmp	r3, #10
 8006088:	d008      	beq.n	800609c <UART_SetConfig+0x15ac>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b0b      	cmp	r3, #11
 8006090:	d102      	bne.n	8006098 <UART_SetConfig+0x15a8>
 8006092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006096:	e016      	b.n	80060c6 <UART_SetConfig+0x15d6>
 8006098:	2301      	movs	r3, #1
 800609a:	e014      	b.n	80060c6 <UART_SetConfig+0x15d6>
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	e012      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	e010      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060a4:	2320      	movs	r3, #32
 80060a6:	e00e      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060a8:	2310      	movs	r3, #16
 80060aa:	e00c      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060ac:	230c      	movs	r3, #12
 80060ae:	e00a      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060b0:	230a      	movs	r3, #10
 80060b2:	e008      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060b4:	2308      	movs	r3, #8
 80060b6:	e006      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060b8:	2306      	movs	r3, #6
 80060ba:	e004      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060bc:	2304      	movs	r3, #4
 80060be:	e002      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e000      	b.n	80060c6 <UART_SetConfig+0x15d6>
 80060c4:	2301      	movs	r3, #1
 80060c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80060cc:	005a      	lsls	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	b29b      	uxth	r3, r3
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060e2:	e2b0      	b.n	8006646 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e4:	f7fb feec 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 80060e8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d044      	beq.n	800617c <UART_SetConfig+0x168c>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d03e      	beq.n	8006178 <UART_SetConfig+0x1688>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d038      	beq.n	8006174 <UART_SetConfig+0x1684>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b03      	cmp	r3, #3
 8006108:	d032      	beq.n	8006170 <UART_SetConfig+0x1680>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b04      	cmp	r3, #4
 8006110:	d02c      	beq.n	800616c <UART_SetConfig+0x167c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b05      	cmp	r3, #5
 8006118:	d026      	beq.n	8006168 <UART_SetConfig+0x1678>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b06      	cmp	r3, #6
 8006120:	d020      	beq.n	8006164 <UART_SetConfig+0x1674>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b07      	cmp	r3, #7
 8006128:	d01a      	beq.n	8006160 <UART_SetConfig+0x1670>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b08      	cmp	r3, #8
 8006130:	d014      	beq.n	800615c <UART_SetConfig+0x166c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b09      	cmp	r3, #9
 8006138:	d00e      	beq.n	8006158 <UART_SetConfig+0x1668>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b0a      	cmp	r3, #10
 8006140:	d008      	beq.n	8006154 <UART_SetConfig+0x1664>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b0b      	cmp	r3, #11
 8006148:	d102      	bne.n	8006150 <UART_SetConfig+0x1660>
 800614a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614e:	e016      	b.n	800617e <UART_SetConfig+0x168e>
 8006150:	2301      	movs	r3, #1
 8006152:	e014      	b.n	800617e <UART_SetConfig+0x168e>
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	e012      	b.n	800617e <UART_SetConfig+0x168e>
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	e010      	b.n	800617e <UART_SetConfig+0x168e>
 800615c:	2320      	movs	r3, #32
 800615e:	e00e      	b.n	800617e <UART_SetConfig+0x168e>
 8006160:	2310      	movs	r3, #16
 8006162:	e00c      	b.n	800617e <UART_SetConfig+0x168e>
 8006164:	230c      	movs	r3, #12
 8006166:	e00a      	b.n	800617e <UART_SetConfig+0x168e>
 8006168:	230a      	movs	r3, #10
 800616a:	e008      	b.n	800617e <UART_SetConfig+0x168e>
 800616c:	2308      	movs	r3, #8
 800616e:	e006      	b.n	800617e <UART_SetConfig+0x168e>
 8006170:	2306      	movs	r3, #6
 8006172:	e004      	b.n	800617e <UART_SetConfig+0x168e>
 8006174:	2304      	movs	r3, #4
 8006176:	e002      	b.n	800617e <UART_SetConfig+0x168e>
 8006178:	2302      	movs	r3, #2
 800617a:	e000      	b.n	800617e <UART_SetConfig+0x168e>
 800617c:	2301      	movs	r3, #1
 800617e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006180:	fbb2 f3f3 	udiv	r3, r2, r3
 8006184:	005a      	lsls	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	441a      	add	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	fbb2 f3f3 	udiv	r3, r2, r3
 8006196:	b29b      	uxth	r3, r3
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800619a:	e254      	b.n	8006646 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619c:	f107 0318 	add.w	r3, r7, #24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fc fda9 	bl	8002cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061a6:	69fa      	ldr	r2, [r7, #28]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d044      	beq.n	800623a <UART_SetConfig+0x174a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d03e      	beq.n	8006236 <UART_SetConfig+0x1746>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d038      	beq.n	8006232 <UART_SetConfig+0x1742>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d032      	beq.n	800622e <UART_SetConfig+0x173e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d02c      	beq.n	800622a <UART_SetConfig+0x173a>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	2b05      	cmp	r3, #5
 80061d6:	d026      	beq.n	8006226 <UART_SetConfig+0x1736>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	2b06      	cmp	r3, #6
 80061de:	d020      	beq.n	8006222 <UART_SetConfig+0x1732>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e4:	2b07      	cmp	r3, #7
 80061e6:	d01a      	beq.n	800621e <UART_SetConfig+0x172e>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d014      	beq.n	800621a <UART_SetConfig+0x172a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	2b09      	cmp	r3, #9
 80061f6:	d00e      	beq.n	8006216 <UART_SetConfig+0x1726>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	2b0a      	cmp	r3, #10
 80061fe:	d008      	beq.n	8006212 <UART_SetConfig+0x1722>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2b0b      	cmp	r3, #11
 8006206:	d102      	bne.n	800620e <UART_SetConfig+0x171e>
 8006208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800620c:	e016      	b.n	800623c <UART_SetConfig+0x174c>
 800620e:	2301      	movs	r3, #1
 8006210:	e014      	b.n	800623c <UART_SetConfig+0x174c>
 8006212:	2380      	movs	r3, #128	; 0x80
 8006214:	e012      	b.n	800623c <UART_SetConfig+0x174c>
 8006216:	2340      	movs	r3, #64	; 0x40
 8006218:	e010      	b.n	800623c <UART_SetConfig+0x174c>
 800621a:	2320      	movs	r3, #32
 800621c:	e00e      	b.n	800623c <UART_SetConfig+0x174c>
 800621e:	2310      	movs	r3, #16
 8006220:	e00c      	b.n	800623c <UART_SetConfig+0x174c>
 8006222:	230c      	movs	r3, #12
 8006224:	e00a      	b.n	800623c <UART_SetConfig+0x174c>
 8006226:	230a      	movs	r3, #10
 8006228:	e008      	b.n	800623c <UART_SetConfig+0x174c>
 800622a:	2308      	movs	r3, #8
 800622c:	e006      	b.n	800623c <UART_SetConfig+0x174c>
 800622e:	2306      	movs	r3, #6
 8006230:	e004      	b.n	800623c <UART_SetConfig+0x174c>
 8006232:	2304      	movs	r3, #4
 8006234:	e002      	b.n	800623c <UART_SetConfig+0x174c>
 8006236:	2302      	movs	r3, #2
 8006238:	e000      	b.n	800623c <UART_SetConfig+0x174c>
 800623a:	2301      	movs	r3, #1
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	005a      	lsls	r2, r3, #1
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	085b      	lsrs	r3, r3, #1
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006252:	b29b      	uxth	r3, r3
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006256:	e1f6      	b.n	8006646 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	4618      	mov	r0, r3
 800625e:	f7fc fe97 	bl	8002f90 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d044      	beq.n	80062f6 <UART_SetConfig+0x1806>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006270:	2b01      	cmp	r3, #1
 8006272:	d03e      	beq.n	80062f2 <UART_SetConfig+0x1802>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006278:	2b02      	cmp	r3, #2
 800627a:	d038      	beq.n	80062ee <UART_SetConfig+0x17fe>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	2b03      	cmp	r3, #3
 8006282:	d032      	beq.n	80062ea <UART_SetConfig+0x17fa>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006288:	2b04      	cmp	r3, #4
 800628a:	d02c      	beq.n	80062e6 <UART_SetConfig+0x17f6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b05      	cmp	r3, #5
 8006292:	d026      	beq.n	80062e2 <UART_SetConfig+0x17f2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	2b06      	cmp	r3, #6
 800629a:	d020      	beq.n	80062de <UART_SetConfig+0x17ee>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	2b07      	cmp	r3, #7
 80062a2:	d01a      	beq.n	80062da <UART_SetConfig+0x17ea>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	2b08      	cmp	r3, #8
 80062aa:	d014      	beq.n	80062d6 <UART_SetConfig+0x17e6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	2b09      	cmp	r3, #9
 80062b2:	d00e      	beq.n	80062d2 <UART_SetConfig+0x17e2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	2b0a      	cmp	r3, #10
 80062ba:	d008      	beq.n	80062ce <UART_SetConfig+0x17de>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	2b0b      	cmp	r3, #11
 80062c2:	d102      	bne.n	80062ca <UART_SetConfig+0x17da>
 80062c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062c8:	e016      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e014      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	e012      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062d2:	2340      	movs	r3, #64	; 0x40
 80062d4:	e010      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062d6:	2320      	movs	r3, #32
 80062d8:	e00e      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062da:	2310      	movs	r3, #16
 80062dc:	e00c      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062de:	230c      	movs	r3, #12
 80062e0:	e00a      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062e2:	230a      	movs	r3, #10
 80062e4:	e008      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062e6:	2308      	movs	r3, #8
 80062e8:	e006      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062ea:	2306      	movs	r3, #6
 80062ec:	e004      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062ee:	2304      	movs	r3, #4
 80062f0:	e002      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062f2:	2302      	movs	r3, #2
 80062f4:	e000      	b.n	80062f8 <UART_SetConfig+0x1808>
 80062f6:	2301      	movs	r3, #1
 80062f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fc:	005a      	lsls	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	085b      	lsrs	r3, r3, #1
 8006304:	441a      	add	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	b29b      	uxth	r3, r3
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006312:	e198      	b.n	8006646 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006314:	4b87      	ldr	r3, [pc, #540]	; (8006534 <UART_SetConfig+0x1a44>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0320 	and.w	r3, r3, #32
 800631c:	2b00      	cmp	r3, #0
 800631e:	d05e      	beq.n	80063de <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006320:	4b84      	ldr	r3, [pc, #528]	; (8006534 <UART_SetConfig+0x1a44>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	08db      	lsrs	r3, r3, #3
 8006326:	f003 0303 	and.w	r3, r3, #3
 800632a:	4a83      	ldr	r2, [pc, #524]	; (8006538 <UART_SetConfig+0x1a48>)
 800632c:	40da      	lsrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d044      	beq.n	80063c0 <UART_SetConfig+0x18d0>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633a:	2b01      	cmp	r3, #1
 800633c:	d03e      	beq.n	80063bc <UART_SetConfig+0x18cc>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	2b02      	cmp	r3, #2
 8006344:	d038      	beq.n	80063b8 <UART_SetConfig+0x18c8>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634a:	2b03      	cmp	r3, #3
 800634c:	d032      	beq.n	80063b4 <UART_SetConfig+0x18c4>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	2b04      	cmp	r3, #4
 8006354:	d02c      	beq.n	80063b0 <UART_SetConfig+0x18c0>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	2b05      	cmp	r3, #5
 800635c:	d026      	beq.n	80063ac <UART_SetConfig+0x18bc>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2b06      	cmp	r3, #6
 8006364:	d020      	beq.n	80063a8 <UART_SetConfig+0x18b8>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	2b07      	cmp	r3, #7
 800636c:	d01a      	beq.n	80063a4 <UART_SetConfig+0x18b4>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006372:	2b08      	cmp	r3, #8
 8006374:	d014      	beq.n	80063a0 <UART_SetConfig+0x18b0>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	2b09      	cmp	r3, #9
 800637c:	d00e      	beq.n	800639c <UART_SetConfig+0x18ac>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	2b0a      	cmp	r3, #10
 8006384:	d008      	beq.n	8006398 <UART_SetConfig+0x18a8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	2b0b      	cmp	r3, #11
 800638c:	d102      	bne.n	8006394 <UART_SetConfig+0x18a4>
 800638e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006392:	e016      	b.n	80063c2 <UART_SetConfig+0x18d2>
 8006394:	2301      	movs	r3, #1
 8006396:	e014      	b.n	80063c2 <UART_SetConfig+0x18d2>
 8006398:	2380      	movs	r3, #128	; 0x80
 800639a:	e012      	b.n	80063c2 <UART_SetConfig+0x18d2>
 800639c:	2340      	movs	r3, #64	; 0x40
 800639e:	e010      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063a0:	2320      	movs	r3, #32
 80063a2:	e00e      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063a4:	2310      	movs	r3, #16
 80063a6:	e00c      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063a8:	230c      	movs	r3, #12
 80063aa:	e00a      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063ac:	230a      	movs	r3, #10
 80063ae:	e008      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063b0:	2308      	movs	r3, #8
 80063b2:	e006      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063b4:	2306      	movs	r3, #6
 80063b6:	e004      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063b8:	2304      	movs	r3, #4
 80063ba:	e002      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063bc:	2302      	movs	r3, #2
 80063be:	e000      	b.n	80063c2 <UART_SetConfig+0x18d2>
 80063c0:	2301      	movs	r3, #1
 80063c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063c6:	005a      	lsls	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	441a      	add	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	b29b      	uxth	r3, r3
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80063dc:	e133      	b.n	8006646 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d043      	beq.n	800646e <UART_SetConfig+0x197e>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d03d      	beq.n	800646a <UART_SetConfig+0x197a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d037      	beq.n	8006466 <UART_SetConfig+0x1976>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d031      	beq.n	8006462 <UART_SetConfig+0x1972>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	2b04      	cmp	r3, #4
 8006404:	d02b      	beq.n	800645e <UART_SetConfig+0x196e>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	2b05      	cmp	r3, #5
 800640c:	d025      	beq.n	800645a <UART_SetConfig+0x196a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	2b06      	cmp	r3, #6
 8006414:	d01f      	beq.n	8006456 <UART_SetConfig+0x1966>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	2b07      	cmp	r3, #7
 800641c:	d019      	beq.n	8006452 <UART_SetConfig+0x1962>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	2b08      	cmp	r3, #8
 8006424:	d013      	beq.n	800644e <UART_SetConfig+0x195e>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	2b09      	cmp	r3, #9
 800642c:	d00d      	beq.n	800644a <UART_SetConfig+0x195a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	2b0a      	cmp	r3, #10
 8006434:	d007      	beq.n	8006446 <UART_SetConfig+0x1956>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	2b0b      	cmp	r3, #11
 800643c:	d101      	bne.n	8006442 <UART_SetConfig+0x1952>
 800643e:	4b3f      	ldr	r3, [pc, #252]	; (800653c <UART_SetConfig+0x1a4c>)
 8006440:	e016      	b.n	8006470 <UART_SetConfig+0x1980>
 8006442:	4b3f      	ldr	r3, [pc, #252]	; (8006540 <UART_SetConfig+0x1a50>)
 8006444:	e014      	b.n	8006470 <UART_SetConfig+0x1980>
 8006446:	4b3f      	ldr	r3, [pc, #252]	; (8006544 <UART_SetConfig+0x1a54>)
 8006448:	e012      	b.n	8006470 <UART_SetConfig+0x1980>
 800644a:	4b3f      	ldr	r3, [pc, #252]	; (8006548 <UART_SetConfig+0x1a58>)
 800644c:	e010      	b.n	8006470 <UART_SetConfig+0x1980>
 800644e:	4b3f      	ldr	r3, [pc, #252]	; (800654c <UART_SetConfig+0x1a5c>)
 8006450:	e00e      	b.n	8006470 <UART_SetConfig+0x1980>
 8006452:	4b3f      	ldr	r3, [pc, #252]	; (8006550 <UART_SetConfig+0x1a60>)
 8006454:	e00c      	b.n	8006470 <UART_SetConfig+0x1980>
 8006456:	4b3f      	ldr	r3, [pc, #252]	; (8006554 <UART_SetConfig+0x1a64>)
 8006458:	e00a      	b.n	8006470 <UART_SetConfig+0x1980>
 800645a:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <UART_SetConfig+0x1a68>)
 800645c:	e008      	b.n	8006470 <UART_SetConfig+0x1980>
 800645e:	4b3f      	ldr	r3, [pc, #252]	; (800655c <UART_SetConfig+0x1a6c>)
 8006460:	e006      	b.n	8006470 <UART_SetConfig+0x1980>
 8006462:	4b3f      	ldr	r3, [pc, #252]	; (8006560 <UART_SetConfig+0x1a70>)
 8006464:	e004      	b.n	8006470 <UART_SetConfig+0x1980>
 8006466:	4b3f      	ldr	r3, [pc, #252]	; (8006564 <UART_SetConfig+0x1a74>)
 8006468:	e002      	b.n	8006470 <UART_SetConfig+0x1980>
 800646a:	4b33      	ldr	r3, [pc, #204]	; (8006538 <UART_SetConfig+0x1a48>)
 800646c:	e000      	b.n	8006470 <UART_SetConfig+0x1980>
 800646e:	4b34      	ldr	r3, [pc, #208]	; (8006540 <UART_SetConfig+0x1a50>)
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6852      	ldr	r2, [r2, #4]
 8006474:	0852      	lsrs	r2, r2, #1
 8006476:	441a      	add	r2, r3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	b29b      	uxth	r3, r3
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006484:	e0df      	b.n	8006646 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	2b00      	cmp	r3, #0
 800648c:	d045      	beq.n	800651a <UART_SetConfig+0x1a2a>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	2b01      	cmp	r3, #1
 8006494:	d03f      	beq.n	8006516 <UART_SetConfig+0x1a26>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	2b02      	cmp	r3, #2
 800649c:	d039      	beq.n	8006512 <UART_SetConfig+0x1a22>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d033      	beq.n	800650e <UART_SetConfig+0x1a1e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d02d      	beq.n	800650a <UART_SetConfig+0x1a1a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	2b05      	cmp	r3, #5
 80064b4:	d027      	beq.n	8006506 <UART_SetConfig+0x1a16>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ba:	2b06      	cmp	r3, #6
 80064bc:	d021      	beq.n	8006502 <UART_SetConfig+0x1a12>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	2b07      	cmp	r3, #7
 80064c4:	d01b      	beq.n	80064fe <UART_SetConfig+0x1a0e>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	2b08      	cmp	r3, #8
 80064cc:	d015      	beq.n	80064fa <UART_SetConfig+0x1a0a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	2b09      	cmp	r3, #9
 80064d4:	d00f      	beq.n	80064f6 <UART_SetConfig+0x1a06>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064da:	2b0a      	cmp	r3, #10
 80064dc:	d008      	beq.n	80064f0 <UART_SetConfig+0x1a00>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	2b0b      	cmp	r3, #11
 80064e4:	d102      	bne.n	80064ec <UART_SetConfig+0x19fc>
 80064e6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80064ea:	e017      	b.n	800651c <UART_SetConfig+0x1a2c>
 80064ec:	4b18      	ldr	r3, [pc, #96]	; (8006550 <UART_SetConfig+0x1a60>)
 80064ee:	e015      	b.n	800651c <UART_SetConfig+0x1a2c>
 80064f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80064f4:	e012      	b.n	800651c <UART_SetConfig+0x1a2c>
 80064f6:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <UART_SetConfig+0x1a78>)
 80064f8:	e010      	b.n	800651c <UART_SetConfig+0x1a2c>
 80064fa:	4b1c      	ldr	r3, [pc, #112]	; (800656c <UART_SetConfig+0x1a7c>)
 80064fc:	e00e      	b.n	800651c <UART_SetConfig+0x1a2c>
 80064fe:	4b0f      	ldr	r3, [pc, #60]	; (800653c <UART_SetConfig+0x1a4c>)
 8006500:	e00c      	b.n	800651c <UART_SetConfig+0x1a2c>
 8006502:	4b1b      	ldr	r3, [pc, #108]	; (8006570 <UART_SetConfig+0x1a80>)
 8006504:	e00a      	b.n	800651c <UART_SetConfig+0x1a2c>
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <UART_SetConfig+0x1a84>)
 8006508:	e008      	b.n	800651c <UART_SetConfig+0x1a2c>
 800650a:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <UART_SetConfig+0x1a54>)
 800650c:	e006      	b.n	800651c <UART_SetConfig+0x1a2c>
 800650e:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <UART_SetConfig+0x1a88>)
 8006510:	e004      	b.n	800651c <UART_SetConfig+0x1a2c>
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <UART_SetConfig+0x1a58>)
 8006514:	e002      	b.n	800651c <UART_SetConfig+0x1a2c>
 8006516:	4b0d      	ldr	r3, [pc, #52]	; (800654c <UART_SetConfig+0x1a5c>)
 8006518:	e000      	b.n	800651c <UART_SetConfig+0x1a2c>
 800651a:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <UART_SetConfig+0x1a60>)
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	6852      	ldr	r2, [r2, #4]
 8006520:	0852      	lsrs	r2, r2, #1
 8006522:	441a      	add	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	b29b      	uxth	r3, r3
 800652e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006530:	e089      	b.n	8006646 <UART_SetConfig+0x1b56>
 8006532:	bf00      	nop
 8006534:	58024400 	.word	0x58024400
 8006538:	03d09000 	.word	0x03d09000
 800653c:	0007a120 	.word	0x0007a120
 8006540:	07a12000 	.word	0x07a12000
 8006544:	000f4240 	.word	0x000f4240
 8006548:	001e8480 	.word	0x001e8480
 800654c:	003d0900 	.word	0x003d0900
 8006550:	007a1200 	.word	0x007a1200
 8006554:	00a2c2aa 	.word	0x00a2c2aa
 8006558:	00c35000 	.word	0x00c35000
 800655c:	00f42400 	.word	0x00f42400
 8006560:	01458554 	.word	0x01458554
 8006564:	01e84800 	.word	0x01e84800
 8006568:	0001e848 	.word	0x0001e848
 800656c:	0003d090 	.word	0x0003d090
 8006570:	000a2c2a 	.word	0x000a2c2a
 8006574:	000c3500 	.word	0x000c3500
 8006578:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	d04f      	beq.n	8006624 <UART_SetConfig+0x1b34>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	2b01      	cmp	r3, #1
 800658a:	d048      	beq.n	800661e <UART_SetConfig+0x1b2e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	2b02      	cmp	r3, #2
 8006592:	d041      	beq.n	8006618 <UART_SetConfig+0x1b28>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2b03      	cmp	r3, #3
 800659a:	d03a      	beq.n	8006612 <UART_SetConfig+0x1b22>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d033      	beq.n	800660c <UART_SetConfig+0x1b1c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	2b05      	cmp	r3, #5
 80065aa:	d02c      	beq.n	8006606 <UART_SetConfig+0x1b16>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b06      	cmp	r3, #6
 80065b2:	d025      	beq.n	8006600 <UART_SetConfig+0x1b10>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2b07      	cmp	r3, #7
 80065ba:	d01e      	beq.n	80065fa <UART_SetConfig+0x1b0a>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c0:	2b08      	cmp	r3, #8
 80065c2:	d017      	beq.n	80065f4 <UART_SetConfig+0x1b04>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	d010      	beq.n	80065ee <UART_SetConfig+0x1afe>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b0a      	cmp	r3, #10
 80065d2:	d009      	beq.n	80065e8 <UART_SetConfig+0x1af8>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d8:	2b0b      	cmp	r3, #11
 80065da:	d102      	bne.n	80065e2 <UART_SetConfig+0x1af2>
 80065dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065e0:	e022      	b.n	8006628 <UART_SetConfig+0x1b38>
 80065e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80065e6:	e01f      	b.n	8006628 <UART_SetConfig+0x1b38>
 80065e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ec:	e01c      	b.n	8006628 <UART_SetConfig+0x1b38>
 80065ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f2:	e019      	b.n	8006628 <UART_SetConfig+0x1b38>
 80065f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065f8:	e016      	b.n	8006628 <UART_SetConfig+0x1b38>
 80065fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065fe:	e013      	b.n	8006628 <UART_SetConfig+0x1b38>
 8006600:	f241 5354 	movw	r3, #5460	; 0x1554
 8006604:	e010      	b.n	8006628 <UART_SetConfig+0x1b38>
 8006606:	f641 1398 	movw	r3, #6552	; 0x1998
 800660a:	e00d      	b.n	8006628 <UART_SetConfig+0x1b38>
 800660c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006610:	e00a      	b.n	8006628 <UART_SetConfig+0x1b38>
 8006612:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8006616:	e007      	b.n	8006628 <UART_SetConfig+0x1b38>
 8006618:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800661c:	e004      	b.n	8006628 <UART_SetConfig+0x1b38>
 800661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006622:	e001      	b.n	8006628 <UART_SetConfig+0x1b38>
 8006624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6852      	ldr	r2, [r2, #4]
 800662c:	0852      	lsrs	r2, r2, #1
 800662e:	441a      	add	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	fbb2 f3f3 	udiv	r3, r2, r3
 8006638:	b29b      	uxth	r3, r3
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800663c:	e003      	b.n	8006646 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006648:	2b0f      	cmp	r3, #15
 800664a:	d916      	bls.n	800667a <UART_SetConfig+0x1b8a>
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006652:	d212      	bcs.n	800667a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006656:	b29b      	uxth	r3, r3
 8006658:	f023 030f 	bic.w	r3, r3, #15
 800665c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	b29a      	uxth	r2, r3
 800666a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800666c:	4313      	orrs	r3, r2
 800666e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006676:	60da      	str	r2, [r3, #12]
 8006678:	e3a3      	b.n	8006dc2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006680:	e39f      	b.n	8006dc2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8006682:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006686:	2b40      	cmp	r3, #64	; 0x40
 8006688:	f200 8388 	bhi.w	8006d9c <UART_SetConfig+0x22ac>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x1ba4>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	08006799 	.word	0x08006799
 8006698:	0800684f 	.word	0x0800684f
 800669c:	08006d9d 	.word	0x08006d9d
 80066a0:	08006d9d 	.word	0x08006d9d
 80066a4:	08006905 	.word	0x08006905
 80066a8:	08006d9d 	.word	0x08006d9d
 80066ac:	08006d9d 	.word	0x08006d9d
 80066b0:	08006d9d 	.word	0x08006d9d
 80066b4:	080069bf 	.word	0x080069bf
 80066b8:	08006d9d 	.word	0x08006d9d
 80066bc:	08006d9d 	.word	0x08006d9d
 80066c0:	08006d9d 	.word	0x08006d9d
 80066c4:	08006d9d 	.word	0x08006d9d
 80066c8:	08006d9d 	.word	0x08006d9d
 80066cc:	08006d9d 	.word	0x08006d9d
 80066d0:	08006d9d 	.word	0x08006d9d
 80066d4:	08006a79 	.word	0x08006a79
 80066d8:	08006d9d 	.word	0x08006d9d
 80066dc:	08006d9d 	.word	0x08006d9d
 80066e0:	08006d9d 	.word	0x08006d9d
 80066e4:	08006d9d 	.word	0x08006d9d
 80066e8:	08006d9d 	.word	0x08006d9d
 80066ec:	08006d9d 	.word	0x08006d9d
 80066f0:	08006d9d 	.word	0x08006d9d
 80066f4:	08006d9d 	.word	0x08006d9d
 80066f8:	08006d9d 	.word	0x08006d9d
 80066fc:	08006d9d 	.word	0x08006d9d
 8006700:	08006d9d 	.word	0x08006d9d
 8006704:	08006d9d 	.word	0x08006d9d
 8006708:	08006d9d 	.word	0x08006d9d
 800670c:	08006d9d 	.word	0x08006d9d
 8006710:	08006d9d 	.word	0x08006d9d
 8006714:	08006be9 	.word	0x08006be9
 8006718:	08006d9d 	.word	0x08006d9d
 800671c:	08006d9d 	.word	0x08006d9d
 8006720:	08006d9d 	.word	0x08006d9d
 8006724:	08006d9d 	.word	0x08006d9d
 8006728:	08006d9d 	.word	0x08006d9d
 800672c:	08006d9d 	.word	0x08006d9d
 8006730:	08006d9d 	.word	0x08006d9d
 8006734:	08006d9d 	.word	0x08006d9d
 8006738:	08006d9d 	.word	0x08006d9d
 800673c:	08006d9d 	.word	0x08006d9d
 8006740:	08006d9d 	.word	0x08006d9d
 8006744:	08006d9d 	.word	0x08006d9d
 8006748:	08006d9d 	.word	0x08006d9d
 800674c:	08006d9d 	.word	0x08006d9d
 8006750:	08006d9d 	.word	0x08006d9d
 8006754:	08006d9d 	.word	0x08006d9d
 8006758:	08006d9d 	.word	0x08006d9d
 800675c:	08006d9d 	.word	0x08006d9d
 8006760:	08006d9d 	.word	0x08006d9d
 8006764:	08006d9d 	.word	0x08006d9d
 8006768:	08006d9d 	.word	0x08006d9d
 800676c:	08006d9d 	.word	0x08006d9d
 8006770:	08006d9d 	.word	0x08006d9d
 8006774:	08006d9d 	.word	0x08006d9d
 8006778:	08006d9d 	.word	0x08006d9d
 800677c:	08006d9d 	.word	0x08006d9d
 8006780:	08006d9d 	.word	0x08006d9d
 8006784:	08006d9d 	.word	0x08006d9d
 8006788:	08006d9d 	.word	0x08006d9d
 800678c:	08006d9d 	.word	0x08006d9d
 8006790:	08006d9d 	.word	0x08006d9d
 8006794:	08006cdd 	.word	0x08006cdd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006798:	f7fb fb7c 	bl	8001e94 <HAL_RCC_GetPCLK1Freq>
 800679c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d044      	beq.n	8006830 <UART_SetConfig+0x1d40>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d03e      	beq.n	800682c <UART_SetConfig+0x1d3c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d038      	beq.n	8006828 <UART_SetConfig+0x1d38>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	d032      	beq.n	8006824 <UART_SetConfig+0x1d34>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d02c      	beq.n	8006820 <UART_SetConfig+0x1d30>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2b05      	cmp	r3, #5
 80067cc:	d026      	beq.n	800681c <UART_SetConfig+0x1d2c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d020      	beq.n	8006818 <UART_SetConfig+0x1d28>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	2b07      	cmp	r3, #7
 80067dc:	d01a      	beq.n	8006814 <UART_SetConfig+0x1d24>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d014      	beq.n	8006810 <UART_SetConfig+0x1d20>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	2b09      	cmp	r3, #9
 80067ec:	d00e      	beq.n	800680c <UART_SetConfig+0x1d1c>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	2b0a      	cmp	r3, #10
 80067f4:	d008      	beq.n	8006808 <UART_SetConfig+0x1d18>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	2b0b      	cmp	r3, #11
 80067fc:	d102      	bne.n	8006804 <UART_SetConfig+0x1d14>
 80067fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006802:	e016      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006804:	2301      	movs	r3, #1
 8006806:	e014      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006808:	2380      	movs	r3, #128	; 0x80
 800680a:	e012      	b.n	8006832 <UART_SetConfig+0x1d42>
 800680c:	2340      	movs	r3, #64	; 0x40
 800680e:	e010      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006810:	2320      	movs	r3, #32
 8006812:	e00e      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006814:	2310      	movs	r3, #16
 8006816:	e00c      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006818:	230c      	movs	r3, #12
 800681a:	e00a      	b.n	8006832 <UART_SetConfig+0x1d42>
 800681c:	230a      	movs	r3, #10
 800681e:	e008      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006820:	2308      	movs	r3, #8
 8006822:	e006      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006824:	2306      	movs	r3, #6
 8006826:	e004      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006828:	2304      	movs	r3, #4
 800682a:	e002      	b.n	8006832 <UART_SetConfig+0x1d42>
 800682c:	2302      	movs	r3, #2
 800682e:	e000      	b.n	8006832 <UART_SetConfig+0x1d42>
 8006830:	2301      	movs	r3, #1
 8006832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006834:	fbb2 f2f3 	udiv	r2, r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	441a      	add	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	fbb2 f3f3 	udiv	r3, r2, r3
 8006848:	b29b      	uxth	r3, r3
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800684c:	e2aa      	b.n	8006da4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800684e:	f7fb fb37 	bl	8001ec0 <HAL_RCC_GetPCLK2Freq>
 8006852:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d044      	beq.n	80068e6 <UART_SetConfig+0x1df6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b01      	cmp	r3, #1
 8006862:	d03e      	beq.n	80068e2 <UART_SetConfig+0x1df2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b02      	cmp	r3, #2
 800686a:	d038      	beq.n	80068de <UART_SetConfig+0x1dee>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	2b03      	cmp	r3, #3
 8006872:	d032      	beq.n	80068da <UART_SetConfig+0x1dea>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	2b04      	cmp	r3, #4
 800687a:	d02c      	beq.n	80068d6 <UART_SetConfig+0x1de6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b05      	cmp	r3, #5
 8006882:	d026      	beq.n	80068d2 <UART_SetConfig+0x1de2>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	2b06      	cmp	r3, #6
 800688a:	d020      	beq.n	80068ce <UART_SetConfig+0x1dde>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	2b07      	cmp	r3, #7
 8006892:	d01a      	beq.n	80068ca <UART_SetConfig+0x1dda>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b08      	cmp	r3, #8
 800689a:	d014      	beq.n	80068c6 <UART_SetConfig+0x1dd6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a0:	2b09      	cmp	r3, #9
 80068a2:	d00e      	beq.n	80068c2 <UART_SetConfig+0x1dd2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a8:	2b0a      	cmp	r3, #10
 80068aa:	d008      	beq.n	80068be <UART_SetConfig+0x1dce>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b0:	2b0b      	cmp	r3, #11
 80068b2:	d102      	bne.n	80068ba <UART_SetConfig+0x1dca>
 80068b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b8:	e016      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e014      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068be:	2380      	movs	r3, #128	; 0x80
 80068c0:	e012      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068c2:	2340      	movs	r3, #64	; 0x40
 80068c4:	e010      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068c6:	2320      	movs	r3, #32
 80068c8:	e00e      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068ca:	2310      	movs	r3, #16
 80068cc:	e00c      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068ce:	230c      	movs	r3, #12
 80068d0:	e00a      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068d2:	230a      	movs	r3, #10
 80068d4:	e008      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068d6:	2308      	movs	r3, #8
 80068d8:	e006      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068da:	2306      	movs	r3, #6
 80068dc:	e004      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068de:	2304      	movs	r3, #4
 80068e0:	e002      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e000      	b.n	80068e8 <UART_SetConfig+0x1df8>
 80068e6:	2301      	movs	r3, #1
 80068e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	441a      	add	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068fe:	b29b      	uxth	r3, r3
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006902:	e24f      	b.n	8006da4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006904:	f107 0318 	add.w	r3, r7, #24
 8006908:	4618      	mov	r0, r3
 800690a:	f7fc f9f5 	bl	8002cf8 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	2b00      	cmp	r3, #0
 8006916:	d044      	beq.n	80069a2 <UART_SetConfig+0x1eb2>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	2b01      	cmp	r3, #1
 800691e:	d03e      	beq.n	800699e <UART_SetConfig+0x1eae>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2b02      	cmp	r3, #2
 8006926:	d038      	beq.n	800699a <UART_SetConfig+0x1eaa>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692c:	2b03      	cmp	r3, #3
 800692e:	d032      	beq.n	8006996 <UART_SetConfig+0x1ea6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006934:	2b04      	cmp	r3, #4
 8006936:	d02c      	beq.n	8006992 <UART_SetConfig+0x1ea2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693c:	2b05      	cmp	r3, #5
 800693e:	d026      	beq.n	800698e <UART_SetConfig+0x1e9e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	2b06      	cmp	r3, #6
 8006946:	d020      	beq.n	800698a <UART_SetConfig+0x1e9a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	2b07      	cmp	r3, #7
 800694e:	d01a      	beq.n	8006986 <UART_SetConfig+0x1e96>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006954:	2b08      	cmp	r3, #8
 8006956:	d014      	beq.n	8006982 <UART_SetConfig+0x1e92>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b09      	cmp	r3, #9
 800695e:	d00e      	beq.n	800697e <UART_SetConfig+0x1e8e>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2b0a      	cmp	r3, #10
 8006966:	d008      	beq.n	800697a <UART_SetConfig+0x1e8a>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b0b      	cmp	r3, #11
 800696e:	d102      	bne.n	8006976 <UART_SetConfig+0x1e86>
 8006970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006974:	e016      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 8006976:	2301      	movs	r3, #1
 8006978:	e014      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 800697a:	2380      	movs	r3, #128	; 0x80
 800697c:	e012      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 800697e:	2340      	movs	r3, #64	; 0x40
 8006980:	e010      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 8006982:	2320      	movs	r3, #32
 8006984:	e00e      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 8006986:	2310      	movs	r3, #16
 8006988:	e00c      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 800698a:	230c      	movs	r3, #12
 800698c:	e00a      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 800698e:	230a      	movs	r3, #10
 8006990:	e008      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 8006992:	2308      	movs	r3, #8
 8006994:	e006      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 8006996:	2306      	movs	r3, #6
 8006998:	e004      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 800699a:	2304      	movs	r3, #4
 800699c:	e002      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 800699e:	2302      	movs	r3, #2
 80069a0:	e000      	b.n	80069a4 <UART_SetConfig+0x1eb4>
 80069a2:	2301      	movs	r3, #1
 80069a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	085b      	lsrs	r3, r3, #1
 80069ae:	441a      	add	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069bc:	e1f2      	b.n	8006da4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069be:	f107 030c 	add.w	r3, r7, #12
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7fc fae4 	bl	8002f90 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d044      	beq.n	8006a5c <UART_SetConfig+0x1f6c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d03e      	beq.n	8006a58 <UART_SetConfig+0x1f68>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d038      	beq.n	8006a54 <UART_SetConfig+0x1f64>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	d032      	beq.n	8006a50 <UART_SetConfig+0x1f60>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	d02c      	beq.n	8006a4c <UART_SetConfig+0x1f5c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	d026      	beq.n	8006a48 <UART_SetConfig+0x1f58>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fe:	2b06      	cmp	r3, #6
 8006a00:	d020      	beq.n	8006a44 <UART_SetConfig+0x1f54>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	2b07      	cmp	r3, #7
 8006a08:	d01a      	beq.n	8006a40 <UART_SetConfig+0x1f50>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	2b08      	cmp	r3, #8
 8006a10:	d014      	beq.n	8006a3c <UART_SetConfig+0x1f4c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d00e      	beq.n	8006a38 <UART_SetConfig+0x1f48>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	2b0a      	cmp	r3, #10
 8006a20:	d008      	beq.n	8006a34 <UART_SetConfig+0x1f44>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a26:	2b0b      	cmp	r3, #11
 8006a28:	d102      	bne.n	8006a30 <UART_SetConfig+0x1f40>
 8006a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a2e:	e016      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e014      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a34:	2380      	movs	r3, #128	; 0x80
 8006a36:	e012      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a38:	2340      	movs	r3, #64	; 0x40
 8006a3a:	e010      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a3c:	2320      	movs	r3, #32
 8006a3e:	e00e      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a40:	2310      	movs	r3, #16
 8006a42:	e00c      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a44:	230c      	movs	r3, #12
 8006a46:	e00a      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a48:	230a      	movs	r3, #10
 8006a4a:	e008      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	e006      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a50:	2306      	movs	r3, #6
 8006a52:	e004      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a54:	2304      	movs	r3, #4
 8006a56:	e002      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e000      	b.n	8006a5e <UART_SetConfig+0x1f6e>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	085b      	lsrs	r3, r3, #1
 8006a68:	441a      	add	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a76:	e195      	b.n	8006da4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a78:	4b87      	ldr	r3, [pc, #540]	; (8006c98 <UART_SetConfig+0x21a8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d05d      	beq.n	8006b40 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a84:	4b84      	ldr	r3, [pc, #528]	; (8006c98 <UART_SetConfig+0x21a8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	08db      	lsrs	r3, r3, #3
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	4a83      	ldr	r2, [pc, #524]	; (8006c9c <UART_SetConfig+0x21ac>)
 8006a90:	40da      	lsrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d044      	beq.n	8006b24 <UART_SetConfig+0x2034>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d03e      	beq.n	8006b20 <UART_SetConfig+0x2030>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d038      	beq.n	8006b1c <UART_SetConfig+0x202c>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d032      	beq.n	8006b18 <UART_SetConfig+0x2028>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d02c      	beq.n	8006b14 <UART_SetConfig+0x2024>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	d026      	beq.n	8006b10 <UART_SetConfig+0x2020>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac6:	2b06      	cmp	r3, #6
 8006ac8:	d020      	beq.n	8006b0c <UART_SetConfig+0x201c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ace:	2b07      	cmp	r3, #7
 8006ad0:	d01a      	beq.n	8006b08 <UART_SetConfig+0x2018>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d014      	beq.n	8006b04 <UART_SetConfig+0x2014>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	2b09      	cmp	r3, #9
 8006ae0:	d00e      	beq.n	8006b00 <UART_SetConfig+0x2010>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae6:	2b0a      	cmp	r3, #10
 8006ae8:	d008      	beq.n	8006afc <UART_SetConfig+0x200c>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	2b0b      	cmp	r3, #11
 8006af0:	d102      	bne.n	8006af8 <UART_SetConfig+0x2008>
 8006af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af6:	e016      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e014      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	e012      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b00:	2340      	movs	r3, #64	; 0x40
 8006b02:	e010      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b04:	2320      	movs	r3, #32
 8006b06:	e00e      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b08:	2310      	movs	r3, #16
 8006b0a:	e00c      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	e00a      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b10:	230a      	movs	r3, #10
 8006b12:	e008      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b14:	2308      	movs	r3, #8
 8006b16:	e006      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b18:	2306      	movs	r3, #6
 8006b1a:	e004      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	e002      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e000      	b.n	8006b26 <UART_SetConfig+0x2036>
 8006b24:	2301      	movs	r3, #1
 8006b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	441a      	add	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8006b3e:	e131      	b.n	8006da4 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d043      	beq.n	8006bd0 <UART_SetConfig+0x20e0>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d03d      	beq.n	8006bcc <UART_SetConfig+0x20dc>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d037      	beq.n	8006bc8 <UART_SetConfig+0x20d8>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d031      	beq.n	8006bc4 <UART_SetConfig+0x20d4>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d02b      	beq.n	8006bc0 <UART_SetConfig+0x20d0>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	2b05      	cmp	r3, #5
 8006b6e:	d025      	beq.n	8006bbc <UART_SetConfig+0x20cc>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b06      	cmp	r3, #6
 8006b76:	d01f      	beq.n	8006bb8 <UART_SetConfig+0x20c8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	d019      	beq.n	8006bb4 <UART_SetConfig+0x20c4>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d013      	beq.n	8006bb0 <UART_SetConfig+0x20c0>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b09      	cmp	r3, #9
 8006b8e:	d00d      	beq.n	8006bac <UART_SetConfig+0x20bc>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	2b0a      	cmp	r3, #10
 8006b96:	d007      	beq.n	8006ba8 <UART_SetConfig+0x20b8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2b0b      	cmp	r3, #11
 8006b9e:	d101      	bne.n	8006ba4 <UART_SetConfig+0x20b4>
 8006ba0:	4b3f      	ldr	r3, [pc, #252]	; (8006ca0 <UART_SetConfig+0x21b0>)
 8006ba2:	e016      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006ba4:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <UART_SetConfig+0x21ac>)
 8006ba6:	e014      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006ba8:	4b3e      	ldr	r3, [pc, #248]	; (8006ca4 <UART_SetConfig+0x21b4>)
 8006baa:	e012      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bac:	4b3e      	ldr	r3, [pc, #248]	; (8006ca8 <UART_SetConfig+0x21b8>)
 8006bae:	e010      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bb0:	4b3e      	ldr	r3, [pc, #248]	; (8006cac <UART_SetConfig+0x21bc>)
 8006bb2:	e00e      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bb4:	4b3e      	ldr	r3, [pc, #248]	; (8006cb0 <UART_SetConfig+0x21c0>)
 8006bb6:	e00c      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bb8:	4b3e      	ldr	r3, [pc, #248]	; (8006cb4 <UART_SetConfig+0x21c4>)
 8006bba:	e00a      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bbc:	4b3e      	ldr	r3, [pc, #248]	; (8006cb8 <UART_SetConfig+0x21c8>)
 8006bbe:	e008      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bc0:	4b3e      	ldr	r3, [pc, #248]	; (8006cbc <UART_SetConfig+0x21cc>)
 8006bc2:	e006      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bc4:	4b3e      	ldr	r3, [pc, #248]	; (8006cc0 <UART_SetConfig+0x21d0>)
 8006bc6:	e004      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bc8:	4b3e      	ldr	r3, [pc, #248]	; (8006cc4 <UART_SetConfig+0x21d4>)
 8006bca:	e002      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bcc:	4b3e      	ldr	r3, [pc, #248]	; (8006cc8 <UART_SetConfig+0x21d8>)
 8006bce:	e000      	b.n	8006bd2 <UART_SetConfig+0x20e2>
 8006bd0:	4b32      	ldr	r3, [pc, #200]	; (8006c9c <UART_SetConfig+0x21ac>)
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6852      	ldr	r2, [r2, #4]
 8006bd6:	0852      	lsrs	r2, r2, #1
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be6:	e0dd      	b.n	8006da4 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d046      	beq.n	8006c7e <UART_SetConfig+0x218e>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d040      	beq.n	8006c7a <UART_SetConfig+0x218a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d03a      	beq.n	8006c76 <UART_SetConfig+0x2186>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d034      	beq.n	8006c72 <UART_SetConfig+0x2182>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d02e      	beq.n	8006c6e <UART_SetConfig+0x217e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	2b05      	cmp	r3, #5
 8006c16:	d028      	beq.n	8006c6a <UART_SetConfig+0x217a>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	2b06      	cmp	r3, #6
 8006c1e:	d022      	beq.n	8006c66 <UART_SetConfig+0x2176>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	2b07      	cmp	r3, #7
 8006c26:	d01c      	beq.n	8006c62 <UART_SetConfig+0x2172>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d016      	beq.n	8006c5e <UART_SetConfig+0x216e>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d00f      	beq.n	8006c58 <UART_SetConfig+0x2168>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	2b0a      	cmp	r3, #10
 8006c3e:	d008      	beq.n	8006c52 <UART_SetConfig+0x2162>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	2b0b      	cmp	r3, #11
 8006c46:	d102      	bne.n	8006c4e <UART_SetConfig+0x215e>
 8006c48:	f643 5309 	movw	r3, #15625	; 0x3d09
 8006c4c:	e018      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <UART_SetConfig+0x21c0>)
 8006c50:	e016      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c52:	f647 2312 	movw	r3, #31250	; 0x7a12
 8006c56:	e013      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c58:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006c5c:	e010      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c5e:	4b1b      	ldr	r3, [pc, #108]	; (8006ccc <UART_SetConfig+0x21dc>)
 8006c60:	e00e      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c62:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <UART_SetConfig+0x21b0>)
 8006c64:	e00c      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <UART_SetConfig+0x21e0>)
 8006c68:	e00a      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c6a:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <UART_SetConfig+0x21e4>)
 8006c6c:	e008      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <UART_SetConfig+0x21b4>)
 8006c70:	e006      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c72:	4b19      	ldr	r3, [pc, #100]	; (8006cd8 <UART_SetConfig+0x21e8>)
 8006c74:	e004      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <UART_SetConfig+0x21b8>)
 8006c78:	e002      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <UART_SetConfig+0x21bc>)
 8006c7c:	e000      	b.n	8006c80 <UART_SetConfig+0x2190>
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <UART_SetConfig+0x21c0>)
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6852      	ldr	r2, [r2, #4]
 8006c84:	0852      	lsrs	r2, r2, #1
 8006c86:	441a      	add	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c94:	e086      	b.n	8006da4 <UART_SetConfig+0x22b4>
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
 8006c9c:	03d09000 	.word	0x03d09000
 8006ca0:	0003d090 	.word	0x0003d090
 8006ca4:	0007a120 	.word	0x0007a120
 8006ca8:	000f4240 	.word	0x000f4240
 8006cac:	001e8480 	.word	0x001e8480
 8006cb0:	003d0900 	.word	0x003d0900
 8006cb4:	00516155 	.word	0x00516155
 8006cb8:	0061a800 	.word	0x0061a800
 8006cbc:	007a1200 	.word	0x007a1200
 8006cc0:	00a2c2aa 	.word	0x00a2c2aa
 8006cc4:	00f42400 	.word	0x00f42400
 8006cc8:	01e84800 	.word	0x01e84800
 8006ccc:	0001e848 	.word	0x0001e848
 8006cd0:	00051615 	.word	0x00051615
 8006cd4:	00061a80 	.word	0x00061a80
 8006cd8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d04e      	beq.n	8006d82 <UART_SetConfig+0x2292>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d047      	beq.n	8006d7c <UART_SetConfig+0x228c>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d040      	beq.n	8006d76 <UART_SetConfig+0x2286>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d039      	beq.n	8006d70 <UART_SetConfig+0x2280>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d032      	beq.n	8006d6a <UART_SetConfig+0x227a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	d02b      	beq.n	8006d64 <UART_SetConfig+0x2274>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d10:	2b06      	cmp	r3, #6
 8006d12:	d024      	beq.n	8006d5e <UART_SetConfig+0x226e>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	2b07      	cmp	r3, #7
 8006d1a:	d01d      	beq.n	8006d58 <UART_SetConfig+0x2268>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d016      	beq.n	8006d52 <UART_SetConfig+0x2262>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d00f      	beq.n	8006d4c <UART_SetConfig+0x225c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b0a      	cmp	r3, #10
 8006d32:	d008      	beq.n	8006d46 <UART_SetConfig+0x2256>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	2b0b      	cmp	r3, #11
 8006d3a:	d101      	bne.n	8006d40 <UART_SetConfig+0x2250>
 8006d3c:	2380      	movs	r3, #128	; 0x80
 8006d3e:	e022      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d44:	e01f      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d4a:	e01c      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d50:	e019      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d56:	e016      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d5c:	e013      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8006d62:	e010      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d64:	f640 43cc 	movw	r3, #3276	; 0xccc
 8006d68:	e00d      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d6e:	e00a      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d70:	f241 5355 	movw	r3, #5461	; 0x1555
 8006d74:	e007      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006d7a:	e004      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d80:	e001      	b.n	8006d86 <UART_SetConfig+0x2296>
 8006d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6852      	ldr	r2, [r2, #4]
 8006d8a:	0852      	lsrs	r2, r2, #1
 8006d8c:	441a      	add	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d9a:	e003      	b.n	8006da4 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006da2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da6:	2b0f      	cmp	r3, #15
 8006da8:	d908      	bls.n	8006dbc <UART_SetConfig+0x22cc>
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006db0:	d204      	bcs.n	8006dbc <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db8:	60da      	str	r2, [r3, #12]
 8006dba:	e002      	b.n	8006dc2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006dde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3740      	adds	r7, #64	; 0x40
 8006de6:	46bd      	mov	sp, r7
 8006de8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006dec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00a      	beq.n	8006e5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	430a      	orrs	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00a      	beq.n	8006e7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e80:	f003 0310 	and.w	r3, r3, #16
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00a      	beq.n	8006e9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01a      	beq.n	8006f02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eea:	d10a      	bne.n	8006f02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  }
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006f40:	f7f9 fbcc 	bl	80006dc <HAL_GetTick>
 8006f44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d10e      	bne.n	8006f72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f58:	9300      	str	r3, [sp, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f82c 	bl	8006fc0 <UART_WaitOnFlagUntilTimeout>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e022      	b.n	8006fb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b04      	cmp	r3, #4
 8006f7e:	d10e      	bne.n	8006f9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f816 	bl	8006fc0 <UART_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e00c      	b.n	8006fb8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fd0:	e062      	b.n	8007098 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd8:	d05e      	beq.n	8007098 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fda:	f7f9 fb7f 	bl	80006dc <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d302      	bcc.n	8006ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d11d      	bne.n	800702c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ffe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0201 	bic.w	r2, r2, #1
 800700e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2220      	movs	r2, #32
 8007014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007028:	2303      	movs	r3, #3
 800702a:	e045      	b.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0304 	and.w	r3, r3, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d02e      	beq.n	8007098 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007048:	d126      	bne.n	8007098 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007052:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007062:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2220      	movs	r2, #32
 8007080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e00f      	b.n	80070b8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69da      	ldr	r2, [r3, #28]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	4013      	ands	r3, r2
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	bf0c      	ite	eq
 80070a8:	2301      	moveq	r3, #1
 80070aa:	2300      	movne	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d08d      	beq.n	8006fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80070d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6899      	ldr	r1, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b08      	ldr	r3, [pc, #32]	; (8007104 <UART_EndRxTransfer+0x44>)
 80070e4:	400b      	ands	r3, r1
 80070e6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80070f6:	bf00      	nop
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	effffffe 	.word	0xeffffffe

08007108 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7fd fcd8 	bl	8004adc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800712c:	bf00      	nop
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800714a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fd fcb4 	bl	8004ac8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_UARTEx_DisableFifoMode+0x16>
 80071b6:	2302      	movs	r3, #2
 80071b8:	e027      	b.n	800720a <HAL_UARTEx_DisableFifoMode+0x66>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2224      	movs	r2, #36	; 0x24
 80071c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0201 	bic.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800722a:	2302      	movs	r3, #2
 800722c:	e02d      	b.n	800728a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2224      	movs	r2, #36	; 0x24
 800723a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f850 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b084      	sub	sp, #16
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d101      	bne.n	80072aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80072a6:	2302      	movs	r3, #2
 80072a8:	e02d      	b.n	8007306 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2224      	movs	r2, #36	; 0x24
 80072b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f812 	bl	8007310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b089      	sub	sp, #36	; 0x24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007318:	4a2f      	ldr	r2, [pc, #188]	; (80073d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800731a:	f107 0314 	add.w	r3, r7, #20
 800731e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007322:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8007326:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <UARTEx_SetNbDataToProcess+0xcc>)
 8007328:	f107 030c 	add.w	r3, r7, #12
 800732c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007330:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007338:	2b00      	cmp	r3, #0
 800733a:	d108      	bne.n	800734e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800734c:	e03d      	b.n	80073ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800734e:	2308      	movs	r3, #8
 8007350:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007352:	2308      	movs	r3, #8
 8007354:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	0e5b      	lsrs	r3, r3, #25
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	0f5b      	lsrs	r3, r3, #29
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8007376:	7fbb      	ldrb	r3, [r7, #30]
 8007378:	7f3a      	ldrb	r2, [r7, #28]
 800737a:	f107 0120 	add.w	r1, r7, #32
 800737e:	440a      	add	r2, r1
 8007380:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007384:	fb02 f303 	mul.w	r3, r2, r3
 8007388:	7f3a      	ldrb	r2, [r7, #28]
 800738a:	f107 0120 	add.w	r1, r7, #32
 800738e:	440a      	add	r2, r1
 8007390:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007394:	fb93 f3f2 	sdiv	r3, r3, r2
 8007398:	b29a      	uxth	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80073a0:	7ffb      	ldrb	r3, [r7, #31]
 80073a2:	7f7a      	ldrb	r2, [r7, #29]
 80073a4:	f107 0120 	add.w	r1, r7, #32
 80073a8:	440a      	add	r2, r1
 80073aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80073ae:	fb02 f303 	mul.w	r3, r2, r3
 80073b2:	7f7a      	ldrb	r2, [r7, #29]
 80073b4:	f107 0120 	add.w	r1, r7, #32
 80073b8:	440a      	add	r2, r1
 80073ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80073be:	fb93 f3f2 	sdiv	r3, r3, r2
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80073ca:	bf00      	nop
 80073cc:	3724      	adds	r7, #36	; 0x24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	0800860c 	.word	0x0800860c
 80073dc:	08008614 	.word	0x08008614

080073e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08c      	sub	sp, #48	; 0x30
 80073e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073e6:	f107 031c 	add.w	r3, r7, #28
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	605a      	str	r2, [r3, #4]
 80073f0:	609a      	str	r2, [r3, #8]
 80073f2:	60da      	str	r2, [r3, #12]
 80073f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80073f6:	4b4f      	ldr	r3, [pc, #316]	; (8007534 <MX_GPIO_Init+0x154>)
 80073f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073fc:	4a4d      	ldr	r2, [pc, #308]	; (8007534 <MX_GPIO_Init+0x154>)
 80073fe:	f043 0304 	orr.w	r3, r3, #4
 8007402:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007406:	4b4b      	ldr	r3, [pc, #300]	; (8007534 <MX_GPIO_Init+0x154>)
 8007408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007414:	4b47      	ldr	r3, [pc, #284]	; (8007534 <MX_GPIO_Init+0x154>)
 8007416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800741a:	4a46      	ldr	r2, [pc, #280]	; (8007534 <MX_GPIO_Init+0x154>)
 800741c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007424:	4b43      	ldr	r3, [pc, #268]	; (8007534 <MX_GPIO_Init+0x154>)
 8007426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800742a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800742e:	617b      	str	r3, [r7, #20]
 8007430:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007432:	4b40      	ldr	r3, [pc, #256]	; (8007534 <MX_GPIO_Init+0x154>)
 8007434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007438:	4a3e      	ldr	r2, [pc, #248]	; (8007534 <MX_GPIO_Init+0x154>)
 800743a:	f043 0301 	orr.w	r3, r3, #1
 800743e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007442:	4b3c      	ldr	r3, [pc, #240]	; (8007534 <MX_GPIO_Init+0x154>)
 8007444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007450:	4b38      	ldr	r3, [pc, #224]	; (8007534 <MX_GPIO_Init+0x154>)
 8007452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007456:	4a37      	ldr	r2, [pc, #220]	; (8007534 <MX_GPIO_Init+0x154>)
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007460:	4b34      	ldr	r3, [pc, #208]	; (8007534 <MX_GPIO_Init+0x154>)
 8007462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800746e:	4b31      	ldr	r3, [pc, #196]	; (8007534 <MX_GPIO_Init+0x154>)
 8007470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007474:	4a2f      	ldr	r2, [pc, #188]	; (8007534 <MX_GPIO_Init+0x154>)
 8007476:	f043 0308 	orr.w	r3, r3, #8
 800747a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800747e:	4b2d      	ldr	r3, [pc, #180]	; (8007534 <MX_GPIO_Init+0x154>)
 8007480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800748c:	4b29      	ldr	r3, [pc, #164]	; (8007534 <MX_GPIO_Init+0x154>)
 800748e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007492:	4a28      	ldr	r2, [pc, #160]	; (8007534 <MX_GPIO_Init+0x154>)
 8007494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800749c:	4b25      	ldr	r3, [pc, #148]	; (8007534 <MX_GPIO_Init+0x154>)
 800749e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a6:	607b      	str	r3, [r7, #4]
 80074a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80074aa:	2200      	movs	r2, #0
 80074ac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80074b0:	4821      	ldr	r0, [pc, #132]	; (8007538 <MX_GPIO_Init+0x158>)
 80074b2:	f7f9 fda3 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80074b6:	2200      	movs	r2, #0
 80074b8:	2140      	movs	r1, #64	; 0x40
 80074ba:	4820      	ldr	r0, [pc, #128]	; (800753c <MX_GPIO_Init+0x15c>)
 80074bc:	f7f9 fd9e 	bl	8000ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80074c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074c6:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <MX_GPIO_Init+0x160>)
 80074c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ca:	2300      	movs	r3, #0
 80074cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074ce:	f107 031c 	add.w	r3, r7, #28
 80074d2:	4619      	mov	r1, r3
 80074d4:	481b      	ldr	r0, [pc, #108]	; (8007544 <MX_GPIO_Init+0x164>)
 80074d6:	f7f9 fbe1 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80074da:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80074de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e0:	2301      	movs	r3, #1
 80074e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e8:	2300      	movs	r3, #0
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074ec:	f107 031c 	add.w	r3, r7, #28
 80074f0:	4619      	mov	r1, r3
 80074f2:	4811      	ldr	r0, [pc, #68]	; (8007538 <MX_GPIO_Init+0x158>)
 80074f4:	f7f9 fbd2 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80074f8:	2340      	movs	r3, #64	; 0x40
 80074fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074fc:	2301      	movs	r3, #1
 80074fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007500:	2300      	movs	r3, #0
 8007502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007504:	2300      	movs	r3, #0
 8007506:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007508:	f107 031c 	add.w	r3, r7, #28
 800750c:	4619      	mov	r1, r3
 800750e:	480b      	ldr	r0, [pc, #44]	; (800753c <MX_GPIO_Init+0x15c>)
 8007510:	f7f9 fbc4 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007518:	2300      	movs	r3, #0
 800751a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751c:	2300      	movs	r3, #0
 800751e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007520:	f107 031c 	add.w	r3, r7, #28
 8007524:	4619      	mov	r1, r3
 8007526:	4805      	ldr	r0, [pc, #20]	; (800753c <MX_GPIO_Init+0x15c>)
 8007528:	f7f9 fbb8 	bl	8000c9c <HAL_GPIO_Init>

}
 800752c:	bf00      	nop
 800752e:	3730      	adds	r7, #48	; 0x30
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	58024400 	.word	0x58024400
 8007538:	58020400 	.word	0x58020400
 800753c:	58021800 	.word	0x58021800
 8007540:	11110000 	.word	0x11110000
 8007544:	58020800 	.word	0x58020800

08007548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800754c:	f7f9 f844 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007550:	f000 f830 	bl	80075b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007554:	f7ff ff44 	bl	80073e0 <MX_GPIO_Init>
 // MX_ETH_Init();
  MX_USART3_UART_Init();
 8007558:	f000 ff58 	bl	800840c <MX_USART3_UART_Init>
 // MX_USB_OTG_FS_PCD_Init();
  MX_TIM3_Init();
 800755c:	f000 fd52 	bl	8008004 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007560:	f000 fdde 	bl	8008120 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  servo_initialize(0);
 8007564:	2000      	movs	r0, #0
 8007566:	f000 f8e7 	bl	8007738 <servo_initialize>
  while (1)
  {
    /* USER CODE END WHILE */


	  servo_goto(0, 0, 70);
 800756a:	2246      	movs	r2, #70	; 0x46
 800756c:	2100      	movs	r1, #0
 800756e:	2000      	movs	r0, #0
 8007570:	f000 fc54 	bl	8007e1c <servo_goto>
	 // servo_goto(1, 0, 30);
	  while(1)
	  {
		  if (!servo_is_running(0))
 8007574:	2000      	movs	r0, #0
 8007576:	f000 fc69 	bl	8007e4c <servo_is_running>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d000      	beq.n	8007582 <main+0x3a>
 8007580:	e7f8      	b.n	8007574 <main+0x2c>
		  {
			  break; // break out from infinite loop
 8007582:	bf00      	nop
		  }
	  }
	  HAL_Delay(3000);
 8007584:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007588:	f7f9 f8b4 	bl	80006f4 <HAL_Delay>
	  servo_goto(0, 1800, 30);
 800758c:	221e      	movs	r2, #30
 800758e:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8007592:	2000      	movs	r0, #0
 8007594:	f000 fc42 	bl	8007e1c <servo_goto>
	 // servo_goto(1, 1800, 70);
	  while(1)
	  {
		  if (!servo_is_running(0))
 8007598:	2000      	movs	r0, #0
 800759a:	f000 fc57 	bl	8007e4c <servo_is_running>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d000      	beq.n	80075a6 <main+0x5e>
 80075a4:	e7f8      	b.n	8007598 <main+0x50>
		  {
			  break;
 80075a6:	bf00      	nop
		  }
	  }
	  HAL_Delay(3000);
 80075a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80075ac:	f7f9 f8a2 	bl	80006f4 <HAL_Delay>
	  servo_goto(0, 0, 70);
 80075b0:	e7db      	b.n	800756a <main+0x22>
	...

080075b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b0cc      	sub	sp, #304	; 0x130
 80075b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80075be:	224c      	movs	r2, #76	; 0x4c
 80075c0:	2100      	movs	r1, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	f001 f80e 	bl	80085e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80075cc:	2220      	movs	r2, #32
 80075ce:	2100      	movs	r1, #0
 80075d0:	4618      	mov	r0, r3
 80075d2:	f001 f807 	bl	80085e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	4618      	mov	r0, r3
 80075dc:	23bc      	movs	r3, #188	; 0xbc
 80075de:	461a      	mov	r2, r3
 80075e0:	2100      	movs	r1, #0
 80075e2:	f000 ffff 	bl	80085e4 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80075e6:	2002      	movs	r0, #2
 80075e8:	f7f9 fd22 	bl	8001030 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	4b4a      	ldr	r3, [pc, #296]	; (800771c <SystemClock_Config+0x168>)
 80075f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f6:	4a49      	ldr	r2, [pc, #292]	; (800771c <SystemClock_Config+0x168>)
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075fe:	4b47      	ldr	r3, [pc, #284]	; (800771c <SystemClock_Config+0x168>)
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	f003 0201 	and.w	r2, r3, #1
 8007606:	1d3b      	adds	r3, r7, #4
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	4b45      	ldr	r3, [pc, #276]	; (8007720 <SystemClock_Config+0x16c>)
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007612:	4a43      	ldr	r2, [pc, #268]	; (8007720 <SystemClock_Config+0x16c>)
 8007614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007618:	6193      	str	r3, [r2, #24]
 800761a:	4b41      	ldr	r3, [pc, #260]	; (8007720 <SystemClock_Config+0x16c>)
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8007622:	1d3b      	adds	r3, r7, #4
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	1d3b      	adds	r3, r7, #4
 8007628:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800762a:	bf00      	nop
 800762c:	4b3c      	ldr	r3, [pc, #240]	; (8007720 <SystemClock_Config+0x16c>)
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007638:	d1f8      	bne.n	800762c <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800763a:	2301      	movs	r3, #1
 800763c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007640:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007644:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007648:	2302      	movs	r3, #2
 800764a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800764e:	2302      	movs	r3, #2
 8007650:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007654:	2301      	movs	r3, #1
 8007656:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800765a:	2318      	movs	r3, #24
 800765c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007660:	2302      	movs	r3, #2
 8007662:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007666:	2304      	movs	r3, #4
 8007668:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800766c:	2302      	movs	r3, #2
 800766e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007672:	230c      	movs	r3, #12
 8007674:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007684:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007688:	4618      	mov	r0, r3
 800768a:	f7f9 fd19 	bl	80010c0 <HAL_RCC_OscConfig>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8007694:	f000 f848 	bl	8007728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007698:	233f      	movs	r3, #63	; 0x3f
 800769a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800769e:	2303      	movs	r3, #3
 80076a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80076aa:	2300      	movs	r3, #0
 80076ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80076b0:	2300      	movs	r3, #0
 80076b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80076bc:	2300      	movs	r3, #0
 80076be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80076c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80076cc:	2101      	movs	r1, #1
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fa f8ae 	bl	8001830 <HAL_RCC_ClockConfig>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <SystemClock_Config+0x12a>
  {
    Error_Handler();
 80076da:	f000 f825 	bl	8007728 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80076de:	f107 0308 	add.w	r3, r7, #8
 80076e2:	4a10      	ldr	r2, [pc, #64]	; (8007724 <SystemClock_Config+0x170>)
 80076e4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80076e6:	f107 0308 	add.w	r3, r7, #8
 80076ea:	2200      	movs	r2, #0
 80076ec:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80076ee:	f107 0308 	add.w	r3, r7, #8
 80076f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076fa:	f107 0308 	add.w	r3, r7, #8
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fa fbf4 	bl	8001eec <HAL_RCCEx_PeriphCLKConfig>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <SystemClock_Config+0x15a>
  {
    Error_Handler();
 800770a:	f000 f80d 	bl	8007728 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800770e:	f7f9 fcc7 	bl	80010a0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8007712:	bf00      	nop
 8007714:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	58000400 	.word	0x58000400
 8007720:	58024800 	.word	0x58024800
 8007724:	00040002 	.word	0x00040002

08007728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800772c:	bf00      	nop
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <servo_initialize>:

Servo servo[3];


void servo_initialize(int _servo_num)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
	if (!servo[0].enable && !servo[1].enable && !servo[2].enable)
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <servo_initialize+0x74>)
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10f      	bne.n	8007768 <servo_initialize+0x30>
 8007748:	4b18      	ldr	r3, [pc, #96]	; (80077ac <servo_initialize+0x74>)
 800774a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10b      	bne.n	8007768 <servo_initialize+0x30>
 8007750:	4b16      	ldr	r3, [pc, #88]	; (80077ac <servo_initialize+0x74>)
 8007752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007756:	2b00      	cmp	r3, #0
 8007758:	d106      	bne.n	8007768 <servo_initialize+0x30>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 800775a:	4815      	ldr	r0, [pc, #84]	; (80077b0 <servo_initialize+0x78>)
 800775c:	f7fb ff10 	bl	8003580 <HAL_TIM_Base_Start_IT>
		tim_reg = htim3.Instance;
 8007760:	4b13      	ldr	r3, [pc, #76]	; (80077b0 <servo_initialize+0x78>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a13      	ldr	r2, [pc, #76]	; (80077b4 <servo_initialize+0x7c>)
 8007766:	6013      	str	r3, [r2, #0]
	}

	switch (_servo_num)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d008      	beq.n	8007780 <servo_initialize+0x48>
 800776e:	2b02      	cmp	r3, #2
 8007770:	d00b      	beq.n	800778a <servo_initialize+0x52>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10e      	bne.n	8007794 <servo_initialize+0x5c>
	{
	case 0:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); //PA6
 8007776:	2100      	movs	r1, #0
 8007778:	480d      	ldr	r0, [pc, #52]	; (80077b0 <servo_initialize+0x78>)
 800777a:	f7fb ff61 	bl	8003640 <HAL_TIM_PWM_Start_IT>
		break;
 800777e:	e009      	b.n	8007794 <servo_initialize+0x5c>
	case 1:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2); //PB0
 8007780:	2104      	movs	r1, #4
 8007782:	480b      	ldr	r0, [pc, #44]	; (80077b0 <servo_initialize+0x78>)
 8007784:	f7fb ff5c 	bl	8003640 <HAL_TIM_PWM_Start_IT>
		break;
 8007788:	e004      	b.n	8007794 <servo_initialize+0x5c>
	case 2:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3); //PC7
 800778a:	2108      	movs	r1, #8
 800778c:	4808      	ldr	r0, [pc, #32]	; (80077b0 <servo_initialize+0x78>)
 800778e:	f7fb ff57 	bl	8003640 <HAL_TIM_PWM_Start_IT>
		break;
 8007792:	bf00      	nop
	}

	servo[_servo_num].cur_angle = 0;
 8007794:	4a05      	ldr	r2, [pc, #20]	; (80077ac <servo_initialize+0x74>)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2134      	movs	r1, #52	; 0x34
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	24000034 	.word	0x24000034
 80077b0:	24000110 	.word	0x24000110
 80077b4:	24000030 	.word	0x24000030

080077b8 <servo_run>:

void servo_run(int _servo_num)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	if (servo[_servo_num].delta != 0)
 80077c0:	4a11      	ldr	r2, [pc, #68]	; (8007808 <servo_run+0x50>)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2134      	movs	r1, #52	; 0x34
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	3324      	adds	r3, #36	; 0x24
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d009      	beq.n	80077e8 <servo_run+0x30>
	{
		servo[_servo_num].run = 1;
 80077d4:	4a0c      	ldr	r2, [pc, #48]	; (8007808 <servo_run+0x50>)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2134      	movs	r1, #52	; 0x34
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	4413      	add	r3, r2
 80077e0:	332c      	adds	r3, #44	; 0x2c
 80077e2:	2201      	movs	r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
	}
	else // 목표 각도에 도달했을때
	{
		servo[_servo_num].run = 0;
	}
}
 80077e6:	e008      	b.n	80077fa <servo_run+0x42>
		servo[_servo_num].run = 0;
 80077e8:	4a07      	ldr	r2, [pc, #28]	; (8007808 <servo_run+0x50>)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2134      	movs	r1, #52	; 0x34
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	4413      	add	r3, r2
 80077f4:	332c      	adds	r3, #44	; 0x2c
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	24000034 	.word	0x24000034

0800780c <servo_update>:
	servo[_servo_num].delta = 0;
	servo[_servo_num].run = 0;
}

void servo_update()
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
	int pulse = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	607b      	str	r3, [r7, #4]
	int i = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	603b      	str	r3, [r7, #0]

	for (i = 0; i < 3; i++) //servo[0]~servo[2]
 800781a:	2300      	movs	r3, #0
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	e0d2      	b.n	80079c6 <servo_update+0x1ba>
	{
		if (servo[i].run == 1 && servo[i].delta != 0) //서보를 작동시킨다는 명령이 주어지고 목표 각도까지의 남은 각도가 0이 아닐때
 8007820:	4a6d      	ldr	r2, [pc, #436]	; (80079d8 <servo_update+0x1cc>)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2134      	movs	r1, #52	; 0x34
 8007826:	fb01 f303 	mul.w	r3, r1, r3
 800782a:	4413      	add	r3, r2
 800782c:	332c      	adds	r3, #44	; 0x2c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b01      	cmp	r3, #1
 8007832:	f040 80b3 	bne.w	800799c <servo_update+0x190>
 8007836:	4a68      	ldr	r2, [pc, #416]	; (80079d8 <servo_update+0x1cc>)
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	2134      	movs	r1, #52	; 0x34
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	3324      	adds	r3, #36	; 0x24
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f000 80a8 	beq.w	800799c <servo_update+0x190>
		{
			servo_speed_update(i);
 800784c:	6838      	ldr	r0, [r7, #0]
 800784e:	f000 f8c7 	bl	80079e0 <servo_speed_update>

			if (servo[i].delta > servo[i].cur_speed)
 8007852:	4a61      	ldr	r2, [pc, #388]	; (80079d8 <servo_update+0x1cc>)
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2134      	movs	r1, #52	; 0x34
 8007858:	fb01 f303 	mul.w	r3, r1, r3
 800785c:	4413      	add	r3, r2
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	495d      	ldr	r1, [pc, #372]	; (80079d8 <servo_update+0x1cc>)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	2034      	movs	r0, #52	; 0x34
 8007868:	fb00 f303 	mul.w	r3, r0, r3
 800786c:	440b      	add	r3, r1
 800786e:	3308      	adds	r3, #8
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	dd13      	ble.n	800789e <servo_update+0x92>
			{
				pulse = servo[i].cur_speed * servo[i].direction;
 8007876:	4a58      	ldr	r2, [pc, #352]	; (80079d8 <servo_update+0x1cc>)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2134      	movs	r1, #52	; 0x34
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	4413      	add	r3, r2
 8007882:	3308      	adds	r3, #8
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4954      	ldr	r1, [pc, #336]	; (80079d8 <servo_update+0x1cc>)
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	2034      	movs	r0, #52	; 0x34
 800788c:	fb00 f202 	mul.w	r2, r0, r2
 8007890:	440a      	add	r2, r1
 8007892:	3228      	adds	r2, #40	; 0x28
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	fb02 f303 	mul.w	r3, r2, r3
 800789a:	607b      	str	r3, [r7, #4]
 800789c:	e012      	b.n	80078c4 <servo_update+0xb8>
			}
			else
			{
				pulse = servo[i].delta * servo[i].direction;
 800789e:	4a4e      	ldr	r2, [pc, #312]	; (80079d8 <servo_update+0x1cc>)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	2134      	movs	r1, #52	; 0x34
 80078a4:	fb01 f303 	mul.w	r3, r1, r3
 80078a8:	4413      	add	r3, r2
 80078aa:	3324      	adds	r3, #36	; 0x24
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	494a      	ldr	r1, [pc, #296]	; (80079d8 <servo_update+0x1cc>)
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	2034      	movs	r0, #52	; 0x34
 80078b4:	fb00 f202 	mul.w	r2, r0, r2
 80078b8:	440a      	add	r2, r1
 80078ba:	3228      	adds	r2, #40	; 0x28
 80078bc:	6812      	ldr	r2, [r2, #0]
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	607b      	str	r3, [r7, #4]
			}

			servo[i].cur_angle += pulse;
 80078c4:	4a44      	ldr	r2, [pc, #272]	; (80079d8 <servo_update+0x1cc>)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2134      	movs	r1, #52	; 0x34
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	441a      	add	r2, r3
 80078d6:	4940      	ldr	r1, [pc, #256]	; (80079d8 <servo_update+0x1cc>)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2034      	movs	r0, #52	; 0x34
 80078dc:	fb00 f303 	mul.w	r3, r0, r3
 80078e0:	440b      	add	r3, r1
 80078e2:	601a      	str	r2, [r3, #0]

			switch(i)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d010      	beq.n	800790c <servo_update+0x100>
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d01b      	beq.n	8007926 <servo_update+0x11a>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d126      	bne.n	8007940 <servo_update+0x134>
			{
			case 0:
				tim_reg->CCR1 = PULSE_L + servo[i].cur_angle;
 80078f2:	4a39      	ldr	r2, [pc, #228]	; (80079d8 <servo_update+0x1cc>)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2134      	movs	r1, #52	; 0x34
 80078f8:	fb01 f303 	mul.w	r3, r1, r3
 80078fc:	4413      	add	r3, r2
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f203 2226 	addw	r2, r3, #550	; 0x226
 8007904:	4b35      	ldr	r3, [pc, #212]	; (80079dc <servo_update+0x1d0>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 800790a:	e019      	b.n	8007940 <servo_update+0x134>
			case 1:
				tim_reg->CCR2 = PULSE_L + servo[i].cur_angle;
 800790c:	4a32      	ldr	r2, [pc, #200]	; (80079d8 <servo_update+0x1cc>)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2134      	movs	r1, #52	; 0x34
 8007912:	fb01 f303 	mul.w	r3, r1, r3
 8007916:	4413      	add	r3, r2
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f203 2226 	addw	r2, r3, #550	; 0x226
 800791e:	4b2f      	ldr	r3, [pc, #188]	; (80079dc <servo_update+0x1d0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8007924:	e00c      	b.n	8007940 <servo_update+0x134>
			case 2:
				tim_reg->CCR3 = PULSE_L + servo[i].cur_angle;
 8007926:	4a2c      	ldr	r2, [pc, #176]	; (80079d8 <servo_update+0x1cc>)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2134      	movs	r1, #52	; 0x34
 800792c:	fb01 f303 	mul.w	r3, r1, r3
 8007930:	4413      	add	r3, r2
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f203 2226 	addw	r2, r3, #550	; 0x226
 8007938:	4b28      	ldr	r3, [pc, #160]	; (80079dc <servo_update+0x1d0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 800793e:	bf00      	nop
			}

			servo[i].delta -= pulse * servo[i].direction;
 8007940:	4a25      	ldr	r2, [pc, #148]	; (80079d8 <servo_update+0x1cc>)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2134      	movs	r1, #52	; 0x34
 8007946:	fb01 f303 	mul.w	r3, r1, r3
 800794a:	4413      	add	r3, r2
 800794c:	3324      	adds	r3, #36	; 0x24
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4921      	ldr	r1, [pc, #132]	; (80079d8 <servo_update+0x1cc>)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2034      	movs	r0, #52	; 0x34
 8007956:	fb00 f303 	mul.w	r3, r0, r3
 800795a:	440b      	add	r3, r1
 800795c:	3328      	adds	r3, #40	; 0x28
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	fb01 f303 	mul.w	r3, r1, r3
 8007966:	1ad2      	subs	r2, r2, r3
 8007968:	491b      	ldr	r1, [pc, #108]	; (80079d8 <servo_update+0x1cc>)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2034      	movs	r0, #52	; 0x34
 800796e:	fb00 f303 	mul.w	r3, r0, r3
 8007972:	440b      	add	r3, r1
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps += 1;
 8007978:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <servo_update+0x1cc>)
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	2134      	movs	r1, #52	; 0x34
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	4413      	add	r3, r2
 8007984:	331c      	adds	r3, #28
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	4913      	ldr	r1, [pc, #76]	; (80079d8 <servo_update+0x1cc>)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2034      	movs	r0, #52	; 0x34
 8007990:	fb00 f303 	mul.w	r3, r0, r3
 8007994:	440b      	add	r3, r1
 8007996:	331c      	adds	r3, #28
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	e011      	b.n	80079c0 <servo_update+0x1b4>
		}
		else
		{
			servo[i].run = 0;
 800799c:	4a0e      	ldr	r2, [pc, #56]	; (80079d8 <servo_update+0x1cc>)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2134      	movs	r1, #52	; 0x34
 80079a2:	fb01 f303 	mul.w	r3, r1, r3
 80079a6:	4413      	add	r3, r2
 80079a8:	332c      	adds	r3, #44	; 0x2c
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps = 0;
 80079ae:	4a0a      	ldr	r2, [pc, #40]	; (80079d8 <servo_update+0x1cc>)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2134      	movs	r1, #52	; 0x34
 80079b4:	fb01 f303 	mul.w	r3, r1, r3
 80079b8:	4413      	add	r3, r2
 80079ba:	331c      	adds	r3, #28
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++) //servo[0]~servo[2]
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	f77f af29 	ble.w	8007820 <servo_update+0x14>
		}
	}
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	24000034 	.word	0x24000034
 80079dc:	24000030 	.word	0x24000030

080079e0 <servo_speed_update>:

void servo_speed_update(int _servo_num) //
{
 80079e0:	b490      	push	{r4, r7}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
	int i = _servo_num;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	60fb      	str	r3, [r7, #12]

	if ((servo[i].cur_steps > servo[i].acc_steps - 1) && (servo[i].cur_steps <= servo[i].acc_steps + servo[i].fixed_speed_steps - 1))
 80079ec:	4a6c      	ldr	r2, [pc, #432]	; (8007ba0 <servo_speed_update+0x1c0>)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2134      	movs	r1, #52	; 0x34
 80079f2:	fb01 f303 	mul.w	r3, r1, r3
 80079f6:	4413      	add	r3, r2
 80079f8:	331c      	adds	r3, #28
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	4968      	ldr	r1, [pc, #416]	; (8007ba0 <servo_speed_update+0x1c0>)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2034      	movs	r0, #52	; 0x34
 8007a02:	fb00 f303 	mul.w	r3, r0, r3
 8007a06:	440b      	add	r3, r1
 8007a08:	3314      	adds	r3, #20
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	dd2c      	ble.n	8007a6c <servo_speed_update+0x8c>
 8007a12:	4a63      	ldr	r2, [pc, #396]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2134      	movs	r1, #52	; 0x34
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	331c      	adds	r3, #28
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	495f      	ldr	r1, [pc, #380]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2034      	movs	r0, #52	; 0x34
 8007a28:	fb00 f303 	mul.w	r3, r0, r3
 8007a2c:	440b      	add	r3, r1
 8007a2e:	3314      	adds	r3, #20
 8007a30:	6819      	ldr	r1, [r3, #0]
 8007a32:	485b      	ldr	r0, [pc, #364]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2434      	movs	r4, #52	; 0x34
 8007a38:	fb04 f303 	mul.w	r3, r4, r3
 8007a3c:	4403      	add	r3, r0
 8007a3e:	3318      	adds	r3, #24
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	440b      	add	r3, r1
 8007a44:	3b01      	subs	r3, #1
 8007a46:	429a      	cmp	r2, r3
 8007a48:	dc10      	bgt.n	8007a6c <servo_speed_update+0x8c>
	{
		servo[i].cur_speed = servo[i].dst_speed;
 8007a4a:	4a55      	ldr	r2, [pc, #340]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2134      	movs	r1, #52	; 0x34
 8007a50:	fb01 f303 	mul.w	r3, r1, r3
 8007a54:	4413      	add	r3, r2
 8007a56:	330c      	adds	r3, #12
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	4951      	ldr	r1, [pc, #324]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2034      	movs	r0, #52	; 0x34
 8007a60:	fb00 f303 	mul.w	r3, r0, r3
 8007a64:	440b      	add	r3, r1
 8007a66:	3308      	adds	r3, #8
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	e093      	b.n	8007b94 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > 0) && (servo[i].cur_steps <= servo[i].acc_steps - 1))
 8007a6c:	4a4c      	ldr	r2, [pc, #304]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2134      	movs	r1, #52	; 0x34
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	4413      	add	r3, r2
 8007a78:	331c      	adds	r3, #28
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dd2c      	ble.n	8007ada <servo_speed_update+0xfa>
 8007a80:	4a47      	ldr	r2, [pc, #284]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2134      	movs	r1, #52	; 0x34
 8007a86:	fb01 f303 	mul.w	r3, r1, r3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	331c      	adds	r3, #28
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	4943      	ldr	r1, [pc, #268]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2034      	movs	r0, #52	; 0x34
 8007a96:	fb00 f303 	mul.w	r3, r0, r3
 8007a9a:	440b      	add	r3, r1
 8007a9c:	3314      	adds	r3, #20
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	dc19      	bgt.n	8007ada <servo_speed_update+0xfa>
	{
		servo[i].cur_speed += servo[i].acc;
 8007aa6:	4a3e      	ldr	r2, [pc, #248]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2134      	movs	r1, #52	; 0x34
 8007aac:	fb01 f303 	mul.w	r3, r1, r3
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	493a      	ldr	r1, [pc, #232]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2034      	movs	r0, #52	; 0x34
 8007abc:	fb00 f303 	mul.w	r3, r0, r3
 8007ac0:	440b      	add	r3, r1
 8007ac2:	3320      	adds	r3, #32
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	441a      	add	r2, r3
 8007ac8:	4935      	ldr	r1, [pc, #212]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2034      	movs	r0, #52	; 0x34
 8007ace:	fb00 f303 	mul.w	r3, r0, r3
 8007ad2:	440b      	add	r3, r1
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e05c      	b.n	8007b94 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > servo[i].acc_steps + servo[i].fixed_speed_steps - 1) && (servo[i].cur_steps <= servo[i].total_steps - 1))
 8007ada:	4a31      	ldr	r2, [pc, #196]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2134      	movs	r1, #52	; 0x34
 8007ae0:	fb01 f303 	mul.w	r3, r1, r3
 8007ae4:	4413      	add	r3, r2
 8007ae6:	331c      	adds	r3, #28
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	492d      	ldr	r1, [pc, #180]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2034      	movs	r0, #52	; 0x34
 8007af0:	fb00 f303 	mul.w	r3, r0, r3
 8007af4:	440b      	add	r3, r1
 8007af6:	3314      	adds	r3, #20
 8007af8:	6819      	ldr	r1, [r3, #0]
 8007afa:	4829      	ldr	r0, [pc, #164]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2434      	movs	r4, #52	; 0x34
 8007b00:	fb04 f303 	mul.w	r3, r4, r3
 8007b04:	4403      	add	r3, r0
 8007b06:	3318      	adds	r3, #24
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	440b      	add	r3, r1
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	dd2c      	ble.n	8007b6c <servo_speed_update+0x18c>
 8007b12:	4a23      	ldr	r2, [pc, #140]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2134      	movs	r1, #52	; 0x34
 8007b18:	fb01 f303 	mul.w	r3, r1, r3
 8007b1c:	4413      	add	r3, r2
 8007b1e:	331c      	adds	r3, #28
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	491f      	ldr	r1, [pc, #124]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2034      	movs	r0, #52	; 0x34
 8007b28:	fb00 f303 	mul.w	r3, r0, r3
 8007b2c:	440b      	add	r3, r1
 8007b2e:	3310      	adds	r3, #16
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3b01      	subs	r3, #1
 8007b34:	429a      	cmp	r2, r3
 8007b36:	dc19      	bgt.n	8007b6c <servo_speed_update+0x18c>
	{
		servo[i].cur_speed -= servo[i].acc;
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2134      	movs	r1, #52	; 0x34
 8007b3e:	fb01 f303 	mul.w	r3, r1, r3
 8007b42:	4413      	add	r3, r2
 8007b44:	3308      	adds	r3, #8
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4915      	ldr	r1, [pc, #84]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2034      	movs	r0, #52	; 0x34
 8007b4e:	fb00 f303 	mul.w	r3, r0, r3
 8007b52:	440b      	add	r3, r1
 8007b54:	3320      	adds	r3, #32
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	1ad2      	subs	r2, r2, r3
 8007b5a:	4911      	ldr	r1, [pc, #68]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2034      	movs	r0, #52	; 0x34
 8007b60:	fb00 f303 	mul.w	r3, r0, r3
 8007b64:	440b      	add	r3, r1
 8007b66:	3308      	adds	r3, #8
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e013      	b.n	8007b94 <servo_speed_update+0x1b4>
	}
	else if (servo[i].cur_steps == 0)
 8007b6c:	4a0c      	ldr	r2, [pc, #48]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2134      	movs	r1, #52	; 0x34
 8007b72:	fb01 f303 	mul.w	r3, r1, r3
 8007b76:	4413      	add	r3, r2
 8007b78:	331c      	adds	r3, #28
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <servo_speed_update+0x1b4>
	{
		servo[i].cur_speed = BASE_SPEED;
 8007b80:	4a07      	ldr	r2, [pc, #28]	; (8007ba0 <servo_speed_update+0x1c0>)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2134      	movs	r1, #52	; 0x34
 8007b86:	fb01 f303 	mul.w	r3, r1, r3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	2205      	movs	r2, #5
 8007b90:	601a      	str	r2, [r3, #0]
	}
}
 8007b92:	e7ff      	b.n	8007b94 <servo_speed_update+0x1b4>
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc90      	pop	{r4, r7}
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	24000034 	.word	0x24000034

08007ba4 <servo_set_angle>:

void servo_set_angle(int _servo_num, int _angle)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]

	if (_angle > 1800)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8007bb8:	dd03      	ble.n	8007bc2 <servo_set_angle+0x1e>
	{
		_angle = 1800;
 8007bba:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	e004      	b.n	8007bcc <servo_set_angle+0x28>
	}
	else if (_angle < 0)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	da01      	bge.n	8007bcc <servo_set_angle+0x28>
	{
		_angle = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	603b      	str	r3, [r7, #0]
	}

	servo[i].dst_angle = _angle;
 8007bcc:	4a6e      	ldr	r2, [pc, #440]	; (8007d88 <servo_set_angle+0x1e4>)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2134      	movs	r1, #52	; 0x34
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3304      	adds	r3, #4
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	601a      	str	r2, [r3, #0]
	servo[i].delta = servo[i].dst_angle - servo[i].cur_angle;
 8007bde:	4a6a      	ldr	r2, [pc, #424]	; (8007d88 <servo_set_angle+0x1e4>)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2134      	movs	r1, #52	; 0x34
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	4413      	add	r3, r2
 8007bea:	3304      	adds	r3, #4
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	4966      	ldr	r1, [pc, #408]	; (8007d88 <servo_set_angle+0x1e4>)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2034      	movs	r0, #52	; 0x34
 8007bf4:	fb00 f303 	mul.w	r3, r0, r3
 8007bf8:	440b      	add	r3, r1
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	1ad2      	subs	r2, r2, r3
 8007bfe:	4962      	ldr	r1, [pc, #392]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2034      	movs	r0, #52	; 0x34
 8007c04:	fb00 f303 	mul.w	r3, r0, r3
 8007c08:	440b      	add	r3, r1
 8007c0a:	3324      	adds	r3, #36	; 0x24
 8007c0c:	601a      	str	r2, [r3, #0]

	if (servo[i].delta < 0)
 8007c0e:	4a5e      	ldr	r2, [pc, #376]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2134      	movs	r1, #52	; 0x34
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	4413      	add	r3, r2
 8007c1a:	3324      	adds	r3, #36	; 0x24
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da16      	bge.n	8007c50 <servo_set_angle+0xac>
	{
		servo_set_direction(i, CW);
 8007c22:	f04f 31ff 	mov.w	r1, #4294967295
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f8e2 	bl	8007df0 <servo_set_direction>
		servo[i].delta *= -1;
 8007c2c:	4a56      	ldr	r2, [pc, #344]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2134      	movs	r1, #52	; 0x34
 8007c32:	fb01 f303 	mul.w	r3, r1, r3
 8007c36:	4413      	add	r3, r2
 8007c38:	3324      	adds	r3, #36	; 0x24
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	425a      	negs	r2, r3
 8007c3e:	4952      	ldr	r1, [pc, #328]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2034      	movs	r0, #52	; 0x34
 8007c44:	fb00 f303 	mul.w	r3, r0, r3
 8007c48:	440b      	add	r3, r1
 8007c4a:	3324      	adds	r3, #36	; 0x24
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	e00d      	b.n	8007c6c <servo_set_angle+0xc8>
	}
	else if(servo[i].delta > 0)
 8007c50:	4a4d      	ldr	r2, [pc, #308]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2134      	movs	r1, #52	; 0x34
 8007c56:	fb01 f303 	mul.w	r3, r1, r3
 8007c5a:	4413      	add	r3, r2
 8007c5c:	3324      	adds	r3, #36	; 0x24
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd03      	ble.n	8007c6c <servo_set_angle+0xc8>
	{
		servo_set_direction(i, CCW);
 8007c64:	2101      	movs	r1, #1
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 f8c2 	bl	8007df0 <servo_set_direction>
	}

	servo[i].total_steps = servo[i].delta / (servo[i].dst_speed - ACC_RATIO * (servo[i].dst_speed - BASE_SPEED));
 8007c6c:	4a46      	ldr	r2, [pc, #280]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2134      	movs	r1, #52	; 0x34
 8007c72:	fb01 f303 	mul.w	r3, r1, r3
 8007c76:	4413      	add	r3, r2
 8007c78:	3324      	adds	r3, #36	; 0x24
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	ee07 3a90 	vmov	s15, r3
 8007c80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8007c84:	4a40      	ldr	r2, [pc, #256]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2134      	movs	r1, #52	; 0x34
 8007c8a:	fb01 f303 	mul.w	r3, r1, r3
 8007c8e:	4413      	add	r3, r2
 8007c90:	330c      	adds	r3, #12
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007c9c:	4a3a      	ldr	r2, [pc, #232]	; (8007d88 <servo_set_angle+0x1e4>)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2134      	movs	r1, #52	; 0x34
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	4413      	add	r3, r2
 8007ca8:	330c      	adds	r3, #12
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3b05      	subs	r3, #5
 8007cae:	ee07 3a90 	vmov	s15, r3
 8007cb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007cb6:	eeb4 4b00 	vmov.f64	d4, #64	; 0x3e000000  0.125
 8007cba:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007cbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007cc2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007cc6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007cca:	ee17 0a90 	vmov	r0, s15
 8007cce:	4a2e      	ldr	r2, [pc, #184]	; (8007d88 <servo_set_angle+0x1e4>)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2134      	movs	r1, #52	; 0x34
 8007cd4:	fb01 f303 	mul.w	r3, r1, r3
 8007cd8:	4413      	add	r3, r2
 8007cda:	3310      	adds	r3, #16
 8007cdc:	6018      	str	r0, [r3, #0]
	servo[i].acc_steps = ACC_RATIO * servo[i].total_steps;
 8007cde:	4a2a      	ldr	r2, [pc, #168]	; (8007d88 <servo_set_angle+0x1e4>)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2134      	movs	r1, #52	; 0x34
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	4413      	add	r3, r2
 8007cea:	3310      	adds	r3, #16
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	ee07 3a90 	vmov	s15, r3
 8007cf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007cf6:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 8007cfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007cfe:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007d02:	ee17 0a90 	vmov	r0, s15
 8007d06:	4a20      	ldr	r2, [pc, #128]	; (8007d88 <servo_set_angle+0x1e4>)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2134      	movs	r1, #52	; 0x34
 8007d0c:	fb01 f303 	mul.w	r3, r1, r3
 8007d10:	4413      	add	r3, r2
 8007d12:	3314      	adds	r3, #20
 8007d14:	6018      	str	r0, [r3, #0]
	servo[i].fixed_speed_steps = servo[i].total_steps - 2 * servo[i].acc_steps;
 8007d16:	4a1c      	ldr	r2, [pc, #112]	; (8007d88 <servo_set_angle+0x1e4>)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2134      	movs	r1, #52	; 0x34
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	4413      	add	r3, r2
 8007d22:	3310      	adds	r3, #16
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4918      	ldr	r1, [pc, #96]	; (8007d88 <servo_set_angle+0x1e4>)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2034      	movs	r0, #52	; 0x34
 8007d2c:	fb00 f303 	mul.w	r3, r0, r3
 8007d30:	440b      	add	r3, r1
 8007d32:	3314      	adds	r3, #20
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	005b      	lsls	r3, r3, #1
 8007d38:	1ad2      	subs	r2, r2, r3
 8007d3a:	4913      	ldr	r1, [pc, #76]	; (8007d88 <servo_set_angle+0x1e4>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2034      	movs	r0, #52	; 0x34
 8007d40:	fb00 f303 	mul.w	r3, r0, r3
 8007d44:	440b      	add	r3, r1
 8007d46:	3318      	adds	r3, #24
 8007d48:	601a      	str	r2, [r3, #0]
	servo[i].acc = (servo[i].dst_speed - BASE_SPEED) / servo[i].acc_steps;
 8007d4a:	4a0f      	ldr	r2, [pc, #60]	; (8007d88 <servo_set_angle+0x1e4>)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2134      	movs	r1, #52	; 0x34
 8007d50:	fb01 f303 	mul.w	r3, r1, r3
 8007d54:	4413      	add	r3, r2
 8007d56:	330c      	adds	r3, #12
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	1f5a      	subs	r2, r3, #5
 8007d5c:	490a      	ldr	r1, [pc, #40]	; (8007d88 <servo_set_angle+0x1e4>)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2034      	movs	r0, #52	; 0x34
 8007d62:	fb00 f303 	mul.w	r3, r0, r3
 8007d66:	440b      	add	r3, r1
 8007d68:	3314      	adds	r3, #20
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	fb92 f2f3 	sdiv	r2, r2, r3
 8007d70:	4905      	ldr	r1, [pc, #20]	; (8007d88 <servo_set_angle+0x1e4>)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2034      	movs	r0, #52	; 0x34
 8007d76:	fb00 f303 	mul.w	r3, r0, r3
 8007d7a:	440b      	add	r3, r1
 8007d7c:	3320      	adds	r3, #32
 8007d7e:	601a      	str	r2, [r3, #0]
}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	24000034 	.word	0x24000034

08007d8c <servo_set_speed>:

void servo_set_speed(int _servo_num, int _speed) //타겟 스피드를 결정
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60fb      	str	r3, [r7, #12]

	if (_speed > MAX_SPEED)
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b32      	cmp	r3, #50	; 0x32
 8007d9e:	dd09      	ble.n	8007db4 <servo_set_speed+0x28>
	{
		servo[i].dst_speed = MAX_SPEED;
 8007da0:	4a12      	ldr	r2, [pc, #72]	; (8007dec <servo_set_speed+0x60>)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2134      	movs	r1, #52	; 0x34
 8007da6:	fb01 f303 	mul.w	r3, r1, r3
 8007daa:	4413      	add	r3, r2
 8007dac:	330c      	adds	r3, #12
 8007dae:	2232      	movs	r2, #50	; 0x32
 8007db0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		servo[i].dst_speed = _speed;
	}
}
 8007db2:	e015      	b.n	8007de0 <servo_set_speed+0x54>
	else if (_speed < MIN_SPEED)
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b09      	cmp	r3, #9
 8007db8:	dc09      	bgt.n	8007dce <servo_set_speed+0x42>
		servo[i].dst_speed = MIN_SPEED;
 8007dba:	4a0c      	ldr	r2, [pc, #48]	; (8007dec <servo_set_speed+0x60>)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2134      	movs	r1, #52	; 0x34
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	330c      	adds	r3, #12
 8007dc8:	220a      	movs	r2, #10
 8007dca:	601a      	str	r2, [r3, #0]
}
 8007dcc:	e008      	b.n	8007de0 <servo_set_speed+0x54>
		servo[i].dst_speed = _speed;
 8007dce:	4a07      	ldr	r2, [pc, #28]	; (8007dec <servo_set_speed+0x60>)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2134      	movs	r1, #52	; 0x34
 8007dd4:	fb01 f303 	mul.w	r3, r1, r3
 8007dd8:	4413      	add	r3, r2
 8007dda:	330c      	adds	r3, #12
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	601a      	str	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr
 8007dec:	24000034 	.word	0x24000034

08007df0 <servo_set_direction>:

void servo_set_direction(int _servo_num, int _direction)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	servo[_servo_num].direction = _direction;
 8007dfa:	4a07      	ldr	r2, [pc, #28]	; (8007e18 <servo_set_direction+0x28>)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2134      	movs	r1, #52	; 0x34
 8007e00:	fb01 f303 	mul.w	r3, r1, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	3328      	adds	r3, #40	; 0x28
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	601a      	str	r2, [r3, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	24000034 	.word	0x24000034

08007e1c <servo_goto>:

void servo_goto(int _servo_num, int _val, int _speed)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
	if (_speed != 0)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <servo_goto+0x1a>
	{
		servo_set_speed(_servo_num, _speed);
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7ff ffab 	bl	8007d8c <servo_set_speed>
	}

	servo_set_angle(_servo_num, _val);
 8007e36:	68b9      	ldr	r1, [r7, #8]
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff feb3 	bl	8007ba4 <servo_set_angle>
	servo_run(_servo_num);
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff fcba 	bl	80077b8 <servo_run>
}
 8007e44:	bf00      	nop
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <servo_is_running>:
	servo_set_angle(_servo_num, servo[_servo_num].cur_angle + _val * _direction);
	servo_run(_servo_num);
}

int servo_is_running(int _servo_num)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	return servo[_servo_num].run;
 8007e54:	4a06      	ldr	r2, [pc, #24]	; (8007e70 <servo_is_running+0x24>)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2134      	movs	r1, #52	; 0x34
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	4413      	add	r3, r2
 8007e60:	332c      	adds	r3, #44	; 0x2c
 8007e62:	681b      	ldr	r3, [r3, #0]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	24000034 	.word	0x24000034

08007e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <HAL_MspInit+0x30>)
 8007e7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e80:	4a08      	ldr	r2, [pc, #32]	; (8007ea4 <HAL_MspInit+0x30>)
 8007e82:	f043 0302 	orr.w	r3, r3, #2
 8007e86:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e8a:	4b06      	ldr	r3, [pc, #24]	; (8007ea4 <HAL_MspInit+0x30>)
 8007e8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	58024400 	.word	0x58024400

08007ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007eac:	bf00      	nop
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007eba:	e7fe      	b.n	8007eba <HardFault_Handler+0x4>

08007ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ec0:	e7fe      	b.n	8007ec0 <MemManage_Handler+0x4>

08007ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ec6:	e7fe      	b.n	8007ec6 <BusFault_Handler+0x4>

08007ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007ecc:	e7fe      	b.n	8007ecc <UsageFault_Handler+0x4>

08007ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007ed2:	bf00      	nop
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007edc:	b480      	push	{r7}
 8007ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ee0:	bf00      	nop
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007eea:	b480      	push	{r7}
 8007eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007eee:	bf00      	nop
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007efc:	f7f8 fbda 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007f00:	bf00      	nop
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007f08:	4802      	ldr	r0, [pc, #8]	; (8007f14 <TIM3_IRQHandler+0x10>)
 8007f0a:	f7fb fc37 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007f0e:	bf00      	nop
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	24000110 	.word	0x24000110

08007f18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007f1c:	4802      	ldr	r0, [pc, #8]	; (8007f28 <TIM4_IRQHandler+0x10>)
 8007f1e:	f7fb fc2d 	bl	800377c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007f22:	bf00      	nop
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	240000d0 	.word	0x240000d0

08007f2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007f30:	4802      	ldr	r0, [pc, #8]	; (8007f3c <USART3_IRQHandler+0x10>)
 8007f32:	f7fc fc49 	bl	80047c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	24000150 	.word	0x24000150

08007f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007f40:	b480      	push	{r7}
 8007f42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007f44:	4b29      	ldr	r3, [pc, #164]	; (8007fec <SystemInit+0xac>)
 8007f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4a:	4a28      	ldr	r2, [pc, #160]	; (8007fec <SystemInit+0xac>)
 8007f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007f54:	4b26      	ldr	r3, [pc, #152]	; (8007ff0 <SystemInit+0xb0>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a25      	ldr	r2, [pc, #148]	; (8007ff0 <SystemInit+0xb0>)
 8007f5a:	f043 0301 	orr.w	r3, r3, #1
 8007f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007f60:	4b23      	ldr	r3, [pc, #140]	; (8007ff0 <SystemInit+0xb0>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007f66:	4b22      	ldr	r3, [pc, #136]	; (8007ff0 <SystemInit+0xb0>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4921      	ldr	r1, [pc, #132]	; (8007ff0 <SystemInit+0xb0>)
 8007f6c:	4b21      	ldr	r3, [pc, #132]	; (8007ff4 <SystemInit+0xb4>)
 8007f6e:	4013      	ands	r3, r2
 8007f70:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007f72:	4b1f      	ldr	r3, [pc, #124]	; (8007ff0 <SystemInit+0xb0>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007f78:	4b1d      	ldr	r3, [pc, #116]	; (8007ff0 <SystemInit+0xb0>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007f7e:	4b1c      	ldr	r3, [pc, #112]	; (8007ff0 <SystemInit+0xb0>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007f84:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <SystemInit+0xb0>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8007f8a:	4b19      	ldr	r3, [pc, #100]	; (8007ff0 <SystemInit+0xb0>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007f90:	4b17      	ldr	r3, [pc, #92]	; (8007ff0 <SystemInit+0xb0>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007f96:	4b16      	ldr	r3, [pc, #88]	; (8007ff0 <SystemInit+0xb0>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8007f9c:	4b14      	ldr	r3, [pc, #80]	; (8007ff0 <SystemInit+0xb0>)
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007fa2:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <SystemInit+0xb0>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8007fa8:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <SystemInit+0xb0>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007fae:	4b10      	ldr	r3, [pc, #64]	; (8007ff0 <SystemInit+0xb0>)
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007fb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <SystemInit+0xb0>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a0d      	ldr	r2, [pc, #52]	; (8007ff0 <SystemInit+0xb0>)
 8007fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <SystemInit+0xb0>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <SystemInit+0xb8>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	4b0c      	ldr	r3, [pc, #48]	; (8007ffc <SystemInit+0xbc>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fd2:	d202      	bcs.n	8007fda <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <SystemInit+0xc0>)
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007fda:	4b04      	ldr	r3, [pc, #16]	; (8007fec <SystemInit+0xac>)
 8007fdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fe0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007fe2:	bf00      	nop
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	e000ed00 	.word	0xe000ed00
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	eaf6ed7f 	.word	0xeaf6ed7f
 8007ff8:	5c001000 	.word	0x5c001000
 8007ffc:	ffff0000 	.word	0xffff0000
 8008000:	51008108 	.word	0x51008108

08008004 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08e      	sub	sp, #56	; 0x38
 8008008:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800800a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800800e:	2200      	movs	r2, #0
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	605a      	str	r2, [r3, #4]
 8008014:	609a      	str	r2, [r3, #8]
 8008016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008018:	f107 031c 	add.w	r3, r7, #28
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008024:	463b      	mov	r3, r7
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	605a      	str	r2, [r3, #4]
 800802c:	609a      	str	r2, [r3, #8]
 800802e:	60da      	str	r2, [r3, #12]
 8008030:	611a      	str	r2, [r3, #16]
 8008032:	615a      	str	r2, [r3, #20]
 8008034:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8008036:	4b38      	ldr	r3, [pc, #224]	; (8008118 <MX_TIM3_Init+0x114>)
 8008038:	4a38      	ldr	r2, [pc, #224]	; (800811c <MX_TIM3_Init+0x118>)
 800803a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 800803c:	4b36      	ldr	r3, [pc, #216]	; (8008118 <MX_TIM3_Init+0x114>)
 800803e:	225f      	movs	r2, #95	; 0x5f
 8008040:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008042:	4b35      	ldr	r3, [pc, #212]	; (8008118 <MX_TIM3_Init+0x114>)
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1; // 20ms period; ARR value
 8008048:	4b33      	ldr	r3, [pc, #204]	; (8008118 <MX_TIM3_Init+0x114>)
 800804a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800804e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008050:	4b31      	ldr	r3, [pc, #196]	; (8008118 <MX_TIM3_Init+0x114>)
 8008052:	2200      	movs	r2, #0
 8008054:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008056:	4b30      	ldr	r3, [pc, #192]	; (8008118 <MX_TIM3_Init+0x114>)
 8008058:	2280      	movs	r2, #128	; 0x80
 800805a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800805c:	482e      	ldr	r0, [pc, #184]	; (8008118 <MX_TIM3_Init+0x114>)
 800805e:	f7fb fa63 	bl	8003528 <HAL_TIM_Base_Init>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8008068:	f7ff fb5e 	bl	8007728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800806c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008070:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008076:	4619      	mov	r1, r3
 8008078:	4827      	ldr	r0, [pc, #156]	; (8008118 <MX_TIM3_Init+0x114>)
 800807a:	f7fb fdb7 	bl	8003bec <HAL_TIM_ConfigClockSource>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8008084:	f7ff fb50 	bl	8007728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008088:	4823      	ldr	r0, [pc, #140]	; (8008118 <MX_TIM3_Init+0x114>)
 800808a:	f7fb faa3 	bl	80035d4 <HAL_TIM_PWM_Init>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8008094:	f7ff fb48 	bl	8007728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008098:	2300      	movs	r3, #0
 800809a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800809c:	2300      	movs	r3, #0
 800809e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80080a0:	f107 031c 	add.w	r3, r7, #28
 80080a4:	4619      	mov	r1, r3
 80080a6:	481c      	ldr	r0, [pc, #112]	; (8008118 <MX_TIM3_Init+0x114>)
 80080a8:	f7fc fac4 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80080b2:	f7ff fb39 	bl	8007728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80080b6:	2360      	movs	r3, #96	; 0x60
 80080b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80080be:	2300      	movs	r3, #0
 80080c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80080c6:	463b      	mov	r3, r7
 80080c8:	2200      	movs	r2, #0
 80080ca:	4619      	mov	r1, r3
 80080cc:	4812      	ldr	r0, [pc, #72]	; (8008118 <MX_TIM3_Init+0x114>)
 80080ce:	f7fb fc75 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80080d8:	f7ff fb26 	bl	8007728 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80080dc:	463b      	mov	r3, r7
 80080de:	2204      	movs	r2, #4
 80080e0:	4619      	mov	r1, r3
 80080e2:	480d      	ldr	r0, [pc, #52]	; (8008118 <MX_TIM3_Init+0x114>)
 80080e4:	f7fb fc6a 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d001      	beq.n	80080f2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80080ee:	f7ff fb1b 	bl	8007728 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80080f2:	463b      	mov	r3, r7
 80080f4:	2208      	movs	r2, #8
 80080f6:	4619      	mov	r1, r3
 80080f8:	4807      	ldr	r0, [pc, #28]	; (8008118 <MX_TIM3_Init+0x114>)
 80080fa:	f7fb fc5f 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8008104:	f7ff fb10 	bl	8007728 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8008108:	4803      	ldr	r0, [pc, #12]	; (8008118 <MX_TIM3_Init+0x114>)
 800810a:	f000 f8c7 	bl	800829c <HAL_TIM_MspPostInit>

}
 800810e:	bf00      	nop
 8008110:	3738      	adds	r7, #56	; 0x38
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	24000110 	.word	0x24000110
 800811c:	40000400 	.word	0x40000400

08008120 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08e      	sub	sp, #56	; 0x38
 8008124:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008126:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	605a      	str	r2, [r3, #4]
 8008130:	609a      	str	r2, [r3, #8]
 8008132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008134:	f107 031c 	add.w	r3, r7, #28
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008140:	463b      	mov	r3, r7
 8008142:	2200      	movs	r2, #0
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	605a      	str	r2, [r3, #4]
 8008148:	609a      	str	r2, [r3, #8]
 800814a:	60da      	str	r2, [r3, #12]
 800814c:	611a      	str	r2, [r3, #16]
 800814e:	615a      	str	r2, [r3, #20]
 8008150:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8008152:	4b2c      	ldr	r3, [pc, #176]	; (8008204 <MX_TIM4_Init+0xe4>)
 8008154:	4a2c      	ldr	r2, [pc, #176]	; (8008208 <MX_TIM4_Init+0xe8>)
 8008156:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8008158:	4b2a      	ldr	r3, [pc, #168]	; (8008204 <MX_TIM4_Init+0xe4>)
 800815a:	2200      	movs	r2, #0
 800815c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800815e:	4b29      	ldr	r3, [pc, #164]	; (8008204 <MX_TIM4_Init+0xe4>)
 8008160:	2200      	movs	r2, #0
 8008162:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8008164:	4b27      	ldr	r3, [pc, #156]	; (8008204 <MX_TIM4_Init+0xe4>)
 8008166:	2200      	movs	r2, #0
 8008168:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800816a:	4b26      	ldr	r3, [pc, #152]	; (8008204 <MX_TIM4_Init+0xe4>)
 800816c:	2200      	movs	r2, #0
 800816e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008170:	4b24      	ldr	r3, [pc, #144]	; (8008204 <MX_TIM4_Init+0xe4>)
 8008172:	2280      	movs	r2, #128	; 0x80
 8008174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008176:	4823      	ldr	r0, [pc, #140]	; (8008204 <MX_TIM4_Init+0xe4>)
 8008178:	f7fb f9d6 	bl	8003528 <HAL_TIM_Base_Init>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8008182:	f7ff fad1 	bl	8007728 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800818c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008190:	4619      	mov	r1, r3
 8008192:	481c      	ldr	r0, [pc, #112]	; (8008204 <MX_TIM4_Init+0xe4>)
 8008194:	f7fb fd2a 	bl	8003bec <HAL_TIM_ConfigClockSource>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800819e:	f7ff fac3 	bl	8007728 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80081a2:	4818      	ldr	r0, [pc, #96]	; (8008204 <MX_TIM4_Init+0xe4>)
 80081a4:	f7fb fa16 	bl	80035d4 <HAL_TIM_PWM_Init>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80081ae:	f7ff fabb 	bl	8007728 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081b6:	2300      	movs	r3, #0
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80081ba:	f107 031c 	add.w	r3, r7, #28
 80081be:	4619      	mov	r1, r3
 80081c0:	4810      	ldr	r0, [pc, #64]	; (8008204 <MX_TIM4_Init+0xe4>)
 80081c2:	f7fc fa37 	bl	8004634 <HAL_TIMEx_MasterConfigSynchronization>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80081cc:	f7ff faac 	bl	8007728 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80081d0:	2360      	movs	r3, #96	; 0x60
 80081d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80081d8:	2300      	movs	r3, #0
 80081da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80081dc:	2300      	movs	r3, #0
 80081de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80081e0:	463b      	mov	r3, r7
 80081e2:	2200      	movs	r2, #0
 80081e4:	4619      	mov	r1, r3
 80081e6:	4807      	ldr	r0, [pc, #28]	; (8008204 <MX_TIM4_Init+0xe4>)
 80081e8:	f7fb fbe8 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80081f2:	f7ff fa99 	bl	8007728 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80081f6:	4803      	ldr	r0, [pc, #12]	; (8008204 <MX_TIM4_Init+0xe4>)
 80081f8:	f000 f850 	bl	800829c <HAL_TIM_MspPostInit>

}
 80081fc:	bf00      	nop
 80081fe:	3738      	adds	r7, #56	; 0x38
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	240000d0 	.word	0x240000d0
 8008208:	40000800 	.word	0x40000800

0800820c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a1d      	ldr	r2, [pc, #116]	; (8008290 <HAL_TIM_Base_MspInit+0x84>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d117      	bne.n	800824e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_TIM_Base_MspInit+0x88>)
 8008220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008224:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <HAL_TIM_Base_MspInit+0x88>)
 8008226:	f043 0302 	orr.w	r3, r3, #2
 800822a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800822e:	4b19      	ldr	r3, [pc, #100]	; (8008294 <HAL_TIM_Base_MspInit+0x88>)
 8008230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	60fb      	str	r3, [r7, #12]
 800823a:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800823c:	2200      	movs	r2, #0
 800823e:	2100      	movs	r1, #0
 8008240:	201d      	movs	r0, #29
 8008242:	f7f8 fb60 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008246:	201d      	movs	r0, #29
 8008248:	f7f8 fb77 	bl	800093a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800824c:	e01b      	b.n	8008286 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a11      	ldr	r2, [pc, #68]	; (8008298 <HAL_TIM_Base_MspInit+0x8c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d116      	bne.n	8008286 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008258:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <HAL_TIM_Base_MspInit+0x88>)
 800825a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800825e:	4a0d      	ldr	r2, [pc, #52]	; (8008294 <HAL_TIM_Base_MspInit+0x88>)
 8008260:	f043 0304 	orr.w	r3, r3, #4
 8008264:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008268:	4b0a      	ldr	r3, [pc, #40]	; (8008294 <HAL_TIM_Base_MspInit+0x88>)
 800826a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	60bb      	str	r3, [r7, #8]
 8008274:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	201e      	movs	r0, #30
 800827c:	f7f8 fb43 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008280:	201e      	movs	r0, #30
 8008282:	f7f8 fb5a 	bl	800093a <HAL_NVIC_EnableIRQ>
}
 8008286:	bf00      	nop
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	40000400 	.word	0x40000400
 8008294:	58024400 	.word	0x58024400
 8008298:	40000800 	.word	0x40000800

0800829c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08c      	sub	sp, #48	; 0x30
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a4:	f107 031c 	add.w	r3, r7, #28
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	609a      	str	r2, [r3, #8]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a44      	ldr	r2, [pc, #272]	; (80083cc <HAL_TIM_MspPostInit+0x130>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d15d      	bne.n	800837a <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082be:	4b44      	ldr	r3, [pc, #272]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 80082c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082c4:	4a42      	ldr	r2, [pc, #264]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082ce:	4b40      	ldr	r3, [pc, #256]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 80082d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082dc:	4b3c      	ldr	r3, [pc, #240]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 80082de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082e2:	4a3b      	ldr	r2, [pc, #236]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 80082e4:	f043 0302 	orr.w	r3, r3, #2
 80082e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80082ec:	4b38      	ldr	r3, [pc, #224]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 80082ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082fa:	4b35      	ldr	r3, [pc, #212]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 80082fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008300:	4a33      	ldr	r2, [pc, #204]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 8008302:	f043 0304 	orr.w	r3, r3, #4
 8008306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800830a:	4b31      	ldr	r3, [pc, #196]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 800830c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800831c:	2302      	movs	r3, #2
 800831e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008320:	2300      	movs	r3, #0
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008324:	2300      	movs	r3, #0
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008328:	2302      	movs	r3, #2
 800832a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800832c:	f107 031c 	add.w	r3, r7, #28
 8008330:	4619      	mov	r1, r3
 8008332:	4828      	ldr	r0, [pc, #160]	; (80083d4 <HAL_TIM_MspPostInit+0x138>)
 8008334:	f7f8 fcb2 	bl	8000c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008338:	2301      	movs	r3, #1
 800833a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800833c:	2302      	movs	r3, #2
 800833e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008340:	2300      	movs	r3, #0
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008344:	2300      	movs	r3, #0
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008348:	2302      	movs	r3, #2
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800834c:	f107 031c 	add.w	r3, r7, #28
 8008350:	4619      	mov	r1, r3
 8008352:	4821      	ldr	r0, [pc, #132]	; (80083d8 <HAL_TIM_MspPostInit+0x13c>)
 8008354:	f7f8 fca2 	bl	8000c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008358:	2380      	movs	r3, #128	; 0x80
 800835a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800835c:	2302      	movs	r3, #2
 800835e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008360:	2300      	movs	r3, #0
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008364:	2300      	movs	r3, #0
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008368:	2302      	movs	r3, #2
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800836c:	f107 031c 	add.w	r3, r7, #28
 8008370:	4619      	mov	r1, r3
 8008372:	481a      	ldr	r0, [pc, #104]	; (80083dc <HAL_TIM_MspPostInit+0x140>)
 8008374:	f7f8 fc92 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008378:	e024      	b.n	80083c4 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a18      	ldr	r2, [pc, #96]	; (80083e0 <HAL_TIM_MspPostInit+0x144>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d11f      	bne.n	80083c4 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008384:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 8008386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800838a:	4a11      	ldr	r2, [pc, #68]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 800838c:	f043 0308 	orr.w	r3, r3, #8
 8008390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008394:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <HAL_TIM_MspPostInit+0x134>)
 8008396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800839a:	f003 0308 	and.w	r3, r3, #8
 800839e:	60fb      	str	r3, [r7, #12]
 80083a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80083a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a8:	2302      	movs	r3, #2
 80083aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ac:	2300      	movs	r3, #0
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083b0:	2300      	movs	r3, #0
 80083b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80083b4:	2302      	movs	r3, #2
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80083b8:	f107 031c 	add.w	r3, r7, #28
 80083bc:	4619      	mov	r1, r3
 80083be:	4809      	ldr	r0, [pc, #36]	; (80083e4 <HAL_TIM_MspPostInit+0x148>)
 80083c0:	f7f8 fc6c 	bl	8000c9c <HAL_GPIO_Init>
}
 80083c4:	bf00      	nop
 80083c6:	3730      	adds	r7, #48	; 0x30
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40000400 	.word	0x40000400
 80083d0:	58024400 	.word	0x58024400
 80083d4:	58020000 	.word	0x58020000
 80083d8:	58020400 	.word	0x58020400
 80083dc:	58020800 	.word	0x58020800
 80083e0:	40000800 	.word	0x40000800
 80083e4:	58020c00 	.word	0x58020c00

080083e8 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // 1주기마다 콜백
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	4b04      	ldr	r3, [pc, #16]	; (8008408 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d101      	bne.n	8008400 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		servo_update(); //몇 주기를 실행하였는지 이 함수를 넣어주므로써 체크할 수 있게된다.
 80083fc:	f7ff fa06 	bl	800780c <servo_update>
	}
}
 8008400:	bf00      	nop
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	24000110 	.word	0x24000110

0800840c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8008410:	4b22      	ldr	r3, [pc, #136]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008412:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <MX_USART3_UART_Init+0x94>)
 8008414:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008416:	4b21      	ldr	r3, [pc, #132]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800841c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800841e:	4b1f      	ldr	r3, [pc, #124]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008420:	2200      	movs	r2, #0
 8008422:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008424:	4b1d      	ldr	r3, [pc, #116]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008426:	2200      	movs	r2, #0
 8008428:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800842a:	4b1c      	ldr	r3, [pc, #112]	; (800849c <MX_USART3_UART_Init+0x90>)
 800842c:	2200      	movs	r2, #0
 800842e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008430:	4b1a      	ldr	r3, [pc, #104]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008432:	220c      	movs	r2, #12
 8008434:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008436:	4b19      	ldr	r3, [pc, #100]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008438:	2200      	movs	r2, #0
 800843a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800843c:	4b17      	ldr	r3, [pc, #92]	; (800849c <MX_USART3_UART_Init+0x90>)
 800843e:	2200      	movs	r2, #0
 8008440:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008442:	4b16      	ldr	r3, [pc, #88]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008444:	2200      	movs	r2, #0
 8008446:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008448:	4b14      	ldr	r3, [pc, #80]	; (800849c <MX_USART3_UART_Init+0x90>)
 800844a:	2200      	movs	r2, #0
 800844c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008450:	2200      	movs	r2, #0
 8008452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008454:	4811      	ldr	r0, [pc, #68]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008456:	f7fc f967 	bl	8004728 <HAL_UART_Init>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8008460:	f7ff f962 	bl	8007728 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008464:	2100      	movs	r1, #0
 8008466:	480d      	ldr	r0, [pc, #52]	; (800849c <MX_USART3_UART_Init+0x90>)
 8008468:	f7fe fed5 	bl	8007216 <HAL_UARTEx_SetTxFifoThreshold>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8008472:	f7ff f959 	bl	8007728 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008476:	2100      	movs	r1, #0
 8008478:	4808      	ldr	r0, [pc, #32]	; (800849c <MX_USART3_UART_Init+0x90>)
 800847a:	f7fe ff0a 	bl	8007292 <HAL_UARTEx_SetRxFifoThreshold>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8008484:	f7ff f950 	bl	8007728 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8008488:	4804      	ldr	r0, [pc, #16]	; (800849c <MX_USART3_UART_Init+0x90>)
 800848a:	f7fe fe8b 	bl	80071a4 <HAL_UARTEx_DisableFifoMode>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8008494:	f7ff f948 	bl	8007728 <Error_Handler>
  }

}
 8008498:	bf00      	nop
 800849a:	bd80      	pop	{r7, pc}
 800849c:	24000150 	.word	0x24000150
 80084a0:	40004800 	.word	0x40004800

080084a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b08a      	sub	sp, #40	; 0x28
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ac:	f107 0314 	add.w	r3, r7, #20
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	605a      	str	r2, [r3, #4]
 80084b6:	609a      	str	r2, [r3, #8]
 80084b8:	60da      	str	r2, [r3, #12]
 80084ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a1e      	ldr	r2, [pc, #120]	; (800853c <HAL_UART_MspInit+0x98>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d136      	bne.n	8008534 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80084c6:	4b1e      	ldr	r3, [pc, #120]	; (8008540 <HAL_UART_MspInit+0x9c>)
 80084c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084cc:	4a1c      	ldr	r2, [pc, #112]	; (8008540 <HAL_UART_MspInit+0x9c>)
 80084ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80084d6:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <HAL_UART_MspInit+0x9c>)
 80084d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80084dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084e0:	613b      	str	r3, [r7, #16]
 80084e2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80084e4:	4b16      	ldr	r3, [pc, #88]	; (8008540 <HAL_UART_MspInit+0x9c>)
 80084e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084ea:	4a15      	ldr	r2, [pc, #84]	; (8008540 <HAL_UART_MspInit+0x9c>)
 80084ec:	f043 0308 	orr.w	r3, r3, #8
 80084f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80084f4:	4b12      	ldr	r3, [pc, #72]	; (8008540 <HAL_UART_MspInit+0x9c>)
 80084f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008508:	2302      	movs	r3, #2
 800850a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800850c:	2300      	movs	r3, #0
 800850e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008510:	2300      	movs	r3, #0
 8008512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008514:	2307      	movs	r3, #7
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008518:	f107 0314 	add.w	r3, r7, #20
 800851c:	4619      	mov	r1, r3
 800851e:	4809      	ldr	r0, [pc, #36]	; (8008544 <HAL_UART_MspInit+0xa0>)
 8008520:	f7f8 fbbc 	bl	8000c9c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008524:	2200      	movs	r2, #0
 8008526:	2100      	movs	r1, #0
 8008528:	2027      	movs	r0, #39	; 0x27
 800852a:	f7f8 f9ec 	bl	8000906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800852e:	2027      	movs	r0, #39	; 0x27
 8008530:	f7f8 fa03 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008534:	bf00      	nop
 8008536:	3728      	adds	r7, #40	; 0x28
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	40004800 	.word	0x40004800
 8008540:	58024400 	.word	0x58024400
 8008544:	58020c00 	.word	0x58020c00

08008548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008580 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800854c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800854e:	e003      	b.n	8008558 <LoopCopyDataInit>

08008550 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008550:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008552:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008554:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008556:	3104      	adds	r1, #4

08008558 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008558:	480b      	ldr	r0, [pc, #44]	; (8008588 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800855a:	4b0c      	ldr	r3, [pc, #48]	; (800858c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800855c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800855e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008560:	d3f6      	bcc.n	8008550 <CopyDataInit>
  ldr  r2, =_sbss
 8008562:	4a0b      	ldr	r2, [pc, #44]	; (8008590 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008564:	e002      	b.n	800856c <LoopFillZerobss>

08008566 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008566:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008568:	f842 3b04 	str.w	r3, [r2], #4

0800856c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800856c:	4b09      	ldr	r3, [pc, #36]	; (8008594 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800856e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008570:	d3f9      	bcc.n	8008566 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008572:	f7ff fce5 	bl	8007f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008576:	f000 f811 	bl	800859c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800857a:	f7fe ffe5 	bl	8007548 <main>
  bx  lr    
 800857e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008580:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8008584:	0800863c 	.word	0x0800863c
  ldr  r0, =_sdata
 8008588:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800858c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8008590:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 8008594:	240001dc 	.word	0x240001dc

08008598 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008598:	e7fe      	b.n	8008598 <ADC3_IRQHandler>
	...

0800859c <__libc_init_array>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4e0d      	ldr	r6, [pc, #52]	; (80085d4 <__libc_init_array+0x38>)
 80085a0:	4c0d      	ldr	r4, [pc, #52]	; (80085d8 <__libc_init_array+0x3c>)
 80085a2:	1ba4      	subs	r4, r4, r6
 80085a4:	10a4      	asrs	r4, r4, #2
 80085a6:	2500      	movs	r5, #0
 80085a8:	42a5      	cmp	r5, r4
 80085aa:	d109      	bne.n	80085c0 <__libc_init_array+0x24>
 80085ac:	4e0b      	ldr	r6, [pc, #44]	; (80085dc <__libc_init_array+0x40>)
 80085ae:	4c0c      	ldr	r4, [pc, #48]	; (80085e0 <__libc_init_array+0x44>)
 80085b0:	f000 f820 	bl	80085f4 <_init>
 80085b4:	1ba4      	subs	r4, r4, r6
 80085b6:	10a4      	asrs	r4, r4, #2
 80085b8:	2500      	movs	r5, #0
 80085ba:	42a5      	cmp	r5, r4
 80085bc:	d105      	bne.n	80085ca <__libc_init_array+0x2e>
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085c4:	4798      	blx	r3
 80085c6:	3501      	adds	r5, #1
 80085c8:	e7ee      	b.n	80085a8 <__libc_init_array+0xc>
 80085ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085ce:	4798      	blx	r3
 80085d0:	3501      	adds	r5, #1
 80085d2:	e7f2      	b.n	80085ba <__libc_init_array+0x1e>
 80085d4:	08008634 	.word	0x08008634
 80085d8:	08008634 	.word	0x08008634
 80085dc:	08008634 	.word	0x08008634
 80085e0:	08008638 	.word	0x08008638

080085e4 <memset>:
 80085e4:	4402      	add	r2, r0
 80085e6:	4603      	mov	r3, r0
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d100      	bne.n	80085ee <memset+0xa>
 80085ec:	4770      	bx	lr
 80085ee:	f803 1b01 	strb.w	r1, [r3], #1
 80085f2:	e7f9      	b.n	80085e8 <memset+0x4>

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr

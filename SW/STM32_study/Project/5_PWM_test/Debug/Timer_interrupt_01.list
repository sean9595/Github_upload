
Timer_interrupt_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000330c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080035a4  080035a4  000135a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003604  08003604  00013604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08003614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e0  20000010  08003624  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004f0  08003624  000204f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022f00  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003ee5  00000000  00000000  00042f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000bdca  00000000  00000000  00046e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e10  00000000  00000000  00052bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001290  00000000  00000000  00053a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000888c  00000000  00000000  00054c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000665a  00000000  00000000  0005d51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00063b76  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002888  00000000  00000000  00063bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800358c 	.word	0x0800358c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800358c 	.word	0x0800358c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_InitTick+0x3c>)
{
 80005ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_InitTick+0x40>)
 80005f0:	7818      	ldrb	r0, [r3, #0]
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f8a2 	bl	8000748 <HAL_SYSTICK_Config>
 8000604:	4604      	mov	r4, r0
 8000606:	b958      	cbnz	r0, 8000620 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	2d0f      	cmp	r5, #15
 800060a:	d809      	bhi.n	8000620 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	4602      	mov	r2, r0
 800060e:	4629      	mov	r1, r5
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f852 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_InitTick+0x44>)
 800061a:	4620      	mov	r0, r4
 800061c:	601d      	str	r5, [r3, #0]
 800061e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000622:	bd38      	pop	{r3, r4, r5, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_Init>:
{
 8000630:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 f830 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffd5 	bl	80005e8 <HAL_InitTick>
 800063e:	4604      	mov	r4, r0
 8000640:	b918      	cbnz	r0, 800064a <HAL_Init+0x1a>
  HAL_MspInit();
 8000642:	f002 fdfb 	bl	800323c <HAL_MspInit>
}
 8000646:	4620      	mov	r0, r4
 8000648:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800064a:	2401      	movs	r4, #1
 800064c:	e7fb      	b.n	8000646 <HAL_Init+0x16>
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000002c 	.word	0x2000002c
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3c03      	subhi	r4, #3
 80006dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006e8:	ea01 0103 	and.w	r1, r1, r3
 80006ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80006f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	ea42 0201 	orr.w	r2, r2, r1
 8000700:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000704:	db07      	blt.n	8000716 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000710:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000714:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800072c:	2800      	cmp	r0, #0
 800072e:	db08      	blt.n	8000742 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000730:	0942      	lsrs	r2, r0, #5
 8000732:	2301      	movs	r3, #1
 8000734:	f000 001f 	and.w	r0, r0, #31
 8000738:	fa03 f000 	lsl.w	r0, r3, r0
 800073c:	4b01      	ldr	r3, [pc, #4]	; (8000744 <HAL_NVIC_EnableIRQ+0x18>)
 800073e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000742:	4770      	bx	lr
 8000744:	e000e100 	.word	0xe000e100

08000748 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000748:	3801      	subs	r0, #1
 800074a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800074e:	d20a      	bcs.n	8000766 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	21f0      	movs	r1, #240	; 0xf0
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000756:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000758:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800075e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010
 8000770:	e000ed00 	.word	0xe000ed00

08000774 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000774:	b510      	push	{r4, lr}
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000776:	b128      	cbz	r0, 8000784 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000778:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800077c:	2b02      	cmp	r3, #2
 800077e:	d003      	beq.n	8000788 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000784:	2001      	movs	r0, #1
 8000786:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000788:	6803      	ldr	r3, [r0, #0]
 800078a:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <HAL_DMA_Abort_IT+0x84>)
 800078c:	441a      	add	r2, r3
 800078e:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 8000792:	d808      	bhi.n	80007a6 <HAL_DMA_Abort_IT+0x32>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000794:	2204      	movs	r2, #4
 8000796:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	f022 0201 	bic.w	r2, r2, #1
 80007a0:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 80007a2:	2000      	movs	r0, #0
 80007a4:	bd10      	pop	{r4, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	f022 020e 	bic.w	r2, r2, #14
 80007ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	f022 0201 	bic.w	r2, r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80007b6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80007b8:	6813      	ldr	r3, [r2, #0]
 80007ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007be:	6013      	str	r3, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 80007c0:	2301      	movs	r3, #1
 80007c2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80007c4:	4093      	lsls	r3, r2
 80007c6:	4a0d      	ldr	r2, [pc, #52]	; (80007fc <HAL_DMA_Abort_IT+0x88>)
 80007c8:	6053      	str	r3, [r2, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007ca:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80007cc:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80007ce:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80007d0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80007d2:	b133      	cbz	r3, 80007e2 <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007da:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80007de:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80007e0:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80007e2:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80007e4:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80007e6:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80007ea:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80007ec:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d0d6      	beq.n	80007a2 <HAL_DMA_Abort_IT+0x2e>
        hdma->XferAbortCallback(hdma);
 80007f4:	4798      	blx	r3
 80007f6:	e7d4      	b.n	80007a2 <HAL_DMA_Abort_IT+0x2e>
 80007f8:	bffdfff0 	.word	0xbffdfff0
 80007fc:	58025400 	.word	0x58025400

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000804:	680b      	ldr	r3, [r1, #0]
{
 8000806:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000808:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80009cc <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800080c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000810:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000812:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 8000814:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80009d0 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000818:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081a:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 800081c:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800081e:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 8000822:	42af      	cmp	r7, r5
 8000824:	f040 80b7 	bne.w	8000996 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000828:	684a      	ldr	r2, [r1, #4]
 800082a:	f022 0610 	bic.w	r6, r2, #16
 800082e:	2e02      	cmp	r6, #2
 8000830:	d116      	bne.n	8000860 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000832:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000836:	f003 0b07 	and.w	fp, r3, #7
 800083a:	f04f 0e0f 	mov.w	lr, #15
 800083e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000842:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000846:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800084a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800084e:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000852:	690c      	ldr	r4, [r1, #16]
 8000854:	fa04 f40b 	lsl.w	r4, r4, fp
 8000858:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 800085c:	f8ca 4020 	str.w	r4, [sl, #32]
 8000860:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000864:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000866:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800086a:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800086e:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000872:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000874:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000878:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087a:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800087c:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000880:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000884:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000888:	d810      	bhi.n	80008ac <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 800088a:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800088c:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000890:	68ce      	ldr	r6, [r1, #12]
 8000892:	fa06 fe0a 	lsl.w	lr, r6, sl
 8000896:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800089a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800089c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089e:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008a2:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80008a6:	409e      	lsls	r6, r3
 80008a8:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 80008aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80008ac:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008ae:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008b0:	688e      	ldr	r6, [r1, #8]
 80008b2:	fa06 f60a 	lsl.w	r6, r6, sl
 80008b6:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 80008b8:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ba:	00d4      	lsls	r4, r2, #3
 80008bc:	d56b      	bpl.n	8000996 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80008c2:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008c6:	f003 0703 	and.w	r7, r3, #3
 80008ca:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	f044 0402 	orr.w	r4, r4, #2
 80008d2:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008d6:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d8:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80008dc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008e0:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80008e4:	f004 0402 	and.w	r4, r4, #2
 80008e8:	9403      	str	r4, [sp, #12]
 80008ea:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008ec:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80008f0:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008f4:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008f8:	4c33      	ldr	r4, [pc, #204]	; (80009c8 <HAL_GPIO_Init+0x1c8>)
 80008fa:	42a0      	cmp	r0, r4
 80008fc:	d052      	beq.n	80009a4 <HAL_GPIO_Init+0x1a4>
 80008fe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000902:	42a0      	cmp	r0, r4
 8000904:	d050      	beq.n	80009a8 <HAL_GPIO_Init+0x1a8>
 8000906:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800090a:	42a0      	cmp	r0, r4
 800090c:	d04e      	beq.n	80009ac <HAL_GPIO_Init+0x1ac>
 800090e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000912:	42a0      	cmp	r0, r4
 8000914:	d04c      	beq.n	80009b0 <HAL_GPIO_Init+0x1b0>
 8000916:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800091a:	42a0      	cmp	r0, r4
 800091c:	d04a      	beq.n	80009b4 <HAL_GPIO_Init+0x1b4>
 800091e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000922:	42a0      	cmp	r0, r4
 8000924:	d048      	beq.n	80009b8 <HAL_GPIO_Init+0x1b8>
 8000926:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800092a:	42a0      	cmp	r0, r4
 800092c:	d046      	beq.n	80009bc <HAL_GPIO_Init+0x1bc>
 800092e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000932:	42a0      	cmp	r0, r4
 8000934:	d044      	beq.n	80009c0 <HAL_GPIO_Init+0x1c0>
 8000936:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800093a:	42a0      	cmp	r0, r4
 800093c:	d042      	beq.n	80009c4 <HAL_GPIO_Init+0x1c4>
 800093e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000942:	42a0      	cmp	r0, r4
 8000944:	bf14      	ite	ne
 8000946:	240a      	movne	r4, #10
 8000948:	2409      	moveq	r4, #9
 800094a:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800094c:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800094e:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000952:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000954:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8000958:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 800095c:	bf54      	ite	pl
 800095e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000960:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000962:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 8000964:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8000968:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 800096c:	bf54      	ite	pl
 800096e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000970:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000972:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000974:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8000978:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 800097c:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000980:	bf54      	ite	pl
 8000982:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000984:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000986:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000988:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 800098a:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 800098c:	bf54      	ite	pl
 800098e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000990:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 8000992:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000996:	3301      	adds	r3, #1
 8000998:	2b10      	cmp	r3, #16
 800099a:	f47f af3d 	bne.w	8000818 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 800099e:	b005      	add	sp, #20
 80009a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009a4:	2400      	movs	r4, #0
 80009a6:	e7d0      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009a8:	2401      	movs	r4, #1
 80009aa:	e7ce      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009ac:	2402      	movs	r4, #2
 80009ae:	e7cc      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009b0:	2403      	movs	r4, #3
 80009b2:	e7ca      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009b4:	2404      	movs	r4, #4
 80009b6:	e7c8      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009b8:	2405      	movs	r4, #5
 80009ba:	e7c6      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009bc:	2406      	movs	r4, #6
 80009be:	e7c4      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009c0:	2407      	movs	r4, #7
 80009c2:	e7c2      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009c4:	2408      	movs	r4, #8
 80009c6:	e7c0      	b.n	800094a <HAL_GPIO_Init+0x14a>
 80009c8:	58020000 	.word	0x58020000
 80009cc:	58024400 	.word	0x58024400
 80009d0:	58000080 	.word	0x58000080

080009d4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009d4:	b10a      	cbz	r2, 80009da <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80009d6:	8301      	strh	r1, [r0, #24]
 80009d8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80009da:	8341      	strh	r1, [r0, #26]
 80009dc:	4770      	bx	lr

080009de <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009de:	6943      	ldr	r3, [r0, #20]
 80009e0:	4059      	eors	r1, r3
 80009e2:	6141      	str	r1, [r0, #20]
 80009e4:	4770      	bx	lr

080009e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80009e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80009e8:	4605      	mov	r5, r0
{ 
 80009ea:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 80009ec:	2800      	cmp	r0, #0
 80009ee:	d06d      	beq.n	8000acc <HAL_PCD_Init+0xe6>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 80009f0:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 80009f2:	462c      	mov	r4, r5
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 80009f4:	466e      	mov	r6, sp
 80009f6:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009f8:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 80009fc:	f002 fd2e 	bl	800345c <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000a00:	f854 0b10 	ldr.w	r0, [r4], #16
 8000a04:	f002 f99e 	bl	8002d44 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a14:	f105 0410 	add.w	r4, r5, #16
 8000a18:	e886 0003 	stmia.w	r6, {r0, r1}
 8000a1c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000a20:	6828      	ldr	r0, [r5, #0]
 
 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8000a22:	2601      	movs	r6, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000a24:	f002 f953 	bl	8002cce <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	6828      	ldr	r0, [r5, #0]
 8000a2c:	f002 f990 	bl	8002d50 <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 8000a30:	2100      	movs	r1, #0
 8000a32:	462b      	mov	r3, r5
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000a34:	462a      	mov	r2, r5
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a36:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000a38:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8000a3c:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000a3e:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 8000a40:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 8000a42:	7756      	strb	r6, [r2, #29]
 for (i = 0; i < 15 ; i++)
 8000a44:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000a46:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 8000a48:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 8000a4a:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 8000a4c:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 8000a4e:	d1f3      	bne.n	8000a38 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;
   
   hpcd->Instance->DIEPTXF[i] = 0;
 8000a50:	2200      	movs	r2, #0
 8000a52:	f8d5 e000 	ldr.w	lr, [r5]
   hpcd->OUT_ep[i].is_in = 0;
 8000a56:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 8000a58:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 8000a5c:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000a60:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 8000a62:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 8000a64:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 8000a68:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 8000a6c:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000a6e:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8000a72:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 8000a76:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 8000a7a:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 8000a7e:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 8000a82:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 8000a84:	d1e8      	bne.n	8000a58 <HAL_PCD_Init+0x72>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a88:	466e      	mov	r6, sp
 8000a8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a94:	e886 0003 	stmia.w	r6, {r0, r1}
 8000a98:	4670      	mov	r0, lr
 8000a9a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000a9e:	f002 f96f 	bl	8002d80 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f885 33b9 	strb.w	r3, [r5, #953]	; 0x3b9
 
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1)
 8000aa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d102      	bne.n	8000ab4 <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8000aae:	4628      	mov	r0, r5
 8000ab0:	f000 f80e 	bl	8000ad0 <HAL_PCDEx_ActivateLPM>
 }
 
#if defined (USB_OTG_GCCFG_BCDEN)	
 /* Activate Battery charging */
 if (hpcd->Init.battery_charging_enable ==1)
 8000ab4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d102      	bne.n	8000ac0 <HAL_PCD_Init+0xda>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 8000aba:	4628      	mov	r0, r5
 8000abc:	f000 f81b 	bl	8000af6 <HAL_PCDEx_ActivateBCD>
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000ac0:	6828      	ldr	r0, [r5, #0]
 8000ac2:	f002 fa2c 	bl	8002f1e <USB_DevDisconnect>
 return HAL_OK;
 8000ac6:	2000      	movs	r0, #0
}
 8000ac8:	b00b      	add	sp, #44	; 0x2c
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000acc:	2001      	movs	r0, #1
 8000ace:	e7fb      	b.n	8000ac8 <HAL_PCD_Init+0xe2>

08000ad0 <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 8000ad0:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000ad2:	6802      	ldr	r2, [r0, #0]
{
 8000ad4:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8000ad6:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8000ada:	2000      	movs	r0, #0
 8000adc:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000ae0:	6993      	ldr	r3, [r2, #24]
 8000ae2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ae6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000ae8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aee:	f043 0303 	orr.w	r3, r3, #3
 8000af2:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8000af4:	4770      	bx	lr

08000af6 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000af6:	6803      	ldr	r3, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8000af8:	2201      	movs	r2, #1
 8000afa:	f8c0 23f8 	str.w	r2, [r0, #1016]	; 0x3f8
  
  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
  
  return HAL_OK;  
}
 8000afe:	2000      	movs	r0, #0
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8000b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b06:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 8000b08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b0a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b0e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b10:	4770      	bx	lr
	...

08000b14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b16:	6803      	ldr	r3, [r0, #0]
{
 8000b18:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1a:	07d8      	lsls	r0, r3, #31
 8000b1c:	d45c      	bmi.n	8000bd8 <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	0799      	lsls	r1, r3, #30
 8000b22:	f100 80af 	bmi.w	8000c84 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000b26:	682b      	ldr	r3, [r5, #0]
 8000b28:	06d9      	lsls	r1, r3, #27
 8000b2a:	d525      	bpl.n	8000b78 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000b2c:	4bac      	ldr	r3, [pc, #688]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b34:	2a08      	cmp	r2, #8
 8000b36:	d00b      	beq.n	8000b50 <HAL_RCC_OscConfig+0x3c>
 8000b38:	691a      	ldr	r2, [r3, #16]
 8000b3a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b3e:	2a18      	cmp	r2, #24
 8000b40:	f040 80f7 	bne.w	8000d32 <HAL_RCC_OscConfig+0x21e>
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	f040 80f1 	bne.w	8000d32 <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000b50:	4ba3      	ldr	r3, [pc, #652]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	05d2      	lsls	r2, r2, #23
 8000b56:	d502      	bpl.n	8000b5e <HAL_RCC_OscConfig+0x4a>
 8000b58:	69ea      	ldr	r2, [r5, #28]
 8000b5a:	2a80      	cmp	r2, #128	; 0x80
 8000b5c:	d153      	bne.n	8000c06 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000b5e:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b60:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000b64:	fa92 f2a2 	rbit	r2, r2
 8000b68:	fab2 f182 	clz	r1, r2
 8000b6c:	6a2a      	ldr	r2, [r5, #32]
 8000b6e:	408a      	lsls	r2, r1
 8000b70:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8000b74:	430a      	orrs	r2, r1
 8000b76:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b78:	682b      	ldr	r3, [r5, #0]
 8000b7a:	0719      	lsls	r1, r3, #28
 8000b7c:	f100 810b 	bmi.w	8000d96 <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	069a      	lsls	r2, r3, #26
 8000b84:	f100 8130 	bmi.w	8000de8 <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	075c      	lsls	r4, r3, #29
 8000b8c:	d51e      	bpl.n	8000bcc <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000b8e:	4c95      	ldr	r4, [pc, #596]	; (8000de4 <HAL_RCC_OscConfig+0x2d0>)
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b96:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000b98:	f7ff fd66 	bl	8000668 <HAL_GetTick>
 8000b9c:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	05da      	lsls	r2, r3, #23
 8000ba2:	f140 8146 	bpl.w	8000e32 <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba6:	68ab      	ldr	r3, [r5, #8]
 8000ba8:	4c8d      	ldr	r4, [pc, #564]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	f040 8148 	bne.w	8000e40 <HAL_RCC_OscConfig+0x32c>
 8000bb0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb8:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fd54 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc0:	4e87      	ldr	r6, [pc, #540]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000bc2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bc4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000bc6:	079b      	lsls	r3, r3, #30
 8000bc8:	f140 8160 	bpl.w	8000e8c <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bcc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	f040 8163 	bne.w	8000e9a <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000bd8:	4b81      	ldr	r3, [pc, #516]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000be0:	2a10      	cmp	r2, #16
 8000be2:	d009      	beq.n	8000bf8 <HAL_RCC_OscConfig+0xe4>
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000bea:	2a18      	cmp	r2, #24
 8000bec:	d10d      	bne.n	8000c0a <HAL_RCC_OscConfig+0xf6>
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d108      	bne.n	8000c0a <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	4b79      	ldr	r3, [pc, #484]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	039a      	lsls	r2, r3, #14
 8000bfe:	d58e      	bpl.n	8000b1e <HAL_RCC_OscConfig+0xa>
 8000c00:	686b      	ldr	r3, [r5, #4]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d18b      	bne.n	8000b1e <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 8000c06:	2001      	movs	r0, #1
 8000c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c0a:	686b      	ldr	r3, [r5, #4]
 8000c0c:	4c74      	ldr	r4, [pc, #464]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c12:	d112      	bne.n	8000c3a <HAL_RCC_OscConfig+0x126>
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fd24 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c20:	4c6f      	ldr	r4, [pc, #444]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000c22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	039b      	lsls	r3, r3, #14
 8000c28:	f53f af79 	bmi.w	8000b1e <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c2c:	f7ff fd1c 	bl	8000668 <HAL_GetTick>
 8000c30:	1b80      	subs	r0, r0, r6
 8000c32:	2864      	cmp	r0, #100	; 0x64
 8000c34:	d9f6      	bls.n	8000c24 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8000c36:	2003      	movs	r0, #3
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	b9a3      	cbnz	r3, 8000c66 <HAL_RCC_OscConfig+0x152>
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c42:	6023      	str	r3, [r4, #0]
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c4c:	f7ff fd0c 	bl	8000668 <HAL_GetTick>
 8000c50:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	039f      	lsls	r7, r3, #14
 8000c56:	f57f af62 	bpl.w	8000b1e <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5a:	f7ff fd05 	bl	8000668 <HAL_GetTick>
 8000c5e:	1b80      	subs	r0, r0, r6
 8000c60:	2864      	cmp	r0, #100	; 0x64
 8000c62:	d9f6      	bls.n	8000c52 <HAL_RCC_OscConfig+0x13e>
 8000c64:	e7e7      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c6a:	6823      	ldr	r3, [r4, #0]
 8000c6c:	d103      	bne.n	8000c76 <HAL_RCC_OscConfig+0x162>
 8000c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c72:	6023      	str	r3, [r4, #0]
 8000c74:	e7ce      	b.n	8000c14 <HAL_RCC_OscConfig+0x100>
 8000c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7a:	6023      	str	r3, [r4, #0]
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c82:	e7ca      	b.n	8000c1a <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000c84:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000c86:	68e9      	ldr	r1, [r5, #12]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	f012 0f38 	tst.w	r2, #56	; 0x38
 8000c8e:	d007      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x18c>
 8000c90:	691a      	ldr	r2, [r3, #16]
 8000c92:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000c96:	2a18      	cmp	r2, #24
 8000c98:	d128      	bne.n	8000cec <HAL_RCC_OscConfig+0x1d8>
 8000c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9c:	079c      	lsls	r4, r3, #30
 8000c9e:	d125      	bne.n	8000cec <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ca0:	4a4f      	ldr	r2, [pc, #316]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	0758      	lsls	r0, r3, #29
 8000ca6:	d501      	bpl.n	8000cac <HAL_RCC_OscConfig+0x198>
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d0ac      	beq.n	8000c06 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cac:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cae:	4c4c      	ldr	r4, [pc, #304]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cb0:	f023 0319 	bic.w	r3, r3, #25
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fcd6 	bl	8000668 <HAL_GetTick>
 8000cbc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	075b      	lsls	r3, r3, #29
 8000cc2:	d50d      	bpl.n	8000ce0 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc4:	6861      	ldr	r1, [r4, #4]
 8000cc6:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8000cca:	fa93 f3a3 	rbit	r3, r3
 8000cce:	fab3 f283 	clz	r2, r3
 8000cd2:	692b      	ldr	r3, [r5, #16]
 8000cd4:	4093      	lsls	r3, r2
 8000cd6:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	6063      	str	r3, [r4, #4]
 8000cde:	e722      	b.n	8000b26 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fcc2 	bl	8000668 <HAL_GetTick>
 8000ce4:	1b80      	subs	r0, r0, r6
 8000ce6:	2802      	cmp	r0, #2
 8000ce8:	d9e9      	bls.n	8000cbe <HAL_RCC_OscConfig+0x1aa>
 8000cea:	e7a4      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
 8000cec:	4c3c      	ldr	r4, [pc, #240]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cee:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf0:	b179      	cbz	r1, 8000d12 <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000cf2:	f023 0319 	bic.w	r3, r3, #25
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cfa:	f7ff fcb5 	bl	8000668 <HAL_GetTick>
 8000cfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	6823      	ldr	r3, [r4, #0]
 8000d02:	075f      	lsls	r7, r3, #29
 8000d04:	d4de      	bmi.n	8000cc4 <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d06:	f7ff fcaf 	bl	8000668 <HAL_GetTick>
 8000d0a:	1b80      	subs	r0, r0, r6
 8000d0c:	2802      	cmp	r0, #2
 8000d0e:	d9f7      	bls.n	8000d00 <HAL_RCC_OscConfig+0x1ec>
 8000d10:	e791      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000d12:	f023 0301 	bic.w	r3, r3, #1
 8000d16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d18:	f7ff fca6 	bl	8000668 <HAL_GetTick>
 8000d1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	0758      	lsls	r0, r3, #29
 8000d22:	f57f af00 	bpl.w	8000b26 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc9f 	bl	8000668 <HAL_GetTick>
 8000d2a:	1b80      	subs	r0, r0, r6
 8000d2c:	2802      	cmp	r0, #2
 8000d2e:	d9f6      	bls.n	8000d1e <HAL_RCC_OscConfig+0x20a>
 8000d30:	e781      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000d32:	69eb      	ldr	r3, [r5, #28]
 8000d34:	4c2a      	ldr	r4, [pc, #168]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000d36:	b1eb      	cbz	r3, 8000d74 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc92 	bl	8000668 <HAL_GetTick>
 8000d44:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	05df      	lsls	r7, r3, #23
 8000d4a:	d50d      	bpl.n	8000d68 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d4c:	6861      	ldr	r1, [r4, #4]
 8000d4e:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8000d52:	fa93 f3a3 	rbit	r3, r3
 8000d56:	fab3 f283 	clz	r2, r3
 8000d5a:	6a2b      	ldr	r3, [r5, #32]
 8000d5c:	4093      	lsls	r3, r2
 8000d5e:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 8000d62:	4313      	orrs	r3, r2
 8000d64:	6063      	str	r3, [r4, #4]
 8000d66:	e707      	b.n	8000b78 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d68:	f7ff fc7e 	bl	8000668 <HAL_GetTick>
 8000d6c:	1b80      	subs	r0, r0, r6
 8000d6e:	2802      	cmp	r0, #2
 8000d70:	d9e9      	bls.n	8000d46 <HAL_RCC_OscConfig+0x232>
 8000d72:	e760      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fc74 	bl	8000668 <HAL_GetTick>
 8000d80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	05d8      	lsls	r0, r3, #23
 8000d86:	f57f aef7 	bpl.w	8000b78 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fc6d 	bl	8000668 <HAL_GetTick>
 8000d8e:	1b80      	subs	r0, r0, r6
 8000d90:	2802      	cmp	r0, #2
 8000d92:	d9f6      	bls.n	8000d82 <HAL_RCC_OscConfig+0x26e>
 8000d94:	e74f      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d96:	696b      	ldr	r3, [r5, #20]
 8000d98:	4c11      	ldr	r4, [pc, #68]	; (8000de0 <HAL_RCC_OscConfig+0x2cc>)
 8000d9a:	b183      	cbz	r3, 8000dbe <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8000d9c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc60 	bl	8000668 <HAL_GetTick>
 8000da8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000daa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000dac:	079b      	lsls	r3, r3, #30
 8000dae:	f53f aee7 	bmi.w	8000b80 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db2:	f7ff fc59 	bl	8000668 <HAL_GetTick>
 8000db6:	1b80      	subs	r0, r0, r6
 8000db8:	2802      	cmp	r0, #2
 8000dba:	d9f6      	bls.n	8000daa <HAL_RCC_OscConfig+0x296>
 8000dbc:	e73b      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000dbe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fc4f 	bl	8000668 <HAL_GetTick>
 8000dca:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000dce:	079f      	lsls	r7, r3, #30
 8000dd0:	f57f aed6 	bpl.w	8000b80 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fc48 	bl	8000668 <HAL_GetTick>
 8000dd8:	1b80      	subs	r0, r0, r6
 8000dda:	2802      	cmp	r0, #2
 8000ddc:	d9f6      	bls.n	8000dcc <HAL_RCC_OscConfig+0x2b8>
 8000dde:	e72a      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
 8000de0:	58024400 	.word	0x58024400
 8000de4:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000de8:	69ab      	ldr	r3, [r5, #24]
 8000dea:	4c6e      	ldr	r4, [pc, #440]	; (8000fa4 <HAL_RCC_OscConfig+0x490>)
 8000dec:	b183      	cbz	r3, 8000e10 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000df6:	f7ff fc37 	bl	8000668 <HAL_GetTick>
 8000dfa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	0498      	lsls	r0, r3, #18
 8000e00:	f53f aec2 	bmi.w	8000b88 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000e04:	f7ff fc30 	bl	8000668 <HAL_GetTick>
 8000e08:	1b80      	subs	r0, r0, r6
 8000e0a:	2802      	cmp	r0, #2
 8000e0c:	d9f6      	bls.n	8000dfc <HAL_RCC_OscConfig+0x2e8>
 8000e0e:	e712      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000e10:	6823      	ldr	r3, [r4, #0]
 8000e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e16:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000e18:	f7ff fc26 	bl	8000668 <HAL_GetTick>
 8000e1c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	0499      	lsls	r1, r3, #18
 8000e22:	f57f aeb1 	bpl.w	8000b88 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000e26:	f7ff fc1f 	bl	8000668 <HAL_GetTick>
 8000e2a:	1b80      	subs	r0, r0, r6
 8000e2c:	2802      	cmp	r0, #2
 8000e2e:	d9f6      	bls.n	8000e1e <HAL_RCC_OscConfig+0x30a>
 8000e30:	e701      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e32:	f7ff fc19 	bl	8000668 <HAL_GetTick>
 8000e36:	1b80      	subs	r0, r0, r6
 8000e38:	2864      	cmp	r0, #100	; 0x64
 8000e3a:	f67f aeb0 	bls.w	8000b9e <HAL_RCC_OscConfig+0x8a>
 8000e3e:	e6fa      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e40:	b9b3      	cbnz	r3, 8000e70 <HAL_RCC_OscConfig+0x35c>
 8000e42:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e44:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6723      	str	r3, [r4, #112]	; 0x70
 8000e4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000e50:	f023 0304 	bic.w	r3, r3, #4
 8000e54:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e56:	f7ff fc07 	bl	8000668 <HAL_GetTick>
 8000e5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000e5e:	0798      	lsls	r0, r3, #30
 8000e60:	f57f aeb4 	bpl.w	8000bcc <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e64:	f7ff fc00 	bl	8000668 <HAL_GetTick>
 8000e68:	1b80      	subs	r0, r0, r6
 8000e6a:	42b8      	cmp	r0, r7
 8000e6c:	d9f6      	bls.n	8000e5c <HAL_RCC_OscConfig+0x348>
 8000e6e:	e6e2      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000e74:	d103      	bne.n	8000e7e <HAL_RCC_OscConfig+0x36a>
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6723      	str	r3, [r4, #112]	; 0x70
 8000e7c:	e698      	b.n	8000bb0 <HAL_RCC_OscConfig+0x9c>
 8000e7e:	f023 0301 	bic.w	r3, r3, #1
 8000e82:	6723      	str	r3, [r4, #112]	; 0x70
 8000e84:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000e86:	f023 0304 	bic.w	r3, r3, #4
 8000e8a:	e694      	b.n	8000bb6 <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8c:	f7ff fbec 	bl	8000668 <HAL_GetTick>
 8000e90:	1bc0      	subs	r0, r0, r7
 8000e92:	42a0      	cmp	r0, r4
 8000e94:	f67f ae96 	bls.w	8000bc4 <HAL_RCC_OscConfig+0xb0>
 8000e98:	e6cd      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000e9a:	4c42      	ldr	r4, [pc, #264]	; (8000fa4 <HAL_RCC_OscConfig+0x490>)
 8000e9c:	6923      	ldr	r3, [r4, #16]
 8000e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ea2:	2b18      	cmp	r3, #24
 8000ea4:	f43f aeaf 	beq.w	8000c06 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8000ea8:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eaa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000eac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000eb0:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb2:	d169      	bne.n	8000f88 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fbd8 	bl	8000668 <HAL_GetTick>
 8000eb8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	0199      	lsls	r1, r3, #6
 8000ebe:	d45d      	bmi.n	8000f7c <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ec0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ec2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000ec4:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000ec8:	f023 0303 	bic.w	r3, r3, #3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ed0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000ed4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ed6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000ed8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000eda:	3b01      	subs	r3, #1
 8000edc:	3a01      	subs	r2, #1
 8000ede:	025b      	lsls	r3, r3, #9
 8000ee0:	0412      	lsls	r2, r2, #16
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000eec:	3a01      	subs	r2, #1
 8000eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000ef6:	3a01      	subs	r2, #1
 8000ef8:	0612      	lsls	r2, r2, #24
 8000efa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000efe:	4313      	orrs	r3, r2
 8000f00:	6323      	str	r3, [r4, #48]	; 0x30
 8000f02:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000f06:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	fab3 f183 	clz	r1, r3
 8000f10:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f14:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000f16:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000f1a:	408b      	lsls	r3, r1
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f22:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000f24:	f023 030c 	bic.w	r3, r3, #12
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f2e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000f30:	f023 0302 	bic.w	r3, r3, #2
 8000f34:	4313      	orrs	r3, r2
 8000f36:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000f38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f3e:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f46:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f4e:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000f50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000f60:	f7ff fb82 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f64:	4c0f      	ldr	r4, [pc, #60]	; (8000fa4 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8000f66:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	019a      	lsls	r2, r3, #6
 8000f6c:	f53f ae32 	bmi.w	8000bd4 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f70:	f7ff fb7a 	bl	8000668 <HAL_GetTick>
 8000f74:	1b40      	subs	r0, r0, r5
 8000f76:	2802      	cmp	r0, #2
 8000f78:	d9f6      	bls.n	8000f68 <HAL_RCC_OscConfig+0x454>
 8000f7a:	e65c      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7c:	f7ff fb74 	bl	8000668 <HAL_GetTick>
 8000f80:	1b80      	subs	r0, r0, r6
 8000f82:	2802      	cmp	r0, #2
 8000f84:	d999      	bls.n	8000eba <HAL_RCC_OscConfig+0x3a6>
 8000f86:	e656      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8000f88:	f7ff fb6e 	bl	8000668 <HAL_GetTick>
 8000f8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	019b      	lsls	r3, r3, #6
 8000f92:	f57f ae1f 	bpl.w	8000bd4 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb67 	bl	8000668 <HAL_GetTick>
 8000f9a:	1b40      	subs	r0, r0, r5
 8000f9c:	2802      	cmp	r0, #2
 8000f9e:	d9f6      	bls.n	8000f8e <HAL_RCC_OscConfig+0x47a>
 8000fa0:	e649      	b.n	8000c36 <HAL_RCC_OscConfig+0x122>
 8000fa2:	bf00      	nop
 8000fa4:	58024400 	.word	0x58024400

08000fa8 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fa8:	4b48      	ldr	r3, [pc, #288]	; (80010cc <HAL_RCC_GetSysClockFreq+0x124>)
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000fb0:	2a10      	cmp	r2, #16
{
 8000fb2:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fb4:	d00e      	beq.n	8000fd4 <HAL_RCC_GetSysClockFreq+0x2c>
 8000fb6:	2a18      	cmp	r2, #24
 8000fb8:	d00e      	beq.n	8000fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	f040 8084 	bne.w	80010c8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4843      	ldr	r0, [pc, #268]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8000fc4:	f012 0f20 	tst.w	r2, #32
 8000fc8:	d07f      	beq.n	80010ca <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000fd0:	40d8      	lsrs	r0, r3
 8000fd2:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8000fd4:	483f      	ldr	r0, [pc, #252]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000fd6:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000fd8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000fda:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000fe0:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000fe4:	f001 0101 	and.w	r1, r1, #1
 8000fe8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80010d8 <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000fec:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8000ff0:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000ff2:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ff6:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 8000ffa:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ffc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001000:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8001004:	d002      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x64>
 8001006:	d30e      	bcc.n	8001026 <HAL_RCC_GetSysClockFreq+0x7e>
 8001008:	2a02      	cmp	r2, #2
 800100a:	d04c      	beq.n	80010a6 <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a33      	ldr	r2, [pc, #204]	; (80010dc <HAL_RCC_GetSysClockFreq+0x134>)
 8001010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001014:	ee07 3a10 	vmov	s14, r3
 8001018:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800101c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001024:	e04b      	b.n	80010be <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	f012 0f20 	tst.w	r2, #32
 800102c:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <HAL_RCC_GetSysClockFreq+0x128>)
 800102e:	d026      	beq.n	800107e <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001030:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001034:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001038:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800103c:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800103e:	fbb2 f2f0 	udiv	r2, r2, r0
 8001042:	ee07 2a10 	vmov	s14, r2
 8001046:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800104a:	ee07 3a10 	vmov	s14, r3
 800104e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001052:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001056:	ee37 7a27 	vadd.f32	s14, s14, s15
 800105a:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_RCC_GetSysClockFreq+0x124>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001066:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001068:	ee07 3a10 	vmov	s14, r3
 800106c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001070:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001074:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001078:	ee17 0a90 	vmov	r0, s15
 800107c:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001084:	ee07 3a10 	vmov	s14, r3
 8001088:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800108c:	fbb2 f3f0 	udiv	r3, r2, r0
 8001090:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001094:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001098:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800109c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a4:	e7db      	b.n	800105e <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80010aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010ae:	ee07 3a10 	vmov	s14, r3
 80010b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010b6:	eea6 7a25 	vfma.f32	s14, s12, s11
 80010ba:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 80010be:	fbb2 f2f0 	udiv	r2, r2, r0
 80010c2:	ee07 2a90 	vmov	s15, r2
 80010c6:	e7e9      	b.n	800109c <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80010ca:	bd10      	pop	{r4, pc}
 80010cc:	58024400 	.word	0x58024400
 80010d0:	03d09000 	.word	0x03d09000
 80010d4:	007a1200 	.word	0x007a1200
 80010d8:	39000000 	.word	0x39000000
 80010dc:	003d0900 	.word	0x003d0900

080010e0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010e0:	4a68      	ldr	r2, [pc, #416]	; (8001284 <HAL_RCC_ClockConfig+0x1a4>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	428b      	cmp	r3, r1
{
 80010ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010ee:	4604      	mov	r4, r0
 80010f0:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010f2:	d342      	bcc.n	800117a <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	0797      	lsls	r7, r2, #30
 80010f8:	d44c      	bmi.n	8001194 <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010fa:	07d6      	lsls	r6, r2, #31
 80010fc:	d452      	bmi.n	80011a4 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010fe:	4a61      	ldr	r2, [pc, #388]	; (8001284 <HAL_RCC_ClockConfig+0x1a4>)
 8001100:	6813      	ldr	r3, [r2, #0]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	429d      	cmp	r5, r3
 8001108:	f0c0 80a8 	bcc.w	800125c <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	0755      	lsls	r5, r2, #29
 8001110:	f100 80af 	bmi.w	8001272 <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001114:	0710      	lsls	r0, r2, #28
 8001116:	d506      	bpl.n	8001126 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001118:	495b      	ldr	r1, [pc, #364]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
 800111a:	6960      	ldr	r0, [r4, #20]
 800111c:	69cb      	ldr	r3, [r1, #28]
 800111e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001122:	4303      	orrs	r3, r0
 8001124:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001126:	06d1      	lsls	r1, r2, #27
 8001128:	d506      	bpl.n	8001138 <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800112a:	4957      	ldr	r1, [pc, #348]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
 800112c:	69a0      	ldr	r0, [r4, #24]
 800112e:	69cb      	ldr	r3, [r1, #28]
 8001130:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001134:	4303      	orrs	r3, r0
 8001136:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001138:	0693      	lsls	r3, r2, #26
 800113a:	d506      	bpl.n	800114a <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
 800113e:	69e1      	ldr	r1, [r4, #28]
 8001140:	6a13      	ldr	r3, [r2, #32]
 8001142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001146:	430b      	orrs	r3, r1
 8001148:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 800114a:	f7ff ff2d 	bl	8000fa8 <HAL_RCC_GetSysClockFreq>
 800114e:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
 8001150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	fa92 f2a2 	rbit	r2, r2
 800115a:	fab2 f282 	clz	r2, r2
 800115e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001162:	40d3      	lsrs	r3, r2
 8001164:	4a49      	ldr	r2, [pc, #292]	; (800128c <HAL_RCC_ClockConfig+0x1ac>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	40d8      	lsrs	r0, r3
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <HAL_RCC_ClockConfig+0x1b0>)
 800116c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fa3a 	bl	80005e8 <HAL_InitTick>
  return HAL_OK;
 8001174:	2000      	movs	r0, #0
}
 8001176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f023 0307 	bic.w	r3, r3, #7
 8001180:	430b      	orrs	r3, r1
 8001182:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001184:	6813      	ldr	r3, [r2, #0]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	4299      	cmp	r1, r3
 800118c:	d0b2      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001194:	493c      	ldr	r1, [pc, #240]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
 8001196:	68e0      	ldr	r0, [r4, #12]
 8001198:	698b      	ldr	r3, [r1, #24]
 800119a:	f023 030f 	bic.w	r3, r3, #15
 800119e:	4303      	orrs	r3, r0
 80011a0:	618b      	str	r3, [r1, #24]
 80011a2:	e7aa      	b.n	80010fa <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
 80011a6:	68a1      	ldr	r1, [r4, #8]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80011ae:	430a      	orrs	r2, r1
 80011b0:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b4:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b6:	2902      	cmp	r1, #2
 80011b8:	d11d      	bne.n	80011f6 <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	d0e6      	beq.n	800118e <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011c0:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c2:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80011c6:	4f30      	ldr	r7, [pc, #192]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011c8:	f022 0207 	bic.w	r2, r2, #7
 80011cc:	430a      	orrs	r2, r1
 80011ce:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 80011d0:	f7ff fa4a 	bl	8000668 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d4:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 80011d6:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d119      	bne.n	8001210 <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d08b      	beq.n	80010fe <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e6:	f7ff fa3f 	bl	8000668 <HAL_GetTick>
 80011ea:	1b80      	subs	r0, r0, r6
 80011ec:	4540      	cmp	r0, r8
 80011ee:	d9f5      	bls.n	80011dc <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 80011f0:	2003      	movs	r0, #3
 80011f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f6:	2903      	cmp	r1, #3
 80011f8:	d102      	bne.n	8001200 <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80011fe:	e7de      	b.n	80011be <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001200:	2901      	cmp	r1, #1
 8001202:	d102      	bne.n	800120a <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001204:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001208:	e7d9      	b.n	80011be <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800120a:	f012 0f04 	tst.w	r2, #4
 800120e:	e7d6      	b.n	80011be <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001210:	2b03      	cmp	r3, #3
 8001212:	d10b      	bne.n	800122c <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800121a:	2b18      	cmp	r3, #24
 800121c:	f43f af6f 	beq.w	80010fe <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001220:	f7ff fa22 	bl	8000668 <HAL_GetTick>
 8001224:	1b80      	subs	r0, r0, r6
 8001226:	4540      	cmp	r0, r8
 8001228:	d9f4      	bls.n	8001214 <HAL_RCC_ClockConfig+0x134>
 800122a:	e7e1      	b.n	80011f0 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800122c:	2b01      	cmp	r3, #1
 800122e:	d110      	bne.n	8001252 <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001236:	2b08      	cmp	r3, #8
 8001238:	f43f af61 	beq.w	80010fe <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	f7ff fa14 	bl	8000668 <HAL_GetTick>
 8001240:	1b80      	subs	r0, r0, r6
 8001242:	4540      	cmp	r0, r8
 8001244:	d9f4      	bls.n	8001230 <HAL_RCC_ClockConfig+0x150>
 8001246:	e7d3      	b.n	80011f0 <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001248:	f7ff fa0e 	bl	8000668 <HAL_GetTick>
 800124c:	1b80      	subs	r0, r0, r6
 800124e:	4540      	cmp	r0, r8
 8001250:	d8ce      	bhi.n	80011f0 <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001258:	d1f6      	bne.n	8001248 <HAL_RCC_ClockConfig+0x168>
 800125a:	e750      	b.n	80010fe <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125c:	6813      	ldr	r3, [r2, #0]
 800125e:	f023 0307 	bic.w	r3, r3, #7
 8001262:	432b      	orrs	r3, r5
 8001264:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	429d      	cmp	r5, r3
 800126e:	d18e      	bne.n	800118e <HAL_RCC_ClockConfig+0xae>
 8001270:	e74c      	b.n	800110c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001272:	4905      	ldr	r1, [pc, #20]	; (8001288 <HAL_RCC_ClockConfig+0x1a8>)
 8001274:	6920      	ldr	r0, [r4, #16]
 8001276:	698b      	ldr	r3, [r1, #24]
 8001278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800127c:	4303      	orrs	r3, r0
 800127e:	618b      	str	r3, [r1, #24]
 8001280:	e748      	b.n	8001114 <HAL_RCC_ClockConfig+0x34>
 8001282:	bf00      	nop
 8001284:	52002000 	.word	0x52002000
 8001288:	58024400 	.word	0x58024400
 800128c:	080035f2 	.word	0x080035f2
 8001290:	20000008 	.word	0x20000008

08001294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001294:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8001296:	f000 fed5 	bl	8002044 <HAL_RCCEx_GetD1SysClockFreq>
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_RCC_GetHCLKFreq+0x28>)
 800129c:	2201      	movs	r2, #1
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	fa92 f2a2 	rbit	r2, r2
 80012a4:	fab2 f282 	clz	r2, r2
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	40d3      	lsrs	r3, r2
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_RCC_GetHCLKFreq+0x30>)
 80012b6:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 80012b8:	bd08      	pop	{r3, pc}
 80012ba:	bf00      	nop
 80012bc:	58024400 	.word	0x58024400
 80012c0:	080035f2 	.word	0x080035f2
 80012c4:	2000000c 	.word	0x2000000c

080012c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012c8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 80012ca:	f7ff ffe3 	bl	8001294 <HAL_RCC_GetHCLKFreq>
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80012d0:	2210      	movs	r2, #16
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	fa92 f2a2 	rbit	r2, r2
 80012d8:	fab2 f282 	clz	r2, r2
 80012dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012e0:	40d3      	lsrs	r3, r2
 80012e2:	4a03      	ldr	r2, [pc, #12]	; (80012f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
}
 80012e6:	40d8      	lsrs	r0, r3
 80012e8:	bd08      	pop	{r3, pc}
 80012ea:	bf00      	nop
 80012ec:	58024400 	.word	0x58024400
 80012f0:	080035f2 	.word	0x080035f2

080012f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012f4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80012f6:	f7ff ffcd 	bl	8001294 <HAL_RCC_GetHCLKFreq>
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	fa92 f2a2 	rbit	r2, r2
 8001306:	fab2 f282 	clz	r2, r2
 800130a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800130e:	40d3      	lsrs	r3, r2
 8001310:	4a02      	ldr	r2, [pc, #8]	; (800131c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
}
 8001314:	40d8      	lsrs	r0, r3
 8001316:	bd08      	pop	{r3, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	080035f2 	.word	0x080035f2

08001320 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001322:	4c31      	ldr	r4, [pc, #196]	; (80013e8 <RCCEx_PLL2_Config+0xc8>)
{
 8001324:	4606      	mov	r6, r0
 8001326:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001328:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b03      	cmp	r3, #3
 8001330:	d058      	beq.n	80013e4 <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001338:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800133a:	f7ff f995 	bl	8000668 <HAL_GetTick>
 800133e:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001340:	6823      	ldr	r3, [r4, #0]
 8001342:	011a      	lsls	r2, r3, #4
 8001344:	d43a      	bmi.n	80013bc <RCCEx_PLL2_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8001346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001348:	6832      	ldr	r2, [r6, #0]
 800134a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800134e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8001352:	62a3      	str	r3, [r4, #40]	; 0x28
 8001354:	68b3      	ldr	r3, [r6, #8]
 8001356:	68f2      	ldr	r2, [r6, #12]
 8001358:	3b01      	subs	r3, #1
 800135a:	3a01      	subs	r2, #1
 800135c:	025b      	lsls	r3, r3, #9
 800135e:	0412      	lsls	r2, r2, #16
 8001360:	b29b      	uxth	r3, r3
 8001362:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001366:	4313      	orrs	r3, r2
 8001368:	6872      	ldr	r2, [r6, #4]
 800136a:	3a01      	subs	r2, #1
 800136c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001370:	4313      	orrs	r3, r2
 8001372:	6932      	ldr	r2, [r6, #16]
 8001374:	3a01      	subs	r2, #1
 8001376:	0612      	lsls	r2, r2, #24
 8001378:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800137c:	4313      	orrs	r3, r2
 800137e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001382:	6972      	ldr	r2, [r6, #20]
 8001384:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001388:	4313      	orrs	r3, r2
 800138a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800138c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800138e:	69b2      	ldr	r2, [r6, #24]
 8001390:	f023 0320 	bic.w	r3, r3, #32
 8001394:	4313      	orrs	r3, r2
 8001396:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001398:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800139a:	b9b5      	cbnz	r5, 80013ca <RCCEx_PLL2_Config+0xaa>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800139c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80013a0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80013a2:	4c11      	ldr	r4, [pc, #68]	; (80013e8 <RCCEx_PLL2_Config+0xc8>)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013aa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ac:	f7ff f95c 	bl	8000668 <HAL_GetTick>
 80013b0:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	011b      	lsls	r3, r3, #4
 80013b6:	d50f      	bpl.n	80013d8 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 80013b8:	2000      	movs	r0, #0
 80013ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80013bc:	f7ff f954 	bl	8000668 <HAL_GetTick>
 80013c0:	1bc0      	subs	r0, r0, r7
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9bc      	bls.n	8001340 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80013c6:	2003      	movs	r0, #3
 80013c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80013ca:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80013cc:	bf0c      	ite	eq
 80013ce:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80013d2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80013d6:	e7e3      	b.n	80013a0 <RCCEx_PLL2_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80013d8:	f7ff f946 	bl	8000668 <HAL_GetTick>
 80013dc:	1b40      	subs	r0, r0, r5
 80013de:	2802      	cmp	r0, #2
 80013e0:	d9e7      	bls.n	80013b2 <RCCEx_PLL2_Config+0x92>
 80013e2:	e7f0      	b.n	80013c6 <RCCEx_PLL2_Config+0xa6>
    return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
}
 80013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e8:	58024400 	.word	0x58024400

080013ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80013ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80013ee:	4c31      	ldr	r4, [pc, #196]	; (80014b4 <RCCEx_PLL3_Config+0xc8>)
{
 80013f0:	4606      	mov	r6, r0
 80013f2:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80013f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d058      	beq.n	80014b0 <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001404:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001406:	f7ff f92f 	bl	8000668 <HAL_GetTick>
 800140a:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	009a      	lsls	r2, r3, #2
 8001410:	d43a      	bmi.n	8001488 <RCCEx_PLL3_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001412:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001414:	6832      	ldr	r2, [r6, #0]
 8001416:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800141a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800141e:	62a3      	str	r3, [r4, #40]	; 0x28
 8001420:	68b3      	ldr	r3, [r6, #8]
 8001422:	68f2      	ldr	r2, [r6, #12]
 8001424:	3b01      	subs	r3, #1
 8001426:	3a01      	subs	r2, #1
 8001428:	025b      	lsls	r3, r3, #9
 800142a:	0412      	lsls	r2, r2, #16
 800142c:	b29b      	uxth	r3, r3
 800142e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001432:	4313      	orrs	r3, r2
 8001434:	6872      	ldr	r2, [r6, #4]
 8001436:	3a01      	subs	r2, #1
 8001438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800143c:	4313      	orrs	r3, r2
 800143e:	6932      	ldr	r2, [r6, #16]
 8001440:	3a01      	subs	r2, #1
 8001442:	0612      	lsls	r2, r2, #24
 8001444:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001448:	4313      	orrs	r3, r2
 800144a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800144c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800144e:	6972      	ldr	r2, [r6, #20]
 8001450:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001454:	4313      	orrs	r3, r2
 8001456:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001458:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800145a:	69b2      	ldr	r2, [r6, #24]
 800145c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001460:	4313      	orrs	r3, r2
 8001462:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001466:	b9b5      	cbnz	r5, 8001496 <RCCEx_PLL3_Config+0xaa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800146c:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800146e:	4c11      	ldr	r4, [pc, #68]	; (80014b4 <RCCEx_PLL3_Config+0xc8>)
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001476:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001478:	f7ff f8f6 	bl	8000668 <HAL_GetTick>
 800147c:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 800147e:	6823      	ldr	r3, [r4, #0]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	d50f      	bpl.n	80014a4 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 8001484:	2000      	movs	r0, #0
 8001486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001488:	f7ff f8ee 	bl	8000668 <HAL_GetTick>
 800148c:	1bc0      	subs	r0, r0, r7
 800148e:	2802      	cmp	r0, #2
 8001490:	d9bc      	bls.n	800140c <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8001492:	2003      	movs	r0, #3
 8001494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001496:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001498:	bf0c      	ite	eq
 800149a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800149e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80014a2:	e7e3      	b.n	800146c <RCCEx_PLL3_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80014a4:	f7ff f8e0 	bl	8000668 <HAL_GetTick>
 80014a8:	1b40      	subs	r0, r0, r5
 80014aa:	2802      	cmp	r0, #2
 80014ac:	d9e7      	bls.n	800147e <RCCEx_PLL3_Config+0x92>
 80014ae:	e7f0      	b.n	8001492 <RCCEx_PLL3_Config+0xa6>
    return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
}
 80014b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014b4:	58024400 	.word	0x58024400

080014b8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80014b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80014bc:	6804      	ldr	r4, [r0, #0]
{
 80014be:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80014c0:	f014 6000 	ands.w	r0, r4, #134217728	; 0x8000000
 80014c4:	d014      	beq.n	80014f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80014c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80014c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014cc:	d018      	beq.n	8001500 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80014ce:	d802      	bhi.n	80014d6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80014d0:	b183      	cbz	r3, 80014f4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 80014d2:	2401      	movs	r4, #1
 80014d4:	e01b      	b.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80014d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014da:	d023      	beq.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80014dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80014e0:	d1f7      	bne.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80014e2:	4aa6      	ldr	r2, [pc, #664]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80014e4:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80014e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80014e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6513      	str	r3, [r2, #80]	; 0x50
 80014f0:	2400      	movs	r4, #0
 80014f2:	e00c      	b.n	800150e <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014f4:	4aa1      	ldr	r2, [pc, #644]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80014f6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80014fe:	e7f0      	b.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001500:	2102      	movs	r1, #2
 8001502:	1d28      	adds	r0, r5, #4
 8001504:	f7ff ff0c 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001508:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 800150a:	2800      	cmp	r0, #0
 800150c:	d0e9      	beq.n	80014e2 <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	05de      	lsls	r6, r3, #23
 8001512:	d53c      	bpl.n	800158e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001514:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001516:	2b04      	cmp	r3, #4
 8001518:	d834      	bhi.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800151a:	e8df f003 	tbb	[pc, r3]
 800151e:	1009      	.short	0x1009
 8001520:	0e2d      	.short	0x0e2d
 8001522:	0e          	.byte	0x0e
 8001523:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001524:	2102      	movs	r1, #2
 8001526:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800152a:	f7ff ff5f 	bl	80013ec <RCCEx_PLL3_Config>
 800152e:	e7eb      	b.n	8001508 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001530:	4a92      	ldr	r2, [pc, #584]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001532:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 800153a:	4626      	mov	r6, r4
 800153c:	e004      	b.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800153e:	2100      	movs	r1, #0
 8001540:	1d28      	adds	r0, r5, #4
 8001542:	f7ff feed 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001546:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001548:	b9ee      	cbnz	r6, 8001586 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800154a:	4a8c      	ldr	r2, [pc, #560]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800154c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800154e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001550:	f023 0307 	bic.w	r3, r3, #7
 8001554:	430b      	orrs	r3, r1
 8001556:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001558:	682b      	ldr	r3, [r5, #0]
 800155a:	0598      	lsls	r0, r3, #22
 800155c:	d527      	bpl.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 800155e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001560:	2b80      	cmp	r3, #128	; 0x80
 8001562:	d043      	beq.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001564:	d815      	bhi.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001566:	2b00      	cmp	r3, #0
 8001568:	d034      	beq.n	80015d4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 800156a:	2b40      	cmp	r3, #64	; 0x40
 800156c:	d038      	beq.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 800156e:	2601      	movs	r6, #1
      status |= ret;
 8001570:	ea44 0006 	orr.w	r0, r4, r6
 8001574:	b2c4      	uxtb	r4, r0
 8001576:	e01a      	b.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001578:	2100      	movs	r1, #0
 800157a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800157e:	f7ff ff35 	bl	80013ec <RCCEx_PLL3_Config>
 8001582:	e7e0      	b.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 8001584:	2601      	movs	r6, #1
      status |= ret;
 8001586:	ea44 0006 	orr.w	r0, r4, r6
 800158a:	b2c4      	uxtb	r4, r0
 800158c:	e7e4      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800158e:	4626      	mov	r6, r4
 8001590:	e7e2      	b.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001592:	2bc0      	cmp	r3, #192	; 0xc0
 8001594:	d002      	beq.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800159a:	d1e8      	bne.n	800156e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 800159c:	2e00      	cmp	r6, #0
 800159e:	d1e7      	bne.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80015a0:	4a76      	ldr	r2, [pc, #472]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80015a2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80015a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80015a6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	0559      	lsls	r1, r3, #21
 80015b2:	d531      	bpl.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 80015b4:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80015b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015bc:	d04b      	beq.n	8001656 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80015be:	d81b      	bhi.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d03c      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80015c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80015c8:	d03f      	beq.n	800164a <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 80015ca:	2601      	movs	r6, #1
      status |= ret;
 80015cc:	ea44 0006 	orr.w	r0, r4, r6
 80015d0:	b2c4      	uxtb	r4, r0
 80015d2:	e021      	b.n	8001618 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015d4:	4a69      	ldr	r2, [pc, #420]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80015d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015dc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80015de:	e7dd      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80015e0:	2100      	movs	r1, #0
 80015e2:	1d28      	adds	r0, r5, #4
 80015e4:	f7ff fe9c 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80015e8:	4606      	mov	r6, r0
      break;
 80015ea:	e7d7      	b.n	800159c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80015ec:	2100      	movs	r1, #0
 80015ee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80015f2:	f7ff fefb 	bl	80013ec <RCCEx_PLL3_Config>
 80015f6:	e7f7      	b.n	80015e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 80015f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80015fc:	d002      	beq.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80015fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001602:	d1e2      	bne.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 8001604:	2e00      	cmp	r6, #0
 8001606:	d1e1      	bne.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001608:	4a5c      	ldr	r2, [pc, #368]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800160a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800160e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001610:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001614:	430b      	orrs	r3, r1
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001618:	682b      	ldr	r3, [r5, #0]
 800161a:	051a      	lsls	r2, r3, #20
 800161c:	d531      	bpl.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 800161e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001626:	d045      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8001628:	d81b      	bhi.n	8001662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800162a:	2b00      	cmp	r3, #0
 800162c:	d036      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800162e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001632:	d039      	beq.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 8001634:	2601      	movs	r6, #1
      status |= ret;
 8001636:	ea44 0006 	orr.w	r0, r4, r6
 800163a:	b2c4      	uxtb	r4, r0
 800163c:	e021      	b.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800163e:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001640:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001646:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001648:	e7dc      	b.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800164a:	2100      	movs	r1, #0
 800164c:	1d28      	adds	r0, r5, #4
 800164e:	f7ff fe67 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001652:	4606      	mov	r6, r0
      break;
 8001654:	e7d6      	b.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001656:	2100      	movs	r1, #0
 8001658:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800165c:	f7ff fec6 	bl	80013ec <RCCEx_PLL3_Config>
 8001660:	e7f7      	b.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001662:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001666:	d002      	beq.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8001668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800166c:	d1e2      	bne.n	8001634 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 800166e:	2e00      	cmp	r6, #0
 8001670:	d1e1      	bne.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001672:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001674:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001678:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800167a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167e:	430b      	orrs	r3, r1
 8001680:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001682:	682b      	ldr	r3, [r5, #0]
 8001684:	019b      	lsls	r3, r3, #6
 8001686:	d528      	bpl.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 8001688:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800168a:	2b10      	cmp	r3, #16
 800168c:	d037      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0x246>
 800168e:	d817      	bhi.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001690:	b1d3      	cbz	r3, 80016c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 8001692:	2601      	movs	r6, #1
      status |= ret;
 8001694:	ea44 0006 	orr.w	r0, r4, r6
 8001698:	b2c4      	uxtb	r4, r0
 800169a:	e01e      	b.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800169c:	4a37      	ldr	r2, [pc, #220]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800169e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80016a6:	e7e2      	b.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80016a8:	2100      	movs	r1, #0
 80016aa:	1d28      	adds	r0, r5, #4
 80016ac:	f7ff fe38 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80016b0:	4606      	mov	r6, r0
      break;
 80016b2:	e7dc      	b.n	800166e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80016b4:	2100      	movs	r1, #0
 80016b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80016ba:	f7ff fe97 	bl	80013ec <RCCEx_PLL3_Config>
 80016be:	e7f7      	b.n	80016b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d022      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80016c4:	2b30      	cmp	r3, #48	; 0x30
 80016c6:	d1e4      	bne.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 80016c8:	2e00      	cmp	r6, #0
 80016ca:	d1e3      	bne.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80016cc:	4a2b      	ldr	r2, [pc, #172]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80016ce:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80016d0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80016d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016d6:	430b      	orrs	r3, r1
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	04df      	lsls	r7, r3, #19
 80016de:	d529      	bpl.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80016e0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80016e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016e6:	d042      	beq.n	800176e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80016e8:	d815      	bhi.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d033      	beq.n	8001756 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80016ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f2:	d036      	beq.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 80016f4:	2601      	movs	r6, #1
      status |= ret;
 80016f6:	ea44 0006 	orr.w	r0, r4, r6
 80016fa:	b2c4      	uxtb	r4, r0
 80016fc:	e01a      	b.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001700:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001706:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001708:	e7de      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800170a:	2102      	movs	r1, #2
 800170c:	1d28      	adds	r0, r5, #4
 800170e:	f7ff fe07 	bl	8001320 <RCCEx_PLL2_Config>
 8001712:	4606      	mov	r6, r0
      break;
 8001714:	e7d8      	b.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001716:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800171a:	d002      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800171c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001720:	d1e8      	bne.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 8001722:	2e00      	cmp	r6, #0
 8001724:	d1e7      	bne.n	80016f6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001728:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 800172a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800172c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001730:	430b      	orrs	r3, r1
 8001732:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	0498      	lsls	r0, r3, #18
 8001738:	d534      	bpl.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 800173a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800173c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001740:	d048      	beq.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001742:	d81d      	bhi.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8001744:	b32b      	cbz	r3, 8001792 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174a:	d03d      	beq.n	80017c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 800174c:	2601      	movs	r6, #1
      status |= ret;
 800174e:	ea44 0006 	orr.w	r0, r4, r6
 8001752:	b2c4      	uxtb	r4, r0
 8001754:	e026      	b.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001758:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800175a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800175e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001760:	e7df      	b.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001762:	2100      	movs	r1, #0
 8001764:	1d28      	adds	r0, r5, #4
 8001766:	f7ff fddb 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800176a:	4606      	mov	r6, r0
      break;
 800176c:	e7d9      	b.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800176e:	2100      	movs	r1, #0
 8001770:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001774:	f7ff fe3a 	bl	80013ec <RCCEx_PLL3_Config>
 8001778:	e7f7      	b.n	800176a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 800177a:	bf00      	nop
 800177c:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8001780:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001784:	d005      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800178a:	d002      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800178c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001790:	d1dc      	bne.n	800174c <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 8001792:	2e00      	cmp	r6, #0
 8001794:	d1db      	bne.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001796:	4aa0      	ldr	r2, [pc, #640]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001798:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800179a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800179c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80017a0:	430b      	orrs	r3, r1
 80017a2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	0459      	lsls	r1, r3, #17
 80017a8:	d52d      	bpl.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 80017aa:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80017ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80017b2:	d04c      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x396>
 80017b4:	d814      	bhi.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80017b6:	b1e3      	cbz	r3, 80017f2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80017b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017bc:	d041      	beq.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x38a>
      ret = HAL_ERROR;
 80017be:	2601      	movs	r6, #1
      status |= ret;
 80017c0:	ea44 0006 	orr.w	r0, r4, r6
 80017c4:	b2c4      	uxtb	r4, r0
 80017c6:	e01e      	b.n	8001806 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80017c8:	2101      	movs	r1, #1
 80017ca:	1d28      	adds	r0, r5, #4
 80017cc:	f7ff fda8 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80017d0:	4606      	mov	r6, r0
      break;
 80017d2:	e7de      	b.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80017d4:	2101      	movs	r1, #1
 80017d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80017da:	f7ff fe07 	bl	80013ec <RCCEx_PLL3_Config>
 80017de:	e7f7      	b.n	80017d0 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d005      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80017e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017ea:	d002      	beq.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80017ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80017f0:	d1e5      	bne.n	80017be <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 80017f2:	2e00      	cmp	r6, #0
 80017f4:	d1e4      	bne.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80017f6:	4a88      	ldr	r2, [pc, #544]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80017f8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80017fc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80017fe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001802:	430b      	orrs	r3, r1
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001806:	682b      	ldr	r3, [r5, #0]
 8001808:	041a      	lsls	r2, r3, #16
 800180a:	d50f      	bpl.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 800180c:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800180e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001812:	d022      	beq.n	800185a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001818:	d025      	beq.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800181a:	bb53      	cbnz	r3, 8001872 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(ret == HAL_OK)
 800181c:	bb56      	cbnz	r6, 8001874 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800181e:	4a7e      	ldr	r2, [pc, #504]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001820:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8001822:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001824:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001828:	430b      	orrs	r3, r1
 800182a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800182c:	682b      	ldr	r3, [r5, #0]
 800182e:	01db      	lsls	r3, r3, #7
 8001830:	d532      	bpl.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 8001832:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001834:	2b03      	cmp	r3, #3
 8001836:	f200 808a 	bhi.w	800194e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800183a:	e8df f003 	tbb	[pc, r3]
 800183e:	1f24      	.short	0x1f24
 8001840:	2482      	.short	0x2482
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001842:	2101      	movs	r1, #1
 8001844:	1d28      	adds	r0, r5, #4
 8001846:	f7ff fd6b 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800184a:	4606      	mov	r6, r0
      break;
 800184c:	e7d1      	b.n	80017f2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800184e:	2101      	movs	r1, #1
 8001850:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001854:	f7ff fdca 	bl	80013ec <RCCEx_PLL3_Config>
 8001858:	e7f7      	b.n	800184a <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800185a:	4a6f      	ldr	r2, [pc, #444]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800185c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800185e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001862:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001864:	e7da      	b.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001866:	2101      	movs	r1, #1
 8001868:	1d28      	adds	r0, r5, #4
 800186a:	f7ff fd59 	bl	8001320 <RCCEx_PLL2_Config>
 800186e:	4606      	mov	r6, r0
      break;
 8001870:	e7d4      	b.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 8001872:	2601      	movs	r6, #1
      status |= ret;
 8001874:	ea44 0006 	orr.w	r0, r4, r6
 8001878:	b2c4      	uxtb	r4, r0
 800187a:	e7d7      	b.n	800182c <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800187c:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800187e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001886:	2e00      	cmp	r6, #0
 8001888:	d162      	bne.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0x498>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800188a:	4a63      	ldr	r2, [pc, #396]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800188c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800188e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001890:	f023 0303 	bic.w	r3, r3, #3
 8001894:	430b      	orrs	r3, r1
 8001896:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	025f      	lsls	r7, r3, #9
 800189c:	d542      	bpl.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800189e:	4f5f      	ldr	r7, [pc, #380]	; (8001a1c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80018a8:	f7fe fede 	bl	8000668 <HAL_GetTick>
 80018ac:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	05d8      	lsls	r0, r3, #23
 80018b2:	d551      	bpl.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(ret == HAL_OK)
 80018b4:	2e00      	cmp	r6, #0
 80018b6:	d156      	bne.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80018b8:	4b57      	ldr	r3, [pc, #348]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80018ba:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 80018be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80018c0:	4042      	eors	r2, r0
 80018c2:	f412 7f40 	tst.w	r2, #768	; 0x300
 80018c6:	d00b      	beq.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80018ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018cc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80018d0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80018d4:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80018d6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80018d8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80018dc:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80018de:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80018e0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80018e4:	d108      	bne.n	80018f8 <HAL_RCCEx_PeriphCLKConfig+0x440>
        tickstart = HAL_GetTick();
 80018e6:	f7fe febf 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ea:	4f4b      	ldr	r7, [pc, #300]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
        tickstart = HAL_GetTick();
 80018ec:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018f4:	0799      	lsls	r1, r3, #30
 80018f6:	d53a      	bpl.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018f8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 80018fc:	4946      	ldr	r1, [pc, #280]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80018fe:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001902:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001906:	d13d      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8001908:	6908      	ldr	r0, [r1, #16]
 800190a:	4a45      	ldr	r2, [pc, #276]	; (8001a20 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 800190c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8001910:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001914:	4302      	orrs	r2, r0
 8001916:	610a      	str	r2, [r1, #16]
 8001918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191c:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800191e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001920:	430b      	orrs	r3, r1
 8001922:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	07da      	lsls	r2, r3, #31
 8001928:	d53f      	bpl.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->Usart16ClockSelection)
 800192a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 800192c:	2b10      	cmp	r3, #16
 800192e:	d04d      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001930:	d82c      	bhi.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8001932:	b38b      	cbz	r3, 8001998 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001934:	2b08      	cmp	r3, #8
 8001936:	d043      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
      ret = HAL_ERROR;
 8001938:	2601      	movs	r6, #1
      status |= ret;
 800193a:	ea44 0006 	orr.w	r0, r4, r6
 800193e:	b2c4      	uxtb	r4, r0
 8001940:	e033      	b.n	80019aa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001942:	2102      	movs	r1, #2
 8001944:	1d28      	adds	r0, r5, #4
 8001946:	f7ff fceb 	bl	8001320 <RCCEx_PLL2_Config>
 800194a:	4606      	mov	r6, r0
      break;
 800194c:	e79b      	b.n	8001886 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 800194e:	2601      	movs	r6, #1
      status |= ret;
 8001950:	ea44 0006 	orr.w	r0, r4, r6
 8001954:	b2c4      	uxtb	r4, r0
 8001956:	e79f      	b.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001958:	f7fe fe86 	bl	8000668 <HAL_GetTick>
 800195c:	eba0 0008 	sub.w	r0, r0, r8
 8001960:	2864      	cmp	r0, #100	; 0x64
 8001962:	d9a4      	bls.n	80018ae <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 8001964:	2603      	movs	r6, #3
      status |= ret;
 8001966:	ea44 0006 	orr.w	r0, r4, r6
 800196a:	b2c4      	uxtb	r4, r0
 800196c:	e7da      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7fe fe7b 	bl	8000668 <HAL_GetTick>
 8001972:	eba0 0008 	sub.w	r0, r0, r8
 8001976:	4548      	cmp	r0, r9
 8001978:	d9bb      	bls.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
        status |= ret;
 800197a:	f044 0003 	orr.w	r0, r4, #3
            ret = HAL_TIMEOUT;
 800197e:	2603      	movs	r6, #3
        status |= ret;
 8001980:	b2c4      	uxtb	r4, r0
 8001982:	e7cf      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001984:	690a      	ldr	r2, [r1, #16]
 8001986:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800198a:	e7c4      	b.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->Usart16ClockSelection)
 800198c:	2b20      	cmp	r3, #32
 800198e:	d003      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001990:	2b28      	cmp	r3, #40	; 0x28
 8001992:	d001      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001994:	2b18      	cmp	r3, #24
 8001996:	d1cf      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x480>
    if(ret == HAL_OK)
 8001998:	2e00      	cmp	r6, #0
 800199a:	d1ce      	bne.n	800193a <HAL_RCCEx_PeriphCLKConfig+0x482>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800199e:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80019a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80019a2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80019a6:	430b      	orrs	r3, r1
 80019a8:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80019aa:	682b      	ldr	r3, [r5, #0]
 80019ac:	079b      	lsls	r3, r3, #30
 80019ae:	d520      	bpl.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80019b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	d836      	bhi.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80019b6:	e8df f003 	tbb	[pc, r3]
 80019ba:	0f14      	.short	0x0f14
 80019bc:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80019c0:	2101      	movs	r1, #1
 80019c2:	1d28      	adds	r0, r5, #4
 80019c4:	f7ff fcac 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80019c8:	4606      	mov	r6, r0
      break;
 80019ca:	e7e5      	b.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80019cc:	2101      	movs	r1, #1
 80019ce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80019d2:	f7ff fd0b 	bl	80013ec <RCCEx_PLL3_Config>
 80019d6:	e7f7      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80019d8:	2101      	movs	r1, #1
 80019da:	1d28      	adds	r0, r5, #4
 80019dc:	f7ff fca0 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80019e0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80019e2:	bb06      	cbnz	r6, 8001a26 <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80019e6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80019e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80019ea:	f023 0307 	bic.w	r3, r3, #7
 80019ee:	430b      	orrs	r3, r1
 80019f0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	075f      	lsls	r7, r3, #29
 80019f6:	d528      	bpl.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80019f8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d83c      	bhi.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 8001a00:	e8df f003 	tbb	[pc, r3]
 8001a04:	1a35151a 	.word	0x1a35151a
 8001a08:	1a1a      	.short	0x1a1a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a10:	f7ff fcec 	bl	80013ec <RCCEx_PLL3_Config>
 8001a14:	e7e4      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	58024800 	.word	0x58024800
 8001a20:	00ffffcf 	.word	0x00ffffcf
      ret = HAL_ERROR;
 8001a24:	2601      	movs	r6, #1
      status |= ret;
 8001a26:	ea44 0006 	orr.w	r0, r4, r6
 8001a2a:	b2c4      	uxtb	r4, r0
 8001a2c:	e7e1      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001a2e:	2101      	movs	r1, #1
 8001a30:	1d28      	adds	r0, r5, #4
 8001a32:	f7ff fc75 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001a36:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001a38:	bb06      	cbnz	r6, 8001a7c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a3a:	4a99      	ldr	r2, [pc, #612]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001a3c:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8001a40:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a42:	f023 0307 	bic.w	r3, r3, #7
 8001a46:	430b      	orrs	r3, r1
 8001a48:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	0698      	lsls	r0, r3, #26
 8001a4e:	d52c      	bpl.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001a50:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a58:	d03f      	beq.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x622>
 8001a5a:	d813      	bhi.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8001a5c:	b1db      	cbz	r3, 8001a96 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a62:	d034      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x616>
      ret = HAL_ERROR;
 8001a64:	2601      	movs	r6, #1
      status |= ret;
 8001a66:	ea44 0006 	orr.w	r0, r4, r6
 8001a6a:	b2c4      	uxtb	r4, r0
 8001a6c:	e01d      	b.n	8001aaa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a74:	f7ff fcba 	bl	80013ec <RCCEx_PLL3_Config>
 8001a78:	e7dd      	b.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = HAL_ERROR;
 8001a7a:	2601      	movs	r6, #1
      status |= ret;
 8001a7c:	ea44 0006 	orr.w	r0, r4, r6
 8001a80:	b2c4      	uxtb	r4, r0
 8001a82:	e7e2      	b.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a88:	d005      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001a8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a8e:	d002      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001a90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001a94:	d1e6      	bne.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    if(ret == HAL_OK)
 8001a96:	2e00      	cmp	r6, #0
 8001a98:	d1e5      	bne.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a9a:	4a81      	ldr	r2, [pc, #516]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001a9c:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8001aa0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001aa2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	0659      	lsls	r1, r3, #25
 8001aae:	d52d      	bpl.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x654>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001ab0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001ab4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ab8:	d042      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8001aba:	d814      	bhi.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8001abc:	b1e3      	cbz	r3, 8001af8 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac2:	d037      	beq.n	8001b34 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      ret = HAL_ERROR;
 8001ac4:	2601      	movs	r6, #1
      status |= ret;
 8001ac6:	ea44 0006 	orr.w	r0, r4, r6
 8001aca:	b2c4      	uxtb	r4, r0
 8001acc:	e01e      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x654>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	1d28      	adds	r0, r5, #4
 8001ad2:	f7ff fc25 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ad6:	4606      	mov	r6, r0
      break;
 8001ad8:	e7dd      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ada:	2102      	movs	r1, #2
 8001adc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ae0:	f7ff fc84 	bl	80013ec <RCCEx_PLL3_Config>
 8001ae4:	e7f7      	b.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aea:	d005      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001aec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001af0:	d002      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001af2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001af6:	d1e5      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    if(ret == HAL_OK)
 8001af8:	2e00      	cmp	r6, #0
 8001afa:	d1e4      	bne.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001afc:	4a68      	ldr	r2, [pc, #416]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001afe:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8001b02:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b04:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	061a      	lsls	r2, r3, #24
 8001b10:	d52f      	bpl.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001b12:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8001b16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b1a:	f000 8095 	beq.w	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8001b1e:	d815      	bhi.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x694>
 8001b20:	b1eb      	cbz	r3, 8001b5e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b26:	f000 8089 	beq.w	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = HAL_ERROR;
 8001b2a:	2601      	movs	r6, #1
      status |= ret;
 8001b2c:	ea44 0006 	orr.w	r0, r4, r6
 8001b30:	b2c4      	uxtb	r4, r0
 8001b32:	e01e      	b.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001b34:	2100      	movs	r1, #0
 8001b36:	1d28      	adds	r0, r5, #4
 8001b38:	f7ff fbf2 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b3c:	4606      	mov	r6, r0
      break;
 8001b3e:	e7db      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b40:	2102      	movs	r1, #2
 8001b42:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b46:	f7ff fc51 	bl	80013ec <RCCEx_PLL3_Config>
 8001b4a:	e7f7      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x684>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b50:	d005      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001b52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001b56:	d002      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001b58:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001b5c:	d1e5      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x672>
    if(ret == HAL_OK)
 8001b5e:	2e00      	cmp	r6, #0
 8001b60:	d1e4      	bne.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8001b62:	4a4f      	ldr	r2, [pc, #316]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001b64:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8001b68:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8001b72:	682b      	ldr	r3, [r5, #0]
 8001b74:	071b      	lsls	r3, r3, #28
 8001b76:	d50b      	bpl.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8001b78:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8001b7c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001b80:	d168      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b82:	2102      	movs	r1, #2
 8001b84:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b88:	f7ff fc30 	bl	80013ec <RCCEx_PLL3_Config>
 8001b8c:	4304      	orrs	r4, r0
 8001b8e:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001b90:	682b      	ldr	r3, [r5, #0]
 8001b92:	06df      	lsls	r7, r3, #27
 8001b94:	d50b      	bpl.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8001b96:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8001b9a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001b9e:	d160      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ba6:	f7ff fc21 	bl	80013ec <RCCEx_PLL3_Config>
 8001baa:	4304      	orrs	r4, r0
 8001bac:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bae:	682b      	ldr	r3, [r5, #0]
 8001bb0:	0318      	lsls	r0, r3, #12
 8001bb2:	d517      	bpl.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 8001bb4:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001bb8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001bbc:	d058      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8001bbe:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8001bc4:	2900      	cmp	r1, #0
 8001bc6:	d159      	bne.n	8001c7c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001bc8:	1d28      	adds	r0, r5, #4
 8001bca:	f7ff fba9 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001bce:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001bd0:	2e00      	cmp	r6, #0
 8001bd2:	d154      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bd4:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001bd6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001bda:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001bdc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001be0:	430b      	orrs	r3, r1
 8001be2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	0359      	lsls	r1, r3, #13
 8001be8:	d519      	bpl.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch(PeriphClkInit->UsbClockSelection)
 8001bea:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bf2:	d048      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001bf4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001bf8:	d007      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x752>
 8001bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bfe:	d149      	bne.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c00:	4a27      	ldr	r2, [pc, #156]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001c02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001c0a:	2e00      	cmp	r6, #0
 8001c0c:	d143      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c0e:	4a24      	ldr	r2, [pc, #144]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001c10:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8001c14:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001c16:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c1a:	430b      	orrs	r3, r1
 8001c1c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	03da      	lsls	r2, r3, #15
 8001c22:	d54d      	bpl.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001c24:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d03c      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	f000 8099 	beq.w	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = HAL_ERROR;
 8001c32:	2601      	movs	r6, #1
      status |= ret;
 8001c34:	ea44 0006 	orr.w	r0, r4, r6
 8001c38:	b2c4      	uxtb	r4, r0
 8001c3a:	e041      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	1d28      	adds	r0, r5, #4
 8001c40:	f7ff fb6e 	bl	8001320 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c44:	4606      	mov	r6, r0
      break;
 8001c46:	e78a      	b.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c48:	2102      	movs	r1, #2
 8001c4a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001c4e:	f7ff fbcd 	bl	80013ec <RCCEx_PLL3_Config>
 8001c52:	e7f7      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001c56:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001c58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6553      	str	r3, [r2, #84]	; 0x54
 8001c60:	e796      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001c64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6e:	e79e      	b.n	8001bae <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c70:	2102      	movs	r1, #2
 8001c72:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001c76:	f7ff fbb9 	bl	80013ec <RCCEx_PLL3_Config>
 8001c7a:	e7a8      	b.n	8001bce <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = HAL_ERROR;
 8001c7c:	2601      	movs	r6, #1
      status |= ret;
 8001c7e:	ea44 0006 	orr.w	r0, r4, r6
 8001c82:	b2c4      	uxtb	r4, r0
 8001c84:	e7ae      	b.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001c86:	2101      	movs	r1, #1
 8001c88:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001c8c:	f7ff fbae 	bl	80013ec <RCCEx_PLL3_Config>
 8001c90:	4606      	mov	r6, r0
      break;
 8001c92:	e7ba      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x752>
      ret = HAL_ERROR;
 8001c94:	2601      	movs	r6, #1
      status |= ret;
 8001c96:	ea44 0006 	orr.w	r0, r4, r6
 8001c9a:	b2c4      	uxtb	r4, r0
 8001c9c:	e7bf      	b.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x766>
 8001c9e:	bf00      	nop
 8001ca0:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ca4:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001ca6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001cae:	2e00      	cmp	r6, #0
 8001cb0:	d1c0      	bne.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8001cb2:	4a38      	ldr	r2, [pc, #224]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001cb4:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8001cb6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	d506      	bpl.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ccc:	f7ff fb8e 	bl	80013ec <RCCEx_PLL3_Config>
 8001cd0:	4304      	orrs	r4, r0
 8001cd2:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	039f      	lsls	r7, r3, #14
 8001cd8:	d50e      	bpl.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    switch(PeriphClkInit->RngClockSelection)
 8001cda:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8001cdc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001ce0:	d051      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8001ce2:	d845      	bhi.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d149      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    if(ret == HAL_OK)
 8001ce8:	2e00      	cmp	r6, #0
 8001cea:	d148      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001cec:	4829      	ldr	r0, [pc, #164]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001cee:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001cf0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001cf8:	02de      	lsls	r6, r3, #11
 8001cfa:	d506      	bpl.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001cfc:	4925      	ldr	r1, [pc, #148]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001cfe:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8001d00:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001d02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d06:	4302      	orrs	r2, r0
 8001d08:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001d0a:	00d8      	lsls	r0, r3, #3
 8001d0c:	d507      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001d0e:	4921      	ldr	r1, [pc, #132]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001d10:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8001d14:	690a      	ldr	r2, [r1, #16]
 8001d16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001d1e:	0299      	lsls	r1, r3, #10
 8001d20:	d506      	bpl.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001d22:	491c      	ldr	r1, [pc, #112]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001d24:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8001d26:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001d28:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001d2c:	4302      	orrs	r2, r0
 8001d2e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8001d30:	005a      	lsls	r2, r3, #1
 8001d32:	d509      	bpl.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d34:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001d36:	6911      	ldr	r1, [r2, #16]
 8001d38:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001d3c:	6111      	str	r1, [r2, #16]
 8001d3e:	6911      	ldr	r1, [r2, #16]
 8001d40:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8001d44:	4301      	orrs	r1, r0
 8001d46:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da06      	bge.n	8001d5a <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8001d4c:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001d4e:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001d50:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d52:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001d56:	430b      	orrs	r3, r1
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	1c20      	adds	r0, r4, #0
 8001d5c:	bf18      	it	ne
 8001d5e:	2001      	movne	r0, #1
}
 8001d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001d64:	2102      	movs	r1, #2
 8001d66:	1d28      	adds	r0, r5, #4
 8001d68:	f7ff fada 	bl	8001320 <RCCEx_PLL2_Config>
 8001d6c:	4606      	mov	r6, r0
      break;
 8001d6e:	e79e      	b.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    switch(PeriphClkInit->RngClockSelection)
 8001d70:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001d74:	d0b8      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8001d76:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001d7a:	d0b5      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8001d7c:	2601      	movs	r6, #1
      status |= ret;
 8001d7e:	ea44 0006 	orr.w	r0, r4, r6
 8001d82:	b2c4      	uxtb	r4, r0
 8001d84:	e7b8      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d86:	4803      	ldr	r0, [pc, #12]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001d88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001d8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d8e:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8001d90:	e7aa      	b.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8001d92:	bf00      	nop
 8001d94:	58024400 	.word	0x58024400

08001d98 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8001d98:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8001d9a:	f7ff fa7b 	bl	8001294 <HAL_RCC_GetHCLKFreq>
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8001da0:	2210      	movs	r2, #16
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	fa92 f2a2 	rbit	r2, r2
 8001da8:	fab2 f282 	clz	r2, r2
 8001dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001db0:	40d3      	lsrs	r3, r2
 8001db2:	4a03      	ldr	r2, [pc, #12]	; (8001dc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8001db4:	5cd3      	ldrb	r3, [r2, r3]
}
 8001db6:	40d8      	lsrs	r0, r3
 8001db8:	bd08      	pop	{r3, pc}
 8001dba:	bf00      	nop
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	080035f2 	.word	0x080035f2

08001dc4 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8001dc4:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dc6:	4c4a      	ldr	r4, [pc, #296]	; (8001ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001dc8:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8001ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8001dcc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001dce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001dd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001dd2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001dd4:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001dd8:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001ddc:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001de0:	4353      	muls	r3, r2
 8001de2:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001de6:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001dea:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001dec:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001df0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001df4:	d002      	beq.n	8001dfc <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 8001df6:	d30e      	bcc.n	8001e16 <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d068      	beq.n	8001ece <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001dfe:	4a3e      	ldr	r2, [pc, #248]	; (8001ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 8001e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e04:	ee07 3a10 	vmov	s14, r3
 8001e08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e0c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e14:	e067      	b.n	8001ee6 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	4a38      	ldr	r2, [pc, #224]	; (8001efc <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 8001e1a:	f013 0f20 	tst.w	r3, #32
 8001e1e:	d042      	beq.n	8001ea6 <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e20:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e24:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e2c:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e2e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e32:	ee07 2a10 	vmov	s14, r2
 8001e36:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001e3a:	ee07 3a10 	vmov	s14, r3
 8001e3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e42:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e4a:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8001e4e:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001e50:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e52:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001e56:	3301      	adds	r3, #1
 8001e58:	ee07 3a10 	vmov	s14, r3
 8001e5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e60:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e64:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e68:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8001e6c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e6e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001e72:	3301      	adds	r3, #1
 8001e74:	ee07 3a10 	vmov	s14, r3
 8001e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e80:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e84:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8001e88:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e8a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001e8e:	3301      	adds	r3, #1
 8001e90:	ee07 3a10 	vmov	s14, r3
 8001e94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e9c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001ea0:	edc0 6a02 	vstr	s13, [r0, #8]
 8001ea4:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eac:	ee07 3a10 	vmov	s14, r3
 8001eb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001eb4:	fbb2 f3f1 	udiv	r3, r2, r1
 8001eb8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec0:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8001ecc:	e7bf      	b.n	8001e4e <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001ece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 8001ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed6:	ee07 3a10 	vmov	s14, r3
 8001eda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ede:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001ee2:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001ee6:	fbb2 f2f1 	udiv	r2, r2, r1
 8001eea:	ee07 2a90 	vmov	s15, r2
 8001eee:	e7e9      	b.n	8001ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	39000000 	.word	0x39000000
 8001ef8:	003d0900 	.word	0x003d0900
 8001efc:	03d09000 	.word	0x03d09000
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8001f04:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f06:	4c4a      	ldr	r4, [pc, #296]	; (8002030 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001f08:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8002034 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8001f0c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001f0e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001f10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001f12:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001f14:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001f1c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001f20:	4353      	muls	r3, r2
 8001f22:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f26:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001f2a:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001f2c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001f30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001f34:	d002      	beq.n	8001f3c <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 8001f36:	d30e      	bcc.n	8001f56 <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d068      	beq.n	800200e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f3e:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8001f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f44:	ee07 3a10 	vmov	s14, r3
 8001f48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f4c:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	e067      	b.n	8002026 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	4a38      	ldr	r2, [pc, #224]	; (800203c <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8001f5a:	f013 0f20 	tst.w	r3, #32
 8001f5e:	d042      	beq.n	8001fe6 <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f60:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f64:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001f6c:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f6e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001f72:	ee07 2a10 	vmov	s14, r2
 8001f76:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001f7a:	ee07 3a10 	vmov	s14, r3
 8001f7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f82:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f8a:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8001f8e:	4a28      	ldr	r2, [pc, #160]	; (8002030 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001f90:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f92:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001f96:	3301      	adds	r3, #1
 8001f98:	ee07 3a10 	vmov	s14, r3
 8001f9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fa4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001fa8:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8001fac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001fae:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	ee07 3a10 	vmov	s14, r3
 8001fb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fc0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001fc4:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8001fc8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001fca:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001fce:	3301      	adds	r3, #1
 8001fd0:	ee07 3a10 	vmov	s14, r3
 8001fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001fd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fdc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001fe0:	edc0 6a02 	vstr	s13, [r0, #8]
 8001fe4:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	ee07 3a10 	vmov	s14, r3
 8001ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ff4:	fbb2 f3f1 	udiv	r3, r2, r1
 8001ff8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002000:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002008:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 800200c:	e7bf      	b.n	8001f8e <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 800200e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002010:	4a0b      	ldr	r2, [pc, #44]	; (8002040 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8002012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002016:	ee07 3a10 	vmov	s14, r3
 800201a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800201e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002022:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002026:	fbb2 f2f1 	udiv	r2, r2, r1
 800202a:	ee07 2a90 	vmov	s15, r2
 800202e:	e7e9      	b.n	8002004 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8002030:	58024400 	.word	0x58024400
 8002034:	39000000 	.word	0x39000000
 8002038:	003d0900 	.word	0x003d0900
 800203c:	03d09000 	.word	0x03d09000
 8002040:	007a1200 	.word	0x007a1200

08002044 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8002044:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002046:	f7fe ffaf 	bl	8000fa8 <HAL_RCC_GetSysClockFreq>
 800204a:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 800204c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	fa92 f2a2 	rbit	r2, r2
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800205e:	40d3      	lsrs	r3, r2
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	40d8      	lsrs	r0, r3
 8002066:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8002068:	6018      	str	r0, [r3, #0]
}
 800206a:	bd08      	pop	{r3, pc}
 800206c:	58024400 	.word	0x58024400
 8002070:	080035f2 	.word	0x080035f2
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002078:	6802      	ldr	r2, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 800207a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800207c:	68d3      	ldr	r3, [r2, #12]
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8002084:	8813      	ldrh	r3, [r2, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	8013      	strh	r3, [r2, #0]
}
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_OC_DelayElapsedCallback>:
 8002090:	4770      	bx	lr

08002092 <HAL_TIM_IC_CaptureCallback>:
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002094:	4770      	bx	lr

08002096 <HAL_TIM_TriggerCallback>:
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	0791      	lsls	r1, r2, #30
{
 800209e:	b510      	push	{r4, lr}
 80020a0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020a2:	d50f      	bpl.n	80020c4 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	0792      	lsls	r2, r2, #30
 80020a8:	d50c      	bpl.n	80020c4 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020aa:	f06f 0202 	mvn.w	r2, #2
 80020ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b0:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80020b2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b4:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80020b6:	0799      	lsls	r1, r3, #30
 80020b8:	f000 8085 	beq.w	80021c6 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80020bc:	f7ff ffe9 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c0:	2300      	movs	r3, #0
 80020c2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	0752      	lsls	r2, r2, #29
 80020ca:	d510      	bpl.n	80020ee <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	0750      	lsls	r0, r2, #29
 80020d0:	d50d      	bpl.n	80020ee <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020d2:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020da:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80020dc:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020de:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80020e0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80020e4:	d075      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	f7ff ffd4 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	2300      	movs	r3, #0
 80020ec:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	0711      	lsls	r1, r2, #28
 80020f4:	d50f      	bpl.n	8002116 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	0712      	lsls	r2, r2, #28
 80020fa:	d50c      	bpl.n	8002116 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020fc:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002100:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002104:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002106:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002108:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800210a:	079b      	lsls	r3, r3, #30
 800210c:	d067      	beq.n	80021de <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	f7ff ffc0 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002112:	2300      	movs	r3, #0
 8002114:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	06d0      	lsls	r0, r2, #27
 800211c:	d510      	bpl.n	8002140 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	06d1      	lsls	r1, r2, #27
 8002122:	d50d      	bpl.n	8002140 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002124:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002128:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800212a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800212c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800212e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002130:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002132:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002136:	d058      	beq.n	80021ea <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002138:	f7ff ffab 	bl	8002092 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213c:	2300      	movs	r3, #0
 800213e:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */ //This one is what we check in this example
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	07d2      	lsls	r2, r2, #31
 8002146:	d508      	bpl.n	800215a <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	07d0      	lsls	r0, r2, #31
 800214c:	d505      	bpl.n	800215a <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800214e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002152:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002154:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002156:	f001 f861 	bl	800321c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	0611      	lsls	r1, r2, #24
 8002160:	d508      	bpl.n	8002174 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	0612      	lsls	r2, r2, #24
 8002166:	d505      	bpl.n	8002174 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002168:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800216c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800216e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002170:	f000 f8eb 	bl	800234a <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	05d0      	lsls	r0, r2, #23
 800217a:	d508      	bpl.n	800218e <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	0611      	lsls	r1, r2, #24
 8002180:	d505      	bpl.n	800218e <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002182:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002186:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002188:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800218a:	f000 f8de 	bl	800234a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	691a      	ldr	r2, [r3, #16]
 8002192:	0652      	lsls	r2, r2, #25
 8002194:	d508      	bpl.n	80021a8 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	0650      	lsls	r0, r2, #25
 800219a:	d505      	bpl.n	80021a8 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800219c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80021a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021a4:	f7ff ff77 	bl	8002096 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	0691      	lsls	r1, r2, #26
 80021ae:	d522      	bpl.n	80021f6 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	0692      	lsls	r2, r2, #26
 80021b4:	d51f      	bpl.n	80021f6 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021b6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80021ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021bc:	611a      	str	r2, [r3, #16]
    }
  }
}
 80021be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80021c2:	f000 b8c1 	b.w	8002348 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	f7ff ff63 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff62 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021d0:	e776      	b.n	80020c0 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	f7ff ff5d 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff ff5c 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021dc:	e785      	b.n	80020ea <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	f7ff ff57 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff ff56 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021e8:	e793      	b.n	8002112 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	f7ff ff51 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7ff ff50 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
 80021f4:	e7a2      	b.n	800213c <HAL_TIM_IRQHandler+0xa4>
 80021f6:	bd10      	pop	{r4, pc}

080021f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021f8:	4a31      	ldr	r2, [pc, #196]	; (80022c0 <TIM_Base_SetConfig+0xc8>)
  tmpcr1 = TIMx->CR1;
 80021fa:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021fc:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80021fe:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002200:	d012      	beq.n	8002228 <TIM_Base_SetConfig+0x30>
 8002202:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002206:	d00f      	beq.n	8002228 <TIM_Base_SetConfig+0x30>
 8002208:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800220c:	4290      	cmp	r0, r2
 800220e:	d00b      	beq.n	8002228 <TIM_Base_SetConfig+0x30>
 8002210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002214:	4290      	cmp	r0, r2
 8002216:	d007      	beq.n	8002228 <TIM_Base_SetConfig+0x30>
 8002218:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800221c:	4290      	cmp	r0, r2
 800221e:	d003      	beq.n	8002228 <TIM_Base_SetConfig+0x30>
 8002220:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002224:	4290      	cmp	r0, r2
 8002226:	d119      	bne.n	800225c <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002228:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800222a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800222e:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002230:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <TIM_Base_SetConfig+0xc8>)
 8002232:	4290      	cmp	r0, r2
 8002234:	d01d      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 8002236:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800223a:	d01a      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 800223c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002240:	4290      	cmp	r0, r2
 8002242:	d016      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 8002244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002248:	4290      	cmp	r0, r2
 800224a:	d012      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 800224c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002250:	4290      	cmp	r0, r2
 8002252:	d00e      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 8002254:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002258:	4290      	cmp	r0, r2
 800225a:	d00a      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <TIM_Base_SetConfig+0xcc>)
 800225e:	4290      	cmp	r0, r2
 8002260:	d007      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 8002262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002266:	4290      	cmp	r0, r2
 8002268:	d003      	beq.n	8002272 <TIM_Base_SetConfig+0x7a>
 800226a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800226e:	4290      	cmp	r0, r2
 8002270:	d103      	bne.n	800227a <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002276:	68ca      	ldr	r2, [r1, #12]
 8002278:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800227a:	694a      	ldr	r2, [r1, #20]
 800227c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002280:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002282:	b29b      	uxth	r3, r3
 8002284:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002286:	688b      	ldr	r3, [r1, #8]
 8002288:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800228a:	880b      	ldrh	r3, [r1, #0]
 800228c:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <TIM_Base_SetConfig+0xc8>)
 8002290:	4298      	cmp	r0, r3
 8002292:	d00f      	beq.n	80022b4 <TIM_Base_SetConfig+0xbc>
 8002294:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002298:	4298      	cmp	r0, r3
 800229a:	d00b      	beq.n	80022b4 <TIM_Base_SetConfig+0xbc>
 800229c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 80022a0:	4298      	cmp	r0, r3
 80022a2:	d007      	beq.n	80022b4 <TIM_Base_SetConfig+0xbc>
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	4298      	cmp	r0, r3
 80022aa:	d003      	beq.n	80022b4 <TIM_Base_SetConfig+0xbc>
 80022ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022b0:	4298      	cmp	r0, r3
 80022b2:	d101      	bne.n	80022b8 <TIM_Base_SetConfig+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b4:	8a0b      	ldrh	r3, [r1, #16]
 80022b6:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80022b8:	2301      	movs	r3, #1
 80022ba:	6143      	str	r3, [r0, #20]
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40010000 	.word	0x40010000
 80022c4:	40014000 	.word	0x40014000

080022c8 <HAL_TIM_Base_Init>:
{ 
 80022c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022ca:	4604      	mov	r4, r0
 80022cc:	b1a0      	cbz	r0, 80022f8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022d6:	b91b      	cbnz	r3, 80022e0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80022dc:	f001 f82c 	bl	8003338 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80022e0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 80022e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022ea:	f7ff ff85 	bl	80021f8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022ee:	2301      	movs	r3, #1
  return HAL_OK;
 80022f0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80022f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80022f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
}
 80022fa:	bd10      	pop	{r4, pc}

080022fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80022fc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
{
 8002302:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002304:	d01c      	beq.n	8002340 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002306:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002308:	4d0e      	ldr	r5, [pc, #56]	; (8002344 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800230a:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800230c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 800230e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002310:	d003      	beq.n	800231a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8002312:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002316:	42aa      	cmp	r2, r5
 8002318:	d103      	bne.n	8002322 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800231a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800231e:	684d      	ldr	r5, [r1, #4]
 8002320:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002322:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002324:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002328:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 800232a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800232e:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002330:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002332:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8002334:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8002336:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8002338:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 800233c:	4618      	mov	r0, r3
 800233e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002340:	2002      	movs	r0, #2
} 
 8002342:	bd30      	pop	{r4, r5, pc}
 8002344:	40010000 	.word	0x40010000

08002348 <HAL_TIMEx_CommutationCallback>:
 8002348:	4770      	bx	lr

0800234a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800234a:	4770      	bx	lr

0800234c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800234c:	6803      	ldr	r3, [r0, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002354:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	f022 0201 	bic.w	r2, r2, #1
 800235c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800235e:	2320      	movs	r3, #32
 8002360:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
 8002364:	4770      	bx	lr

08002366 <HAL_UART_TxCpltCallback>:
 8002366:	4770      	bx	lr

08002368 <HAL_UART_RxCpltCallback>:
 8002368:	4770      	bx	lr

0800236a <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800236a:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 800236e:	6801      	ldr	r1, [r0, #0]
 8002370:	2b22      	cmp	r3, #34	; 0x22
{
 8002372:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002374:	d129      	bne.n	80023ca <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002376:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8002378:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800237c:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002382:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002384:	ea02 0201 	and.w	r2, r2, r1
 8002388:	d11b      	bne.n	80023c2 <UART_Receive_IT+0x58>
 800238a:	6901      	ldr	r1, [r0, #16]
 800238c:	b9c9      	cbnz	r1, 80023c2 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800238e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2;
 8002392:	6643      	str	r3, [r0, #100]	; 0x64
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002394:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 8002398:	3c01      	subs	r4, #1
 800239a:	b2a4      	uxth	r4, r4
 800239c:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
 80023a0:	b96c      	cbnz	r4, 80023be <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a2:	6803      	ldr	r3, [r0, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80023aa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	f022 0201 	bic.w	r2, r2, #1
 80023b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023b4:	2320      	movs	r3, #32
 80023b6:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a

      HAL_UART_RxCpltCallback(huart);
 80023ba:	f7ff ffd5 	bl	8002368 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80023be:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80023c0:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80023c2:	1c59      	adds	r1, r3, #1
 80023c4:	6641      	str	r1, [r0, #100]	; 0x64
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e7e4      	b.n	8002394 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80023ca:	8b0b      	ldrh	r3, [r1, #24]
    return HAL_BUSY;
 80023cc:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f043 0308 	orr.w	r3, r3, #8
 80023d4:	830b      	strh	r3, [r1, #24]
    return HAL_BUSY;
 80023d6:	bd10      	pop	{r4, pc}

080023d8 <HAL_UART_ErrorCallback>:
 80023d8:	4770      	bx	lr
	...

080023dc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023dc:	6803      	ldr	r3, [r0, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023e0:	6819      	ldr	r1, [r3, #0]
{
 80023e2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80023e4:	0715      	lsls	r5, r2, #28
{
 80023e6:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023e8:	6898      	ldr	r0, [r3, #8]
  if (errorflags == RESET)
 80023ea:	d10a      	bne.n	8002402 <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 80023ec:	0696      	lsls	r6, r2, #26
 80023ee:	d56a      	bpl.n	80024c6 <HAL_UART_IRQHandler+0xea>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 80023f0:	068d      	lsls	r5, r1, #26
 80023f2:	d401      	bmi.n	80023f8 <HAL_UART_IRQHandler+0x1c>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 80023f4:	00c6      	lsls	r6, r0, #3
 80023f6:	d566      	bpl.n	80024c6 <HAL_UART_IRQHandler+0xea>
      UART_Receive_IT(huart);
 80023f8:	4620      	mov	r0, r4
}
 80023fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80023fe:	f7ff bfb4 	b.w	800236a <UART_Receive_IT>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 8002402:	4e61      	ldr	r6, [pc, #388]	; (8002588 <HAL_UART_IRQHandler+0x1ac>)
 8002404:	4006      	ands	r6, r0
 8002406:	d102      	bne.n	800240e <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002408:	f411 7f90 	tst.w	r1, #288	; 0x120
 800240c:	d05b      	beq.n	80024c6 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800240e:	07d5      	lsls	r5, r2, #31
 8002410:	d507      	bpl.n	8002422 <HAL_UART_IRQHandler+0x46>
 8002412:	05cd      	lsls	r5, r1, #23
 8002414:	d505      	bpl.n	8002422 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002416:	2501      	movs	r5, #1
 8002418:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800241a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800241c:	f045 0501 	orr.w	r5, r5, #1
 8002420:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002422:	0795      	lsls	r5, r2, #30
 8002424:	d507      	bpl.n	8002436 <HAL_UART_IRQHandler+0x5a>
 8002426:	07c5      	lsls	r5, r0, #31
 8002428:	d505      	bpl.n	8002436 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 800242a:	2502      	movs	r5, #2
 800242c:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800242e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8002430:	f045 0504 	orr.w	r5, r5, #4
 8002434:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002436:	0755      	lsls	r5, r2, #29
 8002438:	d507      	bpl.n	800244a <HAL_UART_IRQHandler+0x6e>
 800243a:	07c5      	lsls	r5, r0, #31
 800243c:	d505      	bpl.n	800244a <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800243e:	2504      	movs	r5, #4
 8002440:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002442:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 8002444:	f045 0502 	orr.w	r5, r5, #2
 8002448:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 800244a:	0715      	lsls	r5, r2, #28
 800244c:	d507      	bpl.n	800245e <HAL_UART_IRQHandler+0x82>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 800244e:	068d      	lsls	r5, r1, #26
 8002450:	d400      	bmi.n	8002454 <HAL_UART_IRQHandler+0x78>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8002452:	b126      	cbz	r6, 800245e <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002454:	2508      	movs	r5, #8
 8002456:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002458:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800245a:	432b      	orrs	r3, r5
 800245c:	67e3      	str	r3, [r4, #124]	; 0x7c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800245e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d05a      	beq.n	800251a <HAL_UART_IRQHandler+0x13e>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8002464:	0696      	lsls	r6, r2, #26
 8002466:	d506      	bpl.n	8002476 <HAL_UART_IRQHandler+0x9a>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 8002468:	068d      	lsls	r5, r1, #26
 800246a:	d401      	bmi.n	8002470 <HAL_UART_IRQHandler+0x94>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800246c:	00c0      	lsls	r0, r0, #3
 800246e:	d502      	bpl.n	8002476 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8002470:	4620      	mov	r0, r4
 8002472:	f7ff ff7a 	bl	800236a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002476:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
        UART_EndRxTransfer(huart);
 8002478:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800247a:	0719      	lsls	r1, r3, #28
 800247c:	d404      	bmi.n	8002488 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002482:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002486:	d01a      	beq.n	80024be <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8002488:	f7ff ff60 	bl	800234c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248c:	6823      	ldr	r3, [r4, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	0652      	lsls	r2, r2, #25
 8002492:	d510      	bpl.n	80024b6 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002494:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002496:	6f60      	ldr	r0, [r4, #116]	; 0x74
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800249c:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800249e:	b150      	cbz	r0, 80024b6 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_UART_IRQHandler+0x1b0>)
 80024a2:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024a4:	f7fe f966 	bl	8000774 <HAL_DMA_Abort_IT>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d036      	beq.n	800251a <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 80024ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80024b4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7ff ff8e 	bl	80023d8 <HAL_UART_ErrorCallback>
 80024bc:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80024be:	f7ff ff8b 	bl	80023d8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c2:	67e5      	str	r5, [r4, #124]	; 0x7c
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80024c6:	02d6      	lsls	r6, r2, #11
 80024c8:	d50e      	bpl.n	80024e8 <HAL_UART_IRQHandler+0x10c>
 80024ca:	0245      	lsls	r5, r0, #9
 80024cc:	d50c      	bpl.n	80024e8 <HAL_UART_IRQHandler+0x10c>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80024ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80024d2:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80024d4:	621a      	str	r2, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80024d6:	2320      	movs	r3, #32
 80024d8:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 80024dc:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
 80024e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80024e4:	f000 bbf2 	b.w	8002ccc <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET)
 80024e8:	0616      	lsls	r6, r2, #24
 80024ea:	d535      	bpl.n	8002558 <HAL_UART_IRQHandler+0x17c>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 80024ec:	060d      	lsls	r5, r1, #24
 80024ee:	d401      	bmi.n	80024f4 <HAL_UART_IRQHandler+0x118>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 80024f0:	0200      	lsls	r0, r0, #8
 80024f2:	d531      	bpl.n	8002558 <HAL_UART_IRQHandler+0x17c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024f4:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 80024f8:	2a21      	cmp	r2, #33	; 0x21
 80024fa:	d10e      	bne.n	800251a <HAL_UART_IRQHandler+0x13e>
    if(huart->TxXferCount == 0U)
 80024fc:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8002500:	b292      	uxth	r2, r2
 8002502:	b982      	cbnz	r2, 8002526 <HAL_UART_IRQHandler+0x14a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	0092      	lsls	r2, r2, #2
 8002508:	d508      	bpl.n	800251c <HAL_UART_IRQHandler+0x140>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002510:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e7f5      	b.n	8002512 <HAL_UART_IRQHandler+0x136>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002526:	68a2      	ldr	r2, [r4, #8]
 8002528:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800252c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800252e:	d10e      	bne.n	800254e <HAL_UART_IRQHandler+0x172>
 8002530:	6921      	ldr	r1, [r4, #16]
 8002532:	b961      	cbnz	r1, 800254e <HAL_UART_IRQHandler+0x172>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002534:	f832 1b02 	ldrh.w	r1, [r2], #2
 8002538:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800253c:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800253e:	65e2      	str	r2, [r4, #92]	; 0x5c
      huart->TxXferCount--;
 8002540:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8002544:	3b01      	subs	r3, #1
 8002546:	b29b      	uxth	r3, r3
 8002548:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800254c:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800254e:	1c51      	adds	r1, r2, #1
 8002550:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002552:	7812      	ldrb	r2, [r2, #0]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
 8002556:	e7f3      	b.n	8002540 <HAL_UART_IRQHandler+0x164>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002558:	0656      	lsls	r6, r2, #25
 800255a:	d50c      	bpl.n	8002576 <HAL_UART_IRQHandler+0x19a>
 800255c:	064d      	lsls	r5, r1, #25
 800255e:	d50a      	bpl.n	8002576 <HAL_UART_IRQHandler+0x19a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002560:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8002562:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002568:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800256a:	2320      	movs	r3, #32
 800256c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  HAL_UART_TxCpltCallback(huart);
 8002570:	f7ff fef9 	bl	8002366 <HAL_UART_TxCpltCallback>
 8002574:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8002576:	0210      	lsls	r0, r2, #8
 8002578:	d5cf      	bpl.n	800251a <HAL_UART_IRQHandler+0x13e>
 800257a:	004a      	lsls	r2, r1, #1
 800257c:	d5cd      	bpl.n	800251a <HAL_UART_IRQHandler+0x13e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002584:	e7c8      	b.n	8002518 <HAL_UART_IRQHandler+0x13c>
 8002586:	bf00      	nop
 8002588:	10000001 	.word	0x10000001
 800258c:	08002591 	.word	0x08002591

08002590 <UART_DMAAbortOnError>:
{
 8002590:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002592:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  huart->TxXferCount = 0U;
 800259a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  HAL_UART_ErrorCallback(huart);
 800259e:	f7ff ff1b 	bl	80023d8 <HAL_UART_ErrorCallback>
 80025a2:	bd08      	pop	{r3, pc}

080025a4 <UART_SetConfig>:
{
 80025a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025a8:	4604      	mov	r4, r0
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 80025aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if(UART_INSTANCE_LOWPOWER(huart))
 80025ac:	6805      	ldr	r5, [r0, #0]
{
 80025ae:	b087      	sub	sp, #28
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 80025b0:	68a3      	ldr	r3, [r4, #8]
 80025b2:	6922      	ldr	r2, [r4, #16]
 80025b4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025b6:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025b8:	69c0      	ldr	r0, [r0, #28]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 80025ba:	4313      	orrs	r3, r2
 80025bc:	6962      	ldr	r2, [r4, #20]
 80025be:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025c0:	4ab3      	ldr	r2, [pc, #716]	; (8002890 <UART_SetConfig+0x2ec>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 80025c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025c4:	4032      	ands	r2, r6
 80025c6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c8:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025ca:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025cc:	686b      	ldr	r3, [r5, #4]
 80025ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025d2:	4313      	orrs	r3, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025d4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025d6:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025d8:	4bae      	ldr	r3, [pc, #696]	; (8002894 <UART_SetConfig+0x2f0>)
 80025da:	429d      	cmp	r5, r3
    tmpreg |= huart->Init.OneBitSampling;
 80025dc:	bf1c      	itt	ne
 80025de:	6a23      	ldrne	r3, [r4, #32]
 80025e0:	431a      	orrne	r2, r3
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 80025e2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 80025e6:	bf02      	ittt	eq
 80025e8:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 80025ea:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 80025ec:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 80025ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 80025f0:	bf08      	it	eq
 80025f2:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025f4:	68ab      	ldr	r3, [r5, #8]
 80025f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80025fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80025fe:	4313      	orrs	r3, r2
 8002600:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002602:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002604:	f023 030f 	bic.w	r3, r3, #15
 8002608:	430b      	orrs	r3, r1
 800260a:	62eb      	str	r3, [r5, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800260c:	4ba2      	ldr	r3, [pc, #648]	; (8002898 <UART_SetConfig+0x2f4>)
 800260e:	429d      	cmp	r5, r3
 8002610:	d11c      	bne.n	800264c <UART_SetConfig+0xa8>
 8002612:	4ba2      	ldr	r3, [pc, #648]	; (800289c <UART_SetConfig+0x2f8>)
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261a:	2b28      	cmp	r3, #40	; 0x28
 800261c:	f200 825e 	bhi.w	8002adc <UART_SetConfig+0x538>
 8002620:	4a9f      	ldr	r2, [pc, #636]	; (80028a0 <UART_SetConfig+0x2fc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002622:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002626:	5cd3      	ldrb	r3, [r2, r3]
 8002628:	f040 81e6 	bne.w	80029f8 <UART_SetConfig+0x454>
    switch (clocksource)
 800262c:	2b08      	cmp	r3, #8
 800262e:	f000 81ba 	beq.w	80029a6 <UART_SetConfig+0x402>
 8002632:	f200 816e 	bhi.w	8002912 <UART_SetConfig+0x36e>
 8002636:	2b01      	cmp	r3, #1
 8002638:	f000 8197 	beq.w	800296a <UART_SetConfig+0x3c6>
 800263c:	f0c0 817d 	bcc.w	800293a <UART_SetConfig+0x396>
 8002640:	2b04      	cmp	r3, #4
 8002642:	f000 8195 	beq.w	8002970 <UART_SetConfig+0x3cc>
        ret = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 8002648:	2200      	movs	r2, #0
 800264a:	e186      	b.n	800295a <UART_SetConfig+0x3b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800264c:	4b95      	ldr	r3, [pc, #596]	; (80028a4 <UART_SetConfig+0x300>)
 800264e:	429d      	cmp	r5, r3
 8002650:	d108      	bne.n	8002664 <UART_SetConfig+0xc0>
 8002652:	4b92      	ldr	r3, [pc, #584]	; (800289c <UART_SetConfig+0x2f8>)
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	2b05      	cmp	r3, #5
 800265c:	f200 823e 	bhi.w	8002adc <UART_SetConfig+0x538>
 8002660:	4a91      	ldr	r2, [pc, #580]	; (80028a8 <UART_SetConfig+0x304>)
 8002662:	e7de      	b.n	8002622 <UART_SetConfig+0x7e>
 8002664:	4b91      	ldr	r3, [pc, #580]	; (80028ac <UART_SetConfig+0x308>)
 8002666:	429d      	cmp	r5, r3
 8002668:	d108      	bne.n	800267c <UART_SetConfig+0xd8>
 800266a:	4b8c      	ldr	r3, [pc, #560]	; (800289c <UART_SetConfig+0x2f8>)
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	2b05      	cmp	r3, #5
 8002674:	f200 8232 	bhi.w	8002adc <UART_SetConfig+0x538>
 8002678:	4a8d      	ldr	r2, [pc, #564]	; (80028b0 <UART_SetConfig+0x30c>)
 800267a:	e7d2      	b.n	8002622 <UART_SetConfig+0x7e>
 800267c:	4b8d      	ldr	r3, [pc, #564]	; (80028b4 <UART_SetConfig+0x310>)
 800267e:	429d      	cmp	r5, r3
 8002680:	d108      	bne.n	8002694 <UART_SetConfig+0xf0>
 8002682:	4b86      	ldr	r3, [pc, #536]	; (800289c <UART_SetConfig+0x2f8>)
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	2b05      	cmp	r3, #5
 800268c:	f200 8226 	bhi.w	8002adc <UART_SetConfig+0x538>
 8002690:	4a89      	ldr	r2, [pc, #548]	; (80028b8 <UART_SetConfig+0x314>)
 8002692:	e7c6      	b.n	8002622 <UART_SetConfig+0x7e>
 8002694:	4b89      	ldr	r3, [pc, #548]	; (80028bc <UART_SetConfig+0x318>)
 8002696:	429d      	cmp	r5, r3
 8002698:	d108      	bne.n	80026ac <UART_SetConfig+0x108>
 800269a:	4b80      	ldr	r3, [pc, #512]	; (800289c <UART_SetConfig+0x2f8>)
 800269c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	f200 821a 	bhi.w	8002adc <UART_SetConfig+0x538>
 80026a8:	4a85      	ldr	r2, [pc, #532]	; (80028c0 <UART_SetConfig+0x31c>)
 80026aa:	e7ba      	b.n	8002622 <UART_SetConfig+0x7e>
 80026ac:	4b85      	ldr	r3, [pc, #532]	; (80028c4 <UART_SetConfig+0x320>)
 80026ae:	429d      	cmp	r5, r3
 80026b0:	d108      	bne.n	80026c4 <UART_SetConfig+0x120>
 80026b2:	4b7a      	ldr	r3, [pc, #488]	; (800289c <UART_SetConfig+0x2f8>)
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ba:	2b28      	cmp	r3, #40	; 0x28
 80026bc:	f200 820e 	bhi.w	8002adc <UART_SetConfig+0x538>
 80026c0:	4a81      	ldr	r2, [pc, #516]	; (80028c8 <UART_SetConfig+0x324>)
 80026c2:	e7ae      	b.n	8002622 <UART_SetConfig+0x7e>
 80026c4:	4b81      	ldr	r3, [pc, #516]	; (80028cc <UART_SetConfig+0x328>)
 80026c6:	429d      	cmp	r5, r3
 80026c8:	d108      	bne.n	80026dc <UART_SetConfig+0x138>
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <UART_SetConfig+0x2f8>)
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	f200 8202 	bhi.w	8002adc <UART_SetConfig+0x538>
 80026d8:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <UART_SetConfig+0x32c>)
 80026da:	e7a2      	b.n	8002622 <UART_SetConfig+0x7e>
 80026dc:	4b7d      	ldr	r3, [pc, #500]	; (80028d4 <UART_SetConfig+0x330>)
 80026de:	429d      	cmp	r5, r3
 80026e0:	d108      	bne.n	80026f4 <UART_SetConfig+0x150>
 80026e2:	4b6e      	ldr	r3, [pc, #440]	; (800289c <UART_SetConfig+0x2f8>)
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	f200 81f6 	bhi.w	8002adc <UART_SetConfig+0x538>
 80026f0:	4a79      	ldr	r2, [pc, #484]	; (80028d8 <UART_SetConfig+0x334>)
 80026f2:	e796      	b.n	8002622 <UART_SetConfig+0x7e>
 80026f4:	4b67      	ldr	r3, [pc, #412]	; (8002894 <UART_SetConfig+0x2f0>)
 80026f6:	429d      	cmp	r5, r3
 80026f8:	f040 81f0 	bne.w	8002adc <UART_SetConfig+0x538>
 80026fc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002700:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002702:	f002 0207 	and.w	r2, r2, #7
 8002706:	2a05      	cmp	r2, #5
 8002708:	d901      	bls.n	800270e <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
  return ret;
 800270c:	e080      	b.n	8002810 <UART_SetConfig+0x26c>
 800270e:	4973      	ldr	r1, [pc, #460]	; (80028dc <UART_SetConfig+0x338>)
 8002710:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 8002712:	2d08      	cmp	r5, #8
 8002714:	d02f      	beq.n	8002776 <UART_SetConfig+0x1d2>
 8002716:	d808      	bhi.n	800272a <UART_SetConfig+0x186>
 8002718:	2d02      	cmp	r5, #2
 800271a:	d021      	beq.n	8002760 <UART_SetConfig+0x1bc>
 800271c:	2d04      	cmp	r5, #4
 800271e:	d1f4      	bne.n	800270a <UART_SetConfig+0x166>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002720:	4668      	mov	r0, sp
 8002722:	f7ff fb4f 	bl	8001dc4 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8002726:	9801      	ldr	r0, [sp, #4]
      break;
 8002728:	e01c      	b.n	8002764 <UART_SetConfig+0x1c0>
    switch (clocksource)
 800272a:	2d20      	cmp	r5, #32
 800272c:	d005      	beq.n	800273a <UART_SetConfig+0x196>
 800272e:	2d40      	cmp	r5, #64	; 0x40
 8002730:	d01c      	beq.n	800276c <UART_SetConfig+0x1c8>
 8002732:	2d10      	cmp	r5, #16
 8002734:	d1e9      	bne.n	800270a <UART_SetConfig+0x166>
      tmpreg =(uint32_t) CSI_VALUE;
 8002736:	486a      	ldr	r0, [pc, #424]	; (80028e0 <UART_SetConfig+0x33c>)
 8002738:	e001      	b.n	800273e <UART_SetConfig+0x19a>
      tmpreg = (uint32_t) LSE_VALUE;
 800273a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800273e:	6866      	ldr	r6, [r4, #4]
 8002740:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002744:	4283      	cmp	r3, r0
 8002746:	d8e0      	bhi.n	800270a <UART_SetConfig+0x166>
 8002748:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 800274c:	d8dd      	bhi.n	800270a <UART_SetConfig+0x166>
        switch (clocksource)
 800274e:	2d08      	cmp	r5, #8
 8002750:	d078      	beq.n	8002844 <UART_SetConfig+0x2a0>
 8002752:	d81a      	bhi.n	800278a <UART_SetConfig+0x1e6>
 8002754:	2d02      	cmp	r5, #2
 8002756:	d038      	beq.n	80027ca <UART_SetConfig+0x226>
 8002758:	2d04      	cmp	r5, #4
 800275a:	d05d      	beq.n	8002818 <UART_SetConfig+0x274>
          ret = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e04f      	b.n	8002800 <UART_SetConfig+0x25c>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8002760:	f7ff fb1a 	bl	8001d98 <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 8002764:	2800      	cmp	r0, #0
 8002766:	d1ea      	bne.n	800273e <UART_SetConfig+0x19a>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002768:	2300      	movs	r3, #0
      break;
 800276a:	e051      	b.n	8002810 <UART_SetConfig+0x26c>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800276c:	a803      	add	r0, sp, #12
 800276e:	f7ff fbc9 	bl	8001f04 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8002772:	9804      	ldr	r0, [sp, #16]
      break;
 8002774:	e7f6      	b.n	8002764 <UART_SetConfig+0x1c0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	485a      	ldr	r0, [pc, #360]	; (80028e4 <UART_SetConfig+0x340>)
 800277a:	f012 0f20 	tst.w	r2, #32
 800277e:	d0de      	beq.n	800273e <UART_SetConfig+0x19a>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002786:	40d8      	lsrs	r0, r3
 8002788:	e7d9      	b.n	800273e <UART_SetConfig+0x19a>
        switch (clocksource)
 800278a:	2d20      	cmp	r5, #32
 800278c:	f000 80b0 	beq.w	80028f0 <UART_SetConfig+0x34c>
 8002790:	2d40      	cmp	r5, #64	; 0x40
 8002792:	d04c      	beq.n	800282e <UART_SetConfig+0x28a>
 8002794:	2d10      	cmp	r5, #16
 8002796:	d1e1      	bne.n	800275c <UART_SetConfig+0x1b8>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <UART_SetConfig+0x344>)
 800279a:	2100      	movs	r1, #0
 800279c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800279e:	4850      	ldr	r0, [pc, #320]	; (80028e0 <UART_SetConfig+0x33c>)
 80027a0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80027a4:	2300      	movs	r3, #0
 80027a6:	f7fd fd97 	bl	80002d8 <__aeabi_uldivmod>
 80027aa:	4632      	mov	r2, r6
 80027ac:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80027b0:	2300      	movs	r3, #0
 80027b2:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80027b6:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80027ba:	0870      	lsrs	r0, r6, #1
 80027bc:	eb18 0500 	adds.w	r5, r8, r0
 80027c0:	f149 0600 	adc.w	r6, r9, #0
 80027c4:	4628      	mov	r0, r5
 80027c6:	4631      	mov	r1, r6
 80027c8:	e017      	b.n	80027fa <UART_SetConfig+0x256>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80027ca:	f7ff fae5 	bl	8001d98 <HAL_RCCEx_GetD3PCLK1Freq>
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <UART_SetConfig+0x344>)
 80027d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027d2:	6865      	ldr	r5, [r4, #4]
 80027d4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80027d8:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80027da:	2100      	movs	r1, #0
 80027dc:	f7fd fd7c 	bl	80002d8 <__aeabi_uldivmod>
 80027e0:	462a      	mov	r2, r5
 80027e2:	020f      	lsls	r7, r1, #8
 80027e4:	2300      	movs	r3, #0
 80027e6:	0206      	lsls	r6, r0, #8
 80027e8:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80027ec:	0868      	lsrs	r0, r5, #1
 80027ee:	eb16 0800 	adds.w	r8, r6, r0
 80027f2:	f147 0900 	adc.w	r9, r7, #0
 80027f6:	4640      	mov	r0, r8
 80027f8:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80027fa:	f7fd fd6d 	bl	80002d8 <__aeabi_uldivmod>
          break;
 80027fe:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002800:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002804:	4a39      	ldr	r2, [pc, #228]	; (80028ec <UART_SetConfig+0x348>)
 8002806:	4291      	cmp	r1, r2
 8002808:	f63f af7f 	bhi.w	800270a <UART_SetConfig+0x166>
           huart->Instance->BRR = tmpreg;
 800280c:	6822      	ldr	r2, [r4, #0]
 800280e:	60d0      	str	r0, [r2, #12]
}
 8002810:	4618      	mov	r0, r3
 8002812:	b007      	add	sp, #28
 8002814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002818:	4668      	mov	r0, sp
 800281a:	f7ff fad3 	bl	8001dc4 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800281e:	4b32      	ldr	r3, [pc, #200]	; (80028e8 <UART_SetConfig+0x344>)
 8002820:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002822:	6865      	ldr	r5, [r4, #4]
 8002824:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002828:	2300      	movs	r3, #0
 800282a:	9801      	ldr	r0, [sp, #4]
 800282c:	e7d5      	b.n	80027da <UART_SetConfig+0x236>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800282e:	a803      	add	r0, sp, #12
 8002830:	f7ff fb68 	bl	8001f04 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002834:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <UART_SetConfig+0x344>)
 8002836:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002838:	6865      	ldr	r5, [r4, #4]
 800283a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800283e:	2300      	movs	r3, #0
 8002840:	9804      	ldr	r0, [sp, #16]
 8002842:	e7ca      	b.n	80027da <UART_SetConfig+0x236>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002844:	4915      	ldr	r1, [pc, #84]	; (800289c <UART_SetConfig+0x2f8>)
 8002846:	0877      	lsrs	r7, r6, #1
 8002848:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800284a:	680d      	ldr	r5, [r1, #0]
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <UART_SetConfig+0x344>)
 800284e:	f015 0520 	ands.w	r5, r5, #32
 8002852:	d017      	beq.n	8002884 <UART_SetConfig+0x2e0>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002854:	6809      	ldr	r1, [r1, #0]
 8002856:	4823      	ldr	r0, [pc, #140]	; (80028e4 <UART_SetConfig+0x340>)
 8002858:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800285c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002860:	2300      	movs	r3, #0
 8002862:	40c8      	lsrs	r0, r1
 8002864:	2100      	movs	r1, #0
 8002866:	f7fd fd37 	bl	80002d8 <__aeabi_uldivmod>
 800286a:	4632      	mov	r2, r6
 800286c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002870:	2300      	movs	r3, #0
 8002872:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002876:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800287a:	eb18 0007 	adds.w	r0, r8, r7
 800287e:	f149 0100 	adc.w	r1, r9, #0
 8002882:	e7ba      	b.n	80027fa <UART_SetConfig+0x256>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002884:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002888:	2300      	movs	r3, #0
 800288a:	4816      	ldr	r0, [pc, #88]	; (80028e4 <UART_SetConfig+0x340>)
 800288c:	e7ea      	b.n	8002864 <UART_SetConfig+0x2c0>
 800288e:	bf00      	nop
 8002890:	cfff69f3 	.word	0xcfff69f3
 8002894:	58000c00 	.word	0x58000c00
 8002898:	40011000 	.word	0x40011000
 800289c:	58024400 	.word	0x58024400
 80028a0:	080035a4 	.word	0x080035a4
 80028a4:	40004400 	.word	0x40004400
 80028a8:	080035cd 	.word	0x080035cd
 80028ac:	40004800 	.word	0x40004800
 80028b0:	080035cd 	.word	0x080035cd
 80028b4:	40004c00 	.word	0x40004c00
 80028b8:	080035cd 	.word	0x080035cd
 80028bc:	40005000 	.word	0x40005000
 80028c0:	080035cd 	.word	0x080035cd
 80028c4:	40011400 	.word	0x40011400
 80028c8:	080035a4 	.word	0x080035a4
 80028cc:	40007800 	.word	0x40007800
 80028d0:	080035cd 	.word	0x080035cd
 80028d4:	40007c00 	.word	0x40007c00
 80028d8:	080035cd 	.word	0x080035cd
 80028dc:	080035d3 	.word	0x080035d3
 80028e0:	003d0900 	.word	0x003d0900
 80028e4:	03d09000 	.word	0x03d09000
 80028e8:	080035da 	.word	0x080035da
 80028ec:	000ffcff 	.word	0x000ffcff
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80028f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028f2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 80028f6:	4b7c      	ldr	r3, [pc, #496]	; (8002ae8 <UART_SetConfig+0x544>)
 80028f8:	0870      	lsrs	r0, r6, #1
 80028fa:	2100      	movs	r1, #0
 80028fc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002900:	4632      	mov	r2, r6
 8002902:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002906:	fbb5 f5f3 	udiv	r5, r5, r3
 800290a:	2300      	movs	r3, #0
 800290c:	fbe5 0106 	umlal	r0, r1, r5, r6
 8002910:	e773      	b.n	80027fa <UART_SetConfig+0x256>
    switch (clocksource)
 8002912:	2b20      	cmp	r3, #32
 8002914:	d068      	beq.n	80029e8 <UART_SetConfig+0x444>
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d03b      	beq.n	8002992 <UART_SetConfig+0x3ee>
 800291a:	2b10      	cmp	r3, #16
 800291c:	f47f ae93 	bne.w	8002646 <UART_SetConfig+0xa2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002920:	4b71      	ldr	r3, [pc, #452]	; (8002ae8 <UART_SetConfig+0x544>)
 8002922:	4a72      	ldr	r2, [pc, #456]	; (8002aec <UART_SetConfig+0x548>)
 8002924:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002928:	6860      	ldr	r0, [r4, #4]
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	0842      	lsrs	r2, r0, #1
 8002930:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002934:	fbb2 f2f0 	udiv	r2, r2, r0
 8002938:	e00d      	b.n	8002956 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800293a:	f7fe fcc5 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800293e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002940:	4a69      	ldr	r2, [pc, #420]	; (8002ae8 <UART_SetConfig+0x544>)
 8002942:	6863      	ldr	r3, [r4, #4]
 8002944:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002948:	fbb0 f0f2 	udiv	r0, r0, r2
 800294c:	085a      	lsrs	r2, r3, #1
 800294e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002952:	fbb2 f2f3 	udiv	r2, r2, r3
 8002956:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8002958:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 800295a:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800295e:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8002962:	6820      	ldr	r0, [r4, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	60c2      	str	r2, [r0, #12]
 8002968:	e752      	b.n	8002810 <UART_SetConfig+0x26c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800296a:	f7fe fcc3 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 800296e:	e7e6      	b.n	800293e <UART_SetConfig+0x39a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002970:	4668      	mov	r0, sp
 8002972:	f7ff fa27 	bl	8001dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <UART_SetConfig+0x544>)
 8002978:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800297a:	6861      	ldr	r1, [r4, #4]
 800297c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002980:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002982:	fbb3 f3f2 	udiv	r3, r3, r2
 8002986:	084a      	lsrs	r2, r1, #1
 8002988:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800298c:	fbb2 f2f1 	udiv	r2, r2, r1
 8002990:	e7e1      	b.n	8002956 <UART_SetConfig+0x3b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002992:	a803      	add	r0, sp, #12
 8002994:	f7ff fab6 	bl	8001f04 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <UART_SetConfig+0x544>)
 800299a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800299c:	6861      	ldr	r1, [r4, #4]
 800299e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029a2:	9b04      	ldr	r3, [sp, #16]
 80029a4:	e7ed      	b.n	8002982 <UART_SetConfig+0x3de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029a6:	4a52      	ldr	r2, [pc, #328]	; (8002af0 <UART_SetConfig+0x54c>)
 80029a8:	4852      	ldr	r0, [pc, #328]	; (8002af4 <UART_SetConfig+0x550>)
 80029aa:	6813      	ldr	r3, [r2, #0]
 80029ac:	6865      	ldr	r5, [r4, #4]
 80029ae:	f013 0320 	ands.w	r3, r3, #32
 80029b2:	4e4d      	ldr	r6, [pc, #308]	; (8002ae8 <UART_SetConfig+0x544>)
 80029b4:	d00d      	beq.n	80029d2 <UART_SetConfig+0x42e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80029bc:	40d0      	lsrs	r0, r2
 80029be:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 80029c2:	fbb0 f0f2 	udiv	r0, r0, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80029c6:	086a      	lsrs	r2, r5, #1
 80029c8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80029cc:	fbb2 f2f5 	udiv	r2, r2, r5
 80029d0:	e7c1      	b.n	8002956 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80029d2:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 80029d6:	fbb0 f0f2 	udiv	r0, r0, r2
 80029da:	086a      	lsrs	r2, r5, #1
 80029dc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80029e0:	fbb2 f2f5 	udiv	r2, r2, r5
 80029e4:	b292      	uxth	r2, r2
 80029e6:	e7b8      	b.n	800295a <UART_SetConfig+0x3b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80029e8:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <UART_SetConfig+0x544>)
 80029ea:	6865      	ldr	r5, [r4, #4]
 80029ec:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80029f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80029f4:	b280      	uxth	r0, r0
 80029f6:	e7e6      	b.n	80029c6 <UART_SetConfig+0x422>
    switch (clocksource)
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d046      	beq.n	8002a8a <UART_SetConfig+0x4e6>
 80029fc:	d818      	bhi.n	8002a30 <UART_SetConfig+0x48c>
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d035      	beq.n	8002a6e <UART_SetConfig+0x4ca>
 8002a02:	d324      	bcc.n	8002a4e <UART_SetConfig+0x4aa>
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	f47f ae80 	bne.w	800270a <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002a0a:	4668      	mov	r0, sp
 8002a0c:	f7ff f9da 	bl	8001dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002a10:	4b35      	ldr	r3, [pc, #212]	; (8002ae8 <UART_SetConfig+0x544>)
 8002a12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a14:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002a18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002a1c:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002a1e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a22:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	60cb      	str	r3, [r1, #12]
 8002a2e:	e69b      	b.n	8002768 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d04c      	beq.n	8002ace <UART_SetConfig+0x52a>
 8002a34:	2b40      	cmp	r3, #64	; 0x40
 8002a36:	d01d      	beq.n	8002a74 <UART_SetConfig+0x4d0>
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	f47f ae66 	bne.w	800270a <UART_SetConfig+0x166>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002a3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <UART_SetConfig+0x544>)
 8002a40:	6862      	ldr	r2, [r4, #4]
 8002a42:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002a46:	4b29      	ldr	r3, [pc, #164]	; (8002aec <UART_SetConfig+0x548>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002a48:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a4c:	e008      	b.n	8002a60 <UART_SetConfig+0x4bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002a4e:	f7fe fc3b 	bl	80012c8 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002a52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a54:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <UART_SetConfig+0x544>)
 8002a56:	6862      	ldr	r2, [r4, #4]
 8002a58:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002a5c:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002a60:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002a64:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	60eb      	str	r3, [r5, #12]
 8002a6c:	e67c      	b.n	8002768 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002a6e:	f7fe fc41 	bl	80012f4 <HAL_RCC_GetPCLK2Freq>
 8002a72:	e7ee      	b.n	8002a52 <UART_SetConfig+0x4ae>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002a74:	a803      	add	r0, sp, #12
 8002a76:	f7ff fa45 	bl	8001f04 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <UART_SetConfig+0x544>)
 8002a7c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a7e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002a82:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8002a86:	9b04      	ldr	r3, [sp, #16]
 8002a88:	e7c9      	b.n	8002a1e <UART_SetConfig+0x47a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a8a:	4e19      	ldr	r6, [pc, #100]	; (8002af0 <UART_SetConfig+0x54c>)
 8002a8c:	6860      	ldr	r0, [r4, #4]
 8002a8e:	6833      	ldr	r3, [r6, #0]
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <UART_SetConfig+0x550>)
 8002a92:	f013 0320 	ands.w	r3, r3, #32
 8002a96:	4c14      	ldr	r4, [pc, #80]	; (8002ae8 <UART_SetConfig+0x544>)
 8002a98:	d00e      	beq.n	8002ab8 <UART_SetConfig+0x514>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002a9a:	6833      	ldr	r3, [r6, #0]
 8002a9c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002aa0:	40da      	lsrs	r2, r3
 8002aa2:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 8002aa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aaa:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002aae:	fbb2 f2f0 	udiv	r2, r2, r0
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	60ea      	str	r2, [r5, #12]
 8002ab6:	e657      	b.n	8002768 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002ab8:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8002abc:	fbb2 f2f1 	udiv	r2, r2, r1
 8002ac0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002ac4:	fbb2 f2f0 	udiv	r2, r2, r0
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	60ea      	str	r2, [r5, #12]
 8002acc:	e6a0      	b.n	8002810 <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <UART_SetConfig+0x544>)
 8002ad0:	6862      	ldr	r2, [r4, #4]
 8002ad2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ada:	e7b5      	b.n	8002a48 <UART_SetConfig+0x4a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002adc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002ae0:	f47f ae13 	bne.w	800270a <UART_SetConfig+0x166>
 8002ae4:	e5af      	b.n	8002646 <UART_SetConfig+0xa2>
 8002ae6:	bf00      	nop
 8002ae8:	080035da 	.word	0x080035da
 8002aec:	003d0900 	.word	0x003d0900
 8002af0:	58024400 	.word	0x58024400
 8002af4:	03d09000 	.word	0x03d09000

08002af8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002af8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002afa:	07da      	lsls	r2, r3, #31
{
 8002afc:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002afe:	d506      	bpl.n	8002b0e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b00:	6801      	ldr	r1, [r0, #0]
 8002b02:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002b04:	684a      	ldr	r2, [r1, #4]
 8002b06:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002b0a:	4322      	orrs	r2, r4
 8002b0c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b0e:	079c      	lsls	r4, r3, #30
 8002b10:	d506      	bpl.n	8002b20 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b12:	6801      	ldr	r1, [r0, #0]
 8002b14:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002b16:	684a      	ldr	r2, [r1, #4]
 8002b18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b1c:	4322      	orrs	r2, r4
 8002b1e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b20:	0759      	lsls	r1, r3, #29
 8002b22:	d506      	bpl.n	8002b32 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b24:	6801      	ldr	r1, [r0, #0]
 8002b26:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002b28:	684a      	ldr	r2, [r1, #4]
 8002b2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b2e:	4322      	orrs	r2, r4
 8002b30:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b32:	071a      	lsls	r2, r3, #28
 8002b34:	d506      	bpl.n	8002b44 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b36:	6801      	ldr	r1, [r0, #0]
 8002b38:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b3a:	684a      	ldr	r2, [r1, #4]
 8002b3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b40:	4322      	orrs	r2, r4
 8002b42:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b44:	06dc      	lsls	r4, r3, #27
 8002b46:	d506      	bpl.n	8002b56 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b48:	6801      	ldr	r1, [r0, #0]
 8002b4a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002b4c:	688a      	ldr	r2, [r1, #8]
 8002b4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b52:	4322      	orrs	r2, r4
 8002b54:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b56:	0699      	lsls	r1, r3, #26
 8002b58:	d506      	bpl.n	8002b68 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b5a:	6801      	ldr	r1, [r0, #0]
 8002b5c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002b5e:	688a      	ldr	r2, [r1, #8]
 8002b60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b64:	4322      	orrs	r2, r4
 8002b66:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b68:	065a      	lsls	r2, r3, #25
 8002b6a:	d510      	bpl.n	8002b8e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b6c:	6801      	ldr	r1, [r0, #0]
 8002b6e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002b70:	684a      	ldr	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b72:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b76:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002b7a:	ea42 0204 	orr.w	r2, r2, r4
 8002b7e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b80:	d105      	bne.n	8002b8e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b82:	684a      	ldr	r2, [r1, #4]
 8002b84:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002b86:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002b8a:	4322      	orrs	r2, r4
 8002b8c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b8e:	061b      	lsls	r3, r3, #24
 8002b90:	d506      	bpl.n	8002ba0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b92:	6802      	ldr	r2, [r0, #0]
 8002b94:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8002b96:	6853      	ldr	r3, [r2, #4]
 8002b98:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	6053      	str	r3, [r2, #4]
 8002ba0:	bd10      	pop	{r4, pc}

08002ba2 <UART_WaitOnFlagUntilTimeout>:
{
 8002ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ba6:	9d06      	ldr	r5, [sp, #24]
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460f      	mov	r7, r1
 8002bac:	4616      	mov	r6, r2
 8002bae:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bb0:	6821      	ldr	r1, [r4, #0]
 8002bb2:	69ca      	ldr	r2, [r1, #28]
 8002bb4:	ea37 0302 	bics.w	r3, r7, r2
 8002bb8:	bf0c      	ite	eq
 8002bba:	2201      	moveq	r2, #1
 8002bbc:	2200      	movne	r2, #0
 8002bbe:	42b2      	cmp	r2, r6
 8002bc0:	d002      	beq.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002bc2:	2000      	movs	r0, #0
}
 8002bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002bc8:	1c6b      	adds	r3, r5, #1
 8002bca:	d0f2      	beq.n	8002bb2 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002bcc:	b99d      	cbnz	r5, 8002bf6 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bce:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002bd0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002bd8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002be2:	2320      	movs	r3, #32
 8002be4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8002be8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 8002bec:	2300      	movs	r3, #0
 8002bee:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 8002bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002bf6:	f7fd fd37 	bl	8000668 <HAL_GetTick>
 8002bfa:	eba0 0008 	sub.w	r0, r0, r8
 8002bfe:	4285      	cmp	r5, r0
 8002c00:	d2d6      	bcs.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0xe>
 8002c02:	e7e4      	b.n	8002bce <UART_WaitOnFlagUntilTimeout+0x2c>

08002c04 <UART_CheckIdleState>:
{
 8002c04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c06:	2600      	movs	r6, #0
{
 8002c08:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002c0c:	f7fd fd2c 	bl	8000668 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c10:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002c12:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	071a      	lsls	r2, r3, #28
 8002c18:	d417      	bmi.n	8002c4a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	075b      	lsls	r3, r3, #29
 8002c20:	d50a      	bpl.n	8002c38 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c26:	2200      	movs	r2, #0
 8002c28:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	462b      	mov	r3, r5
 8002c32:	f7ff ffb6 	bl	8002ba2 <UART_WaitOnFlagUntilTimeout>
 8002c36:	b9a0      	cbnz	r0, 8002c62 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002c38:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002c3a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002c3c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8002c40:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c44:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 8002c48:	e00c      	b.n	8002c64 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c4a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c4e:	4632      	mov	r2, r6
 8002c50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	4603      	mov	r3, r0
 8002c58:	4620      	mov	r0, r4
 8002c5a:	f7ff ffa2 	bl	8002ba2 <UART_WaitOnFlagUntilTimeout>
 8002c5e:	2800      	cmp	r0, #0
 8002c60:	d0db      	beq.n	8002c1a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002c62:	2003      	movs	r0, #3
}
 8002c64:	b002      	add	sp, #8
 8002c66:	bd70      	pop	{r4, r5, r6, pc}

08002c68 <HAL_UART_Init>:
{
 8002c68:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	b360      	cbz	r0, 8002cc8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c6e:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8002c72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c76:	b91b      	cbnz	r3, 8002c80 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c78:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8002c7c:	f000 fb96 	bl	80033ac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c80:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c82:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c84:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002c86:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c92:	f7ff fc87 	bl	80025a4 <UART_SetConfig>
 8002c96:	2801      	cmp	r0, #1
 8002c98:	d016      	beq.n	8002cc8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c9c:	b113      	cbz	r3, 8002ca4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	f7ff ff2a 	bl	8002af8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002ca6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cb6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
}
 8002cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002cc2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002cc4:	f7ff bf9e 	b.w	8002c04 <UART_CheckIdleState>
}
 8002cc8:	2001      	movs	r0, #1
 8002cca:	bd10      	pop	{r4, pc}

08002ccc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ccc:	4770      	bx	lr

08002cce <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cce:	b084      	sub	sp, #16
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	ad05      	add	r5, sp, #20
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d127      	bne.n	8002d30 <USB_CoreInit+0x62>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);		
 8002ce0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce6:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ce8:	68c3      	ldr	r3, [r0, #12]
 8002cea:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cf2:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cf4:	68c3      	ldr	r3, [r0, #12]
 8002cf6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002cfa:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8002cfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d103      	bne.n	8002d0a <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d02:	68c3      	ldr	r3, [r0, #12]
 8002d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d08:	60c3      	str	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f000 f914 	bl	8002f38 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 8002d10:	9b08      	ldr	r3, [sp, #32]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <USB_CoreInit+0x58>
  {
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
 8002d16:	68a3      	ldr	r3, [r4, #8]
 8002d18:	f043 030c 	orr.w	r3, r3, #12
 8002d1c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d1e:	68a3      	ldr	r3, [r4, #8]
 8002d20:	f043 0320 	orr.w	r3, r3, #32
 8002d24:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002d26:	2000      	movs	r0, #0
 8002d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d2c:	b004      	add	sp, #16
 8002d2e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d30:	68c3      	ldr	r3, [r0, #12]
 8002d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d36:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002d38:	f000 f8fe 	bl	8002f38 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d40:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d42:	e7e5      	b.n	8002d10 <USB_CoreInit+0x42>

08002d44 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d44:	6883      	ldr	r3, [r0, #8]
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	4770      	bx	lr

08002d50 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002d50:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002d52:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002d54:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002d56:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002d5a:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8002d5c:	d108      	bne.n	8002d70 <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002d5e:	68c3      	ldr	r3, [r0, #12]
 8002d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d64:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8002d66:	2032      	movs	r0, #50	; 0x32
 8002d68:	f7fd fc84 	bl	8000674 <HAL_Delay>
  
  return HAL_OK;
}
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002d70:	2900      	cmp	r1, #0
 8002d72:	d1f8      	bne.n	8002d66 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002d74:	68c3      	ldr	r3, [r0, #12]
 8002d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d7a:	60c3      	str	r3, [r0, #12]
 8002d7c:	e7f3      	b.n	8002d66 <USB_SetCurrentMode+0x16>
	...

08002d80 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d80:	b084      	sub	sp, #16
 8002d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	a807      	add	r0, sp, #28
 8002d8a:	4688      	mov	r8, r1
 8002d8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8002d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d98:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002d9a:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 8002d9c:	b95e      	cbnz	r6, 8002db6 <USB_DevInit+0x36>
  {
    /*Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 8002d9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002da0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002da4:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dac:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db4:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 8002db6:	2300      	movs	r3, #0

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002db8:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 8002dbc:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dc0:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002dc4:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8002dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d158      	bne.n	8002e80 <USB_DevInit+0x100>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002dce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002dd0:	b919      	cbnz	r1, 8002dda <USB_DevInit+0x5a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f000 f89c 	bl	8002f10 <USB_SetDevSpeed>
 8002dd8:	e003      	b.n	8002de2 <USB_DevInit+0x62>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f000 f897 	bl	8002f10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 8002de2:	2110      	movs	r1, #16
 8002de4:	4620      	mov	r0, r4
 8002de6:	f000 f871 	bl	8002ecc <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002dea:	4620      	mov	r0, r4
 8002dec:	f000 f880 	bl	8002ef0 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8002df0:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295
  
  for (i = 0; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002df6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 8002dfa:	612b      	str	r3, [r5, #16]
 8002dfc:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 8002dfe:	616b      	str	r3, [r5, #20]
    {
      USBx_INEP(i)->DIEPCTL = 0;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0;
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8002e00:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002e04:	61aa      	str	r2, [r5, #24]
 8002e06:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 8002e0a:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8002e0c:	4543      	cmp	r3, r8
 8002e0e:	d139      	bne.n	8002e84 <USB_DevInit+0x104>
 8002e10:	2100      	movs	r1, #0
 8002e12:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
  
  for (i = 0; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002e16:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0;
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8002e1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002e1e:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 8002e20:	428b      	cmp	r3, r1
 8002e22:	d13d      	bne.n	8002ea0 <USB_DevInit+0x120>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e24:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1)
 8002e26:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e2c:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8002e2e:	d106      	bne.n	8002e3e <USB_DevInit+0xbe>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_8 | USB_OTG_DTHRCTL_RXTHRLEN_8);
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <USB_DevInit+0x140>)
 8002e32:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN | 0x08000000);
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <USB_DevInit+0x144>)
 8002e36:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002e3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 8002e42:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002e46:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002e48:	b91f      	cbnz	r7, 8002e52 <USB_DevInit+0xd2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002e4a:	69a3      	ldr	r3, [r4, #24]
 8002e4c:	f043 0310 	orr.w	r3, r3, #16
 8002e50:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 8002e52:	69a2      	ldr	r2, [r4, #24]
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <USB_DevInit+0x148>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e5c:	b11b      	cbz	r3, 8002e66 <USB_DevInit+0xe6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e5e:	69a3      	ldr	r3, [r4, #24]
 8002e60:	f043 0308 	orr.w	r3, r3, #8
 8002e64:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002e66:	2e01      	cmp	r6, #1
 8002e68:	d105      	bne.n	8002e76 <USB_DevInit+0xf6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002e6a:	69a3      	ldr	r3, [r4, #24]
 8002e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	61a3      	str	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 8002e76:	2000      	movs	r0, #0
 8002e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e7c:	b004      	add	sp, #16
 8002e7e:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8002e80:	2103      	movs	r1, #3
 8002e82:	e7a6      	b.n	8002dd2 <USB_DevInit+0x52>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e84:	f8d2 c000 	ldr.w	ip, [r2]
 8002e88:	f1bc 0f00 	cmp.w	ip, #0
 8002e8c:	da06      	bge.n	8002e9c <USB_DevInit+0x11c>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002e8e:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 8002e90:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8002e92:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8002e94:	f8c2 e008 	str.w	lr, [r2, #8]
 8002e98:	3220      	adds	r2, #32
 8002e9a:	e7b7      	b.n	8002e0c <USB_DevInit+0x8c>
      USBx_INEP(i)->DIEPCTL = 0;
 8002e9c:	6011      	str	r1, [r2, #0]
 8002e9e:	e7f7      	b.n	8002e90 <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ea0:	f8d2 8000 	ldr.w	r8, [r2]
 8002ea4:	f1b8 0f00 	cmp.w	r8, #0
 8002ea8:	da07      	bge.n	8002eba <USB_DevInit+0x13a>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002eaa:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 8002eae:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8002eb0:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8002eb2:	f8c2 c008 	str.w	ip, [r2, #8]
 8002eb6:	3220      	adds	r2, #32
 8002eb8:	e7b2      	b.n	8002e20 <USB_DevInit+0xa0>
      USBx_OUTEP(i)->DOEPCTL = 0;
 8002eba:	6010      	str	r0, [r2, #0]
 8002ebc:	e7f7      	b.n	8002eae <USB_DevInit+0x12e>
 8002ebe:	bf00      	nop
 8002ec0:	02000400 	.word	0x02000400
 8002ec4:	08010003 	.word	0x08010003
 8002ec8:	803c3800 	.word	0x803c3800

08002ecc <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8002ecc:	0189      	lsls	r1, r1, #6
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <USB_FlushTxFifo+0x20>)
 8002ed0:	f041 0120 	orr.w	r1, r1, #32
 8002ed4:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8002ed6:	3a01      	subs	r2, #1
 8002ed8:	d005      	beq.n	8002ee6 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002eda:	6903      	ldr	r3, [r0, #16]
 8002edc:	f013 0320 	ands.w	r3, r3, #32
 8002ee0:	d1f9      	bne.n	8002ed6 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002ee6:	2003      	movs	r0, #3
}
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	00030d41 	.word	0x00030d41

08002ef0 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ef0:	2310      	movs	r3, #16
 8002ef2:	4a06      	ldr	r2, [pc, #24]	; (8002f0c <USB_FlushRxFifo+0x1c>)
 8002ef4:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002ef6:	3a01      	subs	r2, #1
 8002ef8:	d005      	beq.n	8002f06 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002efa:	6903      	ldr	r3, [r0, #16]
 8002efc:	f013 0310 	ands.w	r3, r3, #16
 8002f00:	d1f9      	bne.n	8002ef6 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 8002f02:	4618      	mov	r0, r3
 8002f04:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f06:	2003      	movs	r0, #3
}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	00030d41 	.word	0x00030d41

08002f10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8002f10:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002f14:	4319      	orrs	r1, r3
 8002f16:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	4770      	bx	lr

08002f1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8002f1e:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8002f20:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f7fd fba1 	bl	8000674 <HAL_Delay>
  
  return HAL_OK;  
}
 8002f32:	2000      	movs	r0, #0
 8002f34:	bd08      	pop	{r3, pc}
	...

08002f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002f3e:	2003      	movs	r0, #3
 8002f40:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8002f42:	6902      	ldr	r2, [r0, #16]
 8002f44:	2a00      	cmp	r2, #0
 8002f46:	daf8      	bge.n	8002f3a <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002f48:	6903      	ldr	r3, [r0, #16]
 8002f4a:	4a06      	ldr	r2, [pc, #24]	; (8002f64 <USB_CoreReset+0x2c>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8002f52:	3a01      	subs	r2, #1
 8002f54:	d0f3      	beq.n	8002f3e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002f56:	6903      	ldr	r3, [r0, #16]
 8002f58:	f013 0301 	ands.w	r3, r3, #1
 8002f5c:	d1f9      	bne.n	8002f52 <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8002f5e:	4618      	mov	r0, r3
}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	00030d41 	.word	0x00030d41

08002f68 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6c:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6e:	2214      	movs	r2, #20
 8002f70:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003118 <MX_GPIO_Init+0x1b0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f76:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002f78:	4d62      	ldr	r5, [pc, #392]	; (8003104 <MX_GPIO_Init+0x19c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7a:	f000 faff 	bl	800357c <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f7e:	4b62      	ldr	r3, [pc, #392]	; (8003108 <MX_GPIO_Init+0x1a0>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f80:	4640      	mov	r0, r8
 8002f82:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8a:	2400      	movs	r4, #0

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f8c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800311c <MX_GPIO_Init+0x1b4>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f90:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f94:	f042 0210 	orr.w	r2, r2, #16

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f9a:	260b      	movs	r6, #11
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fa4:	f002 0210 	and.w	r2, r2, #16
 8002fa8:	9200      	str	r2, [sp, #0]
 8002faa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fb0:	f042 0204 	orr.w	r2, r2, #4
 8002fb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002fb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fbc:	f002 0204 	and.w	r2, r2, #4
 8002fc0:	9201      	str	r2, [sp, #4]
 8002fc2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fcc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002fd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fd4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002fd8:	9202      	str	r2, [sp, #8]
 8002fda:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002fe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002fec:	f002 0201 	and.w	r2, r2, #1
 8002ff0:	9203      	str	r2, [sp, #12]
 8002ff2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ff8:	f042 0202 	orr.w	r2, r2, #2
 8002ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003004:	f002 0202 	and.w	r2, r2, #2
 8003008:	9204      	str	r2, [sp, #16]
 800300a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800300c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003010:	f042 0208 	orr.w	r2, r2, #8
 8003014:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003018:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800301c:	f002 0208 	and.w	r2, r2, #8
 8003020:	9205      	str	r2, [sp, #20]
 8003022:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800302c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003030:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303a:	9306      	str	r3, [sp, #24]
 800303c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800303e:	f7fd fcc9 	bl	80009d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8003042:	2200      	movs	r2, #0
 8003044:	4628      	mov	r0, r5
 8003046:	2140      	movs	r1, #64	; 0x40
 8003048:	f7fd fcc4 	bl	80009d4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800304c:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800304e:	a907      	add	r1, sp, #28
 8003050:	482e      	ldr	r0, [pc, #184]	; (800310c <MX_GPIO_Init+0x1a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003052:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003054:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003058:	f7fd fbd2 	bl	8000800 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <MX_GPIO_Init+0x1a8>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800305e:	a907      	add	r1, sp, #28
 8003060:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003062:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003066:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800306a:	f7fd fbc9 	bl	8000800 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800306e:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003070:	a907      	add	r1, sp, #28
 8003072:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003074:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003076:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800307a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800307c:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307e:	f7fd fbbf 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003082:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003084:	a907      	add	r1, sp, #28
 8003086:	4823      	ldr	r0, [pc, #140]	; (8003114 <MX_GPIO_Init+0x1ac>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003088:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308a:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003090:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f7fd fbb5 	bl	8000800 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003096:	a907      	add	r1, sp, #28
 8003098:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800309a:	f8cd 901c 	str.w	r9, [sp, #28]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309e:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030a8:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80030aa:	f7fd fba9 	bl	8000800 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80030ae:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b2:	a907      	add	r1, sp, #28
 80030b4:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b6:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80030ba:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	f7fd fb9e 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80030c4:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80030c6:	a907      	add	r1, sp, #28
 80030c8:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ca:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80030ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80030d4:	f7fd fb94 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80030d8:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030da:	a907      	add	r1, sp, #28
 80030dc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030de:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80030e0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80030e4:	f7fd fb8c 	bl	8000800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80030e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ec:	a907      	add	r1, sp, #28
 80030ee:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80030f2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80030f8:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030fa:	f7fd fb81 	bl	8000800 <HAL_GPIO_Init>

}
 80030fe:	b00c      	add	sp, #48	; 0x30
 8003100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003104:	58021800 	.word	0x58021800
 8003108:	58024400 	.word	0x58024400
 800310c:	58021000 	.word	0x58021000
 8003110:	11110000 	.word	0x11110000
 8003114:	58020000 	.word	0x58020000
 8003118:	58020400 	.word	0x58020400
 800311c:	58020800 	.word	0x58020800

08003120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003120:	b530      	push	{r4, r5, lr}
 8003122:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003124:	224c      	movs	r2, #76	; 0x4c
 8003126:	2100      	movs	r1, #0
 8003128:	a80a      	add	r0, sp, #40	; 0x28
 800312a:	f000 fa27 	bl	800357c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800312e:	2220      	movs	r2, #32
 8003130:	2100      	movs	r1, #0
 8003132:	a802      	add	r0, sp, #8
 8003134:	f000 fa22 	bl	800357c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003138:	22bc      	movs	r2, #188	; 0xbc
 800313a:	2100      	movs	r1, #0
 800313c:	a81d      	add	r0, sp, #116	; 0x74
 800313e:	f000 fa1d 	bl	800357c <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <SystemClock_Config+0xac>)
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	f022 0204 	bic.w	r2, r2, #4
 800314a:	60da      	str	r2, [r3, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800314c:	2200      	movs	r2, #0
 800314e:	9201      	str	r2, [sp, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800315a:	619a      	str	r2, [r3, #24]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003162:	9201      	str	r2, [sp, #4]
 8003164:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	0492      	lsls	r2, r2, #18
 800316a:	d5fc      	bpl.n	8003166 <SystemClock_Config+0x46>
    
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800316c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003170:	2218      	movs	r2, #24
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003172:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003174:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003176:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003178:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 24;
 800317a:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800317c:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800317e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003180:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003182:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003184:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003186:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003188:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800318a:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800318c:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800318e:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003190:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003192:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003194:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003196:	f7fd fcbd 	bl	8000b14 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800319a:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800319c:	4629      	mov	r1, r5
 800319e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80031a0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031a2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031a4:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80031a6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031a8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80031aa:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80031ac:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80031ae:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80031b0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031b2:	f7fd ff95 	bl	80010e0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <SystemClock_Config+0xb0>)
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b8:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031ba:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80031bc:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80031be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031c2:	933e      	str	r3, [sp, #248]	; 0xf8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c4:	f7fe f978 	bl	80014b8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80031c8:	b04d      	add	sp, #308	; 0x134
 80031ca:	bd30      	pop	{r4, r5, pc}
 80031cc:	58024800 	.word	0x58024800
 80031d0:	00040002 	.word	0x00040002

080031d4 <main>:
{
 80031d4:	b508      	push	{r3, lr}
  HAL_Init();
 80031d6:	f7fd fa2b 	bl	8000630 <HAL_Init>
  SystemClock_Config();
 80031da:	f7ff ffa1 	bl	8003120 <SystemClock_Config>
  MX_GPIO_Init();
 80031de:	f7ff fec3 	bl	8002f68 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80031e2:	f000 f8c1 	bl	8003368 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80031e6:	f000 f919 	bl	800341c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 80031ea:	f000 f881 	bl	80032f0 <MX_TIM7_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2027      	movs	r0, #39	; 0x27
 80031f2:	4611      	mov	r1, r2
 80031f4:	f7fd fa62 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80031f8:	2027      	movs	r0, #39	; 0x27
 80031fa:	f7fd fa97 	bl	800072c <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2037      	movs	r0, #55	; 0x37
 8003202:	4611      	mov	r1, r2
 8003204:	f7fd fa5a 	bl	80006bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003208:	2037      	movs	r0, #55	; 0x37
 800320a:	f7fd fa8f 	bl	800072c <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim7); //This code is for activate timer 7. Address should be write in ().
 800320e:	4802      	ldr	r0, [pc, #8]	; (8003218 <main+0x44>)
 8003210:	f7fe ff32 	bl	8002078 <HAL_TIM_Base_Start_IT>
 8003214:	e7fe      	b.n	8003214 <main+0x40>
 8003216:	bf00      	nop
 8003218:	20000030 	.word	0x20000030

0800321c <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if(htim->Instance == TIM7) //This code is activated every 1 sec. Update event
 800321c:	6802      	ldr	r2, [r0, #0]
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d103      	bne.n	800322c <HAL_TIM_PeriodElapsedCallback+0x10>
  {
	  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	4803      	ldr	r0, [pc, #12]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8003228:	f7fd bbd9 	b.w	80009de <HAL_GPIO_TogglePin>
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40001400 	.word	0x40001400
 8003234:	58020400 	.word	0x58020400

08003238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003238:	4770      	bx	lr
	...

0800323c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323c:	4b07      	ldr	r3, [pc, #28]	; (800325c <HAL_MspInit+0x20>)
{
 800323e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003240:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003244:	f042 0202 	orr.w	r2, r2, #2
 8003248:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800324c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003258:	b002      	add	sp, #8
 800325a:	4770      	bx	lr
 800325c:	58024400 	.word	0x58024400

08003260 <NMI_Handler>:
 8003260:	4770      	bx	lr

08003262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003262:	e7fe      	b.n	8003262 <HardFault_Handler>

08003264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003264:	e7fe      	b.n	8003264 <MemManage_Handler>

08003266 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003266:	e7fe      	b.n	8003266 <BusFault_Handler>

08003268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003268:	e7fe      	b.n	8003268 <UsageFault_Handler>

0800326a <SVC_Handler>:
 800326a:	4770      	bx	lr

0800326c <DebugMon_Handler>:
 800326c:	4770      	bx	lr

0800326e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800326e:	4770      	bx	lr

08003270 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003270:	f7fd b9ee 	b.w	8000650 <HAL_IncTick>

08003274 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003274:	4801      	ldr	r0, [pc, #4]	; (800327c <USART3_IRQHandler+0x8>)
 8003276:	f7ff b8b1 	b.w	80023dc <HAL_UART_IRQHandler>
 800327a:	bf00      	nop
 800327c:	20000070 	.word	0x20000070

08003280 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7); //Interrupt func.
 8003280:	4801      	ldr	r0, [pc, #4]	; (8003288 <TIM7_IRQHandler+0x8>)
 8003282:	f7fe bf09 	b.w	8002098 <HAL_TIM_IRQHandler>
 8003286:	bf00      	nop
 8003288:	20000030 	.word	0x20000030

0800328c <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800328c:	4914      	ldr	r1, [pc, #80]	; (80032e0 <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 800328e:	4815      	ldr	r0, [pc, #84]	; (80032e4 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003290:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8003298:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <SystemInit+0x5c>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 80032ac:	681c      	ldr	r4, [r3, #0]
 80032ae:	4020      	ands	r0, r4
 80032b0:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032b6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80032b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80032ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80032bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80032ce:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 80032d2:	2201      	movs	r2, #1
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <SystemInit+0x60>)
 80032d6:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80032d8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032dc:	608b      	str	r3, [r1, #8]
 80032de:	bd10      	pop	{r4, pc}
 80032e0:	e000ed00 	.word	0xe000ed00
 80032e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80032e8:	58024400 	.word	0x58024400
 80032ec:	51008108 	.word	0x51008108

080032f0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7; //structure variable

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80032f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 80032f2:	480f      	ldr	r0, [pc, #60]	; (8003330 <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 9999;
 80032f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <MX_TIM7_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032fa:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 9999;
 80032fc:	e880 000c 	stmia.w	r0, {r2, r3}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 9599;
 8003300:	f242 537f 	movw	r3, #9599	; 0x257f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003304:	9401      	str	r4, [sp, #4]
 8003306:	9402      	str	r4, [sp, #8]
 8003308:	9403      	str	r4, [sp, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330a:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 9599;
 800330c:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800330e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003310:	f7fe ffda 	bl	80022c8 <HAL_TIM_Base_Init>
 8003314:	b108      	cbz	r0, 800331a <MX_TIM7_Init+0x2a>
  {
    Error_Handler();
 8003316:	f7ff ff8f 	bl	8003238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800331a:	a901      	add	r1, sp, #4
 800331c:	4804      	ldr	r0, [pc, #16]	; (8003330 <MX_TIM7_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800331e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003320:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003322:	f7fe ffeb 	bl	80022fc <HAL_TIMEx_MasterConfigSynchronization>
 8003326:	b108      	cbz	r0, 800332c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8003328:	f7ff ff86 	bl	8003238 <Error_Handler>
  }

}
 800332c:	b004      	add	sp, #16
 800332e:	bd10      	pop	{r4, pc}
 8003330:	20000030 	.word	0x20000030
 8003334:	40001400 	.word	0x40001400

08003338 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM7)
 8003338:	6802      	ldr	r2, [r0, #0]
{
 800333a:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM7)
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_TIM_Base_MspInit+0x28>)
 800333e:	429a      	cmp	r2, r3
 8003340:	d10c      	bne.n	800335c <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_TIM_Base_MspInit+0x2c>)
 8003344:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003348:	f042 0220 	orr.w	r2, r2, #32
 800334c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003354:	f003 0320 	and.w	r3, r3, #32
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800335c:	b002      	add	sp, #8
 800335e:	4770      	bx	lr
 8003360:	40001400 	.word	0x40001400
 8003364:	58024400 	.word	0x58024400

08003368 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003368:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 800336a:	480e      	ldr	r0, [pc, #56]	; (80033a4 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 115200;
 800336c:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8003370:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <MX_USART3_UART_Init+0x40>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003372:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8003374:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003378:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 800337a:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800337c:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800337e:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003380:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003382:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003384:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003386:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8003388:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 800338a:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 800338c:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 800338e:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003390:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003392:	f7ff fc69 	bl	8002c68 <HAL_UART_Init>
 8003396:	b118      	cbz	r0, 80033a0 <MX_USART3_UART_Init+0x38>
  {
    Error_Handler();
  }

}
 8003398:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800339c:	f7ff bf4c 	b.w	8003238 <Error_Handler>
 80033a0:	bd08      	pop	{r3, pc}
 80033a2:	bf00      	nop
 80033a4:	20000070 	.word	0x20000070
 80033a8:	40004800 	.word	0x40004800

080033ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033ac:	b510      	push	{r4, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b2:	2214      	movs	r2, #20
 80033b4:	2100      	movs	r1, #0
 80033b6:	a803      	add	r0, sp, #12
 80033b8:	f000 f8e0 	bl	800357c <memset>
  if(uartHandle->Instance==USART3)
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_UART_MspInit+0x64>)
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d123      	bne.n	800340c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c6:	a903      	add	r1, sp, #12
 80033c8:	4813      	ldr	r0, [pc, #76]	; (8003418 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80033ca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80033ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80033d2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80033d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80033da:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80033de:	9201      	str	r2, [sp, #4]
 80033e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80033e6:	f042 0208 	orr.w	r2, r2, #8
 80033ea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80033ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	9302      	str	r3, [sp, #8]
 80033f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80033fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003400:	2302      	movs	r3, #2
 8003402:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003404:	2307      	movs	r3, #7
 8003406:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003408:	f7fd f9fa 	bl	8000800 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800340c:	b008      	add	sp, #32
 800340e:	bd10      	pop	{r4, pc}
 8003410:	40004800 	.word	0x40004800
 8003414:	58024400 	.word	0x58024400
 8003418:	58020c00 	.word	0x58020c00

0800341c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800341c:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800341e:	480d      	ldr	r0, [pc, #52]	; (8003454 <MX_USB_OTG_FS_PCD_Init+0x38>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8003420:	2309      	movs	r3, #9
 8003422:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <MX_USB_OTG_FS_PCD_Init+0x3c>)
 8003424:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003428:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800342a:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800342c:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800342e:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003430:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003432:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8003434:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003436:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003438:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800343a:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800343c:	6242      	str	r2, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800343e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003440:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003442:	f7fd fad0 	bl	80009e6 <HAL_PCD_Init>
 8003446:	b118      	cbz	r0, 8003450 <MX_USB_OTG_FS_PCD_Init+0x34>
  {
    Error_Handler();
  }

}
 8003448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800344c:	f7ff bef4 	b.w	8003238 <Error_Handler>
 8003450:	bd08      	pop	{r3, pc}
 8003452:	bf00      	nop
 8003454:	200000f0 	.word	0x200000f0
 8003458:	40080000 	.word	0x40080000

0800345c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800345c:	b510      	push	{r4, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003462:	2214      	movs	r2, #20
 8003464:	2100      	movs	r1, #0
 8003466:	a803      	add	r0, sp, #12
 8003468:	f000 f888 	bl	800357c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800346c:	6822      	ldr	r2, [r4, #0]
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <HAL_PCD_MspInit+0x78>)
 8003470:	429a      	cmp	r2, r3
 8003472:	d12d      	bne.n	80034d0 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003474:	4c18      	ldr	r4, [pc, #96]	; (80034d8 <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	a903      	add	r1, sp, #12
 8003478:	4818      	ldr	r0, [pc, #96]	; (80034dc <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003486:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003492:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003496:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800349c:	230a      	movs	r3, #10
 800349e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f7fd f9ae 	bl	8000800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80034a4:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034a8:	a903      	add	r1, sp, #12
 80034aa:	480c      	ldr	r0, [pc, #48]	; (80034dc <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80034ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ae:	2300      	movs	r3, #0
 80034b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034b4:	f7fd f9a4 	bl	8000800 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80034b8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80034bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034c0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80034c4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80034c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034cc:	9302      	str	r3, [sp, #8]
 80034ce:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80034d0:	b008      	add	sp, #32
 80034d2:	bd10      	pop	{r4, pc}
 80034d4:	40080000 	.word	0x40080000
 80034d8:	58024400 	.word	0x58024400
 80034dc:	58020000 	.word	0x58020000

080034e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034e6:	e003      	b.n	80034f0 <LoopCopyDataInit>

080034e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034e8:	4b0c      	ldr	r3, [pc, #48]	; (800351c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034ee:	3104      	adds	r1, #4

080034f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034f0:	480b      	ldr	r0, [pc, #44]	; (8003520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034f8:	d3f6      	bcc.n	80034e8 <CopyDataInit>
  ldr  r2, =_sbss
 80034fa:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034fc:	e002      	b.n	8003504 <LoopFillZerobss>

080034fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003500:	f842 3b04 	str.w	r3, [r2], #4

08003504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003508:	d3f9      	bcc.n	80034fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800350a:	f7ff febf 	bl	800328c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800350e:	f000 f811 	bl	8003534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003512:	f7ff fe5f 	bl	80031d4 <main>
  bx  lr    
 8003516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003518:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800351c:	08003614 	.word	0x08003614
  ldr  r0, =_sdata
 8003520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003524:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003528:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800352c:	200004f0 	.word	0x200004f0

08003530 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003530:	e7fe      	b.n	8003530 <ADC3_IRQHandler>
	...

08003534 <__libc_init_array>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4e0d      	ldr	r6, [pc, #52]	; (800356c <__libc_init_array+0x38>)
 8003538:	4c0d      	ldr	r4, [pc, #52]	; (8003570 <__libc_init_array+0x3c>)
 800353a:	1ba4      	subs	r4, r4, r6
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	2500      	movs	r5, #0
 8003540:	42a5      	cmp	r5, r4
 8003542:	d109      	bne.n	8003558 <__libc_init_array+0x24>
 8003544:	4e0b      	ldr	r6, [pc, #44]	; (8003574 <__libc_init_array+0x40>)
 8003546:	4c0c      	ldr	r4, [pc, #48]	; (8003578 <__libc_init_array+0x44>)
 8003548:	f000 f820 	bl	800358c <_init>
 800354c:	1ba4      	subs	r4, r4, r6
 800354e:	10a4      	asrs	r4, r4, #2
 8003550:	2500      	movs	r5, #0
 8003552:	42a5      	cmp	r5, r4
 8003554:	d105      	bne.n	8003562 <__libc_init_array+0x2e>
 8003556:	bd70      	pop	{r4, r5, r6, pc}
 8003558:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800355c:	4798      	blx	r3
 800355e:	3501      	adds	r5, #1
 8003560:	e7ee      	b.n	8003540 <__libc_init_array+0xc>
 8003562:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003566:	4798      	blx	r3
 8003568:	3501      	adds	r5, #1
 800356a:	e7f2      	b.n	8003552 <__libc_init_array+0x1e>
 800356c:	0800360c 	.word	0x0800360c
 8003570:	0800360c 	.word	0x0800360c
 8003574:	0800360c 	.word	0x0800360c
 8003578:	08003610 	.word	0x08003610

0800357c <memset>:
 800357c:	4402      	add	r2, r0
 800357e:	4603      	mov	r3, r0
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <memset+0xa>
 8003584:	4770      	bx	lr
 8003586:	f803 1b01 	strb.w	r1, [r3], #1
 800358a:	e7f9      	b.n	8003580 <memset+0x4>

0800358c <_init>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr

08003598 <_fini>:
 8003598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359a:	bf00      	nop
 800359c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800359e:	bc08      	pop	{r3}
 80035a0:	469e      	mov	lr, r3
 80035a2:	4770      	bx	lr

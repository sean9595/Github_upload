
GPIO_test_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cb0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002f48  08002f48  00012f48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002fb4  08002fb4  00012fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08002fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004a0  20000010  08002fc8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004b0  08002fc8  000204b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018069  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f0f  00000000  00000000  000380a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007056  00000000  00000000  0003afb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000978  00000000  00000000  00042010  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d68  00000000  00000000  00042988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005bf8  00000000  00000000  000436f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004b60  00000000  00000000  000492e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004de48  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000197c  00000000  00000000  0004dec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002f30 	.word	0x08002f30

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08002f30 	.word	0x08002f30

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_InitTick+0x3c>)
{
 80005ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_InitTick+0x40>)
 80005f0:	7818      	ldrb	r0, [r3, #0]
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f894 	bl	800072c <HAL_SYSTICK_Config>
 8000604:	4604      	mov	r4, r0
 8000606:	b958      	cbnz	r0, 8000620 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	2d0f      	cmp	r5, #15
 800060a:	d809      	bhi.n	8000620 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	4602      	mov	r2, r0
 800060e:	4629      	mov	r1, r5
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f852 	bl	80006bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_InitTick+0x44>)
 800061a:	4620      	mov	r0, r4
 800061c:	601d      	str	r5, [r3, #0]
 800061e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000622:	bd38      	pop	{r3, r4, r5, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_Init>:
{
 8000630:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 f830 	bl	8000698 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffd5 	bl	80005e8 <HAL_InitTick>
 800063e:	4604      	mov	r4, r0
 8000640:	b918      	cbnz	r0, 800064a <HAL_Init+0x1a>
  HAL_MspInit();
 8000642:	f002 fb15 	bl	8002c70 <HAL_MspInit>
}
 8000646:	4620      	mov	r0, r4
 8000648:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800064a:	2401      	movs	r4, #1
 800064c:	e7fb      	b.n	8000646 <HAL_Init+0x16>
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000002c 	.word	0x2000002c
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800069c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006a6:	041b      	lsls	r3, r3, #16
 80006a8:	0c1b      	lsrs	r3, r3, #16
 80006aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006b4:	60d3      	str	r3, [r2, #12]
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	68dc      	ldr	r4, [r3, #12]
 80006c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006cc:	2b04      	cmp	r3, #4
 80006ce:	bf28      	it	cs
 80006d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d8:	bf8c      	ite	hi
 80006da:	3c03      	subhi	r4, #3
 80006dc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006de:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80006e8:	ea01 0103 	and.w	r1, r1, r3
 80006ec:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	fa05 f404 	lsl.w	r4, r5, r4
 80006f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80006f8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006fc:	ea42 0201 	orr.w	r2, r2, r1
 8000700:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000704:	db07      	blt.n	8000716 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000706:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000710:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000714:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	f000 000f 	and.w	r0, r0, #15
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <HAL_NVIC_SetPriority+0x6c>)
 800071e:	541a      	strb	r2, [r3, r0]
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00
 8000728:	e000ed14 	.word	0xe000ed14

0800072c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	3801      	subs	r0, #1
 800072e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000732:	d20a      	bcs.n	800074a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	21f0      	movs	r1, #240	; 0xf0
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075c:	680b      	ldr	r3, [r1, #0]
{
 800075e:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000760:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000924 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000764:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000768:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800076a:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 800076c:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000928 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000770:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000772:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000774:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000776:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 800077a:	42af      	cmp	r7, r5
 800077c:	f040 80b7 	bne.w	80008ee <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000780:	684a      	ldr	r2, [r1, #4]
 8000782:	f022 0610 	bic.w	r6, r2, #16
 8000786:	2e02      	cmp	r6, #2
 8000788:	d116      	bne.n	80007b8 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800078a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800078e:	f003 0b07 	and.w	fp, r3, #7
 8000792:	f04f 0e0f 	mov.w	lr, #15
 8000796:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800079a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800079e:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007a2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80007a6:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007aa:	690c      	ldr	r4, [r1, #16]
 80007ac:	fa04 f40b 	lsl.w	r4, r4, fp
 80007b0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 80007b4:	f8ca 4020 	str.w	r4, [sl, #32]
 80007b8:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007bc:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 80007be:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007c2:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007c6:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ca:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007cc:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007d0:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007d2:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007d4:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007d8:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 80007dc:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007e0:	d810      	bhi.n	8000804 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 80007e2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80007e4:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 80007e8:	68ce      	ldr	r6, [r1, #12]
 80007ea:	fa06 fe0a 	lsl.w	lr, r6, sl
 80007ee:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80007f2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80007f4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007f6:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007fa:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80007fe:	409e      	lsls	r6, r3
 8000800:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000802:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000804:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000806:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000808:	688e      	ldr	r6, [r1, #8]
 800080a:	fa06 f60a 	lsl.w	r6, r6, sl
 800080e:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000810:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000812:	00d4      	lsls	r4, r2, #3
 8000814:	d56b      	bpl.n	80008ee <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 800081a:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800081e:	f003 0703 	and.w	r7, r3, #3
 8000822:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	f044 0402 	orr.w	r4, r4, #2
 800082a:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800082e:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000830:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000834:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000838:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 800083c:	f004 0402 	and.w	r4, r4, #2
 8000840:	9403      	str	r4, [sp, #12]
 8000842:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000844:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000848:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800084c:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000850:	4c33      	ldr	r4, [pc, #204]	; (8000920 <HAL_GPIO_Init+0x1c8>)
 8000852:	42a0      	cmp	r0, r4
 8000854:	d052      	beq.n	80008fc <HAL_GPIO_Init+0x1a4>
 8000856:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800085a:	42a0      	cmp	r0, r4
 800085c:	d050      	beq.n	8000900 <HAL_GPIO_Init+0x1a8>
 800085e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000862:	42a0      	cmp	r0, r4
 8000864:	d04e      	beq.n	8000904 <HAL_GPIO_Init+0x1ac>
 8000866:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800086a:	42a0      	cmp	r0, r4
 800086c:	d04c      	beq.n	8000908 <HAL_GPIO_Init+0x1b0>
 800086e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000872:	42a0      	cmp	r0, r4
 8000874:	d04a      	beq.n	800090c <HAL_GPIO_Init+0x1b4>
 8000876:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800087a:	42a0      	cmp	r0, r4
 800087c:	d048      	beq.n	8000910 <HAL_GPIO_Init+0x1b8>
 800087e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000882:	42a0      	cmp	r0, r4
 8000884:	d046      	beq.n	8000914 <HAL_GPIO_Init+0x1bc>
 8000886:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800088a:	42a0      	cmp	r0, r4
 800088c:	d044      	beq.n	8000918 <HAL_GPIO_Init+0x1c0>
 800088e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000892:	42a0      	cmp	r0, r4
 8000894:	d042      	beq.n	800091c <HAL_GPIO_Init+0x1c4>
 8000896:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800089a:	42a0      	cmp	r0, r4
 800089c:	bf14      	ite	ne
 800089e:	240a      	movne	r4, #10
 80008a0:	2409      	moveq	r4, #9
 80008a2:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008a4:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008a6:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80008aa:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80008ac:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 80008b0:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 80008b4:	bf54      	ite	pl
 80008b6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80008b8:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008ba:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 80008bc:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 80008c0:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 80008c4:	bf54      	ite	pl
 80008c6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80008c8:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ca:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80008cc:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 80008d0:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 80008d4:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 80008d8:	bf54      	ite	pl
 80008da:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80008dc:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008de:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 80008e0:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 80008e2:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 80008e4:	bf54      	ite	pl
 80008e6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80008e8:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 80008ea:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80008ee:	3301      	adds	r3, #1
 80008f0:	2b10      	cmp	r3, #16
 80008f2:	f47f af3d 	bne.w	8000770 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 80008f6:	b005      	add	sp, #20
 80008f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008fc:	2400      	movs	r4, #0
 80008fe:	e7d0      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 8000900:	2401      	movs	r4, #1
 8000902:	e7ce      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 8000904:	2402      	movs	r4, #2
 8000906:	e7cc      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 8000908:	2403      	movs	r4, #3
 800090a:	e7ca      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 800090c:	2404      	movs	r4, #4
 800090e:	e7c8      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 8000910:	2405      	movs	r4, #5
 8000912:	e7c6      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 8000914:	2406      	movs	r4, #6
 8000916:	e7c4      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 8000918:	2407      	movs	r4, #7
 800091a:	e7c2      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 800091c:	2408      	movs	r4, #8
 800091e:	e7c0      	b.n	80008a2 <HAL_GPIO_Init+0x14a>
 8000920:	58020000 	.word	0x58020000
 8000924:	58024400 	.word	0x58024400
 8000928:	58000080 	.word	0x58000080

0800092c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800092c:	6903      	ldr	r3, [r0, #16]
 800092e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000930:	bf14      	ite	ne
 8000932:	2001      	movne	r0, #1
 8000934:	2000      	moveq	r0, #0
 8000936:	4770      	bx	lr

08000938 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000938:	b10a      	cbz	r2, 800093e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800093a:	8301      	strh	r1, [r0, #24]
 800093c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800093e:	8341      	strh	r1, [r0, #26]
 8000940:	4770      	bx	lr

08000942 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000942:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000944:	4605      	mov	r5, r0
{ 
 8000946:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8000948:	2800      	cmp	r0, #0
 800094a:	d06d      	beq.n	8000a28 <HAL_PCD_Init+0xe6>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 800094c:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 800094e:	462c      	mov	r4, r5
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000950:	466e      	mov	r6, sp
 8000952:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000954:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000958:	f002 fa52 	bl	8002e00 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 800095c:	f854 0b10 	ldr.w	r0, [r4], #16
 8000960:	f001 ff07 	bl	8002772 <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000966:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800096c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000970:	f105 0410 	add.w	r4, r5, #16
 8000974:	e886 0003 	stmia.w	r6, {r0, r1}
 8000978:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800097c:	6828      	ldr	r0, [r5, #0]
 
 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 800097e:	2601      	movs	r6, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000980:	f001 febc 	bl	80026fc <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000984:	2100      	movs	r1, #0
 8000986:	6828      	ldr	r0, [r5, #0]
 8000988:	f001 fef9 	bl	800277e <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 800098c:	2100      	movs	r1, #0
 800098e:	462b      	mov	r3, r5
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000990:	462a      	mov	r2, r5
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000992:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000994:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8000998:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 800099a:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 800099c:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 800099e:	7756      	strb	r6, [r2, #29]
 for (i = 0; i < 15 ; i++)
 80009a0:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80009a2:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 80009a4:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 80009a6:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 80009a8:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 80009aa:	d1f3      	bne.n	8000994 <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;
   
   hpcd->Instance->DIEPTXF[i] = 0;
 80009ac:	2200      	movs	r2, #0
 80009ae:	f8d5 e000 	ldr.w	lr, [r5]
   hpcd->OUT_ep[i].is_in = 0;
 80009b2:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 80009b4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 80009b8:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 80009bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 80009be:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 80009c0:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 80009c4:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 80009c8:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80009ca:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 80009ce:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 80009d2:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 80009d6:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 80009da:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 80009de:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 80009e0:	d1e8      	bne.n	80009b4 <HAL_PCD_Init+0x72>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 80009e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e4:	466e      	mov	r6, sp
 80009e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80009ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009f0:	e886 0003 	stmia.w	r6, {r0, r1}
 80009f4:	4670      	mov	r0, lr
 80009f6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80009fa:	f001 fed7 	bl	80027ac <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f885 33b9 	strb.w	r3, [r5, #953]	; 0x3b9
 
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1)
 8000a04:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d102      	bne.n	8000a10 <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	f000 f80e 	bl	8000a2c <HAL_PCDEx_ActivateLPM>
 }
 
#if defined (USB_OTG_GCCFG_BCDEN)	
 /* Activate Battery charging */
 if (hpcd->Init.battery_charging_enable ==1)
 8000a10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d102      	bne.n	8000a1c <HAL_PCD_Init+0xda>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 8000a16:	4628      	mov	r0, r5
 8000a18:	f000 f81b 	bl	8000a52 <HAL_PCDEx_ActivateBCD>
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000a1c:	6828      	ldr	r0, [r5, #0]
 8000a1e:	f001 ff94 	bl	800294a <USB_DevDisconnect>
 return HAL_OK;
 8000a22:	2000      	movs	r0, #0
}
 8000a24:	b00b      	add	sp, #44	; 0x2c
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000a28:	2001      	movs	r0, #1
 8000a2a:	e7fb      	b.n	8000a24 <HAL_PCD_Init+0xe2>

08000a2c <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 8000a2c:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000a2e:	6802      	ldr	r2, [r0, #0]
{
 8000a30:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8000a32:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8000a36:	2000      	movs	r0, #0
 8000a38:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8000a3c:	6993      	ldr	r3, [r2, #24]
 8000a3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a42:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8000a44:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	f043 0303 	orr.w	r3, r3, #3
 8000a4e:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8000a50:	4770      	bx	lr

08000a52 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8000a52:	6803      	ldr	r3, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8000a54:	2201      	movs	r2, #1
 8000a56:	f8c0 23f8 	str.w	r2, [r0, #1016]	; 0x3f8
  
  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
  
  return HAL_OK;  
}
 8000a5a:	2000      	movs	r0, #0
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8000a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a62:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 8000a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a6c:	4770      	bx	lr
	...

08000a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a72:	6803      	ldr	r3, [r0, #0]
{
 8000a74:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a76:	07d8      	lsls	r0, r3, #31
 8000a78:	d45c      	bmi.n	8000b34 <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a7a:	682b      	ldr	r3, [r5, #0]
 8000a7c:	0799      	lsls	r1, r3, #30
 8000a7e:	f100 80af 	bmi.w	8000be0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000a82:	682b      	ldr	r3, [r5, #0]
 8000a84:	06d9      	lsls	r1, r3, #27
 8000a86:	d525      	bpl.n	8000ad4 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000a88:	4bac      	ldr	r3, [pc, #688]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000a8a:	691a      	ldr	r2, [r3, #16]
 8000a8c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000a90:	2a08      	cmp	r2, #8
 8000a92:	d00b      	beq.n	8000aac <HAL_RCC_OscConfig+0x3c>
 8000a94:	691a      	ldr	r2, [r3, #16]
 8000a96:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000a9a:	2a18      	cmp	r2, #24
 8000a9c:	f040 80f7 	bne.w	8000c8e <HAL_RCC_OscConfig+0x21e>
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	f040 80f1 	bne.w	8000c8e <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000aac:	4ba3      	ldr	r3, [pc, #652]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	05d2      	lsls	r2, r2, #23
 8000ab2:	d502      	bpl.n	8000aba <HAL_RCC_OscConfig+0x4a>
 8000ab4:	69ea      	ldr	r2, [r5, #28]
 8000ab6:	2a80      	cmp	r2, #128	; 0x80
 8000ab8:	d153      	bne.n	8000b62 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000aba:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000abc:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000ac0:	fa92 f2a2 	rbit	r2, r2
 8000ac4:	fab2 f182 	clz	r1, r2
 8000ac8:	6a2a      	ldr	r2, [r5, #32]
 8000aca:	408a      	lsls	r2, r1
 8000acc:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	0719      	lsls	r1, r3, #28
 8000ad8:	f100 810b 	bmi.w	8000cf2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000adc:	682b      	ldr	r3, [r5, #0]
 8000ade:	069a      	lsls	r2, r3, #26
 8000ae0:	f100 8130 	bmi.w	8000d44 <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	075c      	lsls	r4, r3, #29
 8000ae8:	d51e      	bpl.n	8000b28 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000aea:	4c95      	ldr	r4, [pc, #596]	; (8000d40 <HAL_RCC_OscConfig+0x2d0>)
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af2:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000af4:	f7ff fdb8 	bl	8000668 <HAL_GetTick>
 8000af8:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000afa:	6823      	ldr	r3, [r4, #0]
 8000afc:	05da      	lsls	r2, r3, #23
 8000afe:	f140 8146 	bpl.w	8000d8e <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b02:	68ab      	ldr	r3, [r5, #8]
 8000b04:	4c8d      	ldr	r4, [pc, #564]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	f040 8148 	bne.w	8000d9c <HAL_RCC_OscConfig+0x32c>
 8000b0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b14:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b18:	f7ff fda6 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b1c:	4e87      	ldr	r6, [pc, #540]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000b1e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b20:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000b22:	079b      	lsls	r3, r3, #30
 8000b24:	f140 8160 	bpl.w	8000de8 <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	f040 8163 	bne.w	8000df6 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b30:	2000      	movs	r0, #0
 8000b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000b34:	4b81      	ldr	r3, [pc, #516]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000b36:	691a      	ldr	r2, [r3, #16]
 8000b38:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b3c:	2a10      	cmp	r2, #16
 8000b3e:	d009      	beq.n	8000b54 <HAL_RCC_OscConfig+0xe4>
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b46:	2a18      	cmp	r2, #24
 8000b48:	d10d      	bne.n	8000b66 <HAL_RCC_OscConfig+0xf6>
 8000b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b4c:	f003 0303 	and.w	r3, r3, #3
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d108      	bne.n	8000b66 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b54:	4b79      	ldr	r3, [pc, #484]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	039a      	lsls	r2, r3, #14
 8000b5a:	d58e      	bpl.n	8000a7a <HAL_RCC_OscConfig+0xa>
 8000b5c:	686b      	ldr	r3, [r5, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d18b      	bne.n	8000a7a <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
 8000b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b66:	686b      	ldr	r3, [r5, #4]
 8000b68:	4c74      	ldr	r4, [pc, #464]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b6e:	d112      	bne.n	8000b96 <HAL_RCC_OscConfig+0x126>
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b76:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b78:	f7ff fd76 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b7c:	4c6f      	ldr	r4, [pc, #444]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000b7e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	039b      	lsls	r3, r3, #14
 8000b84:	f53f af79 	bmi.w	8000a7a <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b88:	f7ff fd6e 	bl	8000668 <HAL_GetTick>
 8000b8c:	1b80      	subs	r0, r0, r6
 8000b8e:	2864      	cmp	r0, #100	; 0x64
 8000b90:	d9f6      	bls.n	8000b80 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8000b92:	2003      	movs	r0, #3
 8000b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	b9a3      	cbnz	r3, 8000bc2 <HAL_RCC_OscConfig+0x152>
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9e:	6023      	str	r3, [r4, #0]
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ba8:	f7ff fd5e 	bl	8000668 <HAL_GetTick>
 8000bac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	039f      	lsls	r7, r3, #14
 8000bb2:	f57f af62 	bpl.w	8000a7a <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fd57 	bl	8000668 <HAL_GetTick>
 8000bba:	1b80      	subs	r0, r0, r6
 8000bbc:	2864      	cmp	r0, #100	; 0x64
 8000bbe:	d9f6      	bls.n	8000bae <HAL_RCC_OscConfig+0x13e>
 8000bc0:	e7e7      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc6:	6823      	ldr	r3, [r4, #0]
 8000bc8:	d103      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x162>
 8000bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bce:	6023      	str	r3, [r4, #0]
 8000bd0:	e7ce      	b.n	8000b70 <HAL_RCC_OscConfig+0x100>
 8000bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bd6:	6023      	str	r3, [r4, #0]
 8000bd8:	6823      	ldr	r3, [r4, #0]
 8000bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bde:	e7ca      	b.n	8000b76 <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000be0:	4b56      	ldr	r3, [pc, #344]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000be2:	68e9      	ldr	r1, [r5, #12]
 8000be4:	691a      	ldr	r2, [r3, #16]
 8000be6:	f012 0f38 	tst.w	r2, #56	; 0x38
 8000bea:	d007      	beq.n	8000bfc <HAL_RCC_OscConfig+0x18c>
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000bf2:	2a18      	cmp	r2, #24
 8000bf4:	d128      	bne.n	8000c48 <HAL_RCC_OscConfig+0x1d8>
 8000bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf8:	079c      	lsls	r4, r3, #30
 8000bfa:	d125      	bne.n	8000c48 <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bfc:	4a4f      	ldr	r2, [pc, #316]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000bfe:	6813      	ldr	r3, [r2, #0]
 8000c00:	0758      	lsls	r0, r3, #29
 8000c02:	d501      	bpl.n	8000c08 <HAL_RCC_OscConfig+0x198>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	d0ac      	beq.n	8000b62 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c08:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	4c4c      	ldr	r4, [pc, #304]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c0c:	f023 0319 	bic.w	r3, r3, #25
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c14:	f7ff fd28 	bl	8000668 <HAL_GetTick>
 8000c18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	075b      	lsls	r3, r3, #29
 8000c1e:	d50d      	bpl.n	8000c3c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c20:	6861      	ldr	r1, [r4, #4]
 8000c22:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8000c26:	fa93 f3a3 	rbit	r3, r3
 8000c2a:	fab3 f283 	clz	r2, r3
 8000c2e:	692b      	ldr	r3, [r5, #16]
 8000c30:	4093      	lsls	r3, r2
 8000c32:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 8000c36:	4313      	orrs	r3, r2
 8000c38:	6063      	str	r3, [r4, #4]
 8000c3a:	e722      	b.n	8000a82 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fd14 	bl	8000668 <HAL_GetTick>
 8000c40:	1b80      	subs	r0, r0, r6
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9e9      	bls.n	8000c1a <HAL_RCC_OscConfig+0x1aa>
 8000c46:	e7a4      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
 8000c48:	4c3c      	ldr	r4, [pc, #240]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c4a:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c4c:	b179      	cbz	r1, 8000c6e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c4e:	f023 0319 	bic.w	r3, r3, #25
 8000c52:	430b      	orrs	r3, r1
 8000c54:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c56:	f7ff fd07 	bl	8000668 <HAL_GetTick>
 8000c5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	075f      	lsls	r7, r3, #29
 8000c60:	d4de      	bmi.n	8000c20 <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c62:	f7ff fd01 	bl	8000668 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	2802      	cmp	r0, #2
 8000c6a:	d9f7      	bls.n	8000c5c <HAL_RCC_OscConfig+0x1ec>
 8000c6c:	e791      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c74:	f7ff fcf8 	bl	8000668 <HAL_GetTick>
 8000c78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7a:	6823      	ldr	r3, [r4, #0]
 8000c7c:	0758      	lsls	r0, r3, #29
 8000c7e:	f57f af00 	bpl.w	8000a82 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c82:	f7ff fcf1 	bl	8000668 <HAL_GetTick>
 8000c86:	1b80      	subs	r0, r0, r6
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d9f6      	bls.n	8000c7a <HAL_RCC_OscConfig+0x20a>
 8000c8c:	e781      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000c8e:	69eb      	ldr	r3, [r5, #28]
 8000c90:	4c2a      	ldr	r4, [pc, #168]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000c92:	b1eb      	cbz	r3, 8000cd0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c9c:	f7ff fce4 	bl	8000668 <HAL_GetTick>
 8000ca0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	05df      	lsls	r7, r3, #23
 8000ca6:	d50d      	bpl.n	8000cc4 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ca8:	6861      	ldr	r1, [r4, #4]
 8000caa:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8000cae:	fa93 f3a3 	rbit	r3, r3
 8000cb2:	fab3 f283 	clz	r2, r3
 8000cb6:	6a2b      	ldr	r3, [r5, #32]
 8000cb8:	4093      	lsls	r3, r2
 8000cba:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	6063      	str	r3, [r4, #4]
 8000cc2:	e707      	b.n	8000ad4 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fcd0 	bl	8000668 <HAL_GetTick>
 8000cc8:	1b80      	subs	r0, r0, r6
 8000cca:	2802      	cmp	r0, #2
 8000ccc:	d9e9      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x232>
 8000cce:	e760      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cd6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fcc6 	bl	8000668 <HAL_GetTick>
 8000cdc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	05d8      	lsls	r0, r3, #23
 8000ce2:	f57f aef7 	bpl.w	8000ad4 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fcbf 	bl	8000668 <HAL_GetTick>
 8000cea:	1b80      	subs	r0, r0, r6
 8000cec:	2802      	cmp	r0, #2
 8000cee:	d9f6      	bls.n	8000cde <HAL_RCC_OscConfig+0x26e>
 8000cf0:	e74f      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cf2:	696b      	ldr	r3, [r5, #20]
 8000cf4:	4c11      	ldr	r4, [pc, #68]	; (8000d3c <HAL_RCC_OscConfig+0x2cc>)
 8000cf6:	b183      	cbz	r3, 8000d1a <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8000cf8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000d00:	f7ff fcb2 	bl	8000668 <HAL_GetTick>
 8000d04:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d06:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000d08:	079b      	lsls	r3, r3, #30
 8000d0a:	f53f aee7 	bmi.w	8000adc <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0e:	f7ff fcab 	bl	8000668 <HAL_GetTick>
 8000d12:	1b80      	subs	r0, r0, r6
 8000d14:	2802      	cmp	r0, #2
 8000d16:	d9f6      	bls.n	8000d06 <HAL_RCC_OscConfig+0x296>
 8000d18:	e73b      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000d1a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000d1c:	f023 0301 	bic.w	r3, r3, #1
 8000d20:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000d22:	f7ff fca1 	bl	8000668 <HAL_GetTick>
 8000d26:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d28:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000d2a:	079f      	lsls	r7, r3, #30
 8000d2c:	f57f aed6 	bpl.w	8000adc <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d30:	f7ff fc9a 	bl	8000668 <HAL_GetTick>
 8000d34:	1b80      	subs	r0, r0, r6
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9f6      	bls.n	8000d28 <HAL_RCC_OscConfig+0x2b8>
 8000d3a:	e72a      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
 8000d3c:	58024400 	.word	0x58024400
 8000d40:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000d44:	69ab      	ldr	r3, [r5, #24]
 8000d46:	4c6e      	ldr	r4, [pc, #440]	; (8000f00 <HAL_RCC_OscConfig+0x490>)
 8000d48:	b183      	cbz	r3, 8000d6c <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000d52:	f7ff fc89 	bl	8000668 <HAL_GetTick>
 8000d56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	0498      	lsls	r0, r3, #18
 8000d5c:	f53f aec2 	bmi.w	8000ae4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000d60:	f7ff fc82 	bl	8000668 <HAL_GetTick>
 8000d64:	1b80      	subs	r0, r0, r6
 8000d66:	2802      	cmp	r0, #2
 8000d68:	d9f6      	bls.n	8000d58 <HAL_RCC_OscConfig+0x2e8>
 8000d6a:	e712      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d72:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000d74:	f7ff fc78 	bl	8000668 <HAL_GetTick>
 8000d78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	0499      	lsls	r1, r3, #18
 8000d7e:	f57f aeb1 	bpl.w	8000ae4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000d82:	f7ff fc71 	bl	8000668 <HAL_GetTick>
 8000d86:	1b80      	subs	r0, r0, r6
 8000d88:	2802      	cmp	r0, #2
 8000d8a:	d9f6      	bls.n	8000d7a <HAL_RCC_OscConfig+0x30a>
 8000d8c:	e701      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d8e:	f7ff fc6b 	bl	8000668 <HAL_GetTick>
 8000d92:	1b80      	subs	r0, r0, r6
 8000d94:	2864      	cmp	r0, #100	; 0x64
 8000d96:	f67f aeb0 	bls.w	8000afa <HAL_RCC_OscConfig+0x8a>
 8000d9a:	e6fa      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d9c:	b9b3      	cbnz	r3, 8000dcc <HAL_RCC_OscConfig+0x35c>
 8000d9e:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000da0:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	6723      	str	r3, [r4, #112]	; 0x70
 8000daa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000dac:	f023 0304 	bic.w	r3, r3, #4
 8000db0:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000db2:	f7ff fc59 	bl	8000668 <HAL_GetTick>
 8000db6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000dba:	0798      	lsls	r0, r3, #30
 8000dbc:	f57f aeb4 	bpl.w	8000b28 <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fc52 	bl	8000668 <HAL_GetTick>
 8000dc4:	1b80      	subs	r0, r0, r6
 8000dc6:	42b8      	cmp	r0, r7
 8000dc8:	d9f6      	bls.n	8000db8 <HAL_RCC_OscConfig+0x348>
 8000dca:	e6e2      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dcc:	2b05      	cmp	r3, #5
 8000dce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000dd0:	d103      	bne.n	8000dda <HAL_RCC_OscConfig+0x36a>
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6723      	str	r3, [r4, #112]	; 0x70
 8000dd8:	e698      	b.n	8000b0c <HAL_RCC_OscConfig+0x9c>
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	6723      	str	r3, [r4, #112]	; 0x70
 8000de0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000de2:	f023 0304 	bic.w	r3, r3, #4
 8000de6:	e694      	b.n	8000b12 <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de8:	f7ff fc3e 	bl	8000668 <HAL_GetTick>
 8000dec:	1bc0      	subs	r0, r0, r7
 8000dee:	42a0      	cmp	r0, r4
 8000df0:	f67f ae96 	bls.w	8000b20 <HAL_RCC_OscConfig+0xb0>
 8000df4:	e6cd      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000df6:	4c42      	ldr	r4, [pc, #264]	; (8000f00 <HAL_RCC_OscConfig+0x490>)
 8000df8:	6923      	ldr	r3, [r4, #16]
 8000dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000dfe:	2b18      	cmp	r3, #24
 8000e00:	f43f aeaf 	beq.w	8000b62 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8000e04:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e06:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e0c:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e0e:	d169      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8000e10:	f7ff fc2a 	bl	8000668 <HAL_GetTick>
 8000e14:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	0199      	lsls	r1, r3, #6
 8000e1a:	d45d      	bmi.n	8000ed8 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e1e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000e20:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000e24:	f023 0303 	bic.w	r3, r3, #3
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000e2c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e32:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e34:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000e36:	3b01      	subs	r3, #1
 8000e38:	3a01      	subs	r2, #1
 8000e3a:	025b      	lsls	r3, r3, #9
 8000e3c:	0412      	lsls	r2, r2, #16
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000e44:	4313      	orrs	r3, r2
 8000e46:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000e48:	3a01      	subs	r2, #1
 8000e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000e52:	3a01      	subs	r2, #1
 8000e54:	0612      	lsls	r2, r2, #24
 8000e56:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	6323      	str	r3, [r4, #48]	; 0x30
 8000e5e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000e62:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e64:	fa93 f3a3 	rbit	r3, r3
 8000e68:	fab3 f183 	clz	r1, r3
 8000e6c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000e70:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000e72:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000e76:	408b      	lsls	r3, r1
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e7e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000e80:	f023 030c 	bic.w	r3, r3, #12
 8000e84:	4313      	orrs	r3, r2
 8000e86:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000e88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e8a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000e8c:	f023 0302 	bic.w	r3, r3, #2
 8000e90:	4313      	orrs	r3, r2
 8000e92:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000e94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e9a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea2:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000ea4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ebc:	f7ff fbd4 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec0:	4c0f      	ldr	r4, [pc, #60]	; (8000f00 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8000ec2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	019a      	lsls	r2, r3, #6
 8000ec8:	f53f ae32 	bmi.w	8000b30 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ecc:	f7ff fbcc 	bl	8000668 <HAL_GetTick>
 8000ed0:	1b40      	subs	r0, r0, r5
 8000ed2:	2802      	cmp	r0, #2
 8000ed4:	d9f6      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x454>
 8000ed6:	e65c      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed8:	f7ff fbc6 	bl	8000668 <HAL_GetTick>
 8000edc:	1b80      	subs	r0, r0, r6
 8000ede:	2802      	cmp	r0, #2
 8000ee0:	d999      	bls.n	8000e16 <HAL_RCC_OscConfig+0x3a6>
 8000ee2:	e656      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fbc0 	bl	8000668 <HAL_GetTick>
 8000ee8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	019b      	lsls	r3, r3, #6
 8000eee:	f57f ae1f 	bpl.w	8000b30 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ef2:	f7ff fbb9 	bl	8000668 <HAL_GetTick>
 8000ef6:	1b40      	subs	r0, r0, r5
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	d9f6      	bls.n	8000eea <HAL_RCC_OscConfig+0x47a>
 8000efc:	e649      	b.n	8000b92 <HAL_RCC_OscConfig+0x122>
 8000efe:	bf00      	nop
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f04:	4b48      	ldr	r3, [pc, #288]	; (8001028 <HAL_RCC_GetSysClockFreq+0x124>)
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000f0c:	2a10      	cmp	r2, #16
{
 8000f0e:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f10:	d00e      	beq.n	8000f30 <HAL_RCC_GetSysClockFreq+0x2c>
 8000f12:	2a18      	cmp	r2, #24
 8000f14:	d00e      	beq.n	8000f34 <HAL_RCC_GetSysClockFreq+0x30>
 8000f16:	2a00      	cmp	r2, #0
 8000f18:	f040 8084 	bne.w	8001024 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4843      	ldr	r0, [pc, #268]	; (800102c <HAL_RCC_GetSysClockFreq+0x128>)
 8000f20:	f012 0f20 	tst.w	r2, #32
 8000f24:	d07f      	beq.n	8001026 <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000f2c:	40d8      	lsrs	r0, r3
 8000f2e:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8000f30:	483f      	ldr	r0, [pc, #252]	; (8001030 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000f32:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000f34:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000f36:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000f3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000f3c:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000f40:	f001 0101 	and.w	r1, r1, #1
 8000f44:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8001034 <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000f48:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8000f4c:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000f4e:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000f52:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 8000f56:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000f58:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000f5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8000f60:	d002      	beq.n	8000f68 <HAL_RCC_GetSysClockFreq+0x64>
 8000f62:	d30e      	bcc.n	8000f82 <HAL_RCC_GetSysClockFreq+0x7e>
 8000f64:	2a02      	cmp	r2, #2
 8000f66:	d04c      	beq.n	8001002 <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a33      	ldr	r2, [pc, #204]	; (8001038 <HAL_RCC_GetSysClockFreq+0x134>)
 8000f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f70:	ee07 3a10 	vmov	s14, r3
 8000f74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f78:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f80:	e04b      	b.n	800101a <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	f012 0f20 	tst.w	r2, #32
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <HAL_RCC_GetSysClockFreq+0x128>)
 8000f8a:	d026      	beq.n	8000fda <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f8c:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f90:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f98:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f9a:	fbb2 f2f0 	udiv	r2, r2, r0
 8000f9e:	ee07 2a10 	vmov	s14, r2
 8000fa2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000fa6:	ee07 3a10 	vmov	s14, r3
 8000faa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000fae:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000fb2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fb6:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <HAL_RCC_GetSysClockFreq+0x124>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000fc2:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8000fc4:	ee07 3a10 	vmov	s14, r3
 8000fc8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000fcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fd0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000fd4:	ee17 0a90 	vmov	r0, s15
 8000fd8:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fe0:	ee07 3a10 	vmov	s14, r3
 8000fe4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000fe8:	fbb2 f3f0 	udiv	r3, r2, r0
 8000fec:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff4:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001000:	e7db      	b.n	8000fba <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800100a:	ee07 3a10 	vmov	s14, r3
 800100e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001012:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001016:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 800101a:	fbb2 f2f0 	udiv	r2, r2, r0
 800101e:	ee07 2a90 	vmov	s15, r2
 8001022:	e7e9      	b.n	8000ff8 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001026:	bd10      	pop	{r4, pc}
 8001028:	58024400 	.word	0x58024400
 800102c:	03d09000 	.word	0x03d09000
 8001030:	007a1200 	.word	0x007a1200
 8001034:	39000000 	.word	0x39000000
 8001038:	003d0900 	.word	0x003d0900

0800103c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800103c:	4a68      	ldr	r2, [pc, #416]	; (80011e0 <HAL_RCC_ClockConfig+0x1a4>)
 800103e:	6813      	ldr	r3, [r2, #0]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	428b      	cmp	r3, r1
{
 8001046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800104a:	4604      	mov	r4, r0
 800104c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800104e:	d342      	bcc.n	80010d6 <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	6822      	ldr	r2, [r4, #0]
 8001052:	0797      	lsls	r7, r2, #30
 8001054:	d44c      	bmi.n	80010f0 <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001056:	07d6      	lsls	r6, r2, #31
 8001058:	d452      	bmi.n	8001100 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800105a:	4a61      	ldr	r2, [pc, #388]	; (80011e0 <HAL_RCC_ClockConfig+0x1a4>)
 800105c:	6813      	ldr	r3, [r2, #0]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	429d      	cmp	r5, r3
 8001064:	f0c0 80a8 	bcc.w	80011b8 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	0755      	lsls	r5, r2, #29
 800106c:	f100 80af 	bmi.w	80011ce <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001070:	0710      	lsls	r0, r2, #28
 8001072:	d506      	bpl.n	8001082 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001074:	495b      	ldr	r1, [pc, #364]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
 8001076:	6960      	ldr	r0, [r4, #20]
 8001078:	69cb      	ldr	r3, [r1, #28]
 800107a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800107e:	4303      	orrs	r3, r0
 8001080:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001082:	06d1      	lsls	r1, r2, #27
 8001084:	d506      	bpl.n	8001094 <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001086:	4957      	ldr	r1, [pc, #348]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
 8001088:	69a0      	ldr	r0, [r4, #24]
 800108a:	69cb      	ldr	r3, [r1, #28]
 800108c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001090:	4303      	orrs	r3, r0
 8001092:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001094:	0693      	lsls	r3, r2, #26
 8001096:	d506      	bpl.n	80010a6 <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001098:	4a52      	ldr	r2, [pc, #328]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
 800109a:	69e1      	ldr	r1, [r4, #28]
 800109c:	6a13      	ldr	r3, [r2, #32]
 800109e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010a2:	430b      	orrs	r3, r1
 80010a4:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 80010a6:	f7ff ff2d 	bl	8000f04 <HAL_RCC_GetSysClockFreq>
 80010aa:	4b4e      	ldr	r3, [pc, #312]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	fa92 f2a2 	rbit	r2, r2
 80010b6:	fab2 f282 	clz	r2, r2
 80010ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	4a49      	ldr	r2, [pc, #292]	; (80011e8 <HAL_RCC_ClockConfig+0x1ac>)
 80010c2:	5cd3      	ldrb	r3, [r2, r3]
 80010c4:	40d8      	lsrs	r0, r3
 80010c6:	4b49      	ldr	r3, [pc, #292]	; (80011ec <HAL_RCC_ClockConfig+0x1b0>)
 80010c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fa8c 	bl	80005e8 <HAL_InitTick>
  return HAL_OK;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f023 0307 	bic.w	r3, r3, #7
 80010dc:	430b      	orrs	r3, r1
 80010de:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010e0:	6813      	ldr	r3, [r2, #0]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	4299      	cmp	r1, r3
 80010e8:	d0b2      	beq.n	8001050 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
 80010ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010f0:	493c      	ldr	r1, [pc, #240]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
 80010f2:	68e0      	ldr	r0, [r4, #12]
 80010f4:	698b      	ldr	r3, [r1, #24]
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	4303      	orrs	r3, r0
 80010fc:	618b      	str	r3, [r1, #24]
 80010fe:	e7aa      	b.n	8001056 <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001100:	4b38      	ldr	r3, [pc, #224]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
 8001102:	68a1      	ldr	r1, [r4, #8]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800110a:	430a      	orrs	r2, r1
 800110c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800110e:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001112:	2902      	cmp	r1, #2
 8001114:	d11d      	bne.n	8001152 <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001116:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111a:	d0e6      	beq.n	80010ea <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800111c:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111e:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001122:	4f30      	ldr	r7, [pc, #192]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001124:	f022 0207 	bic.w	r2, r2, #7
 8001128:	430a      	orrs	r2, r1
 800112a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 800112c:	f7ff fa9c 	bl	8000668 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001130:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8001132:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001134:	2b02      	cmp	r3, #2
 8001136:	d119      	bne.n	800116c <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800113e:	2b10      	cmp	r3, #16
 8001140:	d08b      	beq.n	800105a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001142:	f7ff fa91 	bl	8000668 <HAL_GetTick>
 8001146:	1b80      	subs	r0, r0, r6
 8001148:	4540      	cmp	r0, r8
 800114a:	d9f5      	bls.n	8001138 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 800114c:	2003      	movs	r0, #3
 800114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001152:	2903      	cmp	r1, #3
 8001154:	d102      	bne.n	800115c <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001156:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800115a:	e7de      	b.n	800111a <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800115c:	2901      	cmp	r1, #1
 800115e:	d102      	bne.n	8001166 <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001160:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001164:	e7d9      	b.n	800111a <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001166:	f012 0f04 	tst.w	r2, #4
 800116a:	e7d6      	b.n	800111a <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800116c:	2b03      	cmp	r3, #3
 800116e:	d10b      	bne.n	8001188 <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001176:	2b18      	cmp	r3, #24
 8001178:	f43f af6f 	beq.w	800105a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800117c:	f7ff fa74 	bl	8000668 <HAL_GetTick>
 8001180:	1b80      	subs	r0, r0, r6
 8001182:	4540      	cmp	r0, r8
 8001184:	d9f4      	bls.n	8001170 <HAL_RCC_ClockConfig+0x134>
 8001186:	e7e1      	b.n	800114c <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001188:	2b01      	cmp	r3, #1
 800118a:	d110      	bne.n	80011ae <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001192:	2b08      	cmp	r3, #8
 8001194:	f43f af61 	beq.w	800105a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001198:	f7ff fa66 	bl	8000668 <HAL_GetTick>
 800119c:	1b80      	subs	r0, r0, r6
 800119e:	4540      	cmp	r0, r8
 80011a0:	d9f4      	bls.n	800118c <HAL_RCC_ClockConfig+0x150>
 80011a2:	e7d3      	b.n	800114c <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a4:	f7ff fa60 	bl	8000668 <HAL_GetTick>
 80011a8:	1b80      	subs	r0, r0, r6
 80011aa:	4540      	cmp	r0, r8
 80011ac:	d8ce      	bhi.n	800114c <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	f013 0f38 	tst.w	r3, #56	; 0x38
 80011b4:	d1f6      	bne.n	80011a4 <HAL_RCC_ClockConfig+0x168>
 80011b6:	e750      	b.n	800105a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	f023 0307 	bic.w	r3, r3, #7
 80011be:	432b      	orrs	r3, r5
 80011c0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	429d      	cmp	r5, r3
 80011ca:	d18e      	bne.n	80010ea <HAL_RCC_ClockConfig+0xae>
 80011cc:	e74c      	b.n	8001068 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80011ce:	4905      	ldr	r1, [pc, #20]	; (80011e4 <HAL_RCC_ClockConfig+0x1a8>)
 80011d0:	6920      	ldr	r0, [r4, #16]
 80011d2:	698b      	ldr	r3, [r1, #24]
 80011d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011d8:	4303      	orrs	r3, r0
 80011da:	618b      	str	r3, [r1, #24]
 80011dc:	e748      	b.n	8001070 <HAL_RCC_ClockConfig+0x34>
 80011de:	bf00      	nop
 80011e0:	52002000 	.word	0x52002000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	08002f96 	.word	0x08002f96
 80011ec:	20000008 	.word	0x20000008

080011f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011f0:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 80011f2:	f000 fed5 	bl	8001fa0 <HAL_RCCEx_GetD1SysClockFreq>
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_RCC_GetHCLKFreq+0x28>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	fa92 f2a2 	rbit	r2, r2
 8001200:	fab2 f282 	clz	r2, r2
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	40d3      	lsrs	r3, r2
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_RCC_GetHCLKFreq+0x2c>)
 800120c:	5cd3      	ldrb	r3, [r2, r3]
 800120e:	40d8      	lsrs	r0, r3
 8001210:	4b03      	ldr	r3, [pc, #12]	; (8001220 <HAL_RCC_GetHCLKFreq+0x30>)
 8001212:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001214:	bd08      	pop	{r3, pc}
 8001216:	bf00      	nop
 8001218:	58024400 	.word	0x58024400
 800121c:	08002f96 	.word	0x08002f96
 8001220:	2000000c 	.word	0x2000000c

08001224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001224:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8001226:	f7ff ffe3 	bl	80011f0 <HAL_RCC_GetHCLKFreq>
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800122c:	2210      	movs	r2, #16
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	fa92 f2a2 	rbit	r2, r2
 8001234:	fab2 f282 	clz	r2, r2
 8001238:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800123c:	40d3      	lsrs	r3, r2
 800123e:	4a03      	ldr	r2, [pc, #12]	; (800124c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001240:	5cd3      	ldrb	r3, [r2, r3]
}
 8001242:	40d8      	lsrs	r0, r3
 8001244:	bd08      	pop	{r3, pc}
 8001246:	bf00      	nop
 8001248:	58024400 	.word	0x58024400
 800124c:	08002f96 	.word	0x08002f96

08001250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001250:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8001252:	f7ff ffcd 	bl	80011f0 <HAL_RCC_GetHCLKFreq>
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	fa92 f2a2 	rbit	r2, r2
 8001262:	fab2 f282 	clz	r2, r2
 8001266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800126a:	40d3      	lsrs	r3, r2
 800126c:	4a02      	ldr	r2, [pc, #8]	; (8001278 <HAL_RCC_GetPCLK2Freq+0x28>)
 800126e:	5cd3      	ldrb	r3, [r2, r3]
}
 8001270:	40d8      	lsrs	r0, r3
 8001272:	bd08      	pop	{r3, pc}
 8001274:	58024400 	.word	0x58024400
 8001278:	08002f96 	.word	0x08002f96

0800127c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800127e:	4c31      	ldr	r4, [pc, #196]	; (8001344 <RCCEx_PLL2_Config+0xc8>)
{
 8001280:	4606      	mov	r6, r0
 8001282:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b03      	cmp	r3, #3
 800128c:	d058      	beq.n	8001340 <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001294:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001296:	f7ff f9e7 	bl	8000668 <HAL_GetTick>
 800129a:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	011a      	lsls	r2, r3, #4
 80012a0:	d43a      	bmi.n	8001318 <RCCEx_PLL2_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80012a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012a4:	6832      	ldr	r2, [r6, #0]
 80012a6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80012aa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80012ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80012b0:	68b3      	ldr	r3, [r6, #8]
 80012b2:	68f2      	ldr	r2, [r6, #12]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	3a01      	subs	r2, #1
 80012b8:	025b      	lsls	r3, r3, #9
 80012ba:	0412      	lsls	r2, r2, #16
 80012bc:	b29b      	uxth	r3, r3
 80012be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80012c2:	4313      	orrs	r3, r2
 80012c4:	6872      	ldr	r2, [r6, #4]
 80012c6:	3a01      	subs	r2, #1
 80012c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012cc:	4313      	orrs	r3, r2
 80012ce:	6932      	ldr	r2, [r6, #16]
 80012d0:	3a01      	subs	r2, #1
 80012d2:	0612      	lsls	r2, r2, #24
 80012d4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80012d8:	4313      	orrs	r3, r2
 80012da:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80012dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012de:	6972      	ldr	r2, [r6, #20]
 80012e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80012e4:	4313      	orrs	r3, r2
 80012e6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80012e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012ea:	69b2      	ldr	r2, [r6, #24]
 80012ec:	f023 0320 	bic.w	r3, r3, #32
 80012f0:	4313      	orrs	r3, r2
 80012f2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80012f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80012f6:	b9b5      	cbnz	r5, 8001326 <RCCEx_PLL2_Config+0xaa>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80012f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80012fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80012fe:	4c11      	ldr	r4, [pc, #68]	; (8001344 <RCCEx_PLL2_Config+0xc8>)
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001306:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001308:	f7ff f9ae 	bl	8000668 <HAL_GetTick>
 800130c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	d50f      	bpl.n	8001334 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8001314:	2000      	movs	r0, #0
 8001316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001318:	f7ff f9a6 	bl	8000668 <HAL_GetTick>
 800131c:	1bc0      	subs	r0, r0, r7
 800131e:	2802      	cmp	r0, #2
 8001320:	d9bc      	bls.n	800129c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8001322:	2003      	movs	r0, #3
 8001324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001326:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001328:	bf0c      	ite	eq
 800132a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800132e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8001332:	e7e3      	b.n	80012fc <RCCEx_PLL2_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001334:	f7ff f998 	bl	8000668 <HAL_GetTick>
 8001338:	1b40      	subs	r0, r0, r5
 800133a:	2802      	cmp	r0, #2
 800133c:	d9e7      	bls.n	800130e <RCCEx_PLL2_Config+0x92>
 800133e:	e7f0      	b.n	8001322 <RCCEx_PLL2_Config+0xa6>
    return HAL_ERROR;
 8001340:	2001      	movs	r0, #1
}
 8001342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001344:	58024400 	.word	0x58024400

08001348 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8001348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800134a:	4c31      	ldr	r4, [pc, #196]	; (8001410 <RCCEx_PLL3_Config+0xc8>)
{
 800134c:	4606      	mov	r6, r0
 800134e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8001350:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b03      	cmp	r3, #3
 8001358:	d058      	beq.n	800140c <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001360:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001362:	f7ff f981 	bl	8000668 <HAL_GetTick>
 8001366:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	009a      	lsls	r2, r3, #2
 800136c:	d43a      	bmi.n	80013e4 <RCCEx_PLL3_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800136e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001370:	6832      	ldr	r2, [r6, #0]
 8001372:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8001376:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800137a:	62a3      	str	r3, [r4, #40]	; 0x28
 800137c:	68b3      	ldr	r3, [r6, #8]
 800137e:	68f2      	ldr	r2, [r6, #12]
 8001380:	3b01      	subs	r3, #1
 8001382:	3a01      	subs	r2, #1
 8001384:	025b      	lsls	r3, r3, #9
 8001386:	0412      	lsls	r2, r2, #16
 8001388:	b29b      	uxth	r3, r3
 800138a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800138e:	4313      	orrs	r3, r2
 8001390:	6872      	ldr	r2, [r6, #4]
 8001392:	3a01      	subs	r2, #1
 8001394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001398:	4313      	orrs	r3, r2
 800139a:	6932      	ldr	r2, [r6, #16]
 800139c:	3a01      	subs	r2, #1
 800139e:	0612      	lsls	r2, r2, #24
 80013a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80013a4:	4313      	orrs	r3, r2
 80013a6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80013a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013aa:	6972      	ldr	r2, [r6, #20]
 80013ac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80013b0:	4313      	orrs	r3, r2
 80013b2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80013b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013b6:	69b2      	ldr	r2, [r6, #24]
 80013b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013bc:	4313      	orrs	r3, r2
 80013be:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80013c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80013c2:	b9b5      	cbnz	r5, 80013f2 <RCCEx_PLL3_Config+0xaa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80013c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80013c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80013ca:	4c11      	ldr	r4, [pc, #68]	; (8001410 <RCCEx_PLL3_Config+0xc8>)
 80013cc:	6823      	ldr	r3, [r4, #0]
 80013ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013d4:	f7ff f948 	bl	8000668 <HAL_GetTick>
 80013d8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80013da:	6823      	ldr	r3, [r4, #0]
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	d50f      	bpl.n	8001400 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 80013e0:	2000      	movs	r0, #0
 80013e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80013e4:	f7ff f940 	bl	8000668 <HAL_GetTick>
 80013e8:	1bc0      	subs	r0, r0, r7
 80013ea:	2802      	cmp	r0, #2
 80013ec:	d9bc      	bls.n	8001368 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80013ee:	2003      	movs	r0, #3
 80013f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80013f2:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80013f4:	bf0c      	ite	eq
 80013f6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80013fa:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80013fe:	e7e3      	b.n	80013c8 <RCCEx_PLL3_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001400:	f7ff f932 	bl	8000668 <HAL_GetTick>
 8001404:	1b40      	subs	r0, r0, r5
 8001406:	2802      	cmp	r0, #2
 8001408:	d9e7      	bls.n	80013da <RCCEx_PLL3_Config+0x92>
 800140a:	e7f0      	b.n	80013ee <RCCEx_PLL3_Config+0xa6>
    return HAL_ERROR;
 800140c:	2001      	movs	r0, #1
}
 800140e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001410:	58024400 	.word	0x58024400

08001414 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001418:	6804      	ldr	r4, [r0, #0]
{
 800141a:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800141c:	f014 6000 	ands.w	r0, r4, #134217728	; 0x8000000
 8001420:	d014      	beq.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001428:	d018      	beq.n	800145c <HAL_RCCEx_PeriphCLKConfig+0x48>
 800142a:	d802      	bhi.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800142c:	b183      	cbz	r3, 8001450 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 800142e:	2401      	movs	r4, #1
 8001430:	e01b      	b.n	800146a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001436:	d023      	beq.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8001438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800143c:	d1f7      	bne.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800143e:	4aa6      	ldr	r2, [pc, #664]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001440:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8001442:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001444:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001448:	430b      	orrs	r3, r1
 800144a:	6513      	str	r3, [r2, #80]	; 0x50
 800144c:	2400      	movs	r4, #0
 800144e:	e00c      	b.n	800146a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001450:	4aa1      	ldr	r2, [pc, #644]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001452:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001458:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800145a:	e7f0      	b.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800145c:	2102      	movs	r1, #2
 800145e:	1d28      	adds	r0, r5, #4
 8001460:	f7ff ff0c 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001464:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8001466:	2800      	cmp	r0, #0
 8001468:	d0e9      	beq.n	800143e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800146a:	682b      	ldr	r3, [r5, #0]
 800146c:	05de      	lsls	r6, r3, #23
 800146e:	d53c      	bpl.n	80014ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001470:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001472:	2b04      	cmp	r3, #4
 8001474:	d834      	bhi.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001476:	e8df f003 	tbb	[pc, r3]
 800147a:	1009      	.short	0x1009
 800147c:	0e2d      	.short	0x0e2d
 800147e:	0e          	.byte	0x0e
 800147f:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001480:	2102      	movs	r1, #2
 8001482:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001486:	f7ff ff5f 	bl	8001348 <RCCEx_PLL3_Config>
 800148a:	e7eb      	b.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800148c:	4a92      	ldr	r2, [pc, #584]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800148e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001496:	4626      	mov	r6, r4
 8001498:	e004      	b.n	80014a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800149a:	2100      	movs	r1, #0
 800149c:	1d28      	adds	r0, r5, #4
 800149e:	f7ff feed 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80014a2:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80014a4:	b9ee      	cbnz	r6, 80014e2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80014a6:	4a8c      	ldr	r2, [pc, #560]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80014a8:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80014aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80014ac:	f023 0307 	bic.w	r3, r3, #7
 80014b0:	430b      	orrs	r3, r1
 80014b2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	0598      	lsls	r0, r3, #22
 80014b8:	d527      	bpl.n	800150a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 80014ba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80014bc:	2b80      	cmp	r3, #128	; 0x80
 80014be:	d043      	beq.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80014c0:	d815      	bhi.n	80014ee <HAL_RCCEx_PeriphCLKConfig+0xda>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d034      	beq.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80014c6:	2b40      	cmp	r3, #64	; 0x40
 80014c8:	d038      	beq.n	800153c <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 80014ca:	2601      	movs	r6, #1
      status |= ret;
 80014cc:	ea44 0006 	orr.w	r0, r4, r6
 80014d0:	b2c4      	uxtb	r4, r0
 80014d2:	e01a      	b.n	800150a <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80014d4:	2100      	movs	r1, #0
 80014d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80014da:	f7ff ff35 	bl	8001348 <RCCEx_PLL3_Config>
 80014de:	e7e0      	b.n	80014a2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 80014e0:	2601      	movs	r6, #1
      status |= ret;
 80014e2:	ea44 0006 	orr.w	r0, r4, r6
 80014e6:	b2c4      	uxtb	r4, r0
 80014e8:	e7e4      	b.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80014ea:	4626      	mov	r6, r4
 80014ec:	e7e2      	b.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 80014ee:	2bc0      	cmp	r3, #192	; 0xc0
 80014f0:	d002      	beq.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80014f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014f6:	d1e8      	bne.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 80014f8:	2e00      	cmp	r6, #0
 80014fa:	d1e7      	bne.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80014fc:	4a76      	ldr	r2, [pc, #472]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80014fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8001500:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001502:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001506:	430b      	orrs	r3, r1
 8001508:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800150a:	682b      	ldr	r3, [r5, #0]
 800150c:	0559      	lsls	r1, r3, #21
 800150e:	d531      	bpl.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001510:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8001514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001518:	d04b      	beq.n	80015b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800151a:	d81b      	bhi.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800151c:	2b00      	cmp	r3, #0
 800151e:	d03c      	beq.n	800159a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001524:	d03f      	beq.n	80015a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 8001526:	2601      	movs	r6, #1
      status |= ret;
 8001528:	ea44 0006 	orr.w	r0, r4, r6
 800152c:	b2c4      	uxtb	r4, r0
 800152e:	e021      	b.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001530:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001532:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800153a:	e7dd      	b.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800153c:	2100      	movs	r1, #0
 800153e:	1d28      	adds	r0, r5, #4
 8001540:	f7ff fe9c 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001544:	4606      	mov	r6, r0
      break;
 8001546:	e7d7      	b.n	80014f8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001548:	2100      	movs	r1, #0
 800154a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800154e:	f7ff fefb 	bl	8001348 <RCCEx_PLL3_Config>
 8001552:	e7f7      	b.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001554:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001558:	d002      	beq.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800155a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800155e:	d1e2      	bne.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 8001560:	2e00      	cmp	r6, #0
 8001562:	d1e1      	bne.n	8001528 <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001564:	4a5c      	ldr	r2, [pc, #368]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001566:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800156a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800156c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001570:	430b      	orrs	r3, r1
 8001572:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	051a      	lsls	r2, r3, #20
 8001578:	d531      	bpl.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 800157a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800157e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001582:	d045      	beq.n	8001610 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8001584:	d81b      	bhi.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001586:	2b00      	cmp	r3, #0
 8001588:	d036      	beq.n	80015f8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800158a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800158e:	d039      	beq.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 8001590:	2601      	movs	r6, #1
      status |= ret;
 8001592:	ea44 0006 	orr.w	r0, r4, r6
 8001596:	b2c4      	uxtb	r4, r0
 8001598:	e021      	b.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800159a:	4a4f      	ldr	r2, [pc, #316]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800159c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800159e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80015a4:	e7dc      	b.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80015a6:	2100      	movs	r1, #0
 80015a8:	1d28      	adds	r0, r5, #4
 80015aa:	f7ff fe67 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80015ae:	4606      	mov	r6, r0
      break;
 80015b0:	e7d6      	b.n	8001560 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80015b2:	2100      	movs	r1, #0
 80015b4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80015b8:	f7ff fec6 	bl	8001348 <RCCEx_PLL3_Config>
 80015bc:	e7f7      	b.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 80015be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80015c2:	d002      	beq.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80015c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015c8:	d1e2      	bne.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 80015ca:	2e00      	cmp	r6, #0
 80015cc:	d1e1      	bne.n	8001592 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80015ce:	4a42      	ldr	r2, [pc, #264]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80015d0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80015d4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80015d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015da:	430b      	orrs	r3, r1
 80015dc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	019b      	lsls	r3, r3, #6
 80015e2:	d528      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 80015e4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d037      	beq.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x246>
 80015ea:	d817      	bhi.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x208>
 80015ec:	b1d3      	cbz	r3, 8001624 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 80015ee:	2601      	movs	r6, #1
      status |= ret;
 80015f0:	ea44 0006 	orr.w	r0, r4, r6
 80015f4:	b2c4      	uxtb	r4, r0
 80015f6:	e01e      	b.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015f8:	4a37      	ldr	r2, [pc, #220]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80015fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001602:	e7e2      	b.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001604:	2100      	movs	r1, #0
 8001606:	1d28      	adds	r0, r5, #4
 8001608:	f7ff fe38 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800160c:	4606      	mov	r6, r0
      break;
 800160e:	e7dc      	b.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001610:	2100      	movs	r1, #0
 8001612:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001616:	f7ff fe97 	bl	8001348 <RCCEx_PLL3_Config>
 800161a:	e7f7      	b.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 800161c:	2b20      	cmp	r3, #32
 800161e:	d022      	beq.n	8001666 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8001620:	2b30      	cmp	r3, #48	; 0x30
 8001622:	d1e4      	bne.n	80015ee <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 8001624:	2e00      	cmp	r6, #0
 8001626:	d1e3      	bne.n	80015f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001628:	4a2b      	ldr	r2, [pc, #172]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800162a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800162c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800162e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001632:	430b      	orrs	r3, r1
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	04df      	lsls	r7, r3, #19
 800163a:	d529      	bpl.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800163c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800163e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001642:	d042      	beq.n	80016ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001644:	d815      	bhi.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d033      	beq.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800164a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164e:	d036      	beq.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 8001650:	2601      	movs	r6, #1
      status |= ret;
 8001652:	ea44 0006 	orr.w	r0, r4, r6
 8001656:	b2c4      	uxtb	r4, r0
 8001658:	e01a      	b.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800165c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800165e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001662:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001664:	e7de      	b.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001666:	2102      	movs	r1, #2
 8001668:	1d28      	adds	r0, r5, #4
 800166a:	f7ff fe07 	bl	800127c <RCCEx_PLL2_Config>
 800166e:	4606      	mov	r6, r0
      break;
 8001670:	e7d8      	b.n	8001624 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001676:	d002      	beq.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8001678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800167c:	d1e8      	bne.n	8001650 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 800167e:	2e00      	cmp	r6, #0
 8001680:	d1e7      	bne.n	8001652 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001684:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8001686:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800168c:	430b      	orrs	r3, r1
 800168e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	0498      	lsls	r0, r3, #18
 8001694:	d534      	bpl.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001696:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800169c:	d048      	beq.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800169e:	d81d      	bhi.n	80016dc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80016a0:	b32b      	cbz	r3, 80016ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80016a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a6:	d03d      	beq.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 80016a8:	2601      	movs	r6, #1
      status |= ret;
 80016aa:	ea44 0006 	orr.w	r0, r4, r6
 80016ae:	b2c4      	uxtb	r4, r0
 80016b0:	e026      	b.n	8001700 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80016b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80016bc:	e7df      	b.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80016be:	2100      	movs	r1, #0
 80016c0:	1d28      	adds	r0, r5, #4
 80016c2:	f7ff fddb 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80016c6:	4606      	mov	r6, r0
      break;
 80016c8:	e7d9      	b.n	800167e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80016ca:	2100      	movs	r1, #0
 80016cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80016d0:	f7ff fe3a 	bl	8001348 <RCCEx_PLL3_Config>
 80016d4:	e7f7      	b.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 80016d6:	bf00      	nop
 80016d8:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80016dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016e0:	d005      	beq.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80016e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e6:	d002      	beq.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80016e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80016ec:	d1dc      	bne.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 80016ee:	2e00      	cmp	r6, #0
 80016f0:	d1db      	bne.n	80016aa <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80016f2:	4aa0      	ldr	r2, [pc, #640]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80016f4:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80016f6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80016f8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	0459      	lsls	r1, r3, #17
 8001704:	d52d      	bpl.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001706:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 800170a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800170e:	d04c      	beq.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x396>
 8001710:	d814      	bhi.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001712:	b1e3      	cbz	r3, 800174e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001714:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001718:	d041      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      ret = HAL_ERROR;
 800171a:	2601      	movs	r6, #1
      status |= ret;
 800171c:	ea44 0006 	orr.w	r0, r4, r6
 8001720:	b2c4      	uxtb	r4, r0
 8001722:	e01e      	b.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001724:	2101      	movs	r1, #1
 8001726:	1d28      	adds	r0, r5, #4
 8001728:	f7ff fda8 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800172c:	4606      	mov	r6, r0
      break;
 800172e:	e7de      	b.n	80016ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001730:	2101      	movs	r1, #1
 8001732:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001736:	f7ff fe07 	bl	8001348 <RCCEx_PLL3_Config>
 800173a:	e7f7      	b.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 800173c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001740:	d005      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001746:	d002      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001748:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800174c:	d1e5      	bne.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 800174e:	2e00      	cmp	r6, #0
 8001750:	d1e4      	bne.n	800171c <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001752:	4a88      	ldr	r2, [pc, #544]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001754:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8001758:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800175a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800175e:	430b      	orrs	r3, r1
 8001760:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001762:	682b      	ldr	r3, [r5, #0]
 8001764:	041a      	lsls	r2, r3, #16
 8001766:	d50f      	bpl.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 8001768:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800176a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800176e:	d022      	beq.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8001770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001774:	d025      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001776:	bb53      	cbnz	r3, 80017ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(ret == HAL_OK)
 8001778:	bb56      	cbnz	r6, 80017d0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800177a:	4a7e      	ldr	r2, [pc, #504]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800177c:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800177e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001780:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001784:	430b      	orrs	r3, r1
 8001786:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	01db      	lsls	r3, r3, #7
 800178c:	d532      	bpl.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 800178e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001790:	2b03      	cmp	r3, #3
 8001792:	f200 808a 	bhi.w	80018aa <HAL_RCCEx_PeriphCLKConfig+0x496>
 8001796:	e8df f003 	tbb	[pc, r3]
 800179a:	1f24      	.short	0x1f24
 800179c:	2482      	.short	0x2482
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800179e:	2101      	movs	r1, #1
 80017a0:	1d28      	adds	r0, r5, #4
 80017a2:	f7ff fd6b 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80017a6:	4606      	mov	r6, r0
      break;
 80017a8:	e7d1      	b.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80017aa:	2101      	movs	r1, #1
 80017ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80017b0:	f7ff fdca 	bl	8001348 <RCCEx_PLL3_Config>
 80017b4:	e7f7      	b.n	80017a6 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017b6:	4a6f      	ldr	r2, [pc, #444]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80017b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80017ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017be:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80017c0:	e7da      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80017c2:	2101      	movs	r1, #1
 80017c4:	1d28      	adds	r0, r5, #4
 80017c6:	f7ff fd59 	bl	800127c <RCCEx_PLL2_Config>
 80017ca:	4606      	mov	r6, r0
      break;
 80017cc:	e7d4      	b.n	8001778 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 80017ce:	2601      	movs	r6, #1
      status |= ret;
 80017d0:	ea44 0006 	orr.w	r0, r4, r6
 80017d4:	b2c4      	uxtb	r4, r0
 80017d6:	e7d7      	b.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017d8:	4a66      	ldr	r2, [pc, #408]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80017da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80017dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80017e2:	2e00      	cmp	r6, #0
 80017e4:	d162      	bne.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x498>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80017e6:	4a63      	ldr	r2, [pc, #396]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80017e8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80017ea:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80017ec:	f023 0303 	bic.w	r3, r3, #3
 80017f0:	430b      	orrs	r3, r1
 80017f2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	025f      	lsls	r7, r3, #9
 80017f8:	d542      	bpl.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017fa:	4f5f      	ldr	r7, [pc, #380]	; (8001978 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001804:	f7fe ff30 	bl	8000668 <HAL_GetTick>
 8001808:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	05d8      	lsls	r0, r3, #23
 800180e:	d551      	bpl.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(ret == HAL_OK)
 8001810:	2e00      	cmp	r6, #0
 8001812:	d156      	bne.n	80018c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001814:	4b57      	ldr	r3, [pc, #348]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001816:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 800181a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800181c:	4042      	eors	r2, r0
 800181e:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001822:	d00b      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001824:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001826:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001828:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800182c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001830:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001832:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001834:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001838:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800183a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800183c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8001840:	d108      	bne.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x440>
        tickstart = HAL_GetTick();
 8001842:	f7fe ff11 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001846:	4f4b      	ldr	r7, [pc, #300]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
        tickstart = HAL_GetTick();
 8001848:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184a:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001850:	0799      	lsls	r1, r3, #30
 8001852:	d53a      	bpl.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001854:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8001858:	4946      	ldr	r1, [pc, #280]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800185a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800185e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001862:	d13d      	bne.n	80018e0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8001864:	6908      	ldr	r0, [r1, #16]
 8001866:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8001868:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800186c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8001870:	4302      	orrs	r2, r0
 8001872:	610a      	str	r2, [r1, #16]
 8001874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001878:	4a3e      	ldr	r2, [pc, #248]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800187a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800187c:	430b      	orrs	r3, r1
 800187e:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001880:	682b      	ldr	r3, [r5, #0]
 8001882:	07da      	lsls	r2, r3, #31
 8001884:	d53f      	bpl.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001886:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8001888:	2b10      	cmp	r3, #16
 800188a:	d04d      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800188c:	d82c      	bhi.n	80018e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800188e:	b38b      	cbz	r3, 80018f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001890:	2b08      	cmp	r3, #8
 8001892:	d043      	beq.n	800191c <HAL_RCCEx_PeriphCLKConfig+0x508>
      ret = HAL_ERROR;
 8001894:	2601      	movs	r6, #1
      status |= ret;
 8001896:	ea44 0006 	orr.w	r0, r4, r6
 800189a:	b2c4      	uxtb	r4, r0
 800189c:	e033      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800189e:	2102      	movs	r1, #2
 80018a0:	1d28      	adds	r0, r5, #4
 80018a2:	f7ff fceb 	bl	800127c <RCCEx_PLL2_Config>
 80018a6:	4606      	mov	r6, r0
      break;
 80018a8:	e79b      	b.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 80018aa:	2601      	movs	r6, #1
      status |= ret;
 80018ac:	ea44 0006 	orr.w	r0, r4, r6
 80018b0:	b2c4      	uxtb	r4, r0
 80018b2:	e79f      	b.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b4:	f7fe fed8 	bl	8000668 <HAL_GetTick>
 80018b8:	eba0 0008 	sub.w	r0, r0, r8
 80018bc:	2864      	cmp	r0, #100	; 0x64
 80018be:	d9a4      	bls.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 80018c0:	2603      	movs	r6, #3
      status |= ret;
 80018c2:	ea44 0006 	orr.w	r0, r4, r6
 80018c6:	b2c4      	uxtb	r4, r0
 80018c8:	e7da      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ca:	f7fe fecd 	bl	8000668 <HAL_GetTick>
 80018ce:	eba0 0008 	sub.w	r0, r0, r8
 80018d2:	4548      	cmp	r0, r9
 80018d4:	d9bb      	bls.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x43a>
        status |= ret;
 80018d6:	f044 0003 	orr.w	r0, r4, #3
            ret = HAL_TIMEOUT;
 80018da:	2603      	movs	r6, #3
        status |= ret;
 80018dc:	b2c4      	uxtb	r4, r0
 80018de:	e7cf      	b.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80018e0:	690a      	ldr	r2, [r1, #16]
 80018e2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80018e6:	e7c4      	b.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->Usart16ClockSelection)
 80018e8:	2b20      	cmp	r3, #32
 80018ea:	d003      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80018ec:	2b28      	cmp	r3, #40	; 0x28
 80018ee:	d001      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80018f0:	2b18      	cmp	r3, #24
 80018f2:	d1cf      	bne.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x480>
    if(ret == HAL_OK)
 80018f4:	2e00      	cmp	r6, #0
 80018f6:	d1ce      	bne.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x482>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80018f8:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80018fa:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80018fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80018fe:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001902:	430b      	orrs	r3, r1
 8001904:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	079b      	lsls	r3, r3, #30
 800190a:	d520      	bpl.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800190c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800190e:	2b05      	cmp	r3, #5
 8001910:	d836      	bhi.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 8001912:	e8df f003 	tbb	[pc, r3]
 8001916:	0f14      	.short	0x0f14
 8001918:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800191c:	2101      	movs	r1, #1
 800191e:	1d28      	adds	r0, r5, #4
 8001920:	f7ff fcac 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001924:	4606      	mov	r6, r0
      break;
 8001926:	e7e5      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001928:	2101      	movs	r1, #1
 800192a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800192e:	f7ff fd0b 	bl	8001348 <RCCEx_PLL3_Config>
 8001932:	e7f7      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001934:	2101      	movs	r1, #1
 8001936:	1d28      	adds	r0, r5, #4
 8001938:	f7ff fca0 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800193c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800193e:	bb06      	cbnz	r6, 8001982 <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001942:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8001944:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001946:	f023 0307 	bic.w	r3, r3, #7
 800194a:	430b      	orrs	r3, r1
 800194c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	075f      	lsls	r7, r3, #29
 8001952:	d528      	bpl.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8001954:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8001958:	2b05      	cmp	r3, #5
 800195a:	d83c      	bhi.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 800195c:	e8df f003 	tbb	[pc, r3]
 8001960:	1a35151a 	.word	0x1a35151a
 8001964:	1a1a      	.short	0x1a1a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001966:	2101      	movs	r1, #1
 8001968:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800196c:	f7ff fcec 	bl	8001348 <RCCEx_PLL3_Config>
 8001970:	e7e4      	b.n	800193c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8001972:	bf00      	nop
 8001974:	58024400 	.word	0x58024400
 8001978:	58024800 	.word	0x58024800
 800197c:	00ffffcf 	.word	0x00ffffcf
      ret = HAL_ERROR;
 8001980:	2601      	movs	r6, #1
      status |= ret;
 8001982:	ea44 0006 	orr.w	r0, r4, r6
 8001986:	b2c4      	uxtb	r4, r0
 8001988:	e7e1      	b.n	800194e <HAL_RCCEx_PeriphCLKConfig+0x53a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800198a:	2101      	movs	r1, #1
 800198c:	1d28      	adds	r0, r5, #4
 800198e:	f7ff fc75 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001992:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001994:	bb06      	cbnz	r6, 80019d8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001996:	4a99      	ldr	r2, [pc, #612]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001998:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800199c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800199e:	f023 0307 	bic.w	r3, r3, #7
 80019a2:	430b      	orrs	r3, r1
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80019a6:	682b      	ldr	r3, [r5, #0]
 80019a8:	0698      	lsls	r0, r3, #26
 80019aa:	d52c      	bpl.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80019ac:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 80019b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019b4:	d03f      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x622>
 80019b6:	d813      	bhi.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80019b8:	b1db      	cbz	r3, 80019f2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80019ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019be:	d034      	beq.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0x616>
      ret = HAL_ERROR;
 80019c0:	2601      	movs	r6, #1
      status |= ret;
 80019c2:	ea44 0006 	orr.w	r0, r4, r6
 80019c6:	b2c4      	uxtb	r4, r0
 80019c8:	e01d      	b.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80019ca:	2101      	movs	r1, #1
 80019cc:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80019d0:	f7ff fcba 	bl	8001348 <RCCEx_PLL3_Config>
 80019d4:	e7dd      	b.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = HAL_ERROR;
 80019d6:	2601      	movs	r6, #1
      status |= ret;
 80019d8:	ea44 0006 	orr.w	r0, r4, r6
 80019dc:	b2c4      	uxtb	r4, r0
 80019de:	e7e2      	b.n	80019a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e4:	d005      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80019e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ea:	d002      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80019ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80019f0:	d1e6      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    if(ret == HAL_OK)
 80019f2:	2e00      	cmp	r6, #0
 80019f4:	d1e5      	bne.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80019f6:	4a81      	ldr	r2, [pc, #516]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80019f8:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80019fc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80019fe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001a02:	430b      	orrs	r3, r1
 8001a04:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8001a06:	682b      	ldr	r3, [r5, #0]
 8001a08:	0659      	lsls	r1, r3, #25
 8001a0a:	d52d      	bpl.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x654>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001a0c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8001a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a14:	d042      	beq.n	8001a9c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8001a16:	d814      	bhi.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8001a18:	b1e3      	cbz	r3, 8001a54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d037      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      ret = HAL_ERROR;
 8001a20:	2601      	movs	r6, #1
      status |= ret;
 8001a22:	ea44 0006 	orr.w	r0, r4, r6
 8001a26:	b2c4      	uxtb	r4, r0
 8001a28:	e01e      	b.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x654>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	1d28      	adds	r0, r5, #4
 8001a2e:	f7ff fc25 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a32:	4606      	mov	r6, r0
      break;
 8001a34:	e7dd      	b.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a36:	2102      	movs	r1, #2
 8001a38:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a3c:	f7ff fc84 	bl	8001348 <RCCEx_PLL3_Config>
 8001a40:	e7f7      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a46:	d005      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001a48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001a4c:	d002      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001a4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8001a52:	d1e5      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    if(ret == HAL_OK)
 8001a54:	2e00      	cmp	r6, #0
 8001a56:	d1e4      	bne.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a58:	4a68      	ldr	r2, [pc, #416]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001a5a:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8001a5e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a60:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	061a      	lsls	r2, r3, #24
 8001a6c:	d52f      	bpl.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001a6e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8001a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a76:	f000 8095 	beq.w	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8001a7a:	d815      	bhi.n	8001aa8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8001a7c:	b1eb      	cbz	r3, 8001aba <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a82:	f000 8089 	beq.w	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = HAL_ERROR;
 8001a86:	2601      	movs	r6, #1
      status |= ret;
 8001a88:	ea44 0006 	orr.w	r0, r4, r6
 8001a8c:	b2c4      	uxtb	r4, r0
 8001a8e:	e01e      	b.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001a90:	2100      	movs	r1, #0
 8001a92:	1d28      	adds	r0, r5, #4
 8001a94:	f7ff fbf2 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a98:	4606      	mov	r6, r0
      break;
 8001a9a:	e7db      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001aa2:	f7ff fc51 	bl	8001348 <RCCEx_PLL3_Config>
 8001aa6:	e7f7      	b.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x684>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aac:	d005      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001aae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001ab2:	d002      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001ab4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001ab8:	d1e5      	bne.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x672>
    if(ret == HAL_OK)
 8001aba:	2e00      	cmp	r6, #0
 8001abc:	d1e4      	bne.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8001abe:	4a4f      	ldr	r2, [pc, #316]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001ac0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8001ac4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ac6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001aca:	430b      	orrs	r3, r1
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8001ace:	682b      	ldr	r3, [r5, #0]
 8001ad0:	071b      	lsls	r3, r3, #28
 8001ad2:	d50b      	bpl.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8001ad4:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8001ad8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001adc:	d168      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ade:	2102      	movs	r1, #2
 8001ae0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001ae4:	f7ff fc30 	bl	8001348 <RCCEx_PLL3_Config>
 8001ae8:	4304      	orrs	r4, r0
 8001aea:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001aec:	682b      	ldr	r3, [r5, #0]
 8001aee:	06df      	lsls	r7, r3, #27
 8001af0:	d50b      	bpl.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8001af2:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8001af6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001afa:	d160      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001afc:	2102      	movs	r1, #2
 8001afe:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b02:	f7ff fc21 	bl	8001348 <RCCEx_PLL3_Config>
 8001b06:	4304      	orrs	r4, r0
 8001b08:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b0a:	682b      	ldr	r3, [r5, #0]
 8001b0c:	0318      	lsls	r0, r3, #12
 8001b0e:	d517      	bpl.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 8001b10:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001b14:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001b18:	d058      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8001b1a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x718>
 8001b20:	2900      	cmp	r1, #0
 8001b22:	d159      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001b24:	1d28      	adds	r0, r5, #4
 8001b26:	f7ff fba9 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b2a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001b2c:	2e00      	cmp	r6, #0
 8001b2e:	d154      	bne.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b30:	4a32      	ldr	r2, [pc, #200]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001b32:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001b36:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b38:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b40:	682b      	ldr	r3, [r5, #0]
 8001b42:	0359      	lsls	r1, r3, #13
 8001b44:	d519      	bpl.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch(PeriphClkInit->UsbClockSelection)
 8001b46:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b4e:	d048      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001b54:	d007      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8001b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b5a:	d149      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001b5e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001b66:	2e00      	cmp	r6, #0
 8001b68:	d143      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b6a:	4a24      	ldr	r2, [pc, #144]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001b6c:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8001b70:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001b72:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8001b7a:	682b      	ldr	r3, [r5, #0]
 8001b7c:	03da      	lsls	r2, r3, #15
 8001b7e:	d54d      	bpl.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x808>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001b80:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d03c      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8001b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8a:	f000 8099 	beq.w	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = HAL_ERROR;
 8001b8e:	2601      	movs	r6, #1
      status |= ret;
 8001b90:	ea44 0006 	orr.w	r0, r4, r6
 8001b94:	b2c4      	uxtb	r4, r0
 8001b96:	e041      	b.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001b98:	2100      	movs	r1, #0
 8001b9a:	1d28      	adds	r0, r5, #4
 8001b9c:	f7ff fb6e 	bl	800127c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ba0:	4606      	mov	r6, r0
      break;
 8001ba2:	e78a      	b.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001baa:	f7ff fbcd 	bl	8001348 <RCCEx_PLL3_Config>
 8001bae:	e7f7      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001bb2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001bb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6553      	str	r3, [r2, #84]	; 0x54
 8001bbc:	e796      	b.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001bc0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bca:	e79e      	b.n	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001bcc:	2102      	movs	r1, #2
 8001bce:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001bd2:	f7ff fbb9 	bl	8001348 <RCCEx_PLL3_Config>
 8001bd6:	e7a8      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = HAL_ERROR;
 8001bd8:	2601      	movs	r6, #1
      status |= ret;
 8001bda:	ea44 0006 	orr.w	r0, r4, r6
 8001bde:	b2c4      	uxtb	r4, r0
 8001be0:	e7ae      	b.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001be2:	2101      	movs	r1, #1
 8001be4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001be8:	f7ff fbae 	bl	8001348 <RCCEx_PLL3_Config>
 8001bec:	4606      	mov	r6, r0
      break;
 8001bee:	e7ba      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x752>
      ret = HAL_ERROR;
 8001bf0:	2601      	movs	r6, #1
      status |= ret;
 8001bf2:	ea44 0006 	orr.w	r0, r4, r6
 8001bf6:	b2c4      	uxtb	r4, r0
 8001bf8:	e7bf      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x766>
 8001bfa:	bf00      	nop
 8001bfc:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c00:	4a3b      	ldr	r2, [pc, #236]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c02:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c08:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001c0a:	2e00      	cmp	r6, #0
 8001c0c:	d1c0      	bne.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8001c0e:	4a38      	ldr	r2, [pc, #224]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c10:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8001c12:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001c1c:	682b      	ldr	r3, [r5, #0]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	d506      	bpl.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001c22:	2102      	movs	r1, #2
 8001c24:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001c28:	f7ff fb8e 	bl	8001348 <RCCEx_PLL3_Config>
 8001c2c:	4304      	orrs	r4, r0
 8001c2e:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8001c30:	682b      	ldr	r3, [r5, #0]
 8001c32:	039f      	lsls	r7, r3, #14
 8001c34:	d50e      	bpl.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x840>
    switch(PeriphClkInit->RngClockSelection)
 8001c36:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8001c38:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001c3c:	d051      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8001c3e:	d845      	bhi.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8001c40:	2900      	cmp	r1, #0
 8001c42:	d149      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    if(ret == HAL_OK)
 8001c44:	2e00      	cmp	r6, #0
 8001c46:	d148      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001c48:	4829      	ldr	r0, [pc, #164]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c4a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001c50:	430a      	orrs	r2, r1
 8001c52:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001c54:	02de      	lsls	r6, r3, #11
 8001c56:	d506      	bpl.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001c58:	4925      	ldr	r1, [pc, #148]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c5a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8001c5c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001c5e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001c62:	4302      	orrs	r2, r0
 8001c64:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001c66:	00d8      	lsls	r0, r3, #3
 8001c68:	d507      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001c6a:	4921      	ldr	r1, [pc, #132]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c6c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8001c70:	690a      	ldr	r2, [r1, #16]
 8001c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c76:	4302      	orrs	r2, r0
 8001c78:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001c7a:	0299      	lsls	r1, r3, #10
 8001c7c:	d506      	bpl.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001c7e:	491c      	ldr	r1, [pc, #112]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c80:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8001c82:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001c84:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001c88:	4302      	orrs	r2, r0
 8001c8a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8001c8c:	005a      	lsls	r2, r3, #1
 8001c8e:	d509      	bpl.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c90:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c92:	6911      	ldr	r1, [r2, #16]
 8001c94:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001c98:	6111      	str	r1, [r2, #16]
 8001c9a:	6911      	ldr	r1, [r2, #16]
 8001c9c:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8001ca0:	4301      	orrs	r1, r0
 8001ca2:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	da06      	bge.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8001ca8:	4a11      	ldr	r2, [pc, #68]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001caa:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001cac:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001cae:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001cb2:	430b      	orrs	r3, r1
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	1c20      	adds	r0, r4, #0
 8001cb8:	bf18      	it	ne
 8001cba:	2001      	movne	r0, #1
}
 8001cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	1d28      	adds	r0, r5, #4
 8001cc4:	f7ff fada 	bl	800127c <RCCEx_PLL2_Config>
 8001cc8:	4606      	mov	r6, r0
      break;
 8001cca:	e79e      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    switch(PeriphClkInit->RngClockSelection)
 8001ccc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001cd0:	d0b8      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8001cd2:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001cd6:	d0b5      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8001cd8:	2601      	movs	r6, #1
      status |= ret;
 8001cda:	ea44 0006 	orr.w	r0, r4, r6
 8001cde:	b2c4      	uxtb	r4, r0
 8001ce0:	e7b8      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ce2:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001ce4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001ce6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001cea:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8001cec:	e7aa      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8001cee:	bf00      	nop
 8001cf0:	58024400 	.word	0x58024400

08001cf4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8001cf4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8001cf6:	f7ff fa7b 	bl	80011f0 <HAL_RCC_GetHCLKFreq>
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8001cfc:	2210      	movs	r2, #16
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	fa92 f2a2 	rbit	r2, r2
 8001d04:	fab2 f282 	clz	r2, r2
 8001d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d0c:	40d3      	lsrs	r3, r2
 8001d0e:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
}
 8001d12:	40d8      	lsrs	r0, r3
 8001d14:	bd08      	pop	{r3, pc}
 8001d16:	bf00      	nop
 8001d18:	58024400 	.word	0x58024400
 8001d1c:	08002f96 	.word	0x08002f96

08001d20 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8001d20:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d22:	4c4a      	ldr	r4, [pc, #296]	; (8001e4c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001d24:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8001e50 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8001d28:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001d2a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001d2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001d2e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001d30:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001d34:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001d38:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001d3c:	4353      	muls	r3, r2
 8001d3e:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d42:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001d46:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001d48:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001d4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001d50:	d002      	beq.n	8001d58 <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 8001d52:	d30e      	bcc.n	8001d72 <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d068      	beq.n	8001e2a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001d58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d5a:	4a3e      	ldr	r2, [pc, #248]	; (8001e54 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 8001d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d60:	ee07 3a10 	vmov	s14, r3
 8001d64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d68:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d70:	e067      	b.n	8001e42 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	4a38      	ldr	r2, [pc, #224]	; (8001e58 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 8001d76:	f013 0f20 	tst.w	r3, #32
 8001d7a:	d042      	beq.n	8001e02 <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d7c:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001d7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d80:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d88:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001d8a:	fbb2 f2f1 	udiv	r2, r2, r1
 8001d8e:	ee07 2a10 	vmov	s14, r2
 8001d92:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001d96:	ee07 3a10 	vmov	s14, r3
 8001d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d9e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001da6:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001dac:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001dae:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001db2:	3301      	adds	r3, #1
 8001db4:	ee07 3a10 	vmov	s14, r3
 8001db8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dc0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001dc4:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8001dc8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001dca:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001dce:	3301      	adds	r3, #1
 8001dd0:	ee07 3a10 	vmov	s14, r3
 8001dd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dd8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ddc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001de0:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8001de4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001de6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001dea:	3301      	adds	r3, #1
 8001dec:	ee07 3a10 	vmov	s14, r3
 8001df0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001df4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001df8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001dfc:	edc0 6a02 	vstr	s13, [r0, #8]
 8001e00:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e08:	ee07 3a10 	vmov	s14, r3
 8001e0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e10:	fbb2 f3f1 	udiv	r3, r2, r1
 8001e14:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1c:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8001e28:	e7bf      	b.n	8001daa <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e2c:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 8001e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e32:	ee07 3a10 	vmov	s14, r3
 8001e36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e3a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001e42:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e46:	ee07 2a90 	vmov	s15, r2
 8001e4a:	e7e9      	b.n	8001e20 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	39000000 	.word	0x39000000
 8001e54:	003d0900 	.word	0x003d0900
 8001e58:	03d09000 	.word	0x03d09000
 8001e5c:	007a1200 	.word	0x007a1200

08001e60 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8001e60:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e62:	4c4a      	ldr	r4, [pc, #296]	; (8001f8c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001e64:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8001f90 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8001e68:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001e6a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001e6e:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001e70:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001e78:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001e7c:	4353      	muls	r3, r2
 8001e7e:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e82:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001e86:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001e88:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001e8c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001e90:	d002      	beq.n	8001e98 <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 8001e92:	d30e      	bcc.n	8001eb2 <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d068      	beq.n	8001f6a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001e98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e9a:	4a3e      	ldr	r2, [pc, #248]	; (8001f94 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8001e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea0:	ee07 3a10 	vmov	s14, r3
 8001ea4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ea8:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001eac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb0:	e067      	b.n	8001f82 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001eb2:	6823      	ldr	r3, [r4, #0]
 8001eb4:	4a38      	ldr	r2, [pc, #224]	; (8001f98 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8001eb6:	f013 0f20 	tst.w	r3, #32
 8001eba:	d042      	beq.n	8001f42 <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ebc:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ec0:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ec8:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001eca:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ece:	ee07 2a10 	vmov	s14, r2
 8001ed2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001ed6:	ee07 3a10 	vmov	s14, r3
 8001eda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ede:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001ee2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee6:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001eec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001eee:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	ee07 3a10 	vmov	s14, r3
 8001ef8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001efc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f00:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001f04:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8001f08:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f0a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001f0e:	3301      	adds	r3, #1
 8001f10:	ee07 3a10 	vmov	s14, r3
 8001f14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f1c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001f20:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8001f24:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001f26:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	ee07 3a10 	vmov	s14, r3
 8001f30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f38:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001f3c:	edc0 6a02 	vstr	s13, [r0, #8]
 8001f40:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f48:	ee07 3a10 	vmov	s14, r3
 8001f4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f50:	fbb2 f3f1 	udiv	r3, r2, r1
 8001f54:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5c:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8001f68:	e7bf      	b.n	8001eea <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8001f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f72:	ee07 3a10 	vmov	s14, r3
 8001f76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f7a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001f7e:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001f82:	fbb2 f2f1 	udiv	r2, r2, r1
 8001f86:	ee07 2a90 	vmov	s15, r2
 8001f8a:	e7e9      	b.n	8001f60 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8001f8c:	58024400 	.word	0x58024400
 8001f90:	39000000 	.word	0x39000000
 8001f94:	003d0900 	.word	0x003d0900
 8001f98:	03d09000 	.word	0x03d09000
 8001f9c:	007a1200 	.word	0x007a1200

08001fa0 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8001fa0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8001fa2:	f7fe ffaf 	bl	8000f04 <HAL_RCC_GetSysClockFreq>
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8001fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	fa92 f2a2 	rbit	r2, r2
 8001fb2:	fab2 f282 	clz	r2, r2
 8001fb6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001fba:	40d3      	lsrs	r3, r2
 8001fbc:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	40d8      	lsrs	r0, r3
 8001fc2:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8001fc4:	6018      	str	r0, [r3, #0]
}
 8001fc6:	bd08      	pop	{r3, pc}
 8001fc8:	58024400 	.word	0x58024400
 8001fcc:	08002f96 	.word	0x08002f96
 8001fd0:	20000008 	.word	0x20000008

08001fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fd8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8001fda:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if(UART_INSTANCE_LOWPOWER(huart))
 8001fdc:	6805      	ldr	r5, [r0, #0]
{
 8001fde:	b087      	sub	sp, #28
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8001fe0:	68a3      	ldr	r3, [r4, #8]
 8001fe2:	6922      	ldr	r2, [r4, #16]
 8001fe4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001fe6:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fe8:	69c0      	ldr	r0, [r0, #28]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8001fea:	4313      	orrs	r3, r2
 8001fec:	6962      	ldr	r2, [r4, #20]
 8001fee:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ff0:	4ab3      	ldr	r2, [pc, #716]	; (80022c0 <UART_SetConfig+0x2ec>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8001ff2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ff4:	4032      	ands	r2, r6
 8001ff6:	4313      	orrs	r3, r2

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff8:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ffa:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ffc:	686b      	ldr	r3, [r5, #4]
 8001ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002002:	4313      	orrs	r3, r2
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002004:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002006:	606b      	str	r3, [r5, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002008:	4bae      	ldr	r3, [pc, #696]	; (80022c4 <UART_SetConfig+0x2f0>)
 800200a:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 800200c:	bf1c      	itt	ne
 800200e:	6a23      	ldrne	r3, [r4, #32]
 8002010:	431a      	orrne	r2, r3
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002012:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002016:	bf02      	ittt	eq
 8002018:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 800201a:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 800201c:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 800201e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002020:	bf08      	it	eq
 8002022:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002024:	68ab      	ldr	r3, [r5, #8]
 8002026:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800202a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800202e:	4313      	orrs	r3, r2
 8002030:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002032:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002034:	f023 030f 	bic.w	r3, r3, #15
 8002038:	430b      	orrs	r3, r1
 800203a:	62eb      	str	r3, [r5, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800203c:	4ba2      	ldr	r3, [pc, #648]	; (80022c8 <UART_SetConfig+0x2f4>)
 800203e:	429d      	cmp	r5, r3
 8002040:	d11c      	bne.n	800207c <UART_SetConfig+0xa8>
 8002042:	4ba2      	ldr	r3, [pc, #648]	; (80022cc <UART_SetConfig+0x2f8>)
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800204a:	2b28      	cmp	r3, #40	; 0x28
 800204c:	f200 825e 	bhi.w	800250c <UART_SetConfig+0x538>
 8002050:	4a9f      	ldr	r2, [pc, #636]	; (80022d0 <UART_SetConfig+0x2fc>)
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002052:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002056:	5cd3      	ldrb	r3, [r2, r3]
 8002058:	f040 81e6 	bne.w	8002428 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800205c:	2b08      	cmp	r3, #8
 800205e:	f000 81ba 	beq.w	80023d6 <UART_SetConfig+0x402>
 8002062:	f200 816e 	bhi.w	8002342 <UART_SetConfig+0x36e>
 8002066:	2b01      	cmp	r3, #1
 8002068:	f000 8197 	beq.w	800239a <UART_SetConfig+0x3c6>
 800206c:	f0c0 817d 	bcc.w	800236a <UART_SetConfig+0x396>
 8002070:	2b04      	cmp	r3, #4
 8002072:	f000 8195 	beq.w	80023a0 <UART_SetConfig+0x3cc>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 8002078:	2200      	movs	r2, #0
 800207a:	e186      	b.n	800238a <UART_SetConfig+0x3b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800207c:	4b95      	ldr	r3, [pc, #596]	; (80022d4 <UART_SetConfig+0x300>)
 800207e:	429d      	cmp	r5, r3
 8002080:	d108      	bne.n	8002094 <UART_SetConfig+0xc0>
 8002082:	4b92      	ldr	r3, [pc, #584]	; (80022cc <UART_SetConfig+0x2f8>)
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	2b05      	cmp	r3, #5
 800208c:	f200 823e 	bhi.w	800250c <UART_SetConfig+0x538>
 8002090:	4a91      	ldr	r2, [pc, #580]	; (80022d8 <UART_SetConfig+0x304>)
 8002092:	e7de      	b.n	8002052 <UART_SetConfig+0x7e>
 8002094:	4b91      	ldr	r3, [pc, #580]	; (80022dc <UART_SetConfig+0x308>)
 8002096:	429d      	cmp	r5, r3
 8002098:	d108      	bne.n	80020ac <UART_SetConfig+0xd8>
 800209a:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <UART_SetConfig+0x2f8>)
 800209c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	2b05      	cmp	r3, #5
 80020a4:	f200 8232 	bhi.w	800250c <UART_SetConfig+0x538>
 80020a8:	4a8d      	ldr	r2, [pc, #564]	; (80022e0 <UART_SetConfig+0x30c>)
 80020aa:	e7d2      	b.n	8002052 <UART_SetConfig+0x7e>
 80020ac:	4b8d      	ldr	r3, [pc, #564]	; (80022e4 <UART_SetConfig+0x310>)
 80020ae:	429d      	cmp	r5, r3
 80020b0:	d108      	bne.n	80020c4 <UART_SetConfig+0xf0>
 80020b2:	4b86      	ldr	r3, [pc, #536]	; (80022cc <UART_SetConfig+0x2f8>)
 80020b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	f200 8226 	bhi.w	800250c <UART_SetConfig+0x538>
 80020c0:	4a89      	ldr	r2, [pc, #548]	; (80022e8 <UART_SetConfig+0x314>)
 80020c2:	e7c6      	b.n	8002052 <UART_SetConfig+0x7e>
 80020c4:	4b89      	ldr	r3, [pc, #548]	; (80022ec <UART_SetConfig+0x318>)
 80020c6:	429d      	cmp	r5, r3
 80020c8:	d108      	bne.n	80020dc <UART_SetConfig+0x108>
 80020ca:	4b80      	ldr	r3, [pc, #512]	; (80022cc <UART_SetConfig+0x2f8>)
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	f200 821a 	bhi.w	800250c <UART_SetConfig+0x538>
 80020d8:	4a85      	ldr	r2, [pc, #532]	; (80022f0 <UART_SetConfig+0x31c>)
 80020da:	e7ba      	b.n	8002052 <UART_SetConfig+0x7e>
 80020dc:	4b85      	ldr	r3, [pc, #532]	; (80022f4 <UART_SetConfig+0x320>)
 80020de:	429d      	cmp	r5, r3
 80020e0:	d108      	bne.n	80020f4 <UART_SetConfig+0x120>
 80020e2:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <UART_SetConfig+0x2f8>)
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ea:	2b28      	cmp	r3, #40	; 0x28
 80020ec:	f200 820e 	bhi.w	800250c <UART_SetConfig+0x538>
 80020f0:	4a81      	ldr	r2, [pc, #516]	; (80022f8 <UART_SetConfig+0x324>)
 80020f2:	e7ae      	b.n	8002052 <UART_SetConfig+0x7e>
 80020f4:	4b81      	ldr	r3, [pc, #516]	; (80022fc <UART_SetConfig+0x328>)
 80020f6:	429d      	cmp	r5, r3
 80020f8:	d108      	bne.n	800210c <UART_SetConfig+0x138>
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <UART_SetConfig+0x2f8>)
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	2b05      	cmp	r3, #5
 8002104:	f200 8202 	bhi.w	800250c <UART_SetConfig+0x538>
 8002108:	4a7d      	ldr	r2, [pc, #500]	; (8002300 <UART_SetConfig+0x32c>)
 800210a:	e7a2      	b.n	8002052 <UART_SetConfig+0x7e>
 800210c:	4b7d      	ldr	r3, [pc, #500]	; (8002304 <UART_SetConfig+0x330>)
 800210e:	429d      	cmp	r5, r3
 8002110:	d108      	bne.n	8002124 <UART_SetConfig+0x150>
 8002112:	4b6e      	ldr	r3, [pc, #440]	; (80022cc <UART_SetConfig+0x2f8>)
 8002114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	2b05      	cmp	r3, #5
 800211c:	f200 81f6 	bhi.w	800250c <UART_SetConfig+0x538>
 8002120:	4a79      	ldr	r2, [pc, #484]	; (8002308 <UART_SetConfig+0x334>)
 8002122:	e796      	b.n	8002052 <UART_SetConfig+0x7e>
 8002124:	4b67      	ldr	r3, [pc, #412]	; (80022c4 <UART_SetConfig+0x2f0>)
 8002126:	429d      	cmp	r5, r3
 8002128:	f040 81f0 	bne.w	800250c <UART_SetConfig+0x538>
 800212c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002132:	f002 0207 	and.w	r2, r2, #7
 8002136:	2a05      	cmp	r2, #5
 8002138:	d901      	bls.n	800213e <UART_SetConfig+0x16a>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
      break;
    }
  }

  return ret;
 800213c:	e080      	b.n	8002240 <UART_SetConfig+0x26c>
 800213e:	4973      	ldr	r1, [pc, #460]	; (800230c <UART_SetConfig+0x338>)
 8002140:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 8002142:	2d08      	cmp	r5, #8
 8002144:	d02f      	beq.n	80021a6 <UART_SetConfig+0x1d2>
 8002146:	d808      	bhi.n	800215a <UART_SetConfig+0x186>
 8002148:	2d02      	cmp	r5, #2
 800214a:	d021      	beq.n	8002190 <UART_SetConfig+0x1bc>
 800214c:	2d04      	cmp	r5, #4
 800214e:	d1f4      	bne.n	800213a <UART_SetConfig+0x166>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002150:	4668      	mov	r0, sp
 8002152:	f7ff fde5 	bl	8001d20 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8002156:	9801      	ldr	r0, [sp, #4]
      break;
 8002158:	e01c      	b.n	8002194 <UART_SetConfig+0x1c0>
    switch (clocksource)
 800215a:	2d20      	cmp	r5, #32
 800215c:	d005      	beq.n	800216a <UART_SetConfig+0x196>
 800215e:	2d40      	cmp	r5, #64	; 0x40
 8002160:	d01c      	beq.n	800219c <UART_SetConfig+0x1c8>
 8002162:	2d10      	cmp	r5, #16
 8002164:	d1e9      	bne.n	800213a <UART_SetConfig+0x166>
      tmpreg =(uint32_t) CSI_VALUE;
 8002166:	486a      	ldr	r0, [pc, #424]	; (8002310 <UART_SetConfig+0x33c>)
 8002168:	e001      	b.n	800216e <UART_SetConfig+0x19a>
      tmpreg = (uint32_t) LSE_VALUE;
 800216a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 800216e:	6866      	ldr	r6, [r4, #4]
 8002170:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002174:	4283      	cmp	r3, r0
 8002176:	d8e0      	bhi.n	800213a <UART_SetConfig+0x166>
 8002178:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 800217c:	d8dd      	bhi.n	800213a <UART_SetConfig+0x166>
        switch (clocksource)
 800217e:	2d08      	cmp	r5, #8
 8002180:	d078      	beq.n	8002274 <UART_SetConfig+0x2a0>
 8002182:	d81a      	bhi.n	80021ba <UART_SetConfig+0x1e6>
 8002184:	2d02      	cmp	r5, #2
 8002186:	d038      	beq.n	80021fa <UART_SetConfig+0x226>
 8002188:	2d04      	cmp	r5, #4
 800218a:	d05d      	beq.n	8002248 <UART_SetConfig+0x274>
          ret = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e04f      	b.n	8002230 <UART_SetConfig+0x25c>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8002190:	f7ff fdb0 	bl	8001cf4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 8002194:	2800      	cmp	r0, #0
 8002196:	d1ea      	bne.n	800216e <UART_SetConfig+0x19a>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002198:	2300      	movs	r3, #0
      break;
 800219a:	e051      	b.n	8002240 <UART_SetConfig+0x26c>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800219c:	a803      	add	r0, sp, #12
 800219e:	f7ff fe5f 	bl	8001e60 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 80021a2:	9804      	ldr	r0, [sp, #16]
      break;
 80021a4:	e7f6      	b.n	8002194 <UART_SetConfig+0x1c0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	485a      	ldr	r0, [pc, #360]	; (8002314 <UART_SetConfig+0x340>)
 80021aa:	f012 0f20 	tst.w	r2, #32
 80021ae:	d0de      	beq.n	800216e <UART_SetConfig+0x19a>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80021b6:	40d8      	lsrs	r0, r3
 80021b8:	e7d9      	b.n	800216e <UART_SetConfig+0x19a>
        switch (clocksource)
 80021ba:	2d20      	cmp	r5, #32
 80021bc:	f000 80b0 	beq.w	8002320 <UART_SetConfig+0x34c>
 80021c0:	2d40      	cmp	r5, #64	; 0x40
 80021c2:	d04c      	beq.n	800225e <UART_SetConfig+0x28a>
 80021c4:	2d10      	cmp	r5, #16
 80021c6:	d1e1      	bne.n	800218c <UART_SetConfig+0x1b8>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <UART_SetConfig+0x344>)
 80021ca:	2100      	movs	r1, #0
 80021cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021ce:	4850      	ldr	r0, [pc, #320]	; (8002310 <UART_SetConfig+0x33c>)
 80021d0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80021d4:	2300      	movs	r3, #0
 80021d6:	f7fe f87f 	bl	80002d8 <__aeabi_uldivmod>
 80021da:	4632      	mov	r2, r6
 80021dc:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80021e0:	2300      	movs	r3, #0
 80021e2:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80021e6:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80021ea:	0870      	lsrs	r0, r6, #1
 80021ec:	eb18 0500 	adds.w	r5, r8, r0
 80021f0:	f149 0600 	adc.w	r6, r9, #0
 80021f4:	4628      	mov	r0, r5
 80021f6:	4631      	mov	r1, r6
 80021f8:	e017      	b.n	800222a <UART_SetConfig+0x256>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80021fa:	f7ff fd7b 	bl	8001cf4 <HAL_RCCEx_GetD3PCLK1Freq>
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <UART_SetConfig+0x344>)
 8002200:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002202:	6865      	ldr	r5, [r4, #4]
 8002204:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002208:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800220a:	2100      	movs	r1, #0
 800220c:	f7fe f864 	bl	80002d8 <__aeabi_uldivmod>
 8002210:	462a      	mov	r2, r5
 8002212:	020f      	lsls	r7, r1, #8
 8002214:	2300      	movs	r3, #0
 8002216:	0206      	lsls	r6, r0, #8
 8002218:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800221c:	0868      	lsrs	r0, r5, #1
 800221e:	eb16 0800 	adds.w	r8, r6, r0
 8002222:	f147 0900 	adc.w	r9, r7, #0
 8002226:	4640      	mov	r0, r8
 8002228:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800222a:	f7fe f855 	bl	80002d8 <__aeabi_uldivmod>
          break;
 800222e:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8002230:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002234:	4a39      	ldr	r2, [pc, #228]	; (800231c <UART_SetConfig+0x348>)
 8002236:	4291      	cmp	r1, r2
 8002238:	f63f af7f 	bhi.w	800213a <UART_SetConfig+0x166>
           huart->Instance->BRR = tmpreg;
 800223c:	6822      	ldr	r2, [r4, #0]
 800223e:	60d0      	str	r0, [r2, #12]
}
 8002240:	4618      	mov	r0, r3
 8002242:	b007      	add	sp, #28
 8002244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002248:	4668      	mov	r0, sp
 800224a:	f7ff fd69 	bl	8001d20 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800224e:	4b32      	ldr	r3, [pc, #200]	; (8002318 <UART_SetConfig+0x344>)
 8002250:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002252:	6865      	ldr	r5, [r4, #4]
 8002254:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002258:	2300      	movs	r3, #0
 800225a:	9801      	ldr	r0, [sp, #4]
 800225c:	e7d5      	b.n	800220a <UART_SetConfig+0x236>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800225e:	a803      	add	r0, sp, #12
 8002260:	f7ff fdfe 	bl	8001e60 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <UART_SetConfig+0x344>)
 8002266:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002268:	6865      	ldr	r5, [r4, #4]
 800226a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800226e:	2300      	movs	r3, #0
 8002270:	9804      	ldr	r0, [sp, #16]
 8002272:	e7ca      	b.n	800220a <UART_SetConfig+0x236>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002274:	4915      	ldr	r1, [pc, #84]	; (80022cc <UART_SetConfig+0x2f8>)
 8002276:	0877      	lsrs	r7, r6, #1
 8002278:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800227a:	680d      	ldr	r5, [r1, #0]
 800227c:	4b26      	ldr	r3, [pc, #152]	; (8002318 <UART_SetConfig+0x344>)
 800227e:	f015 0520 	ands.w	r5, r5, #32
 8002282:	d017      	beq.n	80022b4 <UART_SetConfig+0x2e0>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002284:	6809      	ldr	r1, [r1, #0]
 8002286:	4823      	ldr	r0, [pc, #140]	; (8002314 <UART_SetConfig+0x340>)
 8002288:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800228c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002290:	2300      	movs	r3, #0
 8002292:	40c8      	lsrs	r0, r1
 8002294:	2100      	movs	r1, #0
 8002296:	f7fe f81f 	bl	80002d8 <__aeabi_uldivmod>
 800229a:	4632      	mov	r2, r6
 800229c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 80022a0:	2300      	movs	r3, #0
 80022a2:	ea4f 2800 	mov.w	r8, r0, lsl #8
 80022a6:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 80022aa:	eb18 0007 	adds.w	r0, r8, r7
 80022ae:	f149 0100 	adc.w	r1, r9, #0
 80022b2:	e7ba      	b.n	800222a <UART_SetConfig+0x256>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80022b4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80022b8:	2300      	movs	r3, #0
 80022ba:	4816      	ldr	r0, [pc, #88]	; (8002314 <UART_SetConfig+0x340>)
 80022bc:	e7ea      	b.n	8002294 <UART_SetConfig+0x2c0>
 80022be:	bf00      	nop
 80022c0:	cfff69f3 	.word	0xcfff69f3
 80022c4:	58000c00 	.word	0x58000c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	58024400 	.word	0x58024400
 80022d0:	08002f48 	.word	0x08002f48
 80022d4:	40004400 	.word	0x40004400
 80022d8:	08002f71 	.word	0x08002f71
 80022dc:	40004800 	.word	0x40004800
 80022e0:	08002f71 	.word	0x08002f71
 80022e4:	40004c00 	.word	0x40004c00
 80022e8:	08002f71 	.word	0x08002f71
 80022ec:	40005000 	.word	0x40005000
 80022f0:	08002f71 	.word	0x08002f71
 80022f4:	40011400 	.word	0x40011400
 80022f8:	08002f48 	.word	0x08002f48
 80022fc:	40007800 	.word	0x40007800
 8002300:	08002f71 	.word	0x08002f71
 8002304:	40007c00 	.word	0x40007c00
 8002308:	08002f71 	.word	0x08002f71
 800230c:	08002f77 	.word	0x08002f77
 8002310:	003d0900 	.word	0x003d0900
 8002314:	03d09000 	.word	0x03d09000
 8002318:	08002f7e 	.word	0x08002f7e
 800231c:	000ffcff 	.word	0x000ffcff
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002320:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002322:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8002326:	4b7c      	ldr	r3, [pc, #496]	; (8002518 <UART_SetConfig+0x544>)
 8002328:	0870      	lsrs	r0, r6, #1
 800232a:	2100      	movs	r1, #0
 800232c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002330:	4632      	mov	r2, r6
 8002332:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002336:	fbb5 f5f3 	udiv	r5, r5, r3
 800233a:	2300      	movs	r3, #0
 800233c:	fbe5 0106 	umlal	r0, r1, r5, r6
 8002340:	e773      	b.n	800222a <UART_SetConfig+0x256>
    switch (clocksource)
 8002342:	2b20      	cmp	r3, #32
 8002344:	d068      	beq.n	8002418 <UART_SetConfig+0x444>
 8002346:	2b40      	cmp	r3, #64	; 0x40
 8002348:	d03b      	beq.n	80023c2 <UART_SetConfig+0x3ee>
 800234a:	2b10      	cmp	r3, #16
 800234c:	f47f ae93 	bne.w	8002076 <UART_SetConfig+0xa2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002350:	4b71      	ldr	r3, [pc, #452]	; (8002518 <UART_SetConfig+0x544>)
 8002352:	4a72      	ldr	r2, [pc, #456]	; (800251c <UART_SetConfig+0x548>)
 8002354:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002358:	6860      	ldr	r0, [r4, #4]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	0842      	lsrs	r2, r0, #1
 8002360:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002364:	fbb2 f2f0 	udiv	r2, r2, r0
 8002368:	e00d      	b.n	8002386 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800236a:	f7fe ff5b 	bl	8001224 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800236e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002370:	4a69      	ldr	r2, [pc, #420]	; (8002518 <UART_SetConfig+0x544>)
 8002372:	6863      	ldr	r3, [r4, #4]
 8002374:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002378:	fbb0 f0f2 	udiv	r0, r0, r2
 800237c:	085a      	lsrs	r2, r3, #1
 800237e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002382:	fbb2 f2f3 	udiv	r2, r2, r3
 8002386:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8002388:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 800238a:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800238e:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60c2      	str	r2, [r0, #12]
 8002398:	e752      	b.n	8002240 <UART_SetConfig+0x26c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800239a:	f7fe ff59 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 800239e:	e7e6      	b.n	800236e <UART_SetConfig+0x39a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80023a0:	4668      	mov	r0, sp
 80023a2:	f7ff fcbd 	bl	8001d20 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80023a6:	4b5c      	ldr	r3, [pc, #368]	; (8002518 <UART_SetConfig+0x544>)
 80023a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023aa:	6861      	ldr	r1, [r4, #4]
 80023ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80023b0:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80023b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80023b6:	084a      	lsrs	r2, r1, #1
 80023b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80023bc:	fbb2 f2f1 	udiv	r2, r2, r1
 80023c0:	e7e1      	b.n	8002386 <UART_SetConfig+0x3b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80023c2:	a803      	add	r0, sp, #12
 80023c4:	f7ff fd4c 	bl	8001e60 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <UART_SetConfig+0x544>)
 80023ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023cc:	6861      	ldr	r1, [r4, #4]
 80023ce:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80023d2:	9b04      	ldr	r3, [sp, #16]
 80023d4:	e7ed      	b.n	80023b2 <UART_SetConfig+0x3de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023d6:	4a52      	ldr	r2, [pc, #328]	; (8002520 <UART_SetConfig+0x54c>)
 80023d8:	4852      	ldr	r0, [pc, #328]	; (8002524 <UART_SetConfig+0x550>)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	6865      	ldr	r5, [r4, #4]
 80023de:	f013 0320 	ands.w	r3, r3, #32
 80023e2:	4e4d      	ldr	r6, [pc, #308]	; (8002518 <UART_SetConfig+0x544>)
 80023e4:	d00d      	beq.n	8002402 <UART_SetConfig+0x42e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80023ec:	40d0      	lsrs	r0, r2
 80023ee:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 80023f2:	fbb0 f0f2 	udiv	r0, r0, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80023f6:	086a      	lsrs	r2, r5, #1
 80023f8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80023fc:	fbb2 f2f5 	udiv	r2, r2, r5
 8002400:	e7c1      	b.n	8002386 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002402:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8002406:	fbb0 f0f2 	udiv	r0, r0, r2
 800240a:	086a      	lsrs	r2, r5, #1
 800240c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002410:	fbb2 f2f5 	udiv	r2, r2, r5
 8002414:	b292      	uxth	r2, r2
 8002416:	e7b8      	b.n	800238a <UART_SetConfig+0x3b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002418:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <UART_SetConfig+0x544>)
 800241a:	6865      	ldr	r5, [r4, #4]
 800241c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002420:	fbb0 f0f3 	udiv	r0, r0, r3
 8002424:	b280      	uxth	r0, r0
 8002426:	e7e6      	b.n	80023f6 <UART_SetConfig+0x422>
    switch (clocksource)
 8002428:	2b08      	cmp	r3, #8
 800242a:	d046      	beq.n	80024ba <UART_SetConfig+0x4e6>
 800242c:	d818      	bhi.n	8002460 <UART_SetConfig+0x48c>
 800242e:	2b01      	cmp	r3, #1
 8002430:	d035      	beq.n	800249e <UART_SetConfig+0x4ca>
 8002432:	d324      	bcc.n	800247e <UART_SetConfig+0x4aa>
 8002434:	2b04      	cmp	r3, #4
 8002436:	f47f ae80 	bne.w	800213a <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800243a:	4668      	mov	r0, sp
 800243c:	f7ff fc70 	bl	8001d20 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002440:	4b35      	ldr	r3, [pc, #212]	; (8002518 <UART_SetConfig+0x544>)
 8002442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002444:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002448:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800244c:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800244e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002452:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002456:	fbb3 f3f2 	udiv	r3, r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	60cb      	str	r3, [r1, #12]
 800245e:	e69b      	b.n	8002198 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8002460:	2b20      	cmp	r3, #32
 8002462:	d04c      	beq.n	80024fe <UART_SetConfig+0x52a>
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d01d      	beq.n	80024a4 <UART_SetConfig+0x4d0>
 8002468:	2b10      	cmp	r3, #16
 800246a:	f47f ae66 	bne.w	800213a <UART_SetConfig+0x166>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <UART_SetConfig+0x544>)
 8002470:	6862      	ldr	r2, [r4, #4]
 8002472:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <UART_SetConfig+0x548>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002478:	fbb3 f3f1 	udiv	r3, r3, r1
 800247c:	e008      	b.n	8002490 <UART_SetConfig+0x4bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800247e:	f7fe fed1 	bl	8001224 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002482:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <UART_SetConfig+0x544>)
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800248c:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002490:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002494:	fbb3 f3f2 	udiv	r3, r3, r2
 8002498:	b29b      	uxth	r3, r3
 800249a:	60eb      	str	r3, [r5, #12]
 800249c:	e67c      	b.n	8002198 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800249e:	f7fe fed7 	bl	8001250 <HAL_RCC_GetPCLK2Freq>
 80024a2:	e7ee      	b.n	8002482 <UART_SetConfig+0x4ae>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80024a4:	a803      	add	r0, sp, #12
 80024a6:	f7ff fcdb 	bl	8001e60 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <UART_SetConfig+0x544>)
 80024ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80024ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80024b2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80024b6:	9b04      	ldr	r3, [sp, #16]
 80024b8:	e7c9      	b.n	800244e <UART_SetConfig+0x47a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024ba:	4e19      	ldr	r6, [pc, #100]	; (8002520 <UART_SetConfig+0x54c>)
 80024bc:	6860      	ldr	r0, [r4, #4]
 80024be:	6833      	ldr	r3, [r6, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <UART_SetConfig+0x550>)
 80024c2:	f013 0320 	ands.w	r3, r3, #32
 80024c6:	4c14      	ldr	r4, [pc, #80]	; (8002518 <UART_SetConfig+0x544>)
 80024c8:	d00e      	beq.n	80024e8 <UART_SetConfig+0x514>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80024ca:	6833      	ldr	r3, [r6, #0]
 80024cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80024d0:	40da      	lsrs	r2, r3
 80024d2:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 80024d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80024da:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80024de:	fbb2 f2f0 	udiv	r2, r2, r0
 80024e2:	b292      	uxth	r2, r2
 80024e4:	60ea      	str	r2, [r5, #12]
 80024e6:	e657      	b.n	8002198 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80024e8:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 80024ec:	fbb2 f2f1 	udiv	r2, r2, r1
 80024f0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80024f4:	fbb2 f2f0 	udiv	r2, r2, r0
 80024f8:	b292      	uxth	r2, r2
 80024fa:	60ea      	str	r2, [r5, #12]
 80024fc:	e6a0      	b.n	8002240 <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <UART_SetConfig+0x544>)
 8002500:	6862      	ldr	r2, [r4, #4]
 8002502:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250a:	e7b5      	b.n	8002478 <UART_SetConfig+0x4a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800250c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002510:	f47f ae13 	bne.w	800213a <UART_SetConfig+0x166>
 8002514:	e5af      	b.n	8002076 <UART_SetConfig+0xa2>
 8002516:	bf00      	nop
 8002518:	08002f7e 	.word	0x08002f7e
 800251c:	003d0900 	.word	0x003d0900
 8002520:	58024400 	.word	0x58024400
 8002524:	03d09000 	.word	0x03d09000

08002528 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002528:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800252a:	07da      	lsls	r2, r3, #31
{
 800252c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800252e:	d506      	bpl.n	800253e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002530:	6801      	ldr	r1, [r0, #0]
 8002532:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002534:	684a      	ldr	r2, [r1, #4]
 8002536:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800253a:	4322      	orrs	r2, r4
 800253c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800253e:	079c      	lsls	r4, r3, #30
 8002540:	d506      	bpl.n	8002550 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002542:	6801      	ldr	r1, [r0, #0]
 8002544:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002546:	684a      	ldr	r2, [r1, #4]
 8002548:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800254c:	4322      	orrs	r2, r4
 800254e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002550:	0759      	lsls	r1, r3, #29
 8002552:	d506      	bpl.n	8002562 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002554:	6801      	ldr	r1, [r0, #0]
 8002556:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002558:	684a      	ldr	r2, [r1, #4]
 800255a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800255e:	4322      	orrs	r2, r4
 8002560:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002562:	071a      	lsls	r2, r3, #28
 8002564:	d506      	bpl.n	8002574 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002566:	6801      	ldr	r1, [r0, #0]
 8002568:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800256a:	684a      	ldr	r2, [r1, #4]
 800256c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002570:	4322      	orrs	r2, r4
 8002572:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002574:	06dc      	lsls	r4, r3, #27
 8002576:	d506      	bpl.n	8002586 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002578:	6801      	ldr	r1, [r0, #0]
 800257a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800257c:	688a      	ldr	r2, [r1, #8]
 800257e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002582:	4322      	orrs	r2, r4
 8002584:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002586:	0699      	lsls	r1, r3, #26
 8002588:	d506      	bpl.n	8002598 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800258a:	6801      	ldr	r1, [r0, #0]
 800258c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800258e:	688a      	ldr	r2, [r1, #8]
 8002590:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002594:	4322      	orrs	r2, r4
 8002596:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002598:	065a      	lsls	r2, r3, #25
 800259a:	d510      	bpl.n	80025be <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800259c:	6801      	ldr	r1, [r0, #0]
 800259e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80025a0:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025a2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80025aa:	ea42 0204 	orr.w	r2, r2, r4
 80025ae:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025b0:	d105      	bne.n	80025be <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025b2:	684a      	ldr	r2, [r1, #4]
 80025b4:	6d44      	ldr	r4, [r0, #84]	; 0x54
 80025b6:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80025ba:	4322      	orrs	r2, r4
 80025bc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	d506      	bpl.n	80025d0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80025c2:	6802      	ldr	r2, [r0, #0]
 80025c4:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80025c6:	6853      	ldr	r3, [r2, #4]
 80025c8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80025cc:	430b      	orrs	r3, r1
 80025ce:	6053      	str	r3, [r2, #4]
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d6:	9d06      	ldr	r5, [sp, #24]
 80025d8:	4604      	mov	r4, r0
 80025da:	460f      	mov	r7, r1
 80025dc:	4616      	mov	r6, r2
 80025de:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025e0:	6821      	ldr	r1, [r4, #0]
 80025e2:	69ca      	ldr	r2, [r1, #28]
 80025e4:	ea37 0302 	bics.w	r3, r7, r2
 80025e8:	bf0c      	ite	eq
 80025ea:	2201      	moveq	r2, #1
 80025ec:	2200      	movne	r2, #0
 80025ee:	42b2      	cmp	r2, r6
 80025f0:	d002      	beq.n	80025f8 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80025f2:	2000      	movs	r0, #0
}
 80025f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80025f8:	1c6b      	adds	r3, r5, #1
 80025fa:	d0f2      	beq.n	80025e2 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80025fc:	b99d      	cbnz	r5, 8002626 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025fe:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002600:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002612:	2320      	movs	r3, #32
 8002614:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8002618:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 800261c:	2300      	movs	r3, #0
 800261e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 8002622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002626:	f7fe f81f 	bl	8000668 <HAL_GetTick>
 800262a:	eba0 0008 	sub.w	r0, r0, r8
 800262e:	4285      	cmp	r5, r0
 8002630:	d2d6      	bcs.n	80025e0 <UART_WaitOnFlagUntilTimeout+0xe>
 8002632:	e7e4      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0x2c>

08002634 <UART_CheckIdleState>:
{
 8002634:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002636:	2600      	movs	r6, #0
{
 8002638:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800263a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800263c:	f7fe f814 	bl	8000668 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002640:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002642:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	071a      	lsls	r2, r3, #28
 8002648:	d417      	bmi.n	800267a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	075b      	lsls	r3, r3, #29
 8002650:	d50a      	bpl.n	8002668 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002652:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002656:	2200      	movs	r2, #0
 8002658:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800265c:	4620      	mov	r0, r4
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	462b      	mov	r3, r5
 8002662:	f7ff ffb6 	bl	80025d2 <UART_WaitOnFlagUntilTimeout>
 8002666:	b9a0      	cbnz	r0, 8002692 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002668:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800266a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800266c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8002670:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002674:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 8002678:	e00c      	b.n	8002694 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800267a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800267e:	4632      	mov	r2, r6
 8002680:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	4603      	mov	r3, r0
 8002688:	4620      	mov	r0, r4
 800268a:	f7ff ffa2 	bl	80025d2 <UART_WaitOnFlagUntilTimeout>
 800268e:	2800      	cmp	r0, #0
 8002690:	d0db      	beq.n	800264a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002692:	2003      	movs	r0, #3
}
 8002694:	b002      	add	sp, #8
 8002696:	bd70      	pop	{r4, r5, r6, pc}

08002698 <HAL_UART_Init>:
{
 8002698:	b510      	push	{r4, lr}
  if(huart == NULL)
 800269a:	4604      	mov	r4, r0
 800269c:	b360      	cbz	r0, 80026f8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800269e:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 80026a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026a6:	b91b      	cbnz	r3, 80026b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80026a8:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80026ac:	f000 fb50 	bl	8002d50 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80026b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026b2:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b4:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80026b6:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 80026ba:	6813      	ldr	r3, [r2, #0]
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026c2:	f7ff fc87 	bl	8001fd4 <UART_SetConfig>
 80026c6:	2801      	cmp	r0, #1
 80026c8:	d016      	beq.n	80026f8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026cc:	b113      	cbz	r3, 80026d4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7ff ff2a 	bl	8002528 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80026d6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026e6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
}
 80026ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80026f2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026f4:	f7ff bf9e 	b.w	8002634 <UART_CheckIdleState>
}
 80026f8:	2001      	movs	r0, #1
 80026fa:	bd10      	pop	{r4, pc}

080026fc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80026fc:	b084      	sub	sp, #16
 80026fe:	b538      	push	{r3, r4, r5, lr}
 8002700:	ad05      	add	r5, sp, #20
 8002702:	4604      	mov	r4, r0
 8002704:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800270a:	2b01      	cmp	r3, #1
 800270c:	d127      	bne.n	800275e <USB_CoreInit+0x62>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);		
 800270e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002710:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002714:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002716:	68c3      	ldr	r3, [r0, #12]
 8002718:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800271c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002720:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002722:	68c3      	ldr	r3, [r0, #12]
 8002724:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002728:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 800272a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800272c:	2b01      	cmp	r3, #1
 800272e:	d103      	bne.n	8002738 <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002730:	68c3      	ldr	r3, [r0, #12]
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	60c3      	str	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002738:	4620      	mov	r0, r4
 800273a:	f000 f913 	bl	8002964 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800273e:	9b08      	ldr	r3, [sp, #32]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d107      	bne.n	8002754 <USB_CoreInit+0x58>
  {
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
 8002744:	68a3      	ldr	r3, [r4, #8]
 8002746:	f043 030c 	orr.w	r3, r3, #12
 800274a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800274c:	68a3      	ldr	r3, [r4, #8]
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8002754:	2000      	movs	r0, #0
 8002756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800275a:	b004      	add	sp, #16
 800275c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800275e:	68c3      	ldr	r3, [r0, #12]
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8002766:	f000 f8fd 	bl	8002964 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800276a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800276e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002770:	e7e5      	b.n	800273e <USB_CoreInit+0x42>

08002772 <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002772:	6883      	ldr	r3, [r0, #8]
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800277a:	2000      	movs	r0, #0
 800277c:	4770      	bx	lr

0800277e <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800277e:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002780:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002782:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002784:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002788:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 800278a:	d108      	bne.n	800279e <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 800278c:	68c3      	ldr	r3, [r0, #12]
 800278e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002792:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8002794:	2032      	movs	r0, #50	; 0x32
 8002796:	f7fd ff6d 	bl	8000674 <HAL_Delay>
  
  return HAL_OK;
}
 800279a:	2000      	movs	r0, #0
 800279c:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800279e:	2900      	cmp	r1, #0
 80027a0:	d1f8      	bne.n	8002794 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 80027a2:	68c3      	ldr	r3, [r0, #12]
 80027a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027a8:	60c3      	str	r3, [r0, #12]
 80027aa:	e7f3      	b.n	8002794 <USB_SetCurrentMode+0x16>

080027ac <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80027ac:	b084      	sub	sp, #16
 80027ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b2:	4604      	mov	r4, r0
 80027b4:	a807      	add	r0, sp, #28
 80027b6:	4688      	mov	r8, r1
 80027b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80027bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027be:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80027c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027c4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80027c6:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 80027c8:	b95e      	cbnz	r6, 80027e2 <USB_DevInit+0x36>
  {
    /*Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80027ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027d0:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027d8:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e0:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80027e2:	2300      	movs	r3, #0

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80027e4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 80027e8:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80027ec:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80027f0:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80027f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d158      	bne.n	80028ac <USB_DevInit+0x100>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80027fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027fc:	b919      	cbnz	r1, 8002806 <USB_DevInit+0x5a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80027fe:	4620      	mov	r0, r4
 8002800:	f000 f89c 	bl	800293c <USB_SetDevSpeed>
 8002804:	e003      	b.n	800280e <USB_DevInit+0x62>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 8002806:	4619      	mov	r1, r3
 8002808:	4620      	mov	r0, r4
 800280a:	f000 f897 	bl	800293c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 800280e:	2110      	movs	r1, #16
 8002810:	4620      	mov	r0, r4
 8002812:	f000 f871 	bl	80028f8 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8002816:	4620      	mov	r0, r4
 8002818:	f000 f880 	bl	800291c <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 800281c:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800281e:	f04f 32ff 	mov.w	r2, #4294967295
  
  for (i = 0; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 8002822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 8002826:	612b      	str	r3, [r5, #16]
 8002828:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 800282a:	616b      	str	r3, [r5, #20]
    {
      USBx_INEP(i)->DIEPCTL = 0;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0;
    USBx_INEP(i)->DIEPINT  = 0xFF;
 800282c:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 8002830:	61aa      	str	r2, [r5, #24]
 8002832:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 8002836:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8002838:	4543      	cmp	r3, r8
 800283a:	d139      	bne.n	80028b0 <USB_DevInit+0x104>
 800283c:	2100      	movs	r1, #0
 800283e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
  
  for (i = 0; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8002842:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0;
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8002846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800284a:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 800284c:	428b      	cmp	r3, r1
 800284e:	d13d      	bne.n	80028cc <USB_DevInit+0x120>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002850:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1)
 8002852:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002858:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 800285a:	d106      	bne.n	800286a <USB_DevInit+0xbe>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_8 | USB_OTG_DTHRCTL_RXTHRLEN_8);
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <USB_DevInit+0x140>)
 800285e:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN | 0x08000000);
 8002860:	4b23      	ldr	r3, [pc, #140]	; (80028f0 <USB_DevInit+0x144>)
 8002862:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002864:	4313      	orrs	r3, r2
 8002866:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8002868:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 800286e:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002872:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8002874:	b91f      	cbnz	r7, 800287e <USB_DevInit+0xd2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8002876:	69a3      	ldr	r3, [r4, #24]
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800287e:	69a2      	ldr	r2, [r4, #24]
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <USB_DevInit+0x148>)
 8002882:	4313      	orrs	r3, r2
 8002884:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8002886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002888:	b11b      	cbz	r3, 8002892 <USB_DevInit+0xe6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800288a:	69a3      	ldr	r3, [r4, #24]
 800288c:	f043 0308 	orr.w	r3, r3, #8
 8002890:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 8002892:	2e01      	cmp	r6, #1
 8002894:	d105      	bne.n	80028a2 <USB_DevInit+0xf6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8002896:	69a3      	ldr	r3, [r4, #24]
 8002898:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	61a3      	str	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 80028a2:	2000      	movs	r0, #0
 80028a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028a8:	b004      	add	sp, #16
 80028aa:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80028ac:	2103      	movs	r1, #3
 80028ae:	e7a6      	b.n	80027fe <USB_DevInit+0x52>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80028b0:	f8d2 c000 	ldr.w	ip, [r2]
 80028b4:	f1bc 0f00 	cmp.w	ip, #0
 80028b8:	da06      	bge.n	80028c8 <USB_DevInit+0x11c>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80028ba:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 80028bc:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80028be:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80028c0:	f8c2 e008 	str.w	lr, [r2, #8]
 80028c4:	3220      	adds	r2, #32
 80028c6:	e7b7      	b.n	8002838 <USB_DevInit+0x8c>
      USBx_INEP(i)->DIEPCTL = 0;
 80028c8:	6011      	str	r1, [r2, #0]
 80028ca:	e7f7      	b.n	80028bc <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80028cc:	f8d2 8000 	ldr.w	r8, [r2]
 80028d0:	f1b8 0f00 	cmp.w	r8, #0
 80028d4:	da07      	bge.n	80028e6 <USB_DevInit+0x13a>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80028d6:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80028da:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80028dc:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80028de:	f8c2 c008 	str.w	ip, [r2, #8]
 80028e2:	3220      	adds	r2, #32
 80028e4:	e7b2      	b.n	800284c <USB_DevInit+0xa0>
      USBx_OUTEP(i)->DOEPCTL = 0;
 80028e6:	6010      	str	r0, [r2, #0]
 80028e8:	e7f7      	b.n	80028da <USB_DevInit+0x12e>
 80028ea:	bf00      	nop
 80028ec:	02000400 	.word	0x02000400
 80028f0:	08010003 	.word	0x08010003
 80028f4:	803c3800 	.word	0x803c3800

080028f8 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80028f8:	0189      	lsls	r1, r1, #6
 80028fa:	4a07      	ldr	r2, [pc, #28]	; (8002918 <USB_FlushTxFifo+0x20>)
 80028fc:	f041 0120 	orr.w	r1, r1, #32
 8002900:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 8002902:	3a01      	subs	r2, #1
 8002904:	d005      	beq.n	8002912 <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002906:	6903      	ldr	r3, [r0, #16]
 8002908:	f013 0320 	ands.w	r3, r3, #32
 800290c:	d1f9      	bne.n	8002902 <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 800290e:	4618      	mov	r0, r3
 8002910:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002912:	2003      	movs	r0, #3
}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	00030d41 	.word	0x00030d41

0800291c <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800291c:	2310      	movs	r3, #16
 800291e:	4a06      	ldr	r2, [pc, #24]	; (8002938 <USB_FlushRxFifo+0x1c>)
 8002920:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 8002922:	3a01      	subs	r2, #1
 8002924:	d005      	beq.n	8002932 <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002926:	6903      	ldr	r3, [r0, #16]
 8002928:	f013 0310 	ands.w	r3, r3, #16
 800292c:	d1f9      	bne.n	8002922 <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800292e:	4618      	mov	r0, r3
 8002930:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002932:	2003      	movs	r0, #3
}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	00030d41 	.word	0x00030d41

0800293c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 800293c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002940:	4319      	orrs	r1, r3
 8002942:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8002946:	2000      	movs	r0, #0
 8002948:	4770      	bx	lr

0800294a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 800294a:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 800294c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8002958:	2003      	movs	r0, #3
 800295a:	f7fd fe8b 	bl	8000674 <HAL_Delay>
  
  return HAL_OK;  
}
 800295e:	2000      	movs	r0, #0
 8002960:	bd08      	pop	{r3, pc}
	...

08002964 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8002966:	3b01      	subs	r3, #1
 8002968:	d101      	bne.n	800296e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800296a:	2003      	movs	r0, #3
 800296c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 800296e:	6902      	ldr	r2, [r0, #16]
 8002970:	2a00      	cmp	r2, #0
 8002972:	daf8      	bge.n	8002966 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002974:	6903      	ldr	r3, [r0, #16]
 8002976:	4a06      	ldr	r2, [pc, #24]	; (8002990 <USB_CoreReset+0x2c>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 800297e:	3a01      	subs	r2, #1
 8002980:	d0f3      	beq.n	800296a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002982:	6903      	ldr	r3, [r0, #16]
 8002984:	f013 0301 	ands.w	r3, r3, #1
 8002988:	d1f9      	bne.n	800297e <USB_CoreReset+0x1a>
  
  return HAL_OK;
 800298a:	4618      	mov	r0, r3
}
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	00030d41 	.word	0x00030d41

08002994 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002998:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299a:	2214      	movs	r2, #20
 800299c:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800299e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002b44 <MX_GPIO_Init+0x1b0>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80029a4:	4d62      	ldr	r5, [pc, #392]	; (8002b30 <MX_GPIO_Init+0x19c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	f000 fabb 	bl	8002f20 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029aa:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <MX_GPIO_Init+0x1a0>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80029ac:	4640      	mov	r0, r8
 80029ae:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b6:	2400      	movs	r4, #0

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80029b8:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8002b48 <MX_GPIO_Init+0x1b4>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80029bc:	f44f 5900 	mov.w	r9, #8192	; 0x2000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c0:	f042 0210 	orr.w	r2, r2, #16

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029c6:	260b      	movs	r6, #11
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029c8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029d0:	f002 0210 	and.w	r2, r2, #16
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029dc:	f042 0204 	orr.w	r2, r2, #4
 80029e0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029e8:	f002 0204 	and.w	r2, r2, #4
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80029f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80029fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a00:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002a04:	9202      	str	r2, [sp, #8]
 8002a06:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a18:	f002 0201 	and.w	r2, r2, #1
 8002a1c:	9203      	str	r2, [sp, #12]
 8002a1e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a24:	f042 0202 	orr.w	r2, r2, #2
 8002a28:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a30:	f002 0202 	and.w	r2, r2, #2
 8002a34:	9204      	str	r2, [sp, #16]
 8002a36:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a3c:	f042 0208 	orr.w	r2, r2, #8
 8002a40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a48:	f002 0208 	and.w	r2, r2, #8
 8002a4c:	9205      	str	r2, [sp, #20]
 8002a4e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a5c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	9306      	str	r3, [sp, #24]
 8002a68:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002a6a:	f7fd ff65 	bl	8000938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	4628      	mov	r0, r5
 8002a72:	2140      	movs	r1, #64	; 0x40
 8002a74:	f7fd ff60 	bl	8000938 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a78:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a7a:	a907      	add	r1, sp, #28
 8002a7c:	482e      	ldr	r0, [pc, #184]	; (8002b38 <MX_GPIO_Init+0x1a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a7e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a80:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a84:	f7fd fe68 	bl	8000758 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <MX_GPIO_Init+0x1a8>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	a907      	add	r1, sp, #28
 8002a8c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002a8e:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a92:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002a96:	f7fd fe5f 	bl	8000758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002a9a:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9c:	a907      	add	r1, sp, #28
 8002a9e:	4650      	mov	r0, sl
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002aa2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002aa8:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aaa:	f7fd fe55 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002aae:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	a907      	add	r1, sp, #28
 8002ab2:	4823      	ldr	r0, [pc, #140]	; (8002b40 <MX_GPIO_Init+0x1ac>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002ab4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002abc:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002abe:	f7fd fe4b 	bl	8000758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002ac2:	a907      	add	r1, sp, #28
 8002ac4:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002ac6:	f8cd 901c 	str.w	r9, [sp, #28]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aca:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ad4:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	f7fd fe3f 	bl	8000758 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002ada:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ade:	a907      	add	r1, sp, #28
 8002ae0:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae2:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002ae6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aec:	f7fd fe34 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002af0:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002af2:	a907      	add	r1, sp, #28
 8002af4:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002afa:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b00:	f7fd fe2a 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002b04:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b06:	a907      	add	r1, sp, #28
 8002b08:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002b0c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002b10:	f7fd fe22 	bl	8000758 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002b14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b18:	a907      	add	r1, sp, #28
 8002b1a:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002b1e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b24:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b26:	f7fd fe17 	bl	8000758 <HAL_GPIO_Init>

}
 8002b2a:	b00c      	add	sp, #48	; 0x30
 8002b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b30:	58021800 	.word	0x58021800
 8002b34:	58024400 	.word	0x58024400
 8002b38:	58021000 	.word	0x58021000
 8002b3c:	11110000 	.word	0x11110000
 8002b40:	58020000 	.word	0x58020000
 8002b44:	58020400 	.word	0x58020400
 8002b48:	58020800 	.word	0x58020800

08002b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b4c:	b530      	push	{r4, r5, lr}
 8002b4e:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b50:	224c      	movs	r2, #76	; 0x4c
 8002b52:	2100      	movs	r1, #0
 8002b54:	a80a      	add	r0, sp, #40	; 0x28
 8002b56:	f000 f9e3 	bl	8002f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	a802      	add	r0, sp, #8
 8002b60:	f000 f9de 	bl	8002f20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b64:	22bc      	movs	r2, #188	; 0xbc
 8002b66:	2100      	movs	r1, #0
 8002b68:	a81d      	add	r0, sp, #116	; 0x74
 8002b6a:	f000 f9d9 	bl	8002f20 <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <SystemClock_Config+0xac>)
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	f022 0204 	bic.w	r2, r2, #4
 8002b76:	60da      	str	r2, [r3, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	9201      	str	r2, [sp, #4]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b86:	619a      	str	r2, [r3, #24]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002b8e:	9201      	str	r2, [sp, #4]
 8002b90:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8002b92:	699a      	ldr	r2, [r3, #24]
 8002b94:	0492      	lsls	r2, r2, #18
 8002b96:	d5fc      	bpl.n	8002b92 <SystemClock_Config+0x46>
    
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002b9c:	2218      	movs	r2, #24
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002b9e:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ba0:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ba2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba4:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002ba6:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ba8:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002baa:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bac:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bae:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002bb0:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002bb2:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002bb4:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bb6:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002bb8:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bba:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002bbc:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002bbe:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002bc0:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bc2:	f7fd ff55 	bl	8000a70 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc6:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bc8:	4629      	mov	r1, r5
 8002bca:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002bcc:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bce:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd0:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002bd2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002bd6:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002bd8:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002bda:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002bdc:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002bde:	f7fe fa2d 	bl	800103c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8002be2:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <SystemClock_Config+0xb0>)
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be4:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002be6:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8002be8:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002bea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bee:	933e      	str	r3, [sp, #248]	; 0xf8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf0:	f7fe fc10 	bl	8001414 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002bf4:	b04d      	add	sp, #308	; 0x134
 8002bf6:	bd30      	pop	{r4, r5, pc}
 8002bf8:	58024800 	.word	0x58024800
 8002bfc:	00040002 	.word	0x00040002

08002c00 <main>:
{
 8002c00:	b508      	push	{r3, lr}
  HAL_Init();
 8002c02:	f7fd fd15 	bl	8000630 <HAL_Init>
	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_SET) //LD3 turns on and LD2 turns off while short the switch
 8002c06:	4e17      	ldr	r6, [pc, #92]	; (8002c64 <main+0x64>)
  SystemClock_Config();
 8002c08:	f7ff ffa0 	bl	8002b4c <SystemClock_Config>
    	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002c0c:	4c16      	ldr	r4, [pc, #88]	; (8002c68 <main+0x68>)
  MX_GPIO_Init();
 8002c0e:	f7ff fec1 	bl	8002994 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002c12:	f000 f87b 	bl	8002d0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002c16:	f000 f8d3 	bl	8002dc0 <MX_USB_OTG_FS_PCD_Init>
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	4812      	ldr	r0, [pc, #72]	; (8002c68 <main+0x68>)
 8002c20:	f7fd fe8a 	bl	8000938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c2a:	480f      	ldr	r0, [pc, #60]	; (8002c68 <main+0x68>)
 8002c2c:	f7fd fe84 	bl	8000938 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_SET) //LD3 turns on and LD2 turns off while short the switch
 8002c30:	2108      	movs	r1, #8
 8002c32:	4630      	mov	r0, r6
 8002c34:	f7fd fe7a 	bl	800092c <HAL_GPIO_ReadPin>
 8002c38:	2801      	cmp	r0, #1
 8002c3a:	4605      	mov	r5, r0
 8002c3c:	d10b      	bne.n	8002c56 <main+0x56>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	4620      	mov	r0, r4
 8002c44:	f7fd fe78 	bl	8000938 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002c48:	462a      	mov	r2, r5
    	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002c4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7fd fe72 	bl	8000938 <HAL_GPIO_WritePin>
 8002c54:	e7ec      	b.n	8002c30 <main+0x30>
    	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002c56:	2201      	movs	r2, #1
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	f7fd fe6c 	bl	8000938 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	e7f2      	b.n	8002c4a <main+0x4a>
 8002c64:	58021000 	.word	0x58021000
 8002c68:	58020400 	.word	0x58020400

08002c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c70:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <HAL_MspInit+0x20>)
{
 8002c72:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c74:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002c78:	f042 0202 	orr.w	r2, r2, #2
 8002c7c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002c80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8c:	b002      	add	sp, #8
 8002c8e:	4770      	bx	lr
 8002c90:	58024400 	.word	0x58024400

08002c94 <NMI_Handler>:
 8002c94:	4770      	bx	lr

08002c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c96:	e7fe      	b.n	8002c96 <HardFault_Handler>

08002c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	e7fe      	b.n	8002c9a <BusFault_Handler>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	e7fe      	b.n	8002c9c <UsageFault_Handler>

08002c9e <SVC_Handler>:
 8002c9e:	4770      	bx	lr

08002ca0 <DebugMon_Handler>:
 8002ca0:	4770      	bx	lr

08002ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca2:	4770      	bx	lr

08002ca4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca4:	f7fd bcd4 	b.w	8000650 <HAL_IncTick>

08002ca8 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca8:	4914      	ldr	r1, [pc, #80]	; (8002cfc <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002caa:	4815      	ldr	r0, [pc, #84]	; (8002d00 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cac:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002cb4:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <SystemInit+0x5c>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002cc8:	681c      	ldr	r4, [r3, #0]
 8002cca:	4020      	ands	r0, r4
 8002ccc:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002cce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002cd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002cd2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002cde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002cea:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002cec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002cee:	2201      	movs	r2, #1
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <SystemInit+0x60>)
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002cf8:	608b      	str	r3, [r1, #8]
 8002cfa:	bd10      	pop	{r4, pc}
 8002cfc:	e000ed00 	.word	0xe000ed00
 8002d00:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d04:	58024400 	.word	0x58024400
 8002d08:	51008108 	.word	0x51008108

08002d0c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002d0c:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8002d0e:	480e      	ldr	r0, [pc, #56]	; (8002d48 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 115200;
 8002d10:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <MX_USART3_UART_Init+0x40>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d16:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8002d18:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d1c:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002d1e:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d20:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d22:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d24:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d26:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d28:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d2a:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8002d2c:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8002d2e:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8002d30:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8002d32:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d34:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d36:	f7ff fcaf 	bl	8002698 <HAL_UART_Init>
 8002d3a:	b118      	cbz	r0, 8002d44 <MX_USART3_UART_Init+0x38>
  {
    Error_Handler();
  }

}
 8002d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002d40:	f7ff bf94 	b.w	8002c6c <Error_Handler>
 8002d44:	bd08      	pop	{r3, pc}
 8002d46:	bf00      	nop
 8002d48:	20000030 	.word	0x20000030
 8002d4c:	40004800 	.word	0x40004800

08002d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d50:	b510      	push	{r4, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d56:	2214      	movs	r2, #20
 8002d58:	2100      	movs	r1, #0
 8002d5a:	a803      	add	r0, sp, #12
 8002d5c:	f000 f8e0 	bl	8002f20 <memset>
  if(uartHandle->Instance==USART3)
 8002d60:	6822      	ldr	r2, [r4, #0]
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <HAL_UART_MspInit+0x64>)
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d123      	bne.n	8002db0 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d6a:	a903      	add	r1, sp, #12
 8002d6c:	4813      	ldr	r0, [pc, #76]	; (8002dbc <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d6e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d72:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d76:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002d7a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002d7e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002d82:	9201      	str	r2, [sp, #4]
 8002d84:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002d8a:	f042 0208 	orr.w	r2, r2, #8
 8002d8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	9302      	str	r3, [sp, #8]
 8002d9c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002da2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002da8:	2307      	movs	r3, #7
 8002daa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dac:	f7fd fcd4 	bl	8000758 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002db0:	b008      	add	sp, #32
 8002db2:	bd10      	pop	{r4, pc}
 8002db4:	40004800 	.word	0x40004800
 8002db8:	58024400 	.word	0x58024400
 8002dbc:	58020c00 	.word	0x58020c00

08002dc0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002dc0:	b508      	push	{r3, lr}

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <MX_USB_OTG_FS_PCD_Init+0x38>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002dc4:	2309      	movs	r3, #9
 8002dc6:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <MX_USB_OTG_FS_PCD_Init+0x3c>)
 8002dc8:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002dcc:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002dce:	2300      	movs	r3, #0
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002dd0:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002dd2:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002dd4:	2201      	movs	r2, #1
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002dd6:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8002dd8:	6143      	str	r3, [r0, #20]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002dda:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002ddc:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002dde:	6283      	str	r3, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002de0:	6242      	str	r2, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002de2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002de4:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002de6:	f7fd fdac 	bl	8000942 <HAL_PCD_Init>
 8002dea:	b118      	cbz	r0, 8002df4 <MX_USB_OTG_FS_PCD_Init+0x34>
  {
    Error_Handler();
  }

}
 8002dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002df0:	f7ff bf3c 	b.w	8002c6c <Error_Handler>
 8002df4:	bd08      	pop	{r3, pc}
 8002df6:	bf00      	nop
 8002df8:	200000b0 	.word	0x200000b0
 8002dfc:	40080000 	.word	0x40080000

08002e00 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002e00:	b510      	push	{r4, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e06:	2214      	movs	r2, #20
 8002e08:	2100      	movs	r1, #0
 8002e0a:	a803      	add	r0, sp, #12
 8002e0c:	f000 f888 	bl	8002f20 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_PCD_MspInit+0x78>)
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d12d      	bne.n	8002e74 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e18:	4c18      	ldr	r4, [pc, #96]	; (8002e7c <HAL_PCD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	a903      	add	r1, sp, #12
 8002e1c:	4818      	ldr	r0, [pc, #96]	; (8002e80 <HAL_PCD_MspInit+0x80>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002e2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002e36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002e3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002e40:	230a      	movs	r3, #10
 8002e42:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e44:	f7fd fc88 	bl	8000758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002e48:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e4c:	a903      	add	r1, sp, #12
 8002e4e:	480c      	ldr	r0, [pc, #48]	; (8002e80 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002e50:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e52:	2300      	movs	r3, #0
 8002e54:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f7fd fc7e 	bl	8000758 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e5c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8002e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e64:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8002e68:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8002e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e70:	9302      	str	r3, [sp, #8]
 8002e72:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002e74:	b008      	add	sp, #32
 8002e76:	bd10      	pop	{r4, pc}
 8002e78:	40080000 	.word	0x40080000
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	58020000 	.word	0x58020000

08002e84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ebc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e8a:	e003      	b.n	8002e94 <LoopCopyDataInit>

08002e8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e92:	3104      	adds	r1, #4

08002e94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e94:	480b      	ldr	r0, [pc, #44]	; (8002ec4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e9c:	d3f6      	bcc.n	8002e8c <CopyDataInit>
  ldr  r2, =_sbss
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ea0:	e002      	b.n	8002ea8 <LoopFillZerobss>

08002ea2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ea2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ea4:	f842 3b04 	str.w	r3, [r2], #4

08002ea8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002eaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002eac:	d3f9      	bcc.n	8002ea2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002eae:	f7ff fefb 	bl	8002ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eb2:	f000 f811 	bl	8002ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb6:	f7ff fea3 	bl	8002c00 <main>
  bx  lr    
 8002eba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ebc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ec0:	08002fb8 	.word	0x08002fb8
  ldr  r0, =_sdata
 8002ec4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ec8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002ecc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002ed0:	200004b0 	.word	0x200004b0

08002ed4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed4:	e7fe      	b.n	8002ed4 <ADC3_IRQHandler>
	...

08002ed8 <__libc_init_array>:
 8002ed8:	b570      	push	{r4, r5, r6, lr}
 8002eda:	4e0d      	ldr	r6, [pc, #52]	; (8002f10 <__libc_init_array+0x38>)
 8002edc:	4c0d      	ldr	r4, [pc, #52]	; (8002f14 <__libc_init_array+0x3c>)
 8002ede:	1ba4      	subs	r4, r4, r6
 8002ee0:	10a4      	asrs	r4, r4, #2
 8002ee2:	2500      	movs	r5, #0
 8002ee4:	42a5      	cmp	r5, r4
 8002ee6:	d109      	bne.n	8002efc <__libc_init_array+0x24>
 8002ee8:	4e0b      	ldr	r6, [pc, #44]	; (8002f18 <__libc_init_array+0x40>)
 8002eea:	4c0c      	ldr	r4, [pc, #48]	; (8002f1c <__libc_init_array+0x44>)
 8002eec:	f000 f820 	bl	8002f30 <_init>
 8002ef0:	1ba4      	subs	r4, r4, r6
 8002ef2:	10a4      	asrs	r4, r4, #2
 8002ef4:	2500      	movs	r5, #0
 8002ef6:	42a5      	cmp	r5, r4
 8002ef8:	d105      	bne.n	8002f06 <__libc_init_array+0x2e>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f00:	4798      	blx	r3
 8002f02:	3501      	adds	r5, #1
 8002f04:	e7ee      	b.n	8002ee4 <__libc_init_array+0xc>
 8002f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f0a:	4798      	blx	r3
 8002f0c:	3501      	adds	r5, #1
 8002f0e:	e7f2      	b.n	8002ef6 <__libc_init_array+0x1e>
 8002f10:	08002fb0 	.word	0x08002fb0
 8002f14:	08002fb0 	.word	0x08002fb0
 8002f18:	08002fb0 	.word	0x08002fb0
 8002f1c:	08002fb4 	.word	0x08002fb4

08002f20 <memset>:
 8002f20:	4402      	add	r2, r0
 8002f22:	4603      	mov	r3, r0
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d100      	bne.n	8002f2a <memset+0xa>
 8002f28:	4770      	bx	lr
 8002f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f2e:	e7f9      	b.n	8002f24 <memset+0x4>

08002f30 <_init>:
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	bf00      	nop
 8002f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f36:	bc08      	pop	{r3}
 8002f38:	469e      	mov	lr, r3
 8002f3a:	4770      	bx	lr

08002f3c <_fini>:
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	bf00      	nop
 8002f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f42:	bc08      	pop	{r3}
 8002f44:	469e      	mov	lr, r3
 8002f46:	4770      	bx	lr


USB_VCP_Train.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005070  08005070  00015070  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800512c  0800512c  0001512c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c8  20000000  08005134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  200001c8  080052fc  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  20000228  0800535c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001974  20000288  080053bc  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bfc  080053bc  00021bfc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281a7  00000000  00000000  000202b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ce1  00000000  00000000  0004845d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b109  00000000  00000000  0004d13e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f70  00000000  00000000  00058248  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000013f8  00000000  00000000  000591b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000091c5  00000000  00000000  0005a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007073  00000000  00000000  00063775  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0006a7e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a7c  00000000  00000000  0006a864  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000288 	.word	0x20000288
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005058 	.word	0x08005058

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2000028c 	.word	0x2000028c
 80002d4:	08005058 	.word	0x08005058

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_InitTick+0x3c>)
{
 80005ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_InitTick+0x40>)
 80005f0:	7818      	ldrb	r0, [r3, #0]
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f8ac 	bl	800075c <HAL_SYSTICK_Config>
 8000604:	4604      	mov	r4, r0
 8000606:	b958      	cbnz	r0, 8000620 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	2d0f      	cmp	r5, #15
 800060a:	d809      	bhi.n	8000620 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	4602      	mov	r2, r0
 800060e:	4629      	mov	r1, r5
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f85c 	bl	80006d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_InitTick+0x44>)
 800061a:	4620      	mov	r0, r4
 800061c:	601d      	str	r5, [r3, #0]
 800061e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000622:	bd38      	pop	{r3, r4, r5, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000118 	.word	0x20000118
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_Init>:
{
 8000630:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 f83a 	bl	80006ac <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffd5 	bl	80005e8 <HAL_InitTick>
 800063e:	4604      	mov	r4, r0
 8000640:	b918      	cbnz	r0, 800064a <HAL_Init+0x1a>
  HAL_MspInit();
 8000642:	f004 f943 	bl	80048cc <HAL_MspInit>
}
 8000646:	4620      	mov	r0, r4
 8000648:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800064a:	2401      	movs	r4, #1
 800064c:	e7fb      	b.n	8000646 <HAL_Init+0x16>
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200002a4 	.word	0x200002a4
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	200002a4 	.word	0x200002a4

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b538      	push	{r3, r4, r5, lr}
 8000676:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000678:	f7ff fff6 	bl	8000668 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800067e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000680:	bf1e      	ittt	ne
 8000682:	4b04      	ldrne	r3, [pc, #16]	; (8000694 <HAL_Delay+0x20>)
 8000684:	781b      	ldrbne	r3, [r3, #0]
 8000686:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000688:	f7ff ffee 	bl	8000668 <HAL_GetTick>
 800068c:	1b40      	subs	r0, r0, r5
 800068e:	4284      	cmp	r4, r0
 8000690:	d8fa      	bhi.n	8000688 <HAL_Delay+0x14>
  {
  }
}
 8000692:	bd38      	pop	{r3, r4, r5, pc}
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));  
 8000698:	4a03      	ldr	r2, [pc, #12]	; (80006a8 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 800069a:	6853      	ldr	r3, [r2, #4]
 800069c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80006a0:	4318      	orrs	r0, r3
 80006a2:	6050      	str	r0, [r2, #4]
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	58000400 	.word	0x58000400

080006ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ae:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006b2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006ba:	041b      	lsls	r3, r3, #16
 80006bc:	0c1b      	lsrs	r3, r3, #16
 80006be:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006c6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006c8:	60d3      	str	r3, [r2, #12]
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d0:	4b19      	ldr	r3, [pc, #100]	; (8000738 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	68dc      	ldr	r4, [r3, #12]
 80006d6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006da:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	2b04      	cmp	r3, #4
 80006e2:	bf28      	it	cs
 80006e4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ec:	bf8c      	ite	hi
 80006ee:	3c03      	subhi	r4, #3
 80006f0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f2:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80006fc:	ea01 0103 	and.w	r1, r1, r3
 8000700:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	fa05 f404 	lsl.w	r4, r5, r4
 8000708:	f104 34ff 	add.w	r4, r4, #4294967295
 800070c:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	ea42 0201 	orr.w	r2, r2, r1
 8000714:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000718:	db07      	blt.n	800072a <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800071e:	b2d2      	uxtb	r2, r2
 8000720:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000724:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000728:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	f000 000f 	and.w	r0, r0, #15
 800072e:	b2d2      	uxtb	r2, r2
 8000730:	4b02      	ldr	r3, [pc, #8]	; (800073c <HAL_NVIC_SetPriority+0x6c>)
 8000732:	541a      	strb	r2, [r3, r0]
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	e000ed14 	.word	0xe000ed14

08000740 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000740:	2800      	cmp	r0, #0
 8000742:	db08      	blt.n	8000756 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000744:	0942      	lsrs	r2, r0, #5
 8000746:	2301      	movs	r3, #1
 8000748:	f000 001f 	and.w	r0, r0, #31
 800074c:	fa03 f000 	lsl.w	r0, r3, r0
 8000750:	4b01      	ldr	r3, [pc, #4]	; (8000758 <HAL_NVIC_EnableIRQ+0x18>)
 8000752:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100

0800075c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	3801      	subs	r0, #1
 800075e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000762:	d20a      	bcs.n	800077a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000766:	21f0      	movs	r1, #240	; 0xf0
 8000768:	4a06      	ldr	r2, [pc, #24]	; (8000784 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000774:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e010 	.word	0xe000e010
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8000788:	688b      	ldr	r3, [r1, #8]
 800078a:	680a      	ldr	r2, [r1, #0]
  uint32_t macregval;
  
  /*------------------------ MACCR Configuration --------------------*/  
  macregval =(macconf->InterPacketGapVal |
              macconf->SourceAddrControl |
                (uint32_t)(macconf->ChecksumOffload << 27) |  
 800078c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8000790:	431a      	orrs	r2, r3
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
                    (uint32_t)(macconf->Support2KPacket << 22) |
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
                          (uint32_t)(!macconf->Watchdog << 19) | 
 8000792:	7c0b      	ldrb	r3, [r1, #16]
 8000794:	2b00      	cmp	r3, #0
{
 8000796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                          (uint32_t)(!macconf->Watchdog << 19) | 
 800079a:	bf08      	it	eq
 800079c:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
{
 80007a0:	b085      	sub	sp, #20
                          (uint32_t)(!macconf->Watchdog << 19) | 
 80007a2:	bf18      	it	ne
 80007a4:	2300      	movne	r3, #0
                  (uint32_t)(macconf->GiantPacketSizeLimitControl << 23) |
 80007a6:	f891 e00c 	ldrb.w	lr, [r1, #12]
                    (uint32_t)(macconf->Support2KPacket << 22) |
 80007aa:	7b4f      	ldrb	r7, [r1, #13]
                          (uint32_t)(!macconf->Watchdog << 19) | 
 80007ac:	9300      	str	r3, [sp, #0]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80007ae:	7c4b      	ldrb	r3, [r1, #17]
                      (uint32_t)(macconf->CRCStripTypePacket << 21) |
 80007b0:	7b8e      	ldrb	r6, [r1, #14]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80007b2:	2b00      	cmp	r3, #0
                        (uint32_t)(macconf->AutomaticPadCRCStrip << 20) | 
 80007b4:	7bcd      	ldrb	r5, [r1, #15]
                              (uint32_t)(macconf->JumboPacket << 16) |
 80007b6:	7c8c      	ldrb	r4, [r1, #18]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80007b8:	bf0c      	ite	eq
 80007ba:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 80007be:	2300      	movne	r3, #0
                                macconf->Speed |
                                  macconf->DuplexMode | 
                                    (uint32_t)(macconf->LoopbackMode << 12) |
 80007c0:	f891 901c 	ldrb.w	r9, [r1, #28]
                            (uint32_t)(!macconf->Jabber << 17) | 
 80007c4:	9301      	str	r3, [sp, #4]
 80007c6:	694b      	ldr	r3, [r1, #20]
                                      (uint32_t)(macconf->CarrierSenseBeforeTransmit << 11)|
 80007c8:	f891 b01d 	ldrb.w	fp, [r1, #29]
 80007cc:	431a      	orrs	r2, r3
 80007ce:	698b      	ldr	r3, [r1, #24]
 80007d0:	4313      	orrs	r3, r2
                                        (uint32_t)(!macconf->ReceiveOwn << 10)|
 80007d2:	7f8a      	ldrb	r2, [r1, #30]
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	bf0c      	ite	eq
 80007d8:	f44f 6280 	moveq.w	r2, #1024	; 0x400
 80007dc:	2200      	movne	r2, #0
 80007de:	9202      	str	r2, [sp, #8]
                                          (uint32_t)(macconf->CarrierSenseDuringTransmit << 9)|
 80007e0:	7fca      	ldrb	r2, [r1, #31]
 80007e2:	9203      	str	r2, [sp, #12]
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 80007e4:	f891 2020 	ldrb.w	r2, [r1, #32]
 80007e8:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit | 
                                                (uint32_t)(macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);
  
  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80007ea:	6802      	ldr	r2, [r0, #0]
 80007ec:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80007ee:	f8d2 a000 	ldr.w	sl, [r2]
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 80007f2:	bf08      	it	eq
 80007f4:	f44f 7880 	moveq.w	r8, #256	; 0x100
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80007f8:	ea43 0300 	orr.w	r3, r3, r0
 80007fc:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 80007fe:	f02a 4a7f 	bic.w	sl, sl, #4278190080	; 0xff000000
                                            (uint32_t)(!macconf->RetryTransmission << 8)| 
 8000802:	bf18      	it	ne
 8000804:	f04f 0800 	movne.w	r8, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000808:	4303      	orrs	r3, r0
 800080a:	9803      	ldr	r0, [sp, #12]
 800080c:	f42a 0a7b 	bic.w	sl, sl, #16449536	; 0xfb0000
 8000810:	f42a 4afe 	bic.w	sl, sl, #32512	; 0x7f00
 8000814:	f02a 0a7c 	bic.w	sl, sl, #124	; 0x7c
 8000818:	ea43 030a 	orr.w	r3, r3, sl
 800081c:	ea43 63cc 	orr.w	r3, r3, ip, lsl #27
 8000820:	ea43 53ce 	orr.w	r3, r3, lr, lsl #23
 8000824:	ea43 5387 	orr.w	r3, r3, r7, lsl #22
 8000828:	ea43 5346 	orr.w	r3, r3, r6, lsl #21
 800082c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8000830:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000834:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 8000838:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                (uint32_t)(macconf->DeferralCheck << 4)|
 800083c:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8000840:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8000844:	9800      	ldr	r0, [sp, #0]
 8000846:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 800084a:	4303      	orrs	r3, r0
 800084c:	9801      	ldr	r0, [sp, #4]
 800084e:	4303      	orrs	r3, r0
 8000850:	9802      	ldr	r0, [sp, #8]
 8000852:	4303      	orrs	r3, r0
 8000854:	ea43 0308 	orr.w	r3, r3, r8
 8000858:	6013      	str	r3, [r2, #0]
  
  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800085a:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 800085c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               (uint32_t)(macconf->ExtendedInterPacketGap << 24)|
 8000860:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 8000864:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);
  
  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000866:	6853      	ldr	r3, [r2, #4]
                 (uint32_t)(macconf->UnicastSlowProtocolPacketDetect << 18)|
 8000868:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800086c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   (uint32_t)(macconf->SlowProtocolDetect << 17)|
 8000870:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     (uint32_t)(!macconf->CRCCheckingRxPackets << 16) |
 8000874:	bf0c      	ite	eq
 8000876:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800087a:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800087c:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 8000880:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000884:	f023 0307 	bic.w	r3, r3, #7
 8000888:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 800088c:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 800088e:	4333      	orrs	r3, r6
  
  /*------------------------ MACTFCR Configuration --------------------*/  
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold | 
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
                   (macconf->PauseTime << 16));
 8000890:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8000892:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8000896:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold | 
 800089a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800089c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
  macregval = ((uint32_t)(macconf->TransmitFlowControl << 1) |
 80008a0:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80008a4:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 80008a6:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80008a8:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 80008aa:	68d3      	ldr	r3, [r2, #12]
 80008ac:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80008b0:	f023 0301 	bic.w	r3, r3, #1
 80008b4:	4303      	orrs	r3, r0
  macregval = ((uint32_t)(macconf->ProgrammableWatchdog << 8) |
 80008b6:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);   
 80008ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80008be:	60d3      	str	r3, [r2, #12]
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 80008c0:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
 80008c4:	2b00      	cmp	r3, #0
  
  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 80008c6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80008c8:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 (uint32_t)(!macconf->ZeroQuantaPause << 7) |
 80008cc:	bf0c      	ite	eq
 80008ce:	2080      	moveq	r0, #128	; 0x80
 80008d0:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 80008d2:	041b      	lsls	r3, r3, #16
 80008d4:	0c1b      	lsrs	r3, r3, #16
 80008d6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008da:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/  
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
  
  /*------------------------ MTLRQOMR Configuration --------------------*/  
  macregval = (macconf->ReceiveQueueMode |
 80008dc:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 80008de:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
                 (uint32_t)(macconf->ForwardRxErrorPacket << 4) |
 80008e2:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval); 
 80008e6:	4303      	orrs	r3, r0
 80008e8:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80008ea:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80008ee:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80008f2:	f020 0003 	bic.w	r0, r0, #3
 80008f6:	4303      	orrs	r3, r0
               (uint32_t)(macconf->UnicastPausePacketDetect << 1));
 80008f8:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80008fc:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000900:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8000902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8000906:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 800090a:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 800090e:	4303      	orrs	r3, r0
 8000910:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 8000914:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                   (uint32_t)(macconf->ForwardRxUndersizedGoodPacket << 3));
 8000918:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 800091c:	2b00      	cmp	r3, #0
  
  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);  
 800091e:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
 8000922:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               (uint32_t)(!macconf->DropTCPIPChecksumErrorPacket << 6) |
 8000926:	bf0c      	ite	eq
 8000928:	2040      	moveq	r0, #64	; 0x40
 800092a:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);  
 800092c:	432b      	orrs	r3, r5
 800092e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8000932:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000936:	4303      	orrs	r3, r0
 8000938:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 800093c:	b005      	add	sp, #20
 800093e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000944 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/    
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000944:	6802      	ldr	r2, [r0, #0]
 8000946:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 800094a:	6803      	ldr	r3, [r0, #0]
 800094c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 8000950:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000952:	f023 0302 	bic.w	r3, r3, #2
 8000956:	680c      	ldr	r4, [r1, #0]
  
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8000958:	790d      	ldrb	r5, [r1, #4]
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800095a:	4323      	orrs	r3, r4
               dmaconf->BurstMode |
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
  
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800095c:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8000960:	6003      	str	r3, [r0, #0]
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
 8000962:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000964:	5910      	ldr	r0, [r2, r4]
                 (uint32_t)(dmaconf->RebuildINCRxBurst << 15));
 8000966:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000968:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 800096c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8000970:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000972:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = ((uint32_t)(dmaconf->AddressAlignedBeats << 12) |
 8000976:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8000978:	4303      	orrs	r3, r0
  
  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
               dmaconf->MaximumSegmentSize);
  
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800097a:	f502 5088 	add.w	r0, r2, #4352	; 0x1100
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800097e:	5113      	str	r3, [r2, r4]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <ETH_SetDMAConfig+0x88>)
 8000982:	6805      	ldr	r5, [r0, #0]
  dmaregval = ((uint32_t)(dmaconf->PBLx8Mode <<16) | 
 8000984:	7b4c      	ldrb	r4, [r1, #13]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000986:	402b      	ands	r3, r5
 8000988:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800098c:	6a0c      	ldr	r4, [r1, #32]
 800098e:	4323      	orrs	r3, r4
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength | 
               (uint32_t)(dmaconf->SecondPacketOperate << 4)| 
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
  
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8000990:	f241 1404 	movw	r4, #4356	; 0x1104
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8000994:	6003      	str	r3, [r0, #0]
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
 8000996:	7f4b      	ldrb	r3, [r1, #29]
               (uint32_t)(dmaconf->SecondPacketOperate << 4)| 
 8000998:	7d08      	ldrb	r0, [r1, #20]
                 (uint32_t)(dmaconf->TCPSegmentation << 12));
 800099a:	031b      	lsls	r3, r3, #12
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800099c:	5915      	ldr	r5, [r2, r4]
  dmaregval = (dmaconf->TxDMABurstLength | 
 800099e:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80009a2:	6908      	ldr	r0, [r1, #16]
 80009a4:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80009a6:	480a      	ldr	r0, [pc, #40]	; (80009d0 <ETH_SetDMAConfig+0x8c>)
 80009a8:	4028      	ands	r0, r5
 80009aa:	4303      	orrs	r3, r0
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
               dmaconf->RxDMABurstLength);
  
  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80009ac:	f241 1008 	movw	r0, #4360	; 0x1108
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80009b0:	5113      	str	r3, [r2, r4]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80009b2:	5813      	ldr	r3, [r2, r0]
  dmaregval = ((uint32_t)(dmaconf->FlushRxPacket << 31) |
 80009b4:	7f0c      	ldrb	r4, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80009b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	6989      	ldr	r1, [r1, #24]
 80009bc:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80009c0:	ea43 73c4 	orr.w	r3, r3, r4, lsl #31
 80009c4:	430b      	orrs	r3, r1
 80009c6:	5013      	str	r3, [r2, r0]
 80009c8:	bd30      	pop	{r4, r5, pc}
 80009ca:	bf00      	nop
 80009cc:	fffec000 	.word	0xfffec000
 80009d0:	ffc0efef 	.word	0xffc0efef

080009d4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80009d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmpreg, hclk;
  
  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80009d6:	6803      	ldr	r3, [r0, #0]
{
 80009d8:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 80009da:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  
  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;  
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80009de:	f001 faf7 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_ETH_SetMDIOClockRange+0x58>)
 80009e4:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;  
 80009e6:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000)&&(hclk < 35000000))
 80009ea:	4403      	add	r3, r0
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d805      	bhi.n	80009fc <HAL_ETH_SetMDIOClockRange+0x28>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80009f0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    /* CSR Clock Range between 150-200 MHz */ 
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;    
  }
  
  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;		
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
 80009fa:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_ETH_SetMDIOClockRange+0x60>)
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_ETH_SetMDIOClockRange+0x64>)
 8000a00:	4403      	add	r3, r0
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d802      	bhi.n	8000a0c <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8000a06:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8000a0a:	e7f3      	b.n	80009f4 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <HAL_ETH_SetMDIOClockRange+0x68>)
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8000a10:	4403      	add	r3, r0
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d9ee      	bls.n	80009f4 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_ETH_SetMDIOClockRange+0x70>)
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_ETH_SetMDIOClockRange+0x74>)
 8000a1a:	4403      	add	r3, r0
 8000a1c:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8000a1e:	bf94      	ite	ls
 8000a20:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;    
 8000a24:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8000a28:	e7e4      	b.n	80009f4 <HAL_ETH_SetMDIOClockRange+0x20>
 8000a2a:	bf00      	nop
 8000a2c:	feced300 	.word	0xfeced300
 8000a30:	00e4e1bf 	.word	0x00e4e1bf
 8000a34:	fde9f140 	.word	0xfde9f140
 8000a38:	017d783f 	.word	0x017d783f
 8000a3c:	fc6c7900 	.word	0xfc6c7900
 8000a40:	026259ff 	.word	0x026259ff
 8000a44:	fa0a1f00 	.word	0xfa0a1f00
 8000a48:	02faf07f 	.word	0x02faf07f

08000a4c <HAL_ETH_Init>:
{
 8000a4c:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 8000a4e:	4605      	mov	r5, r0
{
 8000a50:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 8000a52:	2800      	cmp	r0, #0
 8000a54:	f000 80c0 	beq.w	8000bd8 <HAL_ETH_Init+0x18c>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000a58:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000a5c:	b90b      	cbnz	r3, 8000a62 <HAL_ETH_Init+0x16>
    HAL_ETH_MspInit(heth);
 8000a5e:	f003 fda1 	bl	80045a4 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 8000a62:	2323      	movs	r3, #35	; 0x23
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000a64:	7a28      	ldrb	r0, [r5, #8]
  heth->gState = HAL_ETH_STATE_BUSY;
 8000a66:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	4b96      	ldr	r3, [pc, #600]	; (8000cc4 <HAL_ETH_Init+0x278>)
 8000a6c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000a70:	f042 0202 	orr.w	r2, r2, #2
 8000a74:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8000a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000a84:	2800      	cmp	r0, #0
 8000a86:	f040 8098 	bne.w	8000bba <HAL_ETH_Init+0x16e>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000a8a:	f7ff fe05 	bl	8000698 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	f042 0201 	orr.w	r2, r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000a9c:	f7ff fde4 	bl	8000668 <HAL_GetTick>
 8000aa0:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR))
 8000aa2:	682b      	ldr	r3, [r5, #0]
 8000aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aa8:	681c      	ldr	r4, [r3, #0]
 8000aaa:	f014 0401 	ands.w	r4, r4, #1
 8000aae:	f040 8087 	bne.w	8000bc0 <HAL_ETH_Init+0x174>
  ETH_MAC_MDIO_ClkConfig(heth);
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	f7ff ff8e 	bl	80009d4 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 8000ab8:	682e      	ldr	r6, [r5, #0]
 8000aba:	f001 fa89 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8000abe:	4b82      	ldr	r3, [pc, #520]	; (8000cc8 <HAL_ETH_Init+0x27c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000ac0:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10; 
 8000ac2:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE; 
 8000ac4:	f88d 4049 	strb.w	r4, [sp, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8000ac8:	f88d 404b 	strb.w	r4, [sp, #75]	; 0x4b
  macDefaultConf.DeferralCheck = DISABLE;
 8000acc:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8000ad0:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8000ad4:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8000ad6:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8000ada:	f88d 408e 	strb.w	r4, [sp, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8000ade:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8000ae2:	940d      	str	r4, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 8000ae4:	f88d 403e 	strb.w	r4, [sp, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8000ae8:	f88d 4048 	strb.w	r4, [sp, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8000aec:	941f      	str	r4, [sp, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8000aee:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8000af0:	9416      	str	r4, [sp, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8000af2:	f88d 406c 	strb.w	r4, [sp, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8000af6:	f88d 4082 	strb.w	r4, [sp, #130]	; 0x82
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8000afa:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 8000afe:	fbb0 f0f3 	udiv	r0, r0, r3
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 8000b06:	3801      	subs	r0, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8000b08:	9311      	str	r3, [sp, #68]	; 0x44
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000b0a:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  WRITE_REG(heth->Instance->MAC1USTCR, ((HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1));
 8000b0e:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000b12:	2601      	movs	r6, #1
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8000b14:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000b16:	2320      	movs	r3, #32
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000b18:	4628      	mov	r0, r5
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8000b1a:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8000b1e:	9322      	str	r3, [sp, #136]	; 0x88
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000b20:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  macDefaultConf.ChecksumOffload = ENABLE; 
 8000b24:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8000b28:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8000b2e:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.Speed = ETH_SPEED_100M;
 8000b32:	9310      	str	r3, [sp, #64]	; 0x40
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000b34:	2302      	movs	r3, #2
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8000b36:	f88d 603a 	strb.w	r6, [sp, #58]	; 0x3a
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8000b3a:	f88d 608c 	strb.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.Jabber = ENABLE;
 8000b3e:	f88d 603d 	strb.w	r6, [sp, #61]	; 0x3d
  macDefaultConf.ReceiveOwn = ENABLE;
 8000b42:	f88d 604a 	strb.w	r6, [sp, #74]	; 0x4a
  macDefaultConf.RetryTransmission = ENABLE;
 8000b46:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.Support2KPacket = DISABLE;
 8000b4a:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8000b4e:	9321      	str	r3, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8000b50:	f88d 4080 	strb.w	r4, [sp, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8000b54:	f88d 4081 	strb.w	r4, [sp, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8000b58:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8000b5c:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8000b60:	941c      	str	r4, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8000b62:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  ETH_SetMACConfig(heth, &macDefaultConf);
 8000b66:	f7ff fe0f 	bl	8000788 <ETH_SetMACConfig>
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000b6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000b6e:	a902      	add	r1, sp, #8
 8000b70:	4628      	mov	r0, r5
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8000b72:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8000b76:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8000b78:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000b7a:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8000b7e:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8000b80:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8000b82:	9402      	str	r4, [sp, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8000b84:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8000b88:	f88d 4015 	strb.w	r4, [sp, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8000b8c:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8000b90:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8000b94:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8000b98:	f7ff fed4 	bl	8000944 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);	
 8000b9c:	6829      	ldr	r1, [r5, #0]
  if ((heth->Init.RxBuffLen % 4) != 0)
 8000b9e:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);	
 8000ba0:	f501 5288 	add.w	r2, r1, #4352	; 0x1100
 8000ba4:	6813      	ldr	r3, [r2, #0]
 8000ba6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8000baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000bae:	6013      	str	r3, [r2, #0]
  if ((heth->Init.RxBuffLen % 4) != 0)
 8000bb0:	f010 0203 	ands.w	r2, r0, #3
 8000bb4:	d012      	beq.n	8000bdc <HAL_ETH_Init+0x190>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000bb6:	656e      	str	r6, [r5, #84]	; 0x54
 8000bb8:	e00b      	b.n	8000bd2 <HAL_ETH_Init+0x186>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000bba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000bbe:	e764      	b.n	8000a8a <HAL_ETH_Init+0x3e>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000bc0:	f7ff fd52 	bl	8000668 <HAL_GetTick>
 8000bc4:	1b80      	subs	r0, r0, r6
 8000bc6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000bca:	f67f af6a 	bls.w	8000aa2 <HAL_ETH_Init+0x56>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	656b      	str	r3, [r5, #84]	; 0x54
    heth->gState = HAL_ETH_STATE_ERROR;
 8000bd2:	23e0      	movs	r3, #224	; 0xe0
 8000bd4:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
    return HAL_ERROR;
 8000bd8:	2001      	movs	r0, #1
 8000bda:	e071      	b.n	8000cc0 <HAL_ETH_Init+0x274>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000bdc:	f241 1408 	movw	r4, #4360	; 0x1108
 8000be0:	590b      	ldr	r3, [r1, r4]
 8000be2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000be6:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8000bea:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  uint32_t i;
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < ETH_TX_DESC_CNT; i++)
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8000bee:	68e8      	ldr	r0, [r5, #12]
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000bf0:	510b      	str	r3, [r1, r4]
 8000bf2:	f100 0660 	add.w	r6, r0, #96	; 0x60
 8000bf6:	f105 0418 	add.w	r4, r5, #24
    dmatxdesc = heth->Init.TxDesc + i;
 8000bfa:	4603      	mov	r3, r0

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	705a      	strb	r2, [r3, #1]
 8000c00:	709a      	strb	r2, [r3, #2]
 8000c02:	70da      	strb	r2, [r3, #3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8000c04:	711a      	strb	r2, [r3, #4]
 8000c06:	715a      	strb	r2, [r3, #5]
 8000c08:	719a      	strb	r2, [r3, #6]
 8000c0a:	71da      	strb	r2, [r3, #7]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8000c0c:	721a      	strb	r2, [r3, #8]
 8000c0e:	725a      	strb	r2, [r3, #9]
 8000c10:	729a      	strb	r2, [r3, #10]
 8000c12:	72da      	strb	r2, [r3, #11]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8000c14:	731a      	strb	r2, [r3, #12]
 8000c16:	735a      	strb	r2, [r3, #13]
 8000c18:	739a      	strb	r2, [r3, #14]
 8000c1a:	73da      	strb	r2, [r3, #15]
    
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8000c1c:	f844 3b04 	str.w	r3, [r4], #4
 8000c20:	3318      	adds	r3, #24
  for(i=0; i < ETH_TX_DESC_CNT; i++)
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d1ea      	bne.n	8000bfc <HAL_ETH_Init+0x1b0>
  }
  
  heth->TxDescList.CurTxDesc = 0;
 8000c26:	62aa      	str	r2, [r5, #40]	; 0x28
  
  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8000c28:	f241 132c 	movw	r3, #4396	; 0x112c
 8000c2c:	2203      	movs	r2, #3
  
  for(i = 0; i < ETH_RX_DESC_CNT; i++)
  {
    dmarxdesc =  heth->Init.RxDesc + i;
    
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8000c2e:	2400      	movs	r4, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8000c30:	50ca      	str	r2, [r1, r3]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8000c32:	f241 1314 	movw	r3, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 8000c36:	692a      	ldr	r2, [r5, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8000c38:	50c8      	str	r0, [r1, r3]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8000c3a:	f501 5389 	add.w	r3, r1, #4384	; 0x1120
 8000c3e:	f102 0660 	add.w	r6, r2, #96	; 0x60
 8000c42:	6018      	str	r0, [r3, #0]
 8000c44:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    dmarxdesc =  heth->Init.RxDesc + i;
 8000c48:	4613      	mov	r3, r2
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8000c4a:	701c      	strb	r4, [r3, #0]
 8000c4c:	705c      	strb	r4, [r3, #1]
 8000c4e:	709c      	strb	r4, [r3, #2]
 8000c50:	70dc      	strb	r4, [r3, #3]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8000c52:	711c      	strb	r4, [r3, #4]
 8000c54:	715c      	strb	r4, [r3, #5]
 8000c56:	719c      	strb	r4, [r3, #6]
 8000c58:	71dc      	strb	r4, [r3, #7]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8000c5a:	721c      	strb	r4, [r3, #8]
 8000c5c:	725c      	strb	r4, [r3, #9]
 8000c5e:	729c      	strb	r4, [r3, #10]
 8000c60:	72dc      	strb	r4, [r3, #11]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8000c62:	731c      	strb	r4, [r3, #12]
 8000c64:	735c      	strb	r4, [r3, #13]
 8000c66:	739c      	strb	r4, [r3, #14]
 8000c68:	73dc      	strb	r4, [r3, #15]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8000c6a:	741c      	strb	r4, [r3, #16]
 8000c6c:	745c      	strb	r4, [r3, #17]
 8000c6e:	749c      	strb	r4, [r3, #18]
 8000c70:	74dc      	strb	r4, [r3, #19]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8000c72:	751c      	strb	r4, [r3, #20]
 8000c74:	755c      	strb	r4, [r3, #21]
 8000c76:	759c      	strb	r4, [r3, #22]
 8000c78:	75dc      	strb	r4, [r3, #23]
    
    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8000c7a:	f840 3b04 	str.w	r3, [r0], #4
 8000c7e:	3318      	adds	r3, #24
  for(i = 0; i < ETH_RX_DESC_CNT; i++)
 8000c80:	42b3      	cmp	r3, r6
 8000c82:	d1e2      	bne.n	8000c4a <HAL_ETH_Init+0x1fe>
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
  WRITE_REG(heth->RxDescList.ItMode, 0);
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
  
  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, (ETH_RX_DESC_CNT - 1));
 8000c84:	2003      	movs	r0, #3
 8000c86:	f241 1330 	movw	r3, #4400	; 0x1130
  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8000c8a:	63ec      	str	r4, [r5, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8000c8c:	642c      	str	r4, [r5, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8000c8e:	646c      	str	r4, [r5, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8000c90:	64ec      	str	r4, [r5, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8000c92:	64ac      	str	r4, [r5, #72]	; 0x48
  WRITE_REG(heth->Instance->DMACRDRLR, (ETH_RX_DESC_CNT - 1));
 8000c94:	50c8      	str	r0, [r1, r3]
  
  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8000c96:	f241 131c 	movw	r3, #4380	; 0x111c
  return HAL_OK;
 8000c9a:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8000c9c:	50ca      	str	r2, [r1, r3]
  
  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)heth->Init.RxDesc + ((ETH_RX_DESC_CNT - 1)*sizeof(ETH_DMADescTypeDef))));
 8000c9e:	3248      	adds	r2, #72	; 0x48
 8000ca0:	f241 1328 	movw	r3, #4392	; 0x1128
 8000ca4:	50ca      	str	r2, [r1, r3]
  heth->Instance->MACA0HR = ((heth->Init.MACAddr[5] << 8) | heth->Init.MACAddr[4]);
 8000ca6:	686b      	ldr	r3, [r5, #4]
 8000ca8:	889a      	ldrh	r2, [r3, #4]
 8000caa:	f8c1 2300 	str.w	r2, [r1, #768]	; 0x300
 8000cae:	681b      	ldr	r3, [r3, #0]
  heth->Instance->MACA0LR = ((heth->Init.MACAddr[3] << 24) | (heth->Init.MACAddr[2] << 16) | (heth->Init.MACAddr[1] << 8) | heth->Init.MACAddr[0]);
 8000cb0:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 8000cb4:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000cb6:	656c      	str	r4, [r5, #84]	; 0x54
  heth->gState = HAL_ETH_STATE_READY;
 8000cb8:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
  heth->RxState = HAL_ETH_STATE_READY;
 8000cbc:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
}
 8000cc0:	b024      	add	sp, #144	; 0x90
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	58024400 	.word	0x58024400
 8000cc8:	000f4240 	.word	0x000f4240

08000ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cd0:	680b      	ldr	r3, [r1, #0]
{
 8000cd2:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000e98 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cd8:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cdc:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 8000ce0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000e9c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000ce4:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce6:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000ce8:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cea:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 8000cee:	42af      	cmp	r7, r5
 8000cf0:	f040 80b7 	bne.w	8000e62 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf4:	684a      	ldr	r2, [r1, #4]
 8000cf6:	f022 0610 	bic.w	r6, r2, #16
 8000cfa:	2e02      	cmp	r6, #2
 8000cfc:	d116      	bne.n	8000d2c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 8000cfe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d02:	f003 0b07 	and.w	fp, r3, #7
 8000d06:	f04f 0e0f 	mov.w	lr, #15
 8000d0a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000d0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000d12:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d16:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000d1a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d1e:	690c      	ldr	r4, [r1, #16]
 8000d20:	fa04 f40b 	lsl.w	r4, r4, fp
 8000d24:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000d28:	f8ca 4020 	str.w	r4, [sl, #32]
 8000d2c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d30:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000d32:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d36:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d3a:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3e:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d40:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d44:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d46:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d48:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000d4c:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000d50:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d54:	d810      	bhi.n	8000d78 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 8000d56:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d58:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d5c:	68ce      	ldr	r6, [r1, #12]
 8000d5e:	fa06 fe0a 	lsl.w	lr, r6, sl
 8000d62:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000d66:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000d68:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d6a:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d6e:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000d72:	409e      	lsls	r6, r3
 8000d74:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000d76:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000d78:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d7a:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d7c:	688e      	ldr	r6, [r1, #8]
 8000d7e:	fa06 f60a 	lsl.w	r6, r6, sl
 8000d82:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000d84:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d86:	00d4      	lsls	r4, r2, #3
 8000d88:	d56b      	bpl.n	8000e62 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000d8e:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000d92:	f003 0703 	and.w	r7, r3, #3
 8000d96:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	f044 0402 	orr.w	r4, r4, #2
 8000d9e:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000da2:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da4:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 8000da8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000dac:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000db0:	f004 0402 	and.w	r4, r4, #2
 8000db4:	9403      	str	r4, [sp, #12]
 8000db6:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000db8:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8000dbc:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000dc0:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000dc4:	4c33      	ldr	r4, [pc, #204]	; (8000e94 <HAL_GPIO_Init+0x1c8>)
 8000dc6:	42a0      	cmp	r0, r4
 8000dc8:	d052      	beq.n	8000e70 <HAL_GPIO_Init+0x1a4>
 8000dca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dce:	42a0      	cmp	r0, r4
 8000dd0:	d050      	beq.n	8000e74 <HAL_GPIO_Init+0x1a8>
 8000dd2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dd6:	42a0      	cmp	r0, r4
 8000dd8:	d04e      	beq.n	8000e78 <HAL_GPIO_Init+0x1ac>
 8000dda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dde:	42a0      	cmp	r0, r4
 8000de0:	d04c      	beq.n	8000e7c <HAL_GPIO_Init+0x1b0>
 8000de2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000de6:	42a0      	cmp	r0, r4
 8000de8:	d04a      	beq.n	8000e80 <HAL_GPIO_Init+0x1b4>
 8000dea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dee:	42a0      	cmp	r0, r4
 8000df0:	d048      	beq.n	8000e84 <HAL_GPIO_Init+0x1b8>
 8000df2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000df6:	42a0      	cmp	r0, r4
 8000df8:	d046      	beq.n	8000e88 <HAL_GPIO_Init+0x1bc>
 8000dfa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000dfe:	42a0      	cmp	r0, r4
 8000e00:	d044      	beq.n	8000e8c <HAL_GPIO_Init+0x1c0>
 8000e02:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e06:	42a0      	cmp	r0, r4
 8000e08:	d042      	beq.n	8000e90 <HAL_GPIO_Init+0x1c4>
 8000e0a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e0e:	42a0      	cmp	r0, r4
 8000e10:	bf14      	ite	ne
 8000e12:	240a      	movne	r4, #10
 8000e14:	2409      	moveq	r4, #9
 8000e16:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e18:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e1a:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e1e:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8000e24:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	bf54      	ite	pl
 8000e2a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e2c:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e2e:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 8000e30:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8000e34:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e38:	bf54      	ite	pl
 8000e3a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e3c:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e3e:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000e40:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8000e44:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000e48:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 8000e4c:	bf54      	ite	pl
 8000e4e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000e50:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e52:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000e54:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000e56:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 8000e58:	bf54      	ite	pl
 8000e5a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000e5c:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 8000e5e:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e62:	3301      	adds	r3, #1
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	f47f af3d 	bne.w	8000ce4 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 8000e6a:	b005      	add	sp, #20
 8000e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e70:	2400      	movs	r4, #0
 8000e72:	e7d0      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e74:	2401      	movs	r4, #1
 8000e76:	e7ce      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e78:	2402      	movs	r4, #2
 8000e7a:	e7cc      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e7c:	2403      	movs	r4, #3
 8000e7e:	e7ca      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e80:	2404      	movs	r4, #4
 8000e82:	e7c8      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e84:	2405      	movs	r4, #5
 8000e86:	e7c6      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e88:	2406      	movs	r4, #6
 8000e8a:	e7c4      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e8c:	2407      	movs	r4, #7
 8000e8e:	e7c2      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e90:	2408      	movs	r4, #8
 8000e92:	e7c0      	b.n	8000e16 <HAL_GPIO_Init+0x14a>
 8000e94:	58020000 	.word	0x58020000
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	58000080 	.word	0x58000080

08000ea0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	b10a      	cbz	r2, 8000ea6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000ea2:	8301      	strh	r1, [r0, #24]
 8000ea4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 8000ea6:	8341      	strh	r1, [r0, #26]
 8000ea8:	4770      	bx	lr

08000eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000eaa:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000eac:	4605      	mov	r5, r0
{ 
 8000eae:	b08b      	sub	sp, #44	; 0x2c
  if(hpcd == NULL)
 8000eb0:	2800      	cmp	r0, #0
 8000eb2:	d06d      	beq.n	8000f90 <HAL_PCD_Init+0xe6>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000eb4:	2303      	movs	r3, #3
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000eb6:	462c      	mov	r4, r5
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000eb8:	466e      	mov	r6, sp
 8000eba:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ebc:	f880 33b9 	strb.w	r3, [r0, #953]	; 0x3b9
  HAL_PCD_MspInit(hpcd);
 8000ec0:	f003 fdf6 	bl	8004ab0 <HAL_PCD_MspInit>
 __HAL_PCD_DISABLE(hpcd);
 8000ec4:	f854 0b10 	ldr.w	r0, [r4], #16
 8000ec8:	f002 fb49 	bl	800355e <USB_DisableGlobalInt>
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ece:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ed0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000ed4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ed8:	f105 0410 	add.w	r4, r5, #16
 8000edc:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ee0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ee4:	6828      	ldr	r0, [r5, #0]
 
 /* Init endpoints structures */
 for (i = 0; i < 15 ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 8000ee6:	2601      	movs	r6, #1
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000ee8:	f002 faf8 	bl	80034dc <USB_CoreInit>
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6828      	ldr	r0, [r5, #0]
 8000ef0:	f002 fb3b 	bl	800356a <USB_SetCurrentMode>
 for (i = 0; i < 15 ; i++)
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	462b      	mov	r3, r5
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000ef8:	462a      	mov	r2, r5
   hpcd->IN_ep[i].num = i;
   hpcd->IN_ep[i].tx_fifo_num = i;
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000efa:	4608      	mov	r0, r1
   hpcd->IN_ep[i].num = i;
 8000efc:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8000f00:	321c      	adds	r2, #28
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000f02:	8451      	strh	r1, [r2, #34]	; 0x22
 for (i = 0; i < 15 ; i++)
 8000f04:	3101      	adds	r1, #1
   hpcd->IN_ep[i].is_in = 1;
 8000f06:	7756      	strb	r6, [r2, #29]
 for (i = 0; i < 15 ; i++)
 8000f08:	290f      	cmp	r1, #15
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f0a:	77d0      	strb	r0, [r2, #31]
   hpcd->IN_ep[i].maxpacket =  0;
 8000f0c:	6250      	str	r0, [r2, #36]	; 0x24
   hpcd->IN_ep[i].xfer_buff = 0;
 8000f0e:	6290      	str	r0, [r2, #40]	; 0x28
   hpcd->IN_ep[i].xfer_len = 0;
 8000f10:	6310      	str	r0, [r2, #48]	; 0x30
 for (i = 0; i < 15 ; i++)
 8000f12:	d1f3      	bne.n	8000efc <HAL_PCD_Init+0x52>
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
   hpcd->OUT_ep[i].maxpacket = 0;
   hpcd->OUT_ep[i].xfer_buff = 0;
   hpcd->OUT_ep[i].xfer_len = 0;
   
   hpcd->Instance->DIEPTXF[i] = 0;
 8000f14:	2200      	movs	r2, #0
 8000f16:	f8d5 e000 	ldr.w	lr, [r5]
   hpcd->OUT_ep[i].is_in = 0;
 8000f1a:	4611      	mov	r1, r2
   hpcd->OUT_ep[i].num = i;
 8000f1c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
   hpcd->Instance->DIEPTXF[i] = 0;
 8000f20:	f102 0040 	add.w	r0, r2, #64	; 0x40
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 for (i = 0; i < 15 ; i++)
 8000f26:	3201      	adds	r2, #1
   hpcd->Instance->DIEPTXF[i] = 0;
 8000f28:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
   hpcd->OUT_ep[i].is_in = 0;
 8000f2c:	f883 11f9 	strb.w	r1, [r3, #505]	; 0x1f9
 for (i = 0; i < 15 ; i++)
 8000f30:	2a0f      	cmp	r2, #15
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f32:	f883 11fb 	strb.w	r1, [r3, #507]	; 0x1fb
   hpcd->OUT_ep[i].maxpacket = 0;
 8000f36:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 8000f3a:	f103 031c 	add.w	r3, r3, #28
   hpcd->OUT_ep[i].xfer_buff = 0;
 8000f3e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
   hpcd->OUT_ep[i].xfer_len = 0;
 8000f42:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
   hpcd->Instance->DIEPTXF[i] = 0;
 8000f46:	6041      	str	r1, [r0, #4]
 for (i = 0; i < 15 ; i++)
 8000f48:	d1e8      	bne.n	8000f1c <HAL_PCD_Init+0x72>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4c:	466e      	mov	r6, sp
 8000f4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f58:	e886 0003 	stmia.w	r6, {r0, r1}
 8000f5c:	4670      	mov	r0, lr
 8000f5e:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000f62:	f002 fb19 	bl	8003598 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000f66:	2301      	movs	r3, #1
 8000f68:	f885 33b9 	strb.w	r3, [r5, #953]	; 0x3b9
 
 /* Activate LPM */
 if (hpcd->Init.lpm_enable == 1)
 8000f6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <HAL_PCD_Init+0xce>
 {
   HAL_PCDEx_ActivateLPM(hpcd);
 8000f72:	4628      	mov	r0, r5
 8000f74:	f000 fc42 	bl	80017fc <HAL_PCDEx_ActivateLPM>
 }
 
#if defined (USB_OTG_GCCFG_BCDEN)	
 /* Activate Battery charging */
 if (hpcd->Init.battery_charging_enable ==1)
 8000f78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d102      	bne.n	8000f84 <HAL_PCD_Init+0xda>
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 8000f7e:	4628      	mov	r0, r5
 8000f80:	f000 fc4f 	bl	8001822 <HAL_PCDEx_ActivateBCD>
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000f84:	6828      	ldr	r0, [r5, #0]
 8000f86:	f002 fe11 	bl	8003bac <USB_DevDisconnect>
 return HAL_OK;
 8000f8a:	2000      	movs	r0, #0
}
 8000f8c:	b00b      	add	sp, #44	; 0x2c
 8000f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000f90:	2001      	movs	r0, #1
 8000f92:	e7fb      	b.n	8000f8c <HAL_PCD_Init+0xe2>

08000f94 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f94:	b510      	push	{r4, lr}
 8000f96:	4604      	mov	r4, r0
  
  USB_DevConnect (hpcd->Instance);  
 8000f98:	6800      	ldr	r0, [r0, #0]
 8000f9a:	f002 fdfb 	bl	8003b94 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000f9e:	6820      	ldr	r0, [r4, #0]
 8000fa0:	f002 fad7 	bl	8003552 <USB_EnableGlobalInt>

  return HAL_OK;
}
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	bd10      	pop	{r4, pc}

08000fa8 <HAL_PCD_IRQHandler>:
  * @brief  Handle PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fac:	6807      	ldr	r7, [r0, #0]
{
 8000fae:	b087      	sub	sp, #28
 8000fb0:	4604      	mov	r4, r0
  uint32_t fifoemptymsk = 0, temp = 0;
  USB_OTG_EPTypeDef *ep = NULL;
  uint32_t hclk = 400000000;
    
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000fb2:	4638      	mov	r0, r7
 8000fb4:	f002 fe34 	bl	8003c20 <USB_GetMode>
 8000fb8:	9002      	str	r0, [sp, #8]
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	f040 8145 	bne.w	800124a <HAL_PCD_IRQHandler+0x2a2>
  {
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000fc0:	6820      	ldr	r0, [r4, #0]
 8000fc2:	f002 fdff 	bl	8003bc4 <USB_ReadInterrupts>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	f000 813f 	beq.w	800124a <HAL_PCD_IRQHandler+0x2a2>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000fcc:	6820      	ldr	r0, [r4, #0]
 8000fce:	f002 fdf9 	bl	8003bc4 <USB_ReadInterrupts>
 8000fd2:	0785      	lsls	r5, r0, #30
 8000fd4:	d502      	bpl.n	8000fdc <HAL_PCD_IRQHandler+0x34>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	2202      	movs	r2, #2
 8000fda:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000fdc:	6820      	ldr	r0, [r4, #0]
 8000fde:	f002 fdf1 	bl	8003bc4 <USB_ReadInterrupts>
 8000fe2:	f410 2500 	ands.w	r5, r0, #524288	; 0x80000
 8000fe6:	d00c      	beq.n	8001002 <HAL_PCD_IRQHandler+0x5a>
 8000fe8:	f507 6a30 	add.w	sl, r7, #2816	; 0xb00
    {
      epnum = 0;
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000fec:	6820      	ldr	r0, [r4, #0]
 8000fee:	f002 fded 	bl	8003bcc <USB_ReadDevAllOutEpInterrupt>
 8000ff2:	46a3      	mov	fp, r4
 8000ff4:	4680      	mov	r8, r0
      
      while ( ep_intr )
 8000ff6:	4656      	mov	r6, sl
      epnum = 0;
 8000ff8:	2500      	movs	r5, #0
      while ( ep_intr )
 8000ffa:	f1b8 0f00 	cmp.w	r8, #0
 8000ffe:	f040 8127 	bne.w	8001250 <HAL_PCD_IRQHandler+0x2a8>
        epnum++;
        ep_intr >>= 1;
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001002:	6820      	ldr	r0, [r4, #0]
 8001004:	f002 fdde 	bl	8003bc4 <USB_ReadInterrupts>
 8001008:	0342      	lsls	r2, r0, #13
 800100a:	d50b      	bpl.n	8001024 <HAL_PCD_IRQHandler+0x7c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	4626      	mov	r6, r4
 8001010:	f002 fde4 	bl	8003bdc <USB_ReadDevAllInEpInterrupt>
 8001014:	f507 6910 	add.w	r9, r7, #2304	; 0x900
 8001018:	4683      	mov	fp, r0
      
      epnum = 0;
 800101a:	2500      	movs	r5, #0
      
      while ( ep_intr )
 800101c:	f1bb 0f00 	cmp.w	fp, #0
 8001020:	f040 817b 	bne.w	800131a <HAL_PCD_IRQHandler+0x372>
        ep_intr >>= 1;
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001024:	6820      	ldr	r0, [r4, #0]
 8001026:	f002 fdcd 	bl	8003bc4 <USB_ReadInterrupts>
 800102a:	2800      	cmp	r0, #0
 800102c:	da14      	bge.n	8001058 <HAL_PCD_IRQHandler+0xb0>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800102e:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8001032:	f023 0301 	bic.w	r3, r3, #1
 8001036:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
      
      if(hpcd->LPM_State == LPM_L1)
 800103a:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 800103e:	2b01      	cmp	r3, #1
 8001040:	f040 8206 	bne.w	8001450 <HAL_PCD_IRQHandler+0x4a8>
      {
        hpcd->LPM_State = LPM_L0;
 8001044:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001046:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 8001048:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800104c:	f000 fbf7 	bl	800183e <HAL_PCDEx_LPM_Callback>
      }
      else
      {
        HAL_PCD_ResumeCallback(hpcd);
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001056:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001058:	6820      	ldr	r0, [r4, #0]
 800105a:	f002 fdb3 	bl	8003bc4 <USB_ReadInterrupts>
 800105e:	0503      	lsls	r3, r0, #20
 8001060:	d50a      	bpl.n	8001078 <HAL_PCD_IRQHandler+0xd0>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001062:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8001066:	07de      	lsls	r6, r3, #31
 8001068:	d502      	bpl.n	8001070 <HAL_PCD_IRQHandler+0xc8>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 800106a:	4620      	mov	r0, r4
 800106c:	f003 fd86 	bl	8004b7c <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001076:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */ 
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001078:	6820      	ldr	r0, [r4, #0]
 800107a:	f002 fda3 	bl	8003bc4 <USB_ReadInterrupts>
 800107e:	0100      	lsls	r0, r0, #4
 8001080:	d513      	bpl.n	80010aa <HAL_PCD_IRQHandler+0x102>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);      
 8001082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	615a      	str	r2, [r3, #20]
      if( hpcd->LPM_State == LPM_L0)
 800108a:	f894 23ec 	ldrb.w	r2, [r4, #1004]	; 0x3ec
 800108e:	2a00      	cmp	r2, #0
 8001090:	f040 81e2 	bne.w	8001458 <HAL_PCD_IRQHandler+0x4b0>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 8001094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8001096:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001098:	4620      	mov	r0, r4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 800109a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800109e:	f884 13ec 	strb.w	r1, [r4, #1004]	; 0x3ec
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >>2 ;
 80010a2:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80010a6:	f000 fbca 	bl	800183e <HAL_PCDEx_LPM_Callback>
        HAL_PCD_SuspendCallback(hpcd);
      }
    }
    
    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	f002 fd8a 	bl	8003bc4 <USB_ReadInterrupts>
 80010b0:	04c1      	lsls	r1, r0, #19
 80010b2:	d536      	bpl.n	8001122 <HAL_PCD_IRQHandler+0x17a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80010b4:	f507 6600 	add.w	r6, r7, #2048	; 0x800
 80010b8:	6873      	ldr	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80010ba:	2110      	movs	r1, #16
 80010bc:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80010be:	f023 0301 	bic.w	r3, r3, #1
 80010c2:	6073      	str	r3, [r6, #4]
      USB_FlushTxFifo(hpcd->Instance, 0x10);
 80010c4:	f002 fb0e 	bl	80036e4 <USB_FlushTxFifo>
      
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80010c8:	6861      	ldr	r1, [r4, #4]
 80010ca:	f507 6310 	add.w	r3, r7, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFF;
 80010ce:	22ff      	movs	r2, #255	; 0xff
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80010d0:	9802      	ldr	r0, [sp, #8]
 80010d2:	4288      	cmp	r0, r1
 80010d4:	f040 81c4 	bne.w	8001460 <HAL_PCD_IRQHandler+0x4b8>
        USBx_OUTEP(i)->DOEPINT = 0xFF;
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFF;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	61b3      	str	r3, [r6, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001;
 80010de:	69f3      	ldr	r3, [r6, #28]
 80010e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80010e4:	61f3      	str	r3, [r6, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 80010e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 81c2 	beq.w	8001472 <HAL_PCD_IRQHandler+0x4ca>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 80010ee:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
 80010f2:	f043 030b 	orr.w	r3, r3, #11
 80010f6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 80010fa:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80010fc:	f043 030b 	orr.w	r3, r3, #11
 8001100:	6473      	str	r3, [r6, #68]	; 0x44
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001102:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001106:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 800110a:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800110c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001110:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001112:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001116:	f002 fda2 	bl	8003c5e <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001120:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001122:	6820      	ldr	r0, [r4, #0]
 8001124:	f002 fd4e 	bl	8003bc4 <USB_ReadInterrupts>
 8001128:	0482      	lsls	r2, r0, #18
 800112a:	d51c      	bpl.n	8001166 <HAL_PCD_IRQHandler+0x1be>
    {
      USB_ActivateSetup(hpcd->Instance);
 800112c:	6820      	ldr	r0, [r4, #0]
 800112e:	f002 fd7b 	bl	8003c28 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001132:	6820      	ldr	r0, [r4, #0]
 8001134:	68c3      	ldr	r3, [r0, #12]
 8001136:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800113a:	60c3      	str	r3, [r0, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800113c:	f002 fafb 	bl	8003736 <USB_GetDevSpeed>
 8001140:	2800      	cmp	r0, #0
 8001142:	f040 819f 	bne.w	8001484 <HAL_PCD_IRQHandler+0x4dc>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 8001146:	f44f 7300 	mov.w	r3, #512	; 0x200
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 800114a:	6822      	ldr	r2, [r4, #0]
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800114c:	60e0      	str	r0, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;
 800114e:	6163      	str	r3, [r4, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10) & USB_OTG_GUSBCFG_TRDT);
 8001150:	68d3      	ldr	r3, [r2, #12]
 8001152:	f443 5310 	orr.w	r3, r3, #9216	; 0x2400
 8001156:	60d3      	str	r3, [r2, #12]
          /* hclk Clock Range between 32-400 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
        }
      }
      
      HAL_PCD_ResetCallback(hpcd);
 8001158:	4620      	mov	r0, r4
 800115a:	f003 fcfe 	bl	8004b5a <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001164:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001166:	6820      	ldr	r0, [r4, #0]
 8001168:	f002 fd2c 	bl	8003bc4 <USB_ReadInterrupts>
 800116c:	06c3      	lsls	r3, r0, #27
 800116e:	d52b      	bpl.n	80011c8 <HAL_PCD_IRQHandler+0x220>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001170:	6822      	ldr	r2, [r4, #0]
 8001172:	6993      	ldr	r3, [r2, #24]
 8001174:	f023 0310 	bic.w	r3, r3, #16
 8001178:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 800117a:	6a3e      	ldr	r6, [r7, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800117c:	f3c6 4343 	ubfx	r3, r6, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001180:	f006 090f 	and.w	r9, r6, #15
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001184:	2b02      	cmp	r3, #2
 8001186:	f040 81fa 	bne.w	800157e <HAL_PCD_IRQHandler+0x5d6>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0)
 800118a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800118e:	421e      	tst	r6, r3
 8001190:	d015      	beq.n	80011be <HAL_PCD_IRQHandler+0x216>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4);
 8001192:	f04f 081c 	mov.w	r8, #28
 8001196:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800119a:	4638      	mov	r0, r7
 800119c:	fb08 4809 	mla	r8, r8, r9, r4
 80011a0:	4632      	mov	r2, r6
 80011a2:	f8d8 1204 	ldr.w	r1, [r8, #516]	; 0x204
 80011a6:	f002 fc9c 	bl	8003ae2 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011aa:	f8d8 3204 	ldr.w	r3, [r8, #516]	; 0x204
 80011ae:	4433      	add	r3, r6
 80011b0:	f8c8 3204 	str.w	r3, [r8, #516]	; 0x204
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011b4:	f8d8 3210 	ldr.w	r3, [r8, #528]	; 0x210
 80011b8:	441e      	add	r6, r3
 80011ba:	f8c8 6210 	str.w	r6, [r8, #528]	; 0x210
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011be:	6822      	ldr	r2, [r4, #0]
 80011c0:	6993      	ldr	r3, [r2, #24]
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6193      	str	r3, [r2, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80011c8:	6820      	ldr	r0, [r4, #0]
 80011ca:	f002 fcfb 	bl	8003bc4 <USB_ReadInterrupts>
 80011ce:	0707      	lsls	r7, r0, #28
 80011d0:	d505      	bpl.n	80011de <HAL_PCD_IRQHandler+0x236>
    {
      HAL_PCD_SOFCallback(hpcd);
 80011d2:	4620      	mov	r0, r4
 80011d4:	f003 fcbd 	bl	8004b52 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	2208      	movs	r2, #8
 80011dc:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80011de:	6820      	ldr	r0, [r4, #0]
 80011e0:	f002 fcf0 	bl	8003bc4 <USB_ReadInterrupts>
 80011e4:	02c6      	lsls	r6, r0, #11
 80011e6:	d507      	bpl.n	80011f8 <HAL_PCD_IRQHandler+0x250>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 80011e8:	b2e9      	uxtb	r1, r5
 80011ea:	4620      	mov	r0, r4
 80011ec:	f003 fce6 	bl	8004bbc <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011f6:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80011f8:	6820      	ldr	r0, [r4, #0]
 80011fa:	f002 fce3 	bl	8003bc4 <USB_ReadInterrupts>
 80011fe:	0280      	lsls	r0, r0, #10
 8001200:	d507      	bpl.n	8001212 <HAL_PCD_IRQHandler+0x26a>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001202:	b2e9      	uxtb	r1, r5
 8001204:	4620      	mov	r0, r4
 8001206:	f003 fcd5 	bl	8004bb4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001210:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001212:	6820      	ldr	r0, [r4, #0]
 8001214:	f002 fcd6 	bl	8003bc4 <USB_ReadInterrupts>
 8001218:	0041      	lsls	r1, r0, #1
 800121a:	d506      	bpl.n	800122a <HAL_PCD_IRQHandler+0x282>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800121c:	4620      	mov	r0, r4
 800121e:	f003 fcd1 	bl	8004bc4 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001228:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800122a:	6820      	ldr	r0, [r4, #0]
 800122c:	f002 fcca 	bl	8003bc4 <USB_ReadInterrupts>
 8001230:	0742      	lsls	r2, r0, #29
 8001232:	d50a      	bpl.n	800124a <HAL_PCD_IRQHandler+0x2a2>
    {
      temp = hpcd->Instance->GOTGINT;
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	685d      	ldr	r5, [r3, #4]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001238:	076b      	lsls	r3, r5, #29
 800123a:	d502      	bpl.n	8001242 <HAL_PCD_IRQHandler+0x29a>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 800123c:	4620      	mov	r0, r4
 800123e:	f003 fcc5 	bl	8004bcc <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4315      	orrs	r5, r2
 8001248:	605d      	str	r5, [r3, #4]
    }
  }
}
 800124a:	b007      	add	sp, #28
 800124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ep_intr & 0x1)
 8001250:	f018 0f01 	tst.w	r8, #1
 8001254:	d05a      	beq.n	800130c <HAL_PCD_IRQHandler+0x364>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001256:	b2ea      	uxtb	r2, r5
 8001258:	6820      	ldr	r0, [r4, #0]
 800125a:	4611      	mov	r1, r2
 800125c:	9203      	str	r2, [sp, #12]
 800125e:	f002 fcc5 	bl	8003bec <USB_ReadDevOutEPInterrupt>
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001262:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8001266:	4681      	mov	r9, r0
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001268:	d030      	beq.n	80012cc <HAL_PCD_IRQHandler+0x324>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800126a:	2101      	movs	r1, #1
            if (USBx->GSNPSID >= USB_OTG_CORE_ID_310A)
 800126c:	4bb0      	ldr	r3, [pc, #704]	; (8001530 <HAL_PCD_IRQHandler+0x588>)
 800126e:	9a03      	ldr	r2, [sp, #12]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001270:	60b1      	str	r1, [r6, #8]
            if (USBx->GSNPSID >= USB_OTG_CORE_ID_310A)
 8001272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001274:	4299      	cmp	r1, r3
 8001276:	6921      	ldr	r1, [r4, #16]
 8001278:	d916      	bls.n	80012a8 <HAL_PCD_IRQHandler+0x300>
              if(hpcd->Init.dma_enable == 1)
 800127a:	2901      	cmp	r1, #1
 800127c:	d114      	bne.n	80012a8 <HAL_PCD_IRQHandler+0x300>
                if(USBx_OUTEP(0)->DOEPINT & (1 << 15))
 800127e:	f8da 1008 	ldr.w	r1, [sl, #8]
 8001282:	0408      	lsls	r0, r1, #16
 8001284:	d502      	bpl.n	800128c <HAL_PCD_IRQHandler+0x2e4>
                  CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 8001286:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128a:	60b1      	str	r1, [r6, #8]
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 800128c:	6931      	ldr	r1, [r6, #16]
 800128e:	f8db 0200 	ldr.w	r0, [fp, #512]	; 0x200
 8001292:	f3c1 0112 	ubfx	r1, r1, #0, #19
 8001296:	1a41      	subs	r1, r0, r1
 8001298:	f8cb 1210 	str.w	r1, [fp, #528]	; 0x210
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 800129c:	f8db 1204 	ldr.w	r1, [fp, #516]	; 0x204
 80012a0:	4408      	add	r0, r1
 80012a2:	f8cb 0204 	str.w	r0, [fp, #516]	; 0x204
 80012a6:	e001      	b.n	80012ac <HAL_PCD_IRQHandler+0x304>
            if(hpcd->Init.dma_enable == 1)
 80012a8:	2901      	cmp	r1, #1
 80012aa:	d0ef      	beq.n	800128c <HAL_PCD_IRQHandler+0x2e4>
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 80012ac:	4611      	mov	r1, r2
 80012ae:	4620      	mov	r0, r4
 80012b0:	f003 fc3e 	bl	8004b30 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1)
 80012b4:	6921      	ldr	r1, [r4, #16]
 80012b6:	2901      	cmp	r1, #1
 80012b8:	d108      	bne.n	80012cc <HAL_PCD_IRQHandler+0x324>
              if((epnum == 0) && (hpcd->OUT_ep[epnum].xfer_len == 0))
 80012ba:	b93d      	cbnz	r5, 80012cc <HAL_PCD_IRQHandler+0x324>
 80012bc:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 80012c0:	b922      	cbnz	r2, 80012cc <HAL_PCD_IRQHandler+0x324>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 80012c2:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 80012c6:	6820      	ldr	r0, [r4, #0]
 80012c8:	f002 fcc9 	bl	8003c5e <USB_EP0_OutStart>
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012cc:	f019 0f08 	tst.w	r9, #8
 80012d0:	d012      	beq.n	80012f8 <HAL_PCD_IRQHandler+0x350>
            if (USBx->GSNPSID >= USB_OTG_CORE_ID_310A)
 80012d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012d4:	4b96      	ldr	r3, [pc, #600]	; (8001530 <HAL_PCD_IRQHandler+0x588>)
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d909      	bls.n	80012ee <HAL_PCD_IRQHandler+0x346>
              if(hpcd->Init.dma_enable == 1)
 80012da:	6922      	ldr	r2, [r4, #16]
 80012dc:	2a01      	cmp	r2, #1
 80012de:	d106      	bne.n	80012ee <HAL_PCD_IRQHandler+0x346>
                if(USBx_OUTEP(0)->DOEPINT & (1 <<15 ))
 80012e0:	f8da 2008 	ldr.w	r2, [sl, #8]
 80012e4:	0411      	lsls	r1, r2, #16
 80012e6:	d502      	bpl.n	80012ee <HAL_PCD_IRQHandler+0x346>
                  CLEAR_OUT_EP_INTR(epnum, (1 << 15));
 80012e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012ec:	60b2      	str	r2, [r6, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 80012ee:	4620      	mov	r0, r4
 80012f0:	f003 fc18 	bl	8004b24 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012f4:	2208      	movs	r2, #8
 80012f6:	60b2      	str	r2, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012f8:	f019 0f10 	tst.w	r9, #16
 80012fc:	d001      	beq.n	8001302 <HAL_PCD_IRQHandler+0x35a>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012fe:	2310      	movs	r3, #16
 8001300:	60b3      	str	r3, [r6, #8]
          if(( epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001302:	f019 0f20 	tst.w	r9, #32
 8001306:	d001      	beq.n	800130c <HAL_PCD_IRQHandler+0x364>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001308:	2320      	movs	r3, #32
 800130a:	60b3      	str	r3, [r6, #8]
        epnum++;
 800130c:	3501      	adds	r5, #1
        ep_intr >>= 1;
 800130e:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8001312:	3620      	adds	r6, #32
 8001314:	f10b 0b1c 	add.w	fp, fp, #28
 8001318:	e66f      	b.n	8000ffa <HAL_PCD_IRQHandler+0x52>
        if (ep_intr & 0x1) /* In ITR */
 800131a:	f01b 0f01 	tst.w	fp, #1
 800131e:	d074      	beq.n	800140a <HAL_PCD_IRQHandler+0x462>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001320:	fa5f fa85 	uxtb.w	sl, r5
 8001324:	6820      	ldr	r0, [r4, #0]
 8001326:	4651      	mov	r1, sl
 8001328:	f002 fc6a 	bl	8003c00 <USB_ReadDevInEPInterrupt>
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800132c:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8001330:	4680      	mov	r8, r0
           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001332:	d020      	beq.n	8001376 <HAL_PCD_IRQHandler+0x3ce>
            fifoemptymsk = 0x1 << epnum;
 8001334:	2101      	movs	r1, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001336:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800133a:	4620      	mov	r0, r4
            fifoemptymsk = 0x1 << epnum;
 800133c:	40a9      	lsls	r1, r5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800133e:	ea23 0301 	bic.w	r3, r3, r1
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 8001342:	4651      	mov	r1, sl
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001344:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001348:	2301      	movs	r3, #1
 800134a:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1)
 800134e:	6923      	ldr	r3, [r4, #16]
 8001350:	2b01      	cmp	r3, #1
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001352:	bf01      	itttt	eq
 8001354:	6c73      	ldreq	r3, [r6, #68]	; 0x44
 8001356:	6c32      	ldreq	r2, [r6, #64]	; 0x40
 8001358:	189b      	addeq	r3, r3, r2
 800135a:	6473      	streq	r3, [r6, #68]	; 0x44
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800135c:	f003 fbf1 	bl	8004b42 <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1)
 8001360:	6921      	ldr	r1, [r4, #16]
 8001362:	2901      	cmp	r1, #1
 8001364:	d107      	bne.n	8001376 <HAL_PCD_IRQHandler+0x3ce>
              if((epnum == 0) && (hpcd->IN_ep[epnum].xfer_len == 0))
 8001366:	b935      	cbnz	r5, 8001376 <HAL_PCD_IRQHandler+0x3ce>
 8001368:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800136a:	b923      	cbnz	r3, 8001376 <HAL_PCD_IRQHandler+0x3ce>
                USB_EP0_OutStart(hpcd->Instance, 1, (uint8_t *)hpcd->Setup);
 800136c:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001370:	6820      	ldr	r0, [r4, #0]
 8001372:	f002 fc74 	bl	8003c5e <USB_EP0_OutStart>
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001376:	f018 0f08 	tst.w	r8, #8
 800137a:	d002      	beq.n	8001382 <HAL_PCD_IRQHandler+0x3da>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800137c:	2308      	movs	r3, #8
 800137e:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001382:	f018 0f10 	tst.w	r8, #16
 8001386:	d002      	beq.n	800138e <HAL_PCD_IRQHandler+0x3e6>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001388:	2310      	movs	r3, #16
 800138a:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800138e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8001392:	d002      	beq.n	800139a <HAL_PCD_IRQHandler+0x3f2>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001394:	2340      	movs	r3, #64	; 0x40
 8001396:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800139a:	f018 0f02 	tst.w	r8, #2
 800139e:	d002      	beq.n	80013a6 <HAL_PCD_IRQHandler+0x3fe>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013a0:	2302      	movs	r3, #2
 80013a2:	f8c9 3008 	str.w	r3, [r9, #8]
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013a6:	f018 0f80 	tst.w	r8, #128	; 0x80
 80013aa:	d02e      	beq.n	800140a <HAL_PCD_IRQHandler+0x462>
  * @param  epnum : endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80013ac:	6823      	ldr	r3, [r4, #0]
  int32_t len = 0U;
  uint32_t len32b = 0U;
  uint32_t fifoemptymsk = 0U;

  ep = &hpcd->IN_ep[epnum];
  len = ep->xfer_len - ep->xfer_count;
 80013ae:	6d32      	ldr	r2, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80013b0:	9303      	str	r3, [sp, #12]
  len = ep->xfer_len - ep->xfer_count;
 80013b2:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80013b4:	eba3 0802 	sub.w	r8, r3, r2
 80013b8:	6c33      	ldr	r3, [r6, #64]	; 0x40
  {
    len = ep->maxpacket;
  }
  
  
  len32b = (len + 3) / 4;
 80013ba:	2204      	movs	r2, #4
 80013bc:	4598      	cmp	r8, r3
 80013be:	bf28      	it	cs
 80013c0:	4698      	movcs	r8, r3
 80013c2:	f108 0303 	add.w	r3, r8, #3
 80013c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80013ca:	9304      	str	r3, [sp, #16]
 
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80013cc:	9b03      	ldr	r3, [sp, #12]
 80013ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d2:	eb03 1345 	add.w	r3, r3, r5, lsl #5
 80013d6:	9305      	str	r3, [sp, #20]
 80013d8:	9b05      	ldr	r3, [sp, #20]
 80013da:	9a04      	ldr	r2, [sp, #16]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	b29b      	uxth	r3, r3
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d904      	bls.n	80013ee <HAL_PCD_IRQHandler+0x446>
          ep->xfer_count < ep->xfer_len &&
 80013e4:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80013e6:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  while  ( (USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b &&
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d900      	bls.n	80013ee <HAL_PCD_IRQHandler+0x446>
          ep->xfer_count < ep->xfer_len &&
 80013ec:	b9a3      	cbnz	r3, 8001418 <HAL_PCD_IRQHandler+0x470>
    
    ep->xfer_buff  += len;
    ep->xfer_count += len;
  }
  
  if(len <= 0)
 80013ee:	f1b8 0f00 	cmp.w	r8, #0
 80013f2:	dc0a      	bgt.n	800140a <HAL_PCD_IRQHandler+0x462>
  {
    fifoemptymsk = 0x1 << epnum;
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013f4:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = 0x1 << epnum;
 80013f6:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013f8:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
    fifoemptymsk = 0x1 << epnum;
 80013fc:	40aa      	lsls	r2, r5
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013fe:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8001402:	ea23 0302 	bic.w	r3, r3, r2
 8001406:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 800140a:	3501      	adds	r5, #1
        ep_intr >>= 1;
 800140c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8001410:	361c      	adds	r6, #28
 8001412:	f109 0920 	add.w	r9, r9, #32
 8001416:	e601      	b.n	800101c <HAL_PCD_IRQHandler+0x74>
    len = ep->xfer_len - ep->xfer_count;
 8001418:	eba3 0802 	sub.w	r8, r3, r2
 800141c:	6c33      	ldr	r3, [r6, #64]	; 0x40
    len32b = (len + 3) / 4;
 800141e:	2204      	movs	r2, #4
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001420:	9803      	ldr	r0, [sp, #12]
 8001422:	4598      	cmp	r8, r3
 8001424:	bf28      	it	cs
 8001426:	4698      	movcs	r8, r3
    len32b = (len + 3) / 4;
 8001428:	f108 0303 	add.w	r3, r8, #3
 800142c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001430:	9304      	str	r3, [sp, #16]
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001432:	4652      	mov	r2, sl
 8001434:	7c23      	ldrb	r3, [r4, #16]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	fa1f f388 	uxth.w	r3, r8
 800143c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 800143e:	f002 fb3d 	bl	8003abc <USB_WritePacket>
    ep->xfer_buff  += len;
 8001442:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8001444:	4443      	add	r3, r8
 8001446:	6473      	str	r3, [r6, #68]	; 0x44
    ep->xfer_count += len;
 8001448:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800144a:	4443      	add	r3, r8
 800144c:	6533      	str	r3, [r6, #80]	; 0x50
 800144e:	e7c3      	b.n	80013d8 <HAL_PCD_IRQHandler+0x430>
        HAL_PCD_ResumeCallback(hpcd);
 8001450:	4620      	mov	r0, r4
 8001452:	f003 fbab 	bl	8004bac <HAL_PCD_ResumeCallback>
 8001456:	e5fb      	b.n	8001050 <HAL_PCD_IRQHandler+0xa8>
        HAL_PCD_SuspendCallback(hpcd);
 8001458:	4620      	mov	r0, r4
 800145a:	f003 fb8f 	bl	8004b7c <HAL_PCD_SuspendCallback>
 800145e:	e624      	b.n	80010aa <HAL_PCD_IRQHandler+0x102>
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001460:	9802      	ldr	r0, [sp, #8]
 8001462:	3320      	adds	r3, #32
        USBx_INEP(i)->DIEPINT = 0xFF;
 8001464:	f843 2c18 	str.w	r2, [r3, #-24]
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8001468:	3001      	adds	r0, #1
        USBx_OUTEP(i)->DOEPINT = 0xFF;
 800146a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
      for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800146e:	9002      	str	r0, [sp, #8]
 8001470:	e62e      	b.n	80010d0 <HAL_PCD_IRQHandler+0x128>
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001472:	6973      	ldr	r3, [r6, #20]
 8001474:	f043 030b 	orr.w	r3, r3, #11
 8001478:	6173      	str	r3, [r6, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 800147a:	6933      	ldr	r3, [r6, #16]
 800147c:	f043 030b 	orr.w	r3, r3, #11
 8001480:	6133      	str	r3, [r6, #16]
 8001482:	e63e      	b.n	8001102 <HAL_PCD_IRQHandler+0x15a>
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8001484:	2303      	movs	r3, #3
 8001486:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;
 8001488:	2340      	movs	r3, #64	; 0x40
 800148a:	6163      	str	r3, [r4, #20]
        hclk = HAL_RCC_GetHCLKFreq();
 800148c:	f000 fda0 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
		    if((hclk >= 14200000)&&(hclk < 15000000))
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <HAL_PCD_IRQHandler+0x58c>)
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_PCD_IRQHandler+0x590>)
 8001494:	4403      	add	r3, r0
 8001496:	4293      	cmp	r3, r2
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	d804      	bhi.n	80014a6 <HAL_PCD_IRQHandler+0x4fe>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xF << 10) & USB_OTG_GUSBCFG_TRDT);
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	e658      	b.n	8001158 <HAL_PCD_IRQHandler+0x1b0>
        else if((hclk >= 15000000)&&(hclk < 16000000))
 80014a6:	4a25      	ldr	r2, [pc, #148]	; (800153c <HAL_PCD_IRQHandler+0x594>)
 80014a8:	4925      	ldr	r1, [pc, #148]	; (8001540 <HAL_PCD_IRQHandler+0x598>)
 80014aa:	4402      	add	r2, r0
 80014ac:	428a      	cmp	r2, r1
 80014ae:	d803      	bhi.n	80014b8 <HAL_PCD_IRQHandler+0x510>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xE << 10) & USB_OTG_GUSBCFG_TRDT);
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80014b6:	e7f4      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 16000000)&&(hclk < 17200000))
 80014b8:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 80014bc:	4921      	ldr	r1, [pc, #132]	; (8001544 <HAL_PCD_IRQHandler+0x59c>)
 80014be:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 80014c2:	428a      	cmp	r2, r1
 80014c4:	d803      	bhi.n	80014ce <HAL_PCD_IRQHandler+0x526>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xD << 10) & USB_OTG_GUSBCFG_TRDT);
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80014cc:	e7e9      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 17200000)&&(hclk < 18500000))
 80014ce:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 80014d2:	491d      	ldr	r1, [pc, #116]	; (8001548 <HAL_PCD_IRQHandler+0x5a0>)
 80014d4:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 80014d8:	428a      	cmp	r2, r1
 80014da:	d803      	bhi.n	80014e4 <HAL_PCD_IRQHandler+0x53c>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xC << 10) & USB_OTG_GUSBCFG_TRDT);
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80014e2:	e7de      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 18500000)&&(hclk < 20000000))
 80014e4:	4a19      	ldr	r2, [pc, #100]	; (800154c <HAL_PCD_IRQHandler+0x5a4>)
 80014e6:	491a      	ldr	r1, [pc, #104]	; (8001550 <HAL_PCD_IRQHandler+0x5a8>)
 80014e8:	4402      	add	r2, r0
 80014ea:	428a      	cmp	r2, r1
 80014ec:	d803      	bhi.n	80014f6 <HAL_PCD_IRQHandler+0x54e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xB << 10) & USB_OTG_GUSBCFG_TRDT);
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80014f4:	e7d5      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 20000000)&&(hclk < 21800000))
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_PCD_IRQHandler+0x5ac>)
 80014f8:	4917      	ldr	r1, [pc, #92]	; (8001558 <HAL_PCD_IRQHandler+0x5b0>)
 80014fa:	4402      	add	r2, r0
 80014fc:	428a      	cmp	r2, r1
 80014fe:	d803      	bhi.n	8001508 <HAL_PCD_IRQHandler+0x560>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xA << 10) & USB_OTG_GUSBCFG_TRDT);
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001506:	e7cc      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 21800000)&&(hclk < 24000000))
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <HAL_PCD_IRQHandler+0x5b4>)
 800150a:	4915      	ldr	r1, [pc, #84]	; (8001560 <HAL_PCD_IRQHandler+0x5b8>)
 800150c:	4402      	add	r2, r0
 800150e:	428a      	cmp	r2, r1
 8001510:	d803      	bhi.n	800151a <HAL_PCD_IRQHandler+0x572>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8001518:	e7c3      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
        else if((hclk >= 24000000)&&(hclk < 27700000))
 800151a:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 800151e:	4911      	ldr	r1, [pc, #68]	; (8001564 <HAL_PCD_IRQHandler+0x5bc>)
 8001520:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8001524:	428a      	cmp	r2, r1
 8001526:	d81f      	bhi.n	8001568 <HAL_PCD_IRQHandler+0x5c0>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800152e:	e7b8      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
 8001530:	4f543109 	.word	0x4f543109
 8001534:	ff275340 	.word	0xff275340
 8001538:	000c34ff 	.word	0x000c34ff
 800153c:	ff1b1e40 	.word	0xff1b1e40
 8001540:	000f423f 	.word	0x000f423f
 8001544:	00124f7f 	.word	0x00124f7f
 8001548:	0013d61f 	.word	0x0013d61f
 800154c:	fee5b660 	.word	0xfee5b660
 8001550:	0016e35f 	.word	0x0016e35f
 8001554:	feced300 	.word	0xfeced300
 8001558:	001b773f 	.word	0x001b773f
 800155c:	feb35bc0 	.word	0xfeb35bc0
 8001560:	002191bf 	.word	0x002191bf
 8001564:	0038751f 	.word	0x0038751f
        else if((hclk >= 27700000)&&(hclk < 32000000))
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_PCD_IRQHandler+0x5f8>)
 800156a:	490e      	ldr	r1, [pc, #56]	; (80015a4 <HAL_PCD_IRQHandler+0x5fc>)
 800156c:	4402      	add	r2, r0
 800156e:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001570:	68da      	ldr	r2, [r3, #12]
 8001572:	bf94      	ite	ls
 8001574:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6 << 10) & USB_OTG_GUSBCFG_TRDT);
 8001578:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 800157c:	e791      	b.n	80014a2 <HAL_PCD_IRQHandler+0x4fa>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800157e:	2b06      	cmp	r3, #6
 8001580:	f47f ae1d 	bne.w	80011be <HAL_PCD_IRQHandler+0x216>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001584:	f04f 081c 	mov.w	r8, #28
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8);
 8001588:	2208      	movs	r2, #8
 800158a:	f504 716f 	add.w	r1, r4, #956	; 0x3bc
 800158e:	4638      	mov	r0, r7
 8001590:	f002 faa7 	bl	8003ae2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001594:	fb08 4809 	mla	r8, r8, r9, r4
 8001598:	f3c6 160a 	ubfx	r6, r6, #4, #11
 800159c:	e60a      	b.n	80011b4 <HAL_PCD_IRQHandler+0x20c>
 800159e:	bf00      	nop
 80015a0:	fe5954e0 	.word	0xfe5954e0
 80015a4:	00419cdf 	.word	0x00419cdf

080015a8 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd); 
 80015a8:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 80015ac:	2b01      	cmp	r3, #1
{
 80015ae:	b510      	push	{r4, lr}
 80015b0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 80015b2:	d009      	beq.n	80015c8 <HAL_PCD_SetAddress+0x20>
 80015b4:	2301      	movs	r3, #1
 80015b6:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80015ba:	6800      	ldr	r0, [r0, #0]
 80015bc:	f002 fada 	bl	8003b74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80015c0:	2000      	movs	r0, #0
 80015c2:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 80015c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 80015c8:	2002      	movs	r0, #2
}
 80015ca:	bd10      	pop	{r4, pc}

080015cc <HAL_PCD_EP_Open>:
{
 80015cc:	b570      	push	{r4, r5, r6, lr}
  if ((ep_addr & 0x80) == 0x80)
 80015ce:	b24e      	sxtb	r6, r1
{
 80015d0:	4604      	mov	r4, r0
 80015d2:	251c      	movs	r5, #28
 80015d4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  if ((ep_addr & 0x80) == 0x80)
 80015d8:	2e00      	cmp	r6, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80015da:	bfb8      	it	lt
 80015dc:	fb05 4100 	mlalt	r1, r5, r0, r4
  ep->num   = ep_addr & 0x7F;
 80015e0:	b2c0      	uxtb	r0, r0
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80015e2:	bfa8      	it	ge
 80015e4:	fb05 4101 	mlage	r1, r5, r1, r4
  ep->is_in = (0x80 & ep_addr) != 0;
 80015e8:	ea4f 75d6 	mov.w	r5, r6, lsr #31
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80015ec:	bfb4      	ite	lt
 80015ee:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80015f0:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  if (ep->is_in)
 80015f4:	2e00      	cmp	r6, #0
    ep->tx_fifo_num = ep->num;
 80015f6:	bfb8      	it	lt
 80015f8:	80c8      	strhlt	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK )
 80015fa:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 80015fc:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0;
 80015fe:	bf08      	it	eq
 8001600:	2300      	moveq	r3, #0
  ep->num   = ep_addr & 0x7F;
 8001602:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001604:	704d      	strb	r5, [r1, #1]
    ep->data_pid_start = 0;
 8001606:	bf08      	it	eq
 8001608:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd); 
 800160a:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
  ep->maxpacket = ep_mps;
 800160e:	608a      	str	r2, [r1, #8]
  __HAL_LOCK(hpcd); 
 8001610:	2b01      	cmp	r3, #1
 8001612:	d009      	beq.n	8001628 <HAL_PCD_EP_Open+0x5c>
 8001614:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001616:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd); 
 8001618:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800161c:	f002 f8a6 	bl	800376c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001620:	2000      	movs	r0, #0
 8001622:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return ret;
 8001626:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd); 
 8001628:	2002      	movs	r0, #2
}
 800162a:	bd70      	pop	{r4, r5, r6, pc}

0800162c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80) == 0x80)
 800162c:	b24b      	sxtb	r3, r1
 800162e:	221c      	movs	r2, #28
 8001630:	2b00      	cmp	r3, #0
  ep->is_in = (0x80 & ep_addr) != 0;
 8001632:	ea4f 73d3 	mov.w	r3, r3, lsr #31
{  
 8001636:	b510      	push	{r4, lr}
 8001638:	4604      	mov	r4, r0
 800163a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800163e:	bfab      	itete	ge
 8001640:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001644:	fb02 4100 	mlalt	r1, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001648:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800164c:	3138      	addlt	r1, #56	; 0x38
  ep->num   = ep_addr & 0x7F;
 800164e:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8001650:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001652:	f894 33b8 	ldrb.w	r3, [r4, #952]	; 0x3b8
 8001656:	2b01      	cmp	r3, #1
 8001658:	d009      	beq.n	800166e <HAL_PCD_EP_Close+0x42>
 800165a:	2301      	movs	r3, #1
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 800165c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd); 
 800165e:	f884 33b8 	strb.w	r3, [r4, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001662:	f002 f8c1 	bl	80037e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8001666:	2000      	movs	r0, #0
 8001668:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 800166c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 800166e:	2002      	movs	r0, #2
}
 8001670:	bd10      	pop	{r4, pc}

08001672 <HAL_PCD_EP_Receive>:
{
 8001672:	b538      	push	{r3, r4, r5, lr}
 8001674:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001678:	241c      	movs	r4, #28
 800167a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 800167e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001682:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
  ep->xfer_len = len;
 8001686:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
  ep->xfer_count = 0;
 800168a:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 800168c:	f8c4 2204 	str.w	r2, [r4, #516]	; 0x204
  ep->xfer_count = 0;
 8001690:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->is_in = 0;
 8001694:	f884 31f9 	strb.w	r3, [r4, #505]	; 0x1f9
  ep->num = ep_addr & 0x7F;
 8001698:	f884 51f8 	strb.w	r5, [r4, #504]	; 0x1f8
  if (hpcd->Init.dma_enable == 1)
 800169c:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 800169e:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1)
 80016a0:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80016a2:	bf08      	it	eq
 80016a4:	f8c4 2208 	streq.w	r2, [r4, #520]	; 0x208
 80016a8:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0 )
 80016aa:	b91d      	cbnz	r5, 80016b4 <HAL_PCD_EP_Receive+0x42>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80016ac:	f002 f98e 	bl	80039cc <USB_EP0StartXfer>
}
 80016b0:	2000      	movs	r0, #0
 80016b2:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80016b4:	f002 f8c4 	bl	8003840 <USB_EPStartXfer>
 80016b8:	e7fa      	b.n	80016b0 <HAL_PCD_EP_Receive+0x3e>

080016ba <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 80016ba:	231c      	movs	r3, #28
 80016bc:	f001 010f 	and.w	r1, r1, #15
 80016c0:	fb03 0101 	mla	r1, r3, r1, r0
}
 80016c4:	f8b1 0210 	ldrh.w	r0, [r1, #528]	; 0x210
 80016c8:	4770      	bx	lr

080016ca <HAL_PCD_EP_Transmit>:
{
 80016ca:	b538      	push	{r3, r4, r5, lr}
 80016cc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016d0:	241c      	movs	r4, #28
 80016d2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;  
 80016d6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80016da:	3138      	adds	r1, #56	; 0x38
  ep->xfer_len = len;
 80016dc:	64e3      	str	r3, [r4, #76]	; 0x4c
  ep->xfer_count = 0;
 80016de:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;  
 80016e0:	6462      	str	r2, [r4, #68]	; 0x44
  ep->xfer_count = 0;
 80016e2:	6523      	str	r3, [r4, #80]	; 0x50
  ep->is_in = 1;
 80016e4:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7F;
 80016e6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
  ep->is_in = 1;
 80016ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  if (hpcd->Init.dma_enable == 1)
 80016ee:	6903      	ldr	r3, [r0, #16]
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80016f0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1)
 80016f2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;  
 80016f4:	bf08      	it	eq
 80016f6:	64a2      	streq	r2, [r4, #72]	; 0x48
 80016f8:	b2da      	uxtb	r2, r3
  if ((ep_addr & 0x7F) == 0 )
 80016fa:	b91d      	cbnz	r5, 8001704 <HAL_PCD_EP_Transmit+0x3a>
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80016fc:	f002 f966 	bl	80039cc <USB_EP0StartXfer>
}
 8001700:	2000      	movs	r0, #0
 8001702:	bd38      	pop	{r3, r4, r5, pc}
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001704:	f002 f89c 	bl	8003840 <USB_EPStartXfer>
 8001708:	e7fa      	b.n	8001700 <HAL_PCD_EP_Transmit+0x36>

0800170a <HAL_PCD_EP_SetStall>:
{
 800170a:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800170c:	b24b      	sxtb	r3, r1
 800170e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8001712:	221c      	movs	r2, #28
{
 8001714:	4604      	mov	r4, r0
  if ((0x80 & ep_addr) == 0x80)
 8001716:	2b00      	cmp	r3, #0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001718:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800171c:	bfb8      	it	lt
 800171e:	fb02 0105 	mlalt	r1, r2, r5, r0
  ep->num   = ep_addr & 0x7F;
 8001722:	b2ed      	uxtb	r5, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001724:	bfa8      	it	ge
 8001726:	fb02 0101 	mlage	r1, r2, r1, r0
  ep->is_stall = 1;
 800172a:	f04f 0201 	mov.w	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800172e:	bfb4      	ite	lt
 8001730:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 8001732:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 1;
 8001736:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001738:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800173a:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 800173c:	f890 33b8 	ldrb.w	r3, [r0, #952]	; 0x3b8
 8001740:	4293      	cmp	r3, r2
 8001742:	d00f      	beq.n	8001764 <HAL_PCD_EP_SetStall+0x5a>
 8001744:	f880 23b8 	strb.w	r2, [r0, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001748:	6800      	ldr	r0, [r0, #0]
 800174a:	f002 f9da 	bl	8003b02 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 800174e:	b92d      	cbnz	r5, 800175c <HAL_PCD_EP_SetStall+0x52>
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001750:	f504 726f 	add.w	r2, r4, #956	; 0x3bc
 8001754:	7c21      	ldrb	r1, [r4, #16]
 8001756:	6820      	ldr	r0, [r4, #0]
 8001758:	f002 fa81 	bl	8003c5e <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 800175c:	2000      	movs	r0, #0
 800175e:	f884 03b8 	strb.w	r0, [r4, #952]	; 0x3b8
  return HAL_OK;
 8001762:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001764:	2002      	movs	r0, #2
}
 8001766:	bd38      	pop	{r3, r4, r5, pc}

08001768 <HAL_PCD_EP_ClrStall>:
{
 8001768:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 800176a:	b24b      	sxtb	r3, r1
{
 800176c:	4605      	mov	r5, r0
 800176e:	221c      	movs	r2, #28
 8001770:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  if ((0x80 & ep_addr) == 0x80)
 8001774:	2b00      	cmp	r3, #0
  ep->is_stall = 0;
 8001776:	f04f 0400 	mov.w	r4, #0
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800177a:	ea4f 73d3 	mov.w	r3, r3, lsr #31
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800177e:	bfb5      	itete	lt
 8001780:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001784:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001788:	3138      	addlt	r1, #56	; 0x38
    ep = &hpcd->OUT_ep[ep_addr];
 800178a:	f501 71fc 	addge.w	r1, r1, #504	; 0x1f8
  ep->is_stall = 0;
 800178e:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001790:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001792:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001794:	f895 33b8 	ldrb.w	r3, [r5, #952]	; 0x3b8
 8001798:	2b01      	cmp	r3, #1
 800179a:	d009      	beq.n	80017b0 <HAL_PCD_EP_ClrStall+0x48>
 800179c:	2301      	movs	r3, #1
  USB_EPClearStall(hpcd->Instance , ep);
 800179e:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd); 
 80017a0:	f885 33b8 	strb.w	r3, [r5, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 80017a4:	f002 f9cc 	bl	8003b40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 80017a8:	f885 43b8 	strb.w	r4, [r5, #952]	; 0x3b8
  return HAL_OK;
 80017ac:	4620      	mov	r0, r4
 80017ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 80017b0:	2002      	movs	r0, #2
}
 80017b2:	bd38      	pop	{r3, r4, r5, pc}

080017b4 <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80017b4:	6800      	ldr	r0, [r0, #0]
{
 80017b6:	b570      	push	{r4, r5, r6, lr}
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80017b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  if(fifo == 0)
 80017ba:	b921      	cbnz	r1, 80017c6 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 80017bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017c0:	6283      	str	r3, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
  }
  
  return HAL_OK;
}
 80017c2:	2000      	movs	r0, #0
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80017c6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    for (i = 0; i < (fifo - 1); i++)
 80017c8:	2500      	movs	r5, #0
 80017ca:	1e4e      	subs	r6, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80017cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
    for (i = 0; i < (fifo - 1); i++)
 80017d0:	b2ec      	uxtb	r4, r5
 80017d2:	3501      	adds	r5, #1
 80017d4:	42b4      	cmp	r4, r6
 80017d6:	db06      	blt.n	80017e6 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16) | Tx_Offset);
 80017d8:	313f      	adds	r1, #63	; 0x3f
 80017da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80017e2:	6043      	str	r3, [r0, #4]
 80017e4:	e7ed      	b.n	80017c2 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80017e6:	3440      	adds	r4, #64	; 0x40
 80017e8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80017ec:	6864      	ldr	r4, [r4, #4]
 80017ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80017f2:	e7ed      	b.n	80017d0 <HAL_PCDEx_SetTxFiFo+0x1c>

080017f4 <HAL_PCDEx_SetRxFiFo>:
  * @param  size: Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80017f4:	6803      	ldr	r3, [r0, #0]
  
  return HAL_OK;
}
 80017f6:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 80017f8:	6259      	str	r1, [r3, #36]	; 0x24
}
 80017fa:	4770      	bx	lr

080017fc <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
  
  hpcd->lpm_active = ENABLE;
 80017fc:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 80017fe:	6802      	ldr	r2, [r0, #0]
{
 8001800:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 8001802:	f8c0 13f4 	str.w	r1, [r0, #1012]	; 0x3f4
  hpcd->LPM_State = LPM_L0;
 8001806:	2000      	movs	r0, #0
 8001808:	f883 03ec 	strb.w	r0, [r3, #1004]	; 0x3ec
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800180c:	6993      	ldr	r3, [r2, #24]
 800180e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001812:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001814:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	f043 0303 	orr.w	r3, r3, #3
 800181e:	6553      	str	r3, [r2, #84]	; 0x54
  
  return HAL_OK;  
}
 8001820:	4770      	bx	lr

08001822 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001822:	6803      	ldr	r3, [r0, #0]

  hpcd->battery_charging_active = ENABLE; 
 8001824:	2201      	movs	r2, #1
 8001826:	f8c0 23f8 	str.w	r2, [r0, #1016]	; 0x3f8
  
  /* Enable DCD : Data Contact Detect */
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
  
  return HAL_OK;  
}
 800182a:	2000      	movs	r0, #0
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 800182c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800182e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
 8001834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001836:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800183a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800183c:	4770      	bx	lr

0800183e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{ 
 800183e:	4770      	bx	lr

08001840 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8001840:	4a02      	ldr	r2, [pc, #8]	; (800184c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8001842:	68d3      	ldr	r3, [r2, #12]
 8001844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001848:	60d3      	str	r3, [r2, #12]
 800184a:	4770      	bx	lr
 800184c:	58024800 	.word	0x58024800

08001850 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	6803      	ldr	r3, [r0, #0]
{
 8001854:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	07d8      	lsls	r0, r3, #31
 8001858:	d45c      	bmi.n	8001914 <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800185a:	682b      	ldr	r3, [r5, #0]
 800185c:	0799      	lsls	r1, r3, #30
 800185e:	f100 80af 	bmi.w	80019c0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	06d9      	lsls	r1, r3, #27
 8001866:	d525      	bpl.n	80018b4 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001868:	4bac      	ldr	r3, [pc, #688]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001870:	2a08      	cmp	r2, #8
 8001872:	d00b      	beq.n	800188c <HAL_RCC_OscConfig+0x3c>
 8001874:	691a      	ldr	r2, [r3, #16]
 8001876:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800187a:	2a18      	cmp	r2, #24
 800187c:	f040 80f7 	bne.w	8001a6e <HAL_RCC_OscConfig+0x21e>
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	2b01      	cmp	r3, #1
 8001888:	f040 80f1 	bne.w	8001a6e <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800188c:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	05d2      	lsls	r2, r2, #23
 8001892:	d502      	bpl.n	800189a <HAL_RCC_OscConfig+0x4a>
 8001894:	69ea      	ldr	r2, [r5, #28]
 8001896:	2a80      	cmp	r2, #128	; 0x80
 8001898:	d153      	bne.n	8001942 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800189a:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 80018a0:	fa92 f2a2 	rbit	r2, r2
 80018a4:	fab2 f182 	clz	r1, r2
 80018a8:	6a2a      	ldr	r2, [r5, #32]
 80018aa:	408a      	lsls	r2, r1
 80018ac:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 80018b0:	430a      	orrs	r2, r1
 80018b2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b4:	682b      	ldr	r3, [r5, #0]
 80018b6:	0719      	lsls	r1, r3, #28
 80018b8:	f100 810b 	bmi.w	8001ad2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018bc:	682b      	ldr	r3, [r5, #0]
 80018be:	069a      	lsls	r2, r3, #26
 80018c0:	f100 8130 	bmi.w	8001b24 <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	075c      	lsls	r4, r3, #29
 80018c8:	d51e      	bpl.n	8001908 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018ca:	4c95      	ldr	r4, [pc, #596]	; (8001b20 <HAL_RCC_OscConfig+0x2d0>)
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d2:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018d4:	f7fe fec8 	bl	8000668 <HAL_GetTick>
 80018d8:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	05da      	lsls	r2, r3, #23
 80018de:	f140 8146 	bpl.w	8001b6e <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e2:	68ab      	ldr	r3, [r5, #8]
 80018e4:	4c8d      	ldr	r4, [pc, #564]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 8148 	bne.w	8001b7c <HAL_RCC_OscConfig+0x32c>
 80018ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018f8:	f7fe feb6 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	4e87      	ldr	r6, [pc, #540]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80018fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001902:	079b      	lsls	r3, r3, #30
 8001904:	f140 8160 	bpl.w	8001bc8 <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001908:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800190a:	2a00      	cmp	r2, #0
 800190c:	f040 8163 	bne.w	8001bd6 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001910:	2000      	movs	r0, #0
 8001912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001914:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800191c:	2a10      	cmp	r2, #16
 800191e:	d009      	beq.n	8001934 <HAL_RCC_OscConfig+0xe4>
 8001920:	691a      	ldr	r2, [r3, #16]
 8001922:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001926:	2a18      	cmp	r2, #24
 8001928:	d10d      	bne.n	8001946 <HAL_RCC_OscConfig+0xf6>
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d108      	bne.n	8001946 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	039a      	lsls	r2, r3, #14
 800193a:	d58e      	bpl.n	800185a <HAL_RCC_OscConfig+0xa>
 800193c:	686b      	ldr	r3, [r5, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d18b      	bne.n	800185a <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 8001942:	2001      	movs	r0, #1
 8001944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001946:	686b      	ldr	r3, [r5, #4]
 8001948:	4c74      	ldr	r4, [pc, #464]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 800194a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194e:	d112      	bne.n	8001976 <HAL_RCC_OscConfig+0x126>
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001958:	f7fe fe86 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195c:	4c6f      	ldr	r4, [pc, #444]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800195e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001960:	6823      	ldr	r3, [r4, #0]
 8001962:	039b      	lsls	r3, r3, #14
 8001964:	f53f af79 	bmi.w	800185a <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001968:	f7fe fe7e 	bl	8000668 <HAL_GetTick>
 800196c:	1b80      	subs	r0, r0, r6
 800196e:	2864      	cmp	r0, #100	; 0x64
 8001970:	d9f6      	bls.n	8001960 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8001972:	2003      	movs	r0, #3
 8001974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001976:	b9a3      	cbnz	r3, 80019a2 <HAL_RCC_OscConfig+0x152>
 8001978:	6823      	ldr	r3, [r4, #0]
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6023      	str	r3, [r4, #0]
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001988:	f7fe fe6e 	bl	8000668 <HAL_GetTick>
 800198c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	039f      	lsls	r7, r3, #14
 8001992:	f57f af62 	bpl.w	800185a <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001996:	f7fe fe67 	bl	8000668 <HAL_GetTick>
 800199a:	1b80      	subs	r0, r0, r6
 800199c:	2864      	cmp	r0, #100	; 0x64
 800199e:	d9f6      	bls.n	800198e <HAL_RCC_OscConfig+0x13e>
 80019a0:	e7e7      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	d103      	bne.n	80019b2 <HAL_RCC_OscConfig+0x162>
 80019aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ae:	6023      	str	r3, [r4, #0]
 80019b0:	e7ce      	b.n	8001950 <HAL_RCC_OscConfig+0x100>
 80019b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019b6:	6023      	str	r3, [r4, #0]
 80019b8:	6823      	ldr	r3, [r4, #0]
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019be:	e7ca      	b.n	8001956 <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 80019c2:	68e9      	ldr	r1, [r5, #12]
 80019c4:	691a      	ldr	r2, [r3, #16]
 80019c6:	f012 0f38 	tst.w	r2, #56	; 0x38
 80019ca:	d007      	beq.n	80019dc <HAL_RCC_OscConfig+0x18c>
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80019d2:	2a18      	cmp	r2, #24
 80019d4:	d128      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1d8>
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	079c      	lsls	r4, r3, #30
 80019da:	d125      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019dc:	4a4f      	ldr	r2, [pc, #316]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 80019de:	6813      	ldr	r3, [r2, #0]
 80019e0:	0758      	lsls	r0, r3, #29
 80019e2:	d501      	bpl.n	80019e8 <HAL_RCC_OscConfig+0x198>
 80019e4:	2900      	cmp	r1, #0
 80019e6:	d0ac      	beq.n	8001942 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019e8:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4c4c      	ldr	r4, [pc, #304]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ec:	f023 0319 	bic.w	r3, r3, #25
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80019f4:	f7fe fe38 	bl	8000668 <HAL_GetTick>
 80019f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	075b      	lsls	r3, r3, #29
 80019fe:	d50d      	bpl.n	8001a1c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	6861      	ldr	r1, [r4, #4]
 8001a02:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	fab3 f283 	clz	r2, r3
 8001a0e:	692b      	ldr	r3, [r5, #16]
 8001a10:	4093      	lsls	r3, r2
 8001a12:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 8001a16:	4313      	orrs	r3, r2
 8001a18:	6063      	str	r3, [r4, #4]
 8001a1a:	e722      	b.n	8001862 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7fe fe24 	bl	8000668 <HAL_GetTick>
 8001a20:	1b80      	subs	r0, r0, r6
 8001a22:	2802      	cmp	r0, #2
 8001a24:	d9e9      	bls.n	80019fa <HAL_RCC_OscConfig+0x1aa>
 8001a26:	e7a4      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
 8001a28:	4c3c      	ldr	r4, [pc, #240]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a2a:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a2c:	b179      	cbz	r1, 8001a4e <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a2e:	f023 0319 	bic.w	r3, r3, #25
 8001a32:	430b      	orrs	r3, r1
 8001a34:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a36:	f7fe fe17 	bl	8000668 <HAL_GetTick>
 8001a3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	075f      	lsls	r7, r3, #29
 8001a40:	d4de      	bmi.n	8001a00 <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a42:	f7fe fe11 	bl	8000668 <HAL_GetTick>
 8001a46:	1b80      	subs	r0, r0, r6
 8001a48:	2802      	cmp	r0, #2
 8001a4a:	d9f7      	bls.n	8001a3c <HAL_RCC_OscConfig+0x1ec>
 8001a4c:	e791      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a54:	f7fe fe08 	bl	8000668 <HAL_GetTick>
 8001a58:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	0758      	lsls	r0, r3, #29
 8001a5e:	f57f af00 	bpl.w	8001862 <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a62:	f7fe fe01 	bl	8000668 <HAL_GetTick>
 8001a66:	1b80      	subs	r0, r0, r6
 8001a68:	2802      	cmp	r0, #2
 8001a6a:	d9f6      	bls.n	8001a5a <HAL_RCC_OscConfig+0x20a>
 8001a6c:	e781      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a6e:	69eb      	ldr	r3, [r5, #28]
 8001a70:	4c2a      	ldr	r4, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 8001a72:	b1eb      	cbz	r3, 8001ab0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a7c:	f7fe fdf4 	bl	8000668 <HAL_GetTick>
 8001a80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	05df      	lsls	r7, r3, #23
 8001a86:	d50d      	bpl.n	8001aa4 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a88:	6861      	ldr	r1, [r4, #4]
 8001a8a:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8001a8e:	fa93 f3a3 	rbit	r3, r3
 8001a92:	fab3 f283 	clz	r2, r3
 8001a96:	6a2b      	ldr	r3, [r5, #32]
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	6063      	str	r3, [r4, #4]
 8001aa2:	e707      	b.n	80018b4 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001aa4:	f7fe fde0 	bl	8000668 <HAL_GetTick>
 8001aa8:	1b80      	subs	r0, r0, r6
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9e9      	bls.n	8001a82 <HAL_RCC_OscConfig+0x232>
 8001aae:	e760      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8001ab0:	6823      	ldr	r3, [r4, #0]
 8001ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ab6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ab8:	f7fe fdd6 	bl	8000668 <HAL_GetTick>
 8001abc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	05d8      	lsls	r0, r3, #23
 8001ac2:	f57f aef7 	bpl.w	80018b4 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ac6:	f7fe fdcf 	bl	8000668 <HAL_GetTick>
 8001aca:	1b80      	subs	r0, r0, r6
 8001acc:	2802      	cmp	r0, #2
 8001ace:	d9f6      	bls.n	8001abe <HAL_RCC_OscConfig+0x26e>
 8001ad0:	e74f      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad2:	696b      	ldr	r3, [r5, #20]
 8001ad4:	4c11      	ldr	r4, [pc, #68]	; (8001b1c <HAL_RCC_OscConfig+0x2cc>)
 8001ad6:	b183      	cbz	r3, 8001afa <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8001ad8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001ae0:	f7fe fdc2 	bl	8000668 <HAL_GetTick>
 8001ae4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001ae8:	079b      	lsls	r3, r3, #30
 8001aea:	f53f aee7 	bmi.w	80018bc <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aee:	f7fe fdbb 	bl	8000668 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2802      	cmp	r0, #2
 8001af6:	d9f6      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x296>
 8001af8:	e73b      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8001afa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001b02:	f7fe fdb1 	bl	8000668 <HAL_GetTick>
 8001b06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001b0a:	079f      	lsls	r7, r3, #30
 8001b0c:	f57f aed6 	bpl.w	80018bc <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b10:	f7fe fdaa 	bl	8000668 <HAL_GetTick>
 8001b14:	1b80      	subs	r0, r0, r6
 8001b16:	2802      	cmp	r0, #2
 8001b18:	d9f6      	bls.n	8001b08 <HAL_RCC_OscConfig+0x2b8>
 8001b1a:	e72a      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
 8001b1c:	58024400 	.word	0x58024400
 8001b20:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b24:	69ab      	ldr	r3, [r5, #24]
 8001b26:	4c6e      	ldr	r4, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x490>)
 8001b28:	b183      	cbz	r3, 8001b4c <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b30:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001b32:	f7fe fd99 	bl	8000668 <HAL_GetTick>
 8001b36:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	0498      	lsls	r0, r3, #18
 8001b3c:	f53f aec2 	bmi.w	80018c4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b40:	f7fe fd92 	bl	8000668 <HAL_GetTick>
 8001b44:	1b80      	subs	r0, r0, r6
 8001b46:	2802      	cmp	r0, #2
 8001b48:	d9f6      	bls.n	8001b38 <HAL_RCC_OscConfig+0x2e8>
 8001b4a:	e712      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b52:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8001b54:	f7fe fd88 	bl	8000668 <HAL_GetTick>
 8001b58:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001b5a:	6823      	ldr	r3, [r4, #0]
 8001b5c:	0499      	lsls	r1, r3, #18
 8001b5e:	f57f aeb1 	bpl.w	80018c4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001b62:	f7fe fd81 	bl	8000668 <HAL_GetTick>
 8001b66:	1b80      	subs	r0, r0, r6
 8001b68:	2802      	cmp	r0, #2
 8001b6a:	d9f6      	bls.n	8001b5a <HAL_RCC_OscConfig+0x30a>
 8001b6c:	e701      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe fd7b 	bl	8000668 <HAL_GetTick>
 8001b72:	1b80      	subs	r0, r0, r6
 8001b74:	2864      	cmp	r0, #100	; 0x64
 8001b76:	f67f aeb0 	bls.w	80018da <HAL_RCC_OscConfig+0x8a>
 8001b7a:	e6fa      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	b9b3      	cbnz	r3, 8001bac <HAL_RCC_OscConfig+0x35c>
 8001b7e:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6723      	str	r3, [r4, #112]	; 0x70
 8001b8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b92:	f7fe fd69 	bl	8000668 <HAL_GetTick>
 8001b96:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001b9a:	0798      	lsls	r0, r3, #30
 8001b9c:	f57f aeb4 	bpl.w	8001908 <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7fe fd62 	bl	8000668 <HAL_GetTick>
 8001ba4:	1b80      	subs	r0, r0, r6
 8001ba6:	42b8      	cmp	r0, r7
 8001ba8:	d9f6      	bls.n	8001b98 <HAL_RCC_OscConfig+0x348>
 8001baa:	e6e2      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	2b05      	cmp	r3, #5
 8001bae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001bb0:	d103      	bne.n	8001bba <HAL_RCC_OscConfig+0x36a>
 8001bb2:	f043 0304 	orr.w	r3, r3, #4
 8001bb6:	6723      	str	r3, [r4, #112]	; 0x70
 8001bb8:	e698      	b.n	80018ec <HAL_RCC_OscConfig+0x9c>
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	6723      	str	r3, [r4, #112]	; 0x70
 8001bc0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	e694      	b.n	80018f2 <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fd4e 	bl	8000668 <HAL_GetTick>
 8001bcc:	1bc0      	subs	r0, r0, r7
 8001bce:	42a0      	cmp	r0, r4
 8001bd0:	f67f ae96 	bls.w	8001900 <HAL_RCC_OscConfig+0xb0>
 8001bd4:	e6cd      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bd6:	4c42      	ldr	r4, [pc, #264]	; (8001ce0 <HAL_RCC_OscConfig+0x490>)
 8001bd8:	6923      	ldr	r3, [r4, #16]
 8001bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bde:	2b18      	cmp	r3, #24
 8001be0:	f43f aeaf 	beq.w	8001942 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8001be4:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bec:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bee:	d169      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8001bf0:	f7fe fd3a 	bl	8000668 <HAL_GetTick>
 8001bf4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	0199      	lsls	r1, r3, #6
 8001bfa:	d45d      	bmi.n	8001cb8 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001bfe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001c00:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8001c04:	f023 0303 	bic.w	r3, r3, #3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001c0c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8001c12:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001c14:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001c16:	3b01      	subs	r3, #1
 8001c18:	3a01      	subs	r2, #1
 8001c1a:	025b      	lsls	r3, r3, #9
 8001c1c:	0412      	lsls	r2, r2, #16
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001c24:	4313      	orrs	r3, r2
 8001c26:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001c28:	3a01      	subs	r2, #1
 8001c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001c32:	3a01      	subs	r2, #1
 8001c34:	0612      	lsls	r2, r2, #24
 8001c36:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	6323      	str	r3, [r4, #48]	; 0x30
 8001c3e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c42:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	fab3 f183 	clz	r1, r3
 8001c4c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001c50:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001c52:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001c56:	408b      	lsls	r3, r1
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c5e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001c60:	f023 030c 	bic.w	r3, r3, #12
 8001c64:	4313      	orrs	r3, r2
 8001c66:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c6a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8001c6c:	f023 0302 	bic.w	r3, r3, #2
 8001c70:	4313      	orrs	r3, r2
 8001c72:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c82:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c8a:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001c8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c9c:	f7fe fce4 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca0:	4c0f      	ldr	r4, [pc, #60]	; (8001ce0 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8001ca2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	019a      	lsls	r2, r3, #6
 8001ca8:	f53f ae32 	bmi.w	8001910 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe fcdc 	bl	8000668 <HAL_GetTick>
 8001cb0:	1b40      	subs	r0, r0, r5
 8001cb2:	2802      	cmp	r0, #2
 8001cb4:	d9f6      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x454>
 8001cb6:	e65c      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7fe fcd6 	bl	8000668 <HAL_GetTick>
 8001cbc:	1b80      	subs	r0, r0, r6
 8001cbe:	2802      	cmp	r0, #2
 8001cc0:	d999      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x3a6>
 8001cc2:	e656      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fcd0 	bl	8000668 <HAL_GetTick>
 8001cc8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	f57f ae1f 	bpl.w	8001910 <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7fe fcc9 	bl	8000668 <HAL_GetTick>
 8001cd6:	1b40      	subs	r0, r0, r5
 8001cd8:	2802      	cmp	r0, #2
 8001cda:	d9f6      	bls.n	8001cca <HAL_RCC_OscConfig+0x47a>
 8001cdc:	e649      	b.n	8001972 <HAL_RCC_OscConfig+0x122>
 8001cde:	bf00      	nop
 8001ce0:	58024400 	.word	0x58024400

08001ce4 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce4:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x124>)
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8001cec:	2a10      	cmp	r2, #16
{
 8001cee:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf0:	d00e      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x2c>
 8001cf2:	2a18      	cmp	r2, #24
 8001cf4:	d00e      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x30>
 8001cf6:	2a00      	cmp	r2, #0
 8001cf8:	f040 8084 	bne.w	8001e04 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4843      	ldr	r0, [pc, #268]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x128>)
 8001d00:	f012 0f20 	tst.w	r2, #32
 8001d04:	d07f      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001d0c:	40d8      	lsrs	r0, r3
 8001d0e:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001d10:	483f      	ldr	r0, [pc, #252]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d12:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d14:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d16:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001d18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001d1c:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8001d20:	f001 0101 	and.w	r1, r1, #1
 8001d24:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8001e14 <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d28:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001d2c:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d2e:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d32:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 8001d36:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001d38:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001d3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8001d40:	d002      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x64>
 8001d42:	d30e      	bcc.n	8001d62 <HAL_RCC_GetSysClockFreq+0x7e>
 8001d44:	2a02      	cmp	r2, #2
 8001d46:	d04c      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x134>)
 8001d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d50:	ee07 3a10 	vmov	s14, r3
 8001d54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d58:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d60:	e04b      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	f012 0f20 	tst.w	r2, #32
 8001d68:	4a28      	ldr	r2, [pc, #160]	; (8001e0c <HAL_RCC_GetSysClockFreq+0x128>)
 8001d6a:	d026      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d6c:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d70:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d78:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001d7a:	fbb2 f2f0 	udiv	r2, r2, r0
 8001d7e:	ee07 2a10 	vmov	s14, r2
 8001d82:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001d86:	ee07 3a10 	vmov	s14, r3
 8001d8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d8e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001d92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d96:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_RCC_GetSysClockFreq+0x124>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001da2:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8001da4:	ee07 3a10 	vmov	s14, r3
 8001da8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001dac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001db0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001db4:	ee17 0a90 	vmov	r0, s15
 8001db8:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc0:	ee07 3a10 	vmov	s14, r3
 8001dc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dc8:	fbb2 f3f0 	udiv	r3, r2, r0
 8001dcc:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dd4:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de0:	e7db      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dea:	ee07 3a10 	vmov	s14, r3
 8001dee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001df2:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8001dfa:	fbb2 f2f0 	udiv	r2, r2, r0
 8001dfe:	ee07 2a90 	vmov	s15, r2
 8001e02:	e7e9      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8001e06:	bd10      	pop	{r4, pc}
 8001e08:	58024400 	.word	0x58024400
 8001e0c:	03d09000 	.word	0x03d09000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	39000000 	.word	0x39000000
 8001e18:	003d0900 	.word	0x003d0900

08001e1c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e1c:	4a68      	ldr	r2, [pc, #416]	; (8001fc0 <HAL_RCC_ClockConfig+0x1a4>)
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	428b      	cmp	r3, r1
{
 8001e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e2a:	4604      	mov	r4, r0
 8001e2c:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e2e:	d342      	bcc.n	8001eb6 <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	6822      	ldr	r2, [r4, #0]
 8001e32:	0797      	lsls	r7, r2, #30
 8001e34:	d44c      	bmi.n	8001ed0 <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e36:	07d6      	lsls	r6, r2, #31
 8001e38:	d452      	bmi.n	8001ee0 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e3a:	4a61      	ldr	r2, [pc, #388]	; (8001fc0 <HAL_RCC_ClockConfig+0x1a4>)
 8001e3c:	6813      	ldr	r3, [r2, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	429d      	cmp	r5, r3
 8001e44:	f0c0 80a8 	bcc.w	8001f98 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e48:	6822      	ldr	r2, [r4, #0]
 8001e4a:	0755      	lsls	r5, r2, #29
 8001e4c:	f100 80af 	bmi.w	8001fae <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	0710      	lsls	r0, r2, #28
 8001e52:	d506      	bpl.n	8001e62 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e54:	495b      	ldr	r1, [pc, #364]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001e56:	6960      	ldr	r0, [r4, #20]
 8001e58:	69cb      	ldr	r3, [r1, #28]
 8001e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e5e:	4303      	orrs	r3, r0
 8001e60:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	06d1      	lsls	r1, r2, #27
 8001e64:	d506      	bpl.n	8001e74 <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e66:	4957      	ldr	r1, [pc, #348]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001e68:	69a0      	ldr	r0, [r4, #24]
 8001e6a:	69cb      	ldr	r3, [r1, #28]
 8001e6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e70:	4303      	orrs	r3, r0
 8001e72:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e74:	0693      	lsls	r3, r2, #26
 8001e76:	d506      	bpl.n	8001e86 <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001e7a:	69e1      	ldr	r1, [r4, #28]
 8001e7c:	6a13      	ldr	r3, [r2, #32]
 8001e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e82:	430b      	orrs	r3, r1
 8001e84:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8001e86:	f7ff ff2d 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	fab2 f282 	clz	r2, r2
 8001e9a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001e9e:	40d3      	lsrs	r3, r2
 8001ea0:	4a49      	ldr	r2, [pc, #292]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ac>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	40d8      	lsrs	r0, r3
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <HAL_RCC_ClockConfig+0x1b0>)
 8001ea8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7fe fb9c 	bl	80005e8 <HAL_InitTick>
  return HAL_OK;
 8001eb0:	2000      	movs	r0, #0
}
 8001eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	6813      	ldr	r3, [r2, #0]
 8001eb8:	f023 0307 	bic.w	r3, r3, #7
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ec0:	6813      	ldr	r3, [r2, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	4299      	cmp	r1, r3
 8001ec8:	d0b2      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001eca:	2001      	movs	r0, #1
 8001ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	493c      	ldr	r1, [pc, #240]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001ed2:	68e0      	ldr	r0, [r4, #12]
 8001ed4:	698b      	ldr	r3, [r1, #24]
 8001ed6:	f023 030f 	bic.w	r3, r3, #15
 8001eda:	4303      	orrs	r3, r0
 8001edc:	618b      	str	r3, [r1, #24]
 8001ede:	e7aa      	b.n	8001e36 <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ee0:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001ee2:	68a1      	ldr	r1, [r4, #8]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001eea:	430a      	orrs	r2, r1
 8001eec:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef0:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	2902      	cmp	r1, #2
 8001ef4:	d11d      	bne.n	8001f32 <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	d0e6      	beq.n	8001eca <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001efc:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efe:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001f02:	4f30      	ldr	r7, [pc, #192]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f04:	f022 0207 	bic.w	r2, r2, #7
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001f0c:	f7fe fbac 	bl	8000668 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 8001f12:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d119      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f1e:	2b10      	cmp	r3, #16
 8001f20:	d08b      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7fe fba1 	bl	8000668 <HAL_GetTick>
 8001f26:	1b80      	subs	r0, r0, r6
 8001f28:	4540      	cmp	r0, r8
 8001f2a:	d9f5      	bls.n	8001f18 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f32:	2903      	cmp	r1, #3
 8001f34:	d102      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001f3a:	e7de      	b.n	8001efa <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f3c:	2901      	cmp	r1, #1
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8001f40:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001f44:	e7d9      	b.n	8001efa <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	f012 0f04 	tst.w	r2, #4
 8001f4a:	e7d6      	b.n	8001efa <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f56:	2b18      	cmp	r3, #24
 8001f58:	f43f af6f 	beq.w	8001e3a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7fe fb84 	bl	8000668 <HAL_GetTick>
 8001f60:	1b80      	subs	r0, r0, r6
 8001f62:	4540      	cmp	r0, r8
 8001f64:	d9f4      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x134>
 8001f66:	e7e1      	b.n	8001f2c <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d110      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	f43f af61 	beq.w	8001e3a <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f78:	f7fe fb76 	bl	8000668 <HAL_GetTick>
 8001f7c:	1b80      	subs	r0, r0, r6
 8001f7e:	4540      	cmp	r0, r8
 8001f80:	d9f4      	bls.n	8001f6c <HAL_RCC_ClockConfig+0x150>
 8001f82:	e7d3      	b.n	8001f2c <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7fe fb70 	bl	8000668 <HAL_GetTick>
 8001f88:	1b80      	subs	r0, r0, r6
 8001f8a:	4540      	cmp	r0, r8
 8001f8c:	d8ce      	bhi.n	8001f2c <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001f94:	d1f6      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x168>
 8001f96:	e750      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	f023 0307 	bic.w	r3, r3, #7
 8001f9e:	432b      	orrs	r3, r5
 8001fa0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	429d      	cmp	r5, r3
 8001faa:	d18e      	bne.n	8001eca <HAL_RCC_ClockConfig+0xae>
 8001fac:	e74c      	b.n	8001e48 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fae:	4905      	ldr	r1, [pc, #20]	; (8001fc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001fb0:	6920      	ldr	r0, [r4, #16]
 8001fb2:	698b      	ldr	r3, [r1, #24]
 8001fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fb8:	4303      	orrs	r3, r0
 8001fba:	618b      	str	r3, [r1, #24]
 8001fbc:	e748      	b.n	8001e50 <HAL_RCC_ClockConfig+0x34>
 8001fbe:	bf00      	nop
 8001fc0:	52002000 	.word	0x52002000
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	080050be 	.word	0x080050be
 8001fcc:	20000118 	.word	0x20000118

08001fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd0:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 8001fd2:	f000 fed5 	bl	8002d80 <HAL_RCCEx_GetD1SysClockFreq>
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_RCC_GetHCLKFreq+0x28>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	fa92 f2a2 	rbit	r2, r2
 8001fe0:	fab2 f282 	clz	r2, r2
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	40d3      	lsrs	r3, r2
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_RCC_GetHCLKFreq+0x2c>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	40d8      	lsrs	r0, r3
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCC_GetHCLKFreq+0x30>)
 8001ff2:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001ff4:	bd08      	pop	{r3, pc}
 8001ff6:	bf00      	nop
 8001ff8:	58024400 	.word	0x58024400
 8001ffc:	080050be 	.word	0x080050be
 8002000:	2000011c 	.word	0x2000011c

08002004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002004:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8002006:	f7ff ffe3 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200c:	2210      	movs	r2, #16
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	fa92 f2a2 	rbit	r2, r2
 8002014:	fab2 f282 	clz	r2, r2
 8002018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800201c:	40d3      	lsrs	r3, r2
 800201e:	4a03      	ldr	r2, [pc, #12]	; (800202c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
}
 8002022:	40d8      	lsrs	r0, r3
 8002024:	bd08      	pop	{r3, pc}
 8002026:	bf00      	nop
 8002028:	58024400 	.word	0x58024400
 800202c:	080050be 	.word	0x080050be

08002030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002030:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 8002032:	f7ff ffcd 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	fa92 f2a2 	rbit	r2, r2
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800204a:	40d3      	lsrs	r3, r2
 800204c:	4a02      	ldr	r2, [pc, #8]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x28>)
 800204e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002050:	40d8      	lsrs	r0, r3
 8002052:	bd08      	pop	{r3, pc}
 8002054:	58024400 	.word	0x58024400
 8002058:	080050be 	.word	0x080050be

0800205c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800205e:	4c31      	ldr	r4, [pc, #196]	; (8002124 <RCCEx_PLL2_Config+0xc8>)
{
 8002060:	4606      	mov	r6, r0
 8002062:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002064:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b03      	cmp	r3, #3
 800206c:	d058      	beq.n	8002120 <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002074:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002076:	f7fe faf7 	bl	8000668 <HAL_GetTick>
 800207a:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	011a      	lsls	r2, r3, #4
 8002080:	d43a      	bmi.n	80020f8 <RCCEx_PLL2_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002084:	6832      	ldr	r2, [r6, #0]
 8002086:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800208a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800208e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002090:	68b3      	ldr	r3, [r6, #8]
 8002092:	68f2      	ldr	r2, [r6, #12]
 8002094:	3b01      	subs	r3, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	025b      	lsls	r3, r3, #9
 800209a:	0412      	lsls	r2, r2, #16
 800209c:	b29b      	uxth	r3, r3
 800209e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80020a2:	4313      	orrs	r3, r2
 80020a4:	6872      	ldr	r2, [r6, #4]
 80020a6:	3a01      	subs	r2, #1
 80020a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ac:	4313      	orrs	r3, r2
 80020ae:	6932      	ldr	r2, [r6, #16]
 80020b0:	3a01      	subs	r2, #1
 80020b2:	0612      	lsls	r2, r2, #24
 80020b4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80020b8:	4313      	orrs	r3, r2
 80020ba:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80020bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020be:	6972      	ldr	r2, [r6, #20]
 80020c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020c4:	4313      	orrs	r3, r2
 80020c6:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80020c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020ca:	69b2      	ldr	r2, [r6, #24]
 80020cc:	f023 0320 	bic.w	r3, r3, #32
 80020d0:	4313      	orrs	r3, r2
 80020d2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80020d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80020d6:	b9b5      	cbnz	r5, 8002106 <RCCEx_PLL2_Config+0xaa>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80020d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80020dc:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80020de:	4c11      	ldr	r4, [pc, #68]	; (8002124 <RCCEx_PLL2_Config+0xc8>)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020e6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e8:	f7fe fabe 	bl	8000668 <HAL_GetTick>
 80020ec:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	d50f      	bpl.n	8002114 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 80020f4:	2000      	movs	r0, #0
 80020f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80020f8:	f7fe fab6 	bl	8000668 <HAL_GetTick>
 80020fc:	1bc0      	subs	r0, r0, r7
 80020fe:	2802      	cmp	r0, #2
 8002100:	d9bc      	bls.n	800207c <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
 8002104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8002106:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002108:	bf0c      	ite	eq
 800210a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800210e:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8002112:	e7e3      	b.n	80020dc <RCCEx_PLL2_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002114:	f7fe faa8 	bl	8000668 <HAL_GetTick>
 8002118:	1b40      	subs	r0, r0, r5
 800211a:	2802      	cmp	r0, #2
 800211c:	d9e7      	bls.n	80020ee <RCCEx_PLL2_Config+0x92>
 800211e:	e7f0      	b.n	8002102 <RCCEx_PLL2_Config+0xa6>
    return HAL_ERROR;
 8002120:	2001      	movs	r0, #1
}
 8002122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002124:	58024400 	.word	0x58024400

08002128 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800212a:	4c31      	ldr	r4, [pc, #196]	; (80021f0 <RCCEx_PLL3_Config+0xc8>)
{
 800212c:	4606      	mov	r6, r0
 800212e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b03      	cmp	r3, #3
 8002138:	d058      	beq.n	80021ec <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800213a:	6823      	ldr	r3, [r4, #0]
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002142:	f7fe fa91 	bl	8000668 <HAL_GetTick>
 8002146:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	009a      	lsls	r2, r3, #2
 800214c:	d43a      	bmi.n	80021c4 <RCCEx_PLL3_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800214e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002150:	6832      	ldr	r2, [r6, #0]
 8002152:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002156:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800215a:	62a3      	str	r3, [r4, #40]	; 0x28
 800215c:	68b3      	ldr	r3, [r6, #8]
 800215e:	68f2      	ldr	r2, [r6, #12]
 8002160:	3b01      	subs	r3, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	025b      	lsls	r3, r3, #9
 8002166:	0412      	lsls	r2, r2, #16
 8002168:	b29b      	uxth	r3, r3
 800216a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800216e:	4313      	orrs	r3, r2
 8002170:	6872      	ldr	r2, [r6, #4]
 8002172:	3a01      	subs	r2, #1
 8002174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002178:	4313      	orrs	r3, r2
 800217a:	6932      	ldr	r2, [r6, #16]
 800217c:	3a01      	subs	r2, #1
 800217e:	0612      	lsls	r2, r2, #24
 8002180:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002184:	4313      	orrs	r3, r2
 8002186:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8002188:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800218a:	6972      	ldr	r2, [r6, #20]
 800218c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002190:	4313      	orrs	r3, r2
 8002192:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8002194:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002196:	69b2      	ldr	r2, [r6, #24]
 8002198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800219c:	4313      	orrs	r3, r2
 800219e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80021a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80021a2:	b9b5      	cbnz	r5, 80021d2 <RCCEx_PLL3_Config+0xaa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80021a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80021a8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80021aa:	4c11      	ldr	r4, [pc, #68]	; (80021f0 <RCCEx_PLL3_Config+0xc8>)
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b4:	f7fe fa58 	bl	8000668 <HAL_GetTick>
 80021b8:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	d50f      	bpl.n	80021e0 <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 80021c0:	2000      	movs	r0, #0
 80021c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80021c4:	f7fe fa50 	bl	8000668 <HAL_GetTick>
 80021c8:	1bc0      	subs	r0, r0, r7
 80021ca:	2802      	cmp	r0, #2
 80021cc:	d9bc      	bls.n	8002148 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80021ce:	2003      	movs	r0, #3
 80021d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80021d2:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80021d4:	bf0c      	ite	eq
 80021d6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80021da:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80021de:	e7e3      	b.n	80021a8 <RCCEx_PLL3_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80021e0:	f7fe fa42 	bl	8000668 <HAL_GetTick>
 80021e4:	1b40      	subs	r0, r0, r5
 80021e6:	2802      	cmp	r0, #2
 80021e8:	d9e7      	bls.n	80021ba <RCCEx_PLL3_Config+0x92>
 80021ea:	e7f0      	b.n	80021ce <RCCEx_PLL3_Config+0xa6>
    return HAL_ERROR;
 80021ec:	2001      	movs	r0, #1
}
 80021ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021f0:	58024400 	.word	0x58024400

080021f4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80021f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021f8:	6804      	ldr	r4, [r0, #0]
{
 80021fa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021fc:	f014 6000 	ands.w	r0, r4, #134217728	; 0x8000000
 8002200:	d014      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002208:	d018      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x48>
 800220a:	d802      	bhi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800220c:	b183      	cbz	r3, 8002230 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 800220e:	2401      	movs	r4, #1
 8002210:	e01b      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8002212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002216:	d023      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800221c:	d1f7      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800221e:	4aa6      	ldr	r2, [pc, #664]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002220:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8002222:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002224:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002228:	430b      	orrs	r3, r1
 800222a:	6513      	str	r3, [r2, #80]	; 0x50
 800222c:	2400      	movs	r4, #0
 800222e:	e00c      	b.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002230:	4aa1      	ldr	r2, [pc, #644]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002232:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800223a:	e7f0      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800223c:	2102      	movs	r1, #2
 800223e:	1d28      	adds	r0, r5, #4
 8002240:	f7ff ff0c 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002244:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8002246:	2800      	cmp	r0, #0
 8002248:	d0e9      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800224a:	682b      	ldr	r3, [r5, #0]
 800224c:	05de      	lsls	r6, r3, #23
 800224e:	d53c      	bpl.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002250:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002252:	2b04      	cmp	r3, #4
 8002254:	d834      	bhi.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002256:	e8df f003 	tbb	[pc, r3]
 800225a:	1009      	.short	0x1009
 800225c:	0e2d      	.short	0x0e2d
 800225e:	0e          	.byte	0x0e
 800225f:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002260:	2102      	movs	r1, #2
 8002262:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002266:	f7ff ff5f 	bl	8002128 <RCCEx_PLL3_Config>
 800226a:	e7eb      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800226c:	4a92      	ldr	r2, [pc, #584]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800226e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002274:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8002276:	4626      	mov	r6, r4
 8002278:	e004      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800227a:	2100      	movs	r1, #0
 800227c:	1d28      	adds	r0, r5, #4
 800227e:	f7ff feed 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002282:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002284:	b9ee      	cbnz	r6, 80022c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002286:	4a8c      	ldr	r2, [pc, #560]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002288:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800228a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800228c:	f023 0307 	bic.w	r3, r3, #7
 8002290:	430b      	orrs	r3, r1
 8002292:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	0598      	lsls	r0, r3, #22
 8002298:	d527      	bpl.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 800229a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800229c:	2b80      	cmp	r3, #128	; 0x80
 800229e:	d043      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x134>
 80022a0:	d815      	bhi.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0xda>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d034      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80022a6:	2b40      	cmp	r3, #64	; 0x40
 80022a8:	d038      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 80022aa:	2601      	movs	r6, #1
      status |= ret;
 80022ac:	ea44 0006 	orr.w	r0, r4, r6
 80022b0:	b2c4      	uxtb	r4, r0
 80022b2:	e01a      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80022b4:	2100      	movs	r1, #0
 80022b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80022ba:	f7ff ff35 	bl	8002128 <RCCEx_PLL3_Config>
 80022be:	e7e0      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 80022c0:	2601      	movs	r6, #1
      status |= ret;
 80022c2:	ea44 0006 	orr.w	r0, r4, r6
 80022c6:	b2c4      	uxtb	r4, r0
 80022c8:	e7e4      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80022ca:	4626      	mov	r6, r4
 80022cc:	e7e2      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 80022ce:	2bc0      	cmp	r3, #192	; 0xc0
 80022d0:	d002      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 80022d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d6:	d1e8      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 80022d8:	2e00      	cmp	r6, #0
 80022da:	d1e7      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80022dc:	4a76      	ldr	r2, [pc, #472]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022de:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80022e0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80022e2:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80022e6:	430b      	orrs	r3, r1
 80022e8:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80022ea:	682b      	ldr	r3, [r5, #0]
 80022ec:	0559      	lsls	r1, r3, #21
 80022ee:	d531      	bpl.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 80022f0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80022f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f8:	d04b      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80022fa:	d81b      	bhi.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002304:	d03f      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 8002306:	2601      	movs	r6, #1
      status |= ret;
 8002308:	ea44 0006 	orr.w	r0, r4, r6
 800230c:	b2c4      	uxtb	r4, r0
 800230e:	e021      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002310:	4a69      	ldr	r2, [pc, #420]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002312:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002318:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800231a:	e7dd      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800231c:	2100      	movs	r1, #0
 800231e:	1d28      	adds	r0, r5, #4
 8002320:	f7ff fe9c 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002324:	4606      	mov	r6, r0
      break;
 8002326:	e7d7      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002328:	2100      	movs	r1, #0
 800232a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800232e:	f7ff fefb 	bl	8002128 <RCCEx_PLL3_Config>
 8002332:	e7f7      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 8002334:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002338:	d002      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800233a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800233e:	d1e2      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 8002340:	2e00      	cmp	r6, #0
 8002342:	d1e1      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002344:	4a5c      	ldr	r2, [pc, #368]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002346:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 800234a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800234c:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8002350:	430b      	orrs	r3, r1
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	051a      	lsls	r2, r3, #20
 8002358:	d531      	bpl.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 800235a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 800235e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002362:	d045      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8002364:	d81b      	bhi.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002366:	2b00      	cmp	r3, #0
 8002368:	d036      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800236a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236e:	d039      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 8002370:	2601      	movs	r6, #1
      status |= ret;
 8002372:	ea44 0006 	orr.w	r0, r4, r6
 8002376:	b2c4      	uxtb	r4, r0
 8002378:	e021      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800237a:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800237c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800237e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002382:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002384:	e7dc      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002386:	2100      	movs	r1, #0
 8002388:	1d28      	adds	r0, r5, #4
 800238a:	f7ff fe67 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800238e:	4606      	mov	r6, r0
      break;
 8002390:	e7d6      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002392:	2100      	movs	r1, #0
 8002394:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002398:	f7ff fec6 	bl	8002128 <RCCEx_PLL3_Config>
 800239c:	e7f7      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 800239e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80023a2:	d002      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80023a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023a8:	d1e2      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 80023aa:	2e00      	cmp	r6, #0
 80023ac:	d1e1      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80023ae:	4a42      	ldr	r2, [pc, #264]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023b0:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 80023b4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80023b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	d528      	bpl.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 80023c4:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80023c6:	2b10      	cmp	r3, #16
 80023c8:	d037      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x246>
 80023ca:	d817      	bhi.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80023cc:	b1d3      	cbz	r3, 8002404 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 80023ce:	2601      	movs	r6, #1
      status |= ret;
 80023d0:	ea44 0006 	orr.w	r0, r4, r6
 80023d4:	b2c4      	uxtb	r4, r0
 80023d6:	e01e      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d8:	4a37      	ldr	r2, [pc, #220]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80023da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80023e2:	e7e2      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80023e4:	2100      	movs	r1, #0
 80023e6:	1d28      	adds	r0, r5, #4
 80023e8:	f7ff fe38 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023ec:	4606      	mov	r6, r0
      break;
 80023ee:	e7dc      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023f0:	2100      	movs	r1, #0
 80023f2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80023f6:	f7ff fe97 	bl	8002128 <RCCEx_PLL3_Config>
 80023fa:	e7f7      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d022      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002400:	2b30      	cmp	r3, #48	; 0x30
 8002402:	d1e4      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 8002404:	2e00      	cmp	r6, #0
 8002406:	d1e3      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002408:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800240a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800240c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800240e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002412:	430b      	orrs	r3, r1
 8002414:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	04df      	lsls	r7, r3, #19
 800241a:	d529      	bpl.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 800241c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	d042      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8002424:	d815      	bhi.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8002426:	2b00      	cmp	r3, #0
 8002428:	d033      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800242a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242e:	d036      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 8002430:	2601      	movs	r6, #1
      status |= ret;
 8002432:	ea44 0006 	orr.w	r0, r4, r6
 8002436:	b2c4      	uxtb	r4, r0
 8002438:	e01a      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800243c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800243e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002442:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8002444:	e7de      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002446:	2102      	movs	r1, #2
 8002448:	1d28      	adds	r0, r5, #4
 800244a:	f7ff fe07 	bl	800205c <RCCEx_PLL2_Config>
 800244e:	4606      	mov	r6, r0
      break;
 8002450:	e7d8      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 8002452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002456:	d002      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8002458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800245c:	d1e8      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 800245e:	2e00      	cmp	r6, #0
 8002460:	d1e7      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002464:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8002466:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002468:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246c:	430b      	orrs	r3, r1
 800246e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	0498      	lsls	r0, r3, #18
 8002474:	d534      	bpl.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 8002476:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8002478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800247c:	d048      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800247e:	d81d      	bhi.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002480:	b32b      	cbz	r3, 80024ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002486:	d03d      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 8002488:	2601      	movs	r6, #1
      status |= ret;
 800248a:	ea44 0006 	orr.w	r0, r4, r6
 800248e:	b2c4      	uxtb	r4, r0
 8002490:	e026      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002494:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800249a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800249c:	e7df      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800249e:	2100      	movs	r1, #0
 80024a0:	1d28      	adds	r0, r5, #4
 80024a2:	f7ff fddb 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024a6:	4606      	mov	r6, r0
      break;
 80024a8:	e7d9      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80024aa:	2100      	movs	r1, #0
 80024ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80024b0:	f7ff fe3a 	bl	8002128 <RCCEx_PLL3_Config>
 80024b4:	e7f7      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 80024b6:	bf00      	nop
 80024b8:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 80024bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80024c0:	d005      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80024c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024c6:	d002      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80024c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80024cc:	d1dc      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d1db      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80024d2:	4aa0      	ldr	r2, [pc, #640]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80024d4:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80024d6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80024d8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80024dc:	430b      	orrs	r3, r1
 80024de:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80024e0:	682b      	ldr	r3, [r5, #0]
 80024e2:	0459      	lsls	r1, r3, #17
 80024e4:	d52d      	bpl.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 80024e6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80024ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ee:	d04c      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x396>
 80024f0:	d814      	bhi.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x328>
 80024f2:	b1e3      	cbz	r3, 800252e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80024f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024f8:	d041      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      ret = HAL_ERROR;
 80024fa:	2601      	movs	r6, #1
      status |= ret;
 80024fc:	ea44 0006 	orr.w	r0, r4, r6
 8002500:	b2c4      	uxtb	r4, r0
 8002502:	e01e      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002504:	2101      	movs	r1, #1
 8002506:	1d28      	adds	r0, r5, #4
 8002508:	f7ff fda8 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800250c:	4606      	mov	r6, r0
      break;
 800250e:	e7de      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002510:	2101      	movs	r1, #1
 8002512:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002516:	f7ff fe07 	bl	8002128 <RCCEx_PLL3_Config>
 800251a:	e7f7      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d005      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002526:	d002      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002528:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800252c:	d1e5      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 800252e:	2e00      	cmp	r6, #0
 8002530:	d1e4      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002532:	4a88      	ldr	r2, [pc, #544]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002534:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8002538:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800253a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800253e:	430b      	orrs	r3, r1
 8002540:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002542:	682b      	ldr	r3, [r5, #0]
 8002544:	041a      	lsls	r2, r3, #16
 8002546:	d50f      	bpl.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 8002548:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800254a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800254e:	d022      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8002550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002554:	d025      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002556:	bb53      	cbnz	r3, 80025ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(ret == HAL_OK)
 8002558:	bb56      	cbnz	r6, 80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800255a:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800255c:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 800255e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8002560:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002564:	430b      	orrs	r3, r1
 8002566:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002568:	682b      	ldr	r3, [r5, #0]
 800256a:	01db      	lsls	r3, r3, #7
 800256c:	d532      	bpl.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 800256e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002570:	2b03      	cmp	r3, #3
 8002572:	f200 808a 	bhi.w	800268a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8002576:	e8df f003 	tbb	[pc, r3]
 800257a:	1f24      	.short	0x1f24
 800257c:	2482      	.short	0x2482
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800257e:	2101      	movs	r1, #1
 8002580:	1d28      	adds	r0, r5, #4
 8002582:	f7ff fd6b 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002586:	4606      	mov	r6, r0
      break;
 8002588:	e7d1      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800258a:	2101      	movs	r1, #1
 800258c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002590:	f7ff fdca 	bl	8002128 <RCCEx_PLL3_Config>
 8002594:	e7f7      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002596:	4a6f      	ldr	r2, [pc, #444]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002598:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800259a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800259e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80025a0:	e7da      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80025a2:	2101      	movs	r1, #1
 80025a4:	1d28      	adds	r0, r5, #4
 80025a6:	f7ff fd59 	bl	800205c <RCCEx_PLL2_Config>
 80025aa:	4606      	mov	r6, r0
      break;
 80025ac:	e7d4      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 80025ae:	2601      	movs	r6, #1
      status |= ret;
 80025b0:	ea44 0006 	orr.w	r0, r4, r6
 80025b4:	b2c4      	uxtb	r4, r0
 80025b6:	e7d7      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b8:	4a66      	ldr	r2, [pc, #408]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80025ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80025c2:	2e00      	cmp	r6, #0
 80025c4:	d162      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x498>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80025c6:	4a63      	ldr	r2, [pc, #396]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80025c8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80025ca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80025cc:	f023 0303 	bic.w	r3, r3, #3
 80025d0:	430b      	orrs	r3, r1
 80025d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d4:	682b      	ldr	r3, [r5, #0]
 80025d6:	025f      	lsls	r7, r3, #9
 80025d8:	d542      	bpl.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025da:	4f5f      	ldr	r7, [pc, #380]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80025e4:	f7fe f840 	bl	8000668 <HAL_GetTick>
 80025e8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	05d8      	lsls	r0, r3, #23
 80025ee:	d551      	bpl.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(ret == HAL_OK)
 80025f0:	2e00      	cmp	r6, #0
 80025f2:	d156      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80025f4:	4b57      	ldr	r3, [pc, #348]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80025f6:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 80025fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025fc:	4042      	eors	r2, r0
 80025fe:	f412 7f40 	tst.w	r2, #768	; 0x300
 8002602:	d00b      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002604:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8002606:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002608:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800260c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8002610:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002612:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002614:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002618:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800261a:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800261c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002620:	d108      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x440>
        tickstart = HAL_GetTick();
 8002622:	f7fe f821 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	4f4b      	ldr	r7, [pc, #300]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
        tickstart = HAL_GetTick();
 8002628:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002630:	0799      	lsls	r1, r3, #30
 8002632:	d53a      	bpl.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002634:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8002638:	4946      	ldr	r1, [pc, #280]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800263a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800263e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002642:	d13d      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8002644:	6908      	ldr	r0, [r1, #16]
 8002646:	4a45      	ldr	r2, [pc, #276]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x568>)
 8002648:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 800264c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8002650:	4302      	orrs	r2, r0
 8002652:	610a      	str	r2, [r1, #16]
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	4a3e      	ldr	r2, [pc, #248]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 800265a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800265c:	430b      	orrs	r3, r1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002660:	682b      	ldr	r3, [r5, #0]
 8002662:	07da      	lsls	r2, r3, #31
 8002664:	d53f      	bpl.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->Usart16ClockSelection)
 8002666:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002668:	2b10      	cmp	r3, #16
 800266a:	d04d      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800266c:	d82c      	bhi.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800266e:	b38b      	cbz	r3, 80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8002670:	2b08      	cmp	r3, #8
 8002672:	d043      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x508>
      ret = HAL_ERROR;
 8002674:	2601      	movs	r6, #1
      status |= ret;
 8002676:	ea44 0006 	orr.w	r0, r4, r6
 800267a:	b2c4      	uxtb	r4, r0
 800267c:	e033      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800267e:	2102      	movs	r1, #2
 8002680:	1d28      	adds	r0, r5, #4
 8002682:	f7ff fceb 	bl	800205c <RCCEx_PLL2_Config>
 8002686:	4606      	mov	r6, r0
      break;
 8002688:	e79b      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 800268a:	2601      	movs	r6, #1
      status |= ret;
 800268c:	ea44 0006 	orr.w	r0, r4, r6
 8002690:	b2c4      	uxtb	r4, r0
 8002692:	e79f      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002694:	f7fd ffe8 	bl	8000668 <HAL_GetTick>
 8002698:	eba0 0008 	sub.w	r0, r0, r8
 800269c:	2864      	cmp	r0, #100	; 0x64
 800269e:	d9a4      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 80026a0:	2603      	movs	r6, #3
      status |= ret;
 80026a2:	ea44 0006 	orr.w	r0, r4, r6
 80026a6:	b2c4      	uxtb	r4, r0
 80026a8:	e7da      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7fd ffdd 	bl	8000668 <HAL_GetTick>
 80026ae:	eba0 0008 	sub.w	r0, r0, r8
 80026b2:	4548      	cmp	r0, r9
 80026b4:	d9bb      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x43a>
        status |= ret;
 80026b6:	f044 0003 	orr.w	r0, r4, #3
            ret = HAL_TIMEOUT;
 80026ba:	2603      	movs	r6, #3
        status |= ret;
 80026bc:	b2c4      	uxtb	r4, r0
 80026be:	e7cf      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026c0:	690a      	ldr	r2, [r1, #16]
 80026c2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80026c6:	e7c4      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->Usart16ClockSelection)
 80026c8:	2b20      	cmp	r3, #32
 80026ca:	d003      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80026cc:	2b28      	cmp	r3, #40	; 0x28
 80026ce:	d001      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80026d0:	2b18      	cmp	r3, #24
 80026d2:	d1cf      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x480>
    if(ret == HAL_OK)
 80026d4:	2e00      	cmp	r6, #0
 80026d6:	d1ce      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x482>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80026d8:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80026da:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 80026dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80026de:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80026e2:	430b      	orrs	r3, r1
 80026e4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80026e6:	682b      	ldr	r3, [r5, #0]
 80026e8:	079b      	lsls	r3, r3, #30
 80026ea:	d520      	bpl.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80026ec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d836      	bhi.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 80026f2:	e8df f003 	tbb	[pc, r3]
 80026f6:	0f14      	.short	0x0f14
 80026f8:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80026fc:	2101      	movs	r1, #1
 80026fe:	1d28      	adds	r0, r5, #4
 8002700:	f7ff fcac 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002704:	4606      	mov	r6, r0
      break;
 8002706:	e7e5      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002708:	2101      	movs	r1, #1
 800270a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800270e:	f7ff fd0b 	bl	8002128 <RCCEx_PLL3_Config>
 8002712:	e7f7      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002714:	2101      	movs	r1, #1
 8002716:	1d28      	adds	r0, r5, #4
 8002718:	f7ff fca0 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800271c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800271e:	bb06      	cbnz	r6, 8002762 <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002720:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002722:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8002724:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002726:	f023 0307 	bic.w	r3, r3, #7
 800272a:	430b      	orrs	r3, r1
 800272c:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800272e:	682b      	ldr	r3, [r5, #0]
 8002730:	075f      	lsls	r7, r3, #29
 8002732:	d528      	bpl.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002734:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8002738:	2b05      	cmp	r3, #5
 800273a:	d83c      	bhi.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 800273c:	e8df f003 	tbb	[pc, r3]
 8002740:	1a35151a 	.word	0x1a35151a
 8002744:	1a1a      	.short	0x1a1a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002746:	2101      	movs	r1, #1
 8002748:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800274c:	f7ff fcec 	bl	8002128 <RCCEx_PLL3_Config>
 8002750:	e7e4      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002752:	bf00      	nop
 8002754:	58024400 	.word	0x58024400
 8002758:	58024800 	.word	0x58024800
 800275c:	00ffffcf 	.word	0x00ffffcf
      ret = HAL_ERROR;
 8002760:	2601      	movs	r6, #1
      status |= ret;
 8002762:	ea44 0006 	orr.w	r0, r4, r6
 8002766:	b2c4      	uxtb	r4, r0
 8002768:	e7e1      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x53a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800276a:	2101      	movs	r1, #1
 800276c:	1d28      	adds	r0, r5, #4
 800276e:	f7ff fc75 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002772:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002774:	bb06      	cbnz	r6, 80027b8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002776:	4a99      	ldr	r2, [pc, #612]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002778:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 800277c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800277e:	f023 0307 	bic.w	r3, r3, #7
 8002782:	430b      	orrs	r3, r1
 8002784:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002786:	682b      	ldr	r3, [r5, #0]
 8002788:	0698      	lsls	r0, r3, #26
 800278a:	d52c      	bpl.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800278c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8002790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002794:	d03f      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8002796:	d813      	bhi.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002798:	b1db      	cbz	r3, 80027d2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 800279a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800279e:	d034      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x616>
      ret = HAL_ERROR;
 80027a0:	2601      	movs	r6, #1
      status |= ret;
 80027a2:	ea44 0006 	orr.w	r0, r4, r6
 80027a6:	b2c4      	uxtb	r4, r0
 80027a8:	e01d      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80027aa:	2101      	movs	r1, #1
 80027ac:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80027b0:	f7ff fcba 	bl	8002128 <RCCEx_PLL3_Config>
 80027b4:	e7dd      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = HAL_ERROR;
 80027b6:	2601      	movs	r6, #1
      status |= ret;
 80027b8:	ea44 0006 	orr.w	r0, r4, r6
 80027bc:	b2c4      	uxtb	r4, r0
 80027be:	e7e2      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d005      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80027c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ca:	d002      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
 80027cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80027d0:	d1e6      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    if(ret == HAL_OK)
 80027d2:	2e00      	cmp	r6, #0
 80027d4:	d1e5      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027d6:	4a81      	ldr	r2, [pc, #516]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80027d8:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 80027dc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80027de:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80027e2:	430b      	orrs	r3, r1
 80027e4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80027e6:	682b      	ldr	r3, [r5, #0]
 80027e8:	0659      	lsls	r1, r3, #25
 80027ea:	d52d      	bpl.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x654>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80027ec:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80027f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f4:	d042      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x688>
 80027f6:	d814      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 80027f8:	b1e3      	cbz	r3, 8002834 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d037      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      ret = HAL_ERROR;
 8002800:	2601      	movs	r6, #1
      status |= ret;
 8002802:	ea44 0006 	orr.w	r0, r4, r6
 8002806:	b2c4      	uxtb	r4, r0
 8002808:	e01e      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x654>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800280a:	2100      	movs	r1, #0
 800280c:	1d28      	adds	r0, r5, #4
 800280e:	f7ff fc25 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002812:	4606      	mov	r6, r0
      break;
 8002814:	e7dd      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002816:	2102      	movs	r1, #2
 8002818:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800281c:	f7ff fc84 	bl	8002128 <RCCEx_PLL3_Config>
 8002820:	e7f7      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002826:	d005      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8002828:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800282c:	d002      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x640>
 800282e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002832:	d1e5      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    if(ret == HAL_OK)
 8002834:	2e00      	cmp	r6, #0
 8002836:	d1e4      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002838:	4a68      	ldr	r2, [pc, #416]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800283a:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 800283e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002840:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002844:	430b      	orrs	r3, r1
 8002846:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	061a      	lsls	r2, r3, #24
 800284c:	d52f      	bpl.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800284e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8002852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002856:	f000 8095 	beq.w	8002984 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800285a:	d815      	bhi.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x694>
 800285c:	b1eb      	cbz	r3, 800289a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	f000 8089 	beq.w	8002978 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = HAL_ERROR;
 8002866:	2601      	movs	r6, #1
      status |= ret;
 8002868:	ea44 0006 	orr.w	r0, r4, r6
 800286c:	b2c4      	uxtb	r4, r0
 800286e:	e01e      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002870:	2100      	movs	r1, #0
 8002872:	1d28      	adds	r0, r5, #4
 8002874:	f7ff fbf2 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002878:	4606      	mov	r6, r0
      break;
 800287a:	e7db      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800287c:	2102      	movs	r1, #2
 800287e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002882:	f7ff fc51 	bl	8002128 <RCCEx_PLL3_Config>
 8002886:	e7f7      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x684>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800288c:	d005      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 800288e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002892:	d002      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8002894:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002898:	d1e5      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x672>
    if(ret == HAL_OK)
 800289a:	2e00      	cmp	r6, #0
 800289c:	d1e4      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800289e:	4a4f      	ldr	r2, [pc, #316]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80028a0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 80028a4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80028a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028aa:	430b      	orrs	r3, r1
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80028ae:	682b      	ldr	r3, [r5, #0]
 80028b0:	071b      	lsls	r3, r3, #28
 80028b2:	d50b      	bpl.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80028b4:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 80028b8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80028bc:	d168      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028be:	2102      	movs	r1, #2
 80028c0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80028c4:	f7ff fc30 	bl	8002128 <RCCEx_PLL3_Config>
 80028c8:	4304      	orrs	r4, r0
 80028ca:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	06df      	lsls	r7, r3, #27
 80028d0:	d50b      	bpl.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80028d2:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80028d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80028da:	d160      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80028dc:	2102      	movs	r1, #2
 80028de:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80028e2:	f7ff fc21 	bl	8002128 <RCCEx_PLL3_Config>
 80028e6:	4304      	orrs	r4, r0
 80028e8:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028ea:	682b      	ldr	r3, [r5, #0]
 80028ec:	0318      	lsls	r0, r3, #12
 80028ee:	d517      	bpl.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 80028f0:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80028f4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80028f8:	d058      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 80028fa:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80028fe:	d005      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x718>
 8002900:	2900      	cmp	r1, #0
 8002902:	d159      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002904:	1d28      	adds	r0, r5, #4
 8002906:	f7ff fba9 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800290a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800290c:	2e00      	cmp	r6, #0
 800290e:	d154      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002912:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8002916:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002918:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800291c:	430b      	orrs	r3, r1
 800291e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	0359      	lsls	r1, r3, #13
 8002924:	d519      	bpl.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch(PeriphClkInit->UsbClockSelection)
 8002926:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800292a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800292e:	d048      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002930:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002934:	d007      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8002936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800293a:	d149      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800293e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8002946:	2e00      	cmp	r6, #0
 8002948:	d143      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800294a:	4a24      	ldr	r2, [pc, #144]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 800294c:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8002950:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002952:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002956:	430b      	orrs	r3, r1
 8002958:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800295a:	682b      	ldr	r3, [r5, #0]
 800295c:	03da      	lsls	r2, r3, #15
 800295e:	d54d      	bpl.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x808>
    switch(PeriphClkInit->SdmmcClockSelection)
 8002960:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d03c      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296a:	f000 8099 	beq.w	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = HAL_ERROR;
 800296e:	2601      	movs	r6, #1
      status |= ret;
 8002970:	ea44 0006 	orr.w	r0, r4, r6
 8002974:	b2c4      	uxtb	r4, r0
 8002976:	e041      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002978:	2100      	movs	r1, #0
 800297a:	1d28      	adds	r0, r5, #4
 800297c:	f7ff fb6e 	bl	800205c <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002980:	4606      	mov	r6, r0
      break;
 8002982:	e78a      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002984:	2102      	movs	r1, #2
 8002986:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800298a:	f7ff fbcd 	bl	8002128 <RCCEx_PLL3_Config>
 800298e:	e7f7      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8002992:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002994:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002998:	430b      	orrs	r3, r1
 800299a:	6553      	str	r3, [r2, #84]	; 0x54
 800299c:	e796      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800299e:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80029a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a6:	430b      	orrs	r3, r1
 80029a8:	6593      	str	r3, [r2, #88]	; 0x58
 80029aa:	e79e      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80029ac:	2102      	movs	r1, #2
 80029ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80029b2:	f7ff fbb9 	bl	8002128 <RCCEx_PLL3_Config>
 80029b6:	e7a8      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = HAL_ERROR;
 80029b8:	2601      	movs	r6, #1
      status |= ret;
 80029ba:	ea44 0006 	orr.w	r0, r4, r6
 80029be:	b2c4      	uxtb	r4, r0
 80029c0:	e7ae      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029c2:	2101      	movs	r1, #1
 80029c4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80029c8:	f7ff fbae 	bl	8002128 <RCCEx_PLL3_Config>
 80029cc:	4606      	mov	r6, r0
      break;
 80029ce:	e7ba      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x752>
      ret = HAL_ERROR;
 80029d0:	2601      	movs	r6, #1
      status |= ret;
 80029d2:	ea44 0006 	orr.w	r0, r4, r6
 80029d6:	b2c4      	uxtb	r4, r0
 80029d8:	e7bf      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x766>
 80029da:	bf00      	nop
 80029dc:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e0:	4a3b      	ldr	r2, [pc, #236]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80029e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80029ea:	2e00      	cmp	r6, #0
 80029ec:	d1c0      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80029ee:	4a38      	ldr	r2, [pc, #224]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 80029f0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80029f2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80029f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f8:	430b      	orrs	r3, r1
 80029fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	d506      	bpl.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002a02:	2102      	movs	r1, #2
 8002a04:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002a08:	f7ff fb8e 	bl	8002128 <RCCEx_PLL3_Config>
 8002a0c:	4304      	orrs	r4, r0
 8002a0e:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	039f      	lsls	r7, r3, #14
 8002a14:	d50e      	bpl.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x840>
    switch(PeriphClkInit->RngClockSelection)
 8002a16:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8002a18:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002a1c:	d051      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8002a1e:	d845      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002a20:	2900      	cmp	r1, #0
 8002a22:	d149      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    if(ret == HAL_OK)
 8002a24:	2e00      	cmp	r6, #0
 8002a26:	d148      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a28:	4829      	ldr	r0, [pc, #164]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a2a:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002a2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a30:	430a      	orrs	r2, r1
 8002a32:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a34:	02de      	lsls	r6, r3, #11
 8002a36:	d506      	bpl.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a38:	4925      	ldr	r1, [pc, #148]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a3a:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8002a3c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002a3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002a42:	4302      	orrs	r2, r0
 8002a44:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002a46:	00d8      	lsls	r0, r3, #3
 8002a48:	d507      	bpl.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002a4a:	4921      	ldr	r1, [pc, #132]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a4c:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8002a50:	690a      	ldr	r2, [r1, #16]
 8002a52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a56:	4302      	orrs	r2, r0
 8002a58:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a5a:	0299      	lsls	r1, r3, #10
 8002a5c:	d506      	bpl.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a5e:	491c      	ldr	r1, [pc, #112]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a60:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8002a62:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8002a64:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002a68:	4302      	orrs	r2, r0
 8002a6a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002a6c:	005a      	lsls	r2, r3, #1
 8002a6e:	d509      	bpl.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a70:	4a17      	ldr	r2, [pc, #92]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a72:	6911      	ldr	r1, [r2, #16]
 8002a74:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002a78:	6111      	str	r1, [r2, #16]
 8002a7a:	6911      	ldr	r1, [r2, #16]
 8002a7c:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8002a80:	4301      	orrs	r1, r0
 8002a82:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da06      	bge.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8002a88:	4a11      	ldr	r2, [pc, #68]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002a8a:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8002a8c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002a8e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002a92:	430b      	orrs	r3, r1
 8002a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a96:	1c20      	adds	r0, r4, #0
 8002a98:	bf18      	it	ne
 8002a9a:	2001      	movne	r0, #1
}
 8002a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002aa0:	2102      	movs	r1, #2
 8002aa2:	1d28      	adds	r0, r5, #4
 8002aa4:	f7ff fada 	bl	800205c <RCCEx_PLL2_Config>
 8002aa8:	4606      	mov	r6, r0
      break;
 8002aaa:	e79e      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    switch(PeriphClkInit->RngClockSelection)
 8002aac:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002ab0:	d0b8      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8002ab2:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002ab6:	d0b5      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8002ab8:	2601      	movs	r6, #1
      status |= ret;
 8002aba:	ea44 0006 	orr.w	r0, r4, r6
 8002abe:	b2c4      	uxtb	r4, r0
 8002ac0:	e7b8      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac2:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8002ac4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002ac6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002aca:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8002acc:	e7aa      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400

08002ad4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8002ad4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8002ad6:	f7ff fa7b 	bl	8001fd0 <HAL_RCC_GetHCLKFreq>
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002adc:	2210      	movs	r2, #16
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	fab2 f282 	clz	r2, r2
 8002ae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aec:	40d3      	lsrs	r3, r2
 8002aee:	4a03      	ldr	r2, [pc, #12]	; (8002afc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
}
 8002af2:	40d8      	lsrs	r0, r3
 8002af4:	bd08      	pop	{r3, pc}
 8002af6:	bf00      	nop
 8002af8:	58024400 	.word	0x58024400
 8002afc:	080050be 	.word	0x080050be

08002b00 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8002b00:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b02:	4c4a      	ldr	r4, [pc, #296]	; (8002c2c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8002b04:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8002c30 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8002b08:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002b0a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002b0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002b0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8002b10:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8002b14:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002b18:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002b1c:	4353      	muls	r3, r2
 8002b1e:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b22:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8002b26:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8002b28:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002b2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8002b30:	d002      	beq.n	8002b38 <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 8002b32:	d30e      	bcc.n	8002b52 <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d068      	beq.n	8002c0a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002b38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b3a:	4a3e      	ldr	r2, [pc, #248]	; (8002c34 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 8002b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b40:	ee07 3a10 	vmov	s14, r3
 8002b44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b48:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002b4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b50:	e067      	b.n	8002c22 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	4a38      	ldr	r2, [pc, #224]	; (8002c38 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 8002b56:	f013 0f20 	tst.w	r3, #32
 8002b5a:	d042      	beq.n	8002be2 <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b5c:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002b5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b60:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b68:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002b6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8002b6e:	ee07 2a10 	vmov	s14, r2
 8002b72:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002b76:	ee07 3a10 	vmov	s14, r3
 8002b7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b7e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b86:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8002b8a:	4a28      	ldr	r2, [pc, #160]	; (8002c2c <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8002b8c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002b8e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002b92:	3301      	adds	r3, #1
 8002b94:	ee07 3a10 	vmov	s14, r3
 8002b98:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002b9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ba0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002ba4:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8002ba8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002baa:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002bae:	3301      	adds	r3, #1
 8002bb0:	ee07 3a10 	vmov	s14, r3
 8002bb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bbc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002bc0:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8002bc4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002bc6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002bca:	3301      	adds	r3, #1
 8002bcc:	ee07 3a10 	vmov	s14, r3
 8002bd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bd8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002bdc:	edc0 6a02 	vstr	s13, [r0, #8]
 8002be0:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be8:	ee07 3a10 	vmov	s14, r3
 8002bec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002bf0:	fbb2 f3f1 	udiv	r3, r2, r1
 8002bf4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c04:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8002c08:	e7bf      	b.n	8002b8a <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c0c:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 8002c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c12:	ee07 3a10 	vmov	s14, r3
 8002c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c1a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8002c22:	fbb2 f2f1 	udiv	r2, r2, r1
 8002c26:	ee07 2a90 	vmov	s15, r2
 8002c2a:	e7e9      	b.n	8002c00 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	39000000 	.word	0x39000000
 8002c34:	003d0900 	.word	0x003d0900
 8002c38:	03d09000 	.word	0x03d09000
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8002c40:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c42:	4c4a      	ldr	r4, [pc, #296]	; (8002d6c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8002c44:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8002d70 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8002c48:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002c4a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002c4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8002c50:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c58:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002c5c:	4353      	muls	r3, r2
 8002c5e:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c62:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8002c66:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8002c68:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002c6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8002c70:	d002      	beq.n	8002c78 <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 8002c72:	d30e      	bcc.n	8002c92 <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d068      	beq.n	8002d4a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002c78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c7a:	4a3e      	ldr	r2, [pc, #248]	; (8002d74 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8002c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c80:	ee07 3a10 	vmov	s14, r3
 8002c84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c88:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c90:	e067      	b.n	8002d62 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8002c96:	f013 0f20 	tst.w	r3, #32
 8002c9a:	d042      	beq.n	8002d22 <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c9c:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002c9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ca0:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ca8:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002caa:	fbb2 f2f1 	udiv	r2, r2, r1
 8002cae:	ee07 2a10 	vmov	s14, r2
 8002cb2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002cb6:	ee07 3a10 	vmov	s14, r3
 8002cba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cbe:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cc6:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8002cca:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8002ccc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cce:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	ee07 3a10 	vmov	s14, r3
 8002cd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ce0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002ce4:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8002ce8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002cea:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002cee:	3301      	adds	r3, #1
 8002cf0:	ee07 3a10 	vmov	s14, r3
 8002cf4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002cf8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cfc:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002d00:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8002d04:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d06:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	ee07 3a10 	vmov	s14, r3
 8002d10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002d18:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002d1c:	edc0 6a02 	vstr	s13, [r0, #8]
 8002d20:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d28:	ee07 3a10 	vmov	s14, r3
 8002d2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d30:	fbb2 f3f1 	udiv	r3, r2, r1
 8002d34:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002d38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d3c:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d44:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8002d48:	e7bf      	b.n	8002cca <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d4c:	4a0b      	ldr	r2, [pc, #44]	; (8002d7c <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8002d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d52:	ee07 3a10 	vmov	s14, r3
 8002d56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002d5a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8002d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8002d62:	fbb2 f2f1 	udiv	r2, r2, r1
 8002d66:	ee07 2a90 	vmov	s15, r2
 8002d6a:	e7e9      	b.n	8002d40 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	39000000 	.word	0x39000000
 8002d74:	003d0900 	.word	0x003d0900
 8002d78:	03d09000 	.word	0x03d09000
 8002d7c:	007a1200 	.word	0x007a1200

08002d80 <HAL_RCCEx_GetD1SysClockFreq>:
{
 8002d80:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8002d82:	f7fe ffaf 	bl	8001ce4 <HAL_RCC_GetSysClockFreq>
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8002d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	fa92 f2a2 	rbit	r2, r2
 8002d92:	fab2 f282 	clz	r2, r2
 8002d96:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d9a:	40d3      	lsrs	r3, r2
 8002d9c:	4a03      	ldr	r2, [pc, #12]	; (8002dac <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	40d8      	lsrs	r0, r3
 8002da2:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8002da4:	6018      	str	r0, [r3, #0]
}
 8002da6:	bd08      	pop	{r3, pc}
 8002da8:	58024400 	.word	0x58024400
 8002dac:	080050be 	.word	0x080050be
 8002db0:	20000118 	.word	0x20000118

08002db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002db8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  assert_param(IS_UART_PRESCALER(huart->Init.Prescaler));
  assert_param(IS_UART_FIFO_MODE_STATE(huart->Init.FIFOMode));
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002dba:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if(UART_INSTANCE_LOWPOWER(huart))
 8002dbc:	6805      	ldr	r5, [r0, #0]
{
 8002dbe:	b087      	sub	sp, #28
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002dc0:	68a3      	ldr	r3, [r4, #8]
 8002dc2:	6922      	ldr	r2, [r4, #16]
 8002dc4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dc6:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dc8:	69c0      	ldr	r0, [r0, #28]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	6962      	ldr	r2, [r4, #20]
 8002dce:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dd0:	4ab3      	ldr	r2, [pc, #716]	; (80030a0 <UART_SetConfig+0x2ec>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002dd2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dd4:	4032      	ands	r2, r6
 8002dd6:	4313      	orrs	r3, r2

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd8:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002dda:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ddc:	686b      	ldr	r3, [r5, #4]
 8002dde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002de2:	4313      	orrs	r3, r2
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART)
   * - set TXFTCFG bit according to husart->Init.TXFIFOThreshold value
   * - set RXFTCFG bit according to husart->Init.RXFIFOThreshold value */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002de6:	606b      	str	r3, [r5, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	4bae      	ldr	r3, [pc, #696]	; (80030a4 <UART_SetConfig+0x2f0>)
 8002dea:	429d      	cmp	r5, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dec:	bf1c      	itt	ne
 8002dee:	6a23      	ldrne	r3, [r4, #32]
 8002df0:	431a      	orrne	r2, r3
  }

  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002df2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  {
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002df6:	bf02      	ittt	eq
 8002df8:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 8002dfa:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 8002dfc:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

/*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
   * - UART Clock Prescaler : set PRESCALER according to huart->Init.Prescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002dfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 8002e00:	bf08      	it	eq
 8002e02:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e04:	68ab      	ldr	r3, [r5, #8]
 8002e06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 8002e12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002e14:	f023 030f 	bic.w	r3, r3, #15
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	62eb      	str	r3, [r5, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e1c:	4ba2      	ldr	r3, [pc, #648]	; (80030a8 <UART_SetConfig+0x2f4>)
 8002e1e:	429d      	cmp	r5, r3
 8002e20:	d11c      	bne.n	8002e5c <UART_SetConfig+0xa8>
 8002e22:	4ba2      	ldr	r3, [pc, #648]	; (80030ac <UART_SetConfig+0x2f8>)
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2a:	2b28      	cmp	r3, #40	; 0x28
 8002e2c:	f200 825e 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002e30:	4a9f      	ldr	r2, [pc, #636]	; (80030b0 <UART_SetConfig+0x2fc>)
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e32:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002e36:	5cd3      	ldrb	r3, [r2, r3]
 8002e38:	f040 81e6 	bne.w	8003208 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	f000 81ba 	beq.w	80031b6 <UART_SetConfig+0x402>
 8002e42:	f200 816e 	bhi.w	8003122 <UART_SetConfig+0x36e>
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f000 8197 	beq.w	800317a <UART_SetConfig+0x3c6>
 8002e4c:	f0c0 817d 	bcc.w	800314a <UART_SetConfig+0x396>
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	f000 8195 	beq.w	8003180 <UART_SetConfig+0x3cc>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 8002e58:	2200      	movs	r2, #0
 8002e5a:	e186      	b.n	800316a <UART_SetConfig+0x3b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e5c:	4b95      	ldr	r3, [pc, #596]	; (80030b4 <UART_SetConfig+0x300>)
 8002e5e:	429d      	cmp	r5, r3
 8002e60:	d108      	bne.n	8002e74 <UART_SetConfig+0xc0>
 8002e62:	4b92      	ldr	r3, [pc, #584]	; (80030ac <UART_SetConfig+0x2f8>)
 8002e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	f200 823e 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002e70:	4a91      	ldr	r2, [pc, #580]	; (80030b8 <UART_SetConfig+0x304>)
 8002e72:	e7de      	b.n	8002e32 <UART_SetConfig+0x7e>
 8002e74:	4b91      	ldr	r3, [pc, #580]	; (80030bc <UART_SetConfig+0x308>)
 8002e76:	429d      	cmp	r5, r3
 8002e78:	d108      	bne.n	8002e8c <UART_SetConfig+0xd8>
 8002e7a:	4b8c      	ldr	r3, [pc, #560]	; (80030ac <UART_SetConfig+0x2f8>)
 8002e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	2b05      	cmp	r3, #5
 8002e84:	f200 8232 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002e88:	4a8d      	ldr	r2, [pc, #564]	; (80030c0 <UART_SetConfig+0x30c>)
 8002e8a:	e7d2      	b.n	8002e32 <UART_SetConfig+0x7e>
 8002e8c:	4b8d      	ldr	r3, [pc, #564]	; (80030c4 <UART_SetConfig+0x310>)
 8002e8e:	429d      	cmp	r5, r3
 8002e90:	d108      	bne.n	8002ea4 <UART_SetConfig+0xf0>
 8002e92:	4b86      	ldr	r3, [pc, #536]	; (80030ac <UART_SetConfig+0x2f8>)
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	f200 8226 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002ea0:	4a89      	ldr	r2, [pc, #548]	; (80030c8 <UART_SetConfig+0x314>)
 8002ea2:	e7c6      	b.n	8002e32 <UART_SetConfig+0x7e>
 8002ea4:	4b89      	ldr	r3, [pc, #548]	; (80030cc <UART_SetConfig+0x318>)
 8002ea6:	429d      	cmp	r5, r3
 8002ea8:	d108      	bne.n	8002ebc <UART_SetConfig+0x108>
 8002eaa:	4b80      	ldr	r3, [pc, #512]	; (80030ac <UART_SetConfig+0x2f8>)
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	f200 821a 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002eb8:	4a85      	ldr	r2, [pc, #532]	; (80030d0 <UART_SetConfig+0x31c>)
 8002eba:	e7ba      	b.n	8002e32 <UART_SetConfig+0x7e>
 8002ebc:	4b85      	ldr	r3, [pc, #532]	; (80030d4 <UART_SetConfig+0x320>)
 8002ebe:	429d      	cmp	r5, r3
 8002ec0:	d108      	bne.n	8002ed4 <UART_SetConfig+0x120>
 8002ec2:	4b7a      	ldr	r3, [pc, #488]	; (80030ac <UART_SetConfig+0x2f8>)
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eca:	2b28      	cmp	r3, #40	; 0x28
 8002ecc:	f200 820e 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002ed0:	4a81      	ldr	r2, [pc, #516]	; (80030d8 <UART_SetConfig+0x324>)
 8002ed2:	e7ae      	b.n	8002e32 <UART_SetConfig+0x7e>
 8002ed4:	4b81      	ldr	r3, [pc, #516]	; (80030dc <UART_SetConfig+0x328>)
 8002ed6:	429d      	cmp	r5, r3
 8002ed8:	d108      	bne.n	8002eec <UART_SetConfig+0x138>
 8002eda:	4b74      	ldr	r3, [pc, #464]	; (80030ac <UART_SetConfig+0x2f8>)
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	f200 8202 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002ee8:	4a7d      	ldr	r2, [pc, #500]	; (80030e0 <UART_SetConfig+0x32c>)
 8002eea:	e7a2      	b.n	8002e32 <UART_SetConfig+0x7e>
 8002eec:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <UART_SetConfig+0x330>)
 8002eee:	429d      	cmp	r5, r3
 8002ef0:	d108      	bne.n	8002f04 <UART_SetConfig+0x150>
 8002ef2:	4b6e      	ldr	r3, [pc, #440]	; (80030ac <UART_SetConfig+0x2f8>)
 8002ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	f200 81f6 	bhi.w	80032ec <UART_SetConfig+0x538>
 8002f00:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <UART_SetConfig+0x334>)
 8002f02:	e796      	b.n	8002e32 <UART_SetConfig+0x7e>
 8002f04:	4b67      	ldr	r3, [pc, #412]	; (80030a4 <UART_SetConfig+0x2f0>)
 8002f06:	429d      	cmp	r5, r3
 8002f08:	f040 81f0 	bne.w	80032ec <UART_SetConfig+0x538>
 8002f0c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002f10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f12:	f002 0207 	and.w	r2, r2, #7
 8002f16:	2a05      	cmp	r2, #5
 8002f18:	d901      	bls.n	8002f1e <UART_SetConfig+0x16a>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
      break;
    }
  }

  return ret;
 8002f1c:	e080      	b.n	8003020 <UART_SetConfig+0x26c>
 8002f1e:	4973      	ldr	r1, [pc, #460]	; (80030ec <UART_SetConfig+0x338>)
 8002f20:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 8002f22:	2d08      	cmp	r5, #8
 8002f24:	d02f      	beq.n	8002f86 <UART_SetConfig+0x1d2>
 8002f26:	d808      	bhi.n	8002f3a <UART_SetConfig+0x186>
 8002f28:	2d02      	cmp	r5, #2
 8002f2a:	d021      	beq.n	8002f70 <UART_SetConfig+0x1bc>
 8002f2c:	2d04      	cmp	r5, #4
 8002f2e:	d1f4      	bne.n	8002f1a <UART_SetConfig+0x166>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002f30:	4668      	mov	r0, sp
 8002f32:	f7ff fde5 	bl	8002b00 <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 8002f36:	9801      	ldr	r0, [sp, #4]
      break;
 8002f38:	e01c      	b.n	8002f74 <UART_SetConfig+0x1c0>
    switch (clocksource)
 8002f3a:	2d20      	cmp	r5, #32
 8002f3c:	d005      	beq.n	8002f4a <UART_SetConfig+0x196>
 8002f3e:	2d40      	cmp	r5, #64	; 0x40
 8002f40:	d01c      	beq.n	8002f7c <UART_SetConfig+0x1c8>
 8002f42:	2d10      	cmp	r5, #16
 8002f44:	d1e9      	bne.n	8002f1a <UART_SetConfig+0x166>
      tmpreg =(uint32_t) CSI_VALUE;
 8002f46:	486a      	ldr	r0, [pc, #424]	; (80030f0 <UART_SetConfig+0x33c>)
 8002f48:	e001      	b.n	8002f4e <UART_SetConfig+0x19a>
      tmpreg = (uint32_t) LSE_VALUE;
 8002f4a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8002f4e:	6866      	ldr	r6, [r4, #4]
 8002f50:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8002f54:	4283      	cmp	r3, r0
 8002f56:	d8e0      	bhi.n	8002f1a <UART_SetConfig+0x166>
 8002f58:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 8002f5c:	d8dd      	bhi.n	8002f1a <UART_SetConfig+0x166>
        switch (clocksource)
 8002f5e:	2d08      	cmp	r5, #8
 8002f60:	d078      	beq.n	8003054 <UART_SetConfig+0x2a0>
 8002f62:	d81a      	bhi.n	8002f9a <UART_SetConfig+0x1e6>
 8002f64:	2d02      	cmp	r5, #2
 8002f66:	d038      	beq.n	8002fda <UART_SetConfig+0x226>
 8002f68:	2d04      	cmp	r5, #4
 8002f6a:	d05d      	beq.n	8003028 <UART_SetConfig+0x274>
          ret = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e04f      	b.n	8003010 <UART_SetConfig+0x25c>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8002f70:	f7ff fdb0 	bl	8002ad4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d1ea      	bne.n	8002f4e <UART_SetConfig+0x19a>
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f78:	2300      	movs	r3, #0
      break;
 8002f7a:	e051      	b.n	8003020 <UART_SetConfig+0x26c>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002f7c:	a803      	add	r0, sp, #12
 8002f7e:	f7ff fe5f 	bl	8002c40 <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8002f82:	9804      	ldr	r0, [sp, #16]
      break;
 8002f84:	e7f6      	b.n	8002f74 <UART_SetConfig+0x1c0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	485a      	ldr	r0, [pc, #360]	; (80030f4 <UART_SetConfig+0x340>)
 8002f8a:	f012 0f20 	tst.w	r2, #32
 8002f8e:	d0de      	beq.n	8002f4e <UART_SetConfig+0x19a>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002f96:	40d8      	lsrs	r0, r3
 8002f98:	e7d9      	b.n	8002f4e <UART_SetConfig+0x19a>
        switch (clocksource)
 8002f9a:	2d20      	cmp	r5, #32
 8002f9c:	f000 80b0 	beq.w	8003100 <UART_SetConfig+0x34c>
 8002fa0:	2d40      	cmp	r5, #64	; 0x40
 8002fa2:	d04c      	beq.n	800303e <UART_SetConfig+0x28a>
 8002fa4:	2d10      	cmp	r5, #16
 8002fa6:	d1e1      	bne.n	8002f6c <UART_SetConfig+0x1b8>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <UART_SetConfig+0x344>)
 8002faa:	2100      	movs	r1, #0
 8002fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fae:	4850      	ldr	r0, [pc, #320]	; (80030f0 <UART_SetConfig+0x33c>)
 8002fb0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f7fd f98f 	bl	80002d8 <__aeabi_uldivmod>
 8002fba:	4632      	mov	r2, r6
 8002fbc:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8002fc6:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8002fca:	0870      	lsrs	r0, r6, #1
 8002fcc:	eb18 0500 	adds.w	r5, r8, r0
 8002fd0:	f149 0600 	adc.w	r6, r9, #0
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	4631      	mov	r1, r6
 8002fd8:	e017      	b.n	800300a <UART_SetConfig+0x256>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002fda:	f7ff fd7b 	bl	8002ad4 <HAL_RCCEx_GetD3PCLK1Freq>
 8002fde:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <UART_SetConfig+0x344>)
 8002fe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fe2:	6865      	ldr	r5, [r4, #4]
 8002fe4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002fe8:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002fea:	2100      	movs	r1, #0
 8002fec:	f7fd f974 	bl	80002d8 <__aeabi_uldivmod>
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	020f      	lsls	r7, r1, #8
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	0206      	lsls	r6, r0, #8
 8002ff8:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8002ffc:	0868      	lsrs	r0, r5, #1
 8002ffe:	eb16 0800 	adds.w	r8, r6, r0
 8003002:	f147 0900 	adc.w	r9, r7, #0
 8003006:	4640      	mov	r0, r8
 8003008:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800300a:	f7fd f965 	bl	80002d8 <__aeabi_uldivmod>
          break;
 800300e:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8003010:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003014:	4a39      	ldr	r2, [pc, #228]	; (80030fc <UART_SetConfig+0x348>)
 8003016:	4291      	cmp	r1, r2
 8003018:	f63f af7f 	bhi.w	8002f1a <UART_SetConfig+0x166>
           huart->Instance->BRR = tmpreg;
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	60d0      	str	r0, [r2, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	b007      	add	sp, #28
 8003024:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003028:	4668      	mov	r0, sp
 800302a:	f7ff fd69 	bl	8002b00 <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800302e:	4b32      	ldr	r3, [pc, #200]	; (80030f8 <UART_SetConfig+0x344>)
 8003030:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003032:	6865      	ldr	r5, [r4, #4]
 8003034:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003038:	2300      	movs	r3, #0
 800303a:	9801      	ldr	r0, [sp, #4]
 800303c:	e7d5      	b.n	8002fea <UART_SetConfig+0x236>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800303e:	a803      	add	r0, sp, #12
 8003040:	f7ff fdfe 	bl	8002c40 <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003044:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <UART_SetConfig+0x344>)
 8003046:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003048:	6865      	ldr	r5, [r4, #4]
 800304a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800304e:	2300      	movs	r3, #0
 8003050:	9804      	ldr	r0, [sp, #16]
 8003052:	e7ca      	b.n	8002fea <UART_SetConfig+0x236>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003054:	4915      	ldr	r1, [pc, #84]	; (80030ac <UART_SetConfig+0x2f8>)
 8003056:	0877      	lsrs	r7, r6, #1
 8003058:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800305a:	680d      	ldr	r5, [r1, #0]
 800305c:	4b26      	ldr	r3, [pc, #152]	; (80030f8 <UART_SetConfig+0x344>)
 800305e:	f015 0520 	ands.w	r5, r5, #32
 8003062:	d017      	beq.n	8003094 <UART_SetConfig+0x2e0>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8003064:	6809      	ldr	r1, [r1, #0]
 8003066:	4823      	ldr	r0, [pc, #140]	; (80030f4 <UART_SetConfig+0x340>)
 8003068:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800306c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003070:	2300      	movs	r3, #0
 8003072:	40c8      	lsrs	r0, r1
 8003074:	2100      	movs	r1, #0
 8003076:	f7fd f92f 	bl	80002d8 <__aeabi_uldivmod>
 800307a:	4632      	mov	r2, r6
 800307c:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003080:	2300      	movs	r3, #0
 8003082:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003086:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800308a:	eb18 0007 	adds.w	r0, r8, r7
 800308e:	f149 0100 	adc.w	r1, r9, #0
 8003092:	e7ba      	b.n	800300a <UART_SetConfig+0x256>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003094:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003098:	2300      	movs	r3, #0
 800309a:	4816      	ldr	r0, [pc, #88]	; (80030f4 <UART_SetConfig+0x340>)
 800309c:	e7ea      	b.n	8003074 <UART_SetConfig+0x2c0>
 800309e:	bf00      	nop
 80030a0:	cfff69f3 	.word	0xcfff69f3
 80030a4:	58000c00 	.word	0x58000c00
 80030a8:	40011000 	.word	0x40011000
 80030ac:	58024400 	.word	0x58024400
 80030b0:	08005070 	.word	0x08005070
 80030b4:	40004400 	.word	0x40004400
 80030b8:	08005099 	.word	0x08005099
 80030bc:	40004800 	.word	0x40004800
 80030c0:	08005099 	.word	0x08005099
 80030c4:	40004c00 	.word	0x40004c00
 80030c8:	08005099 	.word	0x08005099
 80030cc:	40005000 	.word	0x40005000
 80030d0:	08005099 	.word	0x08005099
 80030d4:	40011400 	.word	0x40011400
 80030d8:	08005070 	.word	0x08005070
 80030dc:	40007800 	.word	0x40007800
 80030e0:	08005099 	.word	0x08005099
 80030e4:	40007c00 	.word	0x40007c00
 80030e8:	08005099 	.word	0x08005099
 80030ec:	0800509f 	.word	0x0800509f
 80030f0:	003d0900 	.word	0x003d0900
 80030f4:	03d09000 	.word	0x03d09000
 80030f8:	080050a6 	.word	0x080050a6
 80030fc:	000ffcff 	.word	0x000ffcff
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003100:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003102:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 8003106:	4b7c      	ldr	r3, [pc, #496]	; (80032f8 <UART_SetConfig+0x544>)
 8003108:	0870      	lsrs	r0, r6, #1
 800310a:	2100      	movs	r1, #0
 800310c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003110:	4632      	mov	r2, r6
 8003112:	f44f 7680 	mov.w	r6, #256	; 0x100
 8003116:	fbb5 f5f3 	udiv	r5, r5, r3
 800311a:	2300      	movs	r3, #0
 800311c:	fbe5 0106 	umlal	r0, r1, r5, r6
 8003120:	e773      	b.n	800300a <UART_SetConfig+0x256>
    switch (clocksource)
 8003122:	2b20      	cmp	r3, #32
 8003124:	d068      	beq.n	80031f8 <UART_SetConfig+0x444>
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d03b      	beq.n	80031a2 <UART_SetConfig+0x3ee>
 800312a:	2b10      	cmp	r3, #16
 800312c:	f47f ae93 	bne.w	8002e56 <UART_SetConfig+0xa2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003130:	4b71      	ldr	r3, [pc, #452]	; (80032f8 <UART_SetConfig+0x544>)
 8003132:	4a72      	ldr	r2, [pc, #456]	; (80032fc <UART_SetConfig+0x548>)
 8003134:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003138:	6860      	ldr	r0, [r4, #4]
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	0842      	lsrs	r2, r0, #1
 8003140:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003144:	fbb2 f2f0 	udiv	r2, r2, r0
 8003148:	e00d      	b.n	8003166 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800314a:	f7fe ff5b 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800314e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003150:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <UART_SetConfig+0x544>)
 8003152:	6863      	ldr	r3, [r4, #4]
 8003154:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003158:	fbb0 f0f2 	udiv	r0, r0, r2
 800315c:	085a      	lsrs	r2, r3, #1
 800315e:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003162:	fbb2 f2f3 	udiv	r2, r2, r3
 8003166:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 8003168:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 800316a:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800316e:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	60c2      	str	r2, [r0, #12]
 8003178:	e752      	b.n	8003020 <UART_SetConfig+0x26c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800317a:	f7fe ff59 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 800317e:	e7e6      	b.n	800314e <UART_SetConfig+0x39a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003180:	4668      	mov	r0, sp
 8003182:	f7ff fcbd 	bl	8002b00 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003186:	4b5c      	ldr	r3, [pc, #368]	; (80032f8 <UART_SetConfig+0x544>)
 8003188:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800318a:	6861      	ldr	r1, [r4, #4]
 800318c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8003190:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003192:	fbb3 f3f2 	udiv	r3, r3, r2
 8003196:	084a      	lsrs	r2, r1, #1
 8003198:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800319c:	fbb2 f2f1 	udiv	r2, r2, r1
 80031a0:	e7e1      	b.n	8003166 <UART_SetConfig+0x3b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80031a2:	a803      	add	r0, sp, #12
 80031a4:	f7ff fd4c 	bl	8002c40 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80031a8:	4b53      	ldr	r3, [pc, #332]	; (80032f8 <UART_SetConfig+0x544>)
 80031aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031ac:	6861      	ldr	r1, [r4, #4]
 80031ae:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80031b2:	9b04      	ldr	r3, [sp, #16]
 80031b4:	e7ed      	b.n	8003192 <UART_SetConfig+0x3de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b6:	4a52      	ldr	r2, [pc, #328]	; (8003300 <UART_SetConfig+0x54c>)
 80031b8:	4852      	ldr	r0, [pc, #328]	; (8003304 <UART_SetConfig+0x550>)
 80031ba:	6813      	ldr	r3, [r2, #0]
 80031bc:	6865      	ldr	r5, [r4, #4]
 80031be:	f013 0320 	ands.w	r3, r3, #32
 80031c2:	4e4d      	ldr	r6, [pc, #308]	; (80032f8 <UART_SetConfig+0x544>)
 80031c4:	d00d      	beq.n	80031e2 <UART_SetConfig+0x42e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80031cc:	40d0      	lsrs	r0, r2
 80031ce:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 80031d2:	fbb0 f0f2 	udiv	r0, r0, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80031d6:	086a      	lsrs	r2, r5, #1
 80031d8:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80031dc:	fbb2 f2f5 	udiv	r2, r2, r5
 80031e0:	e7c1      	b.n	8003166 <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80031e2:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 80031e6:	fbb0 f0f2 	udiv	r0, r0, r2
 80031ea:	086a      	lsrs	r2, r5, #1
 80031ec:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80031f0:	fbb2 f2f5 	udiv	r2, r2, r5
 80031f4:	b292      	uxth	r2, r2
 80031f6:	e7b8      	b.n	800316a <UART_SetConfig+0x3b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80031f8:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <UART_SetConfig+0x544>)
 80031fa:	6865      	ldr	r5, [r4, #4]
 80031fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003200:	fbb0 f0f3 	udiv	r0, r0, r3
 8003204:	b280      	uxth	r0, r0
 8003206:	e7e6      	b.n	80031d6 <UART_SetConfig+0x422>
    switch (clocksource)
 8003208:	2b08      	cmp	r3, #8
 800320a:	d046      	beq.n	800329a <UART_SetConfig+0x4e6>
 800320c:	d818      	bhi.n	8003240 <UART_SetConfig+0x48c>
 800320e:	2b01      	cmp	r3, #1
 8003210:	d035      	beq.n	800327e <UART_SetConfig+0x4ca>
 8003212:	d324      	bcc.n	800325e <UART_SetConfig+0x4aa>
 8003214:	2b04      	cmp	r3, #4
 8003216:	f47f ae80 	bne.w	8002f1a <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800321a:	4668      	mov	r0, sp
 800321c:	f7ff fc70 	bl	8002b00 <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8003220:	4b35      	ldr	r3, [pc, #212]	; (80032f8 <UART_SetConfig+0x544>)
 8003222:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003224:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003228:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800322c:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800322e:	fbb3 f3f0 	udiv	r3, r3, r0
 8003232:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003236:	fbb3 f3f2 	udiv	r3, r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	60cb      	str	r3, [r1, #12]
 800323e:	e69b      	b.n	8002f78 <UART_SetConfig+0x1c4>
    switch (clocksource)
 8003240:	2b20      	cmp	r3, #32
 8003242:	d04c      	beq.n	80032de <UART_SetConfig+0x52a>
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d01d      	beq.n	8003284 <UART_SetConfig+0x4d0>
 8003248:	2b10      	cmp	r3, #16
 800324a:	f47f ae66 	bne.w	8002f1a <UART_SetConfig+0x166>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <UART_SetConfig+0x544>)
 8003250:	6862      	ldr	r2, [r4, #4]
 8003252:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <UART_SetConfig+0x548>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003258:	fbb3 f3f1 	udiv	r3, r3, r1
 800325c:	e008      	b.n	8003270 <UART_SetConfig+0x4bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800325e:	f7fe fed1 	bl	8002004 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8003262:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003264:	4b24      	ldr	r3, [pc, #144]	; (80032f8 <UART_SetConfig+0x544>)
 8003266:	6862      	ldr	r2, [r4, #4]
 8003268:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800326c:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8003270:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8003274:	fbb3 f3f2 	udiv	r3, r3, r2
 8003278:	b29b      	uxth	r3, r3
 800327a:	60eb      	str	r3, [r5, #12]
 800327c:	e67c      	b.n	8002f78 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800327e:	f7fe fed7 	bl	8002030 <HAL_RCC_GetPCLK2Freq>
 8003282:	e7ee      	b.n	8003262 <UART_SetConfig+0x4ae>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003284:	a803      	add	r0, sp, #12
 8003286:	f7ff fcdb 	bl	8002c40 <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800328a:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <UART_SetConfig+0x544>)
 800328c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800328e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8003292:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8003296:	9b04      	ldr	r3, [sp, #16]
 8003298:	e7c9      	b.n	800322e <UART_SetConfig+0x47a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800329a:	4e19      	ldr	r6, [pc, #100]	; (8003300 <UART_SetConfig+0x54c>)
 800329c:	6860      	ldr	r0, [r4, #4]
 800329e:	6833      	ldr	r3, [r6, #0]
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <UART_SetConfig+0x550>)
 80032a2:	f013 0320 	ands.w	r3, r3, #32
 80032a6:	4c14      	ldr	r4, [pc, #80]	; (80032f8 <UART_SetConfig+0x544>)
 80032a8:	d00e      	beq.n	80032c8 <UART_SetConfig+0x514>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 80032aa:	6833      	ldr	r3, [r6, #0]
 80032ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80032b0:	40da      	lsrs	r2, r3
 80032b2:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 80032b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80032ba:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80032be:	fbb2 f2f0 	udiv	r2, r2, r0
 80032c2:	b292      	uxth	r2, r2
 80032c4:	60ea      	str	r2, [r5, #12]
 80032c6:	e657      	b.n	8002f78 <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80032c8:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 80032cc:	fbb2 f2f1 	udiv	r2, r2, r1
 80032d0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 80032d4:	fbb2 f2f0 	udiv	r2, r2, r0
 80032d8:	b292      	uxth	r2, r2
 80032da:	60ea      	str	r2, [r5, #12]
 80032dc:	e6a0      	b.n	8003020 <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80032de:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <UART_SetConfig+0x544>)
 80032e0:	6862      	ldr	r2, [r4, #4]
 80032e2:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	e7b5      	b.n	8003258 <UART_SetConfig+0x4a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80032f0:	f47f ae13 	bne.w	8002f1a <UART_SetConfig+0x166>
 80032f4:	e5af      	b.n	8002e56 <UART_SetConfig+0xa2>
 80032f6:	bf00      	nop
 80032f8:	080050a6 	.word	0x080050a6
 80032fc:	003d0900 	.word	0x003d0900
 8003300:	58024400 	.word	0x58024400
 8003304:	03d09000 	.word	0x03d09000

08003308 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003308:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800330a:	07da      	lsls	r2, r3, #31
{
 800330c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800330e:	d506      	bpl.n	800331e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003310:	6801      	ldr	r1, [r0, #0]
 8003312:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003314:	684a      	ldr	r2, [r1, #4]
 8003316:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800331a:	4322      	orrs	r2, r4
 800331c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800331e:	079c      	lsls	r4, r3, #30
 8003320:	d506      	bpl.n	8003330 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003322:	6801      	ldr	r1, [r0, #0]
 8003324:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003326:	684a      	ldr	r2, [r1, #4]
 8003328:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800332c:	4322      	orrs	r2, r4
 800332e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003330:	0759      	lsls	r1, r3, #29
 8003332:	d506      	bpl.n	8003342 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003334:	6801      	ldr	r1, [r0, #0]
 8003336:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003338:	684a      	ldr	r2, [r1, #4]
 800333a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800333e:	4322      	orrs	r2, r4
 8003340:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003342:	071a      	lsls	r2, r3, #28
 8003344:	d506      	bpl.n	8003354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003346:	6801      	ldr	r1, [r0, #0]
 8003348:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800334a:	684a      	ldr	r2, [r1, #4]
 800334c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003350:	4322      	orrs	r2, r4
 8003352:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003354:	06dc      	lsls	r4, r3, #27
 8003356:	d506      	bpl.n	8003366 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003358:	6801      	ldr	r1, [r0, #0]
 800335a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800335c:	688a      	ldr	r2, [r1, #8]
 800335e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003362:	4322      	orrs	r2, r4
 8003364:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003366:	0699      	lsls	r1, r3, #26
 8003368:	d506      	bpl.n	8003378 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336a:	6801      	ldr	r1, [r0, #0]
 800336c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800336e:	688a      	ldr	r2, [r1, #8]
 8003370:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003374:	4322      	orrs	r2, r4
 8003376:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003378:	065a      	lsls	r2, r3, #25
 800337a:	d510      	bpl.n	800339e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800337c:	6801      	ldr	r1, [r0, #0]
 800337e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8003380:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003382:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003386:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800338a:	ea42 0204 	orr.w	r2, r2, r4
 800338e:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003390:	d105      	bne.n	800339e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003392:	684a      	ldr	r2, [r1, #4]
 8003394:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003396:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800339a:	4322      	orrs	r2, r4
 800339c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800339e:	061b      	lsls	r3, r3, #24
 80033a0:	d506      	bpl.n	80033b0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033a2:	6802      	ldr	r2, [r0, #0]
 80033a4:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80033a6:	6853      	ldr	r3, [r2, #4]
 80033a8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6053      	str	r3, [r2, #4]
 80033b0:	bd10      	pop	{r4, pc}

080033b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80033b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b6:	9d06      	ldr	r5, [sp, #24]
 80033b8:	4604      	mov	r4, r0
 80033ba:	460f      	mov	r7, r1
 80033bc:	4616      	mov	r6, r2
 80033be:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c0:	6821      	ldr	r1, [r4, #0]
 80033c2:	69ca      	ldr	r2, [r1, #28]
 80033c4:	ea37 0302 	bics.w	r3, r7, r2
 80033c8:	bf0c      	ite	eq
 80033ca:	2201      	moveq	r2, #1
 80033cc:	2200      	movne	r2, #0
 80033ce:	42b2      	cmp	r2, r6
 80033d0:	d002      	beq.n	80033d8 <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80033d2:	2000      	movs	r0, #0
}
 80033d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80033d8:	1c6b      	adds	r3, r5, #1
 80033da:	d0f2      	beq.n	80033c2 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80033dc:	b99d      	cbnz	r5, 8003406 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033de:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80033e0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80033f2:	2320      	movs	r3, #32
 80033f4:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 80033f8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 80033fc:	2300      	movs	r3, #0
 80033fe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 8003402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003406:	f7fd f92f 	bl	8000668 <HAL_GetTick>
 800340a:	eba0 0008 	sub.w	r0, r0, r8
 800340e:	4285      	cmp	r5, r0
 8003410:	d2d6      	bcs.n	80033c0 <UART_WaitOnFlagUntilTimeout+0xe>
 8003412:	e7e4      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0x2c>

08003414 <UART_CheckIdleState>:
{
 8003414:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003416:	2600      	movs	r6, #0
{
 8003418:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800341c:	f7fd f924 	bl	8000668 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003420:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003422:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	071a      	lsls	r2, r3, #28
 8003428:	d417      	bmi.n	800345a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342a:	6823      	ldr	r3, [r4, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	075b      	lsls	r3, r3, #29
 8003430:	d50a      	bpl.n	8003448 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003432:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003436:	2200      	movs	r2, #0
 8003438:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800343c:	4620      	mov	r0, r4
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	462b      	mov	r3, r5
 8003442:	f7ff ffb6 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 8003446:	b9a0      	cbnz	r0, 8003472 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8003448:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800344a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800344c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8003450:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003454:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 8003458:	e00c      	b.n	8003474 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800345a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800345e:	4632      	mov	r2, r6
 8003460:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	4603      	mov	r3, r0
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff ffa2 	bl	80033b2 <UART_WaitOnFlagUntilTimeout>
 800346e:	2800      	cmp	r0, #0
 8003470:	d0db      	beq.n	800342a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003472:	2003      	movs	r0, #3
}
 8003474:	b002      	add	sp, #8
 8003476:	bd70      	pop	{r4, r5, r6, pc}

08003478 <HAL_UART_Init>:
{
 8003478:	b510      	push	{r4, lr}
  if(huart == NULL)
 800347a:	4604      	mov	r4, r0
 800347c:	b360      	cbz	r0, 80034d8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800347e:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8003482:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003486:	b91b      	cbnz	r3, 8003490 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003488:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800348c:	f001 fa94 	bl	80049b8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003490:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003492:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003494:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8003496:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034a2:	f7ff fc87 	bl	8002db4 <UART_SetConfig>
 80034a6:	2801      	cmp	r0, #1
 80034a8:	d016      	beq.n	80034d8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034ac:	b113      	cbz	r3, 80034b4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80034ae:	4620      	mov	r0, r4
 80034b0:	f7ff ff2a 	bl	8003308 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b4:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80034b6:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
}
 80034ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80034d2:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80034d4:	f7ff bf9e 	b.w	8003414 <UART_CheckIdleState>
}
 80034d8:	2001      	movs	r0, #1
 80034da:	bd10      	pop	{r4, pc}

080034dc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034dc:	b084      	sub	sp, #16
 80034de:	b538      	push	{r3, r4, r5, lr}
 80034e0:	ad05      	add	r5, sp, #20
 80034e2:	4604      	mov	r4, r0
 80034e4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d127      	bne.n	800353e <USB_CoreInit+0x62>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);		
 80034ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f4:	6383      	str	r3, [r0, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034f6:	68c3      	ldr	r3, [r0, #12]
 80034f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80034fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003500:	60c3      	str	r3, [r0, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003502:	68c3      	ldr	r3, [r0, #12]
 8003504:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003508:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 800350a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800350c:	2b01      	cmp	r3, #1
 800350e:	d103      	bne.n	8003518 <USB_CoreInit+0x3c>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003510:	68c3      	ldr	r3, [r0, #12]
 8003512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003516:	60c3      	str	r3, [r0, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8003518:	4620      	mov	r0, r4
 800351a:	f000 fbc1 	bl	8003ca0 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
  }
 
  if(cfg.dma_enable == ENABLE)
 800351e:	9b08      	ldr	r3, [sp, #32]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d107      	bne.n	8003534 <USB_CoreInit+0x58>
  {
    USBx->GAHBCFG |= (USB_OTG_GAHBCFG_HBSTLEN_1 | USB_OTG_GAHBCFG_HBSTLEN_2);
 8003524:	68a3      	ldr	r3, [r4, #8]
 8003526:	f043 030c 	orr.w	r3, r3, #12
 800352a:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800352c:	68a3      	ldr	r3, [r4, #8]
 800352e:	f043 0320 	orr.w	r3, r3, #32
 8003532:	60a3      	str	r3, [r4, #8]
  }  

  return HAL_OK;
}
 8003534:	2000      	movs	r0, #0
 8003536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800353a:	b004      	add	sp, #16
 800353c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800353e:	68c3      	ldr	r3, [r0, #12]
 8003540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003544:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8003546:	f000 fbab 	bl	8003ca0 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800354a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800354e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003550:	e7e5      	b.n	800351e <USB_CoreInit+0x42>

08003552 <USB_EnableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003552:	6883      	ldr	r3, [r0, #8]
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 800355a:	2000      	movs	r0, #0
 800355c:	4770      	bx	lr

0800355e <USB_DisableGlobalInt>:
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800355e:	6883      	ldr	r3, [r0, #8]
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6083      	str	r3, [r0, #8]
  return HAL_OK;
}
 8003566:	2000      	movs	r0, #0
 8003568:	4770      	bx	lr

0800356a <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 800356a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 800356c:	68c3      	ldr	r3, [r0, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 800356e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8003570:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003574:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8003576:	d108      	bne.n	800358a <USB_SetCurrentMode+0x20>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8003578:	68c3      	ldr	r3, [r0, #12]
 800357a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800357e:	60c3      	str	r3, [r0, #12]
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
  }
  HAL_Delay(50);
 8003580:	2032      	movs	r0, #50	; 0x32
 8003582:	f7fd f877 	bl	8000674 <HAL_Delay>
  
  return HAL_OK;
}
 8003586:	2000      	movs	r0, #0
 8003588:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 800358a:	2900      	cmp	r1, #0
 800358c:	d1f8      	bne.n	8003580 <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 800358e:	68c3      	ldr	r3, [r0, #12]
 8003590:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003594:	60c3      	str	r3, [r0, #12]
 8003596:	e7f3      	b.n	8003580 <USB_SetCurrentMode+0x16>

08003598 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003598:	b084      	sub	sp, #16
 800359a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800359e:	4604      	mov	r4, r0
 80035a0:	a807      	add	r0, sp, #28
 80035a2:	4688      	mov	r8, r1
 80035a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0;

  /*Activate VBUS Sensing B */
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80035a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035aa:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80035ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80035b2:	63a3      	str	r3, [r4, #56]	; 0x38
  
  if (cfg.vbus_sensing_enable == 0)
 80035b4:	b95e      	cbnz	r6, 80035ce <USB_DevInit+0x36>
  {
    /*Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~ USB_OTG_GCCFG_VBDEN;
 80035b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035bc:	63a3      	str	r3, [r4, #56]	; 0x38
    
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80035be:	6823      	ldr	r3, [r4, #0]
 80035c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c4:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80035c6:	6823      	ldr	r3, [r4, #0]
 80035c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035cc:	6023      	str	r3, [r4, #0]
  }
   
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0;
 80035ce:	2300      	movs	r3, #0

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035d0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0;
 80035d4:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80035d8:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80035dc:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 80035e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d158      	bne.n	8003698 <USB_DevInit+0x100>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80035e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80035e8:	b919      	cbnz	r1, 80035f2 <USB_DevInit+0x5a>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 80035ea:	4620      	mov	r0, r4
 80035ec:	f000 f89c 	bl	8003728 <USB_SetDevSpeed>
 80035f0:	e003      	b.n	80035fa <USB_DevInit+0x62>
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 80035f2:	4619      	mov	r1, r3
 80035f4:	4620      	mov	r0, r4
 80035f6:	f000 f897 	bl	8003728 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10); /* all Tx FIFOs */
 80035fa:	2110      	movs	r1, #16
 80035fc:	4620      	mov	r0, r4
 80035fe:	f000 f871 	bl	80036e4 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003602:	4620      	mov	r0, r4
 8003604:	f000 f880 	bl	8003708 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0;
 8003608:	2300      	movs	r3, #0
  USBx_DEVICE->DOEPMSK = 0;
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800360a:	f04f 32ff 	mov.w	r2, #4294967295
  
  for (i = 0; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 800360e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  USBx_DEVICE->DIEPMSK = 0;
 8003612:	612b      	str	r3, [r5, #16]
 8003614:	4619      	mov	r1, r3
  USBx_DEVICE->DOEPMSK = 0;
 8003616:	616b      	str	r3, [r5, #20]
    {
      USBx_INEP(i)->DIEPCTL = 0;
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0;
    USBx_INEP(i)->DIEPINT  = 0xFF;
 8003618:	f04f 0eff 	mov.w	lr, #255	; 0xff
  USBx_DEVICE->DAINT = 0xFFFFFFFF;
 800361c:	61aa      	str	r2, [r5, #24]
 800361e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DAINTMSK = 0;
 8003622:	61eb      	str	r3, [r5, #28]
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003624:	4543      	cmp	r3, r8
 8003626:	d139      	bne.n	800369c <USB_DevInit+0x104>
 8003628:	2100      	movs	r1, #0
 800362a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
  
  for (i = 0; i < cfg.dev_endpoints; i++)
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 800362e:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
    {
      USBx_OUTEP(i)->DOEPCTL = 0;
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0;
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 8003632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003636:	4608      	mov	r0, r1
  for (i = 0; i < cfg.dev_endpoints; i++)
 8003638:	428b      	cmp	r3, r1
 800363a:	d13d      	bne.n	80036b8 <USB_DevInit+0x120>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800363c:	692b      	ldr	r3, [r5, #16]
  
  if (cfg.dma_enable == 1)
 800363e:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003644:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1)
 8003646:	d106      	bne.n	8003656 <USB_DevInit+0xbe>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_8 | USB_OTG_DTHRCTL_RXTHRLEN_8);
 8003648:	4b23      	ldr	r3, [pc, #140]	; (80036d8 <USB_DevInit+0x140>)
 800364a:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN | 0x08000000);
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <USB_DevInit+0x144>)
 800364e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003650:	4313      	orrs	r3, r2
 8003652:	632b      	str	r3, [r5, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 8003654:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0;
 8003656:	2300      	movs	r3, #0
 8003658:	61a3      	str	r3, [r4, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFF;
 800365a:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800365e:	6163      	str	r3, [r4, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 8003660:	b91f      	cbnz	r7, 800366a <USB_DevInit+0xd2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 8003662:	69a3      	ldr	r3, [r4, #24]
 8003664:	f043 0310 	orr.w	r3, r3, #16
 8003668:	61a3      	str	r3, [r4, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 800366a:	69a2      	ldr	r2, [r4, #24]
 800366c:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <USB_DevInit+0x148>)
 800366e:	4313      	orrs	r3, r2
 8003670:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8003672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003674:	b11b      	cbz	r3, 800367e <USB_DevInit+0xe6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003676:	69a3      	ldr	r3, [r4, #24]
 8003678:	f043 0308 	orr.w	r3, r3, #8
 800367c:	61a3      	str	r3, [r4, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800367e:	2e01      	cmp	r6, #1
 8003680:	d105      	bne.n	800368e <USB_DevInit+0xf6>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003682:	69a3      	ldr	r3, [r4, #24]
 8003684:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	61a3      	str	r3, [r4, #24]
  }
  
  return HAL_OK;
}
 800368e:	2000      	movs	r0, #0
 8003690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003694:	b004      	add	sp, #16
 8003696:	4770      	bx	lr
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003698:	2103      	movs	r1, #3
 800369a:	e7a6      	b.n	80035ea <USB_DevInit+0x52>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800369c:	f8d2 c000 	ldr.w	ip, [r2]
 80036a0:	f1bc 0f00 	cmp.w	ip, #0
 80036a4:	da06      	bge.n	80036b4 <USB_DevInit+0x11c>
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80036a6:	6010      	str	r0, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0;
 80036a8:	6111      	str	r1, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80036aa:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFF;
 80036ac:	f8c2 e008 	str.w	lr, [r2, #8]
 80036b0:	3220      	adds	r2, #32
 80036b2:	e7b7      	b.n	8003624 <USB_DevInit+0x8c>
      USBx_INEP(i)->DIEPCTL = 0;
 80036b4:	6011      	str	r1, [r2, #0]
 80036b6:	e7f7      	b.n	80036a8 <USB_DevInit+0x110>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036b8:	f8d2 8000 	ldr.w	r8, [r2]
 80036bc:	f1b8 0f00 	cmp.w	r8, #0
 80036c0:	da07      	bge.n	80036d2 <USB_DevInit+0x13a>
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 80036c2:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0;
 80036c6:	6110      	str	r0, [r2, #16]
  for (i = 0; i < cfg.dev_endpoints; i++)
 80036c8:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFF;
 80036ca:	f8c2 c008 	str.w	ip, [r2, #8]
 80036ce:	3220      	adds	r2, #32
 80036d0:	e7b2      	b.n	8003638 <USB_DevInit+0xa0>
      USBx_OUTEP(i)->DOEPCTL = 0;
 80036d2:	6010      	str	r0, [r2, #0]
 80036d4:	e7f7      	b.n	80036c6 <USB_DevInit+0x12e>
 80036d6:	bf00      	nop
 80036d8:	02000400 	.word	0x02000400
 80036dc:	08010003 	.word	0x08010003
 80036e0:	803c3800 	.word	0x803c3800

080036e4 <USB_FlushTxFifo>:
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
  uint32_t count = 0;
 
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 80036e4:	0189      	lsls	r1, r1, #6
 80036e6:	4a07      	ldr	r2, [pc, #28]	; (8003704 <USB_FlushTxFifo+0x20>)
 80036e8:	f041 0120 	orr.w	r1, r1, #32
 80036ec:	6101      	str	r1, [r0, #16]
 
  do
  {
    if (++count > 200000)
 80036ee:	3a01      	subs	r2, #1
 80036f0:	d005      	beq.n	80036fe <USB_FlushTxFifo+0x1a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036f2:	6903      	ldr	r3, [r0, #16]
 80036f4:	f013 0320 	ands.w	r3, r3, #32
 80036f8:	d1f9      	bne.n	80036ee <USB_FlushTxFifo+0xa>
  
  return HAL_OK;
 80036fa:	4618      	mov	r0, r3
 80036fc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036fe:	2003      	movs	r0, #3
}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	00030d41 	.word	0x00030d41

08003708 <USB_FlushRxFifo>:
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0;
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003708:	2310      	movs	r3, #16
 800370a:	4a06      	ldr	r2, [pc, #24]	; (8003724 <USB_FlushRxFifo+0x1c>)
 800370c:	6103      	str	r3, [r0, #16]
  
  do
  {
    if (++count > 200000)
 800370e:	3a01      	subs	r2, #1
 8003710:	d005      	beq.n	800371e <USB_FlushRxFifo+0x16>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003712:	6903      	ldr	r3, [r0, #16]
 8003714:	f013 0310 	ands.w	r3, r3, #16
 8003718:	d1f9      	bne.n	800370e <USB_FlushRxFifo+0x6>
  
  return HAL_OK;
 800371a:	4618      	mov	r0, r3
 800371c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800371e:	2003      	movs	r0, #3
}
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	00030d41 	.word	0x00030d41

08003728 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
  USBx_DEVICE->DCFG |= speed;
 8003728:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800372c:	4319      	orrs	r1, r3
 800372e:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  return HAL_OK;
}
 8003732:	2000      	movs	r0, #0
 8003734:	4770      	bx	lr

08003736 <USB_GetDevSpeed>:
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
  uint8_t speed = 0;
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003736:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 800373a:	f8d0 0808 	ldr.w	r0, [r0, #2056]	; 0x808
 800373e:	f010 0006 	ands.w	r0, r0, #6
 8003742:	d012      	beq.n	800376a <USB_GetDevSpeed+0x34>
  {
    speed = USB_OTG_SPEED_HIGH;
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003744:	6893      	ldr	r3, [r2, #8]
 8003746:	f003 0306 	and.w	r3, r3, #6
 800374a:	2b02      	cmp	r3, #2
 800374c:	d00c      	beq.n	8003768 <USB_GetDevSpeed+0x32>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800374e:	6893      	ldr	r3, [r2, #8]
 8003750:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003754:	2b06      	cmp	r3, #6
 8003756:	d007      	beq.n	8003768 <USB_GetDevSpeed+0x32>
  {
    speed = USB_OTG_SPEED_FULL;
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003758:	6893      	ldr	r3, [r2, #8]
 800375a:	f003 0306 	and.w	r3, r3, #6
 800375e:	2b04      	cmp	r3, #4
  {
    speed = USB_OTG_SPEED_LOW;
 8003760:	bf14      	ite	ne
 8003762:	2000      	movne	r0, #0
 8003764:	2002      	moveq	r0, #2
 8003766:	4770      	bx	lr
    speed = USB_OTG_SPEED_FULL;
 8003768:	2003      	movs	r0, #3
  }
  
  return speed;
}
 800376a:	4770      	bx	lr

0800376c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800376c:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1)
 800376e:	784b      	ldrb	r3, [r1, #1]
 8003770:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8003774:	780c      	ldrb	r4, [r1, #0]
 8003776:	2b01      	cmp	r3, #1
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8003778:	69d5      	ldr	r5, [r2, #28]
  if (ep->is_in == 1)
 800377a:	d11b      	bne.n	80037b4 <USB_ActivateEndpoint+0x48>
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 800377c:	40a3      	lsls	r3, r4
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 800377e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num)));
 8003782:	b29b      	uxth	r3, r3
 8003784:	432b      	orrs	r3, r5
 8003786:	61d3      	str	r3, [r2, #28]
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0)
 8003788:	eb00 1344 	add.w	r3, r0, r4, lsl #5
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	0412      	lsls	r2, r2, #16
 8003790:	d40e      	bmi.n	80037b0 <USB_ActivateEndpoint+0x44>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 8003792:	688a      	ldr	r2, [r1, #8]
 8003794:	78c8      	ldrb	r0, [r1, #3]
 8003796:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800379a:	681d      	ldr	r5, [r3, #0]
 800379c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a4:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
 80037a8:	ea40 5084 	orr.w	r0, r0, r4, lsl #22
 80037ac:	4328      	orrs	r0, r5
 80037ae:	6018      	str	r0, [r3, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
}
 80037b0:	2000      	movs	r0, #0
 80037b2:	bd30      	pop	{r4, r5, pc}
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80037b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80037b8:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80037bc:	40a3      	lsls	r3, r4
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80037be:	eb00 1044 	add.w	r0, r0, r4, lsl #5
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16);
 80037c2:	432b      	orrs	r3, r5
 80037c4:	61d3      	str	r3, [r2, #28]
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0)
 80037c6:	6803      	ldr	r3, [r0, #0]
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	d4f1      	bmi.n	80037b0 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18 ) |\
 80037cc:	688b      	ldr	r3, [r1, #8]
 80037ce:	78c9      	ldrb	r1, [r1, #3]
 80037d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037d4:	6802      	ldr	r2, [r0, #0]
 80037d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80037e2:	4313      	orrs	r3, r2
 80037e4:	6003      	str	r3, [r0, #0]
 80037e6:	e7e3      	b.n	80037b0 <USB_ActivateEndpoint+0x44>

080037e8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037e8:	b510      	push	{r4, lr}
  /* Read DEPCTLn register */
  if (ep->is_in == 1)
 80037ea:	784b      	ldrb	r3, [r1, #1]
 80037ec:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80037f0:	7809      	ldrb	r1, [r1, #0]
 80037f2:	2b01      	cmp	r3, #1
  {
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 80037f4:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (ep->is_in == 1)
 80037f6:	d111      	bne.n	800381c <USB_DeactivateEndpoint+0x34>
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 80037f8:	408b      	lsls	r3, r1
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 80037fa:	f500 6010 	add.w	r0, r0, #2304	; 0x900
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 80037fe:	b29b      	uxth	r3, r3
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8003800:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));
 8003804:	43db      	mvns	r3, r3
 8003806:	401c      	ands	r4, r3
 8003808:	63d4      	str	r4, [r2, #60]	; 0x3c
   USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1 << (ep->num))));   
 800380a:	69d4      	ldr	r4, [r2, #28]
 800380c:	4023      	ands	r3, r4
 800380e:	61d3      	str	r3, [r2, #28]
   USBx_INEP(ep->num)->DIEPCTL &= ~ USB_OTG_DIEPCTL_USBAEP;   
 8003810:	6803      	ldr	r3, [r0, #0]
 8003812:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003816:	6003      	str	r3, [r0, #0]
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
  }
  return HAL_OK;
}
 8003818:	2000      	movs	r0, #0
 800381a:	bd10      	pop	{r4, pc}
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800381c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003820:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 8003824:	408b      	lsls	r3, r1
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003826:	eb00 1041 	add.w	r0, r0, r1, lsl #5
     USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));
 800382a:	43db      	mvns	r3, r3
 800382c:	401c      	ands	r4, r3
 800382e:	63d4      	str	r4, [r2, #60]	; 0x3c
     USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1 << (ep->num)) << 16));     
 8003830:	69d4      	ldr	r4, [r2, #28]
 8003832:	4023      	ands	r3, r4
 8003834:	61d3      	str	r3, [r2, #28]
     USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;      
 8003836:	6803      	ldr	r3, [r0, #0]
 8003838:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800383c:	6003      	str	r3, [r0, #0]
 800383e:	e7eb      	b.n	8003818 <USB_DeactivateEndpoint+0x30>

08003840 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t pktcnt = 0;
  
  /* IN endpoint */
  if (ep->is_in == 1)
 8003842:	784b      	ldrb	r3, [r1, #1]
 8003844:	780c      	ldrb	r4, [r1, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	694b      	ldr	r3, [r1, #20]
 800384a:	d177      	bne.n	800393c <USB_EPStartXfer+0xfc>
 800384c:	2620      	movs	r6, #32
 800384e:	f500 6510 	add.w	r5, r0, #2304	; 0x900
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003852:	fb16 5404 	smlabb	r4, r6, r4, r5
 8003856:	6926      	ldr	r6, [r4, #16]
    if (ep->xfer_len == 0)
 8003858:	2b00      	cmp	r3, #0
 800385a:	d138      	bne.n	80038ce <USB_EPStartXfer+0x8e>
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800385c:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003860:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003864:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003866:	6926      	ldr	r6, [r4, #16]
 8003868:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 800386c:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800386e:	6926      	ldr	r6, [r4, #16]
 8003870:	0cf6      	lsrs	r6, r6, #19
 8003872:	04f6      	lsls	r6, r6, #19
 8003874:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
      }       
    }

    if (dma == 1)
 8003876:	2a01      	cmp	r2, #1
 8003878:	d150      	bne.n	800391c <USB_EPStartXfer+0xdc>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800387a:	780c      	ldrb	r4, [r1, #0]
 800387c:	690e      	ldr	r6, [r1, #16]
 800387e:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8003882:	6166      	str	r6, [r4, #20]
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003884:	78ce      	ldrb	r6, [r1, #3]
 8003886:	2e01      	cmp	r6, #1
 8003888:	d10f      	bne.n	80038aa <USB_EPStartXfer+0x6a>
    {
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800388a:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 800388e:	780f      	ldrb	r7, [r1, #0]
 8003890:	f414 7f80 	tst.w	r4, #256	; 0x100
 8003894:	f04f 0420 	mov.w	r4, #32
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003898:	fb14 5407 	smlabb	r4, r4, r7, r5
 800389c:	6827      	ldr	r7, [r4, #0]
 800389e:	bf0c      	ite	eq
 80038a0:	f047 5700 	orreq.w	r7, r7, #536870912	; 0x20000000
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038a4:	f047 5780 	orrne.w	r7, r7, #268435456	; 0x10000000
 80038a8:	6027      	str	r7, [r4, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038aa:	780f      	ldrb	r7, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 80038ac:	2e01      	cmp	r6, #1
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038ae:	eb05 1547 	add.w	r5, r5, r7, lsl #5
 80038b2:	682c      	ldr	r4, [r5, #0]
 80038b4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 80038b8:	602c      	str	r4, [r5, #0]
    if (ep->type == EP_TYPE_ISOC)
 80038ba:	d105      	bne.n	80038c8 <USB_EPStartXfer+0x88>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 80038bc:	9200      	str	r2, [sp, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	463a      	mov	r2, r7
 80038c2:	68c9      	ldr	r1, [r1, #12]
 80038c4:	f000 f8fa 	bl	8003abc <USB_WritePacket>
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
  }
  return HAL_OK;
}
 80038c8:	2000      	movs	r0, #0
 80038ca:	b003      	add	sp, #12
 80038cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038ce:	0cf6      	lsrs	r6, r6, #19
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80038d0:	688f      	ldr	r7, [r1, #8]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038d2:	04f6      	lsls	r6, r6, #19
 80038d4:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80038d6:	6926      	ldr	r6, [r4, #16]
 80038d8:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 80038dc:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 80038e0:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket) << 19)) ;
 80038e2:	19de      	adds	r6, r3, r7
 80038e4:	f8d4 e010 	ldr.w	lr, [r4, #16]
 80038e8:	3e01      	subs	r6, #1
 80038ea:	fbb6 f7f7 	udiv	r7, r6, r7
 80038ee:	4e36      	ldr	r6, [pc, #216]	; (80039c8 <USB_EPStartXfer+0x188>)
 80038f0:	ea06 46c7 	and.w	r6, r6, r7, lsl #19
 80038f4:	ea46 060e 	orr.w	r6, r6, lr
 80038f8:	6126      	str	r6, [r4, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 80038fa:	f3c3 0612 	ubfx	r6, r3, #0, #19
 80038fe:	6927      	ldr	r7, [r4, #16]
 8003900:	433e      	orrs	r6, r7
 8003902:	6126      	str	r6, [r4, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003904:	78ce      	ldrb	r6, [r1, #3]
 8003906:	2e01      	cmp	r6, #1
 8003908:	d15a      	bne.n	80039c0 <USB_EPStartXfer+0x180>
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 800390a:	6926      	ldr	r6, [r4, #16]
 800390c:	f026 46c0 	bic.w	r6, r6, #1610612736	; 0x60000000
 8003910:	6126      	str	r6, [r4, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1 << 29)); 
 8003912:	6926      	ldr	r6, [r4, #16]
 8003914:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8003918:	6126      	str	r6, [r4, #16]
 800391a:	e7ac      	b.n	8003876 <USB_EPStartXfer+0x36>
      if (ep->type != EP_TYPE_ISOC)
 800391c:	78ce      	ldrb	r6, [r1, #3]
 800391e:	2e01      	cmp	r6, #1
 8003920:	d0b3      	beq.n	800388a <USB_EPStartXfer+0x4a>
        if (ep->xfer_len > 0)
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ae      	beq.n	8003884 <USB_EPStartXfer+0x44>
          USBx_DEVICE->DIEPEMPMSK |= 1 << ep->num;
 8003926:	f891 e000 	ldrb.w	lr, [r1]
 800392a:	2401      	movs	r4, #1
 800392c:	f8d0 7834 	ldr.w	r7, [r0, #2100]	; 0x834
 8003930:	fa04 f40e 	lsl.w	r4, r4, lr
 8003934:	433c      	orrs	r4, r7
 8003936:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
 800393a:	e7a3      	b.n	8003884 <USB_EPStartXfer+0x44>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 800393c:	f500 6530 	add.w	r5, r0, #2816	; 0xb00
 8003940:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 8003944:	6925      	ldr	r5, [r4, #16]
 8003946:	0ced      	lsrs	r5, r5, #19
 8003948:	04ed      	lsls	r5, r5, #19
 800394a:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 800394c:	6925      	ldr	r5, [r4, #16]
 800394e:	f025 55ff 	bic.w	r5, r5, #534773760	; 0x1fe00000
 8003952:	f425 15c0 	bic.w	r5, r5, #1572864	; 0x180000
 8003956:	6125      	str	r5, [r4, #16]
 8003958:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0)
 800395a:	b9fb      	cbnz	r3, 800399c <USB_EPStartXfer+0x15c>
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800395c:	6923      	ldr	r3, [r4, #16]
 800395e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003962:	431d      	orrs	r5, r3
 8003964:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;      
 8003966:	6923      	ldr	r3, [r4, #16]
 8003968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800396c:	6123      	str	r3, [r4, #16]
    if (dma == 1)
 800396e:	2a01      	cmp	r2, #1
 8003970:	d101      	bne.n	8003976 <USB_EPStartXfer+0x136>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 8003972:	68cb      	ldr	r3, [r1, #12]
 8003974:	6163      	str	r3, [r4, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003976:	78cb      	ldrb	r3, [r1, #3]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10a      	bne.n	8003992 <USB_EPStartXfer+0x152>
      if ((USBx_DEVICE->DSTS & ( 1 << 8 )) == 0)
 800397c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003980:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	bf0c      	ite	eq
 8003988:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800398c:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003990:	6023      	str	r3, [r4, #0]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003992:	6823      	ldr	r3, [r4, #0]
 8003994:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003998:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 800399a:	e795      	b.n	80038c8 <USB_EPStartXfer+0x88>
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 800399c:	442b      	add	r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 800399e:	4e0a      	ldr	r6, [pc, #40]	; (80039c8 <USB_EPStartXfer+0x188>)
 80039a0:	6927      	ldr	r7, [r4, #16]
      pktcnt = (ep->xfer_len + ep->maxpacket -1)/ ep->maxpacket; 
 80039a2:	3b01      	subs	r3, #1
 80039a4:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 80039a8:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 80039ac:	b29b      	uxth	r3, r3
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 80039ae:	433e      	orrs	r6, r7
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 80039b0:	435d      	muls	r5, r3
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19));
 80039b2:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt)); 
 80039b4:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80039b8:	6926      	ldr	r6, [r4, #16]
 80039ba:	4335      	orrs	r5, r6
 80039bc:	6125      	str	r5, [r4, #16]
 80039be:	e7d6      	b.n	800396e <USB_EPStartXfer+0x12e>
    if (dma == 1)
 80039c0:	2a01      	cmp	r2, #1
 80039c2:	d1ae      	bne.n	8003922 <USB_EPStartXfer+0xe2>
 80039c4:	e759      	b.n	800387a <USB_EPStartXfer+0x3a>
 80039c6:	bf00      	nop
 80039c8:	1ff80000 	.word	0x1ff80000

080039cc <USB_EP0StartXfer>:
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
  /* IN endpoint */
  if (ep->is_in == 1)
 80039cc:	784b      	ldrb	r3, [r1, #1]
 80039ce:	2b01      	cmp	r3, #1
{
 80039d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d2:	694d      	ldr	r5, [r1, #20]
 80039d4:	780f      	ldrb	r7, [r1, #0]
  if (ep->is_in == 1)
 80039d6:	d14d      	bne.n	8003a74 <USB_EP0StartXfer+0xa8>
 80039d8:	f500 6410 	add.w	r4, r0, #2304	; 0x900
 80039dc:	2320      	movs	r3, #32
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0)
 80039de:	bb0d      	cbnz	r5, 8003a24 <USB_EP0StartXfer+0x58>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80039e0:	fb13 4007 	smlabb	r0, r3, r7, r4
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
    
    }
    
    if (dma == 1)
 80039e4:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80039e6:	6903      	ldr	r3, [r0, #16]
 80039e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039f0:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 80039f2:	6903      	ldr	r3, [r0, #16]
 80039f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039f8:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 80039fa:	6903      	ldr	r3, [r0, #16]
 80039fc:	ea4f 43d3 	mov.w	r3, r3, lsr #19
 8003a00:	ea4f 43c3 	mov.w	r3, r3, lsl #19
 8003a04:	6103      	str	r3, [r0, #16]
    if (dma == 1)
 8003a06:	d104      	bne.n	8003a12 <USB_EP0StartXfer+0x46>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a08:	780b      	ldrb	r3, [r1, #0]
 8003a0a:	690a      	ldr	r2, [r1, #16]
 8003a0c:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8003a10:	615a      	str	r2, [r3, #20]
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
      }
    }
        
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a12:	780b      	ldrb	r3, [r1, #0]
 8003a14:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8003a1e:	601a      	str	r2, [r3, #0]
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
  }
  return HAL_OK;
}
 8003a20:	2000      	movs	r0, #0
 8003a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a24:	fb13 4307 	smlabb	r3, r3, r7, r4
 8003a28:	691e      	ldr	r6, [r3, #16]
 8003a2a:	0cf6      	lsrs	r6, r6, #19
 8003a2c:	04f6      	lsls	r6, r6, #19
 8003a2e:	611e      	str	r6, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003a30:	691e      	ldr	r6, [r3, #16]
 8003a32:	f026 56ff 	bic.w	r6, r6, #534773760	; 0x1fe00000
 8003a36:	f426 16c0 	bic.w	r6, r6, #1572864	; 0x180000
 8003a3a:	611e      	str	r6, [r3, #16]
      if(ep->xfer_len > ep->maxpacket)
 8003a3c:	688e      	ldr	r6, [r1, #8]
 8003a3e:	42b5      	cmp	r5, r6
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003a40:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 8003a42:	bf88      	it	hi
 8003a44:	614e      	strhi	r6, [r1, #20]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003a46:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003a4a:	694e      	ldr	r6, [r1, #20]
    if (dma == 1)
 8003a4c:	2a01      	cmp	r2, #1
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1 << 19)) ;
 8003a4e:	611d      	str	r5, [r3, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003a50:	f3c6 0512 	ubfx	r5, r6, #0, #19
 8003a54:	f8d3 e010 	ldr.w	lr, [r3, #16]
 8003a58:	ea45 050e 	orr.w	r5, r5, lr
 8003a5c:	611d      	str	r5, [r3, #16]
    if (dma == 1)
 8003a5e:	d0d3      	beq.n	8003a08 <USB_EP0StartXfer+0x3c>
      if (ep->xfer_len > 0U)
 8003a60:	2e00      	cmp	r6, #0
 8003a62:	d0d6      	beq.n	8003a12 <USB_EP0StartXfer+0x46>
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003a64:	2301      	movs	r3, #1
 8003a66:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003a6a:	40bb      	lsls	r3, r7
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003a72:	e7ce      	b.n	8003a12 <USB_EP0StartXfer+0x46>
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003a74:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003a78:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8003a7c:	6903      	ldr	r3, [r0, #16]
 8003a7e:	0cdb      	lsrs	r3, r3, #19
 8003a80:	04db      	lsls	r3, r3, #19
 8003a82:	6103      	str	r3, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003a84:	6903      	ldr	r3, [r0, #16]
 8003a86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a8e:	6103      	str	r3, [r0, #16]
 8003a90:	688b      	ldr	r3, [r1, #8]
    if (ep->xfer_len > 0U)
 8003a92:	b105      	cbz	r5, 8003a96 <USB_EP0StartXfer+0xca>
      ep->xfer_len = ep->maxpacket;
 8003a94:	614b      	str	r3, [r1, #20]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003a96:	6904      	ldr	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
    if (dma == 1)
 8003a9c:	2a01      	cmp	r2, #1
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003a9e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003aa2:	6104      	str	r4, [r0, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003aa4:	6904      	ldr	r4, [r0, #16]
 8003aa6:	ea43 0304 	orr.w	r3, r3, r4
 8003aaa:	6103      	str	r3, [r0, #16]
    if (dma == 1)
 8003aac:	d101      	bne.n	8003ab2 <USB_EP0StartXfer+0xe6>
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003aae:	68cb      	ldr	r3, [r1, #12]
 8003ab0:	6143      	str	r3, [r0, #20]
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003ab2:	6803      	ldr	r3, [r0, #0]
 8003ab4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ab8:	6003      	str	r3, [r0, #0]
 8003aba:	e7b1      	b.n	8003a20 <USB_EP0StartXfer+0x54>

08003abc <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003abc:	b510      	push	{r4, lr}
 8003abe:	f89d 4008 	ldrb.w	r4, [sp, #8]
  uint32_t count32b= 0 , i= 0;
  
  if (dma == 0)
 8003ac2:	b93c      	cbnz	r4, 8003ad4 <USB_WritePacket+0x18>
  {
    count32b =  (len + 3) / 4;
 8003ac4:	3303      	adds	r3, #3
    for (i = 0; i < count32b; i++)
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003ac6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    count32b =  (len + 3) / 4;
 8003aca:	109b      	asrs	r3, r3, #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003acc:	eb00 3202 	add.w	r2, r0, r2, lsl #12
    for (i = 0; i < count32b; i++)
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	d101      	bne.n	8003ad8 <USB_WritePacket+0x1c>
	  src += 4;
    }
  }
  return HAL_OK;
}
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	bd10      	pop	{r4, pc}
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003ad8:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
    for (i = 0; i < count32b; i++)
 8003adc:	3401      	adds	r4, #1
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003ade:	6010      	str	r0, [r2, #0]
 8003ae0:	e7f6      	b.n	8003ad0 <USB_WritePacket+0x14>

08003ae2 <USB_ReadPacket>:
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
  uint32_t i=0;
  uint32_t count32b = (len + 3) / 4;
 8003ae2:	3203      	adds	r2, #3
  
  for ( i = 0; i < count32b; i++)
 8003ae4:	2300      	movs	r3, #0
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8003ae6:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = (len + 3) / 4;
 8003aea:	1092      	asrs	r2, r2, #2
{
 8003aec:	b510      	push	{r4, lr}
  for ( i = 0; i < count32b; i++)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d102      	bne.n	8003af8 <USB_ReadPacket+0x16>
	dest += 4;
    
  }
  return ((void *)dest);
}
 8003af2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003af6:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 8003af8:	6804      	ldr	r4, [r0, #0]
 8003afa:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( i = 0; i < count32b; i++)
 8003afe:	3301      	adds	r3, #1
 8003b00:	e7f5      	b.n	8003aee <USB_ReadPacket+0xc>

08003b02 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8003b02:	784b      	ldrb	r3, [r1, #1]
 8003b04:	780a      	ldrb	r2, [r1, #0]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	f04f 0320 	mov.w	r3, #32
 8003b0c:	d10b      	bne.n	8003b26 <USB_EPSetStall+0x24>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0)
 8003b0e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 8003b12:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003b16:	6803      	ldr	r3, [r0, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	db0b      	blt.n	8003b34 <USB_EPSetStall+0x32>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003b1c:	6803      	ldr	r3, [r0, #0]
 8003b1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b22:	6003      	str	r3, [r0, #0]
 8003b24:	e006      	b.n	8003b34 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0)
 8003b26:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8003b2a:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003b2e:	6803      	ldr	r3, [r0, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	daf3      	bge.n	8003b1c <USB_EPSetStall+0x1a>
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003b34:	6803      	ldr	r3, [r0, #0]
 8003b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b3a:	6003      	str	r3, [r0, #0]
  }
  return HAL_OK;
}
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	4770      	bx	lr

08003b40 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
  if (ep->is_in == 1)
 8003b40:	784b      	ldrb	r3, [r1, #1]
 8003b42:	780a      	ldrb	r2, [r1, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f04f 0320 	mov.w	r3, #32
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b4a:	bf0c      	ite	eq
 8003b4c:	f500 6010 	addeq.w	r0, r0, #2304	; 0x900
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b50:	f500 6030 	addne.w	r0, r0, #2816	; 0xb00
 8003b54:	fb13 0002 	smlabb	r0, r3, r2, r0
 8003b58:	6803      	ldr	r3, [r0, #0]
 8003b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b5e:	6003      	str	r3, [r0, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003b60:	78cb      	ldrb	r3, [r1, #3]
 8003b62:	3b02      	subs	r3, #2
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d803      	bhi.n	8003b70 <USB_EPClearStall+0x30>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003b68:	6803      	ldr	r3, [r0, #0]
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6003      	str	r3, [r0, #0]
    }    
  }
  return HAL_OK;
}
 8003b70:	2000      	movs	r0, #0
 8003b72:	4770      	bx	lr

08003b74 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003b74:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8003b78:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003b7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8003b7e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003b82:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= (address << 4) & USB_OTG_DCFG_DAD ;
 8003b86:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003b8a:	4319      	orrs	r1, r3
 8003b8c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
  
  return HAL_OK;  
}
 8003b90:	2000      	movs	r0, #0
 8003b92:	4770      	bx	lr

08003b94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003b94:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8003b96:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003b9a:	f023 0302 	bic.w	r3, r3, #2
 8003b9e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8003ba2:	2003      	movs	r0, #3
 8003ba4:	f7fc fd66 	bl	8000674 <HAL_Delay>
  
  return HAL_OK;  
}
 8003ba8:	2000      	movs	r0, #0
 8003baa:	bd08      	pop	{r3, pc}

08003bac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8003bac:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8003bae:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003bb2:	f043 0302 	orr.w	r3, r3, #2
 8003bb6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3);
 8003bba:	2003      	movs	r0, #3
 8003bbc:	f7fc fd5a 	bl	8000674 <HAL_Delay>
  
  return HAL_OK;  
}
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	bd08      	pop	{r3, pc}

08003bc4 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v = 0;
  
  v = USBx->GINTSTS;
 8003bc4:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 8003bc6:	6980      	ldr	r0, [r0, #24]
  return v;  
}
 8003bc8:	4010      	ands	r0, r2
 8003bca:	4770      	bx	lr

08003bcc <USB_ReadDevAllOutEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003bcc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003bd0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003bd4:	69c0      	ldr	r0, [r0, #28]
 8003bd6:	4018      	ands	r0, r3
  return ((v & 0xffff0000) >> 16);
}
 8003bd8:	0c00      	lsrs	r0, r0, #16
 8003bda:	4770      	bx	lr

08003bdc <USB_ReadDevAllInEpInterrupt>:
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8003bdc:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003be0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v &= USBx_DEVICE->DAINTMSK;
 8003be4:	69c0      	ldr	r0, [r0, #28]
 8003be6:	4018      	ands	r0, r3
  return ((v & 0xFFFF));
}
 8003be8:	b280      	uxth	r0, r0
 8003bea:	4770      	bx	lr

08003bec <USB_ReadDevOutEPInterrupt>:
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003bec:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  v &= USBx_DEVICE->DOEPMSK;
 8003bf0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  v  = USBx_OUTEP(epnum)->DOEPINT;
 8003bf4:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8003bf8:	688a      	ldr	r2, [r1, #8]
  v &= USBx_DEVICE->DOEPMSK;
 8003bfa:	6940      	ldr	r0, [r0, #20]
  return v;
}
 8003bfc:	4010      	ands	r0, r2
 8003bfe:	4770      	bx	lr

08003c00 <USB_ReadDevInEPInterrupt>:
  * @param  epnum : endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8003c00:	b510      	push	{r4, lr}
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8003c02:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003c06:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> epnum) & 0x1) << 7;
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c0a:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> epnum) & 0x1) << 7;
 8003c0e:	40cb      	lsrs	r3, r1
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c10:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> epnum) & 0x1) << 7;
 8003c14:	01db      	lsls	r3, r3, #7
  v = USBx_INEP(epnum)->DIEPINT & msk;
 8003c16:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> epnum) & 0x1) << 7;
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4323      	orrs	r3, r4
  return v;
}
 8003c1c:	4018      	ands	r0, r3
 8003c1e:	bd10      	pop	{r4, pc}

08003c20 <USB_GetMode>:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS ) & 0x1);
 8003c20:	6940      	ldr	r0, [r0, #20]
}
 8003c22:	f000 0001 	and.w	r0, r0, #1
 8003c26:	4770      	bx	lr

08003c28 <USB_ActivateSetup>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003c28:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003c2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003c30:	f023 0307 	bic.w	r3, r3, #7
 8003c34:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003c38:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	f002 0206 	and.w	r2, r2, #6
 8003c42:	2a04      	cmp	r2, #4
 8003c44:	d105      	bne.n	8003c52 <USB_ActivateSetup+0x2a>
  {
    USBx_INEP(0)->DIEPCTL |= 3;
 8003c46:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003c4a:	f042 0203 	orr.w	r2, r2, #3
 8003c4e:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003c52:	685a      	ldr	r2, [r3, #4]

  return HAL_OK;
}
 8003c54:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c5a:	605a      	str	r2, [r3, #4]
}
 8003c5c:	4770      	bx	lr

08003c5e <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup : pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003c5e:	b510      	push	{r4, lr}
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8003c60:	2400      	movs	r4, #0
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
  
  if (dma == 1)
 8003c62:	2901      	cmp	r1, #1
  USBx_OUTEP(0)->DOEPTSIZ = 0;
 8003c64:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1 << 19)) ;
 8003c68:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003c6c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003c70:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |= (3 * 8);
 8003c74:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003c78:	f044 0418 	orr.w	r4, r4, #24
 8003c7c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 8003c80:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8003c84:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003c88:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1)
 8003c8c:	d105      	bne.n	8003c9a <USB_EP0_OutStart+0x3c>
  {
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
    /* EP enable */
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8003c8e:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
    USBx_OUTEP(0)->DOEPDMA = (uint32_t)psetup;
 8003c92:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0)->DOEPCTL = 0x80008000;
 8003c96:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
  }
  
  return HAL_OK;  
}
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	bd10      	pop	{r4, pc}
	...

08003ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx : Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	d101      	bne.n	8003caa <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8003ca6:	2003      	movs	r0, #3
 8003ca8:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8003caa:	6902      	ldr	r2, [r0, #16]
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	daf8      	bge.n	8003ca2 <USB_CoreReset+0x2>
  
  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cb0:	6903      	ldr	r3, [r0, #16]
 8003cb2:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <USB_CoreReset+0x2c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8003cba:	3a01      	subs	r2, #1
 8003cbc:	d0f3      	beq.n	8003ca6 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cbe:	6903      	ldr	r3, [r0, #16]
 8003cc0:	f013 0301 	ands.w	r3, r3, #1
 8003cc4:	d1f9      	bne.n	8003cba <USB_CoreReset+0x1a>
  
  return HAL_OK;
 8003cc6:	4618      	mov	r0, r3
}
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	00030d41 	.word	0x00030d41

08003cd0 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003cd0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003cd4:	b11b      	cbz	r3, 8003cde <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8003cd6:	2000      	movs	r0, #0
 8003cd8:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003cdc:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8003cde:	2002      	movs	r0, #2
  }
}
 8003ce0:	4770      	bx	lr

08003ce2 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003ce2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8003ce6:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ce8:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8003cec:	b15b      	cbz	r3, 8003d06 <USBD_CDC_EP0_RxReady+0x24>
 8003cee:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8003cf2:	28ff      	cmp	r0, #255	; 0xff
 8003cf4:	d007      	beq.n	8003d06 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003cfe:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8003d00:	23ff      	movs	r3, #255	; 0xff
 8003d02:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8003d06:	2000      	movs	r0, #0
 8003d08:	bd10      	pop	{r4, pc}
	...

08003d0c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8003d0c:	2343      	movs	r3, #67	; 0x43
 8003d0e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003d10:	4800      	ldr	r0, [pc, #0]	; (8003d14 <USBD_CDC_GetFSCfgDesc+0x8>)
 8003d12:	4770      	bx	lr
 8003d14:	20000040 	.word	0x20000040

08003d18 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8003d18:	2343      	movs	r3, #67	; 0x43
 8003d1a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8003d1c:	4800      	ldr	r0, [pc, #0]	; (8003d20 <USBD_CDC_GetHSCfgDesc+0x8>)
 8003d1e:	4770      	bx	lr
 8003d20:	20000084 	.word	0x20000084

08003d24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8003d24:	2343      	movs	r3, #67	; 0x43
 8003d26:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8003d28:	4800      	ldr	r0, [pc, #0]	; (8003d2c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8003d2a:	4770      	bx	lr
 8003d2c:	200000d4 	.word	0x200000d4

08003d30 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8003d30:	230a      	movs	r3, #10
 8003d32:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8003d34:	4800      	ldr	r0, [pc, #0]	; (8003d38 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8003d36:	4770      	bx	lr
 8003d38:	200000c8 	.word	0x200000c8

08003d3c <USBD_CDC_DataOut>:
{      
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d40:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003d44:	f000 fffe 	bl	8004d44 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003d48:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003d4c:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8003d50:	b14b      	cbz	r3, 8003d66 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003d52:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003d56:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8003d5a:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4798      	blx	r3
    return USBD_OK;
 8003d62:	2000      	movs	r0, #0
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003d66:	2002      	movs	r0, #2
}
 8003d68:	bd38      	pop	{r3, r4, r5, pc}
	...

08003d6c <USBD_CDC_Setup>:
{
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d6e:	780f      	ldrb	r7, [r1, #0]
{
 8003d70:	4606      	mov	r6, r0
 8003d72:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d74:	f017 0360 	ands.w	r3, r7, #96	; 0x60
 8003d78:	d023      	beq.n	8003dc2 <USBD_CDC_Setup+0x56>
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d119      	bne.n	8003db2 <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8003d7e:	88ca      	ldrh	r2, [r1, #6]
 8003d80:	784b      	ldrb	r3, [r1, #1]
 8003d82:	b1c2      	cbz	r2, 8003db6 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8003d84:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003d86:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8003d8a:	d50b      	bpl.n	8003da4 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d8c:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8003d90:	4618      	mov	r0, r3
 8003d92:	688f      	ldr	r7, [r1, #8]
 8003d94:	4629      	mov	r1, r5
 8003d96:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8003d98:	88e2      	ldrh	r2, [r4, #6]
 8003d9a:	4629      	mov	r1, r5
 8003d9c:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 8003d9e:	f000 fb84 	bl	80044aa <USBD_CtlSendData>
      break;
 8003da2:	e006      	b.n	8003db2 <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8003da4:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        USBD_CtlPrepareRx (pdev, 
 8003da8:	4629      	mov	r1, r5
        hcdc->CmdLength = req->wLength;
 8003daa:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8003dae:	f000 fb91 	bl	80044d4 <USBD_CtlPrepareRx>
}
 8003db2:	2000      	movs	r0, #0
 8003db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003db6:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003dba:	6884      	ldr	r4, [r0, #8]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	47a0      	blx	r4
 8003dc0:	e7f7      	b.n	8003db2 <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8003dc2:	784b      	ldrb	r3, [r1, #1]
 8003dc4:	2b0a      	cmp	r3, #10
 8003dc6:	d1f4      	bne.n	8003db2 <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003dc8:	2201      	movs	r2, #1
 8003dca:	4901      	ldr	r1, [pc, #4]	; (8003dd0 <USBD_CDC_Setup+0x64>)
 8003dcc:	e7e7      	b.n	8003d9e <USBD_CDC_Setup+0x32>
 8003dce:	bf00      	nop
 8003dd0:	200002a8 	.word	0x200002a8

08003dd4 <USBD_CDC_DeInit>:
{
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003dd8:	2181      	movs	r1, #129	; 0x81
 8003dda:	f000 ff4b 	bl	8004c74 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003dde:	2101      	movs	r1, #1
 8003de0:	4620      	mov	r0, r4
 8003de2:	f000 ff47 	bl	8004c74 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8003de6:	2182      	movs	r1, #130	; 0x82
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 ff43 	bl	8004c74 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8003dee:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8003df2:	b153      	cbz	r3, 8003e0a <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003df4:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003dfc:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8003e00:	f001 f84e 	bl	8004ea0 <free>
    pdev->pClassData = NULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	bd10      	pop	{r4, pc}

08003e0e <USBD_CDC_Init>:
{
 8003e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003e10:	7c03      	ldrb	r3, [r0, #16]
{
 8003e12:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003e14:	bb7b      	cbnz	r3, 8003e76 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8003e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	2181      	movs	r1, #129	; 0x81
 8003e1e:	f000 ff19 	bl	8004c54 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003e22:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8003e26:	2202      	movs	r2, #2
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f000 ff12 	bl	8004c54 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8003e30:	2308      	movs	r3, #8
 8003e32:	2203      	movs	r2, #3
 8003e34:	2182      	movs	r1, #130	; 0x82
 8003e36:	4620      	mov	r0, r4
 8003e38:	f000 ff0c 	bl	8004c54 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8003e3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003e40:	f001 f826 	bl	8004e90 <malloc>
 8003e44:	4606      	mov	r6, r0
 8003e46:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003e4a:	b320      	cbz	r0, 8003e96 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003e4c:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 8003e50:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003e56:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8003e58:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8003e5c:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003e60:	b987      	cbnz	r7, 8003e84 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8003e62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e66:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 ff5b 	bl	8004d28 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003e72:	4638      	mov	r0, r7
 8003e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8003e76:	2340      	movs	r3, #64	; 0x40
 8003e78:	2202      	movs	r2, #2
 8003e7a:	2181      	movs	r1, #129	; 0x81
 8003e7c:	f000 feea 	bl	8004c54 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8003e80:	2340      	movs	r3, #64	; 0x40
 8003e82:	e7d0      	b.n	8003e26 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8003e84:	2340      	movs	r3, #64	; 0x40
 8003e86:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f000 ff4b 	bl	8004d28 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8003e92:	4628      	mov	r0, r5
 8003e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8003e96:	2001      	movs	r0, #1
}
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e9a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8003e9a:	b119      	cbz	r1, 8003ea4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8003e9c:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003ea4:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8003ea6:	4770      	bx	lr

08003ea8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ea8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8003eac:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8003eae:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8003eb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003eb6:	4770      	bx	lr

08003eb8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8003eb8:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8003ebc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8003ebe:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003ec2:	4770      	bx	lr

08003ec4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003ec4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003ec8:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8003eca:	b162      	cbz	r2, 8003ee6 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003ecc:	7c04      	ldrb	r4, [r0, #16]
 8003ece:	b944      	cbnz	r4, 8003ee2 <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003ed4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003ed8:	2101      	movs	r1, #1
 8003eda:	f000 ff25 	bl	8004d28 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003ede:	2000      	movs	r0, #0
 8003ee0:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003ee2:	2340      	movs	r3, #64	; 0x40
 8003ee4:	e7f6      	b.n	8003ed4 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003ee6:	2002      	movs	r0, #2
  }
}
 8003ee8:	bd10      	pop	{r4, pc}

08003eea <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003eea:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003eec:	b180      	cbz	r0, 8003f10 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003eee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ef2:	b113      	cbz	r3, 8003efa <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003efa:	b109      	cbz	r1, 8003f00 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003efc:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003f00:	2301      	movs	r3, #1
  pdev->id = id;
 8003f02:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003f04:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003f08:	f000 fe64 	bl	8004bd4 <USBD_LL_Init>
  
  return USBD_OK; 
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8003f10:	2002      	movs	r0, #2
}
 8003f12:	bd08      	pop	{r3, pc}

08003f14 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003f14:	b119      	cbz	r1, 8003f1e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003f16:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003f1e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003f20:	4770      	bx	lr

08003f22 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003f22:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003f24:	f000 fe88 	bl	8004c38 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003f28:	2000      	movs	r0, #0
 8003f2a:	bd08      	pop	{r3, pc}

08003f2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003f2c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003f2e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f32:	b90b      	cbnz	r3, 8003f38 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003f34:	2002      	movs	r0, #2
 8003f36:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4798      	blx	r3
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d1f9      	bne.n	8003f34 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003f40:	bd08      	pop	{r3, pc}

08003f42 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003f42:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003f44:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	4798      	blx	r3
  return USBD_OK;
}
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	bd08      	pop	{r3, pc}

08003f50 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003f50:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003f52:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8003f56:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003f58:	4628      	mov	r0, r5
 8003f5a:	f000 fa76 	bl	800444a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003f5e:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003f60:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8003f64:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003f68:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003f6c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8003f70:	f001 031f 	and.w	r3, r1, #31
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d00e      	beq.n	8003f96 <USBD_LL_SetupStage+0x46>
 8003f78:	d307      	bcc.n	8003f8a <USBD_LL_SetupStage+0x3a>
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d010      	beq.n	8003fa0 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003f7e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fe84 	bl	8004c90 <USBD_LL_StallEP>
    break;
 8003f88:	e003      	b.n	8003f92 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	f000 f8e7 	bl	8004160 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003f92:	2000      	movs	r0, #0
 8003f94:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003f96:	4629      	mov	r1, r5
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 f9db 	bl	8004354 <USBD_StdItfReq>
    break;
 8003f9e:	e7f8      	b.n	8003f92 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003fa0:	4629      	mov	r1, r5
 8003fa2:	4620      	mov	r0, r4
 8003fa4:	f000 f9ee 	bl	8004384 <USBD_StdEPReq>
    break;
 8003fa8:	e7f3      	b.n	8003f92 <USBD_LL_SetupStage+0x42>

08003faa <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003faa:	b538      	push	{r3, r4, r5, lr}
 8003fac:	4604      	mov	r4, r0
 8003fae:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003fb0:	bb11      	cbnz	r1, 8003ff8 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003fb2:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d10f      	bne.n	8003fda <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8003fba:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8003fbe:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d90b      	bls.n	8003fde <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8003fc6:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
 8003fc8:	4629      	mov	r1, r5
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003fca:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8003fcc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8003fd0:	bf28      	it	cs
 8003fd2:	461a      	movcs	r2, r3
        USBD_CtlContinueRx (pdev, 
 8003fd4:	b292      	uxth	r2, r2
 8003fd6:	f000 fa8c 	bl	80044f2 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003fda:	2000      	movs	r0, #0
 8003fdc:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003fde:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	b123      	cbz	r3, 8003ff0 <USBD_LL_DataOutStage+0x46>
 8003fe6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003fea:	2a03      	cmp	r2, #3
 8003fec:	d100      	bne.n	8003ff0 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8003fee:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 fa86 	bl	8004502 <USBD_CtlSendStatus>
 8003ff6:	e7f0      	b.n	8003fda <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8003ff8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0eb      	beq.n	8003fda <USBD_LL_DataOutStage+0x30>
 8004002:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004006:	2a03      	cmp	r2, #3
 8004008:	d1e7      	bne.n	8003fda <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 800400a:	4798      	blx	r3
 800400c:	e7e5      	b.n	8003fda <USBD_LL_DataOutStage+0x30>

0800400e <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800400e:	b570      	push	{r4, r5, r6, lr}
 8004010:	4613      	mov	r3, r2
 8004012:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8004014:	460e      	mov	r6, r1
 8004016:	2900      	cmp	r1, #0
 8004018:	d13d      	bne.n	8004096 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800401a:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800401e:	2a02      	cmp	r2, #2
 8004020:	d10f      	bne.n	8004042 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8004022:	69c5      	ldr	r5, [r0, #28]
 8004024:	6a02      	ldr	r2, [r0, #32]
 8004026:	4295      	cmp	r5, r2
 8004028:	d914      	bls.n	8004054 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 800402a:	1aaa      	subs	r2, r5, r2
        
        USBD_CtlContinueSendData (pdev, 
 800402c:	4619      	mov	r1, r3
        pep->rem_length -=  pep->maxpacket;
 800402e:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8004030:	b292      	uxth	r2, r2
 8004032:	f000 fa47 	bl	80044c4 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004036:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004038:	461a      	mov	r2, r3
 800403a:	4619      	mov	r1, r3
 800403c:	4620      	mov	r0, r4
 800403e:	f000 fe73 	bl	8004d28 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004042:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8004046:	2b01      	cmp	r3, #1
 8004048:	d102      	bne.n	8004050 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8004050:	2000      	movs	r0, #0
 8004052:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8004054:	6983      	ldr	r3, [r0, #24]
 8004056:	fbb3 f5f2 	udiv	r5, r3, r2
 800405a:	fb02 3515 	mls	r5, r2, r5, r3
 800405e:	b965      	cbnz	r5, 800407a <USBD_LL_DataInStage+0x6c>
 8004060:	429a      	cmp	r2, r3
 8004062:	d80a      	bhi.n	800407a <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8004064:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8004068:	4293      	cmp	r3, r2
 800406a:	d206      	bcs.n	800407a <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800406c:	462a      	mov	r2, r5
 800406e:	f000 fa29 	bl	80044c4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004072:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8004076:	462b      	mov	r3, r5
 8004078:	e7de      	b.n	8004038 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800407a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	b12b      	cbz	r3, 800408e <USBD_LL_DataInStage+0x80>
 8004082:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8004086:	2a03      	cmp	r2, #3
 8004088:	d101      	bne.n	800408e <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 800408a:	4620      	mov	r0, r4
 800408c:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800408e:	4620      	mov	r0, r4
 8004090:	f000 fa42 	bl	8004518 <USBD_CtlReceiveStatus>
 8004094:	e7d5      	b.n	8004042 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8004096:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0d7      	beq.n	8004050 <USBD_LL_DataInStage+0x42>
 80040a0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80040a4:	2a03      	cmp	r2, #3
 80040a6:	d1d3      	bne.n	8004050 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 80040a8:	4798      	blx	r3
 80040aa:	e7d1      	b.n	8004050 <USBD_LL_DataInStage+0x42>

080040ac <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80040ac:	2200      	movs	r2, #0
{
 80040ae:	b538      	push	{r3, r4, r5, lr}
 80040b0:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040b2:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80040b4:	4611      	mov	r1, r2
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	f000 fdcc 	bl	8004c54 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80040bc:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80040be:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80040c2:	2200      	movs	r2, #0
 80040c4:	2180      	movs	r1, #128	; 0x80
 80040c6:	4620      	mov	r0, r4
 80040c8:	f000 fdc4 	bl	8004c54 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80040cc:	2301      	movs	r3, #1
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80040ce:	6225      	str	r5, [r4, #32]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80040d0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80040d4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80040d8:	b12b      	cbz	r3, 80040e6 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80040da:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80040de:	4620      	mov	r0, r4
 80040e0:	7921      	ldrb	r1, [r4, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80040e6:	2000      	movs	r0, #0
 80040e8:	bd38      	pop	{r3, r4, r5, pc}

080040ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80040ea:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80040ec:	2000      	movs	r0, #0
 80040ee:	4770      	bx	lr

080040f0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80040f0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80040f4:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80040f8:	2304      	movs	r3, #4
 80040fa:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80040fe:	2000      	movs	r0, #0
 8004100:	4770      	bx	lr

08004102 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8004102:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8004106:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800410a:	2000      	movs	r0, #0
 800410c:	4770      	bx	lr

0800410e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800410e:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004110:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004114:	2a03      	cmp	r2, #3
 8004116:	d104      	bne.n	8004122 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8004118:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	b103      	cbz	r3, 8004122 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004120:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8004122:	2000      	movs	r0, #0
 8004124:	bd08      	pop	{r3, pc}

08004126 <USBD_LL_IsoINIncomplete>:
 8004126:	2000      	movs	r0, #0
 8004128:	4770      	bx	lr

0800412a <USBD_LL_IsoOUTIncomplete>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
  return USBD_OK;
}
 800412a:	2000      	movs	r0, #0
 800412c:	4770      	bx	lr

0800412e <USBD_LL_DevConnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
  return USBD_OK;
}
 800412e:	2000      	movs	r0, #0
 8004130:	4770      	bx	lr

08004132 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004132:	2201      	movs	r2, #1
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004134:	7901      	ldrb	r1, [r0, #4]
{
 8004136:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004138:	f880 21fc 	strb.w	r2, [r0, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800413c:	f8d0 2214 	ldr.w	r2, [r0, #532]	; 0x214
 8004140:	6852      	ldr	r2, [r2, #4]
 8004142:	4790      	blx	r2
   
  return USBD_OK;
}
 8004144:	2000      	movs	r0, #0
 8004146:	bd08      	pop	{r3, pc}

08004148 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8004148:	b510      	push	{r4, lr}
 800414a:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800414c:	2180      	movs	r1, #128	; 0x80
 800414e:	f000 fd9f 	bl	8004c90 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8004152:	2100      	movs	r1, #0
 8004154:	4620      	mov	r0, r4
}
 8004156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800415a:	f000 bd99 	b.w	8004c90 <USBD_LL_StallEP>
	...

08004160 <USBD_StdDevReq>:
{
 8004160:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8004162:	784b      	ldrb	r3, [r1, #1]
{
 8004164:	4604      	mov	r4, r0
 8004166:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8004168:	2b09      	cmp	r3, #9
 800416a:	d879      	bhi.n	8004260 <USBD_StdDevReq+0x100>
 800416c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004170:	00e500c9 	.word	0x00e500c9
 8004174:	00d90078 	.word	0x00d90078
 8004178:	006d0078 	.word	0x006d0078
 800417c:	0078000a 	.word	0x0078000a
 8004180:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8004184:	884b      	ldrh	r3, [r1, #2]
 8004186:	0a1a      	lsrs	r2, r3, #8
 8004188:	3a01      	subs	r2, #1
 800418a:	2a06      	cmp	r2, #6
 800418c:	d868      	bhi.n	8004260 <USBD_StdDevReq+0x100>
 800418e:	e8df f002 	tbb	[pc, r2]
 8004192:	1c04      	.short	0x1c04
 8004194:	49676729 	.word	0x49676729
 8004198:	52          	.byte	0x52
 8004199:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800419a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800419e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80041a0:	f10d 0106 	add.w	r1, sp, #6
 80041a4:	7c20      	ldrb	r0, [r4, #16]
 80041a6:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80041a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80041ac:	2a00      	cmp	r2, #0
 80041ae:	d067      	beq.n	8004280 <USBD_StdDevReq+0x120>
 80041b0:	88eb      	ldrh	r3, [r5, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d064      	beq.n	8004280 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80041b6:	429a      	cmp	r2, r3
    USBD_CtlSendData (pdev, 
 80041b8:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 80041ba:	bf28      	it	cs
 80041bc:	461a      	movcs	r2, r3
 80041be:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80041c2:	4620      	mov	r0, r4
 80041c4:	f000 f971 	bl	80044aa <USBD_CtlSendData>
 80041c8:	e05a      	b.n	8004280 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80041ca:	7c02      	ldrb	r2, [r0, #16]
 80041cc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80041d0:	b932      	cbnz	r2, 80041e0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80041d4:	f10d 0006 	add.w	r0, sp, #6
 80041d8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80041da:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80041dc:	7043      	strb	r3, [r0, #1]
 80041de:	e7e3      	b.n	80041a8 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	e7f7      	b.n	80041d4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b05      	cmp	r3, #5
 80041e8:	d83a      	bhi.n	8004260 <USBD_StdDevReq+0x100>
 80041ea:	e8df f003 	tbb	[pc, r3]
 80041ee:	0703      	.short	0x0703
 80041f0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80041f4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	e7d1      	b.n	80041a0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80041fc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	e7cd      	b.n	80041a0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004204:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	e7c9      	b.n	80041a0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800420c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	e7c5      	b.n	80041a0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004214:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	e7c1      	b.n	80041a0 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800421c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	e7bd      	b.n	80041a0 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004224:	7c03      	ldrb	r3, [r0, #16]
 8004226:	b9db      	cbnz	r3, 8004260 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004228:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800422c:	f10d 0006 	add.w	r0, sp, #6
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	4798      	blx	r3
 8004234:	e7b8      	b.n	80041a8 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004236:	7c03      	ldrb	r3, [r0, #16]
 8004238:	b993      	cbnz	r3, 8004260 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800423a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800423e:	f10d 0006 	add.w	r0, sp, #6
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004246:	2307      	movs	r3, #7
 8004248:	e7c8      	b.n	80041dc <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800424a:	888b      	ldrh	r3, [r1, #4]
 800424c:	b943      	cbnz	r3, 8004260 <USBD_StdDevReq+0x100>
 800424e:	88cb      	ldrh	r3, [r1, #6]
 8004250:	b933      	cbnz	r3, 8004260 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004252:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004256:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004258:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800425a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800425e:	d103      	bne.n	8004268 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8004260:	4620      	mov	r0, r4
 8004262:	f7ff ff71 	bl	8004148 <USBD_CtlError.constprop.0>
    break;
 8004266:	e00b      	b.n	8004280 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8004268:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800426c:	4629      	mov	r1, r5
 800426e:	f000 fd3f 	bl	8004cf0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004272:	4620      	mov	r0, r4
 8004274:	f000 f945 	bl	8004502 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8004278:	b12d      	cbz	r5, 8004286 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800427a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800427c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8004280:	2000      	movs	r0, #0
 8004282:	b003      	add	sp, #12
 8004284:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004286:	2301      	movs	r3, #1
 8004288:	e7f8      	b.n	800427c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800428a:	7889      	ldrb	r1, [r1, #2]
 800428c:	4d30      	ldr	r5, [pc, #192]	; (8004350 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800428e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8004290:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004292:	d8e5      	bhi.n	8004260 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8004294:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004298:	2b02      	cmp	r3, #2
 800429a:	d00c      	beq.n	80042b6 <USBD_StdDevReq+0x156>
 800429c:	2b03      	cmp	r3, #3
 800429e:	d1df      	bne.n	8004260 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80042a0:	b9b1      	cbnz	r1, 80042d0 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042a2:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80042a4:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042a6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80042aa:	f7ff fe4a 	bl	8003f42 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80042ae:	4620      	mov	r0, r4
 80042b0:	f000 f927 	bl	8004502 <USBD_CtlSendStatus>
 80042b4:	e7e4      	b.n	8004280 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80042b6:	2900      	cmp	r1, #0
 80042b8:	d0f9      	beq.n	80042ae <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80042ba:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80042bc:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80042be:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80042c0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff fe31 	bl	8003f2c <USBD_SetClassConfig>
 80042ca:	2802      	cmp	r0, #2
 80042cc:	d1ef      	bne.n	80042ae <USBD_StdDevReq+0x14e>
 80042ce:	e7c7      	b.n	8004260 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80042d0:	6841      	ldr	r1, [r0, #4]
 80042d2:	2901      	cmp	r1, #1
 80042d4:	d0eb      	beq.n	80042ae <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80042d6:	b2c9      	uxtb	r1, r1
 80042d8:	f7ff fe33 	bl	8003f42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80042dc:	7829      	ldrb	r1, [r5, #0]
 80042de:	6061      	str	r1, [r4, #4]
 80042e0:	e7f0      	b.n	80042c4 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80042e2:	88ca      	ldrh	r2, [r1, #6]
 80042e4:	2a01      	cmp	r2, #1
 80042e6:	d1bb      	bne.n	8004260 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80042e8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d003      	beq.n	80042f8 <USBD_StdDevReq+0x198>
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d1b5      	bne.n	8004260 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80042f4:	1d01      	adds	r1, r0, #4
 80042f6:	e764      	b.n	80041c2 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80042f8:	4601      	mov	r1, r0
 80042fa:	2300      	movs	r3, #0
 80042fc:	f841 3f08 	str.w	r3, [r1, #8]!
 8004300:	e75f      	b.n	80041c2 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 8004302:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004306:	3b02      	subs	r3, #2
 8004308:	2b01      	cmp	r3, #1
 800430a:	d8a9      	bhi.n	8004260 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800430c:	2301      	movs	r3, #1
 800430e:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8004310:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004314:	b10b      	cbz	r3, 800431a <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004316:	2303      	movs	r3, #3
 8004318:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800431a:	2202      	movs	r2, #2
 800431c:	f104 010c 	add.w	r1, r4, #12
 8004320:	e74f      	b.n	80041c2 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004322:	884b      	ldrh	r3, [r1, #2]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d1ab      	bne.n	8004280 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8004328:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800432c:	4629      	mov	r1, r5
 800432e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004332:	4620      	mov	r0, r4
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4798      	blx	r3
 8004338:	e7b9      	b.n	80042ae <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800433a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800433e:	3b02      	subs	r3, #2
 8004340:	2b01      	cmp	r3, #1
 8004342:	d88d      	bhi.n	8004260 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004344:	884b      	ldrh	r3, [r1, #2]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d19a      	bne.n	8004280 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800434a:	2300      	movs	r3, #0
 800434c:	e7ec      	b.n	8004328 <USBD_StdDevReq+0x1c8>
 800434e:	bf00      	nop
 8004350:	200002a9 	.word	0x200002a9

08004354 <USBD_StdItfReq>:
{
 8004354:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8004356:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800435a:	4604      	mov	r4, r0
 800435c:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800435e:	2b03      	cmp	r3, #3
 8004360:	d10d      	bne.n	800437e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004362:	790b      	ldrb	r3, [r1, #4]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d80a      	bhi.n	800437e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8004368:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004370:	88eb      	ldrh	r3, [r5, #6]
 8004372:	b913      	cbnz	r3, 800437a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8004374:	4620      	mov	r0, r4
 8004376:	f000 f8c4 	bl	8004502 <USBD_CtlSendStatus>
}
 800437a:	2000      	movs	r0, #0
 800437c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800437e:	f7ff fee3 	bl	8004148 <USBD_CtlError.constprop.0>
    break;
 8004382:	e7fa      	b.n	800437a <USBD_StdItfReq+0x26>

08004384 <USBD_StdEPReq>:
{
 8004384:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8004386:	780a      	ldrb	r2, [r1, #0]
{
 8004388:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);   
 800438a:	888e      	ldrh	r6, [r1, #4]
{
 800438c:	460d      	mov	r5, r1
  if ((req->bmRequest & 0x60) == 0x20)
 800438e:	f002 0260 	and.w	r2, r2, #96	; 0x60
  ep_addr  = LOBYTE(req->wIndex);   
 8004392:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8004394:	2a20      	cmp	r2, #32
 8004396:	d105      	bne.n	80043a4 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8004398:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	4798      	blx	r3
}
 80043a0:	2000      	movs	r0, #0
 80043a2:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80043a4:	784a      	ldrb	r2, [r1, #1]
 80043a6:	2a01      	cmp	r2, #1
 80043a8:	d01c      	beq.n	80043e4 <USBD_StdEPReq+0x60>
 80043aa:	d32a      	bcc.n	8004402 <USBD_StdEPReq+0x7e>
 80043ac:	2a03      	cmp	r2, #3
 80043ae:	d1f7      	bne.n	80043a0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80043b0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80043b4:	2a02      	cmp	r2, #2
 80043b6:	d040      	beq.n	800443a <USBD_StdEPReq+0xb6>
 80043b8:	2a03      	cmp	r2, #3
 80043ba:	d002      	beq.n	80043c2 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 80043bc:	f7ff fec4 	bl	8004148 <USBD_CtlError.constprop.0>
      break;
 80043c0:	e7ee      	b.n	80043a0 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80043c2:	884a      	ldrh	r2, [r1, #2]
 80043c4:	b922      	cbnz	r2, 80043d0 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80043c6:	065e      	lsls	r6, r3, #25
 80043c8:	d002      	beq.n	80043d0 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80043ca:	4619      	mov	r1, r3
 80043cc:	f000 fc60 	bl	8004c90 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80043d0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80043d4:	4629      	mov	r1, r5
 80043d6:	4620      	mov	r0, r4
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80043dc:	4620      	mov	r0, r4
 80043de:	f000 f890 	bl	8004502 <USBD_CtlSendStatus>
 80043e2:	e7dd      	b.n	80043a0 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80043e4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80043e8:	2a02      	cmp	r2, #2
 80043ea:	d026      	beq.n	800443a <USBD_StdEPReq+0xb6>
 80043ec:	2a03      	cmp	r2, #3
 80043ee:	d1e5      	bne.n	80043bc <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80043f0:	884a      	ldrh	r2, [r1, #2]
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	d1d4      	bne.n	80043a0 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80043f6:	0659      	lsls	r1, r3, #25
 80043f8:	d0f0      	beq.n	80043dc <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80043fa:	4619      	mov	r1, r3
 80043fc:	f000 fc56 	bl	8004cac <USBD_LL_ClearStallEP>
 8004400:	e7e6      	b.n	80043d0 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 8004402:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8004406:	2a02      	cmp	r2, #2
 8004408:	d017      	beq.n	800443a <USBD_StdEPReq+0xb6>
 800440a:	2a03      	cmp	r2, #3
 800440c:	d1d6      	bne.n	80043bc <USBD_StdEPReq+0x38>
 800440e:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004412:	f016 0f80 	tst.w	r6, #128	; 0x80
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004416:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004418:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800441c:	bf14      	ite	ne
 800441e:	3514      	addne	r5, #20
 8004420:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004424:	f000 fc50 	bl	8004cc8 <USBD_LL_IsStallEP>
 8004428:	b168      	cbz	r0, 8004446 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 800442a:	2301      	movs	r3, #1
 800442c:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 800442e:	2202      	movs	r2, #2
 8004430:	4629      	mov	r1, r5
 8004432:	4620      	mov	r0, r4
 8004434:	f000 f839 	bl	80044aa <USBD_CtlSendData>
      break;
 8004438:	e7b2      	b.n	80043a0 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800443a:	065a      	lsls	r2, r3, #25
 800443c:	d0b0      	beq.n	80043a0 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800443e:	4619      	mov	r1, r3
 8004440:	f000 fc26 	bl	8004c90 <USBD_LL_StallEP>
 8004444:	e7ac      	b.n	80043a0 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8004446:	6028      	str	r0, [r5, #0]
 8004448:	e7f1      	b.n	800442e <USBD_StdEPReq+0xaa>

0800444a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800444a:	780b      	ldrb	r3, [r1, #0]
 800444c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800444e:	784b      	ldrb	r3, [r1, #1]
 8004450:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8004452:	78ca      	ldrb	r2, [r1, #3]
 8004454:	788b      	ldrb	r3, [r1, #2]
 8004456:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800445a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800445c:	794a      	ldrb	r2, [r1, #5]
 800445e:	790b      	ldrb	r3, [r1, #4]
 8004460:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004464:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8004466:	79ca      	ldrb	r2, [r1, #7]
 8004468:	798b      	ldrb	r3, [r1, #6]
 800446a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800446e:	80c3      	strh	r3, [r0, #6]
 8004470:	4770      	bx	lr

08004472 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004472:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004474:	b188      	cbz	r0, 800449a <USBD_GetString+0x28>
 8004476:	4605      	mov	r5, r0
 8004478:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800447a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2c00      	cmp	r4, #0
 8004482:	d1f9      	bne.n	8004478 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	3801      	subs	r0, #1
 8004488:	3302      	adds	r3, #2
 800448a:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800448c:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800448e:	2303      	movs	r3, #3
 8004490:	704b      	strb	r3, [r1, #1]
 8004492:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8004494:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004498:	b905      	cbnz	r5, 800449c <USBD_GetString+0x2a>
 800449a:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 80044a0:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 80044a2:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	548c      	strb	r4, [r1, r2]
 80044a8:	e7f4      	b.n	8004494 <USBD_GetString+0x22>

080044aa <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80044aa:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80044ac:	2202      	movs	r2, #2
{
 80044ae:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80044b0:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80044b4:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
 80044b6:	6183      	str	r3, [r0, #24]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80044b8:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 80044ba:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80044bc:	f000 fc26 	bl	8004d0c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80044c0:	2000      	movs	r0, #0
 80044c2:	bd10      	pop	{r4, pc}

080044c4 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80044c4:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80044c6:	4613      	mov	r3, r2
 80044c8:	460a      	mov	r2, r1
 80044ca:	2100      	movs	r1, #0
 80044cc:	f000 fc1e 	bl	8004d0c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80044d0:	2000      	movs	r0, #0
 80044d2:	bd08      	pop	{r3, pc}

080044d4 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80044d4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80044d6:	2203      	movs	r2, #3
{
 80044d8:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80044da:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80044de:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
 80044e0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  USBD_LL_PrepareReceive (pdev,
 80044e4:	2100      	movs	r1, #0
  pdev->ep_out[0].rem_length   = len;
 80044e6:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80044ea:	f000 fc1d 	bl	8004d28 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80044ee:	2000      	movs	r0, #0
 80044f0:	bd10      	pop	{r4, pc}

080044f2 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80044f2:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80044f4:	4613      	mov	r3, r2
 80044f6:	460a      	mov	r2, r1
 80044f8:	2100      	movs	r1, #0
 80044fa:	f000 fc15 	bl	8004d28 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80044fe:	2000      	movs	r0, #0
 8004500:	bd08      	pop	{r3, pc}

08004502 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004502:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004504:	2304      	movs	r3, #4
 8004506:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800450a:	2300      	movs	r3, #0
 800450c:	461a      	mov	r2, r3
 800450e:	4619      	mov	r1, r3
 8004510:	f000 fbfc 	bl	8004d0c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004514:	2000      	movs	r0, #0
 8004516:	bd08      	pop	{r3, pc}

08004518 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004518:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800451a:	2305      	movs	r3, #5
 800451c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004520:	2300      	movs	r3, #0
 8004522:	461a      	mov	r2, r3
 8004524:	4619      	mov	r1, r3
 8004526:	f000 fbff 	bl	8004d28 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800452a:	2000      	movs	r0, #0
 800452c:	bd08      	pop	{r3, pc}
	...

08004530 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8004530:	b513      	push	{r0, r1, r4, lr}
   uint8_t MACAddr[6] ;

  heth.Instance = ETH;
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <MX_ETH_Init+0x60>)
  MACAddr[0] = 0x00;
  MACAddr[1] = 0x80;
 8004534:	2280      	movs	r2, #128	; 0x80
  heth.Instance = ETH;
 8004536:	4817      	ldr	r0, [pc, #92]	; (8004594 <MX_ETH_Init+0x64>)
  MACAddr[1] = 0x80;
 8004538:	f88d 2001 	strb.w	r2, [sp, #1]
  MACAddr[2] = 0xE1;
 800453c:	22e1      	movs	r2, #225	; 0xe1
  heth.Instance = ETH;
 800453e:	6003      	str	r3, [r0, #0]
  MACAddr[0] = 0x00;
 8004540:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 8004542:	f88d 2002 	strb.w	r2, [sp, #2]
  MACAddr[0] = 0x00;
 8004546:	f88d 3000 	strb.w	r3, [sp]
  MACAddr[3] = 0x00;
 800454a:	f88d 3003 	strb.w	r3, [sp, #3]
  MACAddr[4] = 0x00;
 800454e:	f88d 3004 	strb.w	r3, [sp, #4]
  MACAddr[5] = 0x00;
 8004552:	f88d 3005 	strb.w	r3, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004556:	2301      	movs	r3, #1
  heth.Init.MACAddr = &MACAddr[0];
 8004558:	f8c0 d004 	str.w	sp, [r0, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800455c:	7203      	strb	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800455e:	4b0e      	ldr	r3, [pc, #56]	; (8004598 <MX_ETH_Init+0x68>)
 8004560:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004562:	4b0e      	ldr	r3, [pc, #56]	; (800459c <MX_ETH_Init+0x6c>)
 8004564:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 8004566:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800456a:	6143      	str	r3, [r0, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800456c:	f7fc fa6e 	bl	8000a4c <HAL_ETH_Init>
 8004570:	b108      	cbz	r0, 8004576 <MX_ETH_Init+0x46>
  {
    Error_Handler();
 8004572:	f000 f9a9 	bl	80048c8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004576:	4c0a      	ldr	r4, [pc, #40]	; (80045a0 <MX_ETH_Init+0x70>)
 8004578:	2234      	movs	r2, #52	; 0x34
 800457a:	2100      	movs	r1, #0
 800457c:	4620      	mov	r0, r4
 800457e:	f000 fc97 	bl	8004eb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004582:	2321      	movs	r3, #33	; 0x21
 8004584:	6023      	str	r3, [r4, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004586:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800458a:	6163      	str	r3, [r4, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;

}
 800458c:	b002      	add	sp, #8
 800458e:	bd10      	pop	{r4, pc}
 8004590:	40028000 	.word	0x40028000
 8004594:	200002b8 	.word	0x200002b8
 8004598:	20000228 	.word	0x20000228
 800459c:	200001c8 	.word	0x200001c8
 80045a0:	20000320 	.word	0x20000320

080045a4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	b08c      	sub	sp, #48	; 0x30
 80045a8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045aa:	2214      	movs	r2, #20
 80045ac:	2100      	movs	r1, #0
 80045ae:	a807      	add	r0, sp, #28
 80045b0:	f000 fc7e 	bl	8004eb0 <memset>
  if(ethHandle->Instance==ETH)
 80045b4:	6822      	ldr	r2, [r4, #0]
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <HAL_ETH_MspInit+0x11c>)
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d17f      	bne.n	80046bc <HAL_ETH_MspInit+0x118>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80045bc:	4b41      	ldr	r3, [pc, #260]	; (80046c4 <HAL_ETH_MspInit+0x120>)
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045be:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045c0:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045c2:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80045c4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ca:	483f      	ldr	r0, [pc, #252]	; (80046c8 <HAL_ETH_MspInit+0x124>)
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80045cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045d0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80045d4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80045d8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80045dc:	9200      	str	r2, [sp, #0]
 80045de:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80045e0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80045e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045e8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80045ec:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80045f0:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80045f4:	9201      	str	r2, [sp, #4]
 80045f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80045f8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80045fc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004600:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8004604:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004608:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800460c:	9202      	str	r2, [sp, #8]
 800460e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004610:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004614:	f042 0204 	orr.w	r2, r2, #4
 8004618:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800461c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004620:	f002 0204 	and.w	r2, r2, #4
 8004624:	9203      	str	r2, [sp, #12]
 8004626:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004638:	f002 0201 	and.w	r2, r2, #1
 800463c:	9204      	str	r2, [sp, #16]
 800463e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004640:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004644:	f042 0202 	orr.w	r2, r2, #2
 8004648:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800464c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004650:	f002 0202 	and.w	r2, r2, #2
 8004654:	9205      	str	r2, [sp, #20]
 8004656:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800465c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004660:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004668:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800466e:	950b      	str	r5, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004670:	9306      	str	r3, [sp, #24]
 8004672:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004674:	2332      	movs	r3, #50	; 0x32
 8004676:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004678:	f7fc fb28 	bl	8000ccc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800467c:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800467e:	a907      	add	r1, sp, #28
 8004680:	4812      	ldr	r0, [pc, #72]	; (80046cc <HAL_ETH_MspInit+0x128>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004682:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004684:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004686:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004688:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800468a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800468c:	f7fc fb1e 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004694:	a907      	add	r1, sp, #28
 8004696:	480e      	ldr	r0, [pc, #56]	; (80046d0 <HAL_ETH_MspInit+0x12c>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004698:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469a:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469e:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046a0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80046a2:	f7fc fb13 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80046a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046aa:	a907      	add	r1, sp, #28
 80046ac:	4809      	ldr	r0, [pc, #36]	; (80046d4 <HAL_ETH_MspInit+0x130>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80046ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046b2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046b4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046b6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046b8:	f7fc fb08 	bl	8000ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80046bc:	b00c      	add	sp, #48	; 0x30
 80046be:	bd70      	pop	{r4, r5, r6, pc}
 80046c0:	40028000 	.word	0x40028000
 80046c4:	58024400 	.word	0x58024400
 80046c8:	58020800 	.word	0x58020800
 80046cc:	58020000 	.word	0x58020000
 80046d0:	58020400 	.word	0x58020400
 80046d4:	58021800 	.word	0x58021800

080046d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046da:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046dc:	2214      	movs	r2, #20
 80046de:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80046e0:	4f40      	ldr	r7, [pc, #256]	; (80047e4 <MX_GPIO_Init+0x10c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e2:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80046e4:	4d40      	ldr	r5, [pc, #256]	; (80047e8 <MX_GPIO_Init+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e6:	f000 fbe3 	bl	8004eb0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046ea:	4b40      	ldr	r3, [pc, #256]	; (80047ec <MX_GPIO_Init+0x114>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80046ec:	4638      	mov	r0, r7
 80046ee:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046f6:	2400      	movs	r4, #0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046f8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fa:	f042 0204 	orr.w	r2, r2, #4
 80046fe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004702:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004706:	f002 0204 	and.w	r2, r2, #4
 800470a:	9201      	str	r2, [sp, #4]
 800470c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800470e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004716:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800471a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800471e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004722:	9202      	str	r2, [sp, #8]
 8004724:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004726:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004732:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004736:	f002 0201 	and.w	r2, r2, #1
 800473a:	9203      	str	r2, [sp, #12]
 800473c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800473e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004742:	f042 0202 	orr.w	r2, r2, #2
 8004746:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800474a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800474e:	f002 0202 	and.w	r2, r2, #2
 8004752:	9204      	str	r2, [sp, #16]
 8004754:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004756:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800475a:	f042 0208 	orr.w	r2, r2, #8
 800475e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004762:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004766:	f002 0208 	and.w	r2, r2, #8
 800476a:	9205      	str	r2, [sp, #20]
 800476c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800476e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004776:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800477a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800477c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	9306      	str	r3, [sp, #24]
 8004786:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8004788:	f7fc fb8a 	bl	8000ea0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800478c:	2200      	movs	r2, #0
 800478e:	4628      	mov	r0, r5
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	f7fc fb85 	bl	8000ea0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800479a:	a907      	add	r1, sp, #28
 800479c:	4814      	ldr	r0, [pc, #80]	; (80047f0 <MX_GPIO_Init+0x118>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800479e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047a0:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <MX_GPIO_Init+0x11c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047a4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80047a6:	f7fc fa91 	bl	8000ccc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80047aa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ae:	a907      	add	r1, sp, #28
 80047b0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047b2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80047b4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ba:	f7fc fa87 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80047be:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80047c0:	a907      	add	r1, sp, #28
 80047c2:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047c4:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80047c6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ca:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80047cc:	f7fc fa7e 	bl	8000ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80047d0:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80047d2:	a907      	add	r1, sp, #28
 80047d4:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047d6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80047d8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047da:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80047dc:	f7fc fa76 	bl	8000ccc <HAL_GPIO_Init>

}
 80047e0:	b00d      	add	sp, #52	; 0x34
 80047e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047e4:	58020400 	.word	0x58020400
 80047e8:	58021800 	.word	0x58021800
 80047ec:	58024400 	.word	0x58024400
 80047f0:	58020800 	.word	0x58020800
 80047f4:	11110000 	.word	0x11110000

080047f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047f8:	b530      	push	{r4, r5, lr}
 80047fa:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047fc:	224c      	movs	r2, #76	; 0x4c
 80047fe:	2100      	movs	r1, #0
 8004800:	a80a      	add	r0, sp, #40	; 0x28
 8004802:	f000 fb55 	bl	8004eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004806:	2220      	movs	r2, #32
 8004808:	2100      	movs	r1, #0
 800480a:	a802      	add	r0, sp, #8
 800480c:	f000 fb50 	bl	8004eb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004810:	22bc      	movs	r2, #188	; 0xbc
 8004812:	2100      	movs	r1, #0
 8004814:	a81d      	add	r0, sp, #116	; 0x74
 8004816:	f000 fb4b 	bl	8004eb0 <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <SystemClock_Config+0xac>)
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	f022 0204 	bic.w	r2, r2, #4
 8004822:	60da      	str	r2, [r3, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004824:	2200      	movs	r2, #0
 8004826:	9201      	str	r2, [sp, #4]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800482e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004832:	619a      	str	r2, [r3, #24]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800483a:	9201      	str	r2, [sp, #4]
 800483c:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 800483e:	699a      	ldr	r2, [r3, #24]
 8004840:	0492      	lsls	r2, r2, #18
 8004842:	d5fc      	bpl.n	800483e <SystemClock_Config+0x46>
    
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004844:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 24;
 8004848:	2218      	movs	r2, #24
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800484a:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800484c:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800484e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004850:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 24;
 8004852:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004854:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004856:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004858:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800485a:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800485c:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800485e:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004860:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004862:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004864:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004866:	950a      	str	r5, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004868:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800486a:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800486c:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800486e:	f7fc ffef 	bl	8001850 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004872:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004874:	4629      	mov	r1, r5
 8004876:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004878:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800487a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800487c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800487e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004880:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8004882:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8004884:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8004886:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8004888:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800488a:	f7fd fac7 	bl	8001e1c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <SystemClock_Config+0xb0>)
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004890:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004892:	943a      	str	r4, [sp, #232]	; 0xe8
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8004894:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004896:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800489a:	933e      	str	r3, [sp, #248]	; 0xf8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800489c:	f7fd fcaa 	bl	80021f4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80048a0:	b04d      	add	sp, #308	; 0x134
 80048a2:	bd30      	pop	{r4, r5, pc}
 80048a4:	58024800 	.word	0x58024800
 80048a8:	00040002 	.word	0x00040002

080048ac <main>:
{
 80048ac:	b508      	push	{r3, lr}
  HAL_Init();
 80048ae:	f7fb febf 	bl	8000630 <HAL_Init>
  SystemClock_Config();
 80048b2:	f7ff ffa1 	bl	80047f8 <SystemClock_Config>
  MX_GPIO_Init();
 80048b6:	f7ff ff0f 	bl	80046d8 <MX_GPIO_Init>
  MX_ETH_Init();
 80048ba:	f7ff fe39 	bl	8004530 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80048be:	f000 f859 	bl	8004974 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80048c2:	f000 f8b1 	bl	8004a28 <MX_USB_DEVICE_Init>
 80048c6:	e7fe      	b.n	80048c6 <main+0x1a>

080048c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048c8:	4770      	bx	lr
	...

080048cc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <HAL_MspInit+0x20>)
{
 80048ce:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048d0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80048d4:	f042 0202 	orr.w	r2, r2, #2
 80048d8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80048dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048e8:	b002      	add	sp, #8
 80048ea:	4770      	bx	lr
 80048ec:	58024400 	.word	0x58024400

080048f0 <NMI_Handler>:
 80048f0:	4770      	bx	lr

080048f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048f2:	e7fe      	b.n	80048f2 <HardFault_Handler>

080048f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048f4:	e7fe      	b.n	80048f4 <MemManage_Handler>

080048f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048f6:	e7fe      	b.n	80048f6 <BusFault_Handler>

080048f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048f8:	e7fe      	b.n	80048f8 <UsageFault_Handler>

080048fa <SVC_Handler>:
 80048fa:	4770      	bx	lr

080048fc <DebugMon_Handler>:
 80048fc:	4770      	bx	lr

080048fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048fe:	4770      	bx	lr

08004900 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004900:	f7fb bea6 	b.w	8000650 <HAL_IncTick>

08004904 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004904:	4801      	ldr	r0, [pc, #4]	; (800490c <OTG_FS_IRQHandler+0x8>)
 8004906:	f7fc bb4f 	b.w	8000fa8 <HAL_PCD_IRQHandler>
 800490a:	bf00      	nop
 800490c:	200015f8 	.word	0x200015f8

08004910 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004910:	4914      	ldr	r1, [pc, #80]	; (8004964 <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8004912:	4815      	ldr	r0, [pc, #84]	; (8004968 <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004914:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 800491c:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8004922:	4b12      	ldr	r3, [pc, #72]	; (800496c <SystemInit+0x5c>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800492c:	2200      	movs	r2, #0
 800492e:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8004930:	681c      	ldr	r4, [r3, #0]
 8004932:	4020      	ands	r0, r4
 8004934:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004936:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004938:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800493a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800493c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8004940:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004942:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8004944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004946:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8004948:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800494a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004952:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004954:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8004956:	2201      	movs	r2, #1
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <SystemInit+0x60>)
 800495a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800495c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004960:	608b      	str	r3, [r1, #8]
 8004962:	bd10      	pop	{r4, pc}
 8004964:	e000ed00 	.word	0xe000ed00
 8004968:	eaf6ed7f 	.word	0xeaf6ed7f
 800496c:	58024400 	.word	0x58024400
 8004970:	51008108 	.word	0x51008108

08004974 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004974:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8004976:	480e      	ldr	r0, [pc, #56]	; (80049b0 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 115200;
 8004978:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <MX_USART3_UART_Init+0x40>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 800497e:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8004980:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004984:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004986:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004988:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800498a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800498c:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800498e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004990:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004992:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8004994:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8004996:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8004998:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 800499a:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800499c:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800499e:	f7fe fd6b 	bl	8003478 <HAL_UART_Init>
 80049a2:	b118      	cbz	r0, 80049ac <MX_USART3_UART_Init+0x38>
  {
    Error_Handler();
  }

}
 80049a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80049a8:	f7ff bf8e 	b.w	80048c8 <Error_Handler>
 80049ac:	bd08      	pop	{r3, pc}
 80049ae:	bf00      	nop
 80049b0:	20000354 	.word	0x20000354
 80049b4:	40004800 	.word	0x40004800

080049b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049b8:	b510      	push	{r4, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049be:	2214      	movs	r2, #20
 80049c0:	2100      	movs	r1, #0
 80049c2:	a803      	add	r0, sp, #12
 80049c4:	f000 fa74 	bl	8004eb0 <memset>
  if(uartHandle->Instance==USART3)
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <HAL_UART_MspInit+0x64>)
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d123      	bne.n	8004a18 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80049d0:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049d2:	a903      	add	r1, sp, #12
 80049d4:	4813      	ldr	r0, [pc, #76]	; (8004a24 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80049d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80049da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80049de:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80049e2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80049e6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80049ea:	9201      	str	r2, [sp, #4]
 80049ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80049ee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80049f2:	f042 0208 	orr.w	r2, r2, #8
 80049f6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80049fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	9302      	str	r3, [sp, #8]
 8004a04:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8004a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a0a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004a10:	2307      	movs	r3, #7
 8004a12:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a14:	f7fc f95a 	bl	8000ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004a18:	b008      	add	sp, #32
 8004a1a:	bd10      	pop	{r4, pc}
 8004a1c:	40004800 	.word	0x40004800
 8004a20:	58024400 	.word	0x58024400
 8004a24:	58020c00 	.word	0x58020c00

08004a28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004a28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8004a2a:	4c0a      	ldr	r4, [pc, #40]	; (8004a54 <MX_USB_DEVICE_Init+0x2c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	490a      	ldr	r1, [pc, #40]	; (8004a58 <MX_USB_DEVICE_Init+0x30>)
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff fa5a 	bl	8003eea <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8004a36:	4909      	ldr	r1, [pc, #36]	; (8004a5c <MX_USB_DEVICE_Init+0x34>)
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7ff fa6b 	bl	8003f14 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8004a3e:	4908      	ldr	r1, [pc, #32]	; (8004a60 <MX_USB_DEVICE_Init+0x38>)
 8004a40:	4620      	mov	r0, r4
 8004a42:	f7ff fa2a 	bl	8003e9a <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8004a46:	4620      	mov	r0, r4
 8004a48:	f7ff fa6b 	bl	8003f22 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_PWREx_EnableUSBVoltageDetector();
 8004a50:	f7fc bef6 	b.w	8001840 <HAL_PWREx_EnableUSBVoltageDetector>
 8004a54:	200003d4 	.word	0x200003d4
 8004a58:	20000130 	.word	0x20000130
 8004a5c:	20000008 	.word	0x20000008
 8004a60:	20000120 	.word	0x20000120

08004a64 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8004a64:	2000      	movs	r0, #0
 8004a66:	4770      	bx	lr

08004a68 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8004a68:	2000      	movs	r0, #0
 8004a6a:	4770      	bx	lr

08004a6c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8004a6c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8004a6e:	4c05      	ldr	r4, [pc, #20]	; (8004a84 <CDC_Receive_FS+0x18>)
 8004a70:	4601      	mov	r1, r0
 8004a72:	4620      	mov	r0, r4
 8004a74:	f7ff fa20 	bl	8003eb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff fa23 	bl	8003ec4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8004a7e:	2000      	movs	r0, #0
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	bf00      	nop
 8004a84:	200003d4 	.word	0x200003d4

08004a88 <CDC_Init_FS>:
{
 8004a88:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8004a8a:	4c06      	ldr	r4, [pc, #24]	; (8004aa4 <CDC_Init_FS+0x1c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	4906      	ldr	r1, [pc, #24]	; (8004aa8 <CDC_Init_FS+0x20>)
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff fa09 	bl	8003ea8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8004a96:	4905      	ldr	r1, [pc, #20]	; (8004aac <CDC_Init_FS+0x24>)
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7ff fa0d 	bl	8003eb8 <USBD_CDC_SetRxBuffer>
}
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	bd10      	pop	{r4, pc}
 8004aa2:	bf00      	nop
 8004aa4:	200003d4 	.word	0x200003d4
 8004aa8:	20000df8 	.word	0x20000df8
 8004aac:	200005f8 	.word	0x200005f8

08004ab0 <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8004ab0:	6802      	ldr	r2, [r0, #0]
 8004ab2:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_PCD_MspInit+0x68>)
 8004ab4:	429a      	cmp	r2, r3
{
 8004ab6:	b510      	push	{r4, lr}
 8004ab8:	b086      	sub	sp, #24
  if(pcdHandle->Instance==USB_OTG_FS)
 8004aba:	d12b      	bne.n	8004b14 <HAL_PCD_MspInit+0x64>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004abc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac0:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac2:	a901      	add	r1, sp, #4
 8004ac4:	4815      	ldr	r0, [pc, #84]	; (8004b1c <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8004ac6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ac8:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aca:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004acc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004ace:	230a      	movs	r3, #10
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004ad2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad4:	f7fc f8fa 	bl	8000ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004adc:	a901      	add	r1, sp, #4
 8004ade:	480f      	ldr	r0, [pc, #60]	; (8004b1c <HAL_PCD_MspInit+0x6c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8004ae0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ae2:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae4:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004ae6:	f7fc f8f1 	bl	8000ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004aea:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <HAL_PCD_MspInit+0x70>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004aec:	2065      	movs	r0, #101	; 0x65
 8004aee:	4621      	mov	r1, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004af0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8004af4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004af8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004afc:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004afe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004b0a:	f7fb fde1 	bl	80006d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004b0e:	2065      	movs	r0, #101	; 0x65
 8004b10:	f7fb fe16 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004b14:	b006      	add	sp, #24
 8004b16:	bd10      	pop	{r4, pc}
 8004b18:	40080000 	.word	0x40080000
 8004b1c:	58020000 	.word	0x58020000
 8004b20:	58024400 	.word	0x58024400

08004b24 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004b24:	f500 716f 	add.w	r1, r0, #956	; 0x3bc
 8004b28:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004b2c:	f7ff ba10 	b.w	8003f50 <USBD_LL_SetupStage>

08004b30 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004b30:	231c      	movs	r3, #28
 8004b32:	fb03 0301 	mla	r3, r3, r1, r0
 8004b36:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004b3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004b3e:	f7ff ba34 	b.w	8003faa <USBD_LL_DataOutStage>

08004b42 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004b42:	231c      	movs	r3, #28
 8004b44:	fb03 0301 	mla	r3, r3, r1, r0
 8004b48:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4e:	f7ff ba5e 	b.w	800400e <USBD_LL_DataInStage>

08004b52 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004b52:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004b56:	f7ff bada 	b.w	800410e <USBD_LL_SOF>

08004b5a <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8004b5a:	68c1      	ldr	r1, [r0, #12]
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004b5c:	3100      	adds	r1, #0
{ 
 8004b5e:	b510      	push	{r4, lr}
 8004b60:	4604      	mov	r4, r0
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004b62:	bf18      	it	ne
 8004b64:	2101      	movne	r1, #1
 8004b66:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004b6a:	f7ff fabe 	bl	80040ea <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004b6e:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 8004b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004b76:	f7ff ba99 	b.w	80040ac <USBD_LL_Reset>
	...

08004b7c <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004b80:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004b84:	f7ff fab4 	bl	80040f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004b96:	6a23      	ldr	r3, [r4, #32]
 8004b98:	b123      	cbz	r3, 8004ba4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004b9a:	4a03      	ldr	r2, [pc, #12]	; (8004ba8 <HAL_PCD_SuspendCallback+0x2c>)
 8004b9c:	6913      	ldr	r3, [r2, #16]
 8004b9e:	f043 0306 	orr.w	r3, r3, #6
 8004ba2:	6113      	str	r3, [r2, #16]
 8004ba4:	bd10      	pop	{r4, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004bac:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004bb0:	f7ff baa7 	b.w	8004102 <USBD_LL_Resume>

08004bb4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004bb4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004bb8:	f7ff bab7 	b.w	800412a <USBD_LL_IsoOUTIncomplete>

08004bbc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8004bbc:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004bc0:	f7ff bab1 	b.w	8004126 <USBD_LL_IsoINIncomplete>

08004bc4 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8004bc4:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004bc8:	f7ff bab1 	b.w	800412e <USBD_LL_DevConnected>

08004bcc <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8004bcc:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8004bd0:	f7ff baaf 	b.w	8004132 <USBD_LL_DevDisconnected>

08004bd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8004bd4:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8004bd6:	7802      	ldrb	r2, [r0, #0]
 8004bd8:	bb42      	cbnz	r2, 8004c2c <USBD_LL_Init+0x58>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <USBD_LL_Init+0x5c>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004bdc:	2109      	movs	r1, #9
  hpcd_USB_OTG_FS.pData = pdev;
 8004bde:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8004be2:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004be6:	4813      	ldr	r0, [pc, #76]	; (8004c34 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004be8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004bea:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004bec:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004bf2:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004bf6:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004bf8:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004bfa:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004bfc:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004bfe:	2101      	movs	r1, #1
 8004c00:	61d9      	str	r1, [r3, #28]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8004c02:	6259      	str	r1, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004c04:	62d9      	str	r1, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004c06:	f7fc f950 	bl	8000eaa <HAL_PCD_Init>
 8004c0a:	b108      	cbz	r0, 8004c10 <USBD_LL_Init+0x3c>
  {
    Error_Handler( );
 8004c0c:	f7ff fe5c 	bl	80048c8 <Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	4807      	ldr	r0, [pc, #28]	; (8004c30 <USBD_LL_Init+0x5c>)
 8004c14:	f7fc fdee 	bl	80017f4 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4804      	ldr	r0, [pc, #16]	; (8004c30 <USBD_LL_Init+0x5c>)
 8004c1e:	f7fc fdc9 	bl	80017b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8004c22:	2280      	movs	r2, #128	; 0x80
 8004c24:	2101      	movs	r1, #1
 8004c26:	4802      	ldr	r0, [pc, #8]	; (8004c30 <USBD_LL_Init+0x5c>)
 8004c28:	f7fc fdc4 	bl	80017b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	bd08      	pop	{r3, pc}
 8004c30:	200015f8 	.word	0x200015f8
 8004c34:	40080000 	.word	0x40080000

08004c38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8004c38:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8004c3a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c3e:	f7fc f9a9 	bl	8000f94 <HAL_PCD_Start>
 8004c42:	2803      	cmp	r0, #3
 8004c44:	bf9a      	itte	ls
 8004c46:	4b02      	ldrls	r3, [pc, #8]	; (8004c50 <USBD_LL_Start+0x18>)
 8004c48:	5c18      	ldrbls	r0, [r3, r0]
 8004c4a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004c4c:	bd08      	pop	{r3, pc}
 8004c4e:	bf00      	nop
 8004c50:	080050ce 	.word	0x080050ce

08004c54 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004c54:	b510      	push	{r4, lr}
 8004c56:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004c58:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	4622      	mov	r2, r4
 8004c60:	f7fc fcb4 	bl	80015cc <HAL_PCD_EP_Open>
 8004c64:	2803      	cmp	r0, #3
 8004c66:	bf9a      	itte	ls
 8004c68:	4b01      	ldrls	r3, [pc, #4]	; (8004c70 <USBD_LL_OpenEP+0x1c>)
 8004c6a:	5c18      	ldrbls	r0, [r3, r0]
 8004c6c:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004c6e:	bd10      	pop	{r4, pc}
 8004c70:	080050ce 	.word	0x080050ce

08004c74 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c74:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8004c76:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c7a:	f7fc fcd7 	bl	800162c <HAL_PCD_EP_Close>
 8004c7e:	2803      	cmp	r0, #3
 8004c80:	bf9a      	itte	ls
 8004c82:	4b02      	ldrls	r3, [pc, #8]	; (8004c8c <USBD_LL_CloseEP+0x18>)
 8004c84:	5c18      	ldrbls	r0, [r3, r0]
 8004c86:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004c88:	bd08      	pop	{r3, pc}
 8004c8a:	bf00      	nop
 8004c8c:	080050ce 	.word	0x080050ce

08004c90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004c90:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004c92:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004c96:	f7fc fd38 	bl	800170a <HAL_PCD_EP_SetStall>
 8004c9a:	2803      	cmp	r0, #3
 8004c9c:	bf9a      	itte	ls
 8004c9e:	4b02      	ldrls	r3, [pc, #8]	; (8004ca8 <USBD_LL_StallEP+0x18>)
 8004ca0:	5c18      	ldrbls	r0, [r3, r0]
 8004ca2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004ca4:	bd08      	pop	{r3, pc}
 8004ca6:	bf00      	nop
 8004ca8:	080050ce 	.word	0x080050ce

08004cac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004cac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004cae:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004cb2:	f7fc fd59 	bl	8001768 <HAL_PCD_EP_ClrStall>
 8004cb6:	2803      	cmp	r0, #3
 8004cb8:	bf9a      	itte	ls
 8004cba:	4b02      	ldrls	r3, [pc, #8]	; (8004cc4 <USBD_LL_ClearStallEP+0x18>)
 8004cbc:	5c18      	ldrbls	r0, [r3, r0]
 8004cbe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004cc0:	bd08      	pop	{r3, pc}
 8004cc2:	bf00      	nop
 8004cc4:	080050ce 	.word	0x080050ce

08004cc8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8004cc8:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004ccc:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8004cd0:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004cd4:	bf17      	itett	ne
 8004cd6:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004cda:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004cde:	fb02 3101 	mlane	r1, r2, r1, r3
 8004ce2:	f891 003a 	ldrbne.w	r0, [r1, #58]	; 0x3a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004ce6:	bf08      	it	eq
 8004ce8:	f891 01fa 	ldrbeq.w	r0, [r1, #506]	; 0x1fa
  }
}
 8004cec:	4770      	bx	lr
	...

08004cf0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004cf0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004cf2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004cf6:	f7fc fc57 	bl	80015a8 <HAL_PCD_SetAddress>
 8004cfa:	2803      	cmp	r0, #3
 8004cfc:	bf9a      	itte	ls
 8004cfe:	4b02      	ldrls	r3, [pc, #8]	; (8004d08 <USBD_LL_SetUSBAddress+0x18>)
 8004d00:	5c18      	ldrbls	r0, [r3, r0]
 8004d02:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004d04:	bd08      	pop	{r3, pc}
 8004d06:	bf00      	nop
 8004d08:	080050ce 	.word	0x080050ce

08004d0c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004d0c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004d0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004d12:	f7fc fcda 	bl	80016ca <HAL_PCD_EP_Transmit>
 8004d16:	2803      	cmp	r0, #3
 8004d18:	bf9a      	itte	ls
 8004d1a:	4b02      	ldrls	r3, [pc, #8]	; (8004d24 <USBD_LL_Transmit+0x18>)
 8004d1c:	5c18      	ldrbls	r0, [r3, r0]
 8004d1e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004d20:	bd08      	pop	{r3, pc}
 8004d22:	bf00      	nop
 8004d24:	080050ce 	.word	0x080050ce

08004d28 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004d28:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004d2a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004d2e:	f7fc fca0 	bl	8001672 <HAL_PCD_EP_Receive>
 8004d32:	2803      	cmp	r0, #3
 8004d34:	bf9a      	itte	ls
 8004d36:	4b02      	ldrls	r3, [pc, #8]	; (8004d40 <USBD_LL_PrepareReceive+0x18>)
 8004d38:	5c18      	ldrbls	r0, [r3, r0]
 8004d3a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004d3c:	bd08      	pop	{r3, pc}
 8004d3e:	bf00      	nop
 8004d40:	080050ce 	.word	0x080050ce

08004d44 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004d44:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8004d46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004d4a:	f7fc fcb6 	bl	80016ba <HAL_PCD_EP_GetRxCount>
}
 8004d4e:	bd08      	pop	{r3, pc}

08004d50 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8004d50:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8004d52:	4801      	ldr	r0, [pc, #4]	; (8004d58 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8004d54:	800b      	strh	r3, [r1, #0]
}
 8004d56:	4770      	bx	lr
 8004d58:	2000014c 	.word	0x2000014c

08004d5c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8004d5c:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8004d5e:	4801      	ldr	r0, [pc, #4]	; (8004d64 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8004d60:	800b      	strh	r3, [r1, #0]
}
 8004d62:	4770      	bx	lr
 8004d64:	20000160 	.word	0x20000160

08004d68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004d68:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004d6a:	4c04      	ldr	r4, [pc, #16]	; (8004d7c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	4804      	ldr	r0, [pc, #16]	; (8004d80 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8004d70:	4621      	mov	r1, r4
 8004d72:	f7ff fb7e 	bl	8004472 <USBD_GetString>
  return USBD_StrDesc;
}
 8004d76:	4620      	mov	r0, r4
 8004d78:	bd10      	pop	{r4, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200019f8 	.word	0x200019f8
 8004d80:	080050eb 	.word	0x080050eb

08004d84 <USBD_FS_ProductStrDescriptor>:
{
 8004d84:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8004d86:	4c04      	ldr	r4, [pc, #16]	; (8004d98 <USBD_FS_ProductStrDescriptor+0x14>)
 8004d88:	460a      	mov	r2, r1
 8004d8a:	4804      	ldr	r0, [pc, #16]	; (8004d9c <USBD_FS_ProductStrDescriptor+0x18>)
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	f7ff fb70 	bl	8004472 <USBD_GetString>
}
 8004d92:	4620      	mov	r0, r4
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	bf00      	nop
 8004d98:	200019f8 	.word	0x200019f8
 8004d9c:	080050fe 	.word	0x080050fe

08004da0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004da0:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8004da2:	4c04      	ldr	r4, [pc, #16]	; (8004db4 <USBD_FS_SerialStrDescriptor+0x14>)
 8004da4:	460a      	mov	r2, r1
 8004da6:	4804      	ldr	r0, [pc, #16]	; (8004db8 <USBD_FS_SerialStrDescriptor+0x18>)
 8004da8:	4621      	mov	r1, r4
 8004daa:	f7ff fb62 	bl	8004472 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004dae:	4620      	mov	r0, r4
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	bf00      	nop
 8004db4:	200019f8 	.word	0x200019f8
 8004db8:	08005114 	.word	0x08005114

08004dbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dbc:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8004dbe:	4c04      	ldr	r4, [pc, #16]	; (8004dd0 <USBD_FS_ConfigStrDescriptor+0x14>)
 8004dc0:	460a      	mov	r2, r1
 8004dc2:	4804      	ldr	r0, [pc, #16]	; (8004dd4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8004dc4:	4621      	mov	r1, r4
 8004dc6:	f7ff fb54 	bl	8004472 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004dca:	4620      	mov	r0, r4
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	bf00      	nop
 8004dd0:	200019f8 	.word	0x200019f8
 8004dd4:	080050d2 	.word	0x080050d2

08004dd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004dd8:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8004dda:	4c04      	ldr	r4, [pc, #16]	; (8004dec <USBD_FS_InterfaceStrDescriptor+0x14>)
 8004ddc:	460a      	mov	r2, r1
 8004dde:	4804      	ldr	r0, [pc, #16]	; (8004df0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8004de0:	4621      	mov	r1, r4
 8004de2:	f7ff fb46 	bl	8004472 <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8004de6:	4620      	mov	r0, r4
 8004de8:	bd10      	pop	{r4, pc}
 8004dea:	bf00      	nop
 8004dec:	200019f8 	.word	0x200019f8
 8004df0:	080050dd 	.word	0x080050dd

08004df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004df8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dfa:	e003      	b.n	8004e04 <LoopCopyDataInit>

08004dfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004dfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e02:	3104      	adds	r1, #4

08004e04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e04:	480b      	ldr	r0, [pc, #44]	; (8004e34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e06:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e0c:	d3f6      	bcc.n	8004dfc <CopyDataInit>
  ldr  r2, =_sbss
 8004e0e:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e10:	e002      	b.n	8004e18 <LoopFillZerobss>

08004e12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e14:	f842 3b04 	str.w	r3, [r2], #4

08004e18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e1c:	d3f9      	bcc.n	8004e12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e1e:	f7ff fd77 	bl	8004910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e22:	f000 f811 	bl	8004e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e26:	f7ff fd41 	bl	80048ac <main>
  bx  lr    
 8004e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004e30:	08005134 	.word	0x08005134
  ldr  r0, =_sdata
 8004e34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e38:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8004e3c:	20000288 	.word	0x20000288
  ldr  r3, = _ebss
 8004e40:	20001bfc 	.word	0x20001bfc

08004e44 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e44:	e7fe      	b.n	8004e44 <ADC3_IRQHandler>
	...

08004e48 <__libc_init_array>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4e0d      	ldr	r6, [pc, #52]	; (8004e80 <__libc_init_array+0x38>)
 8004e4c:	4c0d      	ldr	r4, [pc, #52]	; (8004e84 <__libc_init_array+0x3c>)
 8004e4e:	1ba4      	subs	r4, r4, r6
 8004e50:	10a4      	asrs	r4, r4, #2
 8004e52:	2500      	movs	r5, #0
 8004e54:	42a5      	cmp	r5, r4
 8004e56:	d109      	bne.n	8004e6c <__libc_init_array+0x24>
 8004e58:	4e0b      	ldr	r6, [pc, #44]	; (8004e88 <__libc_init_array+0x40>)
 8004e5a:	4c0c      	ldr	r4, [pc, #48]	; (8004e8c <__libc_init_array+0x44>)
 8004e5c:	f000 f8fc 	bl	8005058 <_init>
 8004e60:	1ba4      	subs	r4, r4, r6
 8004e62:	10a4      	asrs	r4, r4, #2
 8004e64:	2500      	movs	r5, #0
 8004e66:	42a5      	cmp	r5, r4
 8004e68:	d105      	bne.n	8004e76 <__libc_init_array+0x2e>
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e70:	4798      	blx	r3
 8004e72:	3501      	adds	r5, #1
 8004e74:	e7ee      	b.n	8004e54 <__libc_init_array+0xc>
 8004e76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e7a:	4798      	blx	r3
 8004e7c:	3501      	adds	r5, #1
 8004e7e:	e7f2      	b.n	8004e66 <__libc_init_array+0x1e>
 8004e80:	0800512c 	.word	0x0800512c
 8004e84:	0800512c 	.word	0x0800512c
 8004e88:	0800512c 	.word	0x0800512c
 8004e8c:	08005130 	.word	0x08005130

08004e90 <malloc>:
 8004e90:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <malloc+0xc>)
 8004e92:	4601      	mov	r1, r0
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	f000 b861 	b.w	8004f5c <_malloc_r>
 8004e9a:	bf00      	nop
 8004e9c:	20000164 	.word	0x20000164

08004ea0 <free>:
 8004ea0:	4b02      	ldr	r3, [pc, #8]	; (8004eac <free+0xc>)
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	f000 b80b 	b.w	8004ec0 <_free_r>
 8004eaa:	bf00      	nop
 8004eac:	20000164 	.word	0x20000164

08004eb0 <memset>:
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d100      	bne.n	8004eba <memset+0xa>
 8004eb8:	4770      	bx	lr
 8004eba:	f803 1b01 	strb.w	r1, [r3], #1
 8004ebe:	e7f9      	b.n	8004eb4 <memset+0x4>

08004ec0 <_free_r>:
 8004ec0:	b538      	push	{r3, r4, r5, lr}
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	d045      	beq.n	8004f54 <_free_r+0x94>
 8004ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ecc:	1f0c      	subs	r4, r1, #4
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfb8      	it	lt
 8004ed2:	18e4      	addlt	r4, r4, r3
 8004ed4:	f000 f8b0 	bl	8005038 <__malloc_lock>
 8004ed8:	4a1f      	ldr	r2, [pc, #124]	; (8004f58 <_free_r+0x98>)
 8004eda:	6813      	ldr	r3, [r2, #0]
 8004edc:	4610      	mov	r0, r2
 8004ede:	b933      	cbnz	r3, 8004eee <_free_r+0x2e>
 8004ee0:	6063      	str	r3, [r4, #4]
 8004ee2:	6014      	str	r4, [r2, #0]
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eea:	f000 b8a6 	b.w	800503a <__malloc_unlock>
 8004eee:	42a3      	cmp	r3, r4
 8004ef0:	d90c      	bls.n	8004f0c <_free_r+0x4c>
 8004ef2:	6821      	ldr	r1, [r4, #0]
 8004ef4:	1862      	adds	r2, r4, r1
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	bf04      	itt	eq
 8004efa:	681a      	ldreq	r2, [r3, #0]
 8004efc:	685b      	ldreq	r3, [r3, #4]
 8004efe:	6063      	str	r3, [r4, #4]
 8004f00:	bf04      	itt	eq
 8004f02:	1852      	addeq	r2, r2, r1
 8004f04:	6022      	streq	r2, [r4, #0]
 8004f06:	6004      	str	r4, [r0, #0]
 8004f08:	e7ec      	b.n	8004ee4 <_free_r+0x24>
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	b10a      	cbz	r2, 8004f14 <_free_r+0x54>
 8004f10:	42a2      	cmp	r2, r4
 8004f12:	d9fa      	bls.n	8004f0a <_free_r+0x4a>
 8004f14:	6819      	ldr	r1, [r3, #0]
 8004f16:	1858      	adds	r0, r3, r1
 8004f18:	42a0      	cmp	r0, r4
 8004f1a:	d10b      	bne.n	8004f34 <_free_r+0x74>
 8004f1c:	6820      	ldr	r0, [r4, #0]
 8004f1e:	4401      	add	r1, r0
 8004f20:	1858      	adds	r0, r3, r1
 8004f22:	4282      	cmp	r2, r0
 8004f24:	6019      	str	r1, [r3, #0]
 8004f26:	d1dd      	bne.n	8004ee4 <_free_r+0x24>
 8004f28:	6810      	ldr	r0, [r2, #0]
 8004f2a:	6852      	ldr	r2, [r2, #4]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	4401      	add	r1, r0
 8004f30:	6019      	str	r1, [r3, #0]
 8004f32:	e7d7      	b.n	8004ee4 <_free_r+0x24>
 8004f34:	d902      	bls.n	8004f3c <_free_r+0x7c>
 8004f36:	230c      	movs	r3, #12
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	e7d3      	b.n	8004ee4 <_free_r+0x24>
 8004f3c:	6820      	ldr	r0, [r4, #0]
 8004f3e:	1821      	adds	r1, r4, r0
 8004f40:	428a      	cmp	r2, r1
 8004f42:	bf04      	itt	eq
 8004f44:	6811      	ldreq	r1, [r2, #0]
 8004f46:	6852      	ldreq	r2, [r2, #4]
 8004f48:	6062      	str	r2, [r4, #4]
 8004f4a:	bf04      	itt	eq
 8004f4c:	1809      	addeq	r1, r1, r0
 8004f4e:	6021      	streq	r1, [r4, #0]
 8004f50:	605c      	str	r4, [r3, #4]
 8004f52:	e7c7      	b.n	8004ee4 <_free_r+0x24>
 8004f54:	bd38      	pop	{r3, r4, r5, pc}
 8004f56:	bf00      	nop
 8004f58:	200002ac 	.word	0x200002ac

08004f5c <_malloc_r>:
 8004f5c:	b570      	push	{r4, r5, r6, lr}
 8004f5e:	1ccd      	adds	r5, r1, #3
 8004f60:	f025 0503 	bic.w	r5, r5, #3
 8004f64:	3508      	adds	r5, #8
 8004f66:	2d0c      	cmp	r5, #12
 8004f68:	bf38      	it	cc
 8004f6a:	250c      	movcc	r5, #12
 8004f6c:	2d00      	cmp	r5, #0
 8004f6e:	4606      	mov	r6, r0
 8004f70:	db01      	blt.n	8004f76 <_malloc_r+0x1a>
 8004f72:	42a9      	cmp	r1, r5
 8004f74:	d903      	bls.n	8004f7e <_malloc_r+0x22>
 8004f76:	230c      	movs	r3, #12
 8004f78:	6033      	str	r3, [r6, #0]
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	f000 f85b 	bl	8005038 <__malloc_lock>
 8004f82:	4a23      	ldr	r2, [pc, #140]	; (8005010 <_malloc_r+0xb4>)
 8004f84:	6814      	ldr	r4, [r2, #0]
 8004f86:	4621      	mov	r1, r4
 8004f88:	b991      	cbnz	r1, 8004fb0 <_malloc_r+0x54>
 8004f8a:	4c22      	ldr	r4, [pc, #136]	; (8005014 <_malloc_r+0xb8>)
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	b91b      	cbnz	r3, 8004f98 <_malloc_r+0x3c>
 8004f90:	4630      	mov	r0, r6
 8004f92:	f000 f841 	bl	8005018 <_sbrk_r>
 8004f96:	6020      	str	r0, [r4, #0]
 8004f98:	4629      	mov	r1, r5
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f83c 	bl	8005018 <_sbrk_r>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d126      	bne.n	8004ff2 <_malloc_r+0x96>
 8004fa4:	230c      	movs	r3, #12
 8004fa6:	6033      	str	r3, [r6, #0]
 8004fa8:	4630      	mov	r0, r6
 8004faa:	f000 f846 	bl	800503a <__malloc_unlock>
 8004fae:	e7e4      	b.n	8004f7a <_malloc_r+0x1e>
 8004fb0:	680b      	ldr	r3, [r1, #0]
 8004fb2:	1b5b      	subs	r3, r3, r5
 8004fb4:	d41a      	bmi.n	8004fec <_malloc_r+0x90>
 8004fb6:	2b0b      	cmp	r3, #11
 8004fb8:	d90f      	bls.n	8004fda <_malloc_r+0x7e>
 8004fba:	600b      	str	r3, [r1, #0]
 8004fbc:	50cd      	str	r5, [r1, r3]
 8004fbe:	18cc      	adds	r4, r1, r3
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f000 f83a 	bl	800503a <__malloc_unlock>
 8004fc6:	f104 000b 	add.w	r0, r4, #11
 8004fca:	1d23      	adds	r3, r4, #4
 8004fcc:	f020 0007 	bic.w	r0, r0, #7
 8004fd0:	1ac3      	subs	r3, r0, r3
 8004fd2:	d01b      	beq.n	800500c <_malloc_r+0xb0>
 8004fd4:	425a      	negs	r2, r3
 8004fd6:	50e2      	str	r2, [r4, r3]
 8004fd8:	bd70      	pop	{r4, r5, r6, pc}
 8004fda:	428c      	cmp	r4, r1
 8004fdc:	bf0d      	iteet	eq
 8004fde:	6863      	ldreq	r3, [r4, #4]
 8004fe0:	684b      	ldrne	r3, [r1, #4]
 8004fe2:	6063      	strne	r3, [r4, #4]
 8004fe4:	6013      	streq	r3, [r2, #0]
 8004fe6:	bf18      	it	ne
 8004fe8:	460c      	movne	r4, r1
 8004fea:	e7e9      	b.n	8004fc0 <_malloc_r+0x64>
 8004fec:	460c      	mov	r4, r1
 8004fee:	6849      	ldr	r1, [r1, #4]
 8004ff0:	e7ca      	b.n	8004f88 <_malloc_r+0x2c>
 8004ff2:	1cc4      	adds	r4, r0, #3
 8004ff4:	f024 0403 	bic.w	r4, r4, #3
 8004ff8:	42a0      	cmp	r0, r4
 8004ffa:	d005      	beq.n	8005008 <_malloc_r+0xac>
 8004ffc:	1a21      	subs	r1, r4, r0
 8004ffe:	4630      	mov	r0, r6
 8005000:	f000 f80a 	bl	8005018 <_sbrk_r>
 8005004:	3001      	adds	r0, #1
 8005006:	d0cd      	beq.n	8004fa4 <_malloc_r+0x48>
 8005008:	6025      	str	r5, [r4, #0]
 800500a:	e7d9      	b.n	8004fc0 <_malloc_r+0x64>
 800500c:	bd70      	pop	{r4, r5, r6, pc}
 800500e:	bf00      	nop
 8005010:	200002ac 	.word	0x200002ac
 8005014:	200002b0 	.word	0x200002b0

08005018 <_sbrk_r>:
 8005018:	b538      	push	{r3, r4, r5, lr}
 800501a:	4c06      	ldr	r4, [pc, #24]	; (8005034 <_sbrk_r+0x1c>)
 800501c:	2300      	movs	r3, #0
 800501e:	4605      	mov	r5, r0
 8005020:	4608      	mov	r0, r1
 8005022:	6023      	str	r3, [r4, #0]
 8005024:	f000 f80a 	bl	800503c <_sbrk>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d102      	bne.n	8005032 <_sbrk_r+0x1a>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	b103      	cbz	r3, 8005032 <_sbrk_r+0x1a>
 8005030:	602b      	str	r3, [r5, #0]
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	20001bf8 	.word	0x20001bf8

08005038 <__malloc_lock>:
 8005038:	4770      	bx	lr

0800503a <__malloc_unlock>:
 800503a:	4770      	bx	lr

0800503c <_sbrk>:
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <_sbrk+0x14>)
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	4602      	mov	r2, r0
 8005042:	b909      	cbnz	r1, 8005048 <_sbrk+0xc>
 8005044:	4903      	ldr	r1, [pc, #12]	; (8005054 <_sbrk+0x18>)
 8005046:	6019      	str	r1, [r3, #0]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	4402      	add	r2, r0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	4770      	bx	lr
 8005050:	200002b4 	.word	0x200002b4
 8005054:	20001bfc 	.word	0x20001bfc

08005058 <_init>:
 8005058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505a:	bf00      	nop
 800505c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505e:	bc08      	pop	{r3}
 8005060:	469e      	mov	lr, r3
 8005062:	4770      	bx	lr

08005064 <_fini>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	bf00      	nop
 8005068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506a:	bc08      	pop	{r3}
 800506c:	469e      	mov	lr, r3
 800506e:	4770      	bx	lr

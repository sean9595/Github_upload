
Timer_interrupt_02_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080030f8  080030f8  000130f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003158  08003158  00013158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08003168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000e0  20000010  08003178  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000f0  08003178  000200f0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c60d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003235  00000000  00000000  0003c64b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009a31  00000000  00000000  0003f880  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b50  00000000  00000000  000492b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fc8  00000000  00000000  00049e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000702d  00000000  00000000  0004add0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005647  00000000  00000000  00051dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00057444  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002044  00000000  00000000  000574c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080030e0 	.word	0x080030e0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080030e0 	.word	0x080030e0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b97a 	b.w	80005e4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	468c      	mov	ip, r1
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	9e08      	ldr	r6, [sp, #32]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d151      	bne.n	80003bc <__udivmoddi4+0xb4>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d96d      	bls.n	80003fa <__udivmoddi4+0xf2>
 800031e:	fab2 fe82 	clz	lr, r2
 8000322:	f1be 0f00 	cmp.w	lr, #0
 8000326:	d00b      	beq.n	8000340 <__udivmoddi4+0x38>
 8000328:	f1ce 0c20 	rsb	ip, lr, #32
 800032c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000330:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000334:	fa02 f70e 	lsl.w	r7, r2, lr
 8000338:	ea4c 0c05 	orr.w	ip, ip, r5
 800033c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000340:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000344:	0c25      	lsrs	r5, r4, #16
 8000346:	fbbc f8fa 	udiv	r8, ip, sl
 800034a:	fa1f f987 	uxth.w	r9, r7
 800034e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000352:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000356:	fb08 f309 	mul.w	r3, r8, r9
 800035a:	42ab      	cmp	r3, r5
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x6c>
 800035e:	19ed      	adds	r5, r5, r7
 8000360:	f108 32ff 	add.w	r2, r8, #4294967295
 8000364:	f080 8123 	bcs.w	80005ae <__udivmoddi4+0x2a6>
 8000368:	42ab      	cmp	r3, r5
 800036a:	f240 8120 	bls.w	80005ae <__udivmoddi4+0x2a6>
 800036e:	f1a8 0802 	sub.w	r8, r8, #2
 8000372:	443d      	add	r5, r7
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb5 f0fa 	udiv	r0, r5, sl
 800037c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb00 f909 	mul.w	r9, r0, r9
 8000388:	45a1      	cmp	r9, r4
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x98>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	f080 810a 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8107 	bls.w	80005aa <__udivmoddi4+0x2a2>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 0409 	sub.w	r4, r4, r9
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	2100      	movs	r1, #0
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d061      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80003b2:	2300      	movs	r3, #0
 80003b4:	6034      	str	r4, [r6, #0]
 80003b6:	6073      	str	r3, [r6, #4]
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	428b      	cmp	r3, r1
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0xc8>
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d054      	beq.n	800046e <__udivmoddi4+0x166>
 80003c4:	2100      	movs	r1, #0
 80003c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80003ca:	4608      	mov	r0, r1
 80003cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d0:	fab3 f183 	clz	r1, r3
 80003d4:	2900      	cmp	r1, #0
 80003d6:	f040 808e 	bne.w	80004f6 <__udivmoddi4+0x1ee>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xdc>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80fa 	bhi.w	80005d8 <__udivmoddi4+0x2d0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb65 0503 	sbc.w	r5, r5, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	46ac      	mov	ip, r5
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	d03f      	beq.n	8000472 <__udivmoddi4+0x16a>
 80003f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	b912      	cbnz	r2, 8000402 <__udivmoddi4+0xfa>
 80003fc:	2701      	movs	r7, #1
 80003fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000402:	fab7 fe87 	clz	lr, r7
 8000406:	f1be 0f00 	cmp.w	lr, #0
 800040a:	d134      	bne.n	8000476 <__udivmoddi4+0x16e>
 800040c:	1beb      	subs	r3, r5, r7
 800040e:	0c3a      	lsrs	r2, r7, #16
 8000410:	fa1f fc87 	uxth.w	ip, r7
 8000414:	2101      	movs	r1, #1
 8000416:	fbb3 f8f2 	udiv	r8, r3, r2
 800041a:	0c25      	lsrs	r5, r4, #16
 800041c:	fb02 3318 	mls	r3, r2, r8, r3
 8000420:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000424:	fb0c f308 	mul.w	r3, ip, r8
 8000428:	42ab      	cmp	r3, r5
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x134>
 800042c:	19ed      	adds	r5, r5, r7
 800042e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x132>
 8000434:	42ab      	cmp	r3, r5
 8000436:	f200 80d1 	bhi.w	80005dc <__udivmoddi4+0x2d4>
 800043a:	4680      	mov	r8, r0
 800043c:	1aed      	subs	r5, r5, r3
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb5 f0f2 	udiv	r0, r5, r2
 8000444:	fb02 5510 	mls	r5, r2, r0, r5
 8000448:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800044c:	fb0c fc00 	mul.w	ip, ip, r0
 8000450:	45a4      	cmp	ip, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x15c>
 8000454:	19e4      	adds	r4, r4, r7
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x15a>
 800045c:	45a4      	cmp	ip, r4
 800045e:	f200 80b8 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 040c 	sub.w	r4, r4, ip
 8000468:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800046c:	e79d      	b.n	80003aa <__udivmoddi4+0xa2>
 800046e:	4631      	mov	r1, r6
 8000470:	4630      	mov	r0, r6
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	f1ce 0420 	rsb	r4, lr, #32
 800047a:	fa05 f30e 	lsl.w	r3, r5, lr
 800047e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000482:	fa20 f804 	lsr.w	r8, r0, r4
 8000486:	0c3a      	lsrs	r2, r7, #16
 8000488:	fa25 f404 	lsr.w	r4, r5, r4
 800048c:	ea48 0803 	orr.w	r8, r8, r3
 8000490:	fbb4 f1f2 	udiv	r1, r4, r2
 8000494:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000498:	fb02 4411 	mls	r4, r2, r1, r4
 800049c:	fa1f fc87 	uxth.w	ip, r7
 80004a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004a4:	fb01 f30c 	mul.w	r3, r1, ip
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1bc>
 80004b0:	19ed      	adds	r5, r5, r7
 80004b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80004b6:	f080 808a 	bcs.w	80005ce <__udivmoddi4+0x2c6>
 80004ba:	42ab      	cmp	r3, r5
 80004bc:	f240 8087 	bls.w	80005ce <__udivmoddi4+0x2c6>
 80004c0:	3902      	subs	r1, #2
 80004c2:	443d      	add	r5, r7
 80004c4:	1aeb      	subs	r3, r5, r3
 80004c6:	fa1f f588 	uxth.w	r5, r8
 80004ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80004ce:	fb02 3310 	mls	r3, r2, r0, r3
 80004d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d6:	fb00 f30c 	mul.w	r3, r0, ip
 80004da:	42ab      	cmp	r3, r5
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1e6>
 80004de:	19ed      	adds	r5, r5, r7
 80004e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e4:	d26f      	bcs.n	80005c6 <__udivmoddi4+0x2be>
 80004e6:	42ab      	cmp	r3, r5
 80004e8:	d96d      	bls.n	80005c6 <__udivmoddi4+0x2be>
 80004ea:	3802      	subs	r0, #2
 80004ec:	443d      	add	r5, r7
 80004ee:	1aeb      	subs	r3, r5, r3
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	e78f      	b.n	8000416 <__udivmoddi4+0x10e>
 80004f6:	f1c1 0720 	rsb	r7, r1, #32
 80004fa:	fa22 f807 	lsr.w	r8, r2, r7
 80004fe:	408b      	lsls	r3, r1
 8000500:	fa05 f401 	lsl.w	r4, r5, r1
 8000504:	ea48 0303 	orr.w	r3, r8, r3
 8000508:	fa20 fe07 	lsr.w	lr, r0, r7
 800050c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000510:	40fd      	lsrs	r5, r7
 8000512:	ea4e 0e04 	orr.w	lr, lr, r4
 8000516:	fbb5 f9fc 	udiv	r9, r5, ip
 800051a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800051e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000522:	fa1f f883 	uxth.w	r8, r3
 8000526:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800052a:	fb09 f408 	mul.w	r4, r9, r8
 800052e:	42ac      	cmp	r4, r5
 8000530:	fa02 f201 	lsl.w	r2, r2, r1
 8000534:	fa00 fa01 	lsl.w	sl, r0, r1
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x244>
 800053a:	18ed      	adds	r5, r5, r3
 800053c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000540:	d243      	bcs.n	80005ca <__udivmoddi4+0x2c2>
 8000542:	42ac      	cmp	r4, r5
 8000544:	d941      	bls.n	80005ca <__udivmoddi4+0x2c2>
 8000546:	f1a9 0902 	sub.w	r9, r9, #2
 800054a:	441d      	add	r5, r3
 800054c:	1b2d      	subs	r5, r5, r4
 800054e:	fa1f fe8e 	uxth.w	lr, lr
 8000552:	fbb5 f0fc 	udiv	r0, r5, ip
 8000556:	fb0c 5510 	mls	r5, ip, r0, r5
 800055a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800055e:	fb00 f808 	mul.w	r8, r0, r8
 8000562:	45a0      	cmp	r8, r4
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x26e>
 8000566:	18e4      	adds	r4, r4, r3
 8000568:	f100 35ff 	add.w	r5, r0, #4294967295
 800056c:	d229      	bcs.n	80005c2 <__udivmoddi4+0x2ba>
 800056e:	45a0      	cmp	r8, r4
 8000570:	d927      	bls.n	80005c2 <__udivmoddi4+0x2ba>
 8000572:	3802      	subs	r0, #2
 8000574:	441c      	add	r4, r3
 8000576:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800057a:	eba4 0408 	sub.w	r4, r4, r8
 800057e:	fba0 8902 	umull	r8, r9, r0, r2
 8000582:	454c      	cmp	r4, r9
 8000584:	46c6      	mov	lr, r8
 8000586:	464d      	mov	r5, r9
 8000588:	d315      	bcc.n	80005b6 <__udivmoddi4+0x2ae>
 800058a:	d012      	beq.n	80005b2 <__udivmoddi4+0x2aa>
 800058c:	b156      	cbz	r6, 80005a4 <__udivmoddi4+0x29c>
 800058e:	ebba 030e 	subs.w	r3, sl, lr
 8000592:	eb64 0405 	sbc.w	r4, r4, r5
 8000596:	fa04 f707 	lsl.w	r7, r4, r7
 800059a:	40cb      	lsrs	r3, r1
 800059c:	431f      	orrs	r7, r3
 800059e:	40cc      	lsrs	r4, r1
 80005a0:	6037      	str	r7, [r6, #0]
 80005a2:	6074      	str	r4, [r6, #4]
 80005a4:	2100      	movs	r1, #0
 80005a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005aa:	4618      	mov	r0, r3
 80005ac:	e6f8      	b.n	80003a0 <__udivmoddi4+0x98>
 80005ae:	4690      	mov	r8, r2
 80005b0:	e6e0      	b.n	8000374 <__udivmoddi4+0x6c>
 80005b2:	45c2      	cmp	sl, r8
 80005b4:	d2ea      	bcs.n	800058c <__udivmoddi4+0x284>
 80005b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80005ba:	eb69 0503 	sbc.w	r5, r9, r3
 80005be:	3801      	subs	r0, #1
 80005c0:	e7e4      	b.n	800058c <__udivmoddi4+0x284>
 80005c2:	4628      	mov	r0, r5
 80005c4:	e7d7      	b.n	8000576 <__udivmoddi4+0x26e>
 80005c6:	4640      	mov	r0, r8
 80005c8:	e791      	b.n	80004ee <__udivmoddi4+0x1e6>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e7be      	b.n	800054c <__udivmoddi4+0x244>
 80005ce:	4601      	mov	r1, r0
 80005d0:	e778      	b.n	80004c4 <__udivmoddi4+0x1bc>
 80005d2:	3802      	subs	r0, #2
 80005d4:	443c      	add	r4, r7
 80005d6:	e745      	b.n	8000464 <__udivmoddi4+0x15c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e708      	b.n	80003ee <__udivmoddi4+0xe6>
 80005dc:	f1a8 0802 	sub.w	r8, r8, #2
 80005e0:	443d      	add	r5, r7
 80005e2:	e72b      	b.n	800043c <__udivmoddi4+0x134>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <HAL_InitTick+0x3c>)
{
 80005ec:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_InitTick+0x40>)
 80005f0:	7818      	ldrb	r0, [r3, #0]
 80005f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80005fa:	6810      	ldr	r0, [r2, #0]
 80005fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000600:	f000 f890 	bl	8000724 <HAL_SYSTICK_Config>
 8000604:	4604      	mov	r4, r0
 8000606:	b958      	cbnz	r0, 8000620 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000608:	2d0f      	cmp	r5, #15
 800060a:	d809      	bhi.n	8000620 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800060c:	4602      	mov	r2, r0
 800060e:	4629      	mov	r1, r5
 8000610:	f04f 30ff 	mov.w	r0, #4294967295
 8000614:	f000 f840 	bl	8000698 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <HAL_InitTick+0x44>)
 800061a:	4620      	mov	r0, r4
 800061c:	601d      	str	r5, [r3, #0]
 800061e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000620:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000622:	bd38      	pop	{r3, r4, r5, pc}
 8000624:	20000000 	.word	0x20000000
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004

08000630 <HAL_Init>:
{
 8000630:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000632:	2003      	movs	r0, #3
 8000634:	f000 f81e 	bl	8000674 <HAL_NVIC_SetPriorityGrouping>
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff ffd5 	bl	80005e8 <HAL_InitTick>
 800063e:	4604      	mov	r4, r0
 8000640:	b918      	cbnz	r0, 800064a <HAL_Init+0x1a>
  HAL_MspInit();
 8000642:	f002 fc03 	bl	8002e4c <HAL_MspInit>
}
 8000646:	4620      	mov	r0, r4
 8000648:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800064a:	2401      	movs	r4, #1
 800064c:	e7fb      	b.n	8000646 <HAL_Init+0x16>
	...

08000650 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000650:	4a03      	ldr	r2, [pc, #12]	; (8000660 <HAL_IncTick+0x10>)
 8000652:	4b04      	ldr	r3, [pc, #16]	; (8000664 <HAL_IncTick+0x14>)
 8000654:	6811      	ldr	r1, [r2, #0]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	440b      	add	r3, r1
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000002c 	.word	0x2000002c
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000668:	4b01      	ldr	r3, [pc, #4]	; (8000670 <HAL_GetTick+0x8>)
 800066a:	6818      	ldr	r0, [r3, #0]
}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c

08000674 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000676:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000678:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800067a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000682:	041b      	lsls	r3, r3, #16
 8000684:	0c1b      	lsrs	r3, r3, #16
 8000686:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800068e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000690:	60d3      	str	r3, [r2, #12]
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	68dc      	ldr	r4, [r3, #12]
 800069e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006a8:	2b04      	cmp	r3, #4
 80006aa:	bf28      	it	cs
 80006ac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006b4:	bf8c      	ite	hi
 80006b6:	3c03      	subhi	r4, #3
 80006b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ba:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	f103 33ff 	add.w	r3, r3, #4294967295
 80006c4:	ea01 0103 	and.w	r1, r1, r3
 80006c8:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	fa05 f404 	lsl.w	r4, r5, r4
 80006d0:	f104 34ff 	add.w	r4, r4, #4294967295
 80006d4:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	ea42 0201 	orr.w	r2, r2, r1
 80006dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006e0:	db07      	blt.n	80006f2 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006ec:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006f0:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	f000 000f 	and.w	r0, r0, #15
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_NVIC_SetPriority+0x6c>)
 80006fa:	541a      	strb	r2, [r3, r0]
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop
 8000700:	e000ed00 	.word	0xe000ed00
 8000704:	e000ed14 	.word	0xe000ed14

08000708 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000708:	2800      	cmp	r0, #0
 800070a:	db08      	blt.n	800071e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800070c:	0942      	lsrs	r2, r0, #5
 800070e:	2301      	movs	r3, #1
 8000710:	f000 001f 	and.w	r0, r0, #31
 8000714:	fa03 f000 	lsl.w	r0, r3, r0
 8000718:	4b01      	ldr	r3, [pc, #4]	; (8000720 <HAL_NVIC_EnableIRQ+0x18>)
 800071a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100

08000724 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	3801      	subs	r0, #1
 8000726:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800072a:	d20a      	bcs.n	8000742 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072e:	21f0      	movs	r1, #240	; 0xf0
 8000730:	4a06      	ldr	r2, [pc, #24]	; (800074c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000734:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000742:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000750:	b510      	push	{r4, lr}
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8000752:	b128      	cbz	r0, 8000760 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000754:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000758:	2b02      	cmp	r3, #2
 800075a:	d003      	beq.n	8000764 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000760:	2001      	movs	r0, #1
 8000762:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
  }
  else
  {
    if(IS_D2_DMA_INSTANCE(hdma) != RESET) /* D2 Domain DMA : DMA1 or DMA2*/
 8000764:	6803      	ldr	r3, [r0, #0]
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <HAL_DMA_Abort_IT+0x84>)
 8000768:	441a      	add	r2, r3
 800076a:	f5b2 6f95 	cmp.w	r2, #1192	; 0x4a8
 800076e:	d808      	bhi.n	8000782 <HAL_DMA_Abort_IT+0x32>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8000770:	2204      	movs	r2, #4
 8000772:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	f022 0201 	bic.w	r2, r2, #1
 800077c:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 800077e:	2000      	movs	r0, #0
 8000780:	bd10      	pop	{r4, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	f022 020e 	bic.w	r2, r2, #14
 8000788:	601a      	str	r2, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	f022 0201 	bic.w	r2, r2, #1
 8000790:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000792:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8000794:	6813      	ldr	r3, [r2, #0]
 8000796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800079a:	6013      	str	r3, [r2, #0]
      BDMA->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex));
 800079c:	2301      	movs	r3, #1
 800079e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80007a0:	4093      	lsls	r3, r2
 80007a2:	4a0d      	ldr	r2, [pc, #52]	; (80007d8 <HAL_DMA_Abort_IT+0x88>)
 80007a4:	6053      	str	r3, [r2, #4]
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80007a6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80007a8:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80007aa:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80007ac:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80007ae:	b133      	cbz	r3, 80007be <HAL_DMA_Abort_IT+0x6e>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80007b6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80007b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80007ba:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80007bc:	605a      	str	r2, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80007be:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80007c0:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 80007c2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80007c6:	6d03      	ldr	r3, [r0, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 80007c8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0d6      	beq.n	800077e <HAL_DMA_Abort_IT+0x2e>
        hdma->XferAbortCallback(hdma);
 80007d0:	4798      	blx	r3
 80007d2:	e7d4      	b.n	800077e <HAL_DMA_Abort_IT+0x2e>
 80007d4:	bffdfff0 	.word	0xbffdfff0
 80007d8:	58025400 	.word	0x58025400

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e0:	680b      	ldr	r3, [r1, #0]
{
 80007e2:	b085      	sub	sp, #20
      /* Configure the External Interrupt or event for the current IO */
      
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80009a8 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_Ptr->EMR1 = temp;
             
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80007e8:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ec:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80007ee:	2300      	movs	r3, #0
        temp = EXTI_Ptr->IMR1;
 80007f0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 80009ac <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80007f4:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007f6:	9a01      	ldr	r2, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80007f8:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fa:	ea07 0502 	and.w	r5, r7, r2
    if(iocurrent == ioposition)
 80007fe:	42af      	cmp	r7, r5
 8000800:	f040 80b7 	bne.w	8000972 <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000804:	684a      	ldr	r2, [r1, #4]
 8000806:	f022 0610 	bic.w	r6, r2, #16
 800080a:	2e02      	cmp	r6, #2
 800080c:	d116      	bne.n	800083c <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3];
 800080e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000812:	f003 0b07 	and.w	fp, r3, #7
 8000816:	f04f 0e0f 	mov.w	lr, #15
 800081a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800081e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000822:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000826:	fa0e fe0b 	lsl.w	lr, lr, fp
 800082a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800082e:	690c      	ldr	r4, [r1, #16]
 8000830:	fa04 f40b 	lsl.w	r4, r4, fp
 8000834:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3] = temp;
 8000838:	f8ca 4020 	str.w	r4, [sl, #32]
 800083c:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000840:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000842:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000846:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800084a:	fa04 f40a 	lsl.w	r4, r4, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084e:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000850:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000854:	43e4      	mvns	r4, r4
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000856:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000858:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800085c:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000860:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000864:	d810      	bhi.n	8000888 <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR; 
 8000866:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000868:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 800086c:	68ce      	ldr	r6, [r1, #12]
 800086e:	fa06 fe0a 	lsl.w	lr, r6, sl
 8000872:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000876:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000878:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800087a:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800087e:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000882:	409e      	lsls	r6, r3
 8000884:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000886:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000888:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800088a:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800088c:	688e      	ldr	r6, [r1, #8]
 800088e:	fa06 f60a 	lsl.w	r6, r6, sl
 8000892:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000894:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000896:	00d4      	lsls	r4, r2, #3
 8000898:	d56b      	bpl.n	8000972 <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 800089e:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008a2:	f003 0703 	and.w	r7, r3, #3
 80008a6:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	f044 0402 	orr.w	r4, r4, #2
 80008ae:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008b2:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b4:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 80008b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80008bc:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 80008c0:	f004 0402 	and.w	r4, r4, #2
 80008c4:	9403      	str	r4, [sp, #12]
 80008c6:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008c8:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80008cc:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008d0:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008d4:	4c33      	ldr	r4, [pc, #204]	; (80009a4 <HAL_GPIO_Init+0x1c8>)
 80008d6:	42a0      	cmp	r0, r4
 80008d8:	d052      	beq.n	8000980 <HAL_GPIO_Init+0x1a4>
 80008da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008de:	42a0      	cmp	r0, r4
 80008e0:	d050      	beq.n	8000984 <HAL_GPIO_Init+0x1a8>
 80008e2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008e6:	42a0      	cmp	r0, r4
 80008e8:	d04e      	beq.n	8000988 <HAL_GPIO_Init+0x1ac>
 80008ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008ee:	42a0      	cmp	r0, r4
 80008f0:	d04c      	beq.n	800098c <HAL_GPIO_Init+0x1b0>
 80008f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008f6:	42a0      	cmp	r0, r4
 80008f8:	d04a      	beq.n	8000990 <HAL_GPIO_Init+0x1b4>
 80008fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80008fe:	42a0      	cmp	r0, r4
 8000900:	d048      	beq.n	8000994 <HAL_GPIO_Init+0x1b8>
 8000902:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000906:	42a0      	cmp	r0, r4
 8000908:	d046      	beq.n	8000998 <HAL_GPIO_Init+0x1bc>
 800090a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800090e:	42a0      	cmp	r0, r4
 8000910:	d044      	beq.n	800099c <HAL_GPIO_Init+0x1c0>
 8000912:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000916:	42a0      	cmp	r0, r4
 8000918:	d042      	beq.n	80009a0 <HAL_GPIO_Init+0x1c4>
 800091a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800091e:	42a0      	cmp	r0, r4
 8000920:	bf14      	ite	ne
 8000922:	240a      	movne	r4, #10
 8000924:	2409      	moveq	r4, #9
 8000926:	40bc      	lsls	r4, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000928:	03d7      	lsls	r7, r2, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800092a:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800092e:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8000930:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_Ptr->IMR1;
 8000934:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~((uint32_t)iocurrent);
 8000938:	bf54      	ite	pl
 800093a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800093c:	432c      	orrmi	r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800093e:	0397      	lsls	r7, r2, #14
        EXTI_Ptr->IMR1 = temp;
 8000940:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_Ptr->EMR1;
 8000944:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8000948:	bf54      	ite	pl
 800094a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800094c:	432c      	orrmi	r4, r5
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800094e:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000950:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_Ptr->EMR1 = temp;
 8000954:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 8000958:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~((uint32_t)iocurrent);
 800095c:	bf54      	ite	pl
 800095e:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000960:	432c      	orrmi	r4, r5

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000962:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000964:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000966:	687c      	ldr	r4, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
 8000968:	bf54      	ite	pl
 800096a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800096c:	432c      	orrmi	r4, r5
        }
        EXTI->FTSR1 = temp;
 800096e:	f8c9 4004 	str.w	r4, [r9, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000972:	3301      	adds	r3, #1
 8000974:	2b10      	cmp	r3, #16
 8000976:	f47f af3d 	bne.w	80007f4 <HAL_GPIO_Init+0x18>
      }      
    }
  }
}
 800097a:	b005      	add	sp, #20
 800097c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000980:	2400      	movs	r4, #0
 8000982:	e7d0      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 8000984:	2401      	movs	r4, #1
 8000986:	e7ce      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 8000988:	2402      	movs	r4, #2
 800098a:	e7cc      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 800098c:	2403      	movs	r4, #3
 800098e:	e7ca      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 8000990:	2404      	movs	r4, #4
 8000992:	e7c8      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 8000994:	2405      	movs	r4, #5
 8000996:	e7c6      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 8000998:	2406      	movs	r4, #6
 800099a:	e7c4      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 800099c:	2407      	movs	r4, #7
 800099e:	e7c2      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 80009a0:	2408      	movs	r4, #8
 80009a2:	e7c0      	b.n	8000926 <HAL_GPIO_Init+0x14a>
 80009a4:	58020000 	.word	0x58020000
 80009a8:	58024400 	.word	0x58024400
 80009ac:	58000080 	.word	0x58000080

080009b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009b0:	b10a      	cbz	r2, 80009b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80009b2:	8301      	strh	r1, [r0, #24]
 80009b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80009b6:	8341      	strh	r1, [r0, #26]
 80009b8:	4770      	bx	lr

080009ba <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009ba:	6943      	ldr	r3, [r0, #20]
 80009bc:	4059      	eors	r1, r3
 80009be:	6141      	str	r1, [r0, #20]
 80009c0:	4770      	bx	lr
	...

080009c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80009c4:	b508      	push	{r3, lr}
    /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80009c8:	6899      	ldr	r1, [r3, #8]
 80009ca:	4201      	tst	r1, r0
 80009cc:	d002      	beq.n	80009d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80009ce:	6098      	str	r0, [r3, #8]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80009d0:	f002 fa30 	bl	8002e34 <HAL_GPIO_EXTI_Callback>
 80009d4:	bd08      	pop	{r3, pc}
 80009d6:	bf00      	nop
 80009d8:	58000080 	.word	0x58000080

080009dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009de:	6803      	ldr	r3, [r0, #0]
{
 80009e0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009e2:	07d8      	lsls	r0, r3, #31
 80009e4:	d45c      	bmi.n	8000aa0 <HAL_RCC_OscConfig+0xc4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009e6:	682b      	ldr	r3, [r5, #0]
 80009e8:	0799      	lsls	r1, r3, #30
 80009ea:	f100 80af 	bmi.w	8000b4c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80009ee:	682b      	ldr	r3, [r5, #0]
 80009f0:	06d9      	lsls	r1, r3, #27
 80009f2:	d525      	bpl.n	8000a40 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_CSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80009f4:	4bac      	ldr	r3, [pc, #688]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 80009f6:	691a      	ldr	r2, [r3, #16]
 80009f8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80009fc:	2a08      	cmp	r2, #8
 80009fe:	d00b      	beq.n	8000a18 <HAL_RCC_OscConfig+0x3c>
 8000a00:	691a      	ldr	r2, [r3, #16]
 8000a02:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000a06:	2a18      	cmp	r2, #24
 8000a08:	f040 80f7 	bne.w	8000bfa <HAL_RCC_OscConfig+0x21e>
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	f040 80f1 	bne.w	8000bfa <HAL_RCC_OscConfig+0x21e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000a18:	4ba3      	ldr	r3, [pc, #652]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	05d2      	lsls	r2, r2, #23
 8000a1e:	d502      	bpl.n	8000a26 <HAL_RCC_OscConfig+0x4a>
 8000a20:	69ea      	ldr	r2, [r5, #28]
 8000a22:	2a80      	cmp	r2, #128	; 0x80
 8000a24:	d153      	bne.n	8000ace <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000a26:	6858      	ldr	r0, [r3, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a28:	f04f 42f8 	mov.w	r2, #2080374784	; 0x7c000000
 8000a2c:	fa92 f2a2 	rbit	r2, r2
 8000a30:	fab2 f182 	clz	r1, r2
 8000a34:	6a2a      	ldr	r2, [r5, #32]
 8000a36:	408a      	lsls	r2, r1
 8000a38:	f020 41f8 	bic.w	r1, r0, #2080374784	; 0x7c000000
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a40:	682b      	ldr	r3, [r5, #0]
 8000a42:	0719      	lsls	r1, r3, #28
 8000a44:	f100 810b 	bmi.w	8000c5e <HAL_RCC_OscConfig+0x282>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000a48:	682b      	ldr	r3, [r5, #0]
 8000a4a:	069a      	lsls	r2, r3, #26
 8000a4c:	f100 8130 	bmi.w	8000cb0 <HAL_RCC_OscConfig+0x2d4>
        }      
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	075c      	lsls	r4, r3, #29
 8000a54:	d51e      	bpl.n	8000a94 <HAL_RCC_OscConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000a56:	4c95      	ldr	r4, [pc, #596]	; (8000cac <HAL_RCC_OscConfig+0x2d0>)
 8000a58:	6823      	ldr	r3, [r4, #0]
 8000a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5e:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000a60:	f7ff fe02 	bl	8000668 <HAL_GetTick>
 8000a64:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	05da      	lsls	r2, r3, #23
 8000a6a:	f140 8146 	bpl.w	8000cfa <HAL_RCC_OscConfig+0x31e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a6e:	68ab      	ldr	r3, [r5, #8]
 8000a70:	4c8d      	ldr	r4, [pc, #564]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	f040 8148 	bne.w	8000d08 <HAL_RCC_OscConfig+0x32c>
 8000a78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a80:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a84:	f7ff fdf0 	bl	8000668 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a88:	4e87      	ldr	r6, [pc, #540]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000a8a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a8c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000a8e:	079b      	lsls	r3, r3, #30
 8000a90:	f140 8160 	bpl.w	8000d54 <HAL_RCC_OscConfig+0x378>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a94:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000a96:	2a00      	cmp	r2, #0
 8000a98:	f040 8163 	bne.w	8000d62 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000aa0:	4b81      	ldr	r3, [pc, #516]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000aa2:	691a      	ldr	r2, [r3, #16]
 8000aa4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000aa8:	2a10      	cmp	r2, #16
 8000aaa:	d009      	beq.n	8000ac0 <HAL_RCC_OscConfig+0xe4>
 8000aac:	691a      	ldr	r2, [r3, #16]
 8000aae:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000ab2:	2a18      	cmp	r2, #24
 8000ab4:	d10d      	bne.n	8000ad2 <HAL_RCC_OscConfig+0xf6>
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d108      	bne.n	8000ad2 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ac0:	4b79      	ldr	r3, [pc, #484]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	039a      	lsls	r2, r3, #14
 8000ac6:	d58e      	bpl.n	80009e6 <HAL_RCC_OscConfig+0xa>
 8000ac8:	686b      	ldr	r3, [r5, #4]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d18b      	bne.n	80009e6 <HAL_RCC_OscConfig+0xa>
      return HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
 8000ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad2:	686b      	ldr	r3, [r5, #4]
 8000ad4:	4c74      	ldr	r4, [pc, #464]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ada:	d112      	bne.n	8000b02 <HAL_RCC_OscConfig+0x126>
 8000adc:	6823      	ldr	r3, [r4, #0]
 8000ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ae2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ae4:	f7ff fdc0 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae8:	4c6f      	ldr	r4, [pc, #444]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000aea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aec:	6823      	ldr	r3, [r4, #0]
 8000aee:	039b      	lsls	r3, r3, #14
 8000af0:	f53f af79 	bmi.w	80009e6 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000af4:	f7ff fdb8 	bl	8000668 <HAL_GetTick>
 8000af8:	1b80      	subs	r0, r0, r6
 8000afa:	2864      	cmp	r0, #100	; 0x64
 8000afc:	d9f6      	bls.n	8000aec <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8000afe:	2003      	movs	r0, #3
 8000b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b02:	b9a3      	cbnz	r3, 8000b2e <HAL_RCC_OscConfig+0x152>
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b0a:	6023      	str	r3, [r4, #0]
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b14:	f7ff fda8 	bl	8000668 <HAL_GetTick>
 8000b18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	039f      	lsls	r7, r3, #14
 8000b1e:	f57f af62 	bpl.w	80009e6 <HAL_RCC_OscConfig+0xa>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b22:	f7ff fda1 	bl	8000668 <HAL_GetTick>
 8000b26:	1b80      	subs	r0, r0, r6
 8000b28:	2864      	cmp	r0, #100	; 0x64
 8000b2a:	d9f6      	bls.n	8000b1a <HAL_RCC_OscConfig+0x13e>
 8000b2c:	e7e7      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	d103      	bne.n	8000b3e <HAL_RCC_OscConfig+0x162>
 8000b36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3a:	6023      	str	r3, [r4, #0]
 8000b3c:	e7ce      	b.n	8000adc <HAL_RCC_OscConfig+0x100>
 8000b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b42:	6023      	str	r3, [r4, #0]
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4a:	e7ca      	b.n	8000ae2 <HAL_RCC_OscConfig+0x106>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL1) && ((RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000b4c:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000b4e:	68e9      	ldr	r1, [r5, #12]
 8000b50:	691a      	ldr	r2, [r3, #16]
 8000b52:	f012 0f38 	tst.w	r2, #56	; 0x38
 8000b56:	d007      	beq.n	8000b68 <HAL_RCC_OscConfig+0x18c>
 8000b58:	691a      	ldr	r2, [r3, #16]
 8000b5a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b5e:	2a18      	cmp	r2, #24
 8000b60:	d128      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x1d8>
 8000b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b64:	079c      	lsls	r4, r3, #30
 8000b66:	d125      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x1d8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b68:	4a4f      	ldr	r2, [pc, #316]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	0758      	lsls	r0, r3, #29
 8000b6e:	d501      	bpl.n	8000b74 <HAL_RCC_OscConfig+0x198>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	d0ac      	beq.n	8000ace <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b74:	6813      	ldr	r3, [r2, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b76:	4c4c      	ldr	r4, [pc, #304]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b78:	f023 0319 	bic.w	r3, r3, #25
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b80:	f7ff fd72 	bl	8000668 <HAL_GetTick>
 8000b84:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b86:	6823      	ldr	r3, [r4, #0]
 8000b88:	075b      	lsls	r3, r3, #29
 8000b8a:	d50d      	bpl.n	8000ba8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8c:	6861      	ldr	r1, [r4, #4]
 8000b8e:	f44f 337c 	mov.w	r3, #258048	; 0x3f000
 8000b92:	fa93 f3a3 	rbit	r3, r3
 8000b96:	fab3 f283 	clz	r2, r3
 8000b9a:	692b      	ldr	r3, [r5, #16]
 8000b9c:	4093      	lsls	r3, r2
 8000b9e:	f421 327c 	bic.w	r2, r1, #258048	; 0x3f000
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	6063      	str	r3, [r4, #4]
 8000ba6:	e722      	b.n	80009ee <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba8:	f7ff fd5e 	bl	8000668 <HAL_GetTick>
 8000bac:	1b80      	subs	r0, r0, r6
 8000bae:	2802      	cmp	r0, #2
 8000bb0:	d9e9      	bls.n	8000b86 <HAL_RCC_OscConfig+0x1aa>
 8000bb2:	e7a4      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
 8000bb4:	4c3c      	ldr	r4, [pc, #240]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bb6:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bb8:	b179      	cbz	r1, 8000bda <HAL_RCC_OscConfig+0x1fe>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bba:	f023 0319 	bic.w	r3, r3, #25
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fd51 	bl	8000668 <HAL_GetTick>
 8000bc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	075f      	lsls	r7, r3, #29
 8000bcc:	d4de      	bmi.n	8000b8c <HAL_RCC_OscConfig+0x1b0>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bce:	f7ff fd4b 	bl	8000668 <HAL_GetTick>
 8000bd2:	1b80      	subs	r0, r0, r6
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d9f7      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x1ec>
 8000bd8:	e791      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 8000bda:	f023 0301 	bic.w	r3, r3, #1
 8000bde:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000be0:	f7ff fd42 	bl	8000668 <HAL_GetTick>
 8000be4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	0758      	lsls	r0, r3, #29
 8000bea:	f57f af00 	bpl.w	80009ee <HAL_RCC_OscConfig+0x12>
          if((int32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bee:	f7ff fd3b 	bl	8000668 <HAL_GetTick>
 8000bf2:	1b80      	subs	r0, r0, r6
 8000bf4:	2802      	cmp	r0, #2
 8000bf6:	d9f6      	bls.n	8000be6 <HAL_RCC_OscConfig+0x20a>
 8000bf8:	e781      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000bfa:	69eb      	ldr	r3, [r5, #28]
 8000bfc:	4c2a      	ldr	r4, [pc, #168]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000bfe:	b1eb      	cbz	r3, 8000c3c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_CSI_ENABLE();
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c06:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c08:	f7ff fd2e 	bl	8000668 <HAL_GetTick>
 8000c0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	05df      	lsls	r7, r3, #23
 8000c12:	d50d      	bpl.n	8000c30 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c14:	6861      	ldr	r1, [r4, #4]
 8000c16:	f04f 43f8 	mov.w	r3, #2080374784	; 0x7c000000
 8000c1a:	fa93 f3a3 	rbit	r3, r3
 8000c1e:	fab3 f283 	clz	r2, r3
 8000c22:	6a2b      	ldr	r3, [r5, #32]
 8000c24:	4093      	lsls	r3, r2
 8000c26:	f021 42f8 	bic.w	r2, r1, #2080374784	; 0x7c000000
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	6063      	str	r3, [r4, #4]
 8000c2e:	e707      	b.n	8000a40 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000c30:	f7ff fd1a 	bl	8000668 <HAL_GetTick>
 8000c34:	1b80      	subs	r0, r0, r6
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d9e9      	bls.n	8000c0e <HAL_RCC_OscConfig+0x232>
 8000c3a:	e760      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_DISABLE();
 8000c3c:	6823      	ldr	r3, [r4, #0]
 8000c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c44:	f7ff fd10 	bl	8000668 <HAL_GetTick>
 8000c48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	05d8      	lsls	r0, r3, #23
 8000c4e:	f57f aef7 	bpl.w	8000a40 <HAL_RCC_OscConfig+0x64>
          if((int32_t) (HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000c52:	f7ff fd09 	bl	8000668 <HAL_GetTick>
 8000c56:	1b80      	subs	r0, r0, r6
 8000c58:	2802      	cmp	r0, #2
 8000c5a:	d9f6      	bls.n	8000c4a <HAL_RCC_OscConfig+0x26e>
 8000c5c:	e74f      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c5e:	696b      	ldr	r3, [r5, #20]
 8000c60:	4c11      	ldr	r4, [pc, #68]	; (8000ca8 <HAL_RCC_OscConfig+0x2cc>)
 8000c62:	b183      	cbz	r3, 8000c86 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8000c64:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c6c:	f7ff fcfc 	bl	8000668 <HAL_GetTick>
 8000c70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c72:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000c74:	079b      	lsls	r3, r3, #30
 8000c76:	f53f aee7 	bmi.w	8000a48 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7a:	f7ff fcf5 	bl	8000668 <HAL_GetTick>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d9f6      	bls.n	8000c72 <HAL_RCC_OscConfig+0x296>
 8000c84:	e73b      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8000c86:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000c8e:	f7ff fceb 	bl	8000668 <HAL_GetTick>
 8000c92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c94:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000c96:	079f      	lsls	r7, r3, #30
 8000c98:	f57f aed6 	bpl.w	8000a48 <HAL_RCC_OscConfig+0x6c>
        if((int32_t) (HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fce4 	bl	8000668 <HAL_GetTick>
 8000ca0:	1b80      	subs	r0, r0, r6
 8000ca2:	2802      	cmp	r0, #2
 8000ca4:	d9f6      	bls.n	8000c94 <HAL_RCC_OscConfig+0x2b8>
 8000ca6:	e72a      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
 8000ca8:	58024400 	.word	0x58024400
 8000cac:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000cb0:	69ab      	ldr	r3, [r5, #24]
 8000cb2:	4c6e      	ldr	r4, [pc, #440]	; (8000e6c <HAL_RCC_OscConfig+0x490>)
 8000cb4:	b183      	cbz	r3, 8000cd8 <HAL_RCC_OscConfig+0x2fc>
      __HAL_RCC_HSI48_ENABLE();
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cbc:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fcd3 	bl	8000668 <HAL_GetTick>
 8000cc2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000cc4:	6823      	ldr	r3, [r4, #0]
 8000cc6:	0498      	lsls	r0, r3, #18
 8000cc8:	f53f aec2 	bmi.w	8000a50 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000ccc:	f7ff fccc 	bl	8000668 <HAL_GetTick>
 8000cd0:	1b80      	subs	r0, r0, r6
 8000cd2:	2802      	cmp	r0, #2
 8000cd4:	d9f6      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x2e8>
 8000cd6:	e712      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8000cd8:	6823      	ldr	r3, [r4, #0]
 8000cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cde:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8000ce0:	f7ff fcc2 	bl	8000668 <HAL_GetTick>
 8000ce4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	0499      	lsls	r1, r3, #18
 8000cea:	f57f aeb1 	bpl.w	8000a50 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000cee:	f7ff fcbb 	bl	8000668 <HAL_GetTick>
 8000cf2:	1b80      	subs	r0, r0, r6
 8000cf4:	2802      	cmp	r0, #2
 8000cf6:	d9f6      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x30a>
 8000cf8:	e701      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
      if((int32_t) (HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000cfa:	f7ff fcb5 	bl	8000668 <HAL_GetTick>
 8000cfe:	1b80      	subs	r0, r0, r6
 8000d00:	2864      	cmp	r0, #100	; 0x64
 8000d02:	f67f aeb0 	bls.w	8000a66 <HAL_RCC_OscConfig+0x8a>
 8000d06:	e6fa      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	b9b3      	cbnz	r3, 8000d38 <HAL_RCC_OscConfig+0x35c>
 8000d0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0c:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	6723      	str	r3, [r4, #112]	; 0x70
 8000d16:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d18:	f023 0304 	bic.w	r3, r3, #4
 8000d1c:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fca3 	bl	8000668 <HAL_GetTick>
 8000d22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d26:	0798      	lsls	r0, r3, #30
 8000d28:	f57f aeb4 	bpl.w	8000a94 <HAL_RCC_OscConfig+0xb8>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2c:	f7ff fc9c 	bl	8000668 <HAL_GetTick>
 8000d30:	1b80      	subs	r0, r0, r6
 8000d32:	42b8      	cmp	r0, r7
 8000d34:	d9f6      	bls.n	8000d24 <HAL_RCC_OscConfig+0x348>
 8000d36:	e6e2      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d3c:	d103      	bne.n	8000d46 <HAL_RCC_OscConfig+0x36a>
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6723      	str	r3, [r4, #112]	; 0x70
 8000d44:	e698      	b.n	8000a78 <HAL_RCC_OscConfig+0x9c>
 8000d46:	f023 0301 	bic.w	r3, r3, #1
 8000d4a:	6723      	str	r3, [r4, #112]	; 0x70
 8000d4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000d4e:	f023 0304 	bic.w	r3, r3, #4
 8000d52:	e694      	b.n	8000a7e <HAL_RCC_OscConfig+0xa2>
        if((int32_t) (HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d54:	f7ff fc88 	bl	8000668 <HAL_GetTick>
 8000d58:	1bc0      	subs	r0, r0, r7
 8000d5a:	42a0      	cmp	r0, r4
 8000d5c:	f67f ae96 	bls.w	8000a8c <HAL_RCC_OscConfig+0xb0>
 8000d60:	e6cd      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000d62:	4c42      	ldr	r4, [pc, #264]	; (8000e6c <HAL_RCC_OscConfig+0x490>)
 8000d64:	6923      	ldr	r3, [r4, #16]
 8000d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d6a:	2b18      	cmp	r3, #24
 8000d6c:	f43f aeaf 	beq.w	8000ace <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_PLL_DISABLE();
 8000d70:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d72:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d78:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7a:	d169      	bne.n	8000e50 <HAL_RCC_OscConfig+0x474>
        tickstart = HAL_GetTick();
 8000d7c:	f7ff fc74 	bl	8000668 <HAL_GetTick>
 8000d80:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d82:	6823      	ldr	r3, [r4, #0]
 8000d84:	0199      	lsls	r1, r3, #6
 8000d86:	d45d      	bmi.n	8000e44 <HAL_RCC_OscConfig+0x468>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d8a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000d8c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000d90:	f023 0303 	bic.w	r3, r3, #3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000d98:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000da0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000da2:	3b01      	subs	r3, #1
 8000da4:	3a01      	subs	r2, #1
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	0412      	lsls	r2, r2, #16
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000db0:	4313      	orrs	r3, r2
 8000db2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000db4:	3a01      	subs	r2, #1
 8000db6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	0612      	lsls	r2, r2, #24
 8000dc2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	6323      	str	r3, [r4, #48]	; 0x30
 8000dca:	f64f 73f8 	movw	r3, #65528	; 0xfff8
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000dce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000dd0:	fa93 f3a3 	rbit	r3, r3
 8000dd4:	fab3 f183 	clz	r1, r3
 8000dd8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000ddc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000dde:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000de2:	408b      	lsls	r3, r1
 8000de4:	4313      	orrs	r3, r2
 8000de6:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000de8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000dec:	f023 030c 	bic.w	r3, r3, #12
 8000df0:	4313      	orrs	r3, r2
 8000df2:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000df6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000df8:	f023 0302 	bic.w	r3, r3, #2
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e06:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000e08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0e:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000e10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e16:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000e18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000e20:	6823      	ldr	r3, [r4, #0]
 8000e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e26:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000e28:	f7ff fc1e 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e2c:	4c0f      	ldr	r4, [pc, #60]	; (8000e6c <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8000e2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	019a      	lsls	r2, r3, #6
 8000e34:	f53f ae32 	bmi.w	8000a9c <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e38:	f7ff fc16 	bl	8000668 <HAL_GetTick>
 8000e3c:	1b40      	subs	r0, r0, r5
 8000e3e:	2802      	cmp	r0, #2
 8000e40:	d9f6      	bls.n	8000e30 <HAL_RCC_OscConfig+0x454>
 8000e42:	e65c      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e44:	f7ff fc10 	bl	8000668 <HAL_GetTick>
 8000e48:	1b80      	subs	r0, r0, r6
 8000e4a:	2802      	cmp	r0, #2
 8000e4c:	d999      	bls.n	8000d82 <HAL_RCC_OscConfig+0x3a6>
 8000e4e:	e656      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc0a 	bl	8000668 <HAL_GetTick>
 8000e54:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	019b      	lsls	r3, r3, #6
 8000e5a:	f57f ae1f 	bpl.w	8000a9c <HAL_RCC_OscConfig+0xc0>
          if((int32_t) (HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e5e:	f7ff fc03 	bl	8000668 <HAL_GetTick>
 8000e62:	1b40      	subs	r0, r0, r5
 8000e64:	2802      	cmp	r0, #2
 8000e66:	d9f6      	bls.n	8000e56 <HAL_RCC_OscConfig+0x47a>
 8000e68:	e649      	b.n	8000afe <HAL_RCC_OscConfig+0x122>
 8000e6a:	bf00      	nop
 8000e6c:	58024400 	.word	0x58024400

08000e70 <HAL_RCC_GetSysClockFreq>:
 uint32_t pllp = 1, pllsource = 0, pllm = 1 ,pllfracen =0 , hsivalue = 0;
 float fracn1=0, pllvco = 0;
 uint32_t sysclockfreq = 0;
  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e70:	4b48      	ldr	r3, [pc, #288]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x124>)
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000e78:	2a10      	cmp	r2, #16
{
 8000e7a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e7c:	d00e      	beq.n	8000e9c <HAL_RCC_GetSysClockFreq+0x2c>
 8000e7e:	2a18      	cmp	r2, #24
 8000e80:	d00e      	beq.n	8000ea0 <HAL_RCC_GetSysClockFreq+0x30>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	f040 8084 	bne.w	8000f90 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case 0x00:  /* HSI used as system clock source */
  
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4843      	ldr	r0, [pc, #268]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x128>)
 8000e8c:	f012 0f20 	tst.w	r2, #32
 8000e90:	d07f      	beq.n	8000f92 <HAL_RCC_GetSysClockFreq+0x122>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000e98:	40d8      	lsrs	r0, r3
 8000e9a:	bd10      	pop	{r4, pc}
  case 0x08:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case 0x10:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8000e9c:	483f      	ldr	r0, [pc, #252]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000e9e:	bd10      	pop	{r4, pc}
  case 0x18:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000ea0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000ea2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000ea8:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8000eac:	f001 0101 	and.w	r1, r1, #1
 8000eb0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8000fa0 <HAL_RCC_GetSysClockFreq+0x130>
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000eb4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8000eb8:	4351      	muls	r1, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000eba:	f004 0203 	and.w	r2, r4, #3
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ebe:	ee07 1a90 	vmov	s15, r1

    switch (pllsource)
 8000ec2:	2a01      	cmp	r2, #1
    fracn1 = (pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000ec4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8000ec8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    switch (pllsource)
 8000ecc:	d002      	beq.n	8000ed4 <HAL_RCC_GetSysClockFreq+0x64>
 8000ece:	d30e      	bcc.n	8000eee <HAL_RCC_GetSysClockFreq+0x7e>
 8000ed0:	2a02      	cmp	r2, #2
 8000ed2:	d04c      	beq.n	8000f6e <HAL_RCC_GetSysClockFreq+0xfe>
    case 0x02:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
      break;

    default:
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a33      	ldr	r2, [pc, #204]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x134>)
 8000ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000edc:	ee07 3a10 	vmov	s14, r3
 8000ee0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ee4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000ee8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eec:	e04b      	b.n	8000f86 <HAL_RCC_GetSysClockFreq+0x116>
     if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	f012 0f20 	tst.w	r2, #32
 8000ef4:	4a28      	ldr	r2, [pc, #160]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x128>)
 8000ef6:	d026      	beq.n	8000f46 <HAL_RCC_GetSysClockFreq+0xd6>
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000ef8:	6819      	ldr	r1, [r3, #0]
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000efc:	f3c1 01c1 	ubfx	r1, r1, #3, #2
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f00:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000f04:	40ca      	lsrs	r2, r1
        pllvco = ( hsivalue / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f06:	fbb2 f2f0 	udiv	r2, r2, r0
 8000f0a:	ee07 2a10 	vmov	s14, r2
 8000f0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000f12:	ee07 3a10 	vmov	s14, r3
 8000f16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f1a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f22:	ee66 7a87 	vmul.f32	s15, s13, s14
      break;
    }
    pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1 ) ;
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x124>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000f2e:	3301      	adds	r3, #1
    sysclockfreq =  (uint32_t)(pllvco/pllp);
 8000f30:	ee07 3a10 	vmov	s14, r3
 8000f34:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000f38:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f3c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000f40:	ee17 0a90 	vmov	r0, s15
 8000f44:	bd10      	pop	{r4, pc}
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f4c:	ee07 3a10 	vmov	s14, r3
 8000f50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f54:	fbb2 f3f0 	udiv	r3, r2, r0
 8000f58:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f60:	ee07 3a90 	vmov	s15, r3
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f6c:	e7db      	b.n	8000f26 <HAL_RCC_GetSysClockFreq+0xb6>
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f76:	ee07 3a10 	vmov	s14, r3
 8000f7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000f7e:	eea6 7a25 	vfma.f32	s14, s12, s11
 8000f82:	ee37 7a27 	vadd.f32	s14, s14, s15
      pllvco = (CSI_VALUE / pllm) * ((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/0x2000) +1 );
 8000f86:	fbb2 f2f0 	udiv	r2, r2, r0
 8000f8a:	ee07 2a90 	vmov	s15, r2
 8000f8e:	e7e9      	b.n	8000f64 <HAL_RCC_GetSysClockFreq+0xf4>
    sysclockfreq = CSI_VALUE;
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <HAL_RCC_GetSysClockFreq+0x134>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8000f92:	bd10      	pop	{r4, pc}
 8000f94:	58024400 	.word	0x58024400
 8000f98:	03d09000 	.word	0x03d09000
 8000f9c:	007a1200 	.word	0x007a1200
 8000fa0:	39000000 	.word	0x39000000
 8000fa4:	003d0900 	.word	0x003d0900

08000fa8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fa8:	4a68      	ldr	r2, [pc, #416]	; (800114c <HAL_RCC_ClockConfig+0x1a4>)
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	428b      	cmp	r3, r1
{
 8000fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fba:	d342      	bcc.n	8001042 <HAL_RCC_ClockConfig+0x9a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fbc:	6822      	ldr	r2, [r4, #0]
 8000fbe:	0797      	lsls	r7, r2, #30
 8000fc0:	d44c      	bmi.n	800105c <HAL_RCC_ClockConfig+0xb4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fc2:	07d6      	lsls	r6, r2, #31
 8000fc4:	d452      	bmi.n	800106c <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fc6:	4a61      	ldr	r2, [pc, #388]	; (800114c <HAL_RCC_ClockConfig+0x1a4>)
 8000fc8:	6813      	ldr	r3, [r2, #0]
 8000fca:	f003 0307 	and.w	r3, r3, #7
 8000fce:	429d      	cmp	r5, r3
 8000fd0:	f0c0 80a8 	bcc.w	8001124 <HAL_RCC_ClockConfig+0x17c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000fd4:	6822      	ldr	r2, [r4, #0]
 8000fd6:	0755      	lsls	r5, r2, #29
 8000fd8:	f100 80af 	bmi.w	800113a <HAL_RCC_ClockConfig+0x192>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fdc:	0710      	lsls	r0, r2, #28
 8000fde:	d506      	bpl.n	8000fee <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000fe0:	495b      	ldr	r1, [pc, #364]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
 8000fe2:	6960      	ldr	r0, [r4, #20]
 8000fe4:	69cb      	ldr	r3, [r1, #28]
 8000fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fea:	4303      	orrs	r3, r0
 8000fec:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fee:	06d1      	lsls	r1, r2, #27
 8000ff0:	d506      	bpl.n	8001000 <HAL_RCC_ClockConfig+0x58>
    MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000ff2:	4957      	ldr	r1, [pc, #348]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
 8000ff4:	69a0      	ldr	r0, [r4, #24]
 8000ff6:	69cb      	ldr	r3, [r1, #28]
 8000ff8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ffc:	4303      	orrs	r3, r0
 8000ffe:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001000:	0693      	lsls	r3, r2, #26
 8001002:	d506      	bpl.n	8001012 <HAL_RCC_ClockConfig+0x6a>
    MODIFY_REG(RCC->D3CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001004:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
 8001006:	69e1      	ldr	r1, [r4, #28]
 8001008:	6a13      	ldr	r3, [r2, #32]
 800100a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800100e:	430b      	orrs	r3, r1
 8001010:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8001012:	f7ff ff2d 	bl	8000e70 <HAL_RCC_GetSysClockFreq>
 8001016:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
 8001018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	fa92 f2a2 	rbit	r2, r2
 8001022:	fab2 f282 	clz	r2, r2
 8001026:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800102a:	40d3      	lsrs	r3, r2
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_RCC_ClockConfig+0x1ac>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	40d8      	lsrs	r0, r3
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <HAL_RCC_ClockConfig+0x1b0>)
 8001034:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff fad6 	bl	80005e8 <HAL_InitTick>
  return HAL_OK;
 800103c:	2000      	movs	r0, #0
}
 800103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	6813      	ldr	r3, [r2, #0]
 8001044:	f023 0307 	bic.w	r3, r3, #7
 8001048:	430b      	orrs	r3, r1
 800104a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800104c:	6813      	ldr	r3, [r2, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	4299      	cmp	r1, r3
 8001054:	d0b2      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001056:	2001      	movs	r0, #1
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800105c:	493c      	ldr	r1, [pc, #240]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
 800105e:	68e0      	ldr	r0, [r4, #12]
 8001060:	698b      	ldr	r3, [r1, #24]
 8001062:	f023 030f 	bic.w	r3, r3, #15
 8001066:	4303      	orrs	r3, r0
 8001068:	618b      	str	r3, [r1, #24]
 800106a:	e7aa      	b.n	8000fc2 <HAL_RCC_ClockConfig+0x1a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800106c:	4b38      	ldr	r3, [pc, #224]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
 800106e:	68a1      	ldr	r1, [r4, #8]
 8001070:	699a      	ldr	r2, [r3, #24]
 8001072:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001076:	430a      	orrs	r2, r1
 8001078:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107a:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107c:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800107e:	2902      	cmp	r1, #2
 8001080:	d11d      	bne.n	80010be <HAL_RCC_ClockConfig+0x116>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001082:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001086:	d0e6      	beq.n	8001056 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001088:	691a      	ldr	r2, [r3, #16]
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108a:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 800108e:	4f30      	ldr	r7, [pc, #192]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001090:	f022 0207 	bic.w	r2, r2, #7
 8001094:	430a      	orrs	r2, r1
 8001096:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8001098:	f7ff fae6 	bl	8000668 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109c:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
 800109e:	4606      	mov	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d119      	bne.n	80010d8 <HAL_RCC_ClockConfig+0x130>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010aa:	2b10      	cmp	r3, #16
 80010ac:	d08b      	beq.n	8000fc6 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ae:	f7ff fadb 	bl	8000668 <HAL_GetTick>
 80010b2:	1b80      	subs	r0, r0, r6
 80010b4:	4540      	cmp	r0, r8
 80010b6:	d9f5      	bls.n	80010a4 <HAL_RCC_ClockConfig+0xfc>
            return HAL_TIMEOUT;
 80010b8:	2003      	movs	r0, #3
 80010ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010be:	2903      	cmp	r1, #3
 80010c0:	d102      	bne.n	80010c8 <HAL_RCC_ClockConfig+0x120>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80010c6:	e7de      	b.n	8001086 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80010c8:	2901      	cmp	r1, #1
 80010ca:	d102      	bne.n	80010d2 <HAL_RCC_ClockConfig+0x12a>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
 80010cc:	f412 7f80 	tst.w	r2, #256	; 0x100
 80010d0:	e7d9      	b.n	8001086 <HAL_RCC_ClockConfig+0xde>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	f012 0f04 	tst.w	r2, #4
 80010d6:	e7d6      	b.n	8001086 <HAL_RCC_ClockConfig+0xde>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x14c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010e2:	2b18      	cmp	r3, #24
 80010e4:	f43f af6f 	beq.w	8000fc6 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e8:	f7ff fabe 	bl	8000668 <HAL_GetTick>
 80010ec:	1b80      	subs	r0, r0, r6
 80010ee:	4540      	cmp	r0, r8
 80010f0:	d9f4      	bls.n	80010dc <HAL_RCC_ClockConfig+0x134>
 80010f2:	e7e1      	b.n	80010b8 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d110      	bne.n	800111a <HAL_RCC_ClockConfig+0x172>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_CSI)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010fe:	2b08      	cmp	r3, #8
 8001100:	f43f af61 	beq.w	8000fc6 <HAL_RCC_ClockConfig+0x1e>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	f7ff fab0 	bl	8000668 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	4540      	cmp	r0, r8
 800110c:	d9f4      	bls.n	80010f8 <HAL_RCC_ClockConfig+0x150>
 800110e:	e7d3      	b.n	80010b8 <HAL_RCC_ClockConfig+0x110>
          if((int32_t) (HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001110:	f7ff faaa 	bl	8000668 <HAL_GetTick>
 8001114:	1b80      	subs	r0, r0, r6
 8001116:	4540      	cmp	r0, r8
 8001118:	d8ce      	bhi.n	80010b8 <HAL_RCC_ClockConfig+0x110>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	f013 0f38 	tst.w	r3, #56	; 0x38
 8001120:	d1f6      	bne.n	8001110 <HAL_RCC_ClockConfig+0x168>
 8001122:	e750      	b.n	8000fc6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001124:	6813      	ldr	r3, [r2, #0]
 8001126:	f023 0307 	bic.w	r3, r3, #7
 800112a:	432b      	orrs	r3, r5
 800112c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800112e:	6813      	ldr	r3, [r2, #0]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	429d      	cmp	r5, r3
 8001136:	d18e      	bne.n	8001056 <HAL_RCC_ClockConfig+0xae>
 8001138:	e74c      	b.n	8000fd4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800113a:	4905      	ldr	r1, [pc, #20]	; (8001150 <HAL_RCC_ClockConfig+0x1a8>)
 800113c:	6920      	ldr	r0, [r4, #16]
 800113e:	698b      	ldr	r3, [r1, #24]
 8001140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001144:	4303      	orrs	r3, r0
 8001146:	618b      	str	r3, [r1, #24]
 8001148:	e748      	b.n	8000fdc <HAL_RCC_ClockConfig+0x34>
 800114a:	bf00      	nop
 800114c:	52002000 	.word	0x52002000
 8001150:	58024400 	.word	0x58024400
 8001154:	08003146 	.word	0x08003146
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800115c:	b508      	push	{r3, lr}
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> POSITION_VAL(RCC_D1CFGR_HPRE_0)]);
 800115e:	f000 fed5 	bl	8001f0c <HAL_RCCEx_GetD1SysClockFreq>
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_RCC_GetHCLKFreq+0x28>)
 8001164:	2201      	movs	r2, #1
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	fa92 f2a2 	rbit	r2, r2
 800116c:	fab2 f282 	clz	r2, r2
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	40d3      	lsrs	r3, r2
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001178:	5cd3      	ldrb	r3, [r2, r3]
 800117a:	40d8      	lsrs	r0, r3
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_RCC_GetHCLKFreq+0x30>)
 800117e:	6018      	str	r0, [r3, #0]
  return SystemD2Clock;
}
 8001180:	bd08      	pop	{r3, pc}
 8001182:	bf00      	nop
 8001184:	58024400 	.word	0x58024400
 8001188:	08003146 	.word	0x08003146
 800118c:	2000000c 	.word	0x2000000c

08001190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001190:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)]);
 8001192:	f7ff ffe3 	bl	800115c <HAL_RCC_GetHCLKFreq>
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001198:	2210      	movs	r2, #16
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	fa92 f2a2 	rbit	r2, r2
 80011a0:	fab2 f282 	clz	r2, r2
 80011a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011a8:	40d3      	lsrs	r3, r2
 80011aa:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
}
 80011ae:	40d8      	lsrs	r0, r3
 80011b0:	bd08      	pop	{r3, pc}
 80011b2:	bf00      	nop
 80011b4:	58024400 	.word	0x58024400
 80011b8:	08003146 	.word	0x08003146

080011bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011bc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> POSITION_VAL(RCC_D2CFGR_D2PPRE2_0)]);
 80011be:	f7ff ffcd 	bl	800115c <HAL_RCC_GetHCLKFreq>
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	fa92 f2a2 	rbit	r2, r2
 80011ce:	fab2 f282 	clz	r2, r2
 80011d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80011d6:	40d3      	lsrs	r3, r2
 80011d8:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
}
 80011dc:	40d8      	lsrs	r0, r3
 80011de:	bd08      	pop	{r3, pc}
 80011e0:	58024400 	.word	0x58024400
 80011e4:	08003146 	.word	0x08003146

080011e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80011e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80011ea:	4c31      	ldr	r4, [pc, #196]	; (80012b0 <RCCEx_PLL2_Config+0xc8>)
{
 80011ec:	4606      	mov	r6, r0
 80011ee:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80011f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d058      	beq.n	80012ac <RCCEx_PLL2_Config+0xc4>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80011fa:	6823      	ldr	r3, [r4, #0]
 80011fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001200:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001202:	f7ff fa31 	bl	8000668 <HAL_GetTick>
 8001206:	4607      	mov	r7, r0

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	011a      	lsls	r2, r3, #4
 800120c:	d43a      	bmi.n	8001284 <RCCEx_PLL2_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800120e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001210:	6832      	ldr	r2, [r6, #0]
 8001212:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001216:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800121a:	62a3      	str	r3, [r4, #40]	; 0x28
 800121c:	68b3      	ldr	r3, [r6, #8]
 800121e:	68f2      	ldr	r2, [r6, #12]
 8001220:	3b01      	subs	r3, #1
 8001222:	3a01      	subs	r2, #1
 8001224:	025b      	lsls	r3, r3, #9
 8001226:	0412      	lsls	r2, r2, #16
 8001228:	b29b      	uxth	r3, r3
 800122a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800122e:	4313      	orrs	r3, r2
 8001230:	6872      	ldr	r2, [r6, #4]
 8001232:	3a01      	subs	r2, #1
 8001234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001238:	4313      	orrs	r3, r2
 800123a:	6932      	ldr	r2, [r6, #16]
 800123c:	3a01      	subs	r2, #1
 800123e:	0612      	lsls	r2, r2, #24
 8001240:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001244:	4313      	orrs	r3, r2
 8001246:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8001248:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800124a:	6972      	ldr	r2, [r6, #20]
 800124c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001250:	4313      	orrs	r3, r2
 8001252:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001254:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001256:	69b2      	ldr	r2, [r6, #24]
 8001258:	f023 0320 	bic.w	r3, r3, #32
 800125c:	4313      	orrs	r3, r2
 800125e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001262:	b9b5      	cbnz	r5, 8001292 <RCCEx_PLL2_Config+0xaa>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8001268:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800126a:	4c11      	ldr	r4, [pc, #68]	; (80012b0 <RCCEx_PLL2_Config+0xc8>)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001272:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001274:	f7ff f9f8 	bl	8000668 <HAL_GetTick>
 8001278:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	d50f      	bpl.n	80012a0 <RCCEx_PLL2_Config+0xb8>
    }

  }


  return status;
 8001280:	2000      	movs	r0, #0
 8001282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001284:	f7ff f9f0 	bl	8000668 <HAL_GetTick>
 8001288:	1bc0      	subs	r0, r0, r7
 800128a:	2802      	cmp	r0, #2
 800128c:	d9bc      	bls.n	8001208 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800128e:	2003      	movs	r0, #3
 8001290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 8001292:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8001294:	bf0c      	ite	eq
 8001296:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800129a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800129e:	e7e3      	b.n	8001268 <RCCEx_PLL2_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80012a0:	f7ff f9e2 	bl	8000668 <HAL_GetTick>
 80012a4:	1b40      	subs	r0, r0, r5
 80012a6:	2802      	cmp	r0, #2
 80012a8:	d9e7      	bls.n	800127a <RCCEx_PLL2_Config+0x92>
 80012aa:	e7f0      	b.n	800128e <RCCEx_PLL2_Config+0xa6>
    return HAL_ERROR;
 80012ac:	2001      	movs	r0, #1
}
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b0:	58024400 	.word	0x58024400

080012b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80012b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80012b6:	4c31      	ldr	r4, [pc, #196]	; (800137c <RCCEx_PLL3_Config+0xc8>)
{
 80012b8:	4606      	mov	r6, r0
 80012ba:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80012bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d058      	beq.n	8001378 <RCCEx_PLL3_Config+0xc4>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80012c6:	6823      	ldr	r3, [r4, #0]
 80012c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012ce:	f7ff f9cb 	bl	8000668 <HAL_GetTick>
 80012d2:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	009a      	lsls	r2, r3, #2
 80012d8:	d43a      	bmi.n	8001350 <RCCEx_PLL3_Config+0x9c>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80012da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012dc:	6832      	ldr	r2, [r6, #0]
 80012de:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80012e2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80012e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80012e8:	68b3      	ldr	r3, [r6, #8]
 80012ea:	68f2      	ldr	r2, [r6, #12]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	3a01      	subs	r2, #1
 80012f0:	025b      	lsls	r3, r3, #9
 80012f2:	0412      	lsls	r2, r2, #16
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80012fa:	4313      	orrs	r3, r2
 80012fc:	6872      	ldr	r2, [r6, #4]
 80012fe:	3a01      	subs	r2, #1
 8001300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001304:	4313      	orrs	r3, r2
 8001306:	6932      	ldr	r2, [r6, #16]
 8001308:	3a01      	subs	r2, #1
 800130a:	0612      	lsls	r2, r2, #24
 800130c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001310:	4313      	orrs	r3, r2
 8001312:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001314:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001316:	6972      	ldr	r2, [r6, #20]
 8001318:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800131c:	4313      	orrs	r3, r2
 800131e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001320:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001322:	69b2      	ldr	r2, [r6, #24]
 8001324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001328:	4313      	orrs	r3, r2
 800132a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800132c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 800132e:	b9b5      	cbnz	r5, 800135e <RCCEx_PLL3_Config+0xaa>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001334:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8001336:	4c11      	ldr	r4, [pc, #68]	; (800137c <RCCEx_PLL3_Config+0xc8>)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800133e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001340:	f7ff f992 	bl	8000668 <HAL_GetTick>
 8001344:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	d50f      	bpl.n	800136c <RCCEx_PLL3_Config+0xb8>
    }

  }


  return status;
 800134c:	2000      	movs	r0, #0
 800134e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001350:	f7ff f98a 	bl	8000668 <HAL_GetTick>
 8001354:	1bc0      	subs	r0, r0, r7
 8001356:	2802      	cmp	r0, #2
 8001358:	d9bc      	bls.n	80012d4 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800135a:	2003      	movs	r0, #3
 800135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 800135e:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001360:	bf0c      	ite	eq
 8001362:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001366:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800136a:	e7e3      	b.n	8001334 <RCCEx_PLL3_Config+0x80>
      if((int32_t) (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800136c:	f7ff f97c 	bl	8000668 <HAL_GetTick>
 8001370:	1b40      	subs	r0, r0, r5
 8001372:	2802      	cmp	r0, #2
 8001374:	d9e7      	bls.n	8001346 <RCCEx_PLL3_Config+0x92>
 8001376:	e7f0      	b.n	800135a <RCCEx_PLL3_Config+0xa6>
    return HAL_ERROR;
 8001378:	2001      	movs	r0, #1
}
 800137a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001384:	6804      	ldr	r4, [r0, #0]
{
 8001386:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001388:	f014 6000 	ands.w	r0, r4, #134217728	; 0x8000000
 800138c:	d014      	beq.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800138e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001394:	d018      	beq.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8001396:	d802      	bhi.n	800139e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001398:	b183      	cbz	r3, 80013bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = HAL_ERROR;
 800139a:	2401      	movs	r4, #1
 800139c:	e01b      	b.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800139e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013a2:	d023      	beq.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x6c>
 80013a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80013a8:	d1f7      	bne.n	800139a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80013aa:	4aa6      	ldr	r2, [pc, #664]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80013ac:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80013ae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80013b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80013b4:	430b      	orrs	r3, r1
 80013b6:	6513      	str	r3, [r2, #80]	; 0x50
 80013b8:	2400      	movs	r4, #0
 80013ba:	e00c      	b.n	80013d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80013bc:	4aa1      	ldr	r2, [pc, #644]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80013be:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80013c6:	e7f0      	b.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80013c8:	2102      	movs	r1, #2
 80013ca:	1d28      	adds	r0, r5, #4
 80013cc:	f7ff ff0c 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80013d0:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d0e9      	beq.n	80013aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	05de      	lsls	r6, r3, #23
 80013da:	d53c      	bpl.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai1ClockSelection)
 80013dc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80013de:	2b04      	cmp	r3, #4
 80013e0:	d834      	bhi.n	800144c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80013e2:	e8df f003 	tbb	[pc, r3]
 80013e6:	1009      	.short	0x1009
 80013e8:	0e2d      	.short	0x0e2d
 80013ea:	0e          	.byte	0x0e
 80013eb:	00          	.byte	0x00
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80013ec:	2102      	movs	r1, #2
 80013ee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80013f2:	f7ff ff5f 	bl	80012b4 <RCCEx_PLL3_Config>
 80013f6:	e7eb      	b.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80013f8:	4a92      	ldr	r2, [pc, #584]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80013fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001400:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8001402:	4626      	mov	r6, r4
 8001404:	e004      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001406:	2100      	movs	r1, #0
 8001408:	1d28      	adds	r0, r5, #4
 800140a:	f7ff feed 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800140e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001410:	b9ee      	cbnz	r6, 800144e <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001412:	4a8c      	ldr	r2, [pc, #560]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001414:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8001416:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001418:	f023 0307 	bic.w	r3, r3, #7
 800141c:	430b      	orrs	r3, r1
 800141e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001420:	682b      	ldr	r3, [r5, #0]
 8001422:	0598      	lsls	r0, r3, #22
 8001424:	d527      	bpl.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001426:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001428:	2b80      	cmp	r3, #128	; 0x80
 800142a:	d043      	beq.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800142c:	d815      	bhi.n	800145a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d034      	beq.n	800149c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001432:	2b40      	cmp	r3, #64	; 0x40
 8001434:	d038      	beq.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
      ret = HAL_ERROR;
 8001436:	2601      	movs	r6, #1
      status |= ret;
 8001438:	ea44 0006 	orr.w	r0, r4, r6
 800143c:	b2c4      	uxtb	r4, r0
 800143e:	e01a      	b.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001440:	2100      	movs	r1, #0
 8001442:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001446:	f7ff ff35 	bl	80012b4 <RCCEx_PLL3_Config>
 800144a:	e7e0      	b.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      ret = HAL_ERROR;
 800144c:	2601      	movs	r6, #1
      status |= ret;
 800144e:	ea44 0006 	orr.w	r0, r4, r6
 8001452:	b2c4      	uxtb	r4, r0
 8001454:	e7e4      	b.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001456:	4626      	mov	r6, r4
 8001458:	e7e2      	b.n	8001420 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 800145a:	2bc0      	cmp	r3, #192	; 0xc0
 800145c:	d002      	beq.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800145e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001462:	d1e8      	bne.n	8001436 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    if(ret == HAL_OK)
 8001464:	2e00      	cmp	r6, #0
 8001466:	d1e7      	bne.n	8001438 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001468:	4a76      	ldr	r2, [pc, #472]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800146a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800146c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800146e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001472:	430b      	orrs	r3, r1
 8001474:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001476:	682b      	ldr	r3, [r5, #0]
 8001478:	0559      	lsls	r1, r3, #21
 800147a:	d531      	bpl.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    switch(PeriphClkInit->Sai4AClockSelection)
 800147c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 8001480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001484:	d04b      	beq.n	800151e <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8001486:	d81b      	bhi.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d03c      	beq.n	8001506 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800148c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001490:	d03f      	beq.n	8001512 <HAL_RCCEx_PeriphCLKConfig+0x192>
      ret = HAL_ERROR;
 8001492:	2601      	movs	r6, #1
      status |= ret;
 8001494:	ea44 0006 	orr.w	r0, r4, r6
 8001498:	b2c4      	uxtb	r4, r0
 800149a:	e021      	b.n	80014e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800149c:	4a69      	ldr	r2, [pc, #420]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800149e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80014a6:	e7dd      	b.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80014a8:	2100      	movs	r1, #0
 80014aa:	1d28      	adds	r0, r5, #4
 80014ac:	f7ff fe9c 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80014b0:	4606      	mov	r6, r0
      break;
 80014b2:	e7d7      	b.n	8001464 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80014b4:	2100      	movs	r1, #0
 80014b6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80014ba:	f7ff fefb 	bl	80012b4 <RCCEx_PLL3_Config>
 80014be:	e7f7      	b.n	80014b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    switch(PeriphClkInit->Sai4AClockSelection)
 80014c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80014c4:	d002      	beq.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80014c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014ca:	d1e2      	bne.n	8001492 <HAL_RCCEx_PeriphCLKConfig+0x112>
    if(ret == HAL_OK)
 80014cc:	2e00      	cmp	r6, #0
 80014ce:	d1e1      	bne.n	8001494 <HAL_RCCEx_PeriphCLKConfig+0x114>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80014d0:	4a5c      	ldr	r2, [pc, #368]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80014d2:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 80014d6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80014d8:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80014dc:	430b      	orrs	r3, r1
 80014de:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	051a      	lsls	r2, r3, #20
 80014e4:	d531      	bpl.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai4BClockSelection)
 80014e6:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 80014ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014ee:	d045      	beq.n	800157c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 80014f0:	d81b      	bhi.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d036      	beq.n	8001564 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80014f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fa:	d039      	beq.n	8001570 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      ret = HAL_ERROR;
 80014fc:	2601      	movs	r6, #1
      status |= ret;
 80014fe:	ea44 0006 	orr.w	r0, r4, r6
 8001502:	b2c4      	uxtb	r4, r0
 8001504:	e021      	b.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001506:	4a4f      	ldr	r2, [pc, #316]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001508:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800150a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150e:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001510:	e7dc      	b.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001512:	2100      	movs	r1, #0
 8001514:	1d28      	adds	r0, r5, #4
 8001516:	f7ff fe67 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800151a:	4606      	mov	r6, r0
      break;
 800151c:	e7d6      	b.n	80014cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800151e:	2100      	movs	r1, #0
 8001520:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001524:	f7ff fec6 	bl	80012b4 <RCCEx_PLL3_Config>
 8001528:	e7f7      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x19a>
    switch(PeriphClkInit->Sai4BClockSelection)
 800152a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800152e:	d002      	beq.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8001530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001534:	d1e2      	bne.n	80014fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
    if(ret == HAL_OK)
 8001536:	2e00      	cmp	r6, #0
 8001538:	d1e1      	bne.n	80014fe <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800153a:	4a42      	ldr	r2, [pc, #264]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800153c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8001540:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001542:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001546:	430b      	orrs	r3, r1
 8001548:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	d528      	bpl.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
    switch(PeriphClkInit->QspiClockSelection)
 8001550:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001552:	2b10      	cmp	r3, #16
 8001554:	d037      	beq.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0x246>
 8001556:	d817      	bhi.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001558:	b1d3      	cbz	r3, 8001590 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = HAL_ERROR;
 800155a:	2601      	movs	r6, #1
      status |= ret;
 800155c:	ea44 0006 	orr.w	r0, r4, r6
 8001560:	b2c4      	uxtb	r4, r0
 8001562:	e01e      	b.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001564:	4a37      	ldr	r2, [pc, #220]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001566:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800156e:	e7e2      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001570:	2100      	movs	r1, #0
 8001572:	1d28      	adds	r0, r5, #4
 8001574:	f7ff fe38 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001578:	4606      	mov	r6, r0
      break;
 800157a:	e7dc      	b.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800157c:	2100      	movs	r1, #0
 800157e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001582:	f7ff fe97 	bl	80012b4 <RCCEx_PLL3_Config>
 8001586:	e7f7      	b.n	8001578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch(PeriphClkInit->QspiClockSelection)
 8001588:	2b20      	cmp	r3, #32
 800158a:	d022      	beq.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
 800158c:	2b30      	cmp	r3, #48	; 0x30
 800158e:	d1e4      	bne.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    if(ret == HAL_OK)
 8001590:	2e00      	cmp	r6, #0
 8001592:	d1e3      	bne.n	800155c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001594:	4a2b      	ldr	r2, [pc, #172]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001596:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001598:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800159a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800159e:	430b      	orrs	r3, r1
 80015a0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	04df      	lsls	r7, r3, #19
 80015a6:	d529      	bpl.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80015a8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80015aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ae:	d042      	beq.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80015b0:	d815      	bhi.n	80015de <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d033      	beq.n	800161e <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80015b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ba:	d036      	beq.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = HAL_ERROR;
 80015bc:	2601      	movs	r6, #1
      status |= ret;
 80015be:	ea44 0006 	orr.w	r0, r4, r6
 80015c2:	b2c4      	uxtb	r4, r0
 80015c4:	e01a      	b.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80015c6:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80015c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80015ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ce:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80015d0:	e7de      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x210>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80015d2:	2102      	movs	r1, #2
 80015d4:	1d28      	adds	r0, r5, #4
 80015d6:	f7ff fe07 	bl	80011e8 <RCCEx_PLL2_Config>
 80015da:	4606      	mov	r6, r0
      break;
 80015dc:	e7d8      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x210>
    switch(PeriphClkInit->Spi123ClockSelection)
 80015de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80015e2:	d002      	beq.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80015e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015e8:	d1e8      	bne.n	80015bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    if(ret == HAL_OK)
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d1e7      	bne.n	80015be <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80015f0:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80015f2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80015f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015f8:	430b      	orrs	r3, r1
 80015fa:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	0498      	lsls	r0, r3, #18
 8001600:	d534      	bpl.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001602:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001608:	d048      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800160a:	d81d      	bhi.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 800160c:	b32b      	cbz	r3, 800165a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800160e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001612:	d03d      	beq.n	8001690 <HAL_RCCEx_PeriphCLKConfig+0x310>
      ret = HAL_ERROR;
 8001614:	2601      	movs	r6, #1
      status |= ret;
 8001616:	ea44 0006 	orr.w	r0, r4, r6
 800161a:	b2c4      	uxtb	r4, r0
 800161c:	e026      	b.n	800166c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001620:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001626:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001628:	e7df      	b.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800162a:	2100      	movs	r1, #0
 800162c:	1d28      	adds	r0, r5, #4
 800162e:	f7ff fddb 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001632:	4606      	mov	r6, r0
      break;
 8001634:	e7d9      	b.n	80015ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001636:	2100      	movs	r1, #0
 8001638:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800163c:	f7ff fe3a 	bl	80012b4 <RCCEx_PLL3_Config>
 8001640:	e7f7      	b.n	8001632 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8001642:	bf00      	nop
 8001644:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Spi45ClockSelection)
 8001648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800164c:	d005      	beq.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800164e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001652:	d002      	beq.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8001654:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001658:	d1dc      	bne.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 800165a:	2e00      	cmp	r6, #0
 800165c:	d1db      	bne.n	8001616 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800165e:	4aa0      	ldr	r2, [pc, #640]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001660:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8001662:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001664:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001668:	430b      	orrs	r3, r1
 800166a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	0459      	lsls	r1, r3, #17
 8001670:	d52d      	bpl.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001672:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8001676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800167a:	d04c      	beq.n	8001716 <HAL_RCCEx_PeriphCLKConfig+0x396>
 800167c:	d814      	bhi.n	80016a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800167e:	b1e3      	cbz	r3, 80016ba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8001680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001684:	d041      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      ret = HAL_ERROR;
 8001686:	2601      	movs	r6, #1
      status |= ret;
 8001688:	ea44 0006 	orr.w	r0, r4, r6
 800168c:	b2c4      	uxtb	r4, r0
 800168e:	e01e      	b.n	80016ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001690:	2101      	movs	r1, #1
 8001692:	1d28      	adds	r0, r5, #4
 8001694:	f7ff fda8 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001698:	4606      	mov	r6, r0
      break;
 800169a:	e7de      	b.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800169c:	2101      	movs	r1, #1
 800169e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80016a2:	f7ff fe07 	bl	80012b4 <RCCEx_PLL3_Config>
 80016a6:	e7f7      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0x318>
    switch(PeriphClkInit->Spi6ClockSelection)
 80016a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016ac:	d005      	beq.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80016ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b2:	d002      	beq.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80016b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80016b8:	d1e5      	bne.n	8001686 <HAL_RCCEx_PeriphCLKConfig+0x306>
    if(ret == HAL_OK)
 80016ba:	2e00      	cmp	r6, #0
 80016bc:	d1e4      	bne.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x308>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80016be:	4a88      	ldr	r2, [pc, #544]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80016c0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 80016c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80016c6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80016ca:	430b      	orrs	r3, r1
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80016ce:	682b      	ldr	r3, [r5, #0]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	d50f      	bpl.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    switch(PeriphClkInit->FdcanClockSelection)
 80016d4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80016d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016da:	d022      	beq.n	8001722 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80016dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016e0:	d025      	beq.n	800172e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80016e2:	bb53      	cbnz	r3, 800173a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    if(ret == HAL_OK)
 80016e4:	bb56      	cbnz	r6, 800173c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80016e6:	4a7e      	ldr	r2, [pc, #504]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80016e8:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80016ea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80016ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80016f0:	430b      	orrs	r3, r1
 80016f2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80016f4:	682b      	ldr	r3, [r5, #0]
 80016f6:	01db      	lsls	r3, r3, #7
 80016f8:	d532      	bpl.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    switch(PeriphClkInit->FmcClockSelection)
 80016fa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	f200 808a 	bhi.w	8001816 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8001702:	e8df f003 	tbb	[pc, r3]
 8001706:	1f24      	.short	0x1f24
 8001708:	2482      	.short	0x2482
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800170a:	2101      	movs	r1, #1
 800170c:	1d28      	adds	r0, r5, #4
 800170e:	f7ff fd6b 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001712:	4606      	mov	r6, r0
      break;
 8001714:	e7d1      	b.n	80016ba <HAL_RCCEx_PeriphCLKConfig+0x33a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001716:	2101      	movs	r1, #1
 8001718:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800171c:	f7ff fdca 	bl	80012b4 <RCCEx_PLL3_Config>
 8001720:	e7f7      	b.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001722:	4a6f      	ldr	r2, [pc, #444]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001724:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172a:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800172c:	e7da      	b.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800172e:	2101      	movs	r1, #1
 8001730:	1d28      	adds	r0, r5, #4
 8001732:	f7ff fd59 	bl	80011e8 <RCCEx_PLL2_Config>
 8001736:	4606      	mov	r6, r0
      break;
 8001738:	e7d4      	b.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      ret = HAL_ERROR;
 800173a:	2601      	movs	r6, #1
      status |= ret;
 800173c:	ea44 0006 	orr.w	r0, r4, r6
 8001740:	b2c4      	uxtb	r4, r0
 8001742:	e7d7      	b.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001744:	4a66      	ldr	r2, [pc, #408]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001746:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800174e:	2e00      	cmp	r6, #0
 8001750:	d162      	bne.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x498>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001752:	4a63      	ldr	r2, [pc, #396]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001754:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8001756:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001758:	f023 0303 	bic.w	r3, r3, #3
 800175c:	430b      	orrs	r3, r1
 800175e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001760:	682b      	ldr	r3, [r5, #0]
 8001762:	025f      	lsls	r7, r3, #9
 8001764:	d542      	bpl.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001766:	4f5f      	ldr	r7, [pc, #380]	; (80018e4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176e:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001770:	f7fe ff7a 	bl	8000668 <HAL_GetTick>
 8001774:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	05d8      	lsls	r0, r3, #23
 800177a:	d551      	bpl.n	8001820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
    if(ret == HAL_OK)
 800177c:	2e00      	cmp	r6, #0
 800177e:	d156      	bne.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001780:	4b57      	ldr	r3, [pc, #348]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001782:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8001786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001788:	4042      	eors	r2, r0
 800178a:	f412 7f40 	tst.w	r2, #768	; 0x300
 800178e:	d00b      	beq.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x428>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001790:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8001792:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001794:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001798:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800179c:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800179e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80017a0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80017a4:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80017a6:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80017a8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80017ac:	d108      	bne.n	80017c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
        tickstart = HAL_GetTick();
 80017ae:	f7fe ff5b 	bl	8000668 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b2:	4f4b      	ldr	r7, [pc, #300]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
        tickstart = HAL_GetTick();
 80017b4:	4680      	mov	r8, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017bc:	0799      	lsls	r1, r3, #30
 80017be:	d53a      	bpl.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017c0:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 80017c4:	4946      	ldr	r1, [pc, #280]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80017c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80017ca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80017ce:	d13d      	bne.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 80017d0:	6908      	ldr	r0, [r1, #16]
 80017d2:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <HAL_RCCEx_PeriphCLKConfig+0x568>)
 80017d4:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80017d8:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 80017dc:	4302      	orrs	r2, r0
 80017de:	610a      	str	r2, [r1, #16]
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	4a3e      	ldr	r2, [pc, #248]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80017e6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80017e8:	430b      	orrs	r3, r1
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80017ec:	682b      	ldr	r3, [r5, #0]
 80017ee:	07da      	lsls	r2, r3, #31
 80017f0:	d53f      	bpl.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->Usart16ClockSelection)
 80017f2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d04d      	beq.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80017f8:	d82c      	bhi.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80017fa:	b38b      	cbz	r3, 8001860 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d043      	beq.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0x508>
      ret = HAL_ERROR;
 8001800:	2601      	movs	r6, #1
      status |= ret;
 8001802:	ea44 0006 	orr.w	r0, r4, r6
 8001806:	b2c4      	uxtb	r4, r0
 8001808:	e033      	b.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800180a:	2102      	movs	r1, #2
 800180c:	1d28      	adds	r0, r5, #4
 800180e:	f7ff fceb 	bl	80011e8 <RCCEx_PLL2_Config>
 8001812:	4606      	mov	r6, r0
      break;
 8001814:	e79b      	b.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = HAL_ERROR;
 8001816:	2601      	movs	r6, #1
      status |= ret;
 8001818:	ea44 0006 	orr.w	r0, r4, r6
 800181c:	b2c4      	uxtb	r4, r0
 800181e:	e79f      	b.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7fe ff22 	bl	8000668 <HAL_GetTick>
 8001824:	eba0 0008 	sub.w	r0, r0, r8
 8001828:	2864      	cmp	r0, #100	; 0x64
 800182a:	d9a4      	bls.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        ret = HAL_TIMEOUT;
 800182c:	2603      	movs	r6, #3
      status |= ret;
 800182e:	ea44 0006 	orr.w	r0, r4, r6
 8001832:	b2c4      	uxtb	r4, r0
 8001834:	e7da      	b.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001836:	f7fe ff17 	bl	8000668 <HAL_GetTick>
 800183a:	eba0 0008 	sub.w	r0, r0, r8
 800183e:	4548      	cmp	r0, r9
 8001840:	d9bb      	bls.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x43a>
        status |= ret;
 8001842:	f044 0003 	orr.w	r0, r4, #3
            ret = HAL_TIMEOUT;
 8001846:	2603      	movs	r6, #3
        status |= ret;
 8001848:	b2c4      	uxtb	r4, r0
 800184a:	e7cf      	b.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x46c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800184c:	690a      	ldr	r2, [r1, #16]
 800184e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001852:	e7c4      	b.n	80017de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001854:	2b20      	cmp	r3, #32
 8001856:	d003      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8001858:	2b28      	cmp	r3, #40	; 0x28
 800185a:	d001      	beq.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800185c:	2b18      	cmp	r3, #24
 800185e:	d1cf      	bne.n	8001800 <HAL_RCCEx_PeriphCLKConfig+0x480>
    if(ret == HAL_OK)
 8001860:	2e00      	cmp	r6, #0
 8001862:	d1ce      	bne.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x482>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8001864:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8001866:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8001868:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800186a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800186e:	430b      	orrs	r3, r1
 8001870:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	079b      	lsls	r3, r3, #30
 8001876:	d520      	bpl.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x53a>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8001878:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800187a:	2b05      	cmp	r3, #5
 800187c:	d836      	bhi.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800187e:	e8df f003 	tbb	[pc, r3]
 8001882:	0f14      	.short	0x0f14
 8001884:	14141428 	.word	0x14141428
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001888:	2101      	movs	r1, #1
 800188a:	1d28      	adds	r0, r5, #4
 800188c:	f7ff fcac 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001890:	4606      	mov	r6, r0
      break;
 8001892:	e7e5      	b.n	8001860 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001894:	2101      	movs	r1, #1
 8001896:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800189a:	f7ff fd0b 	bl	80012b4 <RCCEx_PLL3_Config>
 800189e:	e7f7      	b.n	8001890 <HAL_RCCEx_PeriphCLKConfig+0x510>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80018a0:	2101      	movs	r1, #1
 80018a2:	1d28      	adds	r0, r5, #4
 80018a4:	f7ff fca0 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80018a8:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80018aa:	bb06      	cbnz	r6, 80018ee <HAL_RCCEx_PeriphCLKConfig+0x56e>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80018ac:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 80018ae:	6f69      	ldr	r1, [r5, #116]	; 0x74
 80018b0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80018b2:	f023 0307 	bic.w	r3, r3, #7
 80018b6:	430b      	orrs	r3, r1
 80018b8:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	075f      	lsls	r7, r3, #29
 80018be:	d528      	bpl.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80018c0:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d83c      	bhi.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
 80018c8:	e8df f003 	tbb	[pc, r3]
 80018cc:	1a35151a 	.word	0x1a35151a
 80018d0:	1a1a      	.short	0x1a1a
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80018d2:	2101      	movs	r1, #1
 80018d4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80018d8:	f7ff fcec 	bl	80012b4 <RCCEx_PLL3_Config>
 80018dc:	e7e4      	b.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80018de:	bf00      	nop
 80018e0:	58024400 	.word	0x58024400
 80018e4:	58024800 	.word	0x58024800
 80018e8:	00ffffcf 	.word	0x00ffffcf
      ret = HAL_ERROR;
 80018ec:	2601      	movs	r6, #1
      status |= ret;
 80018ee:	ea44 0006 	orr.w	r0, r4, r6
 80018f2:	b2c4      	uxtb	r4, r0
 80018f4:	e7e1      	b.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x53a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80018f6:	2101      	movs	r1, #1
 80018f8:	1d28      	adds	r0, r5, #4
 80018fa:	f7ff fc75 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80018fe:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001900:	bb06      	cbnz	r6, 8001944 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001902:	4a99      	ldr	r2, [pc, #612]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001904:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8001908:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800190a:	f023 0307 	bic.w	r3, r3, #7
 800190e:	430b      	orrs	r3, r1
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001912:	682b      	ldr	r3, [r5, #0]
 8001914:	0698      	lsls	r0, r3, #26
 8001916:	d52c      	bpl.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8001918:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800191c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001920:	d03f      	beq.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
 8001922:	d813      	bhi.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8001924:	b1db      	cbz	r3, 800195e <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800192a:	d034      	beq.n	8001996 <HAL_RCCEx_PeriphCLKConfig+0x616>
      ret = HAL_ERROR;
 800192c:	2601      	movs	r6, #1
      status |= ret;
 800192e:	ea44 0006 	orr.w	r0, r4, r6
 8001932:	b2c4      	uxtb	r4, r0
 8001934:	e01d      	b.n	8001972 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001936:	2101      	movs	r1, #1
 8001938:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800193c:	f7ff fcba 	bl	80012b4 <RCCEx_PLL3_Config>
 8001940:	e7dd      	b.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x57e>
      ret = HAL_ERROR;
 8001942:	2601      	movs	r6, #1
      status |= ret;
 8001944:	ea44 0006 	orr.w	r0, r4, r6
 8001948:	b2c4      	uxtb	r4, r0
 800194a:	e7e2      	b.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x592>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d005      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001956:	d002      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8001958:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800195c:	d1e6      	bne.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    if(ret == HAL_OK)
 800195e:	2e00      	cmp	r6, #0
 8001960:	d1e5      	bne.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001962:	4a81      	ldr	r2, [pc, #516]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001964:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8001968:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800196a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800196e:	430b      	orrs	r3, r1
 8001970:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8001972:	682b      	ldr	r3, [r5, #0]
 8001974:	0659      	lsls	r1, r3, #25
 8001976:	d52d      	bpl.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x654>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8001978:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 800197c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001980:	d042      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8001982:	d814      	bhi.n	80019ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8001984:	b1e3      	cbz	r3, 80019c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8001986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198a:	d037      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x67c>
      ret = HAL_ERROR;
 800198c:	2601      	movs	r6, #1
      status |= ret;
 800198e:	ea44 0006 	orr.w	r0, r4, r6
 8001992:	b2c4      	uxtb	r4, r0
 8001994:	e01e      	b.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x654>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001996:	2100      	movs	r1, #0
 8001998:	1d28      	adds	r0, r5, #4
 800199a:	f7ff fc25 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800199e:	4606      	mov	r6, r0
      break;
 80019a0:	e7dd      	b.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x5de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80019a2:	2102      	movs	r1, #2
 80019a4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80019a8:	f7ff fc84 	bl	80012b4 <RCCEx_PLL3_Config>
 80019ac:	e7f7      	b.n	800199e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b2:	d005      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80019b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80019b8:	d002      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80019ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80019be:	d1e5      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    if(ret == HAL_OK)
 80019c0:	2e00      	cmp	r6, #0
 80019c2:	d1e4      	bne.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x60e>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80019c4:	4a68      	ldr	r2, [pc, #416]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 80019c6:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 80019ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80019cc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	061a      	lsls	r2, r3, #24
 80019d8:	d52f      	bpl.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80019da:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80019de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019e2:	f000 8095 	beq.w	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x790>
 80019e6:	d815      	bhi.n	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x694>
 80019e8:	b1eb      	cbz	r3, 8001a26 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 80019ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ee:	f000 8089 	beq.w	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x784>
      ret = HAL_ERROR;
 80019f2:	2601      	movs	r6, #1
      status |= ret;
 80019f4:	ea44 0006 	orr.w	r0, r4, r6
 80019f8:	b2c4      	uxtb	r4, r0
 80019fa:	e01e      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x6ba>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80019fc:	2100      	movs	r1, #0
 80019fe:	1d28      	adds	r0, r5, #4
 8001a00:	f7ff fbf2 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a04:	4606      	mov	r6, r0
      break;
 8001a06:	e7db      	b.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x640>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a08:	2102      	movs	r1, #2
 8001a0a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a0e:	f7ff fc51 	bl	80012b4 <RCCEx_PLL3_Config>
 8001a12:	e7f7      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x684>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8001a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a18:	d005      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001a1a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001a1e:	d002      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8001a20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001a24:	d1e5      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
    if(ret == HAL_OK)
 8001a26:	2e00      	cmp	r6, #0
 8001a28:	d1e4      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8001a2a:	4a4f      	ldr	r2, [pc, #316]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001a2c:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8001a30:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001a32:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a36:	430b      	orrs	r3, r1
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	071b      	lsls	r3, r3, #28
 8001a3e:	d50b      	bpl.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8001a40:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8001a44:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001a48:	d168      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a50:	f7ff fc30 	bl	80012b4 <RCCEx_PLL3_Config>
 8001a54:	4304      	orrs	r4, r0
 8001a56:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	06df      	lsls	r7, r3, #27
 8001a5c:	d50b      	bpl.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8001a5e:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8001a62:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001a66:	d160      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a68:	2102      	movs	r1, #2
 8001a6a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a6e:	f7ff fc21 	bl	80012b4 <RCCEx_PLL3_Config>
 8001a72:	4304      	orrs	r4, r0
 8001a74:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a76:	682b      	ldr	r3, [r5, #0]
 8001a78:	0318      	lsls	r0, r3, #12
 8001a7a:	d517      	bpl.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x72c>
    switch(PeriphClkInit->AdcClockSelection)
 8001a7c:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001a80:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8001a84:	d058      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
 8001a86:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x718>
 8001a8c:	2900      	cmp	r1, #0
 8001a8e:	d159      	bne.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001a90:	1d28      	adds	r0, r5, #4
 8001a92:	f7ff fba9 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001a96:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001a98:	2e00      	cmp	r6, #0
 8001a9a:	d154      	bne.n	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a9c:	4a32      	ldr	r2, [pc, #200]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001a9e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001aa2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001aa4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001aac:	682b      	ldr	r3, [r5, #0]
 8001aae:	0359      	lsls	r1, r3, #13
 8001ab0:	d519      	bpl.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x766>
    switch(PeriphClkInit->UsbClockSelection)
 8001ab2:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aba:	d048      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8001ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ac6:	d149      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ac8:	4a27      	ldr	r2, [pc, #156]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001aca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001ad2:	2e00      	cmp	r6, #0
 8001ad4:	d143      	bne.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x7de>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ad6:	4a24      	ldr	r2, [pc, #144]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001ad8:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8001adc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001ade:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001ae2:	430b      	orrs	r3, r1
 8001ae4:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8001ae6:	682b      	ldr	r3, [r5, #0]
 8001ae8:	03da      	lsls	r2, r3, #15
 8001aea:	d54d      	bpl.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x808>
    switch(PeriphClkInit->SdmmcClockSelection)
 8001aec:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03c      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8001af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af6:	f000 8099 	beq.w	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      ret = HAL_ERROR;
 8001afa:	2601      	movs	r6, #1
      status |= ret;
 8001afc:	ea44 0006 	orr.w	r0, r4, r6
 8001b00:	b2c4      	uxtb	r4, r0
 8001b02:	e041      	b.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x808>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001b04:	2100      	movs	r1, #0
 8001b06:	1d28      	adds	r0, r5, #4
 8001b08:	f7ff fb6e 	bl	80011e8 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b0c:	4606      	mov	r6, r0
      break;
 8001b0e:	e78a      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b10:	2102      	movs	r1, #2
 8001b12:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b16:	f7ff fbcd 	bl	80012b4 <RCCEx_PLL3_Config>
 8001b1a:	e7f7      	b.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x78c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001b1e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b24:	430b      	orrs	r3, r1
 8001b26:	6553      	str	r3, [r2, #84]	; 0x54
 8001b28:	e796      	b.n	8001a58 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001b2a:	4a0f      	ldr	r2, [pc, #60]	; (8001b68 <HAL_RCCEx_PeriphCLKConfig+0x7e8>)
 8001b2c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b32:	430b      	orrs	r3, r1
 8001b34:	6593      	str	r3, [r2, #88]	; 0x58
 8001b36:	e79e      	b.n	8001a76 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b38:	2102      	movs	r1, #2
 8001b3a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b3e:	f7ff fbb9 	bl	80012b4 <RCCEx_PLL3_Config>
 8001b42:	e7a8      	b.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x716>
      ret = HAL_ERROR;
 8001b44:	2601      	movs	r6, #1
      status |= ret;
 8001b46:	ea44 0006 	orr.w	r0, r4, r6
 8001b4a:	b2c4      	uxtb	r4, r0
 8001b4c:	e7ae      	b.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x72c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001b4e:	2101      	movs	r1, #1
 8001b50:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b54:	f7ff fbae 	bl	80012b4 <RCCEx_PLL3_Config>
 8001b58:	4606      	mov	r6, r0
      break;
 8001b5a:	e7ba      	b.n	8001ad2 <HAL_RCCEx_PeriphCLKConfig+0x752>
      ret = HAL_ERROR;
 8001b5c:	2601      	movs	r6, #1
      status |= ret;
 8001b5e:	ea44 0006 	orr.w	r0, r4, r6
 8001b62:	b2c4      	uxtb	r4, r0
 8001b64:	e7bf      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x766>
 8001b66:	bf00      	nop
 8001b68:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b6c:	4a3b      	ldr	r2, [pc, #236]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001b6e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001b76:	2e00      	cmp	r6, #0
 8001b78:	d1c0      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x77c>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8001b7a:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001b7c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8001b7e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b84:	430b      	orrs	r3, r1
 8001b86:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001b88:	682b      	ldr	r3, [r5, #0]
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	d506      	bpl.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x81c>
    status |= RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b8e:	2102      	movs	r1, #2
 8001b90:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001b94:	f7ff fb8e 	bl	80012b4 <RCCEx_PLL3_Config>
 8001b98:	4304      	orrs	r4, r0
 8001b9a:	b2e4      	uxtb	r4, r4
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8001b9c:	682b      	ldr	r3, [r5, #0]
 8001b9e:	039f      	lsls	r7, r3, #14
 8001ba0:	d50e      	bpl.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    switch(PeriphClkInit->RngClockSelection)
 8001ba2:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8001ba4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001ba8:	d051      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8001baa:	d845      	bhi.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8001bac:	2900      	cmp	r1, #0
 8001bae:	d149      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
    if(ret == HAL_OK)
 8001bb0:	2e00      	cmp	r6, #0
 8001bb2:	d148      	bne.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001bb4:	4829      	ldr	r0, [pc, #164]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001bb6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001bb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001bc0:	02de      	lsls	r6, r3, #11
 8001bc2:	d506      	bpl.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001bc4:	4925      	ldr	r1, [pc, #148]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001bc6:	6f28      	ldr	r0, [r5, #112]	; 0x70
 8001bc8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001bca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001bd2:	00d8      	lsls	r0, r3, #3
 8001bd4:	d507      	bpl.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001bd6:	4921      	ldr	r1, [pc, #132]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001bd8:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
 8001bdc:	690a      	ldr	r2, [r1, #16]
 8001bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001be2:	4302      	orrs	r2, r0
 8001be4:	610a      	str	r2, [r1, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001be6:	0299      	lsls	r1, r3, #10
 8001be8:	d506      	bpl.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x878>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001bea:	491c      	ldr	r1, [pc, #112]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001bec:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 8001bee:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8001bf0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001bf4:	4302      	orrs	r2, r0
 8001bf6:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8001bf8:	005a      	lsls	r2, r3, #1
 8001bfa:	d509      	bpl.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x890>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001bfe:	6911      	ldr	r1, [r2, #16]
 8001c00:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001c04:	6111      	str	r1, [r2, #16]
 8001c06:	6911      	ldr	r1, [r2, #16]
 8001c08:	f8d5 00b8 	ldr.w	r0, [r5, #184]	; 0xb8
 8001c0c:	4301      	orrs	r1, r0
 8001c0e:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	da06      	bge.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8001c14:	4a11      	ldr	r2, [pc, #68]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c16:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001c18:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001c1a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	1c20      	adds	r0, r4, #0
 8001c24:	bf18      	it	ne
 8001c26:	2001      	movne	r0, #1
}
 8001c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001c2c:	2102      	movs	r1, #2
 8001c2e:	1d28      	adds	r0, r5, #4
 8001c30:	f7ff fada 	bl	80011e8 <RCCEx_PLL2_Config>
 8001c34:	4606      	mov	r6, r0
      break;
 8001c36:	e79e      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
    switch(PeriphClkInit->RngClockSelection)
 8001c38:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001c3c:	d0b8      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8001c3e:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8001c42:	d0b5      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x830>
      ret = HAL_ERROR;
 8001c44:	2601      	movs	r6, #1
      status |= ret;
 8001c46:	ea44 0006 	orr.w	r0, r4, r6
 8001c4a:	b2c4      	uxtb	r4, r0
 8001c4c:	e7b8      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x840>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c4e:	4803      	ldr	r0, [pc, #12]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x8dc>)
 8001c50:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001c52:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c56:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 8001c58:	e7aa      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8001c5a:	bf00      	nop
 8001c5c:	58024400 	.word	0x58024400

08001c60 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8001c60:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> POSITION_VAL(RCC_D3CFGR_D3PPRE_0)]);
 8001c62:	f7ff fa7b 	bl	800115c <HAL_RCC_GetHCLKFreq>
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8001c68:	2210      	movs	r2, #16
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	fa92 f2a2 	rbit	r2, r2
 8001c70:	fab2 f282 	clz	r2, r2
 8001c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c78:	40d3      	lsrs	r3, r2
 8001c7a:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
}
 8001c7e:	40d8      	lsrs	r0, r3
 8001c80:	bd08      	pop	{r3, pc}
 8001c82:	bf00      	nop
 8001c84:	58024400 	.word	0x58024400
 8001c88:	08003146 	.word	0x08003146

08001c8c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8001c8c:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c8e:	4c4a      	ldr	r4, [pc, #296]	; (8001db8 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001c90:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8001dbc <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 8001c94:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001c96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001c9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8001c9c:	f3c1 3105 	ubfx	r1, r1, #12, #6
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8001ca0:	f003 0310 	and.w	r3, r3, #16
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001ca4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001ca8:	4353      	muls	r3, r2
 8001caa:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001cae:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001cb2:	2b01      	cmp	r3, #1
  fracn2 =(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8001cb4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001cb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x38>
 8001cbe:	d30e      	bcc.n	8001cde <HAL_RCCEx_GetPLL2ClockFreq+0x52>
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d068      	beq.n	8001d96 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001cc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cc6:	4a3e      	ldr	r2, [pc, #248]	; (8001dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x134>)
 8001cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ccc:	ee07 3a10 	vmov	s14, r3
 8001cd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001cd4:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cdc:	e067      	b.n	8001dae <HAL_RCCEx_GetPLL2ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001cde:	6823      	ldr	r3, [r4, #0]
 8001ce0:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x138>)
 8001ce2:	f013 0f20 	tst.w	r3, #32
 8001ce6:	d042      	beq.n	8001d6e <HAL_RCCEx_GetPLL2ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001ce8:	6825      	ldr	r5, [r4, #0]
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001cea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cec:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001cf4:	40e2      	lsrs	r2, r4
      pll2vco = ( hsivalue / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001cf6:	fbb2 f2f1 	udiv	r2, r2, r1
 8001cfa:	ee07 2a10 	vmov	s14, r2
 8001cfe:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001d02:	ee07 3a10 	vmov	s14, r3
 8001d06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d0a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d12:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9) + 1  )) ;
 8001d16:	4a28      	ldr	r2, [pc, #160]	; (8001db8 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>)
 8001d18:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001d1a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001d1e:	3301      	adds	r3, #1
 8001d20:	ee07 3a10 	vmov	s14, r3
 8001d24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d2c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001d30:	edc0 6a00 	vstr	s13, [r0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + 1 )) ;
 8001d34:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001d36:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	ee07 3a10 	vmov	s14, r3
 8001d40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d44:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d48:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001d4c:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco/(((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + 1 )) ;
 8001d50:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001d52:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001d56:	3301      	adds	r3, #1
 8001d58:	ee07 3a10 	vmov	s14, r3
 8001d5c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d60:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d64:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001d68:	edc0 6a02 	vstr	s13, [r0, #8]
 8001d6c:	bd30      	pop	{r4, r5, pc}
      pll2vco = (HSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001d6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d74:	ee07 3a10 	vmov	s14, r3
 8001d78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d7c:	fbb2 f3f1 	udiv	r3, r2, r1
 8001d80:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d88:	ee07 3a90 	vmov	s15, r3
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d90:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8001d94:	e7bf      	b.n	8001d16 <HAL_RCCEx_GetPLL2ClockFreq+0x8a>
    pll2vco = (HSE_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001d96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d98:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
 8001d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d9e:	ee07 3a10 	vmov	s14, r3
 8001da2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001da6:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001daa:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll2vco = (CSI_VALUE / pll2m) * ((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/0x2000) +1 );
 8001dae:	fbb2 f2f1 	udiv	r2, r2, r1
 8001db2:	ee07 2a90 	vmov	s15, r2
 8001db6:	e7e9      	b.n	8001d8c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 8001db8:	58024400 	.word	0x58024400
 8001dbc:	39000000 	.word	0x39000000
 8001dc0:	003d0900 	.word	0x003d0900
 8001dc4:	03d09000 	.word	0x03d09000
 8001dc8:	007a1200 	.word	0x007a1200

08001dcc <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8001dcc:	b530      	push	{r4, r5, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dce:	4c4a      	ldr	r4, [pc, #296]	; (8001ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001dd0:	eddf 5a4a 	vldr	s11, [pc, #296]	; 8001efc <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 8001dd4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001dd6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001dd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001dda:	6c62      	ldr	r2, [r4, #68]	; 0x44
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8001ddc:	f3c1 5105 	ubfx	r1, r1, #20, #6
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8001de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001de4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8001de8:	4353      	muls	r3, r2
 8001dea:	ee07 3a90 	vmov	s15, r3
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001dee:	f005 0303 	and.w	r3, r5, #3
  switch (pllsource)
 8001df2:	2b01      	cmp	r3, #1
  fracn3 = (pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8001df4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001df8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  switch (pllsource)
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCCEx_GetPLL3ClockFreq+0x38>
 8001dfe:	d30e      	bcc.n	8001e1e <HAL_RCCEx_GetPLL3ClockFreq+0x52>
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d068      	beq.n	8001ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e06:	4a3e      	ldr	r2, [pc, #248]	; (8001f00 <HAL_RCCEx_GetPLL3ClockFreq+0x134>)
 8001e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e0c:	ee07 3a10 	vmov	s14, r3
 8001e10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e14:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1c:	e067      	b.n	8001eee <HAL_RCCEx_GetPLL3ClockFreq+0x122>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	4a38      	ldr	r2, [pc, #224]	; (8001f04 <HAL_RCCEx_GetPLL3ClockFreq+0x138>)
 8001e22:	f013 0f20 	tst.w	r3, #32
 8001e26:	d042      	beq.n	8001eae <HAL_RCCEx_GetPLL3ClockFreq+0xe2>
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e28:	6825      	ldr	r5, [r4, #0]
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e2c:	f3c5 04c1 	ubfx	r4, r5, #3, #2
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
      hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e34:	40e2      	lsrs	r2, r4
      pll3vco = (hsivalue / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001e36:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e3a:	ee07 2a10 	vmov	s14, r2
 8001e3e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8001e42:	ee07 3a10 	vmov	s14, r3
 8001e46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e4a:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001e4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e52:	ee66 7a87 	vmul.f32	s15, s13, s14
  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + 1 )) ;
 8001e56:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>)
 8001e58:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e5a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001e5e:	3301      	adds	r3, #1
 8001e60:	ee07 3a10 	vmov	s14, r3
 8001e64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e6c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e70:	edc0 6a00 	vstr	s13, [r0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + 1 )) ;
 8001e74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e76:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	ee07 3a10 	vmov	s14, r3
 8001e80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001e84:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e88:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001e8c:	edc0 6a01 	vstr	s13, [r0, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco/(((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + 1 )) ;
 8001e90:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e92:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001e96:	3301      	adds	r3, #1
 8001e98:	ee07 3a10 	vmov	s14, r3
 8001e9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ea0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ea4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001ea8:	edc0 6a02 	vstr	s13, [r0, #8]
 8001eac:	bd30      	pop	{r4, r5, pc}
      pll3vco = (HSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb4:	ee07 3a10 	vmov	s14, r3
 8001eb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ebc:	fbb2 f3f1 	udiv	r3, r2, r1
 8001ec0:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec8:	ee07 3a90 	vmov	s15, r3
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
    break;
 8001ed4:	e7bf      	b.n	8001e56 <HAL_RCCEx_GetPLL3ClockFreq+0x8a>
    pll3vco = (HSE_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ed8:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
 8001eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ede:	ee07 3a10 	vmov	s14, r3
 8001ee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ee6:	eea6 7a25 	vfma.f32	s14, s12, s11
 8001eea:	ee37 7a27 	vadd.f32	s14, s14, s15
    pll3vco = (CSI_VALUE / pll3m) * ((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/0x2000) +1 );
 8001eee:	fbb2 f2f1 	udiv	r2, r2, r1
 8001ef2:	ee07 2a90 	vmov	s15, r2
 8001ef6:	e7e9      	b.n	8001ecc <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8001ef8:	58024400 	.word	0x58024400
 8001efc:	39000000 	.word	0x39000000
 8001f00:	003d0900 	.word	0x003d0900
 8001f04:	03d09000 	.word	0x03d09000
 8001f08:	007a1200 	.word	0x007a1200

08001f0c <HAL_RCCEx_GetD1SysClockFreq>:
{
 8001f0c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> POSITION_VAL(RCC_D1CFGR_D1CPRE_0)];
 8001f0e:	f7fe ffaf 	bl	8000e70 <HAL_RCC_GetSysClockFreq>
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_RCCEx_GetD1SysClockFreq+0x28>)
 8001f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	fa92 f2a2 	rbit	r2, r2
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001f26:	40d3      	lsrs	r3, r2
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	40d8      	lsrs	r0, r3
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8001f30:	6018      	str	r0, [r3, #0]
}
 8001f32:	bd08      	pop	{r3, pc}
 8001f34:	58024400 	.word	0x58024400
 8001f38:	08003146 	.word	0x08003146
 8001f3c:	20000008 	.word	0x20000008

08001f40 <HAL_TIM_PeriodElapsedCallback>:
 8001f40:	4770      	bx	lr

08001f42 <HAL_TIM_OC_DelayElapsedCallback>:
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_IC_CaptureCallback>:
 8001f44:	4770      	bx	lr

08001f46 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_TriggerCallback>:
 8001f48:	4770      	bx	lr

08001f4a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f4a:	6803      	ldr	r3, [r0, #0]
 8001f4c:	691a      	ldr	r2, [r3, #16]
 8001f4e:	0791      	lsls	r1, r2, #30
{
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f54:	d50f      	bpl.n	8001f76 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	0792      	lsls	r2, r2, #30
 8001f5a:	d50c      	bpl.n	8001f76 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5c:	f06f 0202 	mvn.w	r2, #2
 8001f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f62:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001f64:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f66:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001f68:	0799      	lsls	r1, r3, #30
 8001f6a:	f000 8085 	beq.w	8002078 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	f7ff ffe9 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f72:	2300      	movs	r3, #0
 8001f74:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f76:	6823      	ldr	r3, [r4, #0]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	0752      	lsls	r2, r2, #29
 8001f7c:	d510      	bpl.n	8001fa0 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	0750      	lsls	r0, r2, #29
 8001f82:	d50d      	bpl.n	8001fa0 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f84:	f06f 0204 	mvn.w	r2, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001f88:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f8e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f90:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f92:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001f96:	d075      	beq.n	8002084 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f98:	f7ff ffd4 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	0711      	lsls	r1, r2, #28
 8001fa6:	d50f      	bpl.n	8001fc8 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	0712      	lsls	r2, r2, #28
 8001fac:	d50c      	bpl.n	8001fc8 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fae:	f06f 0208 	mvn.w	r2, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fb6:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001fb8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fba:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001fbc:	079b      	lsls	r3, r3, #30
 8001fbe:	d067      	beq.n	8002090 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc0:	f7ff ffc0 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	06d0      	lsls	r0, r2, #27
 8001fce:	d510      	bpl.n	8001ff2 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	06d1      	lsls	r1, r2, #27
 8001fd4:	d50d      	bpl.n	8001ff2 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd6:	f06f 0210 	mvn.w	r2, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001fda:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fde:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001fe0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001fe4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001fe8:	d058      	beq.n	800209c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fea:	f7ff ffab 	bl	8001f44 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ff2:	6823      	ldr	r3, [r4, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	07d2      	lsls	r2, r2, #31
 8001ff8:	d508      	bpl.n	800200c <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	07d0      	lsls	r0, r2, #31
 8001ffe:	d505      	bpl.n	800200c <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002000:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002004:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002006:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002008:	f7ff ff9a 	bl	8001f40 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	0611      	lsls	r1, r2, #24
 8002012:	d508      	bpl.n	8002026 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002014:	68da      	ldr	r2, [r3, #12]
 8002016:	0612      	lsls	r2, r2, #24
 8002018:	d505      	bpl.n	8002026 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800201a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800201e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002020:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002022:	f000 f8ec 	bl	80021fe <HAL_TIMEx_BreakCallback>
    }
  } 
  /* TIM Break input2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	05d0      	lsls	r0, r2, #23
 800202c:	d508      	bpl.n	8002040 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800202e:	68da      	ldr	r2, [r3, #12]
 8002030:	0611      	lsls	r1, r2, #24
 8002032:	d505      	bpl.n	8002040 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002034:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002038:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800203a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800203c:	f000 f8df 	bl	80021fe <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	0652      	lsls	r2, r2, #25
 8002046:	d508      	bpl.n	800205a <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	0650      	lsls	r0, r2, #25
 800204c:	d505      	bpl.n	800205a <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800204e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002052:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002054:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002056:	f7ff ff77 	bl	8001f48 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	0691      	lsls	r1, r2, #26
 8002060:	d522      	bpl.n	80020a8 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	0692      	lsls	r2, r2, #26
 8002066:	d51f      	bpl.n	80020a8 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002068:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800206c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800206e:	611a      	str	r2, [r3, #16]
    }
  }
}
 8002070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002074:	f000 b8c2 	b.w	80021fc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002078:	f7ff ff63 	bl	8001f42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	4620      	mov	r0, r4
 800207e:	f7ff ff62 	bl	8001f46 <HAL_TIM_PWM_PulseFinishedCallback>
 8002082:	e776      	b.n	8001f72 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002084:	f7ff ff5d 	bl	8001f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff ff5c 	bl	8001f46 <HAL_TIM_PWM_PulseFinishedCallback>
 800208e:	e785      	b.n	8001f9c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002090:	f7ff ff57 	bl	8001f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002094:	4620      	mov	r0, r4
 8002096:	f7ff ff56 	bl	8001f46 <HAL_TIM_PWM_PulseFinishedCallback>
 800209a:	e793      	b.n	8001fc4 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209c:	f7ff ff51 	bl	8001f42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	4620      	mov	r0, r4
 80020a2:	f7ff ff50 	bl	8001f46 <HAL_TIM_PWM_PulseFinishedCallback>
 80020a6:	e7a2      	b.n	8001fee <HAL_TIM_IRQHandler+0xa4>
 80020a8:	bd10      	pop	{r4, pc}
	...

080020ac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020ac:	4a31      	ldr	r2, [pc, #196]	; (8002174 <TIM_Base_SetConfig+0xc8>)
  tmpcr1 = TIMx->CR1;
 80020ae:	8803      	ldrh	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b0:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80020b2:	b29b      	uxth	r3, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b4:	d012      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020b6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020ba:	d00f      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020bc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020c0:	4290      	cmp	r0, r2
 80020c2:	d00b      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020c8:	4290      	cmp	r0, r2
 80020ca:	d007      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020d0:	4290      	cmp	r0, r2
 80020d2:	d003      	beq.n	80020dc <TIM_Base_SetConfig+0x30>
 80020d4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80020d8:	4290      	cmp	r0, r2
 80020da:	d119      	bne.n	8002110 <TIM_Base_SetConfig+0x64>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80020dc:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020e2:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020e4:	4a23      	ldr	r2, [pc, #140]	; (8002174 <TIM_Base_SetConfig+0xc8>)
 80020e6:	4290      	cmp	r0, r2
 80020e8:	d01d      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 80020ea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020ee:	d01a      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 80020f0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020f4:	4290      	cmp	r0, r2
 80020f6:	d016      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 80020f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020fc:	4290      	cmp	r0, r2
 80020fe:	d012      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 8002100:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002104:	4290      	cmp	r0, r2
 8002106:	d00e      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 8002108:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800210c:	4290      	cmp	r0, r2
 800210e:	d00a      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <TIM_Base_SetConfig+0xcc>)
 8002112:	4290      	cmp	r0, r2
 8002114:	d007      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 8002116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800211a:	4290      	cmp	r0, r2
 800211c:	d003      	beq.n	8002126 <TIM_Base_SetConfig+0x7a>
 800211e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002122:	4290      	cmp	r0, r2
 8002124:	d103      	bne.n	800212e <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800212a:	68ca      	ldr	r2, [r1, #12]
 800212c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800212e:	694a      	ldr	r2, [r1, #20]
 8002130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002134:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002136:	b29b      	uxth	r3, r3
 8002138:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213a:	688b      	ldr	r3, [r1, #8]
 800213c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800213e:	880b      	ldrh	r3, [r1, #0]
 8002140:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002142:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <TIM_Base_SetConfig+0xc8>)
 8002144:	4298      	cmp	r0, r3
 8002146:	d00f      	beq.n	8002168 <TIM_Base_SetConfig+0xbc>
 8002148:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800214c:	4298      	cmp	r0, r3
 800214e:	d00b      	beq.n	8002168 <TIM_Base_SetConfig+0xbc>
 8002150:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8002154:	4298      	cmp	r0, r3
 8002156:	d007      	beq.n	8002168 <TIM_Base_SetConfig+0xbc>
 8002158:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800215c:	4298      	cmp	r0, r3
 800215e:	d003      	beq.n	8002168 <TIM_Base_SetConfig+0xbc>
 8002160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002164:	4298      	cmp	r0, r3
 8002166:	d101      	bne.n	800216c <TIM_Base_SetConfig+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002168:	8a0b      	ldrh	r3, [r1, #16]
 800216a:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 800216c:	2301      	movs	r3, #1
 800216e:	6143      	str	r3, [r0, #20]
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40010000 	.word	0x40010000
 8002178:	40014000 	.word	0x40014000

0800217c <HAL_TIM_Base_Init>:
{ 
 800217c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800217e:	4604      	mov	r4, r0
 8002180:	b1a0      	cbz	r0, 80021ac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002182:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002186:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800218a:	b91b      	cbnz	r3, 8002194 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800218c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002190:	f000 fede 	bl	8002f50 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002194:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002196:	6820      	ldr	r0, [r4, #0]
 8002198:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 800219a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800219e:	f7ff ff85 	bl	80020ac <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80021a2:	2301      	movs	r3, #1
  return HAL_OK;
 80021a4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80021a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80021aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021ac:	2001      	movs	r0, #1
}
 80021ae:	bd10      	pop	{r4, pc}

080021b0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80021b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021b4:	2b01      	cmp	r3, #1
{
 80021b6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80021b8:	d01c      	beq.n	80021f4 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021ba:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021bc:	4d0e      	ldr	r5, [pc, #56]	; (80021f8 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 80021be:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021c0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80021c2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021c4:	d003      	beq.n	80021ce <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80021c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80021ca:	42aa      	cmp	r2, r5
 80021cc:	d103      	bne.n	80021d6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021d2:	684d      	ldr	r5, [r1, #4]
 80021d4:	432b      	orrs	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021d6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021dc:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80021de:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021e2:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021e4:	4321      	orrs	r1, r4
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e6:	6053      	str	r3, [r2, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80021e8:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80021ea:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80021ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80021f4:	2002      	movs	r0, #2
} 
 80021f6:	bd30      	pop	{r4, r5, pc}
 80021f8:	40010000 	.word	0x40010000

080021fc <HAL_TIMEx_CommutationCallback>:
 80021fc:	4770      	bx	lr

080021fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021fe:	4770      	bx	lr

08002200 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002200:	6803      	ldr	r3, [r0, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002208:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002212:	2320      	movs	r3, #32
 8002214:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
 8002218:	4770      	bx	lr

0800221a <HAL_UART_TxCpltCallback>:
 800221a:	4770      	bx	lr

0800221c <HAL_UART_RxCpltCallback>:
 800221c:	4770      	bx	lr

0800221e <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800221e:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
 8002222:	6801      	ldr	r1, [r0, #0]
 8002224:	2b22      	cmp	r3, #34	; 0x22
{
 8002226:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002228:	d129      	bne.n	800227e <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800222a:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800222c:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002230:	8c89      	ldrh	r1, [r1, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002236:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8002238:	ea02 0201 	and.w	r2, r2, r1
 800223c:	d11b      	bne.n	8002276 <UART_Receive_IT+0x58>
 800223e:	6901      	ldr	r1, [r0, #16]
 8002240:	b9c9      	cbnz	r1, 8002276 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8002242:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2;
 8002246:	6643      	str	r3, [r0, #100]	; 0x64
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002248:	f8b0 406a 	ldrh.w	r4, [r0, #106]	; 0x6a
 800224c:	3c01      	subs	r4, #1
 800224e:	b2a4      	uxth	r4, r4
 8002250:	f8a0 406a 	strh.w	r4, [r0, #106]	; 0x6a
 8002254:	b96c      	cbnz	r4, 8002272 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002256:	6803      	ldr	r3, [r0, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800225e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002268:	2320      	movs	r3, #32
 800226a:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a

      HAL_UART_RxCpltCallback(huart);
 800226e:	f7ff ffd5 	bl	800221c <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8002272:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002274:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	6641      	str	r1, [r0, #100]	; 0x64
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e7e4      	b.n	8002248 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800227e:	8b0b      	ldrh	r3, [r1, #24]
    return HAL_BUSY;
 8002280:	2002      	movs	r0, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002282:	b29b      	uxth	r3, r3
 8002284:	f043 0308 	orr.w	r3, r3, #8
 8002288:	830b      	strh	r3, [r1, #24]
    return HAL_BUSY;
 800228a:	bd10      	pop	{r4, pc}

0800228c <HAL_UART_ErrorCallback>:
 800228c:	4770      	bx	lr
	...

08002290 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002290:	6803      	ldr	r3, [r0, #0]
 8002292:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002294:	6819      	ldr	r1, [r3, #0]
{
 8002296:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002298:	0715      	lsls	r5, r2, #28
{
 800229a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800229c:	6898      	ldr	r0, [r3, #8]
  if (errorflags == RESET)
 800229e:	d10a      	bne.n	80022b6 <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 80022a0:	0696      	lsls	r6, r2, #26
 80022a2:	d56a      	bpl.n	800237a <HAL_UART_IRQHandler+0xea>
     && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 80022a4:	068d      	lsls	r5, r1, #26
 80022a6:	d401      	bmi.n	80022ac <HAL_UART_IRQHandler+0x1c>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 80022a8:	00c6      	lsls	r6, r0, #3
 80022aa:	d566      	bpl.n	800237a <HAL_UART_IRQHandler+0xea>
      UART_Receive_IT(huart);
 80022ac:	4620      	mov	r0, r4
}
 80022ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80022b2:	f7ff bfb4 	b.w	800221e <UART_Receive_IT>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 80022b6:	4e61      	ldr	r6, [pc, #388]	; (800243c <HAL_UART_IRQHandler+0x1ac>)
 80022b8:	4006      	ands	r6, r0
 80022ba:	d102      	bne.n	80022c2 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022bc:	f411 7f90 	tst.w	r1, #288	; 0x120
 80022c0:	d05b      	beq.n	800237a <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022c2:	07d5      	lsls	r5, r2, #31
 80022c4:	d507      	bpl.n	80022d6 <HAL_UART_IRQHandler+0x46>
 80022c6:	05cd      	lsls	r5, r1, #23
 80022c8:	d505      	bpl.n	80022d6 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80022ca:	2501      	movs	r5, #1
 80022cc:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022ce:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80022d0:	f045 0501 	orr.w	r5, r5, #1
 80022d4:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022d6:	0795      	lsls	r5, r2, #30
 80022d8:	d507      	bpl.n	80022ea <HAL_UART_IRQHandler+0x5a>
 80022da:	07c5      	lsls	r5, r0, #31
 80022dc:	d505      	bpl.n	80022ea <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80022de:	2502      	movs	r5, #2
 80022e0:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022e2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80022e4:	f045 0504 	orr.w	r5, r5, #4
 80022e8:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ea:	0755      	lsls	r5, r2, #29
 80022ec:	d507      	bpl.n	80022fe <HAL_UART_IRQHandler+0x6e>
 80022ee:	07c5      	lsls	r5, r0, #31
 80022f0:	d505      	bpl.n	80022fe <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80022f2:	2504      	movs	r5, #4
 80022f4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022f6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80022f8:	f045 0502 	orr.w	r5, r5, #2
 80022fc:	67e5      	str	r5, [r4, #124]	; 0x7c
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 80022fe:	0715      	lsls	r5, r2, #28
 8002300:	d507      	bpl.n	8002312 <HAL_UART_IRQHandler+0x82>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8002302:	068d      	lsls	r5, r1, #26
 8002304:	d400      	bmi.n	8002308 <HAL_UART_IRQHandler+0x78>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 8002306:	b126      	cbz	r6, 8002312 <HAL_UART_IRQHandler+0x82>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002308:	2508      	movs	r5, #8
 800230a:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800230c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800230e:	432b      	orrs	r3, r5
 8002310:	67e3      	str	r3, [r4, #124]	; 0x7c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002312:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d05a      	beq.n	80023ce <HAL_UART_IRQHandler+0x13e>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 8002318:	0696      	lsls	r6, r2, #26
 800231a:	d506      	bpl.n	800232a <HAL_UART_IRQHandler+0x9a>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 800231c:	068d      	lsls	r5, r1, #26
 800231e:	d401      	bmi.n	8002324 <HAL_UART_IRQHandler+0x94>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8002320:	00c0      	lsls	r0, r0, #3
 8002322:	d502      	bpl.n	800232a <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff ff7a 	bl	800221e <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800232a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
        UART_EndRxTransfer(huart);
 800232c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800232e:	0719      	lsls	r1, r3, #28
 8002330:	d404      	bmi.n	800233c <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002336:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800233a:	d01a      	beq.n	8002372 <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 800233c:	f7ff ff60 	bl	8002200 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	0652      	lsls	r2, r2, #25
 8002346:	d510      	bpl.n	800236a <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002348:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800234a:	6f60      	ldr	r0, [r4, #116]	; 0x74
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800234c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002350:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002352:	b150      	cbz	r0, 800236a <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <HAL_UART_IRQHandler+0x1b0>)
 8002356:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002358:	f7fe f9fa 	bl	8000750 <HAL_DMA_Abort_IT>
 800235c:	2800      	cmp	r0, #0
 800235e:	d036      	beq.n	80023ce <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002360:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
 8002362:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002366:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002368:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800236a:	4620      	mov	r0, r4
 800236c:	f7ff ff8e 	bl	800228c <HAL_UART_ErrorCallback>
 8002370:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002372:	f7ff ff8b 	bl	800228c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002376:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002378:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800237a:	02d6      	lsls	r6, r2, #11
 800237c:	d50e      	bpl.n	800239c <HAL_UART_IRQHandler+0x10c>
 800237e:	0245      	lsls	r5, r0, #9
 8002380:	d50c      	bpl.n	800239c <HAL_UART_IRQHandler+0x10c>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002382:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002386:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002388:	621a      	str	r2, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800238a:	2320      	movs	r3, #32
 800238c:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    huart->RxState = HAL_UART_STATE_READY;
 8002390:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
 8002394:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002398:	f000 bbf2 	b.w	8002b80 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET)
 800239c:	0616      	lsls	r6, r2, #24
 800239e:	d535      	bpl.n	800240c <HAL_UART_IRQHandler+0x17c>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 80023a0:	060d      	lsls	r5, r1, #24
 80023a2:	d401      	bmi.n	80023a8 <HAL_UART_IRQHandler+0x118>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 80023a4:	0200      	lsls	r0, r0, #8
 80023a6:	d531      	bpl.n	800240c <HAL_UART_IRQHandler+0x17c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023a8:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 80023ac:	2a21      	cmp	r2, #33	; 0x21
 80023ae:	d10e      	bne.n	80023ce <HAL_UART_IRQHandler+0x13e>
    if(huart->TxXferCount == 0U)
 80023b0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 80023b4:	b292      	uxth	r2, r2
 80023b6:	b982      	cbnz	r2, 80023da <HAL_UART_IRQHandler+0x14a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_FIFOEN) != RESET)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	0092      	lsls	r2, r2, #2
 80023bc:	d508      	bpl.n	80023d0 <HAL_UART_IRQHandler+0x140>
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80023c4:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	bd70      	pop	{r4, r5, r6, pc}
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	e7f5      	b.n	80023c6 <HAL_UART_IRQHandler+0x136>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023da:	68a2      	ldr	r2, [r4, #8]
 80023dc:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80023e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80023e2:	d10e      	bne.n	8002402 <HAL_UART_IRQHandler+0x172>
 80023e4:	6921      	ldr	r1, [r4, #16]
 80023e6:	b961      	cbnz	r1, 8002402 <HAL_UART_IRQHandler+0x172>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80023e8:	f832 1b02 	ldrh.w	r1, [r2], #2
 80023ec:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80023f0:	8519      	strh	r1, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80023f2:	65e2      	str	r2, [r4, #92]	; 0x5c
      huart->TxXferCount--;
 80023f4:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8002400:	bd70      	pop	{r4, r5, r6, pc}
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002402:	1c51      	adds	r1, r2, #1
 8002404:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
 800240a:	e7f3      	b.n	80023f4 <HAL_UART_IRQHandler+0x164>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800240c:	0656      	lsls	r6, r2, #25
 800240e:	d50c      	bpl.n	800242a <HAL_UART_IRQHandler+0x19a>
 8002410:	064d      	lsls	r5, r1, #25
 8002412:	d50a      	bpl.n	800242a <HAL_UART_IRQHandler+0x19a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002414:	681a      	ldr	r2, [r3, #0]
  HAL_UART_TxCpltCallback(huart);
 8002416:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800241e:	2320      	movs	r3, #32
 8002420:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  HAL_UART_TxCpltCallback(huart);
 8002424:	f7ff fef9 	bl	800221a <HAL_UART_TxCpltCallback>
 8002428:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 800242a:	0210      	lsls	r0, r2, #8
 800242c:	d5cf      	bpl.n	80023ce <HAL_UART_IRQHandler+0x13e>
 800242e:	004a      	lsls	r2, r1, #1
 8002430:	d5cd      	bpl.n	80023ce <HAL_UART_IRQHandler+0x13e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXFEIE);
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8002438:	e7c8      	b.n	80023cc <HAL_UART_IRQHandler+0x13c>
 800243a:	bf00      	nop
 800243c:	10000001 	.word	0x10000001
 8002440:	08002445 	.word	0x08002445

08002444 <UART_DMAAbortOnError>:
{
 8002444:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002446:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  huart->TxXferCount = 0U;
 800244e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  HAL_UART_ErrorCallback(huart);
 8002452:	f7ff ff1b 	bl	800228c <HAL_UART_ErrorCallback>
 8002456:	bd08      	pop	{r3, pc}

08002458 <UART_SetConfig>:
{
 8002458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800245c:	4604      	mov	r4, r0
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 800245e:	6a81      	ldr	r1, [r0, #40]	; 0x28
  if(UART_INSTANCE_LOWPOWER(huart))
 8002460:	6805      	ldr	r5, [r0, #0]
{
 8002462:	b087      	sub	sp, #28
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002464:	68a3      	ldr	r3, [r4, #8]
 8002466:	6922      	ldr	r2, [r4, #16]
 8002468:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800246a:	682e      	ldr	r6, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800246c:	69c0      	ldr	r0, [r0, #28]
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 800246e:	4313      	orrs	r3, r2
 8002470:	6962      	ldr	r2, [r4, #20]
 8002472:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002474:	4ab3      	ldr	r2, [pc, #716]	; (8002744 <UART_SetConfig+0x2ec>)
  tmpreg |=  (uint32_t)huart->Init.FIFOMode;
 8002476:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002478:	4032      	ands	r2, r6
 800247a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800247c:	68e2      	ldr	r2, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800247e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002480:	686b      	ldr	r3, [r5, #4]
 8002482:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002486:	4313      	orrs	r3, r2
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002488:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800248a:	606b      	str	r3, [r5, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800248c:	4bae      	ldr	r3, [pc, #696]	; (8002748 <UART_SetConfig+0x2f0>)
 800248e:	429d      	cmp	r5, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002490:	bf1c      	itt	ne
 8002492:	6a23      	ldrne	r3, [r4, #32]
 8002494:	431a      	orrne	r2, r3
  if (huart->Init.FIFOMode == UART_FIFOMODE_ENABLE)
 8002496:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 800249a:	bf02      	ittt	eq
 800249c:	6ae3      	ldreq	r3, [r4, #44]	; 0x2c
 800249e:	6b21      	ldreq	r1, [r4, #48]	; 0x30
 80024a0:	430b      	orreq	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 80024a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    tmpreg |= ((uint32_t)huart->Init.TXFIFOThreshold | (uint32_t)huart->Init.RXFIFOThreshold);
 80024a4:	bf08      	it	eq
 80024a6:	431a      	orreq	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024a8:	68ab      	ldr	r3, [r5, #8]
 80024aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80024ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80024b2:	4313      	orrs	r3, r2
 80024b4:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.Prescaler);
 80024b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80024b8:	f023 030f 	bic.w	r3, r3, #15
 80024bc:	430b      	orrs	r3, r1
 80024be:	62eb      	str	r3, [r5, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024c0:	4ba2      	ldr	r3, [pc, #648]	; (800274c <UART_SetConfig+0x2f4>)
 80024c2:	429d      	cmp	r5, r3
 80024c4:	d11c      	bne.n	8002500 <UART_SetConfig+0xa8>
 80024c6:	4ba2      	ldr	r3, [pc, #648]	; (8002750 <UART_SetConfig+0x2f8>)
 80024c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024ce:	2b28      	cmp	r3, #40	; 0x28
 80024d0:	f200 825e 	bhi.w	8002990 <UART_SetConfig+0x538>
 80024d4:	4a9f      	ldr	r2, [pc, #636]	; (8002754 <UART_SetConfig+0x2fc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	f040 81e6 	bne.w	80028ac <UART_SetConfig+0x454>
    switch (clocksource)
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	f000 81ba 	beq.w	800285a <UART_SetConfig+0x402>
 80024e6:	f200 816e 	bhi.w	80027c6 <UART_SetConfig+0x36e>
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	f000 8197 	beq.w	800281e <UART_SetConfig+0x3c6>
 80024f0:	f0c0 817d 	bcc.w	80027ee <UART_SetConfig+0x396>
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	f000 8195 	beq.w	8002824 <UART_SetConfig+0x3cc>
        ret = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
  uint16_t usartdiv                   = 0x0000U;
 80024fc:	2200      	movs	r2, #0
 80024fe:	e186      	b.n	800280e <UART_SetConfig+0x3b6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002500:	4b95      	ldr	r3, [pc, #596]	; (8002758 <UART_SetConfig+0x300>)
 8002502:	429d      	cmp	r5, r3
 8002504:	d108      	bne.n	8002518 <UART_SetConfig+0xc0>
 8002506:	4b92      	ldr	r3, [pc, #584]	; (8002750 <UART_SetConfig+0x2f8>)
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	2b05      	cmp	r3, #5
 8002510:	f200 823e 	bhi.w	8002990 <UART_SetConfig+0x538>
 8002514:	4a91      	ldr	r2, [pc, #580]	; (800275c <UART_SetConfig+0x304>)
 8002516:	e7de      	b.n	80024d6 <UART_SetConfig+0x7e>
 8002518:	4b91      	ldr	r3, [pc, #580]	; (8002760 <UART_SetConfig+0x308>)
 800251a:	429d      	cmp	r5, r3
 800251c:	d108      	bne.n	8002530 <UART_SetConfig+0xd8>
 800251e:	4b8c      	ldr	r3, [pc, #560]	; (8002750 <UART_SetConfig+0x2f8>)
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	2b05      	cmp	r3, #5
 8002528:	f200 8232 	bhi.w	8002990 <UART_SetConfig+0x538>
 800252c:	4a8d      	ldr	r2, [pc, #564]	; (8002764 <UART_SetConfig+0x30c>)
 800252e:	e7d2      	b.n	80024d6 <UART_SetConfig+0x7e>
 8002530:	4b8d      	ldr	r3, [pc, #564]	; (8002768 <UART_SetConfig+0x310>)
 8002532:	429d      	cmp	r5, r3
 8002534:	d108      	bne.n	8002548 <UART_SetConfig+0xf0>
 8002536:	4b86      	ldr	r3, [pc, #536]	; (8002750 <UART_SetConfig+0x2f8>)
 8002538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	2b05      	cmp	r3, #5
 8002540:	f200 8226 	bhi.w	8002990 <UART_SetConfig+0x538>
 8002544:	4a89      	ldr	r2, [pc, #548]	; (800276c <UART_SetConfig+0x314>)
 8002546:	e7c6      	b.n	80024d6 <UART_SetConfig+0x7e>
 8002548:	4b89      	ldr	r3, [pc, #548]	; (8002770 <UART_SetConfig+0x318>)
 800254a:	429d      	cmp	r5, r3
 800254c:	d108      	bne.n	8002560 <UART_SetConfig+0x108>
 800254e:	4b80      	ldr	r3, [pc, #512]	; (8002750 <UART_SetConfig+0x2f8>)
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	2b05      	cmp	r3, #5
 8002558:	f200 821a 	bhi.w	8002990 <UART_SetConfig+0x538>
 800255c:	4a85      	ldr	r2, [pc, #532]	; (8002774 <UART_SetConfig+0x31c>)
 800255e:	e7ba      	b.n	80024d6 <UART_SetConfig+0x7e>
 8002560:	4b85      	ldr	r3, [pc, #532]	; (8002778 <UART_SetConfig+0x320>)
 8002562:	429d      	cmp	r5, r3
 8002564:	d108      	bne.n	8002578 <UART_SetConfig+0x120>
 8002566:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <UART_SetConfig+0x2f8>)
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800256e:	2b28      	cmp	r3, #40	; 0x28
 8002570:	f200 820e 	bhi.w	8002990 <UART_SetConfig+0x538>
 8002574:	4a81      	ldr	r2, [pc, #516]	; (800277c <UART_SetConfig+0x324>)
 8002576:	e7ae      	b.n	80024d6 <UART_SetConfig+0x7e>
 8002578:	4b81      	ldr	r3, [pc, #516]	; (8002780 <UART_SetConfig+0x328>)
 800257a:	429d      	cmp	r5, r3
 800257c:	d108      	bne.n	8002590 <UART_SetConfig+0x138>
 800257e:	4b74      	ldr	r3, [pc, #464]	; (8002750 <UART_SetConfig+0x2f8>)
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	2b05      	cmp	r3, #5
 8002588:	f200 8202 	bhi.w	8002990 <UART_SetConfig+0x538>
 800258c:	4a7d      	ldr	r2, [pc, #500]	; (8002784 <UART_SetConfig+0x32c>)
 800258e:	e7a2      	b.n	80024d6 <UART_SetConfig+0x7e>
 8002590:	4b7d      	ldr	r3, [pc, #500]	; (8002788 <UART_SetConfig+0x330>)
 8002592:	429d      	cmp	r5, r3
 8002594:	d108      	bne.n	80025a8 <UART_SetConfig+0x150>
 8002596:	4b6e      	ldr	r3, [pc, #440]	; (8002750 <UART_SetConfig+0x2f8>)
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	2b05      	cmp	r3, #5
 80025a0:	f200 81f6 	bhi.w	8002990 <UART_SetConfig+0x538>
 80025a4:	4a79      	ldr	r2, [pc, #484]	; (800278c <UART_SetConfig+0x334>)
 80025a6:	e796      	b.n	80024d6 <UART_SetConfig+0x7e>
 80025a8:	4b67      	ldr	r3, [pc, #412]	; (8002748 <UART_SetConfig+0x2f0>)
 80025aa:	429d      	cmp	r5, r3
 80025ac:	f040 81f0 	bne.w	8002990 <UART_SetConfig+0x538>
 80025b0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80025b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025b6:	f002 0207 	and.w	r2, r2, #7
 80025ba:	2a05      	cmp	r2, #5
 80025bc:	d901      	bls.n	80025c2 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
  return ret;
 80025c0:	e080      	b.n	80026c4 <UART_SetConfig+0x26c>
 80025c2:	4973      	ldr	r1, [pc, #460]	; (8002790 <UART_SetConfig+0x338>)
 80025c4:	5c8d      	ldrb	r5, [r1, r2]
    switch (clocksource)
 80025c6:	2d08      	cmp	r5, #8
 80025c8:	d02f      	beq.n	800262a <UART_SetConfig+0x1d2>
 80025ca:	d808      	bhi.n	80025de <UART_SetConfig+0x186>
 80025cc:	2d02      	cmp	r5, #2
 80025ce:	d021      	beq.n	8002614 <UART_SetConfig+0x1bc>
 80025d0:	2d04      	cmp	r5, #4
 80025d2:	d1f4      	bne.n	80025be <UART_SetConfig+0x166>
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80025d4:	4668      	mov	r0, sp
 80025d6:	f7ff fb59 	bl	8001c8c <HAL_RCCEx_GetPLL2ClockFreq>
      tmpreg = pll2_clocks.PLL2_Q_Frequency;
 80025da:	9801      	ldr	r0, [sp, #4]
      break;
 80025dc:	e01c      	b.n	8002618 <UART_SetConfig+0x1c0>
    switch (clocksource)
 80025de:	2d20      	cmp	r5, #32
 80025e0:	d005      	beq.n	80025ee <UART_SetConfig+0x196>
 80025e2:	2d40      	cmp	r5, #64	; 0x40
 80025e4:	d01c      	beq.n	8002620 <UART_SetConfig+0x1c8>
 80025e6:	2d10      	cmp	r5, #16
 80025e8:	d1e9      	bne.n	80025be <UART_SetConfig+0x166>
      tmpreg =(uint32_t) CSI_VALUE;
 80025ea:	486a      	ldr	r0, [pc, #424]	; (8002794 <UART_SetConfig+0x33c>)
 80025ec:	e001      	b.n	80025f2 <UART_SetConfig+0x19a>
      tmpreg = (uint32_t) LSE_VALUE;
 80025ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 80025f2:	6866      	ldr	r6, [r4, #4]
 80025f4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80025f8:	4283      	cmp	r3, r0
 80025fa:	d8e0      	bhi.n	80025be <UART_SetConfig+0x166>
 80025fc:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 8002600:	d8dd      	bhi.n	80025be <UART_SetConfig+0x166>
        switch (clocksource)
 8002602:	2d08      	cmp	r5, #8
 8002604:	d078      	beq.n	80026f8 <UART_SetConfig+0x2a0>
 8002606:	d81a      	bhi.n	800263e <UART_SetConfig+0x1e6>
 8002608:	2d02      	cmp	r5, #2
 800260a:	d038      	beq.n	800267e <UART_SetConfig+0x226>
 800260c:	2d04      	cmp	r5, #4
 800260e:	d05d      	beq.n	80026cc <UART_SetConfig+0x274>
          ret = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e04f      	b.n	80026b4 <UART_SetConfig+0x25c>
      tmpreg = HAL_RCCEx_GetD3PCLK1Freq();
 8002614:	f7ff fb24 	bl	8001c60 <HAL_RCCEx_GetD3PCLK1Freq>
    if (tmpreg != 0U)
 8002618:	2800      	cmp	r0, #0
 800261a:	d1ea      	bne.n	80025f2 <UART_SetConfig+0x19a>
  HAL_StatusTypeDef ret               = HAL_OK;
 800261c:	2300      	movs	r3, #0
      break;
 800261e:	e051      	b.n	80026c4 <UART_SetConfig+0x26c>
      HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002620:	a803      	add	r0, sp, #12
 8002622:	f7ff fbd3 	bl	8001dcc <HAL_RCCEx_GetPLL3ClockFreq>
      tmpreg = pll3_clocks.PLL3_Q_Frequency;
 8002626:	9804      	ldr	r0, [sp, #16]
      break;
 8002628:	e7f6      	b.n	8002618 <UART_SetConfig+0x1c0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	485a      	ldr	r0, [pc, #360]	; (8002798 <UART_SetConfig+0x340>)
 800262e:	f012 0f20 	tst.w	r2, #32
 8002632:	d0de      	beq.n	80025f2 <UART_SetConfig+0x19a>
        tmpreg = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800263a:	40d8      	lsrs	r0, r3
 800263c:	e7d9      	b.n	80025f2 <UART_SetConfig+0x19a>
        switch (clocksource)
 800263e:	2d20      	cmp	r5, #32
 8002640:	f000 80b0 	beq.w	80027a4 <UART_SetConfig+0x34c>
 8002644:	2d40      	cmp	r5, #64	; 0x40
 8002646:	d04c      	beq.n	80026e2 <UART_SetConfig+0x28a>
 8002648:	2d10      	cmp	r5, #16
 800264a:	d1e1      	bne.n	8002610 <UART_SetConfig+0x1b8>
          tmpreg = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800264c:	4b53      	ldr	r3, [pc, #332]	; (800279c <UART_SetConfig+0x344>)
 800264e:	2100      	movs	r1, #0
 8002650:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002652:	4850      	ldr	r0, [pc, #320]	; (8002794 <UART_SetConfig+0x33c>)
 8002654:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002658:	2300      	movs	r3, #0
 800265a:	f7fd fe3d 	bl	80002d8 <__aeabi_uldivmod>
 800265e:	4632      	mov	r2, r6
 8002660:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002664:	2300      	movs	r3, #0
 8002666:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800266a:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800266e:	0870      	lsrs	r0, r6, #1
 8002670:	eb18 0500 	adds.w	r5, r8, r0
 8002674:	f149 0600 	adc.w	r6, r9, #0
 8002678:	4628      	mov	r0, r5
 800267a:	4631      	mov	r1, r6
 800267c:	e017      	b.n	80026ae <UART_SetConfig+0x256>
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCCEx_GetD3PCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800267e:	f7ff faef 	bl	8001c60 <HAL_RCCEx_GetD3PCLK1Freq>
 8002682:	4b46      	ldr	r3, [pc, #280]	; (800279c <UART_SetConfig+0x344>)
 8002684:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002686:	6865      	ldr	r5, [r4, #4]
 8002688:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800268c:	2300      	movs	r3, #0
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800268e:	2100      	movs	r1, #0
 8002690:	f7fd fe22 	bl	80002d8 <__aeabi_uldivmod>
 8002694:	462a      	mov	r2, r5
 8002696:	020f      	lsls	r7, r1, #8
 8002698:	2300      	movs	r3, #0
 800269a:	0206      	lsls	r6, r0, #8
 800269c:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80026a0:	0868      	lsrs	r0, r5, #1
 80026a2:	eb16 0800 	adds.w	r8, r6, r0
 80026a6:	f147 0900 	adc.w	r9, r7, #0
 80026aa:	4640      	mov	r0, r8
 80026ac:	4649      	mov	r1, r9
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80026ae:	f7fd fe13 	bl	80002d8 <__aeabi_uldivmod>
          break;
 80026b2:	2300      	movs	r3, #0
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 80026b4:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80026b8:	4a39      	ldr	r2, [pc, #228]	; (80027a0 <UART_SetConfig+0x348>)
 80026ba:	4291      	cmp	r1, r2
 80026bc:	f63f af7f 	bhi.w	80025be <UART_SetConfig+0x166>
           huart->Instance->BRR = tmpreg;
 80026c0:	6822      	ldr	r2, [r4, #0]
 80026c2:	60d0      	str	r0, [r2, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	b007      	add	sp, #28
 80026c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80026cc:	4668      	mov	r0, sp
 80026ce:	f7ff fadd 	bl	8001c8c <HAL_RCCEx_GetPLL2ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80026d2:	4b32      	ldr	r3, [pc, #200]	; (800279c <UART_SetConfig+0x344>)
 80026d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026d6:	6865      	ldr	r5, [r4, #4]
 80026d8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80026dc:	2300      	movs	r3, #0
 80026de:	9801      	ldr	r0, [sp, #4]
 80026e0:	e7d5      	b.n	800268e <UART_SetConfig+0x236>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80026e2:	a803      	add	r0, sp, #12
 80026e4:	f7ff fb72 	bl	8001dcc <HAL_RCCEx_GetPLL3ClockFreq>
          tmpreg = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80026e8:	4b2c      	ldr	r3, [pc, #176]	; (800279c <UART_SetConfig+0x344>)
 80026ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026ec:	6865      	ldr	r5, [r4, #4]
 80026ee:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80026f2:	2300      	movs	r3, #0
 80026f4:	9804      	ldr	r0, [sp, #16]
 80026f6:	e7ca      	b.n	800268e <UART_SetConfig+0x236>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026f8:	4915      	ldr	r1, [pc, #84]	; (8002750 <UART_SetConfig+0x2f8>)
 80026fa:	0877      	lsrs	r7, r6, #1
 80026fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026fe:	680d      	ldr	r5, [r1, #0]
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <UART_SetConfig+0x344>)
 8002702:	f015 0520 	ands.w	r5, r5, #32
 8002706:	d017      	beq.n	8002738 <UART_SetConfig+0x2e0>
            tmpreg = (uint32_t)(UART_DIV_LPUART((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 8002708:	6809      	ldr	r1, [r1, #0]
 800270a:	4823      	ldr	r0, [pc, #140]	; (8002798 <UART_SetConfig+0x340>)
 800270c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002710:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002714:	2300      	movs	r3, #0
 8002716:	40c8      	lsrs	r0, r1
 8002718:	2100      	movs	r1, #0
 800271a:	f7fd fddd 	bl	80002d8 <__aeabi_uldivmod>
 800271e:	4632      	mov	r2, r6
 8002720:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8002724:	2300      	movs	r3, #0
 8002726:	ea4f 2800 	mov.w	r8, r0, lsl #8
 800272a:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 800272e:	eb18 0007 	adds.w	r0, r8, r7
 8002732:	f149 0100 	adc.w	r1, r9, #0
 8002736:	e7ba      	b.n	80026ae <UART_SetConfig+0x256>
            tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002738:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800273c:	2300      	movs	r3, #0
 800273e:	4816      	ldr	r0, [pc, #88]	; (8002798 <UART_SetConfig+0x340>)
 8002740:	e7ea      	b.n	8002718 <UART_SetConfig+0x2c0>
 8002742:	bf00      	nop
 8002744:	cfff69f3 	.word	0xcfff69f3
 8002748:	58000c00 	.word	0x58000c00
 800274c:	40011000 	.word	0x40011000
 8002750:	58024400 	.word	0x58024400
 8002754:	080030f8 	.word	0x080030f8
 8002758:	40004400 	.word	0x40004400
 800275c:	08003121 	.word	0x08003121
 8002760:	40004800 	.word	0x40004800
 8002764:	08003121 	.word	0x08003121
 8002768:	40004c00 	.word	0x40004c00
 800276c:	08003121 	.word	0x08003121
 8002770:	40005000 	.word	0x40005000
 8002774:	08003121 	.word	0x08003121
 8002778:	40011400 	.word	0x40011400
 800277c:	080030f8 	.word	0x080030f8
 8002780:	40007800 	.word	0x40007800
 8002784:	08003121 	.word	0x08003121
 8002788:	40007c00 	.word	0x40007c00
 800278c:	08003121 	.word	0x08003121
 8002790:	08003127 	.word	0x08003127
 8002794:	003d0900 	.word	0x003d0900
 8002798:	03d09000 	.word	0x03d09000
 800279c:	0800312e 	.word	0x0800312e
 80027a0:	000ffcff 	.word	0x000ffcff
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80027a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80027a6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 80027aa:	4b7c      	ldr	r3, [pc, #496]	; (800299c <UART_SetConfig+0x544>)
 80027ac:	0870      	lsrs	r0, r6, #1
 80027ae:	2100      	movs	r1, #0
 80027b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80027b4:	4632      	mov	r2, r6
 80027b6:	f44f 7680 	mov.w	r6, #256	; 0x100
 80027ba:	fbb5 f5f3 	udiv	r5, r5, r3
 80027be:	2300      	movs	r3, #0
 80027c0:	fbe5 0106 	umlal	r0, r1, r5, r6
 80027c4:	e773      	b.n	80026ae <UART_SetConfig+0x256>
    switch (clocksource)
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d068      	beq.n	800289c <UART_SetConfig+0x444>
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d03b      	beq.n	8002846 <UART_SetConfig+0x3ee>
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	f47f ae93 	bne.w	80024fa <UART_SetConfig+0xa2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80027d4:	4b71      	ldr	r3, [pc, #452]	; (800299c <UART_SetConfig+0x544>)
 80027d6:	4a72      	ldr	r2, [pc, #456]	; (80029a0 <UART_SetConfig+0x548>)
 80027d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80027dc:	6860      	ldr	r0, [r4, #4]
 80027de:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e2:	0842      	lsrs	r2, r0, #1
 80027e4:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80027e8:	fbb2 f2f0 	udiv	r2, r2, r0
 80027ec:	e00d      	b.n	800280a <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80027ee:	f7fe fccf 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 80027f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027f4:	4a69      	ldr	r2, [pc, #420]	; (800299c <UART_SetConfig+0x544>)
 80027f6:	6863      	ldr	r3, [r4, #4]
 80027f8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80027fc:	fbb0 f0f2 	udiv	r0, r0, r2
 8002800:	085a      	lsrs	r2, r3, #1
 8002802:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002806:	fbb2 f2f3 	udiv	r2, r2, r3
 800280a:	b292      	uxth	r2, r2
  HAL_StatusTypeDef ret               = HAL_OK;
 800280c:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 800280e:	f022 010f 	bic.w	r1, r2, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002812:	f3c2 0242 	ubfx	r2, r2, #1, #3
    huart->Instance->BRR = brrtemp;
 8002816:	6820      	ldr	r0, [r4, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60c2      	str	r2, [r0, #12]
 800281c:	e752      	b.n	80026c4 <UART_SetConfig+0x26c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 800281e:	f7fe fccd 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
 8002822:	e7e6      	b.n	80027f2 <UART_SetConfig+0x39a>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8002824:	4668      	mov	r0, sp
 8002826:	f7ff fa31 	bl	8001c8c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800282a:	4b5c      	ldr	r3, [pc, #368]	; (800299c <UART_SetConfig+0x544>)
 800282c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800282e:	6861      	ldr	r1, [r4, #4]
 8002830:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002834:	9b01      	ldr	r3, [sp, #4]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 8002836:	fbb3 f3f2 	udiv	r3, r3, r2
 800283a:	084a      	lsrs	r2, r1, #1
 800283c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002840:	fbb2 f2f1 	udiv	r2, r2, r1
 8002844:	e7e1      	b.n	800280a <UART_SetConfig+0x3b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002846:	a803      	add	r0, sp, #12
 8002848:	f7ff fac0 	bl	8001dcc <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <UART_SetConfig+0x544>)
 800284e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002850:	6861      	ldr	r1, [r4, #4]
 8002852:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002856:	9b04      	ldr	r3, [sp, #16]
 8002858:	e7ed      	b.n	8002836 <UART_SetConfig+0x3de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800285a:	4a52      	ldr	r2, [pc, #328]	; (80029a4 <UART_SetConfig+0x54c>)
 800285c:	4852      	ldr	r0, [pc, #328]	; (80029a8 <UART_SetConfig+0x550>)
 800285e:	6813      	ldr	r3, [r2, #0]
 8002860:	6865      	ldr	r5, [r4, #4]
 8002862:	f013 0320 	ands.w	r3, r3, #32
 8002866:	4e4d      	ldr	r6, [pc, #308]	; (800299c <UART_SetConfig+0x544>)
 8002868:	d00d      	beq.n	8002886 <UART_SetConfig+0x42e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002870:	40d0      	lsrs	r0, r2
 8002872:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 8002876:	fbb0 f0f2 	udiv	r0, r0, r2
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800287a:	086a      	lsrs	r2, r5, #1
 800287c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002880:	fbb2 f2f5 	udiv	r2, r2, r5
 8002884:	e7c1      	b.n	800280a <UART_SetConfig+0x3b2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002886:	f836 2011 	ldrh.w	r2, [r6, r1, lsl #1]
 800288a:	fbb0 f0f2 	udiv	r0, r0, r2
 800288e:	086a      	lsrs	r2, r5, #1
 8002890:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8002894:	fbb2 f2f5 	udiv	r2, r2, r5
 8002898:	b292      	uxth	r2, r2
 800289a:	e7b8      	b.n	800280e <UART_SetConfig+0x3b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800289c:	4b3f      	ldr	r3, [pc, #252]	; (800299c <UART_SetConfig+0x544>)
 800289e:	6865      	ldr	r5, [r4, #4]
 80028a0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80028a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80028a8:	b280      	uxth	r0, r0
 80028aa:	e7e6      	b.n	800287a <UART_SetConfig+0x422>
    switch (clocksource)
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d046      	beq.n	800293e <UART_SetConfig+0x4e6>
 80028b0:	d818      	bhi.n	80028e4 <UART_SetConfig+0x48c>
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d035      	beq.n	8002922 <UART_SetConfig+0x4ca>
 80028b6:	d324      	bcc.n	8002902 <UART_SetConfig+0x4aa>
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	f47f ae80 	bne.w	80025be <UART_SetConfig+0x166>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80028be:	4668      	mov	r0, sp
 80028c0:	f7ff f9e4 	bl	8001c8c <HAL_RCCEx_GetPLL2ClockFreq>
        huart->Instance->BRR =  (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <UART_SetConfig+0x544>)
 80028c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80028c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80028cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80028d0:	9b01      	ldr	r3, [sp, #4]
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 80028d2:	fbb3 f3f0 	udiv	r3, r3, r0
 80028d6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80028da:	fbb3 f3f2 	udiv	r3, r3, r2
 80028de:	b29b      	uxth	r3, r3
 80028e0:	60cb      	str	r3, [r1, #12]
 80028e2:	e69b      	b.n	800261c <UART_SetConfig+0x1c4>
    switch (clocksource)
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d04c      	beq.n	8002982 <UART_SetConfig+0x52a>
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d01d      	beq.n	8002928 <UART_SetConfig+0x4d0>
 80028ec:	2b10      	cmp	r3, #16
 80028ee:	f47f ae66 	bne.w	80025be <UART_SetConfig+0x166>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80028f2:	4b2a      	ldr	r3, [pc, #168]	; (800299c <UART_SetConfig+0x544>)
 80028f4:	6862      	ldr	r2, [r4, #4]
 80028f6:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80028fa:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <UART_SetConfig+0x548>)
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 80028fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002900:	e008      	b.n	8002914 <UART_SetConfig+0x4bc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002902:	f7fe fc45 	bl	8001190 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002906:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <UART_SetConfig+0x544>)
 800290a:	6862      	ldr	r2, [r4, #4]
 800290c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002910:	fbb0 f3f3 	udiv	r3, r0, r3
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002914:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002918:	fbb3 f3f2 	udiv	r3, r3, r2
 800291c:	b29b      	uxth	r3, r3
 800291e:	60eb      	str	r3, [r5, #12]
 8002920:	e67c      	b.n	800261c <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.Prescaler));
 8002922:	f7fe fc4b 	bl	80011bc <HAL_RCC_GetPCLK2Freq>
 8002926:	e7ee      	b.n	8002906 <UART_SetConfig+0x4ae>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8002928:	a803      	add	r0, sp, #12
 800292a:	f7ff fa4f 	bl	8001dcc <HAL_RCCEx_GetPLL3ClockFreq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.Prescaler));
 800292e:	4b1b      	ldr	r3, [pc, #108]	; (800299c <UART_SetConfig+0x544>)
 8002930:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002932:	e894 0006 	ldmia.w	r4, {r1, r2}
 8002936:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800293a:	9b04      	ldr	r3, [sp, #16]
 800293c:	e7c9      	b.n	80028d2 <UART_SetConfig+0x47a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800293e:	4e19      	ldr	r6, [pc, #100]	; (80029a4 <UART_SetConfig+0x54c>)
 8002940:	6860      	ldr	r0, [r4, #4]
 8002942:	6833      	ldr	r3, [r6, #0]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <UART_SetConfig+0x550>)
 8002946:	f013 0320 	ands.w	r3, r3, #32
 800294a:	4c14      	ldr	r4, [pc, #80]	; (800299c <UART_SetConfig+0x544>)
 800294c:	d00e      	beq.n	800296c <UART_SetConfig+0x514>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3)), huart->Init.BaudRate, huart->Init.Prescaler));
 800294e:	6833      	ldr	r3, [r6, #0]
 8002950:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002954:	40da      	lsrs	r2, r3
 8002956:	f834 3011 	ldrh.w	r3, [r4, r1, lsl #1]
 800295a:	fbb2 f2f3 	udiv	r2, r2, r3
 800295e:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002962:	fbb2 f2f0 	udiv	r2, r2, r0
 8002966:	b292      	uxth	r2, r2
 8002968:	60ea      	str	r2, [r5, #12]
 800296a:	e657      	b.n	800261c <UART_SetConfig+0x1c4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 800296c:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 8002970:	fbb2 f2f1 	udiv	r2, r2, r1
 8002974:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8002978:	fbb2 f2f0 	udiv	r2, r2, r0
 800297c:	b292      	uxth	r2, r2
 800297e:	60ea      	str	r2, [r5, #12]
 8002980:	e6a0      	b.n	80026c4 <UART_SetConfig+0x26c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.Prescaler));
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <UART_SetConfig+0x544>)
 8002984:	6862      	ldr	r2, [r4, #4]
 8002986:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800298a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298e:	e7b5      	b.n	80028fc <UART_SetConfig+0x4a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002990:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002994:	f47f ae13 	bne.w	80025be <UART_SetConfig+0x166>
 8002998:	e5af      	b.n	80024fa <UART_SetConfig+0xa2>
 800299a:	bf00      	nop
 800299c:	0800312e 	.word	0x0800312e
 80029a0:	003d0900 	.word	0x003d0900
 80029a4:	58024400 	.word	0x58024400
 80029a8:	03d09000 	.word	0x03d09000

080029ac <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80029ae:	07da      	lsls	r2, r3, #31
{
 80029b0:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029b2:	d506      	bpl.n	80029c2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029b4:	6801      	ldr	r1, [r0, #0]
 80029b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80029b8:	684a      	ldr	r2, [r1, #4]
 80029ba:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80029be:	4322      	orrs	r2, r4
 80029c0:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029c2:	079c      	lsls	r4, r3, #30
 80029c4:	d506      	bpl.n	80029d4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029c6:	6801      	ldr	r1, [r0, #0]
 80029c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80029ca:	684a      	ldr	r2, [r1, #4]
 80029cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029d0:	4322      	orrs	r2, r4
 80029d2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029d4:	0759      	lsls	r1, r3, #29
 80029d6:	d506      	bpl.n	80029e6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029d8:	6801      	ldr	r1, [r0, #0]
 80029da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80029dc:	684a      	ldr	r2, [r1, #4]
 80029de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029e2:	4322      	orrs	r2, r4
 80029e4:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029e6:	071a      	lsls	r2, r3, #28
 80029e8:	d506      	bpl.n	80029f8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80029ea:	6801      	ldr	r1, [r0, #0]
 80029ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80029ee:	684a      	ldr	r2, [r1, #4]
 80029f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f4:	4322      	orrs	r2, r4
 80029f6:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80029f8:	06dc      	lsls	r4, r3, #27
 80029fa:	d506      	bpl.n	8002a0a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80029fc:	6801      	ldr	r1, [r0, #0]
 80029fe:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8002a00:	688a      	ldr	r2, [r1, #8]
 8002a02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a06:	4322      	orrs	r2, r4
 8002a08:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a0a:	0699      	lsls	r1, r3, #26
 8002a0c:	d506      	bpl.n	8002a1c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a0e:	6801      	ldr	r1, [r0, #0]
 8002a10:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002a12:	688a      	ldr	r2, [r1, #8]
 8002a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a18:	4322      	orrs	r2, r4
 8002a1a:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a1c:	065a      	lsls	r2, r3, #25
 8002a1e:	d510      	bpl.n	8002a42 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a20:	6801      	ldr	r1, [r0, #0]
 8002a22:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8002a24:	684a      	ldr	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a26:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a2a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002a2e:	ea42 0204 	orr.w	r2, r2, r4
 8002a32:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a34:	d105      	bne.n	8002a42 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a36:	684a      	ldr	r2, [r1, #4]
 8002a38:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002a3a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002a3e:	4322      	orrs	r2, r4
 8002a40:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a42:	061b      	lsls	r3, r3, #24
 8002a44:	d506      	bpl.n	8002a54 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a46:	6802      	ldr	r2, [r0, #0]
 8002a48:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8002a4a:	6853      	ldr	r3, [r2, #4]
 8002a4c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6053      	str	r3, [r2, #4]
 8002a54:	bd10      	pop	{r4, pc}

08002a56 <UART_WaitOnFlagUntilTimeout>:
{
 8002a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5a:	9d06      	ldr	r5, [sp, #24]
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	460f      	mov	r7, r1
 8002a60:	4616      	mov	r6, r2
 8002a62:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a64:	6821      	ldr	r1, [r4, #0]
 8002a66:	69ca      	ldr	r2, [r1, #28]
 8002a68:	ea37 0302 	bics.w	r3, r7, r2
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2201      	moveq	r2, #1
 8002a70:	2200      	movne	r2, #0
 8002a72:	42b2      	cmp	r2, r6
 8002a74:	d002      	beq.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002a76:	2000      	movs	r0, #0
}
 8002a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002a7c:	1c6b      	adds	r3, r5, #1
 8002a7e:	d0f2      	beq.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a80:	b99d      	cbnz	r5, 8002aaa <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a82:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002a84:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002a96:	2320      	movs	r3, #32
 8002a98:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
        huart->RxState = HAL_UART_STATE_READY;
 8002a9c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
        __HAL_UNLOCK(huart);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
 8002aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002aaa:	f7fd fddd 	bl	8000668 <HAL_GetTick>
 8002aae:	eba0 0008 	sub.w	r0, r0, r8
 8002ab2:	4285      	cmp	r5, r0
 8002ab4:	d2d6      	bcs.n	8002a64 <UART_WaitOnFlagUntilTimeout+0xe>
 8002ab6:	e7e4      	b.n	8002a82 <UART_WaitOnFlagUntilTimeout+0x2c>

08002ab8 <UART_CheckIdleState>:
{
 8002ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aba:	2600      	movs	r6, #0
{
 8002abc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002ac0:	f7fd fdd2 	bl	8000668 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ac4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002ac6:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	071a      	lsls	r2, r3, #28
 8002acc:	d417      	bmi.n	8002afe <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	075b      	lsls	r3, r3, #29
 8002ad4:	d50a      	bpl.n	8002aec <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ad6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ae0:	4620      	mov	r0, r4
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	462b      	mov	r3, r5
 8002ae6:	f7ff ffb6 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 8002aea:	b9a0      	cbnz	r0, 8002b16 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002aec:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002aee:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002af0:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UNLOCK(huart);
 8002af4:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002af8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
  return HAL_OK;
 8002afc:	e00c      	b.n	8002b18 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002afe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b02:	4632      	mov	r2, r6
 8002b04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff ffa2 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d0db      	beq.n	8002ace <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002b16:	2003      	movs	r0, #3
}
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}

08002b1c <HAL_UART_Init>:
{
 8002b1c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002b1e:	4604      	mov	r4, r0
 8002b20:	b360      	cbz	r0, 8002b7c <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002b22:	f890 3079 	ldrb.w	r3, [r0, #121]	; 0x79
 8002b26:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b2a:	b91b      	cbnz	r3, 8002b34 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002b2c:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8002b30:	f000 fa48 	bl	8002fc4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002b34:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b36:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b38:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002b3a:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
  __HAL_UART_DISABLE(huart);
 8002b3e:	6813      	ldr	r3, [r2, #0]
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b46:	f7ff fc87 	bl	8002458 <UART_SetConfig>
 8002b4a:	2801      	cmp	r0, #1
 8002b4c:	d016      	beq.n	8002b7c <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b50:	b113      	cbz	r3, 8002b58 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002b52:	4620      	mov	r0, r4
 8002b54:	f7ff ff2a 	bl	80029ac <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b58:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002b5a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b6a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f042 0201 	orr.w	r2, r2, #1
}
 8002b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002b76:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002b78:	f7ff bf9e 	b.w	8002ab8 <UART_CheckIdleState>
}
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart: UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002b80:	4770      	bx	lr
	...

08002b84 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8002b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b88:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8a:	2214      	movs	r2, #20
 8002b8c:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002b8e:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8002d3c <MX_GPIO_Init+0x1b8>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b92:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002b94:	4e64      	ldr	r6, [pc, #400]	; (8002d28 <MX_GPIO_Init+0x1a4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b96:	f000 fa9b 	bl	80030d0 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b9a:	4b64      	ldr	r3, [pc, #400]	; (8002d2c <MX_GPIO_Init+0x1a8>)
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002b9c:	4640      	mov	r0, r8
 8002b9e:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ba0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; //Interrupt occurs with Rising edge.
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);*/

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ba8:	270b      	movs	r7, #11
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002baa:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bae:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8002d40 <MX_GPIO_Init+0x1bc>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bb2:	f04f 0a80 	mov.w	sl, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bb6:	f04f 0b01 	mov.w	fp, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002bbe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bc2:	f002 0210 	and.w	r2, r2, #16
 8002bc6:	9200      	str	r2, [sp, #0]
 8002bc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bce:	f042 0204 	orr.w	r2, r2, #4
 8002bd2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002bd6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bda:	f002 0204 	and.w	r2, r2, #4
 8002bde:	9201      	str	r2, [sp, #4]
 8002be0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002be2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002be6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002bee:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bf2:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002bf6:	9202      	str	r2, [sp, #8]
 8002bf8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c0a:	f002 0201 	and.w	r2, r2, #1
 8002c0e:	9203      	str	r2, [sp, #12]
 8002c10:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c16:	f042 0202 	orr.w	r2, r2, #2
 8002c1a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c22:	f002 0202 	and.w	r2, r2, #2
 8002c26:	9204      	str	r2, [sp, #16]
 8002c28:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c2a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c2e:	f042 0208 	orr.w	r2, r2, #8
 8002c32:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002c36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c3a:	f002 0208 	and.w	r2, r2, #8
 8002c3e:	9205      	str	r2, [sp, #20]
 8002c40:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002c46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002c4e:	2201      	movs	r2, #1
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	9306      	str	r3, [sp, #24]
 8002c5a:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002c5c:	f7fd fea8 	bl	80009b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	4630      	mov	r0, r6
 8002c64:	2140      	movs	r1, #64	; 0x40
 8002c66:	f7fd fea3 	bl	80009b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c6a:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c6c:	a907      	add	r1, sp, #28
 8002c6e:	4830      	ldr	r0, [pc, #192]	; (8002d30 <MX_GPIO_Init+0x1ac>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c70:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; //Interrupt occurs with Rising edge.
 8002c72:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <MX_GPIO_Init+0x1b0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; //Interrupt occurs with Rising edge.
 8002c76:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c78:	f7fd fdb0 	bl	80007dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c7c:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c7e:	a907      	add	r1, sp, #28
 8002c80:	482d      	ldr	r0, [pc, #180]	; (8002d38 <MX_GPIO_Init+0x1b4>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c82:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c8a:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8c:	f7fd fda6 	bl	80007dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c90:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c92:	a907      	add	r1, sp, #28
 8002c94:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c98:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c9e:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	f7fd fd9c 	bl	80007dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	a907      	add	r1, sp, #28
 8002caa:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002cae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb2:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cb4:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002cb6:	f7fd fd91 	bl	80007dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cba:	a907      	add	r1, sp, #28
 8002cbc:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cbe:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc2:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cca:	f7fd fd87 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002cce:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	a907      	add	r1, sp, #28
 8002cd2:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd4:	f8cd b020 	str.w	fp, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002cd8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cdc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f7fd fd7d 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ce2:	a907      	add	r1, sp, #28
 8002ce4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002ce6:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cea:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cee:	f7fd fd75 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002cf2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	a907      	add	r1, sp, #28
 8002cf8:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002cfc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002cfe:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d02:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d06:	f7fd fd69 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d0e:	a907      	add	r1, sp, #28
 8002d10:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d12:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d14:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d1a:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1c:	f7fd fd5e 	bl	80007dc <HAL_GPIO_Init>

}
 8002d20:	b00d      	add	sp, #52	; 0x34
 8002d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d26:	bf00      	nop
 8002d28:	58021800 	.word	0x58021800
 8002d2c:	58024400 	.word	0x58024400
 8002d30:	58021000 	.word	0x58021000
 8002d34:	11210000 	.word	0x11210000
 8002d38:	58020800 	.word	0x58020800
 8002d3c:	58020400 	.word	0x58020400
 8002d40:	58020000 	.word	0x58020000

08002d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d48:	224c      	movs	r2, #76	; 0x4c
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	a80a      	add	r0, sp, #40	; 0x28
 8002d4e:	f000 f9bf 	bl	80030d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d52:	2220      	movs	r2, #32
 8002d54:	2100      	movs	r1, #0
 8002d56:	a802      	add	r0, sp, #8
 8002d58:	f000 f9ba 	bl	80030d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d5c:	22bc      	movs	r2, #188	; 0xbc
 8002d5e:	2100      	movs	r1, #0
 8002d60:	a81d      	add	r0, sp, #116	; 0x74
 8002d62:	f000 f9b5 	bl	80030d0 <memset>

  /**Supply configuration update enable 
  */
  MODIFY_REG(PWR->CR3, PWR_CR3_SCUEN, 0);
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <SystemClock_Config+0xa4>)
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	f022 0204 	bic.w	r2, r2, #4
 8002d6e:	60da      	str	r2, [r3, #12]
  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002d70:	2200      	movs	r2, #0
 8002d72:	9201      	str	r2, [sp, #4]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d7e:	619a      	str	r2, [r3, #24]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002d86:	9201      	str	r2, [sp, #4]
 8002d88:	9a01      	ldr	r2, [sp, #4]

  while ((PWR->D3CR & (PWR_D3CR_VOSRDY)) != PWR_D3CR_VOSRDY) 
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	0492      	lsls	r2, r2, #18
 8002d8e:	d5fc      	bpl.n	8002d8a <SystemClock_Config+0x46>
    
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 24;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002d94:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d96:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d98:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d9a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002d9c:	2318      	movs	r3, #24
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002da0:	960a      	str	r6, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002da2:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002da4:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da6:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002da8:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002daa:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dac:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002dae:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002db0:	9615      	str	r6, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002db2:	9517      	str	r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002db4:	9519      	str	r5, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002db6:	941b      	str	r4, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002db8:	941c      	str	r4, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dba:	f7fd fe0f 	bl	80009dc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dbe:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dc0:	4631      	mov	r1, r6
 8002dc2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002dc4:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dc6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc8:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002dca:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dcc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002dce:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002dd0:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002dd2:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002dd4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dd6:	f7fe f8e7 	bl	8000fa8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dda:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002ddc:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002dde:	943a      	str	r4, [sp, #232]	; 0xe8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de0:	f7fe face 	bl	8001380 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002de4:	b04c      	add	sp, #304	; 0x130
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
 8002de8:	58024800 	.word	0x58024800

08002dec <main>:
{
 8002dec:	b508      	push	{r3, lr}
  HAL_Init();
 8002dee:	f7fd fc1f 	bl	8000630 <HAL_Init>
  SystemClock_Config();
 8002df2:	f7ff ffa7 	bl	8002d44 <SystemClock_Config>
  MX_GPIO_Init();
 8002df6:	f7ff fec5 	bl	8002b84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002dfa:	f000 f8c1 	bl	8002f80 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8002dfe:	f000 f883 	bl	8002f08 <MX_TIM7_Init>
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2027      	movs	r0, #39	; 0x27
 8002e06:	4611      	mov	r1, r2
 8002e08:	f7fd fc46 	bl	8000698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e0c:	2027      	movs	r0, #39	; 0x27
 8002e0e:	f7fd fc7b 	bl	8000708 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2037      	movs	r0, #55	; 0x37
 8002e16:	4611      	mov	r1, r2
 8002e18:	f7fd fc3e 	bl	8000698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e1c:	2037      	movs	r0, #55	; 0x37
 8002e1e:	f7fd fc73 	bl	8000708 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002e22:	2200      	movs	r2, #0
 8002e24:	2009      	movs	r0, #9
 8002e26:	4611      	mov	r1, r2
 8002e28:	f7fd fc36 	bl	8000698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn); //EXTI activated
 8002e2c:	2009      	movs	r0, #9
 8002e2e:	f7fd fc6b 	bl	8000708 <HAL_NVIC_EnableIRQ>
 8002e32:	e7fe      	b.n	8002e32 <main+0x46>

08002e34 <HAL_GPIO_EXTI_Callback>:
	}
} */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) //This func. activates when external interrupt occurs.
{
   if(GPIO_Pin == GPIO_PIN_3) //Port name is not important except number.
 8002e34:	2808      	cmp	r0, #8
 8002e36:	d103      	bne.n	8002e40 <HAL_GPIO_EXTI_Callback+0xc>
   {
	   HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	4802      	ldr	r0, [pc, #8]	; (8002e44 <HAL_GPIO_EXTI_Callback+0x10>)
 8002e3c:	f7fd bdbd 	b.w	80009ba <HAL_GPIO_TogglePin>
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	58020400 	.word	0x58020400

08002e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e48:	4770      	bx	lr
	...

08002e4c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4c:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <HAL_MspInit+0x20>)
{
 8002e4e:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e50:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002e54:	f042 0202 	orr.w	r2, r2, #2
 8002e58:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002e5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e68:	b002      	add	sp, #8
 8002e6a:	4770      	bx	lr
 8002e6c:	58024400 	.word	0x58024400

08002e70 <NMI_Handler>:
 8002e70:	4770      	bx	lr

08002e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e72:	e7fe      	b.n	8002e72 <HardFault_Handler>

08002e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e74:	e7fe      	b.n	8002e74 <MemManage_Handler>

08002e76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e76:	e7fe      	b.n	8002e76 <BusFault_Handler>

08002e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e78:	e7fe      	b.n	8002e78 <UsageFault_Handler>

08002e7a <SVC_Handler>:
 8002e7a:	4770      	bx	lr

08002e7c <DebugMon_Handler>:
 8002e7c:	4770      	bx	lr

08002e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e7e:	4770      	bx	lr

08002e80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e80:	f7fd bbe6 	b.w	8000650 <HAL_IncTick>

08002e84 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002e84:	2008      	movs	r0, #8
 8002e86:	f7fd bd9d 	b.w	80009c4 <HAL_GPIO_EXTI_IRQHandler>
	...

08002e8c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e8c:	4801      	ldr	r0, [pc, #4]	; (8002e94 <USART3_IRQHandler+0x8>)
 8002e8e:	f7ff b9ff 	b.w	8002290 <HAL_UART_IRQHandler>
 8002e92:	bf00      	nop
 8002e94:	20000070 	.word	0x20000070

08002e98 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e98:	4801      	ldr	r0, [pc, #4]	; (8002ea0 <TIM7_IRQHandler+0x8>)
 8002e9a:	f7ff b856 	b.w	8001f4a <HAL_TIM_IRQHandler>
 8002e9e:	bf00      	nop
 8002ea0:	20000030 	.word	0x20000030

08002ea4 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea4:	4914      	ldr	r1, [pc, #80]	; (8002ef8 <SystemInit+0x54>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002ea6:	4815      	ldr	r0, [pc, #84]	; (8002efc <SystemInit+0x58>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 8002eb0:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <SystemInit+0x5c>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	611a      	str	r2, [r3, #16]
  RCC->CR &= (uint32_t)0xEAF6ED7F;
 8002ec4:	681c      	ldr	r4, [r3, #0]
 8002ec6:	4020      	ands	r0, r4
 8002ec8:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002eca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ecc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002ece:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002ed8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002eda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ee0:	6818      	ldr	r0, [r3, #0]
 8002ee2:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8002ee6:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ee8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  *((__IO uint32_t*)0x51008108) = 0x00000001;
 8002eea:	2201      	movs	r2, #1
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <SystemInit+0x60>)
 8002eee:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal ITCMSRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8002ef0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ef4:	608b      	str	r3, [r1, #8]
 8002ef6:	bd10      	pop	{r4, pc}
 8002ef8:	e000ed00 	.word	0xe000ed00
 8002efc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f00:	58024400 	.word	0x58024400
 8002f04:	51008108 	.word	0x51008108

08002f08 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim7.Instance = TIM7;
 8002f0a:	480f      	ldr	r0, [pc, #60]	; (8002f48 <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 9999;
 8002f0c:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f10:	4a0e      	ldr	r2, [pc, #56]	; (8002f4c <MX_TIM7_Init+0x44>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f12:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 9999;
 8002f14:	e880 000c 	stmia.w	r0, {r2, r3}
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 9599;
 8002f18:	f242 537f 	movw	r3, #9599	; 0x257f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f1c:	9401      	str	r4, [sp, #4]
 8002f1e:	9402      	str	r4, [sp, #8]
 8002f20:	9403      	str	r4, [sp, #12]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f22:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 9599;
 8002f24:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f26:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f28:	f7ff f928 	bl	800217c <HAL_TIM_Base_Init>
 8002f2c:	b108      	cbz	r0, 8002f32 <MX_TIM7_Init+0x2a>
  {
    Error_Handler();
 8002f2e:	f7ff ff8b 	bl	8002e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f32:	a901      	add	r1, sp, #4
 8002f34:	4804      	ldr	r0, [pc, #16]	; (8002f48 <MX_TIM7_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f36:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f38:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f3a:	f7ff f939 	bl	80021b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3e:	b108      	cbz	r0, 8002f44 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002f40:	f7ff ff82 	bl	8002e48 <Error_Handler>
  }

}
 8002f44:	b004      	add	sp, #16
 8002f46:	bd10      	pop	{r4, pc}
 8002f48:	20000030 	.word	0x20000030
 8002f4c:	40001400 	.word	0x40001400

08002f50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM7)
 8002f50:	6802      	ldr	r2, [r0, #0]
{
 8002f52:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM7)
 8002f54:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_TIM_Base_MspInit+0x28>)
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10c      	bne.n	8002f74 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f5a:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <HAL_TIM_Base_MspInit+0x2c>)
 8002f5c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002f60:	f042 0220 	orr.w	r2, r2, #32
 8002f64:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002f74:	b002      	add	sp, #8
 8002f76:	4770      	bx	lr
 8002f78:	40001400 	.word	0x40001400
 8002f7c:	58024400 	.word	0x58024400

08002f80 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f80:	b508      	push	{r3, lr}

  huart3.Instance = USART3;
 8002f82:	480e      	ldr	r0, [pc, #56]	; (8002fbc <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 115200;
 8002f84:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <MX_USART3_UART_Init+0x40>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f8a:	220c      	movs	r2, #12
  huart3.Init.BaudRate = 115200;
 8002f8c:	e880 4008 	stmia.w	r0, {r3, lr}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f90:	2300      	movs	r3, #0
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f92:	6142      	str	r2, [r0, #20]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f94:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f96:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f98:	6103      	str	r3, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f9a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f9c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f9e:	6203      	str	r3, [r0, #32]
  huart3.Init.Prescaler = UART_PRESCALER_DIV1;
 8002fa0:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.Init.FIFOMode = UART_FIFOMODE_DISABLE;
 8002fa2:	6283      	str	r3, [r0, #40]	; 0x28
  huart3.Init.TXFIFOThreshold = UART_TXFIFO_THRESHOLD_1_8;
 8002fa4:	62c3      	str	r3, [r0, #44]	; 0x2c
  huart3.Init.RXFIFOThreshold = UART_RXFIFO_THRESHOLD_1_8;
 8002fa6:	6303      	str	r3, [r0, #48]	; 0x30
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fa8:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002faa:	f7ff fdb7 	bl	8002b1c <HAL_UART_Init>
 8002fae:	b118      	cbz	r0, 8002fb8 <MX_USART3_UART_Init+0x38>
  {
    Error_Handler();
  }

}
 8002fb0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002fb4:	f7ff bf48 	b.w	8002e48 <Error_Handler>
 8002fb8:	bd08      	pop	{r3, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000070 	.word	0x20000070
 8002fc0:	40004800 	.word	0x40004800

08002fc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc4:	b510      	push	{r4, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fca:	2214      	movs	r2, #20
 8002fcc:	2100      	movs	r1, #0
 8002fce:	a803      	add	r0, sp, #12
 8002fd0:	f000 f87e 	bl	80030d0 <memset>
  if(uartHandle->Instance==USART3)
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	4b14      	ldr	r3, [pc, #80]	; (8003028 <HAL_UART_MspInit+0x64>)
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d123      	bne.n	8003024 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <HAL_UART_MspInit+0x68>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fde:	a903      	add	r1, sp, #12
 8002fe0:	4813      	ldr	r0, [pc, #76]	; (8003030 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fe2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002fe6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fea:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002fee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002ff2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002ff6:	9201      	str	r2, [sp, #4]
 8002ff8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ffa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ffe:	f042 0208 	orr.w	r2, r2, #8
 8003002:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	9302      	str	r3, [sp, #8]
 8003010:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003016:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800301c:	2307      	movs	r3, #7
 800301e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003020:	f7fd fbdc 	bl	80007dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003024:	b008      	add	sp, #32
 8003026:	bd10      	pop	{r4, pc}
 8003028:	40004800 	.word	0x40004800
 800302c:	58024400 	.word	0x58024400
 8003030:	58020c00 	.word	0x58020c00

08003034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800306c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003038:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800303a:	e003      	b.n	8003044 <LoopCopyDataInit>

0800303c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800303e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003040:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003042:	3104      	adds	r1, #4

08003044 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003044:	480b      	ldr	r0, [pc, #44]	; (8003074 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003046:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003048:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800304a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800304c:	d3f6      	bcc.n	800303c <CopyDataInit>
  ldr  r2, =_sbss
 800304e:	4a0b      	ldr	r2, [pc, #44]	; (800307c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003050:	e002      	b.n	8003058 <LoopFillZerobss>

08003052 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003052:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003054:	f842 3b04 	str.w	r3, [r2], #4

08003058 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800305a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800305c:	d3f9      	bcc.n	8003052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800305e:	f7ff ff21 	bl	8002ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003062:	f000 f811 	bl	8003088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003066:	f7ff fec1 	bl	8002dec <main>
  bx  lr    
 800306a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800306c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003070:	08003168 	.word	0x08003168
  ldr  r0, =_sdata
 8003074:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003078:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800307c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003080:	200000f0 	.word	0x200000f0

08003084 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003084:	e7fe      	b.n	8003084 <ADC3_IRQHandler>
	...

08003088 <__libc_init_array>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4e0d      	ldr	r6, [pc, #52]	; (80030c0 <__libc_init_array+0x38>)
 800308c:	4c0d      	ldr	r4, [pc, #52]	; (80030c4 <__libc_init_array+0x3c>)
 800308e:	1ba4      	subs	r4, r4, r6
 8003090:	10a4      	asrs	r4, r4, #2
 8003092:	2500      	movs	r5, #0
 8003094:	42a5      	cmp	r5, r4
 8003096:	d109      	bne.n	80030ac <__libc_init_array+0x24>
 8003098:	4e0b      	ldr	r6, [pc, #44]	; (80030c8 <__libc_init_array+0x40>)
 800309a:	4c0c      	ldr	r4, [pc, #48]	; (80030cc <__libc_init_array+0x44>)
 800309c:	f000 f820 	bl	80030e0 <_init>
 80030a0:	1ba4      	subs	r4, r4, r6
 80030a2:	10a4      	asrs	r4, r4, #2
 80030a4:	2500      	movs	r5, #0
 80030a6:	42a5      	cmp	r5, r4
 80030a8:	d105      	bne.n	80030b6 <__libc_init_array+0x2e>
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030b0:	4798      	blx	r3
 80030b2:	3501      	adds	r5, #1
 80030b4:	e7ee      	b.n	8003094 <__libc_init_array+0xc>
 80030b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ba:	4798      	blx	r3
 80030bc:	3501      	adds	r5, #1
 80030be:	e7f2      	b.n	80030a6 <__libc_init_array+0x1e>
 80030c0:	08003160 	.word	0x08003160
 80030c4:	08003160 	.word	0x08003160
 80030c8:	08003160 	.word	0x08003160
 80030cc:	08003164 	.word	0x08003164

080030d0 <memset>:
 80030d0:	4402      	add	r2, r0
 80030d2:	4603      	mov	r3, r0
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d100      	bne.n	80030da <memset+0xa>
 80030d8:	4770      	bx	lr
 80030da:	f803 1b01 	strb.w	r1, [r3], #1
 80030de:	e7f9      	b.n	80030d4 <memset+0x4>

080030e0 <_init>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr

080030ec <_fini>:
 80030ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ee:	bf00      	nop
 80030f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030f2:	bc08      	pop	{r3}
 80030f4:	469e      	mov	lr, r3
 80030f6:	4770      	bx	lr

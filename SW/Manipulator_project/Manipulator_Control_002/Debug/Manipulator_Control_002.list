
Manipulator_Control_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009740  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f8  080099f8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080099f8  080099f8  000199f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a00  08009a00  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a00  08009a00  00019a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009a18  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009a78  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000678  240000d0  08009ad8  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000748  08009ad8  00020748  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029c05  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000040c2  00000000  00000000  00049d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000015d8  00000000  00000000  0004ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001440  00000000  00000000  0004f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b70  00000000  00000000  000507e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00015823  00000000  00000000  00089350  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001655a9  00000000  00000000  0009eb73  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0020411c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c5c  00000000  00000000  00204198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080099c0 	.word	0x080099c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080099c0 	.word	0x080099c0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_ETH_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_ETH_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ETH_Init+0x90>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x90>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x90>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	3302      	adds	r3, #2
 80005fa:	22e1      	movs	r2, #225	; 0xe1
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x90>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x90>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3304      	adds	r3, #4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x90>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	3305      	adds	r3, #5
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_ETH_Init+0x90>)
 800061e:	2201      	movs	r2, #1
 8000620:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x90>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_ETH_Init+0x98>)
 8000626:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_ETH_Init+0x90>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_ETH_Init+0x9c>)
 800062c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x90>)
 8000630:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x90>)
 8000638:	f001 fdde 	bl	80021f8 <HAL_ETH_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa8f 	bl	8000b64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ETH_Init+0xa0>)
 800064c:	f009 f9b0 	bl	80099b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0xa0>)
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_ETH_Init+0xa0>)
 8000658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_ETH_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	240000ec 	.word	0x240000ec
 800066c:	40028000 	.word	0x40028000
 8000670:	24000070 	.word	0x24000070
 8000674:	24000010 	.word	0x24000010
 8000678:	2400015c 	.word	0x2400015c

0800067c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <HAL_ETH_MspInit+0x184>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f040 80ab 	bne.w	80007f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a6:	4a57      	ldr	r2, [pc, #348]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006be:	4b51      	ldr	r3, [pc, #324]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <HAL_ETH_MspInit+0x18c>)
 800078e:	f002 f949 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000792:	2386      	movs	r3, #134	; 0x86
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a2:	230b      	movs	r3, #11
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <HAL_ETH_MspInit+0x190>)
 80007ae:	f002 f939 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <HAL_ETH_MspInit+0x194>)
 80007d0:	f002 f928 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_ETH_MspInit+0x198>)
 80007f2:	f002 f917 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40028000 	.word	0x40028000
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58021800 	.word	0x58021800

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x154>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <MX_GPIO_Init+0x154>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x154>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x154>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <MX_GPIO_Init+0x154>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x154>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x154>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x154>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x154>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x154>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x154>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x154>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ea:	f002 fa4b 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008f4:	f002 fa46 	bl	8002d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x160>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x164>)
 800090e:	f002 f889 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000912:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x158>)
 800092c:	f002 f87a 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000948:	f002 f86c 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000960:	f002 f860 	bl	8002a24 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58021800 	.word	0x58021800
 8000978:	11110000 	.word	0x11110000
 800097c:	58020800 	.word	0x58020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f001 f8c2 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f834 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff44 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 8000990:	f7ff fe22 	bl	80005d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000994:	f000 ff68 	bl	8001868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f001 f804 	bl	80019a4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800099c:	f000 fd60 	bl	8001460 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fdec 	bl	800157c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  servo_initialize(0); //
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f8e5 	bl	8000b74 <servo_initialize>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  servo_goto(0, 0, 70);
 80009aa:	2246      	movs	r2, #70	; 0x46
 80009ac:	2100      	movs	r1, #0
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fc52 	bl	8001258 <servo_goto>
	 // servo_goto(1, 0, 30);
	  while(1)
	  {
		  if (!servo_is_running(0))
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 fc67 	bl	8001288 <servo_is_running>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d000      	beq.n	80009c2 <main+0x42>
 80009c0:	e7f8      	b.n	80009b4 <main+0x34>
		  {
			  break;
 80009c2:	bf00      	nop
		  }
	  }
	  HAL_Delay(3000);
 80009c4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009c8:	f001 f92e 	bl	8001c28 <HAL_Delay>
	  servo_goto(0, 1800, 30);
 80009cc:	221e      	movs	r2, #30
 80009ce:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 fc40 	bl	8001258 <servo_goto>
	  //servo_goto(1, 1800, 70);
	  while(1)
	  {
		  if (!servo_is_running(0))
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 fc55 	bl	8001288 <servo_is_running>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d000      	beq.n	80009e6 <main+0x66>
 80009e4:	e7f8      	b.n	80009d8 <main+0x58>
		  {
			  break;
 80009e6:	bf00      	nop
		  }
	  }
	  HAL_Delay(3000);
 80009e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009ec:	f001 f91c 	bl	8001c28 <HAL_Delay>
	  servo_goto(0, 0, 70);
 80009f0:	e7db      	b.n	80009aa <main+0x2a>
	...

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0cc      	sub	sp, #304	; 0x130
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009fe:	224c      	movs	r2, #76	; 0x4c
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f008 ffd4 	bl	80099b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f008 ffcd 	bl	80099b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	23bc      	movs	r3, #188	; 0xbc
 8000a1e:	461a      	mov	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f008 ffc5 	bl	80099b0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a26:	2002      	movs	r0, #2
 8000a28:	f002 fb0e 	bl	8003048 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	4b49      	ldr	r3, [pc, #292]	; (8000b58 <SystemClock_Config+0x164>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a36:	4a48      	ldr	r2, [pc, #288]	; (8000b58 <SystemClock_Config+0x164>)
 8000a38:	f023 0301 	bic.w	r3, r3, #1
 8000a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a3e:	4b46      	ldr	r3, [pc, #280]	; (8000b58 <SystemClock_Config+0x164>)
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	f003 0201 	and.w	r2, r3, #1
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <SystemClock_Config+0x168>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a43      	ldr	r2, [pc, #268]	; (8000b5c <SystemClock_Config+0x168>)
 8000a50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <SystemClock_Config+0x168>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a66:	bf00      	nop
 8000a68:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <SystemClock_Config+0x168>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a74:	d1f8      	bne.n	8000a68 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a96:	2318      	movs	r3, #24
 8000a98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa2:	2304      	movs	r3, #4
 8000aa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000aae:	230c      	movs	r3, #12
 8000ab0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 fb07 	bl	80030d8 <HAL_RCC_OscConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ad0:	f000 f848 	bl	8000b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad4:	233f      	movs	r3, #63	; 0x3f
 8000ad6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2303      	movs	r3, #3
 8000adc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f002 fe9c 	bl	8003848 <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000b16:	f000 f825 	bl	8000b64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <SystemClock_Config+0x16c>)
 8000b20:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2200      	movs	r2, #0
 8000b28:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f003 f9e2 	bl	8003f04 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8000b46:	f000 f80d 	bl	8000b64 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b4a:	f002 fab5 	bl	80030b8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b4e:	bf00      	nop
 8000b50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	58000400 	.word	0x58000400
 8000b5c:	58024800 	.word	0x58024800
 8000b60:	00040002 	.word	0x00040002

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <servo_initialize>:

Servo servo[3];


void servo_initialize(int _servo_num)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	if (!servo[0].enable && !servo[1].enable && !servo[2].enable)
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <servo_initialize+0x74>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d10f      	bne.n	8000ba4 <servo_initialize+0x30>
 8000b84:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <servo_initialize+0x74>)
 8000b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d10b      	bne.n	8000ba4 <servo_initialize+0x30>
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <servo_initialize+0x74>)
 8000b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d106      	bne.n	8000ba4 <servo_initialize+0x30>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8000b96:	4815      	ldr	r0, [pc, #84]	; (8000bec <servo_initialize+0x78>)
 8000b98:	f004 fcfe 	bl	8005598 <HAL_TIM_Base_Start_IT>
		tim_reg = htim3.Instance;
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <servo_initialize+0x78>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <servo_initialize+0x7c>)
 8000ba2:	6013      	str	r3, [r2, #0]
	}

	switch (_servo_num)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d008      	beq.n	8000bbc <servo_initialize+0x48>
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d00b      	beq.n	8000bc6 <servo_initialize+0x52>
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10e      	bne.n	8000bd0 <servo_initialize+0x5c>
	{
	case 0:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	480d      	ldr	r0, [pc, #52]	; (8000bec <servo_initialize+0x78>)
 8000bb6:	f004 fd4f 	bl	8005658 <HAL_TIM_PWM_Start_IT>
		break;
 8000bba:	e009      	b.n	8000bd0 <servo_initialize+0x5c>
	case 1:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000bbc:	2104      	movs	r1, #4
 8000bbe:	480b      	ldr	r0, [pc, #44]	; (8000bec <servo_initialize+0x78>)
 8000bc0:	f004 fd4a 	bl	8005658 <HAL_TIM_PWM_Start_IT>
		break;
 8000bc4:	e004      	b.n	8000bd0 <servo_initialize+0x5c>
	case 2:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000bc6:	2108      	movs	r1, #8
 8000bc8:	4808      	ldr	r0, [pc, #32]	; (8000bec <servo_initialize+0x78>)
 8000bca:	f004 fd45 	bl	8005658 <HAL_TIM_PWM_Start_IT>
		break;
 8000bce:	bf00      	nop
	}

	servo[_servo_num].cur_angle = 0;
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <servo_initialize+0x74>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2134      	movs	r1, #52	; 0x34
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	24000194 	.word	0x24000194
 8000bec:	24000270 	.word	0x24000270
 8000bf0:	24000190 	.word	0x24000190

08000bf4 <servo_run>:

void servo_run(int _servo_num)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	if (servo[_servo_num].delta != 0)
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <servo_run+0x50>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2134      	movs	r1, #52	; 0x34
 8000c02:	fb01 f303 	mul.w	r3, r1, r3
 8000c06:	4413      	add	r3, r2
 8000c08:	3324      	adds	r3, #36	; 0x24
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d009      	beq.n	8000c24 <servo_run+0x30>
	{
		servo[_servo_num].run = 1;
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <servo_run+0x50>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2134      	movs	r1, #52	; 0x34
 8000c16:	fb01 f303 	mul.w	r3, r1, r3
 8000c1a:	4413      	add	r3, r2
 8000c1c:	332c      	adds	r3, #44	; 0x2c
 8000c1e:	2201      	movs	r2, #1
 8000c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		servo[_servo_num].run = 0;
	}
}
 8000c22:	e008      	b.n	8000c36 <servo_run+0x42>
		servo[_servo_num].run = 0;
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <servo_run+0x50>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2134      	movs	r1, #52	; 0x34
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	332c      	adds	r3, #44	; 0x2c
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	24000194 	.word	0x24000194

08000c48 <servo_update>:
	servo[_servo_num].delta = 0;
	servo[_servo_num].run = 0;
}

void servo_update()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
	int pulse = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]

	for (i = 0; i < 3; i++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	e0d2      	b.n	8000e02 <servo_update+0x1ba>
	{
		if (servo[i].run == 1 && servo[i].delta != 0)
 8000c5c:	4a6d      	ldr	r2, [pc, #436]	; (8000e14 <servo_update+0x1cc>)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2134      	movs	r1, #52	; 0x34
 8000c62:	fb01 f303 	mul.w	r3, r1, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	332c      	adds	r3, #44	; 0x2c
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	f040 80b3 	bne.w	8000dd8 <servo_update+0x190>
 8000c72:	4a68      	ldr	r2, [pc, #416]	; (8000e14 <servo_update+0x1cc>)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2134      	movs	r1, #52	; 0x34
 8000c78:	fb01 f303 	mul.w	r3, r1, r3
 8000c7c:	4413      	add	r3, r2
 8000c7e:	3324      	adds	r3, #36	; 0x24
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f000 80a8 	beq.w	8000dd8 <servo_update+0x190>
		{
			servo_speed_update(i);
 8000c88:	6838      	ldr	r0, [r7, #0]
 8000c8a:	f000 f8c7 	bl	8000e1c <servo_speed_update>

			if (servo[i].delta > servo[i].cur_speed)
 8000c8e:	4a61      	ldr	r2, [pc, #388]	; (8000e14 <servo_update+0x1cc>)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2134      	movs	r1, #52	; 0x34
 8000c94:	fb01 f303 	mul.w	r3, r1, r3
 8000c98:	4413      	add	r3, r2
 8000c9a:	3324      	adds	r3, #36	; 0x24
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	495d      	ldr	r1, [pc, #372]	; (8000e14 <servo_update+0x1cc>)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2034      	movs	r0, #52	; 0x34
 8000ca4:	fb00 f303 	mul.w	r3, r0, r3
 8000ca8:	440b      	add	r3, r1
 8000caa:	3308      	adds	r3, #8
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dd13      	ble.n	8000cda <servo_update+0x92>
			{
				pulse = servo[i].cur_speed * servo[i].direction;
 8000cb2:	4a58      	ldr	r2, [pc, #352]	; (8000e14 <servo_update+0x1cc>)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2134      	movs	r1, #52	; 0x34
 8000cb8:	fb01 f303 	mul.w	r3, r1, r3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3308      	adds	r3, #8
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4954      	ldr	r1, [pc, #336]	; (8000e14 <servo_update+0x1cc>)
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	2034      	movs	r0, #52	; 0x34
 8000cc8:	fb00 f202 	mul.w	r2, r0, r2
 8000ccc:	440a      	add	r2, r1
 8000cce:	3228      	adds	r2, #40	; 0x28
 8000cd0:	6812      	ldr	r2, [r2, #0]
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	e012      	b.n	8000d00 <servo_update+0xb8>
			}
			else
			{
				pulse = servo[i].delta * servo[i].direction;
 8000cda:	4a4e      	ldr	r2, [pc, #312]	; (8000e14 <servo_update+0x1cc>)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	2134      	movs	r1, #52	; 0x34
 8000ce0:	fb01 f303 	mul.w	r3, r1, r3
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3324      	adds	r3, #36	; 0x24
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	494a      	ldr	r1, [pc, #296]	; (8000e14 <servo_update+0x1cc>)
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	2034      	movs	r0, #52	; 0x34
 8000cf0:	fb00 f202 	mul.w	r2, r0, r2
 8000cf4:	440a      	add	r2, r1
 8000cf6:	3228      	adds	r2, #40	; 0x28
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	fb02 f303 	mul.w	r3, r2, r3
 8000cfe:	607b      	str	r3, [r7, #4]
			}

			servo[i].cur_angle += pulse;
 8000d00:	4a44      	ldr	r2, [pc, #272]	; (8000e14 <servo_update+0x1cc>)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2134      	movs	r1, #52	; 0x34
 8000d06:	fb01 f303 	mul.w	r3, r1, r3
 8000d0a:	4413      	add	r3, r2
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	441a      	add	r2, r3
 8000d12:	4940      	ldr	r1, [pc, #256]	; (8000e14 <servo_update+0x1cc>)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2034      	movs	r0, #52	; 0x34
 8000d18:	fb00 f303 	mul.w	r3, r0, r3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	601a      	str	r2, [r3, #0]

			switch(i)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d010      	beq.n	8000d48 <servo_update+0x100>
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d01b      	beq.n	8000d62 <servo_update+0x11a>
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d126      	bne.n	8000d7c <servo_update+0x134>
			{
			case 0:
				tim_reg->CCR1 = PULSE_L + servo[i].cur_angle;
 8000d2e:	4a39      	ldr	r2, [pc, #228]	; (8000e14 <servo_update+0x1cc>)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2134      	movs	r1, #52	; 0x34
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d40:	4b35      	ldr	r3, [pc, #212]	; (8000e18 <servo_update+0x1d0>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000d46:	e019      	b.n	8000d7c <servo_update+0x134>
			case 1:
				tim_reg->CCR2 = PULSE_L + servo[i].cur_angle;
 8000d48:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <servo_update+0x1cc>)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2134      	movs	r1, #52	; 0x34
 8000d4e:	fb01 f303 	mul.w	r3, r1, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <servo_update+0x1d0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000d60:	e00c      	b.n	8000d7c <servo_update+0x134>
			case 2:
				tim_reg->CCR3 = PULSE_L + servo[i].cur_angle;
 8000d62:	4a2c      	ldr	r2, [pc, #176]	; (8000e14 <servo_update+0x1cc>)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2134      	movs	r1, #52	; 0x34
 8000d68:	fb01 f303 	mul.w	r3, r1, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <servo_update+0x1d0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000d7a:	bf00      	nop
			}

			servo[i].delta -= pulse * servo[i].direction;
 8000d7c:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <servo_update+0x1cc>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2134      	movs	r1, #52	; 0x34
 8000d82:	fb01 f303 	mul.w	r3, r1, r3
 8000d86:	4413      	add	r3, r2
 8000d88:	3324      	adds	r3, #36	; 0x24
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4921      	ldr	r1, [pc, #132]	; (8000e14 <servo_update+0x1cc>)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	2034      	movs	r0, #52	; 0x34
 8000d92:	fb00 f303 	mul.w	r3, r0, r3
 8000d96:	440b      	add	r3, r1
 8000d98:	3328      	adds	r3, #40	; 0x28
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6879      	ldr	r1, [r7, #4]
 8000d9e:	fb01 f303 	mul.w	r3, r1, r3
 8000da2:	1ad2      	subs	r2, r2, r3
 8000da4:	491b      	ldr	r1, [pc, #108]	; (8000e14 <servo_update+0x1cc>)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2034      	movs	r0, #52	; 0x34
 8000daa:	fb00 f303 	mul.w	r3, r0, r3
 8000dae:	440b      	add	r3, r1
 8000db0:	3324      	adds	r3, #36	; 0x24
 8000db2:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps += 1;
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <servo_update+0x1cc>)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2134      	movs	r1, #52	; 0x34
 8000dba:	fb01 f303 	mul.w	r3, r1, r3
 8000dbe:	4413      	add	r3, r2
 8000dc0:	331c      	adds	r3, #28
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	1c5a      	adds	r2, r3, #1
 8000dc6:	4913      	ldr	r1, [pc, #76]	; (8000e14 <servo_update+0x1cc>)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	2034      	movs	r0, #52	; 0x34
 8000dcc:	fb00 f303 	mul.w	r3, r0, r3
 8000dd0:	440b      	add	r3, r1
 8000dd2:	331c      	adds	r3, #28
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e011      	b.n	8000dfc <servo_update+0x1b4>
		}
		else
		{
			servo[i].run = 0;
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <servo_update+0x1cc>)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2134      	movs	r1, #52	; 0x34
 8000dde:	fb01 f303 	mul.w	r3, r1, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	332c      	adds	r3, #44	; 0x2c
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps = 0;
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <servo_update+0x1cc>)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2134      	movs	r1, #52	; 0x34
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	331c      	adds	r3, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	f77f af29 	ble.w	8000c5c <servo_update+0x14>
		}
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	24000194 	.word	0x24000194
 8000e18:	24000190 	.word	0x24000190

08000e1c <servo_speed_update>:

void servo_speed_update(int _servo_num)
{
 8000e1c:	b490      	push	{r4, r7}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	int i = _servo_num;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	60fb      	str	r3, [r7, #12]

	if ((servo[i].cur_steps > servo[i].acc_steps - 1) && (servo[i].cur_steps <= servo[i].acc_steps + servo[i].fixed_speed_steps - 1))
 8000e28:	4a6c      	ldr	r2, [pc, #432]	; (8000fdc <servo_speed_update+0x1c0>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2134      	movs	r1, #52	; 0x34
 8000e2e:	fb01 f303 	mul.w	r3, r1, r3
 8000e32:	4413      	add	r3, r2
 8000e34:	331c      	adds	r3, #28
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4968      	ldr	r1, [pc, #416]	; (8000fdc <servo_speed_update+0x1c0>)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2034      	movs	r0, #52	; 0x34
 8000e3e:	fb00 f303 	mul.w	r3, r0, r3
 8000e42:	440b      	add	r3, r1
 8000e44:	3314      	adds	r3, #20
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	dd2c      	ble.n	8000ea8 <servo_speed_update+0x8c>
 8000e4e:	4a63      	ldr	r2, [pc, #396]	; (8000fdc <servo_speed_update+0x1c0>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2134      	movs	r1, #52	; 0x34
 8000e54:	fb01 f303 	mul.w	r3, r1, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	331c      	adds	r3, #28
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	495f      	ldr	r1, [pc, #380]	; (8000fdc <servo_speed_update+0x1c0>)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2034      	movs	r0, #52	; 0x34
 8000e64:	fb00 f303 	mul.w	r3, r0, r3
 8000e68:	440b      	add	r3, r1
 8000e6a:	3314      	adds	r3, #20
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	485b      	ldr	r0, [pc, #364]	; (8000fdc <servo_speed_update+0x1c0>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	2434      	movs	r4, #52	; 0x34
 8000e74:	fb04 f303 	mul.w	r3, r4, r3
 8000e78:	4403      	add	r3, r0
 8000e7a:	3318      	adds	r3, #24
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	440b      	add	r3, r1
 8000e80:	3b01      	subs	r3, #1
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dc10      	bgt.n	8000ea8 <servo_speed_update+0x8c>
	{
		servo[i].cur_speed = servo[i].dst_speed;
 8000e86:	4a55      	ldr	r2, [pc, #340]	; (8000fdc <servo_speed_update+0x1c0>)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2134      	movs	r1, #52	; 0x34
 8000e8c:	fb01 f303 	mul.w	r3, r1, r3
 8000e90:	4413      	add	r3, r2
 8000e92:	330c      	adds	r3, #12
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4951      	ldr	r1, [pc, #324]	; (8000fdc <servo_speed_update+0x1c0>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2034      	movs	r0, #52	; 0x34
 8000e9c:	fb00 f303 	mul.w	r3, r0, r3
 8000ea0:	440b      	add	r3, r1
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	e093      	b.n	8000fd0 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > 0) && (servo[i].cur_steps <= servo[i].acc_steps - 1))
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <servo_speed_update+0x1c0>)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2134      	movs	r1, #52	; 0x34
 8000eae:	fb01 f303 	mul.w	r3, r1, r3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	331c      	adds	r3, #28
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	dd2c      	ble.n	8000f16 <servo_speed_update+0xfa>
 8000ebc:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <servo_speed_update+0x1c0>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2134      	movs	r1, #52	; 0x34
 8000ec2:	fb01 f303 	mul.w	r3, r1, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	331c      	adds	r3, #28
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4943      	ldr	r1, [pc, #268]	; (8000fdc <servo_speed_update+0x1c0>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2034      	movs	r0, #52	; 0x34
 8000ed2:	fb00 f303 	mul.w	r3, r0, r3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3314      	adds	r3, #20
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dc19      	bgt.n	8000f16 <servo_speed_update+0xfa>
	{
		servo[i].cur_speed += servo[i].acc;
 8000ee2:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <servo_speed_update+0x1c0>)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2134      	movs	r1, #52	; 0x34
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	3308      	adds	r3, #8
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	493a      	ldr	r1, [pc, #232]	; (8000fdc <servo_speed_update+0x1c0>)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2034      	movs	r0, #52	; 0x34
 8000ef8:	fb00 f303 	mul.w	r3, r0, r3
 8000efc:	440b      	add	r3, r1
 8000efe:	3320      	adds	r3, #32
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	441a      	add	r2, r3
 8000f04:	4935      	ldr	r1, [pc, #212]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2034      	movs	r0, #52	; 0x34
 8000f0a:	fb00 f303 	mul.w	r3, r0, r3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3308      	adds	r3, #8
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e05c      	b.n	8000fd0 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > servo[i].acc_steps + servo[i].fixed_speed_steps - 1) && (servo[i].cur_steps <= servo[i].total_steps - 1))
 8000f16:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2134      	movs	r1, #52	; 0x34
 8000f1c:	fb01 f303 	mul.w	r3, r1, r3
 8000f20:	4413      	add	r3, r2
 8000f22:	331c      	adds	r3, #28
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	492d      	ldr	r1, [pc, #180]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2034      	movs	r0, #52	; 0x34
 8000f2c:	fb00 f303 	mul.w	r3, r0, r3
 8000f30:	440b      	add	r3, r1
 8000f32:	3314      	adds	r3, #20
 8000f34:	6819      	ldr	r1, [r3, #0]
 8000f36:	4829      	ldr	r0, [pc, #164]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2434      	movs	r4, #52	; 0x34
 8000f3c:	fb04 f303 	mul.w	r3, r4, r3
 8000f40:	4403      	add	r3, r0
 8000f42:	3318      	adds	r3, #24
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	440b      	add	r3, r1
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	dd2c      	ble.n	8000fa8 <servo_speed_update+0x18c>
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2134      	movs	r1, #52	; 0x34
 8000f54:	fb01 f303 	mul.w	r3, r1, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	331c      	adds	r3, #28
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	491f      	ldr	r1, [pc, #124]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2034      	movs	r0, #52	; 0x34
 8000f64:	fb00 f303 	mul.w	r3, r0, r3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3310      	adds	r3, #16
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dc19      	bgt.n	8000fa8 <servo_speed_update+0x18c>
	{
		servo[i].cur_speed -= servo[i].acc;
 8000f74:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2134      	movs	r1, #52	; 0x34
 8000f7a:	fb01 f303 	mul.w	r3, r1, r3
 8000f7e:	4413      	add	r3, r2
 8000f80:	3308      	adds	r3, #8
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4915      	ldr	r1, [pc, #84]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	2034      	movs	r0, #52	; 0x34
 8000f8a:	fb00 f303 	mul.w	r3, r0, r3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3320      	adds	r3, #32
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	1ad2      	subs	r2, r2, r3
 8000f96:	4911      	ldr	r1, [pc, #68]	; (8000fdc <servo_speed_update+0x1c0>)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2034      	movs	r0, #52	; 0x34
 8000f9c:	fb00 f303 	mul.w	r3, r0, r3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e013      	b.n	8000fd0 <servo_speed_update+0x1b4>
	}
	else if (servo[i].cur_steps == 0)
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <servo_speed_update+0x1c0>)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2134      	movs	r1, #52	; 0x34
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	331c      	adds	r3, #28
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d109      	bne.n	8000fd0 <servo_speed_update+0x1b4>
	{
		servo[i].cur_speed = BASE_SPEED;
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <servo_speed_update+0x1c0>)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2134      	movs	r1, #52	; 0x34
 8000fc2:	fb01 f303 	mul.w	r3, r1, r3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	3308      	adds	r3, #8
 8000fca:	2205      	movs	r2, #5
 8000fcc:	601a      	str	r2, [r3, #0]
	}
}
 8000fce:	e7ff      	b.n	8000fd0 <servo_speed_update+0x1b4>
 8000fd0:	bf00      	nop
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc90      	pop	{r4, r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	24000194 	.word	0x24000194

08000fe0 <servo_set_angle>:

void servo_set_angle(int _servo_num, int _angle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

	if (_angle > 1800)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000ff4:	dd03      	ble.n	8000ffe <servo_set_angle+0x1e>
	{
		_angle = 1800;
 8000ff6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000ffa:	603b      	str	r3, [r7, #0]
 8000ffc:	e004      	b.n	8001008 <servo_set_angle+0x28>
	}
	else if (_angle < 0)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	da01      	bge.n	8001008 <servo_set_angle+0x28>
	{
		_angle = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	603b      	str	r3, [r7, #0]
	}

	servo[i].dst_angle = _angle;
 8001008:	4a6e      	ldr	r2, [pc, #440]	; (80011c4 <servo_set_angle+0x1e4>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2134      	movs	r1, #52	; 0x34
 800100e:	fb01 f303 	mul.w	r3, r1, r3
 8001012:	4413      	add	r3, r2
 8001014:	3304      	adds	r3, #4
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	601a      	str	r2, [r3, #0]
	servo[i].delta = servo[i].dst_angle - servo[i].cur_angle;
 800101a:	4a6a      	ldr	r2, [pc, #424]	; (80011c4 <servo_set_angle+0x1e4>)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2134      	movs	r1, #52	; 0x34
 8001020:	fb01 f303 	mul.w	r3, r1, r3
 8001024:	4413      	add	r3, r2
 8001026:	3304      	adds	r3, #4
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4966      	ldr	r1, [pc, #408]	; (80011c4 <servo_set_angle+0x1e4>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2034      	movs	r0, #52	; 0x34
 8001030:	fb00 f303 	mul.w	r3, r0, r3
 8001034:	440b      	add	r3, r1
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1ad2      	subs	r2, r2, r3
 800103a:	4962      	ldr	r1, [pc, #392]	; (80011c4 <servo_set_angle+0x1e4>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2034      	movs	r0, #52	; 0x34
 8001040:	fb00 f303 	mul.w	r3, r0, r3
 8001044:	440b      	add	r3, r1
 8001046:	3324      	adds	r3, #36	; 0x24
 8001048:	601a      	str	r2, [r3, #0]

	if (servo[i].delta < 0)
 800104a:	4a5e      	ldr	r2, [pc, #376]	; (80011c4 <servo_set_angle+0x1e4>)
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2134      	movs	r1, #52	; 0x34
 8001050:	fb01 f303 	mul.w	r3, r1, r3
 8001054:	4413      	add	r3, r2
 8001056:	3324      	adds	r3, #36	; 0x24
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da16      	bge.n	800108c <servo_set_angle+0xac>
	{
		servo_set_direction(i, CW);
 800105e:	f04f 31ff 	mov.w	r1, #4294967295
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f000 f8e2 	bl	800122c <servo_set_direction>
		servo[i].delta *= -1;
 8001068:	4a56      	ldr	r2, [pc, #344]	; (80011c4 <servo_set_angle+0x1e4>)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2134      	movs	r1, #52	; 0x34
 800106e:	fb01 f303 	mul.w	r3, r1, r3
 8001072:	4413      	add	r3, r2
 8001074:	3324      	adds	r3, #36	; 0x24
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	425a      	negs	r2, r3
 800107a:	4952      	ldr	r1, [pc, #328]	; (80011c4 <servo_set_angle+0x1e4>)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2034      	movs	r0, #52	; 0x34
 8001080:	fb00 f303 	mul.w	r3, r0, r3
 8001084:	440b      	add	r3, r1
 8001086:	3324      	adds	r3, #36	; 0x24
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e00d      	b.n	80010a8 <servo_set_angle+0xc8>
	}
	else if(servo[i].delta > 0)
 800108c:	4a4d      	ldr	r2, [pc, #308]	; (80011c4 <servo_set_angle+0x1e4>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2134      	movs	r1, #52	; 0x34
 8001092:	fb01 f303 	mul.w	r3, r1, r3
 8001096:	4413      	add	r3, r2
 8001098:	3324      	adds	r3, #36	; 0x24
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	dd03      	ble.n	80010a8 <servo_set_angle+0xc8>
	{
		servo_set_direction(i, CCW);
 80010a0:	2101      	movs	r1, #1
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 f8c2 	bl	800122c <servo_set_direction>
	}

	servo[i].total_steps = servo[i].delta / (servo[i].dst_speed - ACC_RATIO * (servo[i].dst_speed - BASE_SPEED));
 80010a8:	4a46      	ldr	r2, [pc, #280]	; (80011c4 <servo_set_angle+0x1e4>)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2134      	movs	r1, #52	; 0x34
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	3324      	adds	r3, #36	; 0x24
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	ee07 3a90 	vmov	s15, r3
 80010bc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80010c0:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <servo_set_angle+0x1e4>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2134      	movs	r1, #52	; 0x34
 80010c6:	fb01 f303 	mul.w	r3, r1, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	330c      	adds	r3, #12
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010d8:	4a3a      	ldr	r2, [pc, #232]	; (80011c4 <servo_set_angle+0x1e4>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2134      	movs	r1, #52	; 0x34
 80010de:	fb01 f303 	mul.w	r3, r1, r3
 80010e2:	4413      	add	r3, r2
 80010e4:	330c      	adds	r3, #12
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b05      	subs	r3, #5
 80010ea:	ee07 3a90 	vmov	s15, r3
 80010ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010f2:	eeb4 4b00 	vmov.f64	d4, #64	; 0x3e000000  0.125
 80010f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80010fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 80010fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001102:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001106:	ee17 0a90 	vmov	r0, s15
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <servo_set_angle+0x1e4>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2134      	movs	r1, #52	; 0x34
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	4413      	add	r3, r2
 8001116:	3310      	adds	r3, #16
 8001118:	6018      	str	r0, [r3, #0]
	servo[i].acc_steps = ACC_RATIO * servo[i].total_steps;
 800111a:	4a2a      	ldr	r2, [pc, #168]	; (80011c4 <servo_set_angle+0x1e4>)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2134      	movs	r1, #52	; 0x34
 8001120:	fb01 f303 	mul.w	r3, r1, r3
 8001124:	4413      	add	r3, r2
 8001126:	3310      	adds	r3, #16
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001132:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 8001136:	ee27 7b06 	vmul.f64	d7, d7, d6
 800113a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800113e:	ee17 0a90 	vmov	r0, s15
 8001142:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <servo_set_angle+0x1e4>)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2134      	movs	r1, #52	; 0x34
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4413      	add	r3, r2
 800114e:	3314      	adds	r3, #20
 8001150:	6018      	str	r0, [r3, #0]
	servo[i].fixed_speed_steps = servo[i].total_steps - 2 * servo[i].acc_steps;
 8001152:	4a1c      	ldr	r2, [pc, #112]	; (80011c4 <servo_set_angle+0x1e4>)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2134      	movs	r1, #52	; 0x34
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	4413      	add	r3, r2
 800115e:	3310      	adds	r3, #16
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4918      	ldr	r1, [pc, #96]	; (80011c4 <servo_set_angle+0x1e4>)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2034      	movs	r0, #52	; 0x34
 8001168:	fb00 f303 	mul.w	r3, r0, r3
 800116c:	440b      	add	r3, r1
 800116e:	3314      	adds	r3, #20
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	4913      	ldr	r1, [pc, #76]	; (80011c4 <servo_set_angle+0x1e4>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2034      	movs	r0, #52	; 0x34
 800117c:	fb00 f303 	mul.w	r3, r0, r3
 8001180:	440b      	add	r3, r1
 8001182:	3318      	adds	r3, #24
 8001184:	601a      	str	r2, [r3, #0]
	servo[i].acc = (servo[i].dst_speed - BASE_SPEED) / servo[i].acc_steps;
 8001186:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <servo_set_angle+0x1e4>)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2134      	movs	r1, #52	; 0x34
 800118c:	fb01 f303 	mul.w	r3, r1, r3
 8001190:	4413      	add	r3, r2
 8001192:	330c      	adds	r3, #12
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	1f5a      	subs	r2, r3, #5
 8001198:	490a      	ldr	r1, [pc, #40]	; (80011c4 <servo_set_angle+0x1e4>)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2034      	movs	r0, #52	; 0x34
 800119e:	fb00 f303 	mul.w	r3, r0, r3
 80011a2:	440b      	add	r3, r1
 80011a4:	3314      	adds	r3, #20
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80011ac:	4905      	ldr	r1, [pc, #20]	; (80011c4 <servo_set_angle+0x1e4>)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2034      	movs	r0, #52	; 0x34
 80011b2:	fb00 f303 	mul.w	r3, r0, r3
 80011b6:	440b      	add	r3, r1
 80011b8:	3320      	adds	r3, #32
 80011ba:	601a      	str	r2, [r3, #0]
}
 80011bc:	bf00      	nop
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	24000194 	.word	0x24000194

080011c8 <servo_set_speed>:

void servo_set_speed(int _servo_num, int _speed)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60fb      	str	r3, [r7, #12]

	if (_speed > MAX_SPEED)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b32      	cmp	r3, #50	; 0x32
 80011da:	dd09      	ble.n	80011f0 <servo_set_speed+0x28>
	{
		servo[i].dst_speed = MAX_SPEED;
 80011dc:	4a12      	ldr	r2, [pc, #72]	; (8001228 <servo_set_speed+0x60>)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2134      	movs	r1, #52	; 0x34
 80011e2:	fb01 f303 	mul.w	r3, r1, r3
 80011e6:	4413      	add	r3, r2
 80011e8:	330c      	adds	r3, #12
 80011ea:	2232      	movs	r2, #50	; 0x32
 80011ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		servo[i].dst_speed = _speed;
	}
}
 80011ee:	e015      	b.n	800121c <servo_set_speed+0x54>
	else if (_speed < MIN_SPEED)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b09      	cmp	r3, #9
 80011f4:	dc09      	bgt.n	800120a <servo_set_speed+0x42>
		servo[i].dst_speed = MIN_SPEED;
 80011f6:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <servo_set_speed+0x60>)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2134      	movs	r1, #52	; 0x34
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	330c      	adds	r3, #12
 8001204:	220a      	movs	r2, #10
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	e008      	b.n	800121c <servo_set_speed+0x54>
		servo[i].dst_speed = _speed;
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <servo_set_speed+0x60>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2134      	movs	r1, #52	; 0x34
 8001210:	fb01 f303 	mul.w	r3, r1, r3
 8001214:	4413      	add	r3, r2
 8001216:	330c      	adds	r3, #12
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	24000194 	.word	0x24000194

0800122c <servo_set_direction>:

void servo_set_direction(int _servo_num, int _direction)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	servo[_servo_num].direction = _direction;
 8001236:	4a07      	ldr	r2, [pc, #28]	; (8001254 <servo_set_direction+0x28>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2134      	movs	r1, #52	; 0x34
 800123c:	fb01 f303 	mul.w	r3, r1, r3
 8001240:	4413      	add	r3, r2
 8001242:	3328      	adds	r3, #40	; 0x28
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	24000194 	.word	0x24000194

08001258 <servo_goto>:

void servo_goto(int _servo_num, int _val, int _speed)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
	if (_speed != 0)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <servo_goto+0x1a>
	{
		servo_set_speed(_servo_num, _speed);
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff ffab 	bl	80011c8 <servo_set_speed>
	}

	servo_set_angle(_servo_num, _val);
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	68f8      	ldr	r0, [r7, #12]
 8001276:	f7ff feb3 	bl	8000fe0 <servo_set_angle>
	servo_run(_servo_num);
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f7ff fcba 	bl	8000bf4 <servo_run>
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <servo_is_running>:
	servo_set_angle(_servo_num, servo[_servo_num].cur_angle + _val * _direction);
	servo_run(_servo_num);
}

int servo_is_running(int _servo_num)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	return servo[_servo_num].run;
 8001290:	4a06      	ldr	r2, [pc, #24]	; (80012ac <servo_is_running+0x24>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2134      	movs	r1, #52	; 0x34
 8001296:	fb01 f303 	mul.w	r3, r1, r3
 800129a:	4413      	add	r3, r2
 800129c:	332c      	adds	r3, #44	; 0x2c
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	24000194 	.word	0x24000194

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_MspInit+0x30>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012bc:	4a08      	ldr	r2, [pc, #32]	; (80012e0 <HAL_MspInit+0x30>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_MspInit+0x30>)
 80012c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	58024400 	.word	0x58024400

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
 // while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  //while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    /* USER CODE END W1_MemoryManagement_IRQn 0 */
  }
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
 // while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    /* USER CODE END W1_BusFault_IRQn 0 */
  }
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
 // while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    /* USER CODE END W1_UsageFault_IRQn 0 */
  }
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 fc46 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <TIM3_IRQHandler+0x10>)
 8001366:	f004 fa15 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	24000270 	.word	0x24000270

08001374 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <TIM4_IRQHandler+0x10>)
 800137a:	f004 fa0b 	bl	8005794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	24000230 	.word	0x24000230

08001388 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <USART3_IRQHandler+0x10>)
 800138e:	f005 fa27 	bl	80067e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	240002b0 	.word	0x240002b0

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013a0:	4b29      	ldr	r3, [pc, #164]	; (8001448 <SystemInit+0xac>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a28      	ldr	r2, [pc, #160]	; (8001448 <SystemInit+0xac>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <SystemInit+0xb0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a25      	ldr	r2, [pc, #148]	; (800144c <SystemInit+0xb0>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013bc:	4b23      	ldr	r3, [pc, #140]	; (800144c <SystemInit+0xb0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013c2:	4b22      	ldr	r3, [pc, #136]	; (800144c <SystemInit+0xb0>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	4921      	ldr	r1, [pc, #132]	; (800144c <SystemInit+0xb0>)
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <SystemInit+0xb4>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013ce:	4b1f      	ldr	r3, [pc, #124]	; (800144c <SystemInit+0xb0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <SystemInit+0xb0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <SystemInit+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <SystemInit+0xb0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <SystemInit+0xb0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80013ec:	4b17      	ldr	r3, [pc, #92]	; (800144c <SystemInit+0xb0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <SystemInit+0xb0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80013f8:	4b14      	ldr	r3, [pc, #80]	; (800144c <SystemInit+0xb0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <SystemInit+0xb0>)
 8001400:	2200      	movs	r2, #0
 8001402:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <SystemInit+0xb0>)
 8001406:	2200      	movs	r2, #0
 8001408:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <SystemInit+0xb0>)
 800140c:	2200      	movs	r2, #0
 800140e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <SystemInit+0xb0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <SystemInit+0xb0>)
 8001416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800141a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <SystemInit+0xb0>)
 800141e:	2200      	movs	r2, #0
 8001420:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <SystemInit+0xb8>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <SystemInit+0xbc>)
 8001428:	4013      	ands	r3, r2
 800142a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800142e:	d202      	bcs.n	8001436 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <SystemInit+0xc0>)
 8001432:	2201      	movs	r2, #1
 8001434:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001436:	4b04      	ldr	r3, [pc, #16]	; (8001448 <SystemInit+0xac>)
 8001438:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800143c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00
 800144c:	58024400 	.word	0x58024400
 8001450:	eaf6ed7f 	.word	0xeaf6ed7f
 8001454:	5c001000 	.word	0x5c001000
 8001458:	ffff0000 	.word	0xffff0000
 800145c:	51008108 	.word	0x51008108

08001460 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]
 8001490:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001492:	4b38      	ldr	r3, [pc, #224]	; (8001574 <MX_TIM3_Init+0x114>)
 8001494:	4a38      	ldr	r2, [pc, #224]	; (8001578 <MX_TIM3_Init+0x118>)
 8001496:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001498:	4b36      	ldr	r3, [pc, #216]	; (8001574 <MX_TIM3_Init+0x114>)
 800149a:	225f      	movs	r2, #95	; 0x5f
 800149c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b35      	ldr	r3, [pc, #212]	; (8001574 <MX_TIM3_Init+0x114>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1; //20ms pulse period
 80014a4:	4b33      	ldr	r3, [pc, #204]	; (8001574 <MX_TIM3_Init+0x114>)
 80014a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80014aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <MX_TIM3_Init+0x114>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <MX_TIM3_Init+0x114>)
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014b8:	482e      	ldr	r0, [pc, #184]	; (8001574 <MX_TIM3_Init+0x114>)
 80014ba:	f004 f841 	bl	8005540 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80014c4:	f7ff fb4e 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d2:	4619      	mov	r1, r3
 80014d4:	4827      	ldr	r0, [pc, #156]	; (8001574 <MX_TIM3_Init+0x114>)
 80014d6:	f004 fb95 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014e0:	f7ff fb40 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014e4:	4823      	ldr	r0, [pc, #140]	; (8001574 <MX_TIM3_Init+0x114>)
 80014e6:	f004 f881 	bl	80055ec <HAL_TIM_PWM_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014f0:	f7ff fb38 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	481c      	ldr	r0, [pc, #112]	; (8001574 <MX_TIM3_Init+0x114>)
 8001504:	f005 f8a2 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800150e:	f7ff fb29 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001512:	2360      	movs	r3, #96	; 0x60
 8001514:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2200      	movs	r2, #0
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_TIM3_Init+0x114>)
 800152a:	f004 fa53 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001534:	f7ff fb16 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2204      	movs	r2, #4
 800153c:	4619      	mov	r1, r3
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_TIM3_Init+0x114>)
 8001540:	f004 fa48 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800154a:	f7ff fb0b 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	2208      	movs	r2, #8
 8001552:	4619      	mov	r1, r3
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <MX_TIM3_Init+0x114>)
 8001556:	f004 fa3d 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001560:	f7ff fb00 	bl	8000b64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <MX_TIM3_Init+0x114>)
 8001566:	f000 f8c7 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	24000270 	.word	0x24000270
 8001578:	40000400 	.word	0x40000400

0800157c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800159c:	463b      	mov	r3, r7
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
 80015aa:	615a      	str	r2, [r3, #20]
 80015ac:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015b0:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <MX_TIM4_Init+0xe8>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b29      	ldr	r3, [pc, #164]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015cc:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015d2:	4823      	ldr	r0, [pc, #140]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015d4:	f003 ffb4 	bl	8005540 <HAL_TIM_Base_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80015de:	f7ff fac1 	bl	8000b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ec:	4619      	mov	r1, r3
 80015ee:	481c      	ldr	r0, [pc, #112]	; (8001660 <MX_TIM4_Init+0xe4>)
 80015f0:	f004 fb08 	bl	8005c04 <HAL_TIM_ConfigClockSource>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80015fa:	f7ff fab3 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015fe:	4818      	ldr	r0, [pc, #96]	; (8001660 <MX_TIM4_Init+0xe4>)
 8001600:	f003 fff4 	bl	80055ec <HAL_TIM_PWM_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800160a:	f7ff faab 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <MX_TIM4_Init+0xe4>)
 800161e:	f005 f815 	bl	800664c <HAL_TIMEx_MasterConfigSynchronization>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001628:	f7ff fa9c 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162c:	2360      	movs	r3, #96	; 0x60
 800162e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	4619      	mov	r1, r3
 8001642:	4807      	ldr	r0, [pc, #28]	; (8001660 <MX_TIM4_Init+0xe4>)
 8001644:	f004 f9c6 	bl	80059d4 <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800164e:	f7ff fa89 	bl	8000b64 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <MX_TIM4_Init+0xe4>)
 8001654:	f000 f850 	bl	80016f8 <HAL_TIM_MspPostInit>

}
 8001658:	bf00      	nop
 800165a:	3738      	adds	r7, #56	; 0x38
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	24000230 	.word	0x24000230
 8001664:	40000800 	.word	0x40000800

08001668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_TIM_Base_MspInit+0x84>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d117      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_TIM_Base_MspInit+0x88>)
 800167c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_TIM_Base_MspInit+0x88>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_TIM_Base_MspInit+0x88>)
 800168c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	201d      	movs	r0, #29
 800169e:	f000 fbe0 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016a2:	201d      	movs	r0, #29
 80016a4:	f000 fbf7 	bl	8001e96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80016a8:	e01b      	b.n	80016e2 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a11      	ldr	r2, [pc, #68]	; (80016f4 <HAL_TIM_Base_MspInit+0x8c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d116      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016b4:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_TIM_Base_MspInit+0x88>)
 80016b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ba:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <HAL_TIM_Base_MspInit+0x88>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_TIM_Base_MspInit+0x88>)
 80016c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	201e      	movs	r0, #30
 80016d8:	f000 fbc3 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016dc:	201e      	movs	r0, #30
 80016de:	f000 fbda 	bl	8001e96 <HAL_NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40000400 	.word	0x40000400
 80016f0:	58024400 	.word	0x58024400
 80016f4:	40000800 	.word	0x40000800

080016f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	; 0x30
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a44      	ldr	r2, [pc, #272]	; (8001828 <HAL_TIM_MspPostInit+0x130>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d15d      	bne.n	80017d6 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001720:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800172a:	4b40      	ldr	r3, [pc, #256]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
 8001736:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001738:	4b3c      	ldr	r3, [pc, #240]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 800173a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173e:	4a3b      	ldr	r2, [pc, #236]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 800174a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a33      	ldr	r2, [pc, #204]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001774:	2340      	movs	r3, #64	; 0x40
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001784:	2302      	movs	r3, #2
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	4828      	ldr	r0, [pc, #160]	; (8001830 <HAL_TIM_MspPostInit+0x138>)
 8001790:	f001 f948 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001794:	2301      	movs	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017a4:	2302      	movs	r3, #2
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4821      	ldr	r0, [pc, #132]	; (8001834 <HAL_TIM_MspPostInit+0x13c>)
 80017b0:	f001 f938 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017c4:	2302      	movs	r3, #2
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	4619      	mov	r1, r3
 80017ce:	481a      	ldr	r0, [pc, #104]	; (8001838 <HAL_TIM_MspPostInit+0x140>)
 80017d0:	f001 f928 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017d4:	e024      	b.n	8001820 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a18      	ldr	r2, [pc, #96]	; (800183c <HAL_TIM_MspPostInit+0x144>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d11f      	bne.n	8001820 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_TIM_MspPostInit+0x134>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f6:	f003 0308 	and.w	r3, r3, #8
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001810:	2302      	movs	r3, #2
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_TIM_MspPostInit+0x148>)
 800181c:	f001 f902 	bl	8002a24 <HAL_GPIO_Init>
}
 8001820:	bf00      	nop
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40000400 	.word	0x40000400
 800182c:	58024400 	.word	0x58024400
 8001830:	58020000 	.word	0x58020000
 8001834:	58020400 	.word	0x58020400
 8001838:	58020800 	.word	0x58020800
 800183c:	40000800 	.word	0x40000800
 8001840:	58020c00 	.word	0x58020c00

08001844 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d101      	bne.n	800185c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		servo_update();
 8001858:	f7ff f9f6 	bl	8000c48 <servo_update>
	}
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	24000270 	.word	0x24000270

08001868 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800186c:	4b22      	ldr	r3, [pc, #136]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 800186e:	4a23      	ldr	r2, [pc, #140]	; (80018fc <MX_USART3_UART_Init+0x94>)
 8001870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a4:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b0:	4811      	ldr	r0, [pc, #68]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 80018b2:	f004 ff45 	bl	8006740 <HAL_UART_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018bc:	f7ff f952 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c0:	2100      	movs	r1, #0
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 80018c4:	f007 fcb3 	bl	800922e <HAL_UARTEx_SetTxFifoThreshold>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018ce:	f7ff f949 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d2:	2100      	movs	r1, #0
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 80018d6:	f007 fce8 	bl	80092aa <HAL_UARTEx_SetRxFifoThreshold>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018e0:	f7ff f940 	bl	8000b64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_USART3_UART_Init+0x90>)
 80018e6:	f007 fc69 	bl	80091bc <HAL_UARTEx_DisableFifoMode>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018f0:	f7ff f938 	bl	8000b64 <Error_Handler>
  }

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	240002b0 	.word	0x240002b0
 80018fc:	40004800 	.word	0x40004800

08001900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <HAL_UART_MspInit+0x98>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d136      	bne.n	8001990 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001922:	4b1e      	ldr	r3, [pc, #120]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_UART_MspInit+0x9c>)
 800192a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001940:	4b16      	ldr	r3, [pc, #88]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001946:	4a15      	ldr	r2, [pc, #84]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_UART_MspInit+0x9c>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800195e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001970:	2307      	movs	r3, #7
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <HAL_UART_MspInit+0xa0>)
 800197c:	f001 f852 	bl	8002a24 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2027      	movs	r0, #39	; 0x27
 8001986:	f000 fa6c 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800198a:	2027      	movs	r0, #39	; 0x27
 800198c:	f000 fa83 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001990:	bf00      	nop
 8001992:	3728      	adds	r7, #40	; 0x28
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40004800 	.word	0x40004800
 800199c:	58024400 	.word	0x58024400
 80019a0:	58020c00 	.word	0x58020c00

080019a4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019aa:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80019ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b0:	2209      	movs	r2, #9
 80019b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b6:	2202      	movs	r2, #2
 80019b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c2:	2202      	movs	r2, #2
 80019c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019da:	2201      	movs	r2, #1
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ea:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ec:	f001 f9e3 	bl	8002db6 <HAL_PCD_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80019f6:	f7ff f8b5 	bl	8000b64 <Error_Handler>
  }

}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	2400033c 	.word	0x2400033c
 8001a04:	40080000 	.word	0x40080000

08001a08 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a21      	ldr	r2, [pc, #132]	; (8001aac <HAL_PCD_MspInit+0xa4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d13b      	bne.n	8001aa2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_PCD_MspInit+0xa8>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	4a1f      	ldr	r2, [pc, #124]	; (8001ab0 <HAL_PCD_MspInit+0xa8>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <HAL_PCD_MspInit+0xa8>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <HAL_PCD_MspInit+0xac>)
 8001a66:	f000 ffdd 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480d      	ldr	r0, [pc, #52]	; (8001ab4 <HAL_PCD_MspInit+0xac>)
 8001a80:	f000 ffd0 	bl	8002a24 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_PCD_MspInit+0xa8>)
 8001a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a8a:	4a09      	ldr	r2, [pc, #36]	; (8001ab0 <HAL_PCD_MspInit+0xa8>)
 8001a8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_PCD_MspInit+0xa8>)
 8001a96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3728      	adds	r7, #40	; 0x28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40080000 	.word	0x40080000
 8001ab0:	58024400 	.word	0x58024400
 8001ab4:	58020000 	.word	0x58020000

08001ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001abc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001abe:	e003      	b.n	8001ac8 <LoopCopyDataInit>

08001ac0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ac2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ac4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ac6:	3104      	adds	r1, #4

08001ac8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ac8:	480b      	ldr	r0, [pc, #44]	; (8001af8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001acc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ace:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ad0:	d3f6      	bcc.n	8001ac0 <CopyDataInit>
  ldr  r2, =_sbss
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ad4:	e002      	b.n	8001adc <LoopFillZerobss>

08001ad6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ad6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ad8:	f842 3b04 	str.w	r3, [r2], #4

08001adc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ade:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ae0:	d3f9      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ae2:	f7ff fc5b 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae6:	f007 ff3f 	bl	8009968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aea:	f7fe ff49 	bl	8000980 <main>
  bx  lr    
 8001aee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001af0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001af4:	08009a08 	.word	0x08009a08
  ldr  r0, =_sdata
 8001af8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001afc:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001b00:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001b04:	24000748 	.word	0x24000748

08001b08 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC3_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 f99b 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b16:	f002 f83b 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8001b1a:	4601      	mov	r1, r0
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_Init+0x60>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_Init+0x64>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_Init+0x68>)
 8001b34:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_Init+0x68>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_Init+0x60>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	490b      	ldr	r1, [pc, #44]	; (8001b70 <HAL_Init+0x64>)
 8001b44:	5ccb      	ldrb	r3, [r1, r3]
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_Init+0x6c>)
 8001b50:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b52:	2000      	movs	r0, #0
 8001b54:	f000 f812 	bl	8001b7c <HAL_InitTick>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e002      	b.n	8001b68 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b62:	f7ff fba5 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	58024400 	.word	0x58024400
 8001b70:	080099e8 	.word	0x080099e8
 8001b74:	24000000 	.word	0x24000000
 8001b78:	24000004 	.word	0x24000004

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_InitTick+0x60>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e021      	b.n	8001bd4 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_InitTick+0x64>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_InitTick+0x60>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f983 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f94d 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x68>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2400000c 	.word	0x2400000c
 8001be0:	24000000 	.word	0x24000000
 8001be4:	24000008 	.word	0x24000008

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	2400000c 	.word	0x2400000c
 8001c0c:	24000744 	.word	0x24000744

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	24000744 	.word	0x24000744

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_Delay+0x40>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	2400000c 	.word	0x2400000c

08001c6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_GetREVID+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0c1b      	lsrs	r3, r3, #16
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	5c001000 	.word	0x5c001000

08001c84 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c94:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	58000400 	.word	0x58000400

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x40>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	05fa0000 	.word	0x05fa0000

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff40 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff90 	bl	8001da0 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5f 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff33 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa4 	bl	8001e08 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e188      	b.n	80021f0 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d004      	beq.n	8001ef4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e17d      	b.n	80021f0 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a8c      	ldr	r2, [pc, #560]	; (800212c <HAL_DMA_Abort_IT+0x260>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d04a      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a8b      	ldr	r2, [pc, #556]	; (8002130 <HAL_DMA_Abort_IT+0x264>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d045      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a89      	ldr	r2, [pc, #548]	; (8002134 <HAL_DMA_Abort_IT+0x268>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d040      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a88      	ldr	r2, [pc, #544]	; (8002138 <HAL_DMA_Abort_IT+0x26c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d03b      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a86      	ldr	r2, [pc, #536]	; (800213c <HAL_DMA_Abort_IT+0x270>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d036      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a85      	ldr	r2, [pc, #532]	; (8002140 <HAL_DMA_Abort_IT+0x274>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d031      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a83      	ldr	r2, [pc, #524]	; (8002144 <HAL_DMA_Abort_IT+0x278>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d02c      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a82      	ldr	r2, [pc, #520]	; (8002148 <HAL_DMA_Abort_IT+0x27c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d027      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a80      	ldr	r2, [pc, #512]	; (800214c <HAL_DMA_Abort_IT+0x280>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d022      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a7f      	ldr	r2, [pc, #508]	; (8002150 <HAL_DMA_Abort_IT+0x284>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d01d      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a7d      	ldr	r2, [pc, #500]	; (8002154 <HAL_DMA_Abort_IT+0x288>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d018      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a7c      	ldr	r2, [pc, #496]	; (8002158 <HAL_DMA_Abort_IT+0x28c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d013      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a7a      	ldr	r2, [pc, #488]	; (800215c <HAL_DMA_Abort_IT+0x290>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00e      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a79      	ldr	r2, [pc, #484]	; (8002160 <HAL_DMA_Abort_IT+0x294>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d009      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a77      	ldr	r2, [pc, #476]	; (8002164 <HAL_DMA_Abort_IT+0x298>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Abort_IT+0xc8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a76      	ldr	r2, [pc, #472]	; (8002168 <HAL_DMA_Abort_IT+0x29c>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d101      	bne.n	8001f98 <HAL_DMA_Abort_IT+0xcc>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_DMA_Abort_IT+0xce>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d065      	beq.n	800206a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a60      	ldr	r2, [pc, #384]	; (800212c <HAL_DMA_Abort_IT+0x260>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d04a      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a5e      	ldr	r2, [pc, #376]	; (8002130 <HAL_DMA_Abort_IT+0x264>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d045      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5d      	ldr	r2, [pc, #372]	; (8002134 <HAL_DMA_Abort_IT+0x268>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d040      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5b      	ldr	r2, [pc, #364]	; (8002138 <HAL_DMA_Abort_IT+0x26c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d03b      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5a      	ldr	r2, [pc, #360]	; (800213c <HAL_DMA_Abort_IT+0x270>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d036      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_DMA_Abort_IT+0x274>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d031      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a57      	ldr	r2, [pc, #348]	; (8002144 <HAL_DMA_Abort_IT+0x278>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d02c      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a55      	ldr	r2, [pc, #340]	; (8002148 <HAL_DMA_Abort_IT+0x27c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d027      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a54      	ldr	r2, [pc, #336]	; (800214c <HAL_DMA_Abort_IT+0x280>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d022      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a52      	ldr	r2, [pc, #328]	; (8002150 <HAL_DMA_Abort_IT+0x284>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01d      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a51      	ldr	r2, [pc, #324]	; (8002154 <HAL_DMA_Abort_IT+0x288>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d018      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a4f      	ldr	r2, [pc, #316]	; (8002158 <HAL_DMA_Abort_IT+0x28c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a4e      	ldr	r2, [pc, #312]	; (800215c <HAL_DMA_Abort_IT+0x290>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00e      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a4c      	ldr	r2, [pc, #304]	; (8002160 <HAL_DMA_Abort_IT+0x294>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d009      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a4b      	ldr	r2, [pc, #300]	; (8002164 <HAL_DMA_Abort_IT+0x298>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_DMA_Abort_IT+0x17a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a49      	ldr	r2, [pc, #292]	; (8002168 <HAL_DMA_Abort_IT+0x29c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d108      	bne.n	8002058 <HAL_DMA_Abort_IT+0x18c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0201 	bic.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e0ca      	b.n	80021ee <HAL_DMA_Abort_IT+0x322>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e0c1      	b.n	80021ee <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 020e 	bic.w	r2, r2, #14
 8002078:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a2b      	ldr	r2, [pc, #172]	; (800212c <HAL_DMA_Abort_IT+0x260>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d04a      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a29      	ldr	r2, [pc, #164]	; (8002130 <HAL_DMA_Abort_IT+0x264>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d045      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a28      	ldr	r2, [pc, #160]	; (8002134 <HAL_DMA_Abort_IT+0x268>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d040      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a26      	ldr	r2, [pc, #152]	; (8002138 <HAL_DMA_Abort_IT+0x26c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d03b      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a25      	ldr	r2, [pc, #148]	; (800213c <HAL_DMA_Abort_IT+0x270>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d036      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a23      	ldr	r2, [pc, #140]	; (8002140 <HAL_DMA_Abort_IT+0x274>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d031      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a22      	ldr	r2, [pc, #136]	; (8002144 <HAL_DMA_Abort_IT+0x278>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d02c      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a20      	ldr	r2, [pc, #128]	; (8002148 <HAL_DMA_Abort_IT+0x27c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d027      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1f      	ldr	r2, [pc, #124]	; (800214c <HAL_DMA_Abort_IT+0x280>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d022      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a1d      	ldr	r2, [pc, #116]	; (8002150 <HAL_DMA_Abort_IT+0x284>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01d      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <HAL_DMA_Abort_IT+0x288>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d018      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_DMA_Abort_IT+0x28c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_DMA_Abort_IT+0x290>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00e      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_DMA_Abort_IT+0x294>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d009      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_DMA_Abort_IT+0x298>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d004      	beq.n	800211a <HAL_DMA_Abort_IT+0x24e>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_DMA_Abort_IT+0x29c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d128      	bne.n	800216c <HAL_DMA_Abort_IT+0x2a0>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e027      	b.n	800217c <HAL_DMA_Abort_IT+0x2b0>
 800212c:	40020010 	.word	0x40020010
 8002130:	40020028 	.word	0x40020028
 8002134:	40020040 	.word	0x40020040
 8002138:	40020058 	.word	0x40020058
 800213c:	40020070 	.word	0x40020070
 8002140:	40020088 	.word	0x40020088
 8002144:	400200a0 	.word	0x400200a0
 8002148:	400200b8 	.word	0x400200b8
 800214c:	40020410 	.word	0x40020410
 8002150:	40020428 	.word	0x40020428
 8002154:	40020440 	.word	0x40020440
 8002158:	40020458 	.word	0x40020458
 800215c:	40020470 	.word	0x40020470
 8002160:	40020488 	.word	0x40020488
 8002164:	400204a0 	.word	0x400204a0
 8002168:	400204b8 	.word	0x400204b8
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800218a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002190:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	2201      	movs	r2, #1
 800219c:	409a      	lsls	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80021aa:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00c      	beq.n	80021ce <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021c2:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021cc:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0c6      	b.n	8002398 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fa32 	bl	800067c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2223      	movs	r2, #35	; 0x23
 800221c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <HAL_ETH_Init+0x1a8>)
 8002220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002224:	4a5e      	ldr	r2, [pc, #376]	; (80023a0 <HAL_ETH_Init+0x1a8>)
 8002226:	f043 0302 	orr.w	r3, r3, #2
 800222a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800222e:	4b5c      	ldr	r3, [pc, #368]	; (80023a0 <HAL_ETH_Init+0x1a8>)
 8002230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7a1b      	ldrb	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d103      	bne.n	800224c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fd1d 	bl	8001c84 <HAL_SYSCFG_ETHInterfaceSelect>
 800224a:	e003      	b.n	8002254 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800224c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002250:	f7ff fd18 	bl	8001c84 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800226c:	f7ff fcd0 	bl	8001c10 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002272:	e00f      	b.n	8002294 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002274:	f7ff fccc 	bl	8001c10 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002282:	d907      	bls.n	8002294 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2204      	movs	r2, #4
 8002288:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	22e0      	movs	r2, #224	; 0xe0
 800228e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e081      	b.n	8002398 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1e6      	bne.n	8002274 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 fac0 	bl	800282c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80022ac:	f001 fde2 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_ETH_Init+0x1ac>)
 80022b4:	fba3 2302 	umull	r2, r3, r3, r2
 80022b8:	0c9a      	lsrs	r2, r3, #18
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3a01      	subs	r2, #1
 80022c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fa13 	bl	80026f0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022e0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022e4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	22e0      	movs	r2, #224	; 0xe0
 80022fc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e04a      	b.n	8002398 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	f241 1308 	movw	r3, #4360	; 0x1108
 800230a:	4413      	add	r3, r2
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b26      	ldr	r3, [pc, #152]	; (80023a8 <HAL_ETH_Init+0x1b0>)
 8002310:	4013      	ands	r3, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6952      	ldr	r2, [r2, #20]
 8002316:	0052      	lsls	r2, r2, #1
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	6809      	ldr	r1, [r1, #0]
 800231c:	431a      	orrs	r2, r3
 800231e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002322:	440b      	add	r3, r1
 8002324:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fad8 	bl	80028dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fb1c 	bl	800296a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	3305      	adds	r3, #5
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	021a      	lsls	r2, r3, #8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	4619      	mov	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	3303      	adds	r3, #3
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	061a      	lsls	r2, r3, #24
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	3302      	adds	r3, #2
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	041b      	lsls	r3, r3, #16
 8002364:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	3301      	adds	r3, #1
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002370:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800237e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002380:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2210      	movs	r2, #16
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2210      	movs	r2, #16
 8002394:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58024400 	.word	0x58024400
 80023a4:	431bde83 	.word	0x431bde83
 80023a8:	ffff8001 	.word	0xffff8001

080023ac <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80023be:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	791b      	ldrb	r3, [r3, #4]
 80023c4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80023c6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	7b1b      	ldrb	r3, [r3, #12]
 80023cc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80023ce:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	7b5b      	ldrb	r3, [r3, #13]
 80023d4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023d6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	7b9b      	ldrb	r3, [r3, #14]
 80023dc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	7bdb      	ldrb	r3, [r3, #15]
 80023e4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023e6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	7c12      	ldrb	r2, [r2, #16]
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d102      	bne.n	80023f6 <ETH_SetMACConfig+0x4a>
 80023f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023f4:	e000      	b.n	80023f8 <ETH_SetMACConfig+0x4c>
 80023f6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023f8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	7c52      	ldrb	r2, [r2, #17]
 80023fe:	2a00      	cmp	r2, #0
 8002400:	d102      	bne.n	8002408 <ETH_SetMACConfig+0x5c>
 8002402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002406:	e000      	b.n	800240a <ETH_SetMACConfig+0x5e>
 8002408:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800240a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	7c9b      	ldrb	r3, [r3, #18]
 8002410:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002412:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002418:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800241e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7f1b      	ldrb	r3, [r3, #28]
 8002424:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002426:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	7f5b      	ldrb	r3, [r3, #29]
 800242c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800242e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	7f92      	ldrb	r2, [r2, #30]
 8002434:	2a00      	cmp	r2, #0
 8002436:	d102      	bne.n	800243e <ETH_SetMACConfig+0x92>
 8002438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800243c:	e000      	b.n	8002440 <ETH_SetMACConfig+0x94>
 800243e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002440:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	7fdb      	ldrb	r3, [r3, #31]
 8002446:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002448:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002450:	2a00      	cmp	r2, #0
 8002452:	d102      	bne.n	800245a <ETH_SetMACConfig+0xae>
 8002454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002458:	e000      	b.n	800245c <ETH_SetMACConfig+0xb0>
 800245a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800245c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002462:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800246a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800246c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b56      	ldr	r3, [pc, #344]	; (80025d8 <ETH_SetMACConfig+0x22c>)
 800247e:	4013      	ands	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	68f9      	ldr	r1, [r7, #12]
 8002486:	430b      	orrs	r3, r1
 8002488:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002496:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002498:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80024a2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024aa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80024ac:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	d102      	bne.n	80024be <ETH_SetMACConfig+0x112>
 80024b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0x114>
 80024be:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80024c0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4b42      	ldr	r3, [pc, #264]	; (80025dc <ETH_SetMACConfig+0x230>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	430b      	orrs	r3, r1
 80024dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <ETH_SetMACConfig+0x234>)
 80024f6:	4013      	ands	r3, r2
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	68f9      	ldr	r1, [r7, #12]
 80024fe:	430b      	orrs	r3, r1
 8002500:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002508:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800250e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002516:	2a00      	cmp	r2, #0
 8002518:	d101      	bne.n	800251e <ETH_SetMACConfig+0x172>
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	e000      	b.n	8002520 <ETH_SetMACConfig+0x174>
 800251e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002520:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002532:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002536:	4013      	ands	r3, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	68f9      	ldr	r1, [r7, #12]
 800253e:	430b      	orrs	r3, r1
 8002540:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002548:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002550:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255e:	f023 0103 	bic.w	r1, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	430a      	orrs	r2, r1
 800256a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002576:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002592:	2a00      	cmp	r2, #0
 8002594:	d101      	bne.n	800259a <ETH_SetMACConfig+0x1ee>
 8002596:	2240      	movs	r2, #64	; 0x40
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0x1f0>
 800259a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800259c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80025a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80025a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80025ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80025bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	00048083 	.word	0x00048083
 80025dc:	c0f88000 	.word	0xc0f88000
 80025e0:	fffffef0 	.word	0xfffffef0

080025e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b38      	ldr	r3, [pc, #224]	; (80026dc <ETH_SetDMAConfig+0xf8>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	6809      	ldr	r1, [r1, #0]
 8002604:	431a      	orrs	r2, r3
 8002606:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800260a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	791b      	ldrb	r3, [r3, #4]
 8002610:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002616:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	7b1b      	ldrb	r3, [r3, #12]
 800261c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	f241 0304 	movw	r3, #4100	; 0x1004
 800262a:	4413      	add	r3, r2
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <ETH_SetDMAConfig+0xfc>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6811      	ldr	r1, [r2, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	431a      	orrs	r2, r3
 800263a:	f241 0304 	movw	r3, #4100	; 0x1004
 800263e:	440b      	add	r3, r1
 8002640:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	7b5b      	ldrb	r3, [r3, #13]
 8002646:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800264c:	4313      	orrs	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <ETH_SetDMAConfig+0x100>)
 800265c:	4013      	ands	r3, r2
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6811      	ldr	r1, [r2, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	431a      	orrs	r2, r3
 8002666:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800266a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	7d1b      	ldrb	r3, [r3, #20]
 8002674:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002676:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	7f5b      	ldrb	r3, [r3, #29]
 800267c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f241 1304 	movw	r3, #4356	; 0x1104
 800268a:	4413      	add	r3, r2
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <ETH_SetDMAConfig+0x104>)
 8002690:	4013      	ands	r3, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6811      	ldr	r1, [r2, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	431a      	orrs	r2, r3
 800269a:	f241 1304 	movw	r3, #4356	; 0x1104
 800269e:	440b      	add	r3, r1
 80026a0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7f1b      	ldrb	r3, [r3, #28]
 80026a6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	f241 1308 	movw	r3, #4360	; 0x1108
 80026b8:	4413      	add	r3, r2
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <ETH_SetDMAConfig+0x108>)
 80026be:	4013      	ands	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6811      	ldr	r1, [r2, #0]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	431a      	orrs	r2, r3
 80026c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80026cc:	440b      	add	r3, r1
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	ffff87fd 	.word	0xffff87fd
 80026e0:	ffff2ffe 	.word	0xffff2ffe
 80026e4:	fffec000 	.word	0xfffec000
 80026e8:	ffc0efef 	.word	0xffc0efef
 80026ec:	7fc0ffff 	.word	0x7fc0ffff

080026f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b0a4      	sub	sp, #144	; 0x90
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026fe:	2300      	movs	r3, #0
 8002700:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002714:	2301      	movs	r3, #1
 8002716:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002726:	2301      	movs	r3, #1
 8002728:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800272c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002730:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002738:	2300      	movs	r3, #0
 800273a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002748:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800274c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800274e:	2300      	movs	r3, #0
 8002750:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002754:	2300      	movs	r3, #0
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800276a:	2300      	movs	r3, #0
 800276c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800276e:	2300      	movs	r3, #0
 8002770:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002772:	2300      	movs	r3, #0
 8002774:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002788:	2320      	movs	r3, #32
 800278a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800279a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80027a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027a4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80027ac:	2302      	movs	r3, #2
 80027ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80027b2:	2300      	movs	r3, #0
 80027b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80027ca:	2300      	movs	r3, #0
 80027cc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff fde6 	bl	80023ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027e4:	2301      	movs	r3, #1
 80027e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027fa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002804:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002808:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002810:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fee1 	bl	80025e4 <ETH_SetDMAConfig>
}
 8002822:	bf00      	nop
 8002824:	3790      	adds	r7, #144	; 0x90
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800283c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002844:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002846:	f001 fb15 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 800284a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d908      	bls.n	8002866 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d804      	bhi.n	8002866 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e027      	b.n	80028b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d908      	bls.n	8002880 <ETH_MAC_MDIO_ClkConfig+0x54>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d804      	bhi.n	8002880 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e01a      	b.n	80028b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d903      	bls.n	8002890 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d911      	bls.n	80028b4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d908      	bls.n	80028aa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d804      	bhi.n	80028aa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e005      	b.n	80028b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	e000      	b.n	80028b6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80028b4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	01312cff 	.word	0x01312cff
 80028cc:	02160ebf 	.word	0x02160ebf
 80028d0:	039386ff 	.word	0x039386ff
 80028d4:	05f5e0ff 	.word	0x05f5e0ff
 80028d8:	08f0d17f 	.word	0x08f0d17f

080028dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e01d      	b.n	8002926 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4613      	mov	r3, r2
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	440b      	add	r3, r1
 80028fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	3206      	adds	r2, #6
 800291c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	3301      	adds	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d9de      	bls.n	80028ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f241 132c 	movw	r3, #4396	; 0x112c
 800293a:	4413      	add	r3, r2
 800293c:	2203      	movs	r2, #3
 800293e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68d9      	ldr	r1, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f241 1314 	movw	r3, #4372	; 0x1114
 800294c:	4413      	add	r3, r2
 800294e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800295c:	601a      	str	r2, [r3, #0]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800296a:	b480      	push	{r7}
 800296c:	b085      	sub	sp, #20
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e024      	b.n	80029c2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6919      	ldr	r1, [r3, #16]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	440b      	add	r3, r1
 8002988:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2200      	movs	r2, #0
 8002994:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2200      	movs	r2, #0
 80029a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2200      	movs	r2, #0
 80029a6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	2200      	movs	r2, #0
 80029ac:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	330a      	adds	r3, #10
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3301      	adds	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d9d7      	bls.n	8002978 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	f241 1330 	movw	r3, #4400	; 0x1130
 80029ee:	4413      	add	r3, r2
 80029f0:	2203      	movs	r2, #3
 80029f2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6919      	ldr	r1, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8002a00:	4413      	add	r3, r2
 8002a02:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	f241 1328 	movw	r3, #4392	; 0x1128
 8002a14:	4413      	add	r3, r2
 8002a16:	6019      	str	r1, [r3, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	3714      	adds	r7, #20
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a32:	4b89      	ldr	r3, [pc, #548]	; (8002c58 <HAL_GPIO_Init+0x234>)
 8002a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a36:	e194      	b.n	8002d62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8186 	beq.w	8002d5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x3c>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d123      	bne.n	8002aa8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	08da      	lsrs	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3208      	adds	r2, #8
 8002a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	220f      	movs	r2, #15
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	08da      	lsrs	r2, r3, #3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3208      	adds	r2, #8
 8002aa2:	69b9      	ldr	r1, [r7, #24]
 8002aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0203 	and.w	r2, r3, #3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d00b      	beq.n	8002afc <HAL_GPIO_Init+0xd8>
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d007      	beq.n	8002afc <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002af0:	2b11      	cmp	r3, #17
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b12      	cmp	r3, #18
 8002afa:	d130      	bne.n	8002b5e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b32:	2201      	movs	r2, #1
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0201 	and.w	r2, r3, #1
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80e0 	beq.w	8002d5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9c:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <HAL_GPIO_Init+0x238>)
 8002b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ba2:	4a2e      	ldr	r2, [pc, #184]	; (8002c5c <HAL_GPIO_Init+0x238>)
 8002ba4:	f043 0302 	orr.w	r3, r3, #2
 8002ba8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bac:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_GPIO_Init+0x238>)
 8002bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a29      	ldr	r2, [pc, #164]	; (8002c60 <HAL_GPIO_Init+0x23c>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <HAL_GPIO_Init+0x240>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d052      	beq.n	8002c8c <HAL_GPIO_Init+0x268>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_GPIO_Init+0x244>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d031      	beq.n	8002c52 <HAL_GPIO_Init+0x22e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a1e      	ldr	r2, [pc, #120]	; (8002c6c <HAL_GPIO_Init+0x248>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d02b      	beq.n	8002c4e <HAL_GPIO_Init+0x22a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	; (8002c70 <HAL_GPIO_Init+0x24c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d025      	beq.n	8002c4a <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_GPIO_Init+0x250>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01f      	beq.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <HAL_GPIO_Init+0x254>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d019      	beq.n	8002c42 <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_GPIO_Init+0x258>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d013      	beq.n	8002c3e <HAL_GPIO_Init+0x21a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <HAL_GPIO_Init+0x25c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00d      	beq.n	8002c3a <HAL_GPIO_Init+0x216>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <HAL_GPIO_Init+0x260>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d007      	beq.n	8002c36 <HAL_GPIO_Init+0x212>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <HAL_GPIO_Init+0x264>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d101      	bne.n	8002c32 <HAL_GPIO_Init+0x20e>
 8002c2e:	2309      	movs	r3, #9
 8002c30:	e02d      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c32:	230a      	movs	r3, #10
 8002c34:	e02b      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c36:	2308      	movs	r3, #8
 8002c38:	e029      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c3a:	2307      	movs	r3, #7
 8002c3c:	e027      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c3e:	2306      	movs	r3, #6
 8002c40:	e025      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e023      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e021      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e01f      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e01d      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e01b      	b.n	8002c8e <HAL_GPIO_Init+0x26a>
 8002c56:	bf00      	nop
 8002c58:	58000080 	.word	0x58000080
 8002c5c:	58024400 	.word	0x58024400
 8002c60:	58000400 	.word	0x58000400
 8002c64:	58020000 	.word	0x58020000
 8002c68:	58020400 	.word	0x58020400
 8002c6c:	58020800 	.word	0x58020800
 8002c70:	58020c00 	.word	0x58020c00
 8002c74:	58021000 	.word	0x58021000
 8002c78:	58021400 	.word	0x58021400
 8002c7c:	58021800 	.word	0x58021800
 8002c80:	58021c00 	.word	0x58021c00
 8002c84:	58022000 	.word	0x58022000
 8002c88:	58022400 	.word	0x58022400
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	f002 0203 	and.w	r2, r2, #3
 8002c94:	0092      	lsls	r2, r2, #2
 8002c96:	4093      	lsls	r3, r2
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c9e:	4938      	ldr	r1, [pc, #224]	; (8002d80 <HAL_GPIO_Init+0x35c>)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	089b      	lsrs	r3, r3, #2
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f ae63 	bne.w	8002a38 <HAL_GPIO_Init+0x14>
  }
}
 8002d72:	bf00      	nop
 8002d74:	3724      	adds	r7, #36	; 0x24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	58000400 	.word	0x58000400

08002d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	807b      	strh	r3, [r7, #2]
 8002d90:	4613      	mov	r3, r2
 8002d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d94:	787b      	ldrb	r3, [r7, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d9a:	887a      	ldrh	r2, [r7, #2]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002da0:	e003      	b.n	8002daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	041a      	lsls	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	619a      	str	r2, [r3, #24]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002db6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db8:	b08f      	sub	sp, #60	; 0x3c
 8002dba:	af0a      	add	r7, sp, #40	; 0x28
 8002dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e116      	b.n	8002ff6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fe10 	bl	8001a08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2203      	movs	r2, #3
 8002dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f006 fb58 	bl	80094bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	687e      	ldr	r6, [r7, #4]
 8002e14:	466d      	mov	r5, sp
 8002e16:	f106 0410 	add.w	r4, r6, #16
 8002e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e2a:	1d33      	adds	r3, r6, #4
 8002e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2e:	6838      	ldr	r0, [r7, #0]
 8002e30:	f006 fae2 	bl	80093f8 <USB_CoreInit>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0d7      	b.n	8002ff6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f006 fb46 	bl	80094de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	e04a      	b.n	8002eee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e58:	7bfa      	ldrb	r2, [r7, #15]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	333d      	adds	r3, #61	; 0x3d
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	333c      	adds	r3, #60	; 0x3c
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	b298      	uxth	r0, r3
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3342      	adds	r3, #66	; 0x42
 8002e94:	4602      	mov	r2, r0
 8002e96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e98:	7bfa      	ldrb	r2, [r7, #15]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	333f      	adds	r3, #63	; 0x3f
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eac:	7bfa      	ldrb	r2, [r7, #15]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	3344      	adds	r3, #68	; 0x44
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3348      	adds	r3, #72	; 0x48
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3350      	adds	r3, #80	; 0x50
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	3301      	adds	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d3af      	bcc.n	8002e58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
 8002efc:	e044      	b.n	8002f88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f6c:	7bfa      	ldrb	r2, [r7, #15]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	1a9b      	subs	r3, r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	3301      	adds	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d3b5      	bcc.n	8002efe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	687e      	ldr	r6, [r7, #4]
 8002f9a:	466d      	mov	r5, sp
 8002f9c:	f106 0410 	add.w	r4, r6, #16
 8002fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fb0:	1d33      	adds	r3, r6, #4
 8002fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb4:	6838      	ldr	r0, [r7, #0]
 8002fb6:	f006 fabd 	bl	8009534 <USB_DevInit>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e014      	b.n	8002ff6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d102      	bne.n	8002fea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f80b 	bl	8003000 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f006 fc6d 	bl	80098ce <USB_DevDisconnect>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003000 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <HAL_PCDEx_ActivateLPM+0x44>)
 8003030:	4313      	orrs	r3, r2
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	10000003 	.word	0x10000003

08003048 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003050:	4b18      	ldr	r3, [pc, #96]	; (80030b4 <HAL_PWREx_ConfigSupply+0x6c>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b04      	cmp	r3, #4
 800305a:	d008      	beq.n	800306e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800305c:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <HAL_PWREx_ConfigSupply+0x6c>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e01d      	b.n	80030aa <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_PWREx_ConfigSupply+0x6c>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	490f      	ldr	r1, [pc, #60]	; (80030b4 <HAL_PWREx_ConfigSupply+0x6c>)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4313      	orrs	r3, r2
 800307c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800307e:	f7fe fdc7 	bl	8001c10 <HAL_GetTick>
 8003082:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003084:	e009      	b.n	800309a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003086:	f7fe fdc3 	bl	8001c10 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003094:	d901      	bls.n	800309a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e007      	b.n	80030aa <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_PWREx_ConfigSupply+0x6c>)
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a6:	d1ee      	bne.n	8003086 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	58024800 	.word	0x58024800

080030b8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c6:	60d3      	str	r3, [r2, #12]
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	58024800 	.word	0x58024800

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08a      	sub	sp, #40	; 0x28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e3a4      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f8:	4b9a      	ldr	r3, [pc, #616]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003102:	4b98      	ldr	r3, [pc, #608]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003106:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	2b10      	cmp	r3, #16
 800310c:	d007      	beq.n	800311e <HAL_RCC_OscConfig+0x46>
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	2b18      	cmp	r3, #24
 8003112:	d110      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b91      	ldr	r3, [pc, #580]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x12c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e37e      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x76>
 8003140:	4b88      	ldr	r3, [pc, #544]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a87      	ldr	r2, [pc, #540]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b83      	ldr	r3, [pc, #524]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a82      	ldr	r2, [pc, #520]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b80      	ldr	r3, [pc, #512]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a7f      	ldr	r2, [pc, #508]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xbc>
 800317a:	4b7a      	ldr	r3, [pc, #488]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a79      	ldr	r2, [pc, #484]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b77      	ldr	r3, [pc, #476]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a76      	ldr	r2, [pc, #472]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003194:	4b73      	ldr	r3, [pc, #460]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a72      	ldr	r2, [pc, #456]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b70      	ldr	r3, [pc, #448]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6f      	ldr	r2, [pc, #444]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe fd2c 	bl	8001c10 <HAL_GetTick>
 80031b8:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fd28 	bl	8001c10 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e332      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031ce:	4b65      	ldr	r3, [pc, #404]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe4>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fd18 	bl	8001c10 <HAL_GetTick>
 80031e0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fd14 	bl	8001c10 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e31e      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031f6:	4b5b      	ldr	r3, [pc, #364]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x10c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 80b0 	beq.w	8003374 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003214:	4b53      	ldr	r3, [pc, #332]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800321c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800321e:	4b51      	ldr	r3, [pc, #324]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_RCC_OscConfig+0x162>
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2b18      	cmp	r3, #24
 800322e:	d149      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1ec>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d144      	bne.n	80032c4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800323a:	4b4a      	ldr	r3, [pc, #296]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x17a>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e2f0      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003252:	4b44      	ldr	r3, [pc, #272]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0219 	bic.w	r2, r3, #25
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4941      	ldr	r1, [pc, #260]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fcd4 	bl	8001c10 <HAL_GetTick>
 8003268:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326c:	f7fe fcd0 	bl	8001c10 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e2da      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327e:	4b39      	ldr	r3, [pc, #228]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	f7fe fcef 	bl	8001c6c <HAL_GetREVID>
 800328e:	4602      	mov	r2, r0
 8003290:	f241 0303 	movw	r3, #4099	; 0x1003
 8003294:	429a      	cmp	r2, r3
 8003296:	d80a      	bhi.n	80032ae <HAL_RCC_OscConfig+0x1d6>
 8003298:	4b32      	ldr	r3, [pc, #200]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	031b      	lsls	r3, r3, #12
 80032a6:	492f      	ldr	r1, [pc, #188]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ac:	e062      	b.n	8003374 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	4929      	ldr	r1, [pc, #164]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c2:	e057      	b.n	8003374 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d038      	beq.n	800333e <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0219 	bic.w	r2, r3, #25
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4922      	ldr	r1, [pc, #136]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032de:	f7fe fc97 	bl	8001c10 <HAL_GetTick>
 80032e2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032e4:	e008      	b.n	80032f8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032e6:	f7fe fc93 	bl	8001c10 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e29d      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d0f0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003304:	f7fe fcb2 	bl	8001c6c <HAL_GetREVID>
 8003308:	4602      	mov	r2, r0
 800330a:	f241 0303 	movw	r3, #4099	; 0x1003
 800330e:	429a      	cmp	r2, r3
 8003310:	d80a      	bhi.n	8003328 <HAL_RCC_OscConfig+0x250>
 8003312:	4b14      	ldr	r3, [pc, #80]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	031b      	lsls	r3, r3, #12
 8003320:	4910      	ldr	r1, [pc, #64]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	604b      	str	r3, [r1, #4]
 8003326:	e025      	b.n	8003374 <HAL_RCC_OscConfig+0x29c>
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	061b      	lsls	r3, r3, #24
 8003336:	490b      	ldr	r1, [pc, #44]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
 800333c:	e01a      	b.n	8003374 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a08      	ldr	r2, [pc, #32]	; (8003364 <HAL_RCC_OscConfig+0x28c>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fe fc61 	bl	8001c10 <HAL_GetTick>
 800334e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003350:	e00a      	b.n	8003368 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003352:	f7fe fc5d 	bl	8001c10 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d903      	bls.n	8003368 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e267      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
 8003364:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003368:	4ba0      	ldr	r3, [pc, #640]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ee      	bne.n	8003352 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 808f 	beq.w	80034a0 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003382:	4b9a      	ldr	r3, [pc, #616]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800338a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800338c:	4b97      	ldr	r3, [pc, #604]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b08      	cmp	r3, #8
 8003396:	d007      	beq.n	80033a8 <HAL_RCC_OscConfig+0x2d0>
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	2b18      	cmp	r3, #24
 800339c:	d12d      	bne.n	80033fa <HAL_RCC_OscConfig+0x322>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d128      	bne.n	80033fa <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033a8:	4b90      	ldr	r3, [pc, #576]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2e8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e239      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033c0:	f7fe fc54 	bl	8001c6c <HAL_GetREVID>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d80a      	bhi.n	80033e4 <HAL_RCC_OscConfig+0x30c>
 80033ce:	4b87      	ldr	r3, [pc, #540]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	069b      	lsls	r3, r3, #26
 80033dc:	4983      	ldr	r1, [pc, #524]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033e2:	e05d      	b.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033e4:	4b81      	ldr	r3, [pc, #516]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	497e      	ldr	r1, [pc, #504]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033f8:	e052      	b.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d035      	beq.n	800346e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003402:	4b7a      	ldr	r3, [pc, #488]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a79      	ldr	r2, [pc, #484]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340e:	f7fe fbff 	bl	8001c10 <HAL_GetTick>
 8003412:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003414:	e008      	b.n	8003428 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003416:	f7fe fbfb 	bl	8001c10 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	2b02      	cmp	r3, #2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e205      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003428:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f0      	beq.n	8003416 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003434:	f7fe fc1a 	bl	8001c6c <HAL_GetREVID>
 8003438:	4602      	mov	r2, r0
 800343a:	f241 0303 	movw	r3, #4099	; 0x1003
 800343e:	429a      	cmp	r2, r3
 8003440:	d80a      	bhi.n	8003458 <HAL_RCC_OscConfig+0x380>
 8003442:	4b6a      	ldr	r3, [pc, #424]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	069b      	lsls	r3, r3, #26
 8003450:	4966      	ldr	r1, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
 8003456:	e023      	b.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
 8003458:	4b64      	ldr	r3, [pc, #400]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	061b      	lsls	r3, r3, #24
 8003466:	4961      	ldr	r1, [pc, #388]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003468:	4313      	orrs	r3, r2
 800346a:	60cb      	str	r3, [r1, #12]
 800346c:	e018      	b.n	80034a0 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5e      	ldr	r2, [pc, #376]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fe fbc9 	bl	8001c10 <HAL_GetTick>
 800347e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003482:	f7fe fbc5 	bl	8001c10 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e1cf      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003494:	4b55      	ldr	r3, [pc, #340]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d036      	beq.n	800351a <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d019      	beq.n	80034e8 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80034b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b8:	4a4c      	ldr	r2, [pc, #304]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fe fba6 	bl	8001c10 <HAL_GetTick>
 80034c4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe fba2 	bl	8001c10 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e1ac      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x3f0>
 80034e6:	e018      	b.n	800351a <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e8:	4b40      	ldr	r3, [pc, #256]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80034ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ec:	4a3f      	ldr	r2, [pc, #252]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe fb8c 	bl	8001c10 <HAL_GetTick>
 80034f8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fb88 	bl	8001c10 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e192      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d036      	beq.n	8003594 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800352e:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a2e      	ldr	r2, [pc, #184]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003538:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800353a:	f7fe fb69 	bl	8001c10 <HAL_GetTick>
 800353e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003542:	f7fe fb65 	bl	8001c10 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e16f      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x46a>
 8003560:	e018      	b.n	8003594 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a21      	ldr	r2, [pc, #132]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 8003568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800356c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800356e:	f7fe fb4f 	bl	8001c10 <HAL_GetTick>
 8003572:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003576:	f7fe fb4b 	bl	8001c10 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e155      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f0      	bne.n	8003576 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8086 	beq.w	80036ae <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCC_OscConfig+0x518>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a12      	ldr	r2, [pc, #72]	; (80035f0 <HAL_RCC_OscConfig+0x518>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035ae:	f7fe fb2f 	bl	8001c10 <HAL_GetTick>
 80035b2:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035b6:	f7fe fb2b 	bl	8001c10 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b64      	cmp	r3, #100	; 0x64
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e135      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x518>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0f0      	beq.n	80035b6 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d10b      	bne.n	80035f4 <HAL_RCC_OscConfig+0x51c>
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a02      	ldr	r2, [pc, #8]	; (80035ec <HAL_RCC_OscConfig+0x514>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	e032      	b.n	8003650 <HAL_RCC_OscConfig+0x578>
 80035ea:	bf00      	nop
 80035ec:	58024400 	.word	0x58024400
 80035f0:	58024800 	.word	0x58024800
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10c      	bne.n	8003616 <HAL_RCC_OscConfig+0x53e>
 80035fc:	4b8f      	ldr	r3, [pc, #572]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	4a8e      	ldr	r2, [pc, #568]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003602:	f023 0301 	bic.w	r3, r3, #1
 8003606:	6713      	str	r3, [r2, #112]	; 0x70
 8003608:	4b8c      	ldr	r3, [pc, #560]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a8b      	ldr	r2, [pc, #556]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800360e:	f023 0304 	bic.w	r3, r3, #4
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	e01c      	b.n	8003650 <HAL_RCC_OscConfig+0x578>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b05      	cmp	r3, #5
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x560>
 800361e:	4b87      	ldr	r3, [pc, #540]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a86      	ldr	r2, [pc, #536]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6713      	str	r3, [r2, #112]	; 0x70
 800362a:	4b84      	ldr	r3, [pc, #528]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800362c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362e:	4a83      	ldr	r2, [pc, #524]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	6713      	str	r3, [r2, #112]	; 0x70
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0x578>
 8003638:	4b80      	ldr	r3, [pc, #512]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a7f      	ldr	r2, [pc, #508]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	4b7d      	ldr	r3, [pc, #500]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	4a7c      	ldr	r2, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800364a:	f023 0304 	bic.w	r3, r3, #4
 800364e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe fada 	bl	8001c10 <HAL_GetTick>
 800365c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe fad6 	bl	8001c10 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0de      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003676:	4b71      	ldr	r3, [pc, #452]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0ee      	beq.n	8003660 <HAL_RCC_OscConfig+0x588>
 8003682:	e014      	b.n	80036ae <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fe fac4 	bl	8001c10 <HAL_GetTick>
 8003688:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fe fac0 	bl	8001c10 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0c8      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036a2:	4b66      	ldr	r3, [pc, #408]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1ee      	bne.n	800368c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80bd 	beq.w	8003832 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80036b8:	4b60      	ldr	r3, [pc, #384]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c0:	2b18      	cmp	r3, #24
 80036c2:	f000 80b4 	beq.w	800382e <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	f040 8095 	bne.w	80037fa <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d0:	4b5a      	ldr	r3, [pc, #360]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a59      	ldr	r2, [pc, #356]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80036d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe fa98 	bl	8001c10 <HAL_GetTick>
 80036e0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe fa94 	bl	8001c10 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e09e      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036f6:	4b51      	ldr	r3, [pc, #324]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003702:	4b4e      	ldr	r3, [pc, #312]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003706:	4b4e      	ldr	r3, [pc, #312]	; (8003840 <HAL_RCC_OscConfig+0x768>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	430a      	orrs	r2, r1
 8003716:	4949      	ldr	r1, [pc, #292]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003718:	4313      	orrs	r3, r2
 800371a:	628b      	str	r3, [r1, #40]	; 0x28
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	3b01      	subs	r3, #1
 8003722:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372a:	3b01      	subs	r3, #1
 800372c:	025b      	lsls	r3, r3, #9
 800372e:	b29b      	uxth	r3, r3
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	3b01      	subs	r3, #1
 8003738:	041b      	lsls	r3, r3, #16
 800373a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003744:	3b01      	subs	r3, #1
 8003746:	061b      	lsls	r3, r3, #24
 8003748:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800374c:	493b      	ldr	r1, [pc, #236]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800374e:	4313      	orrs	r3, r2
 8003750:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003752:	4b3a      	ldr	r3, [pc, #232]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003756:	4a39      	ldr	r2, [pc, #228]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <HAL_RCC_OscConfig+0x76c>)
 8003764:	4013      	ands	r3, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800376a:	00d2      	lsls	r2, r2, #3
 800376c:	4933      	ldr	r1, [pc, #204]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800376e:	4313      	orrs	r3, r2
 8003770:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003772:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	f023 020c 	bic.w	r2, r3, #12
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	492f      	ldr	r1, [pc, #188]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003780:	4313      	orrs	r3, r2
 8003782:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003784:	4b2d      	ldr	r3, [pc, #180]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f023 0202 	bic.w	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	492a      	ldr	r1, [pc, #168]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003792:	4313      	orrs	r3, r2
 8003794:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003796:	4b29      	ldr	r3, [pc, #164]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379a:	4a28      	ldr	r2, [pc, #160]	; (800383c <HAL_RCC_OscConfig+0x764>)
 800379c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	4a25      	ldr	r2, [pc, #148]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	4a22      	ldr	r2, [pc, #136]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fe fa1d 	bl	8001c10 <HAL_GetTick>
 80037d6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe fa19 	bl	8001c10 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e023      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x702>
 80037f8:	e01b      	b.n	8003832 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RCC_OscConfig+0x764>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a0f      	ldr	r2, [pc, #60]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fe fa03 	bl	8001c10 <HAL_GetTick>
 800380a:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380e:	f7fe f9ff 	bl	8001c10 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e009      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_OscConfig+0x764>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x736>
 800382c:	e001      	b.n	8003832 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	58024400 	.word	0x58024400
 8003840:	fffffc0c 	.word	0xfffffc0c
 8003844:	ffff0007 	.word	0xffff0007

08003848 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e18d      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b8a      	ldr	r3, [pc, #552]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d910      	bls.n	800388c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b87      	ldr	r3, [pc, #540]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 020f 	bic.w	r2, r3, #15
 8003872:	4985      	ldr	r1, [pc, #532]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	4313      	orrs	r3, r2
 8003878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b83      	ldr	r3, [pc, #524]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e175      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	4b7b      	ldr	r3, [pc, #492]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d908      	bls.n	80038ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038a8:	4b78      	ldr	r3, [pc, #480]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	4975      	ldr	r1, [pc, #468]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d010      	beq.n	80038e8 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	4b70      	ldr	r3, [pc, #448]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d908      	bls.n	80038e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038d6:	4b6d      	ldr	r3, [pc, #436]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	496a      	ldr	r1, [pc, #424]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d010      	beq.n	8003916 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	4b64      	ldr	r3, [pc, #400]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003900:	429a      	cmp	r2, r3
 8003902:	d908      	bls.n	8003916 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003904:	4b61      	ldr	r3, [pc, #388]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	495e      	ldr	r1, [pc, #376]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003912:	4313      	orrs	r3, r2
 8003914:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d010      	beq.n	8003944 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800392e:	429a      	cmp	r2, r3
 8003930:	d908      	bls.n	8003944 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003932:	4b56      	ldr	r3, [pc, #344]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	4953      	ldr	r1, [pc, #332]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003940:	4313      	orrs	r3, r2
 8003942:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d010      	beq.n	8003972 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68da      	ldr	r2, [r3, #12]
 8003954:	4b4d      	ldr	r3, [pc, #308]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f003 030f 	and.w	r3, r3, #15
 800395c:	429a      	cmp	r2, r3
 800395e:	d908      	bls.n	8003972 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003960:	4b4a      	ldr	r3, [pc, #296]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f023 020f 	bic.w	r2, r3, #15
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4947      	ldr	r1, [pc, #284]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800396e:	4313      	orrs	r3, r2
 8003970:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d055      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800397e:	4b43      	ldr	r3, [pc, #268]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	4940      	ldr	r1, [pc, #256]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800398c:	4313      	orrs	r3, r2
 800398e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003998:	4b3c      	ldr	r3, [pc, #240]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d121      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0e7      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b03      	cmp	r3, #3
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b0:	4b36      	ldr	r3, [pc, #216]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d115      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e0db      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039c8:	4b30      	ldr	r3, [pc, #192]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0cf      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0c7      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e8:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f023 0207 	bic.w	r2, r3, #7
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4925      	ldr	r1, [pc, #148]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039fa:	f7fe f909 	bl	8001c10 <HAL_GetTick>
 80039fe:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a02:	f7fe f905 	bl	8001c10 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e0af      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d1eb      	bne.n	8003a02 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	4b14      	ldr	r3, [pc, #80]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d208      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	f023 020f 	bic.w	r2, r3, #15
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	490e      	ldr	r1, [pc, #56]	; (8003a8c <HAL_RCC_ClockConfig+0x244>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a58:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d214      	bcs.n	8003a90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f023 020f 	bic.w	r2, r3, #15
 8003a6e:	4906      	ldr	r1, [pc, #24]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_RCC_ClockConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e077      	b.n	8003b78 <HAL_RCC_ClockConfig+0x330>
 8003a88:	52002000 	.word	0x52002000
 8003a8c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d010      	beq.n	8003abe <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d208      	bcs.n	8003abe <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aac:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	4931      	ldr	r1, [pc, #196]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695a      	ldr	r2, [r3, #20]
 8003ace:	4b2c      	ldr	r3, [pc, #176]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d208      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ada:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	4926      	ldr	r1, [pc, #152]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d208      	bcs.n	8003b1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	491a      	ldr	r1, [pc, #104]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d208      	bcs.n	8003b48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	490f      	ldr	r1, [pc, #60]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b48:	f000 f822 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8003b4c:	4601      	mov	r1, r0
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <HAL_RCC_ClockConfig+0x338>)
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <HAL_RCC_ClockConfig+0x33c>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	fa21 f303 	lsr.w	r3, r1, r3
 8003b64:	4a08      	ldr	r2, [pc, #32]	; (8003b88 <HAL_RCC_ClockConfig+0x340>)
 8003b66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_RCC_ClockConfig+0x344>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe f805 	bl	8001b7c <HAL_InitTick>
 8003b72:	4603      	mov	r3, r0
 8003b74:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	58024400 	.word	0x58024400
 8003b84:	080099e8 	.word	0x080099e8
 8003b88:	24000000 	.word	0x24000000
 8003b8c:	24000008 	.word	0x24000008

08003b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b089      	sub	sp, #36	; 0x24
 8003b94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b96:	4baf      	ldr	r3, [pc, #700]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b9e:	2b18      	cmp	r3, #24
 8003ba0:	f200 814e 	bhi.w	8003e40 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <HAL_RCC_GetSysClockFreq+0x1c>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003c11 	.word	0x08003c11
 8003bb0:	08003e41 	.word	0x08003e41
 8003bb4:	08003e41 	.word	0x08003e41
 8003bb8:	08003e41 	.word	0x08003e41
 8003bbc:	08003e41 	.word	0x08003e41
 8003bc0:	08003e41 	.word	0x08003e41
 8003bc4:	08003e41 	.word	0x08003e41
 8003bc8:	08003e41 	.word	0x08003e41
 8003bcc:	08003c37 	.word	0x08003c37
 8003bd0:	08003e41 	.word	0x08003e41
 8003bd4:	08003e41 	.word	0x08003e41
 8003bd8:	08003e41 	.word	0x08003e41
 8003bdc:	08003e41 	.word	0x08003e41
 8003be0:	08003e41 	.word	0x08003e41
 8003be4:	08003e41 	.word	0x08003e41
 8003be8:	08003e41 	.word	0x08003e41
 8003bec:	08003c3d 	.word	0x08003c3d
 8003bf0:	08003e41 	.word	0x08003e41
 8003bf4:	08003e41 	.word	0x08003e41
 8003bf8:	08003e41 	.word	0x08003e41
 8003bfc:	08003e41 	.word	0x08003e41
 8003c00:	08003e41 	.word	0x08003e41
 8003c04:	08003e41 	.word	0x08003e41
 8003c08:	08003e41 	.word	0x08003e41
 8003c0c:	08003c43 	.word	0x08003c43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c10:	4b90      	ldr	r3, [pc, #576]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d009      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c1c:	4b8d      	ldr	r3, [pc, #564]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	08db      	lsrs	r3, r3, #3
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	4a8c      	ldr	r2, [pc, #560]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003c2e:	e10a      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c30:	4b89      	ldr	r3, [pc, #548]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c32:	61bb      	str	r3, [r7, #24]
    break;
 8003c34:	e107      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c36:	4b89      	ldr	r3, [pc, #548]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c38:	61bb      	str	r3, [r7, #24]
    break;
 8003c3a:	e104      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c3c:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003c3e:	61bb      	str	r3, [r7, #24]
    break;
 8003c40:	e101      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c42:	4b84      	ldr	r3, [pc, #528]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c4c:	4b81      	ldr	r3, [pc, #516]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c58:	4b7e      	ldr	r3, [pc, #504]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c62:	4b7c      	ldr	r3, [pc, #496]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c66:	08db      	lsrs	r3, r3, #3
 8003c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80da 	beq.w	8003e3a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d05a      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d302      	bcc.n	8003c96 <HAL_RCC_GetSysClockFreq+0x106>
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d078      	beq.n	8003d86 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003c94:	e099      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c96:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d02d      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	4a6a      	ldr	r2, [pc, #424]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003cae:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	ee07 3a90 	vmov	s15, r3
 8003cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cdc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ce0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ce4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ce8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cf8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003cfc:	e087      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	ee07 3a90 	vmov	s15, r3
 8003d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d08:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003e68 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003d0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d20:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d24:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d40:	e065      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	ee07 3a90 	vmov	s15, r3
 8003d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003e6c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003d50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d54:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d68:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d84:	e043      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	ee07 3a90 	vmov	s15, r3
 8003d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d90:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003e70 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003d94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dc8:	e021      	b.n	8003e0e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003e6c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dec:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003e64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003e0e:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	0a5b      	lsrs	r3, r3, #9
 8003e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e18:	3301      	adds	r3, #1
 8003e1a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	ee07 3a90 	vmov	s15, r3
 8003e22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e32:	ee17 3a90 	vmov	r3, s15
 8003e36:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e38:	e005      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
    break;
 8003e3e:	e002      	b.n	8003e46 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003e40:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003e42:	61bb      	str	r3, [r7, #24]
    break;
 8003e44:	bf00      	nop
  }

  return sysclockfreq;
 8003e46:	69bb      	ldr	r3, [r7, #24]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3724      	adds	r7, #36	; 0x24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	58024400 	.word	0x58024400
 8003e58:	03d09000 	.word	0x03d09000
 8003e5c:	003d0900 	.word	0x003d0900
 8003e60:	007a1200 	.word	0x007a1200
 8003e64:	46000000 	.word	0x46000000
 8003e68:	4c742400 	.word	0x4c742400
 8003e6c:	4a742400 	.word	0x4a742400
 8003e70:	4af42400 	.word	0x4af42400

08003e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e78:	f001 f9e2 	bl	8005240 <HAL_RCCEx_GetD1SysClockFreq>
 8003e7c:	4601      	mov	r1, r0
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <HAL_RCC_GetHCLKFreq+0x30>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	f003 031f 	and.w	r3, r3, #31
 8003e8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e94:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e98:	681b      	ldr	r3, [r3, #0]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	080099e8 	.word	0x080099e8
 8003ea8:	24000004 	.word	0x24000004

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003eb0:	f7ff ffe0 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4601      	mov	r1, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	080099e8 	.word	0x080099e8

08003ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003edc:	f7ff ffca 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4601      	mov	r1, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4a04      	ldr	r2, [pc, #16]	; (8003f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	58024400 	.word	0x58024400
 8003f00:	080099e8 	.word	0x080099e8

08003f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f10:	2300      	movs	r3, #0
 8003f12:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d03d      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f28:	d013      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2e:	d802      	bhi.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003f34:	e01f      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f3a:	d013      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003f3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f40:	d01c      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003f42:	e018      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f44:	4baf      	ldr	r3, [pc, #700]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4aae      	ldr	r2, [pc, #696]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f50:	e015      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3304      	adds	r3, #4
 8003f56:	2102      	movs	r1, #2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f001 f98d 	bl	8005278 <RCCEx_PLL2_Config>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f62:	e00c      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3324      	adds	r3, #36	; 0x24
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f001 fa36 	bl	80053dc <RCCEx_PLL3_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7e:	7dfb      	ldrb	r3, [r7, #23]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d109      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f84:	4b9f      	ldr	r3, [pc, #636]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f90:	499c      	ldr	r1, [pc, #624]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	650b      	str	r3, [r1, #80]	; 0x50
 8003f96:	e001      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
 8003f9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d03d      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d826      	bhi.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003fb0:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08003fcd 	.word	0x08003fcd
 8003fbc:	08003fdb 	.word	0x08003fdb
 8003fc0:	08003fed 	.word	0x08003fed
 8003fc4:	08004005 	.word	0x08004005
 8003fc8:	08004005 	.word	0x08004005
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fcc:	4b8d      	ldr	r3, [pc, #564]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	4a8c      	ldr	r2, [pc, #560]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fd8:	e015      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 f949 	bl	8005278 <RCCEx_PLL2_Config>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fea:	e00c      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3324      	adds	r3, #36	; 0x24
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f9f2 	bl	80053dc <RCCEx_PLL3_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ffc:	e003      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
      break;
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800400c:	4b7d      	ldr	r3, [pc, #500]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800400e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004010:	f023 0207 	bic.w	r2, r3, #7
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	497a      	ldr	r1, [pc, #488]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800401a:	4313      	orrs	r3, r2
 800401c:	650b      	str	r3, [r1, #80]	; 0x50
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402c:	2b00      	cmp	r3, #0
 800402e:	d03e      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	2b80      	cmp	r3, #128	; 0x80
 8004036:	d01c      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004038:	2b80      	cmp	r3, #128	; 0x80
 800403a:	d804      	bhi.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d00d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004044:	e01e      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004046:	2bc0      	cmp	r3, #192	; 0xc0
 8004048:	d01f      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800404a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800404e:	d01e      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004050:	e018      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004052:	4b6c      	ldr	r3, [pc, #432]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	4a6b      	ldr	r2, [pc, #428]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800405e:	e017      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f906 	bl	8005278 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004070:	e00e      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3324      	adds	r3, #36	; 0x24
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f001 f9af 	bl	80053dc <RCCEx_PLL3_Config>
 800407e:	4603      	mov	r3, r0
 8004080:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004082:	e005      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	75fb      	strb	r3, [r7, #23]
      break;
 8004088:	e002      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800408e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004096:	4b5b      	ldr	r3, [pc, #364]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	4958      	ldr	r1, [pc, #352]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	650b      	str	r3, [r1, #80]	; 0x50
 80040a8:	e001      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d044      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c4:	d01f      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80040c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ca:	d805      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040d4:	d00e      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80040d6:	e01f      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80040d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040dc:	d01f      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80040de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040e2:	d01e      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040e4:	e018      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e6:	4b47      	ldr	r3, [pc, #284]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ea:	4a46      	ldr	r2, [pc, #280]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040f2:	e017      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 f8bc 	bl	8005278 <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004104:	e00e      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 f965 	bl	80053dc <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004116:	e005      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      break;
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800411e:	bf00      	nop
 8004120:	e000      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800412a:	4b36      	ldr	r3, [pc, #216]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004138:	4932      	ldr	r1, [pc, #200]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800413a:	4313      	orrs	r3, r2
 800413c:	658b      	str	r3, [r1, #88]	; 0x58
 800413e:	e001      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
 8004142:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414c:	2b00      	cmp	r3, #0
 800414e:	d044      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800415a:	d01f      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800415c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004160:	d805      	bhi.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800416a:	d00e      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800416c:	e01f      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800416e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004172:	d01f      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004174:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004178:	d01e      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800417a:	e018      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800417c:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4a20      	ldr	r2, [pc, #128]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004188:	e017      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	2100      	movs	r1, #0
 8004190:	4618      	mov	r0, r3
 8004192:	f001 f871 	bl	8005278 <RCCEx_PLL2_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800419a:	e00e      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3324      	adds	r3, #36	; 0x24
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f001 f91a 	bl	80053dc <RCCEx_PLL3_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80041ac:	e005      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	75fb      	strb	r3, [r7, #23]
      break;
 80041b2:	e002      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80041b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041c0:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041ce:	490d      	ldr	r1, [pc, #52]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	658b      	str	r3, [r1, #88]	; 0x58
 80041d4:	e001      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d6:	7dfb      	ldrb	r3, [r7, #23]
 80041d8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d035      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d00c      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80041ee:	2b10      	cmp	r3, #16
 80041f0:	d802      	bhi.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80041f6:	e017      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d00c      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80041fc:	2b30      	cmp	r3, #48	; 0x30
 80041fe:	d018      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004200:	e012      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004202:	bf00      	nop
 8004204:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004208:	4baf      	ldr	r3, [pc, #700]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	4aae      	ldr	r2, [pc, #696]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800420e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004214:	e00e      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3304      	adds	r3, #4
 800421a:	2102      	movs	r1, #2
 800421c:	4618      	mov	r0, r3
 800421e:	f001 f82b 	bl	8005278 <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004226:	e005      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	75fb      	strb	r3, [r7, #23]
      break;
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800423a:	4ba3      	ldr	r3, [pc, #652]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800423c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800423e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	49a0      	ldr	r1, [pc, #640]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800424c:	e001      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424e:	7dfb      	ldrb	r3, [r7, #23]
 8004250:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d042      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	d01f      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426c:	d805      	bhi.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d00e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004278:	e01f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800427a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800427e:	d01f      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d01e      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004286:	e018      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004288:	4b8f      	ldr	r3, [pc, #572]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	4a8e      	ldr	r2, [pc, #568]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800428e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004292:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004294:	e017      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3304      	adds	r3, #4
 800429a:	2100      	movs	r1, #0
 800429c:	4618      	mov	r0, r3
 800429e:	f000 ffeb 	bl	8005278 <RCCEx_PLL2_Config>
 80042a2:	4603      	mov	r3, r0
 80042a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042a6:	e00e      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3324      	adds	r3, #36	; 0x24
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f001 f894 	bl	80053dc <RCCEx_PLL3_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042b8:	e005      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
      break;
 80042be:	e002      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80042c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042cc:	4b7e      	ldr	r3, [pc, #504]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d8:	497b      	ldr	r1, [pc, #492]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	650b      	str	r3, [r1, #80]	; 0x50
 80042de:	e001      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d042      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042f8:	d01b      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042fe:	d805      	bhi.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d022      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800430a:	e01b      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800430c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004310:	d01d      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004312:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004316:	d01c      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800431c:	d01b      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800431e:	e011      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ffa6 	bl	8005278 <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004330:	e012      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3324      	adds	r3, #36	; 0x24
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f84f 	bl	80053dc <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
      break;
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800435e:	4b5a      	ldr	r3, [pc, #360]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436a:	4957      	ldr	r1, [pc, #348]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	650b      	str	r3, [r1, #80]	; 0x50
 8004370:	e001      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d044      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438c:	d01b      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800438e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004392:	d805      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d022      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800439c:	d00a      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800439e:	e01b      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d01d      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80043a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043aa:	d01c      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80043ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043b0:	d01b      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80043b2:	e011      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	2101      	movs	r1, #1
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 ff5c 	bl	8005278 <RCCEx_PLL2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043c4:	e012      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3324      	adds	r3, #36	; 0x24
 80043ca:	2101      	movs	r1, #1
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 f805 	bl	80053dc <RCCEx_PLL3_Config>
 80043d2:	4603      	mov	r3, r0
 80043d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043d6:	e009      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	75fb      	strb	r3, [r7, #23]
      break;
 80043dc:	e006      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043de:	bf00      	nop
 80043e0:	e004      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043e2:	bf00      	nop
 80043e4:	e002      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043e6:	bf00      	nop
 80043e8:	e000      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043f2:	4b35      	ldr	r3, [pc, #212]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004400:	4931      	ldr	r1, [pc, #196]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004402:	4313      	orrs	r3, r2
 8004404:	658b      	str	r3, [r1, #88]	; 0x58
 8004406:	e001      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02d      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004420:	d005      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004426:	d009      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004428:	2b00      	cmp	r3, #0
 800442a:	d013      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800442c:	e00f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	4a25      	ldr	r2, [pc, #148]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800443a:	e00c      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f000 ff18 	bl	8005278 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800444c:	e003      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	75fb      	strb	r3, [r7, #23]
      break;
 8004452:	e000      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004456:	7dfb      	ldrb	r3, [r7, #23]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800445c:	4b1a      	ldr	r3, [pc, #104]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800445e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004460:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004468:	4917      	ldr	r1, [pc, #92]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	650b      	str	r3, [r1, #80]	; 0x50
 800446e:	e001      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	7dfb      	ldrb	r3, [r7, #23]
 8004472:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d035      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004484:	2b03      	cmp	r3, #3
 8004486:	d81b      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004488:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800448a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448e:	bf00      	nop
 8004490:	080044cd 	.word	0x080044cd
 8004494:	080044a1 	.word	0x080044a1
 8004498:	080044af 	.word	0x080044af
 800449c:	080044cd 	.word	0x080044cd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80044a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044ac:	e00f      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3304      	adds	r3, #4
 80044b2:	2102      	movs	r1, #2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fedf 	bl	8005278 <RCCEx_PLL2_Config>
 80044ba:	4603      	mov	r3, r0
 80044bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044be:	e006      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	75fb      	strb	r3, [r7, #23]
      break;
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80044c6:	bf00      	nop
 80044c8:	58024400 	.word	0x58024400
      break;
 80044cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d109      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044d4:	4bba      	ldr	r3, [pc, #744]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	f023 0203 	bic.w	r2, r3, #3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	49b7      	ldr	r1, [pc, #732]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044e6:	e001      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8086 	beq.w	8004606 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044fa:	4bb2      	ldr	r3, [pc, #712]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4ab1      	ldr	r2, [pc, #708]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004506:	f7fd fb83 	bl	8001c10 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800450c:	e009      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800450e:	f7fd fb7f 	bl	8001c10 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b64      	cmp	r3, #100	; 0x64
 800451a:	d902      	bls.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	75fb      	strb	r3, [r7, #23]
        break;
 8004520:	e005      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004522:	4ba8      	ldr	r3, [pc, #672]	; (80047c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ef      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800452e:	7dfb      	ldrb	r3, [r7, #23]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d166      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004534:	4ba2      	ldr	r3, [pc, #648]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004536:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800453e:	4053      	eors	r3, r2
 8004540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004548:	4b9d      	ldr	r3, [pc, #628]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800454a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004550:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004552:	4b9b      	ldr	r3, [pc, #620]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a9a      	ldr	r2, [pc, #616]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800455e:	4b98      	ldr	r3, [pc, #608]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	4a97      	ldr	r2, [pc, #604]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004568:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800456a:	4a95      	ldr	r2, [pc, #596]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457a:	d115      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fb48 	bl	8001c10 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004582:	e00b      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004584:	f7fd fb44 	bl	8001c10 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d902      	bls.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	75fb      	strb	r3, [r7, #23]
            break;
 800459a:	e005      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800459c:	4b88      	ldr	r3, [pc, #544]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d0ed      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d126      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045bc:	d10d      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80045be:	4b80      	ldr	r3, [pc, #512]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045cc:	0919      	lsrs	r1, r3, #4
 80045ce:	4b7e      	ldr	r3, [pc, #504]	; (80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80045d0:	400b      	ands	r3, r1
 80045d2:	497b      	ldr	r1, [pc, #492]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	610b      	str	r3, [r1, #16]
 80045d8:	e005      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80045da:	4b79      	ldr	r3, [pc, #484]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	4a78      	ldr	r2, [pc, #480]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045e4:	6113      	str	r3, [r2, #16]
 80045e6:	4b76      	ldr	r3, [pc, #472]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f4:	4972      	ldr	r1, [pc, #456]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	670b      	str	r3, [r1, #112]	; 0x70
 80045fa:	e004      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045fc:	7dfb      	ldrb	r3, [r7, #23]
 80045fe:	75bb      	strb	r3, [r7, #22]
 8004600:	e001      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004602:	7dfb      	ldrb	r3, [r7, #23]
 8004604:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d07d      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004616:	2b28      	cmp	r3, #40	; 0x28
 8004618:	d866      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	080046ef 	.word	0x080046ef
 8004624:	080046e9 	.word	0x080046e9
 8004628:	080046e9 	.word	0x080046e9
 800462c:	080046e9 	.word	0x080046e9
 8004630:	080046e9 	.word	0x080046e9
 8004634:	080046e9 	.word	0x080046e9
 8004638:	080046e9 	.word	0x080046e9
 800463c:	080046e9 	.word	0x080046e9
 8004640:	080046c5 	.word	0x080046c5
 8004644:	080046e9 	.word	0x080046e9
 8004648:	080046e9 	.word	0x080046e9
 800464c:	080046e9 	.word	0x080046e9
 8004650:	080046e9 	.word	0x080046e9
 8004654:	080046e9 	.word	0x080046e9
 8004658:	080046e9 	.word	0x080046e9
 800465c:	080046e9 	.word	0x080046e9
 8004660:	080046d7 	.word	0x080046d7
 8004664:	080046e9 	.word	0x080046e9
 8004668:	080046e9 	.word	0x080046e9
 800466c:	080046e9 	.word	0x080046e9
 8004670:	080046e9 	.word	0x080046e9
 8004674:	080046e9 	.word	0x080046e9
 8004678:	080046e9 	.word	0x080046e9
 800467c:	080046e9 	.word	0x080046e9
 8004680:	080046ef 	.word	0x080046ef
 8004684:	080046e9 	.word	0x080046e9
 8004688:	080046e9 	.word	0x080046e9
 800468c:	080046e9 	.word	0x080046e9
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046e9 	.word	0x080046e9
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046e9 	.word	0x080046e9
 80046a0:	080046ef 	.word	0x080046ef
 80046a4:	080046e9 	.word	0x080046e9
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	080046e9 	.word	0x080046e9
 80046b4:	080046e9 	.word	0x080046e9
 80046b8:	080046e9 	.word	0x080046e9
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046ef 	.word	0x080046ef
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	2101      	movs	r1, #1
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fdd4 	bl	8005278 <RCCEx_PLL2_Config>
 80046d0:	4603      	mov	r3, r0
 80046d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046d4:	e00c      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3324      	adds	r3, #36	; 0x24
 80046da:	2101      	movs	r1, #1
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fe7d 	bl	80053dc <RCCEx_PLL3_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046e6:	e003      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	75fb      	strb	r3, [r7, #23]
      break;
 80046ec:	e000      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80046ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f0:	7dfb      	ldrb	r3, [r7, #23]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046f6:	4b32      	ldr	r3, [pc, #200]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004702:	492f      	ldr	r1, [pc, #188]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004704:	4313      	orrs	r3, r2
 8004706:	654b      	str	r3, [r1, #84]	; 0x54
 8004708:	e001      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	7dfb      	ldrb	r3, [r7, #23]
 800470c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d037      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471e:	2b05      	cmp	r3, #5
 8004720:	d820      	bhi.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004722:	a201      	add	r2, pc, #4	; (adr r2, 8004728 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004728:	0800476b 	.word	0x0800476b
 800472c:	08004741 	.word	0x08004741
 8004730:	08004753 	.word	0x08004753
 8004734:	0800476b 	.word	0x0800476b
 8004738:	0800476b 	.word	0x0800476b
 800473c:	0800476b 	.word	0x0800476b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	2101      	movs	r1, #1
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fd96 	bl	8005278 <RCCEx_PLL2_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004750:	e00c      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3324      	adds	r3, #36	; 0x24
 8004756:	2101      	movs	r1, #1
 8004758:	4618      	mov	r0, r3
 800475a:	f000 fe3f 	bl	80053dc <RCCEx_PLL3_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
      break;
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800476a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f023 0207 	bic.w	r2, r3, #7
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477e:	4910      	ldr	r1, [pc, #64]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	654b      	str	r3, [r1, #84]	; 0x54
 8004784:	e001      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004786:	7dfb      	ldrb	r3, [r7, #23]
 8004788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d040      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	2b05      	cmp	r3, #5
 800479e:	d827      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047f7 	.word	0x080047f7
 80047ac:	080047cd 	.word	0x080047cd
 80047b0:	080047df 	.word	0x080047df
 80047b4:	080047f7 	.word	0x080047f7
 80047b8:	080047f7 	.word	0x080047f7
 80047bc:	080047f7 	.word	0x080047f7
 80047c0:	58024400 	.word	0x58024400
 80047c4:	58024800 	.word	0x58024800
 80047c8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	2101      	movs	r1, #1
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fd50 	bl	8005278 <RCCEx_PLL2_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047dc:	e00c      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3324      	adds	r3, #36	; 0x24
 80047e2:	2101      	movs	r1, #1
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fdf9 	bl	80053dc <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047ee:	e003      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
      break;
 80047f4:	e000      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80047f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f8:	7dfb      	ldrb	r3, [r7, #23]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047fe:	4bb3      	ldr	r3, [pc, #716]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004802:	f023 0207 	bic.w	r2, r3, #7
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	49af      	ldr	r1, [pc, #700]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	658b      	str	r3, [r1, #88]	; 0x58
 8004812:	e001      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	7dfb      	ldrb	r3, [r7, #23]
 8004816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b00      	cmp	r3, #0
 8004822:	d044      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482e:	d01b      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004834:	d805      	bhi.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d022      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800483a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004840:	e01b      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004846:	d01d      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484c:	d01c      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800484e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004852:	d01b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004854:	e011      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fd0b 	bl	8005278 <RCCEx_PLL2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004866:	e012      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3324      	adds	r3, #36	; 0x24
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fdb4 	bl	80053dc <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004878:	e009      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
      break;
 800487e:	e006      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004880:	bf00      	nop
 8004882:	e004      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004884:	bf00      	nop
 8004886:	e002      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004888:	bf00      	nop
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800488c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004894:	4b8d      	ldr	r3, [pc, #564]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a2:	498a      	ldr	r1, [pc, #552]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	654b      	str	r3, [r1, #84]	; 0x54
 80048a8:	e001      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d044      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c4:	d01b      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80048c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ca:	d805      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d022      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80048d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80048d6:	e01b      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80048d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048dc:	d01d      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80048de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e2:	d01c      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80048e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048e8:	d01b      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80048ea:	e011      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fcc0 	bl	8005278 <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048fc:	e012      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	2102      	movs	r1, #2
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fd69 	bl	80053dc <RCCEx_PLL3_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800490e:	e009      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
      break;
 8004914:	e006      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004916:	bf00      	nop
 8004918:	e004      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800491a:	bf00      	nop
 800491c:	e002      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800491e:	bf00      	nop
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004922:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004924:	7dfb      	ldrb	r3, [r7, #23]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800492a:	4b68      	ldr	r3, [pc, #416]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004938:	4964      	ldr	r1, [pc, #400]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800493a:	4313      	orrs	r3, r2
 800493c:	658b      	str	r3, [r1, #88]	; 0x58
 800493e:	e001      	b.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004940:	7dfb      	ldrb	r3, [r7, #23]
 8004942:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b00      	cmp	r3, #0
 800494e:	d044      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800495a:	d01b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800495c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004960:	d805      	bhi.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004962:	2b00      	cmp	r3, #0
 8004964:	d022      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800496c:	e01b      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800496e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004972:	d01d      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004974:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004978:	d01c      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800497a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800497e:	d01b      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004980:	e011      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3304      	adds	r3, #4
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fc75 	bl	8005278 <RCCEx_PLL2_Config>
 800498e:	4603      	mov	r3, r0
 8004990:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004992:	e012      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3324      	adds	r3, #36	; 0x24
 8004998:	2102      	movs	r1, #2
 800499a:	4618      	mov	r0, r3
 800499c:	f000 fd1e 	bl	80053dc <RCCEx_PLL3_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049a4:	e009      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
      break;
 80049aa:	e006      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80049ac:	bf00      	nop
 80049ae:	e004      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80049b0:	bf00      	nop
 80049b2:	e002      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80049b4:	bf00      	nop
 80049b6:	e000      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80049b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10a      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049ce:	493f      	ldr	r1, [pc, #252]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	658b      	str	r3, [r1, #88]	; 0x58
 80049d4:	e001      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01b      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d10b      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	; 0x24
 80049f6:	2102      	movs	r1, #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fcef 	bl	80053dc <RCCEx_PLL3_Config>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00c      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75bb      	strb	r3, [r7, #22]
 8004a08:	e009      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a0a:	4b30      	ldr	r3, [pc, #192]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a18:	492c      	ldr	r1, [pc, #176]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d01b      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a34:	d10b      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3324      	adds	r3, #36	; 0x24
 8004a3a:	2102      	movs	r1, #2
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fccd 	bl	80053dc <RCCEx_PLL3_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00c      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	75bb      	strb	r3, [r7, #22]
 8004a4c:	e009      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a4e:	4b1f      	ldr	r3, [pc, #124]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a5c:	491b      	ldr	r1, [pc, #108]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d032      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d00d      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004a7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a7e:	d016      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d111      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3304      	adds	r3, #4
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fbf4 	bl	8005278 <RCCEx_PLL2_Config>
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a94:	e00c      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3324      	adds	r3, #36	; 0x24
 8004a9a:	2102      	movs	r1, #2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f000 fc9d 	bl	80053dc <RCCEx_PLL3_Config>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004aa6:	e003      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004aac:	e000      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8004aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab0:	7dfb      	ldrb	r3, [r7, #23]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ac4:	4901      	ldr	r1, [pc, #4]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	658b      	str	r3, [r1, #88]	; 0x58
 8004aca:	e003      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02f      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aea:	d00c      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004af0:	d015      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af6:	d10f      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af8:	4b79      	ldr	r3, [pc, #484]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	4a78      	ldr	r2, [pc, #480]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b04:	e00c      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	3324      	adds	r3, #36	; 0x24
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fc65 	bl	80053dc <RCCEx_PLL3_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b16:	e003      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b1c:	e000      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8004b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b26:	4b6e      	ldr	r3, [pc, #440]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b34:	496a      	ldr	r1, [pc, #424]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	654b      	str	r3, [r1, #84]	; 0x54
 8004b3a:	e001      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b3c:	7dfb      	ldrb	r3, [r7, #23]
 8004b3e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d029      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b58:	d007      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004b5a:	e00f      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b5c:	4b60      	ldr	r3, [pc, #384]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a5f      	ldr	r2, [pc, #380]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b68:	e00b      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fb81 	bl	8005278 <RCCEx_PLL2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b7a:	e002      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d109      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b88:	4b55      	ldr	r3, [pc, #340]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b94:	4952      	ldr	r1, [pc, #328]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b9a:	e001      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b9c:	7dfb      	ldrb	r3, [r7, #23]
 8004b9e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3324      	adds	r3, #36	; 0x24
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fc12 	bl	80053dc <RCCEx_PLL3_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d02f      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bdc:	d802      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d011      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004be2:	e00d      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004be8:	d00f      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bee:	d00e      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8004bf0:	e006      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf2:	4b3b      	ldr	r3, [pc, #236]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	4a3a      	ldr	r2, [pc, #232]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004bfe:	e007      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	75fb      	strb	r3, [r7, #23]
      break;
 8004c04:	e004      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004c06:	bf00      	nop
 8004c08:	e002      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c10:	7dfb      	ldrb	r3, [r7, #23]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c16:	4b32      	ldr	r3, [pc, #200]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c22:	492f      	ldr	r1, [pc, #188]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	654b      	str	r3, [r1, #84]	; 0x54
 8004c28:	e001      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c3a:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c46:	4926      	ldr	r1, [pc, #152]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c58:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c66:	491e      	ldr	r1, [pc, #120]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c84:	4916      	ldr	r1, [pc, #88]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c96:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ca0:	6113      	str	r3, [r2, #16]
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ca4:	691a      	ldr	r2, [r3, #16]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004cac:	490c      	ldr	r1, [pc, #48]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da08      	bge.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cba:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc6:	4906      	ldr	r1, [pc, #24]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004ccc:	7dbb      	ldrb	r3, [r7, #22]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	58024400 	.word	0x58024400

08004ce4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ce8:	f7ff f8c4 	bl	8003e74 <HAL_RCC_GetHCLKFreq>
 8004cec:	4601      	mov	r1, r0
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	091b      	lsrs	r3, r3, #4
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cfa:	5cd3      	ldrb	r3, [r2, r3]
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	080099e8 	.word	0x080099e8

08004d10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d18:	4b9d      	ldr	r3, [pc, #628]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004d22:	4b9b      	ldr	r3, [pc, #620]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	0b1b      	lsrs	r3, r3, #12
 8004d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d2c:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004d2e:	4b98      	ldr	r3, [pc, #608]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d38:	4b95      	ldr	r3, [pc, #596]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	fb02 f303 	mul.w	r3, r2, r3
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 810a 	beq.w	8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d05a      	beq.n	8004e18 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d302      	bcc.n	8004d6c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d078      	beq.n	8004e5c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004d6a:	e099      	b.n	8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d6c:	4b88      	ldr	r3, [pc, #544]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0320 	and.w	r3, r3, #32
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d02d      	beq.n	8004dd4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d78:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	08db      	lsrs	r3, r3, #3
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	4a84      	ldr	r2, [pc, #528]	; (8004f94 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
 8004d88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004da2:	4b7b      	ldr	r3, [pc, #492]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004db6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004dd2:	e087      	b.n	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f9c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e16:	e065      	b.n	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e5a:	e043      	b.n	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b48      	ldr	r3, [pc, #288]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e82:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e9e:	e021      	b.n	8004ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f98 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ee2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004ee4:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	0a5b      	lsrs	r3, r3, #9
 8004eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f0a:	ee17 2a90 	vmov	r2, s15
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f12:	4b1f      	ldr	r3, [pc, #124]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f38:	ee17 2a90 	vmov	r2, s15
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f40:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	0e1b      	lsrs	r3, r3, #24
 8004f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f66:	ee17 2a90 	vmov	r2, s15
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f6e:	e008      	b.n	8004f82 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	609a      	str	r2, [r3, #8]
}
 8004f82:	bf00      	nop
 8004f84:	3724      	adds	r7, #36	; 0x24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	58024400 	.word	0x58024400
 8004f94:	03d09000 	.word	0x03d09000
 8004f98:	46000000 	.word	0x46000000
 8004f9c:	4c742400 	.word	0x4c742400
 8004fa0:	4a742400 	.word	0x4a742400
 8004fa4:	4af42400 	.word	0x4af42400

08004fa8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fb0:	4b9d      	ldr	r3, [pc, #628]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	f003 0303 	and.w	r3, r3, #3
 8004fb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004fba:	4b9b      	ldr	r3, [pc, #620]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	0d1b      	lsrs	r3, r3, #20
 8004fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc4:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004fc6:	4b98      	ldr	r3, [pc, #608]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fce:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004fd0:	4b95      	ldr	r3, [pc, #596]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	08db      	lsrs	r3, r3, #3
 8004fd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 810a 	beq.w	8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d05a      	beq.n	80050b0 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d302      	bcc.n	8005004 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d078      	beq.n	80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8005002:	e099      	b.n	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005004:	4b88      	ldr	r3, [pc, #544]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0320 	and.w	r3, r3, #32
 800500c:	2b00      	cmp	r3, #0
 800500e:	d02d      	beq.n	800506c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005010:	4b85      	ldr	r3, [pc, #532]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	08db      	lsrs	r3, r3, #3
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	4a84      	ldr	r2, [pc, #528]	; (800522c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800501c:	fa22 f303 	lsr.w	r3, r2, r3
 8005020:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800503a:	4b7b      	ldr	r3, [pc, #492]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800504a:	ed97 6a03 	vldr	s12, [r7, #12]
 800504e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800505a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800505e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005066:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800506a:	e087      	b.n	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005234 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800507a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507e:	4b6a      	ldr	r3, [pc, #424]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005092:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800509a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ae:	e065      	b.n	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b59      	ldr	r3, [pc, #356]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050f2:	e043      	b.n	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800523c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b48      	ldr	r3, [pc, #288]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005136:	e021      	b.n	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b37      	ldr	r3, [pc, #220]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800517a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800517c:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	0a5b      	lsrs	r3, r3, #9
 8005182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005192:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005196:	edd7 6a07 	vldr	s13, [r7, #28]
 800519a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a2:	ee17 2a90 	vmov	r2, s15
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b4:	ee07 3a90 	vmov	s15, r3
 80051b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d0:	ee17 2a90 	vmov	r2, s15
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80051d8:	4b13      	ldr	r3, [pc, #76]	; (8005228 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	0e1b      	lsrs	r3, r3, #24
 80051de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fe:	ee17 2a90 	vmov	r2, s15
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005206:	e008      	b.n	800521a <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	609a      	str	r2, [r3, #8]
}
 800521a:	bf00      	nop
 800521c:	3724      	adds	r7, #36	; 0x24
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	58024400 	.word	0x58024400
 800522c:	03d09000 	.word	0x03d09000
 8005230:	46000000 	.word	0x46000000
 8005234:	4c742400 	.word	0x4c742400
 8005238:	4a742400 	.word	0x4a742400
 800523c:	4af42400 	.word	0x4af42400

08005240 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005244:	f7fe fca4 	bl	8003b90 <HAL_RCC_GetSysClockFreq>
 8005248:	4601      	mov	r1, r0
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	4a06      	ldr	r2, [pc, #24]	; (8005270 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005256:	5cd3      	ldrb	r3, [r2, r3]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	fa21 f303 	lsr.w	r3, r1, r3
 8005260:	4a04      	ldr	r2, [pc, #16]	; (8005274 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005262:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	bd80      	pop	{r7, pc}
 800526c:	58024400 	.word	0x58024400
 8005270:	080099e8 	.word	0x080099e8
 8005274:	24000000 	.word	0x24000000

08005278 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005286:	4b53      	ldr	r3, [pc, #332]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b03      	cmp	r3, #3
 8005290:	d101      	bne.n	8005296 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e099      	b.n	80053ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005296:	4b4f      	ldr	r3, [pc, #316]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a4e      	ldr	r2, [pc, #312]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800529c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a2:	f7fc fcb5 	bl	8001c10 <HAL_GetTick>
 80052a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052a8:	e008      	b.n	80052bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80052aa:	f7fc fcb1 	bl	8001c10 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e086      	b.n	80053ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052bc:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80052c8:	4b42      	ldr	r3, [pc, #264]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	031b      	lsls	r3, r3, #12
 80052d6:	493f      	ldr	r1, [pc, #252]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	628b      	str	r3, [r1, #40]	; 0x28
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	025b      	lsls	r3, r3, #9
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	041b      	lsls	r3, r3, #16
 80052fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052fe:	431a      	orrs	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	3b01      	subs	r3, #1
 8005306:	061b      	lsls	r3, r3, #24
 8005308:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800530c:	4931      	ldr	r1, [pc, #196]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800530e:	4313      	orrs	r3, r2
 8005310:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005312:	4b30      	ldr	r3, [pc, #192]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005316:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	492d      	ldr	r1, [pc, #180]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005320:	4313      	orrs	r3, r2
 8005322:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005324:	4b2b      	ldr	r3, [pc, #172]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005328:	f023 0220 	bic.w	r2, r3, #32
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	4928      	ldr	r1, [pc, #160]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005332:	4313      	orrs	r3, r2
 8005334:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005336:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800533c:	f023 0310 	bic.w	r3, r3, #16
 8005340:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005346:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <RCCEx_PLL2_Config+0x160>)
 8005348:	4013      	ands	r3, r2
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	69d2      	ldr	r2, [r2, #28]
 800534e:	00d2      	lsls	r2, r2, #3
 8005350:	4920      	ldr	r1, [pc, #128]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005356:	4b1f      	ldr	r3, [pc, #124]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	4a1e      	ldr	r2, [pc, #120]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800535c:	f043 0310 	orr.w	r3, r3, #16
 8005360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005368:	4b1a      	ldr	r3, [pc, #104]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800536a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800536e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005372:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005374:	e00f      	b.n	8005396 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d106      	bne.n	800538a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800537c:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005386:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005388:	e005      	b.n	8005396 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800538c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538e:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005394:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005396:	4b0f      	ldr	r3, [pc, #60]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a0e      	ldr	r2, [pc, #56]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 800539c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a2:	f7fc fc35 	bl	8001c10 <HAL_GetTick>
 80053a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053a8:	e008      	b.n	80053bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053aa:	f7fc fc31 	bl	8001c10 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e006      	b.n	80053ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053bc:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <RCCEx_PLL2_Config+0x15c>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	58024400 	.word	0x58024400
 80053d8:	ffff0007 	.word	0xffff0007

080053dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053ea:	4b53      	ldr	r3, [pc, #332]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d101      	bne.n	80053fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e099      	b.n	800552e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053fa:	4b4f      	ldr	r3, [pc, #316]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a4e      	ldr	r2, [pc, #312]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005406:	f7fc fc03 	bl	8001c10 <HAL_GetTick>
 800540a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800540c:	e008      	b.n	8005420 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800540e:	f7fc fbff 	bl	8001c10 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e086      	b.n	800552e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005420:	4b45      	ldr	r3, [pc, #276]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f0      	bne.n	800540e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	051b      	lsls	r3, r3, #20
 800543a:	493f      	ldr	r1, [pc, #252]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 800543c:	4313      	orrs	r3, r2
 800543e:	628b      	str	r3, [r1, #40]	; 0x28
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	3b01      	subs	r3, #1
 8005446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	3b01      	subs	r3, #1
 8005450:	025b      	lsls	r3, r3, #9
 8005452:	b29b      	uxth	r3, r3
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	3b01      	subs	r3, #1
 800545c:	041b      	lsls	r3, r3, #16
 800545e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	3b01      	subs	r3, #1
 800546a:	061b      	lsls	r3, r3, #24
 800546c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005470:	4931      	ldr	r1, [pc, #196]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005472:	4313      	orrs	r3, r2
 8005474:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005476:	4b30      	ldr	r3, [pc, #192]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	492d      	ldr	r1, [pc, #180]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005484:	4313      	orrs	r3, r2
 8005486:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005488:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 800548a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	4928      	ldr	r1, [pc, #160]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	4a26      	ldr	r2, [pc, #152]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054aa:	4b24      	ldr	r3, [pc, #144]	; (800553c <RCCEx_PLL3_Config+0x160>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	69d2      	ldr	r2, [r2, #28]
 80054b2:	00d2      	lsls	r2, r2, #3
 80054b4:	4920      	ldr	r1, [pc, #128]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80054ba:	4b1f      	ldr	r3, [pc, #124]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	4a1e      	ldr	r2, [pc, #120]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054d8:	e00f      	b.n	80054fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d106      	bne.n	80054ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054e0:	4b15      	ldr	r3, [pc, #84]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e4:	4a14      	ldr	r2, [pc, #80]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054ec:	e005      	b.n	80054fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	4a11      	ldr	r2, [pc, #68]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054fa:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a0e      	ldr	r2, [pc, #56]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005506:	f7fc fb83 	bl	8001c10 <HAL_GetTick>
 800550a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800550c:	e008      	b.n	8005520 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800550e:	f7fc fb7f 	bl	8001c10 <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d901      	bls.n	8005520 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e006      	b.n	800552e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <RCCEx_PLL3_Config+0x15c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0f0      	beq.n	800550e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	58024400 	.word	0x58024400
 800553c:	ffff0007 	.word	0xffff0007

08005540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e01d      	b.n	800558e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fc f87e 	bl	8001668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 fc38 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_TIM_Base_Start_IT+0x50>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b06      	cmp	r3, #6
 80055c0:	d00b      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x42>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d007      	beq.n	80055da <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	00010007 	.word	0x00010007

080055ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e01d      	b.n	800563a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f815 	bl	8005642 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f000 fbe2 	bl	8005df4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d841      	bhi.n	80056ec <HAL_TIM_PWM_Start_IT+0x94>
 8005668:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <HAL_TIM_PWM_Start_IT+0x18>)
 800566a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566e:	bf00      	nop
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080056ed 	.word	0x080056ed
 8005678:	080056ed 	.word	0x080056ed
 800567c:	080056ed 	.word	0x080056ed
 8005680:	080056b7 	.word	0x080056b7
 8005684:	080056ed 	.word	0x080056ed
 8005688:	080056ed 	.word	0x080056ed
 800568c:	080056ed 	.word	0x080056ed
 8005690:	080056c9 	.word	0x080056c9
 8005694:	080056ed 	.word	0x080056ed
 8005698:	080056ed 	.word	0x080056ed
 800569c:	080056ed 	.word	0x080056ed
 80056a0:	080056db 	.word	0x080056db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68da      	ldr	r2, [r3, #12]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0202 	orr.w	r2, r2, #2
 80056b2:	60da      	str	r2, [r3, #12]
      break;
 80056b4:	e01b      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0204 	orr.w	r2, r2, #4
 80056c4:	60da      	str	r2, [r3, #12]
      break;
 80056c6:	e012      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0208 	orr.w	r2, r2, #8
 80056d6:	60da      	str	r2, [r3, #12]
      break;
 80056d8:	e009      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0210 	orr.w	r2, r2, #16
 80056e8:	60da      	str	r2, [r3, #12]
      break;
 80056ea:	e000      	b.n	80056ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80056ec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2201      	movs	r2, #1
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ff82 	bl	8006600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1e      	ldr	r2, [pc, #120]	; (800577c <HAL_TIM_PWM_Start_IT+0x124>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <HAL_TIM_PWM_Start_IT+0xd6>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a1d      	ldr	r2, [pc, #116]	; (8005780 <HAL_TIM_PWM_Start_IT+0x128>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d00e      	beq.n	800572e <HAL_TIM_PWM_Start_IT+0xd6>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <HAL_TIM_PWM_Start_IT+0x12c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d009      	beq.n	800572e <HAL_TIM_PWM_Start_IT+0xd6>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1a      	ldr	r2, [pc, #104]	; (8005788 <HAL_TIM_PWM_Start_IT+0x130>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d004      	beq.n	800572e <HAL_TIM_PWM_Start_IT+0xd6>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_TIM_PWM_Start_IT+0x134>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d101      	bne.n	8005732 <HAL_TIM_PWM_Start_IT+0xda>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <HAL_TIM_PWM_Start_IT+0xdc>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005746:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <HAL_TIM_PWM_Start_IT+0x138>)
 8005750:	4013      	ands	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d00b      	beq.n	8005772 <HAL_TIM_PWM_Start_IT+0x11a>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005760:	d007      	beq.n	8005772 <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f042 0201 	orr.w	r2, r2, #1
 8005770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40010000 	.word	0x40010000
 8005780:	40010400 	.word	0x40010400
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800
 8005790:	00010007 	.word	0x00010007

08005794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d122      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d11b      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 faee 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fae0 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 faf1 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b04      	cmp	r3, #4
 80057fc:	d122      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d11b      	bne.n	8005844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0204 	mvn.w	r2, #4
 8005814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fac4 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005830:	e005      	b.n	800583e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fab6 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fac7 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b08      	cmp	r3, #8
 8005850:	d122      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b08      	cmp	r3, #8
 800585e:	d11b      	bne.n	8005898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0208 	mvn.w	r2, #8
 8005868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fa9a 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 8005884:	e005      	b.n	8005892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fa8c 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fa9d 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b10      	cmp	r3, #16
 80058a4:	d122      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d11b      	bne.n	80058ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f06f 0210 	mvn.w	r2, #16
 80058bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2208      	movs	r2, #8
 80058c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fa70 	bl	8005db8 <HAL_TIM_IC_CaptureCallback>
 80058d8:	e005      	b.n	80058e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fa62 	bl	8005da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 fa73 	bl	8005dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b01      	cmp	r3, #1
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0201 	mvn.w	r2, #1
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fb ff96 	bl	8001844 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b80      	cmp	r3, #128	; 0x80
 8005924:	d10e      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d107      	bne.n	8005944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800593c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 feea 	bl	8006718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fedd 	bl	800672c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d10e      	bne.n	800599e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b40      	cmp	r3, #64	; 0x40
 800598c:	d107      	bne.n	800599e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa21 	bl	8005de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d10e      	bne.n	80059ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	d107      	bne.n	80059ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f06f 0220 	mvn.w	r2, #32
 80059c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fe9d 	bl	8006704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059ea:	2302      	movs	r3, #2
 80059ec:	e105      	b.n	8005bfa <HAL_TIM_PWM_ConfigChannel+0x226>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2202      	movs	r2, #2
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b14      	cmp	r3, #20
 8005a02:	f200 80f0 	bhi.w	8005be6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005a06:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a61 	.word	0x08005a61
 8005a10:	08005be7 	.word	0x08005be7
 8005a14:	08005be7 	.word	0x08005be7
 8005a18:	08005be7 	.word	0x08005be7
 8005a1c:	08005aa1 	.word	0x08005aa1
 8005a20:	08005be7 	.word	0x08005be7
 8005a24:	08005be7 	.word	0x08005be7
 8005a28:	08005be7 	.word	0x08005be7
 8005a2c:	08005ae3 	.word	0x08005ae3
 8005a30:	08005be7 	.word	0x08005be7
 8005a34:	08005be7 	.word	0x08005be7
 8005a38:	08005be7 	.word	0x08005be7
 8005a3c:	08005b23 	.word	0x08005b23
 8005a40:	08005be7 	.word	0x08005be7
 8005a44:	08005be7 	.word	0x08005be7
 8005a48:	08005be7 	.word	0x08005be7
 8005a4c:	08005b65 	.word	0x08005b65
 8005a50:	08005be7 	.word	0x08005be7
 8005a54:	08005be7 	.word	0x08005be7
 8005a58:	08005be7 	.word	0x08005be7
 8005a5c:	08005ba5 	.word	0x08005ba5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fa5e 	bl	8005f28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0208 	orr.w	r2, r2, #8
 8005a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0204 	bic.w	r2, r2, #4
 8005a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6999      	ldr	r1, [r3, #24]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	619a      	str	r2, [r3, #24]
      break;
 8005a9e:	e0a3      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 face 	bl	8006048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699a      	ldr	r2, [r3, #24]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	021a      	lsls	r2, r3, #8
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	619a      	str	r2, [r3, #24]
      break;
 8005ae0:	e082      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fb37 	bl	800615c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69da      	ldr	r2, [r3, #28]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0208 	orr.w	r2, r2, #8
 8005afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0204 	bic.w	r2, r2, #4
 8005b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69d9      	ldr	r1, [r3, #28]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691a      	ldr	r2, [r3, #16]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	61da      	str	r2, [r3, #28]
      break;
 8005b20:	e062      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68b9      	ldr	r1, [r7, #8]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fb9d 	bl	8006268 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69d9      	ldr	r1, [r3, #28]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	021a      	lsls	r2, r3, #8
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	61da      	str	r2, [r3, #28]
      break;
 8005b62:	e041      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 fbe4 	bl	8006338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0208 	orr.w	r2, r2, #8
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0204 	bic.w	r2, r2, #4
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	691a      	ldr	r2, [r3, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ba2:	e021      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68b9      	ldr	r1, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fc26 	bl	80063fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	021a      	lsls	r2, r3, #8
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005be4:	e000      	b.n	8005be8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005be6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop

08005c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIM_ConfigClockSource+0x18>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0b7      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x188>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4b57      	ldr	r3, [pc, #348]	; (8005d94 <HAL_TIM_ConfigClockSource+0x190>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b70      	cmp	r3, #112	; 0x70
 8005c52:	d02e      	beq.n	8005cb2 <HAL_TIM_ConfigClockSource+0xae>
 8005c54:	2b70      	cmp	r3, #112	; 0x70
 8005c56:	d812      	bhi.n	8005c7e <HAL_TIM_ConfigClockSource+0x7a>
 8005c58:	2b30      	cmp	r3, #48	; 0x30
 8005c5a:	f000 8084 	beq.w	8005d66 <HAL_TIM_ConfigClockSource+0x162>
 8005c5e:	2b30      	cmp	r3, #48	; 0x30
 8005c60:	d806      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x6c>
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d07f      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
 8005c66:	2b20      	cmp	r3, #32
 8005c68:	d07d      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d07b      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c6e:	e084      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c70:	2b50      	cmp	r3, #80	; 0x50
 8005c72:	d048      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0x102>
 8005c74:	2b60      	cmp	r3, #96	; 0x60
 8005c76:	d056      	beq.n	8005d26 <HAL_TIM_ConfigClockSource+0x122>
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d064      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005c7c:	e07d      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c7e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c82:	d070      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
 8005c84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c88:	d809      	bhi.n	8005c9e <HAL_TIM_ConfigClockSource+0x9a>
 8005c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8e:	d027      	beq.n	8005ce0 <HAL_TIM_ConfigClockSource+0xdc>
 8005c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c94:	d067      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
 8005c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9a:	d06d      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c9c:	e06d      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c9e:	4a3e      	ldr	r2, [pc, #248]	; (8005d98 <HAL_TIM_ConfigClockSource+0x194>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d060      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
 8005ca4:	4a3d      	ldr	r2, [pc, #244]	; (8005d9c <HAL_TIM_ConfigClockSource+0x198>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d05d      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
 8005caa:	4a3d      	ldr	r2, [pc, #244]	; (8005da0 <HAL_TIM_ConfigClockSource+0x19c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d05a      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005cb0:	e063      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6818      	ldr	r0, [r3, #0]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6899      	ldr	r1, [r3, #8]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f000 fc7d 	bl	80065c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cd4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	609a      	str	r2, [r3, #8]
      break;
 8005cde:	e04c      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f000 fc66 	bl	80065c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d02:	609a      	str	r2, [r3, #8]
      break;
 8005d04:	e039      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6859      	ldr	r1, [r3, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f000 fbd6 	bl	80064c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2150      	movs	r1, #80	; 0x50
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fc30 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005d24:	e029      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	6859      	ldr	r1, [r3, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	461a      	mov	r2, r3
 8005d34:	f000 fbf5 	bl	8006522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2160      	movs	r1, #96	; 0x60
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 fc20 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005d44:	e019      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 fbb6 	bl	80064c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2140      	movs	r1, #64	; 0x40
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fc10 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005d64:	e009      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f000 fc07 	bl	8006584 <TIM_ITRx_SetConfig>
      break;
 8005d76:	e000      	b.n	8005d7a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005d78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	ffceff88 	.word	0xffceff88
 8005d98:	00100030 	.word	0x00100030
 8005d9c:	00100040 	.word	0x00100040
 8005da0:	00100020 	.word	0x00100020

08005da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a40      	ldr	r2, [pc, #256]	; (8005f08 <TIM_Base_SetConfig+0x114>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d00f      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a3d      	ldr	r2, [pc, #244]	; (8005f0c <TIM_Base_SetConfig+0x118>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00b      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a3c      	ldr	r2, [pc, #240]	; (8005f10 <TIM_Base_SetConfig+0x11c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d007      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a3b      	ldr	r2, [pc, #236]	; (8005f14 <TIM_Base_SetConfig+0x120>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d003      	beq.n	8005e34 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a3a      	ldr	r2, [pc, #232]	; (8005f18 <TIM_Base_SetConfig+0x124>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a2f      	ldr	r2, [pc, #188]	; (8005f08 <TIM_Base_SetConfig+0x114>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01f      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e54:	d01b      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a2c      	ldr	r2, [pc, #176]	; (8005f0c <TIM_Base_SetConfig+0x118>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d017      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a2b      	ldr	r2, [pc, #172]	; (8005f10 <TIM_Base_SetConfig+0x11c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d013      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2a      	ldr	r2, [pc, #168]	; (8005f14 <TIM_Base_SetConfig+0x120>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00f      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <TIM_Base_SetConfig+0x124>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d00b      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a28      	ldr	r2, [pc, #160]	; (8005f1c <TIM_Base_SetConfig+0x128>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d007      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a27      	ldr	r2, [pc, #156]	; (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d003      	beq.n	8005e8e <TIM_Base_SetConfig+0x9a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a26      	ldr	r2, [pc, #152]	; (8005f24 <TIM_Base_SetConfig+0x130>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d108      	bne.n	8005ea0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	695b      	ldr	r3, [r3, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a10      	ldr	r2, [pc, #64]	; (8005f08 <TIM_Base_SetConfig+0x114>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a12      	ldr	r2, [pc, #72]	; (8005f18 <TIM_Base_SetConfig+0x124>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a11      	ldr	r2, [pc, #68]	; (8005f1c <TIM_Base_SetConfig+0x128>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <TIM_Base_SetConfig+0x12c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0xf8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a0f      	ldr	r2, [pc, #60]	; (8005f24 <TIM_Base_SetConfig+0x130>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d103      	bne.n	8005ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]
}
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40010400 	.word	0x40010400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	40014400 	.word	0x40014400
 8005f24:	40014800 	.word	0x40014800

08005f28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f023 0201 	bic.w	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4b37      	ldr	r3, [pc, #220]	; (8006030 <TIM_OC1_SetConfig+0x108>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f023 0302 	bic.w	r3, r3, #2
 8005f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a2d      	ldr	r2, [pc, #180]	; (8006034 <TIM_OC1_SetConfig+0x10c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00f      	beq.n	8005fa4 <TIM_OC1_SetConfig+0x7c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a2c      	ldr	r2, [pc, #176]	; (8006038 <TIM_OC1_SetConfig+0x110>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00b      	beq.n	8005fa4 <TIM_OC1_SetConfig+0x7c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a2b      	ldr	r2, [pc, #172]	; (800603c <TIM_OC1_SetConfig+0x114>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d007      	beq.n	8005fa4 <TIM_OC1_SetConfig+0x7c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a2a      	ldr	r2, [pc, #168]	; (8006040 <TIM_OC1_SetConfig+0x118>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC1_SetConfig+0x7c>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a29      	ldr	r2, [pc, #164]	; (8006044 <TIM_OC1_SetConfig+0x11c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10c      	bne.n	8005fbe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0308 	bic.w	r3, r3, #8
 8005faa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 0304 	bic.w	r3, r3, #4
 8005fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a1c      	ldr	r2, [pc, #112]	; (8006034 <TIM_OC1_SetConfig+0x10c>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00f      	beq.n	8005fe6 <TIM_OC1_SetConfig+0xbe>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a1b      	ldr	r2, [pc, #108]	; (8006038 <TIM_OC1_SetConfig+0x110>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <TIM_OC1_SetConfig+0xbe>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1a      	ldr	r2, [pc, #104]	; (800603c <TIM_OC1_SetConfig+0x114>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_OC1_SetConfig+0xbe>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a19      	ldr	r2, [pc, #100]	; (8006040 <TIM_OC1_SetConfig+0x118>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC1_SetConfig+0xbe>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a18      	ldr	r2, [pc, #96]	; (8006044 <TIM_OC1_SetConfig+0x11c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d111      	bne.n	800600a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4313      	orrs	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	621a      	str	r2, [r3, #32]
}
 8006024:	bf00      	nop
 8006026:	371c      	adds	r7, #28
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	fffeff8f 	.word	0xfffeff8f
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400
 800603c:	40014000 	.word	0x40014000
 8006040:	40014400 	.word	0x40014400
 8006044:	40014800 	.word	0x40014800

08006048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4b34      	ldr	r3, [pc, #208]	; (8006144 <TIM_OC2_SetConfig+0xfc>)
 8006074:	4013      	ands	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f023 0320 	bic.w	r3, r3, #32
 8006092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a29      	ldr	r2, [pc, #164]	; (8006148 <TIM_OC2_SetConfig+0x100>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_OC2_SetConfig+0x68>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a28      	ldr	r2, [pc, #160]	; (800614c <TIM_OC2_SetConfig+0x104>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d10d      	bne.n	80060cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1e      	ldr	r2, [pc, #120]	; (8006148 <TIM_OC2_SetConfig+0x100>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00f      	beq.n	80060f4 <TIM_OC2_SetConfig+0xac>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a1d      	ldr	r2, [pc, #116]	; (800614c <TIM_OC2_SetConfig+0x104>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00b      	beq.n	80060f4 <TIM_OC2_SetConfig+0xac>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a1c      	ldr	r2, [pc, #112]	; (8006150 <TIM_OC2_SetConfig+0x108>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d007      	beq.n	80060f4 <TIM_OC2_SetConfig+0xac>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a1b      	ldr	r2, [pc, #108]	; (8006154 <TIM_OC2_SetConfig+0x10c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC2_SetConfig+0xac>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1a      	ldr	r2, [pc, #104]	; (8006158 <TIM_OC2_SetConfig+0x110>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d113      	bne.n	800611c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006102:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	feff8fff 	.word	0xfeff8fff
 8006148:	40010000 	.word	0x40010000
 800614c:	40010400 	.word	0x40010400
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a27      	ldr	r2, [pc, #156]	; (8006254 <TIM_OC3_SetConfig+0xf8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d003      	beq.n	80061c2 <TIM_OC3_SetConfig+0x66>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a26      	ldr	r2, [pc, #152]	; (8006258 <TIM_OC3_SetConfig+0xfc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10d      	bne.n	80061de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	021b      	lsls	r3, r3, #8
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <TIM_OC3_SetConfig+0xf8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d00f      	beq.n	8006206 <TIM_OC3_SetConfig+0xaa>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <TIM_OC3_SetConfig+0xfc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00b      	beq.n	8006206 <TIM_OC3_SetConfig+0xaa>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1a      	ldr	r2, [pc, #104]	; (800625c <TIM_OC3_SetConfig+0x100>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d007      	beq.n	8006206 <TIM_OC3_SetConfig+0xaa>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a19      	ldr	r2, [pc, #100]	; (8006260 <TIM_OC3_SetConfig+0x104>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d003      	beq.n	8006206 <TIM_OC3_SetConfig+0xaa>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a18      	ldr	r2, [pc, #96]	; (8006264 <TIM_OC3_SetConfig+0x108>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d113      	bne.n	800622e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800620c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	4313      	orrs	r3, r2
 800622c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	621a      	str	r2, [r3, #32]
}
 8006248:	bf00      	nop
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	40010000 	.word	0x40010000
 8006258:	40010400 	.word	0x40010400
 800625c:	40014000 	.word	0x40014000
 8006260:	40014400 	.word	0x40014400
 8006264:	40014800 	.word	0x40014800

08006268 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a18      	ldr	r2, [pc, #96]	; (8006324 <TIM_OC4_SetConfig+0xbc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00f      	beq.n	80062e8 <TIM_OC4_SetConfig+0x80>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <TIM_OC4_SetConfig+0xc0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00b      	beq.n	80062e8 <TIM_OC4_SetConfig+0x80>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a16      	ldr	r2, [pc, #88]	; (800632c <TIM_OC4_SetConfig+0xc4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d007      	beq.n	80062e8 <TIM_OC4_SetConfig+0x80>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a15      	ldr	r2, [pc, #84]	; (8006330 <TIM_OC4_SetConfig+0xc8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d003      	beq.n	80062e8 <TIM_OC4_SetConfig+0x80>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a14      	ldr	r2, [pc, #80]	; (8006334 <TIM_OC4_SetConfig+0xcc>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d109      	bne.n	80062fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	019b      	lsls	r3, r3, #6
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40010000 	.word	0x40010000
 8006328:	40010400 	.word	0x40010400
 800632c:	40014000 	.word	0x40014000
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800

08006338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006378:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a17      	ldr	r2, [pc, #92]	; (80063e8 <TIM_OC5_SetConfig+0xb0>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00f      	beq.n	80063ae <TIM_OC5_SetConfig+0x76>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <TIM_OC5_SetConfig+0xb4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00b      	beq.n	80063ae <TIM_OC5_SetConfig+0x76>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a15      	ldr	r2, [pc, #84]	; (80063f0 <TIM_OC5_SetConfig+0xb8>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d007      	beq.n	80063ae <TIM_OC5_SetConfig+0x76>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <TIM_OC5_SetConfig+0xbc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d003      	beq.n	80063ae <TIM_OC5_SetConfig+0x76>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <TIM_OC5_SetConfig+0xc0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d109      	bne.n	80063c2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400
 80063f0:	40014000 	.word	0x40014000
 80063f4:	40014400 	.word	0x40014400
 80063f8:	40014800 	.word	0x40014800

080063fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800642a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	021b      	lsls	r3, r3, #8
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800643e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	051b      	lsls	r3, r3, #20
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a18      	ldr	r2, [pc, #96]	; (80064b0 <TIM_OC6_SetConfig+0xb4>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d00f      	beq.n	8006474 <TIM_OC6_SetConfig+0x78>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a17      	ldr	r2, [pc, #92]	; (80064b4 <TIM_OC6_SetConfig+0xb8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_OC6_SetConfig+0x78>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <TIM_OC6_SetConfig+0xbc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_OC6_SetConfig+0x78>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a15      	ldr	r2, [pc, #84]	; (80064bc <TIM_OC6_SetConfig+0xc0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_OC6_SetConfig+0x78>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a14      	ldr	r2, [pc, #80]	; (80064c0 <TIM_OC6_SetConfig+0xc4>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d109      	bne.n	8006488 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800647a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	029b      	lsls	r3, r3, #10
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685a      	ldr	r2, [r3, #4]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	693a      	ldr	r2, [r7, #16]
 80064a0:	621a      	str	r2, [r3, #32]
}
 80064a2:	bf00      	nop
 80064a4:	371c      	adds	r7, #28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
 80064ae:	bf00      	nop
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40010400 	.word	0x40010400
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	40014800 	.word	0x40014800

080064c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b087      	sub	sp, #28
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f023 0201 	bic.w	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 030a 	bic.w	r3, r3, #10
 8006500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006522:	b480      	push	{r7}
 8006524:	b087      	sub	sp, #28
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	f023 0210 	bic.w	r2, r3, #16
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800654c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	031b      	lsls	r3, r3, #12
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4313      	orrs	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800655e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
	...

08006584 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4b09      	ldr	r3, [pc, #36]	; (80065bc <TIM_ITRx_SetConfig+0x38>)
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	f043 0307 	orr.w	r3, r3, #7
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	609a      	str	r2, [r3, #8]
}
 80065ae:	bf00      	nop
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	ffcfff8f 	.word	0xffcfff8f

080065c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	021a      	lsls	r2, r3, #8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	431a      	orrs	r2, r3
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	609a      	str	r2, [r3, #8]
}
 80065f4:	bf00      	nop
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 031f 	and.w	r3, r3, #31
 8006612:	2201      	movs	r2, #1
 8006614:	fa02 f303 	lsl.w	r3, r2, r3
 8006618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1a      	ldr	r2, [r3, #32]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	43db      	mvns	r3, r3
 8006622:	401a      	ands	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a1a      	ldr	r2, [r3, #32]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	fa01 f303 	lsl.w	r3, r1, r3
 8006638:	431a      	orrs	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]
}
 800663e:	bf00      	nop
 8006640:	371c      	adds	r7, #28
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
	...

0800664c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006660:	2302      	movs	r3, #2
 8006662:	e045      	b.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2202      	movs	r2, #2
 8006670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1b      	ldr	r2, [pc, #108]	; (8006700 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d108      	bne.n	80066aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800669e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c2:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40010000 	.word	0x40010000
 8006700:	40010400 	.word	0x40010400

08006704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e042      	b.n	80067d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006758:	2b00      	cmp	r3, #0
 800675a:	d106      	bne.n	800676a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7fb f8cb 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2224      	movs	r2, #36	; 0x24
 800676e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f9c0 	bl	8006b08 <UART_SetConfig>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e022      	b.n	80067d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f002 fb32 	bl	8008e04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f002 fbb9 	bl	8008f48 <UART_CheckIdleState>
 80067d6:	4603      	mov	r3, r0
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	f640 030f 	movw	r3, #2063	; 0x80f
 8006806:	4013      	ands	r3, r2
 8006808:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d118      	bne.n	8006842 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d013      	beq.n	8006842 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f003 0320 	and.w	r3, r3, #32
 8006820:	2b00      	cmp	r3, #0
 8006822:	d104      	bne.n	800682e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 8145 	beq.w	8006ac2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
      }
      return;
 8006840:	e13f      	b.n	8006ac2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 80e8 	beq.w	8006a1a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4ba1      	ldr	r3, [pc, #644]	; (8006ad4 <HAL_UART_IRQHandler+0x2f4>)
 800684e:	4013      	ands	r3, r2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d105      	bne.n	8006860 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	4ba0      	ldr	r3, [pc, #640]	; (8006ad8 <HAL_UART_IRQHandler+0x2f8>)
 8006858:	4013      	ands	r3, r2
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 80dd 	beq.w	8006a1a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_UART_IRQHandler+0xac>
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2201      	movs	r2, #1
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f043 0201 	orr.w	r2, r3, #1
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d010      	beq.n	80068b8 <HAL_UART_IRQHandler+0xd8>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2202      	movs	r2, #2
 80068a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ae:	f043 0204 	orr.w	r2, r3, #4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d010      	beq.n	80068e4 <HAL_UART_IRQHandler+0x104>
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00b      	beq.n	80068e4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2204      	movs	r2, #4
 80068d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	f043 0202 	orr.w	r2, r3, #2
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d015      	beq.n	800691a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	f003 0320 	and.w	r3, r3, #32
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	4b76      	ldr	r3, [pc, #472]	; (8006ad4 <HAL_UART_IRQHandler+0x2f4>)
 80068fc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2208      	movs	r2, #8
 8006908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006910:	f043 0208 	orr.w	r2, r3, #8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006920:	2b00      	cmp	r3, #0
 8006922:	d011      	beq.n	8006948 <HAL_UART_IRQHandler+0x168>
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00c      	beq.n	8006948 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80b9 	beq.w	8006ac6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d011      	beq.n	8006982 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d007      	beq.n	8006982 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006988:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	d004      	beq.n	80069a2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d031      	beq.n	8006a06 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f002 fb98 	bl	80090d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b2:	2b40      	cmp	r3, #64	; 0x40
 80069b4:	d123      	bne.n	80069fe <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069c4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d013      	beq.n	80069f6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069d2:	4a42      	ldr	r2, [pc, #264]	; (8006adc <HAL_UART_IRQHandler+0x2fc>)
 80069d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fb fa76 	bl	8001ecc <HAL_DMA_Abort_IT>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d017      	beq.n	8006a16 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80069f0:	4610      	mov	r0, r2
 80069f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	e00f      	b.n	8006a16 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f87c 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	e00b      	b.n	8006a16 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f878 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e007      	b.n	8006a16 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f874 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006a14:	e057      	b.n	8006ac6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a16:	bf00      	nop
    return;
 8006a18:	e055      	b.n	8006ac6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <HAL_UART_IRQHandler+0x260>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f002 fba1 	bl	8009180 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a3e:	e045      	b.n	8006acc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d012      	beq.n	8006a70 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d104      	bne.n	8006a5e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d008      	beq.n	8006a70 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d031      	beq.n	8006aca <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
    }
    return;
 8006a6e:	e02c      	b.n	8006aca <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d008      	beq.n	8006a8c <HAL_UART_IRQHandler+0x2ac>
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 fb61 	bl	800914c <UART_EndTransmit_IT>
    return;
 8006a8a:	e01f      	b.n	8006acc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d008      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x2c8>
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f002 fb81 	bl	80091a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa6:	e011      	b.n	8006acc <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00c      	beq.n	8006acc <HAL_UART_IRQHandler+0x2ec>
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da09      	bge.n	8006acc <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 fb6b 	bl	8009194 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006abe:	bf00      	nop
 8006ac0:	e004      	b.n	8006acc <HAL_UART_IRQHandler+0x2ec>
      return;
 8006ac2:	bf00      	nop
 8006ac4:	e002      	b.n	8006acc <HAL_UART_IRQHandler+0x2ec>
    return;
 8006ac6:	bf00      	nop
 8006ac8:	e000      	b.n	8006acc <HAL_UART_IRQHandler+0x2ec>
    return;
 8006aca:	bf00      	nop
  }
}
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	10000001 	.word	0x10000001
 8006ad8:	04000120 	.word	0x04000120
 8006adc:	08009121 	.word	0x08009121

08006ae0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b08:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006b0c:	b090      	sub	sp, #64	; 0x40
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4bc1      	ldr	r3, [pc, #772]	; (8006e50 <UART_SetConfig+0x348>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b52:	430b      	orrs	r3, r1
 8006b54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4ab7      	ldr	r2, [pc, #732]	; (8006e54 <UART_SetConfig+0x34c>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d004      	beq.n	8006b86 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b82:	4313      	orrs	r3, r2
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	4bb2      	ldr	r3, [pc, #712]	; (8006e58 <UART_SetConfig+0x350>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6812      	ldr	r2, [r2, #0]
 8006b94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b96:	430b      	orrs	r3, r1
 8006b98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba0:	f023 010f 	bic.w	r1, r3, #15
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	430a      	orrs	r2, r1
 8006bae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4aa9      	ldr	r2, [pc, #676]	; (8006e5c <UART_SetConfig+0x354>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d177      	bne.n	8006caa <UART_SetConfig+0x1a2>
 8006bba:	4ba9      	ldr	r3, [pc, #676]	; (8006e60 <UART_SetConfig+0x358>)
 8006bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bc2:	2b28      	cmp	r3, #40	; 0x28
 8006bc4:	d86c      	bhi.n	8006ca0 <UART_SetConfig+0x198>
 8006bc6:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0xc4>)
 8006bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bcc:	08006c71 	.word	0x08006c71
 8006bd0:	08006ca1 	.word	0x08006ca1
 8006bd4:	08006ca1 	.word	0x08006ca1
 8006bd8:	08006ca1 	.word	0x08006ca1
 8006bdc:	08006ca1 	.word	0x08006ca1
 8006be0:	08006ca1 	.word	0x08006ca1
 8006be4:	08006ca1 	.word	0x08006ca1
 8006be8:	08006ca1 	.word	0x08006ca1
 8006bec:	08006c79 	.word	0x08006c79
 8006bf0:	08006ca1 	.word	0x08006ca1
 8006bf4:	08006ca1 	.word	0x08006ca1
 8006bf8:	08006ca1 	.word	0x08006ca1
 8006bfc:	08006ca1 	.word	0x08006ca1
 8006c00:	08006ca1 	.word	0x08006ca1
 8006c04:	08006ca1 	.word	0x08006ca1
 8006c08:	08006ca1 	.word	0x08006ca1
 8006c0c:	08006c81 	.word	0x08006c81
 8006c10:	08006ca1 	.word	0x08006ca1
 8006c14:	08006ca1 	.word	0x08006ca1
 8006c18:	08006ca1 	.word	0x08006ca1
 8006c1c:	08006ca1 	.word	0x08006ca1
 8006c20:	08006ca1 	.word	0x08006ca1
 8006c24:	08006ca1 	.word	0x08006ca1
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006ca1 	.word	0x08006ca1
 8006c34:	08006ca1 	.word	0x08006ca1
 8006c38:	08006ca1 	.word	0x08006ca1
 8006c3c:	08006ca1 	.word	0x08006ca1
 8006c40:	08006ca1 	.word	0x08006ca1
 8006c44:	08006ca1 	.word	0x08006ca1
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006c91 	.word	0x08006c91
 8006c50:	08006ca1 	.word	0x08006ca1
 8006c54:	08006ca1 	.word	0x08006ca1
 8006c58:	08006ca1 	.word	0x08006ca1
 8006c5c:	08006ca1 	.word	0x08006ca1
 8006c60:	08006ca1 	.word	0x08006ca1
 8006c64:	08006ca1 	.word	0x08006ca1
 8006c68:	08006ca1 	.word	0x08006ca1
 8006c6c:	08006c99 	.word	0x08006c99
 8006c70:	2301      	movs	r3, #1
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	e233      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c7e:	e22f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c86:	e22b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c8e:	e227      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006c90:	2320      	movs	r3, #32
 8006c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c96:	e223      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c9e:	e21f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ca6:	bf00      	nop
 8006ca8:	e21a      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6d      	ldr	r2, [pc, #436]	; (8006e64 <UART_SetConfig+0x35c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d132      	bne.n	8006d1a <UART_SetConfig+0x212>
 8006cb4:	4b6a      	ldr	r3, [pc, #424]	; (8006e60 <UART_SetConfig+0x358>)
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b05      	cmp	r3, #5
 8006cbe:	d827      	bhi.n	8006d10 <UART_SetConfig+0x208>
 8006cc0:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0x1c0>)
 8006cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc6:	bf00      	nop
 8006cc8:	08006ce1 	.word	0x08006ce1
 8006ccc:	08006ce9 	.word	0x08006ce9
 8006cd0:	08006cf1 	.word	0x08006cf1
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006d01 	.word	0x08006d01
 8006cdc:	08006d09 	.word	0x08006d09
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ce6:	e1fb      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cee:	e1f7      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006cf0:	2308      	movs	r3, #8
 8006cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cf6:	e1f3      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cfe:	e1ef      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d00:	2320      	movs	r3, #32
 8006d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d06:	e1eb      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d0e:	e1e7      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d10:	2380      	movs	r3, #128	; 0x80
 8006d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d16:	bf00      	nop
 8006d18:	e1e2      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a52      	ldr	r2, [pc, #328]	; (8006e68 <UART_SetConfig+0x360>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d132      	bne.n	8006d8a <UART_SetConfig+0x282>
 8006d24:	4b4e      	ldr	r3, [pc, #312]	; (8006e60 <UART_SetConfig+0x358>)
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	2b05      	cmp	r3, #5
 8006d2e:	d827      	bhi.n	8006d80 <UART_SetConfig+0x278>
 8006d30:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <UART_SetConfig+0x230>)
 8006d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d36:	bf00      	nop
 8006d38:	08006d51 	.word	0x08006d51
 8006d3c:	08006d59 	.word	0x08006d59
 8006d40:	08006d61 	.word	0x08006d61
 8006d44:	08006d69 	.word	0x08006d69
 8006d48:	08006d71 	.word	0x08006d71
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	2300      	movs	r3, #0
 8006d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d56:	e1c3      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d5e:	e1bf      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d66:	e1bb      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d6e:	e1b7      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d70:	2320      	movs	r3, #32
 8006d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d76:	e1b3      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d7e:	e1af      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d86:	bf00      	nop
 8006d88:	e1aa      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a37      	ldr	r2, [pc, #220]	; (8006e6c <UART_SetConfig+0x364>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d132      	bne.n	8006dfa <UART_SetConfig+0x2f2>
 8006d94:	4b32      	ldr	r3, [pc, #200]	; (8006e60 <UART_SetConfig+0x358>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d827      	bhi.n	8006df0 <UART_SetConfig+0x2e8>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x2a0>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dc6:	e18b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dce:	e187      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dd6:	e183      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dde:	e17f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006de0:	2320      	movs	r3, #32
 8006de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006de6:	e17b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dee:	e177      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006df6:	bf00      	nop
 8006df8:	e172      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <UART_SetConfig+0x368>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d144      	bne.n	8006e8e <UART_SetConfig+0x386>
 8006e04:	4b16      	ldr	r3, [pc, #88]	; (8006e60 <UART_SetConfig+0x358>)
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d839      	bhi.n	8006e84 <UART_SetConfig+0x37c>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <UART_SetConfig+0x310>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e75 	.word	0x08006e75
 8006e2c:	08006e7d 	.word	0x08006e7d
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e36:	e153      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e3e:	e14f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e46:	e14b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e4e:	e147      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006e50:	cfff69f3 	.word	0xcfff69f3
 8006e54:	58000c00 	.word	0x58000c00
 8006e58:	11fff4ff 	.word	0x11fff4ff
 8006e5c:	40011000 	.word	0x40011000
 8006e60:	58024400 	.word	0x58024400
 8006e64:	40004400 	.word	0x40004400
 8006e68:	40004800 	.word	0x40004800
 8006e6c:	40004c00 	.word	0x40004c00
 8006e70:	40005000 	.word	0x40005000
 8006e74:	2320      	movs	r3, #32
 8006e76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e7a:	e131      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006e7c:	2340      	movs	r3, #64	; 0x40
 8006e7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e82:	e12d      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006e84:	2380      	movs	r3, #128	; 0x80
 8006e86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e8a:	bf00      	nop
 8006e8c:	e128      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4ac3      	ldr	r2, [pc, #780]	; (80071a0 <UART_SetConfig+0x698>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d178      	bne.n	8006f8a <UART_SetConfig+0x482>
 8006e98:	4bc2      	ldr	r3, [pc, #776]	; (80071a4 <UART_SetConfig+0x69c>)
 8006e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ea0:	2b28      	cmp	r3, #40	; 0x28
 8006ea2:	d86d      	bhi.n	8006f80 <UART_SetConfig+0x478>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x3a4>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006f51 	.word	0x08006f51
 8006eb0:	08006f81 	.word	0x08006f81
 8006eb4:	08006f81 	.word	0x08006f81
 8006eb8:	08006f81 	.word	0x08006f81
 8006ebc:	08006f81 	.word	0x08006f81
 8006ec0:	08006f81 	.word	0x08006f81
 8006ec4:	08006f81 	.word	0x08006f81
 8006ec8:	08006f81 	.word	0x08006f81
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f81 	.word	0x08006f81
 8006ed4:	08006f81 	.word	0x08006f81
 8006ed8:	08006f81 	.word	0x08006f81
 8006edc:	08006f81 	.word	0x08006f81
 8006ee0:	08006f81 	.word	0x08006f81
 8006ee4:	08006f81 	.word	0x08006f81
 8006ee8:	08006f81 	.word	0x08006f81
 8006eec:	08006f61 	.word	0x08006f61
 8006ef0:	08006f81 	.word	0x08006f81
 8006ef4:	08006f81 	.word	0x08006f81
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006f81 	.word	0x08006f81
 8006f00:	08006f81 	.word	0x08006f81
 8006f04:	08006f81 	.word	0x08006f81
 8006f08:	08006f81 	.word	0x08006f81
 8006f0c:	08006f69 	.word	0x08006f69
 8006f10:	08006f81 	.word	0x08006f81
 8006f14:	08006f81 	.word	0x08006f81
 8006f18:	08006f81 	.word	0x08006f81
 8006f1c:	08006f81 	.word	0x08006f81
 8006f20:	08006f81 	.word	0x08006f81
 8006f24:	08006f81 	.word	0x08006f81
 8006f28:	08006f81 	.word	0x08006f81
 8006f2c:	08006f71 	.word	0x08006f71
 8006f30:	08006f81 	.word	0x08006f81
 8006f34:	08006f81 	.word	0x08006f81
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f81 	.word	0x08006f81
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f56:	e0c3      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006f58:	2304      	movs	r3, #4
 8006f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f5e:	e0bf      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006f60:	2308      	movs	r3, #8
 8006f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f66:	e0bb      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f6e:	e0b7      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006f70:	2320      	movs	r3, #32
 8006f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f76:	e0b3      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006f78:	2340      	movs	r3, #64	; 0x40
 8006f7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f7e:	e0af      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f86:	bf00      	nop
 8006f88:	e0aa      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a86      	ldr	r2, [pc, #536]	; (80071a8 <UART_SetConfig+0x6a0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d132      	bne.n	8006ffa <UART_SetConfig+0x4f2>
 8006f94:	4b83      	ldr	r3, [pc, #524]	; (80071a4 <UART_SetConfig+0x69c>)
 8006f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	2b05      	cmp	r3, #5
 8006f9e:	d827      	bhi.n	8006ff0 <UART_SetConfig+0x4e8>
 8006fa0:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x4a0>)
 8006fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa6:	bf00      	nop
 8006fa8:	08006fc1 	.word	0x08006fc1
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	08006fd1 	.word	0x08006fd1
 8006fb4:	08006fd9 	.word	0x08006fd9
 8006fb8:	08006fe1 	.word	0x08006fe1
 8006fbc:	08006fe9 	.word	0x08006fe9
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fc6:	e08b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fce:	e087      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006fd0:	2308      	movs	r3, #8
 8006fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fd6:	e083      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006fd8:	2310      	movs	r3, #16
 8006fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fde:	e07f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006fe0:	2320      	movs	r3, #32
 8006fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fe6:	e07b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fee:	e077      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006ff0:	2380      	movs	r3, #128	; 0x80
 8006ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ff6:	bf00      	nop
 8006ff8:	e072      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a6b      	ldr	r2, [pc, #428]	; (80071ac <UART_SetConfig+0x6a4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d132      	bne.n	800706a <UART_SetConfig+0x562>
 8007004:	4b67      	ldr	r3, [pc, #412]	; (80071a4 <UART_SetConfig+0x69c>)
 8007006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	2b05      	cmp	r3, #5
 800700e:	d827      	bhi.n	8007060 <UART_SetConfig+0x558>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0x510>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007031 	.word	0x08007031
 800701c:	08007039 	.word	0x08007039
 8007020:	08007041 	.word	0x08007041
 8007024:	08007049 	.word	0x08007049
 8007028:	08007051 	.word	0x08007051
 800702c:	08007059 	.word	0x08007059
 8007030:	2300      	movs	r3, #0
 8007032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007036:	e053      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800703e:	e04f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007046:	e04b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800704e:	e047      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8007050:	2320      	movs	r3, #32
 8007052:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007056:	e043      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8007058:	2340      	movs	r3, #64	; 0x40
 800705a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800705e:	e03f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 8007060:	2380      	movs	r3, #128	; 0x80
 8007062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007066:	bf00      	nop
 8007068:	e03a      	b.n	80070e0 <UART_SetConfig+0x5d8>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a50      	ldr	r2, [pc, #320]	; (80071b0 <UART_SetConfig+0x6a8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d132      	bne.n	80070da <UART_SetConfig+0x5d2>
 8007074:	4b4b      	ldr	r3, [pc, #300]	; (80071a4 <UART_SetConfig+0x69c>)
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	2b05      	cmp	r3, #5
 800707e:	d827      	bhi.n	80070d0 <UART_SetConfig+0x5c8>
 8007080:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0x580>)
 8007082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007086:	bf00      	nop
 8007088:	080070a1 	.word	0x080070a1
 800708c:	080070a9 	.word	0x080070a9
 8007090:	080070b1 	.word	0x080070b1
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070c9 	.word	0x080070c9
 80070a0:	2302      	movs	r3, #2
 80070a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070a6:	e01b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 80070a8:	2304      	movs	r3, #4
 80070aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070ae:	e017      	b.n	80070e0 <UART_SetConfig+0x5d8>
 80070b0:	2308      	movs	r3, #8
 80070b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070b6:	e013      	b.n	80070e0 <UART_SetConfig+0x5d8>
 80070b8:	2310      	movs	r3, #16
 80070ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070be:	e00f      	b.n	80070e0 <UART_SetConfig+0x5d8>
 80070c0:	2320      	movs	r3, #32
 80070c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070c6:	e00b      	b.n	80070e0 <UART_SetConfig+0x5d8>
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070ce:	e007      	b.n	80070e0 <UART_SetConfig+0x5d8>
 80070d0:	2380      	movs	r3, #128	; 0x80
 80070d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070d6:	bf00      	nop
 80070d8:	e002      	b.n	80070e0 <UART_SetConfig+0x5d8>
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a32      	ldr	r2, [pc, #200]	; (80071b0 <UART_SetConfig+0x6a8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	f040 86f7 	bne.w	8007eda <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070ec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80070f0:	2b08      	cmp	r3, #8
 80070f2:	f000 80c0 	beq.w	8007276 <UART_SetConfig+0x76e>
 80070f6:	2b08      	cmp	r3, #8
 80070f8:	dc04      	bgt.n	8007104 <UART_SetConfig+0x5fc>
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d00c      	beq.n	8007118 <UART_SetConfig+0x610>
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d065      	beq.n	80071ce <UART_SetConfig+0x6c6>
 8007102:	e27a      	b.n	80075fa <UART_SetConfig+0xaf2>
 8007104:	2b20      	cmp	r3, #32
 8007106:	f000 81b0 	beq.w	800746a <UART_SetConfig+0x962>
 800710a:	2b40      	cmp	r3, #64	; 0x40
 800710c:	f000 821e 	beq.w	800754c <UART_SetConfig+0xa44>
 8007110:	2b10      	cmp	r3, #16
 8007112:	f000 8104 	beq.w	800731e <UART_SetConfig+0x816>
 8007116:	e270      	b.n	80075fa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007118:	f7fd fde4 	bl	8004ce4 <HAL_RCCEx_GetD3PCLK1Freq>
 800711c:	4602      	mov	r2, r0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d04e      	beq.n	80071c4 <UART_SetConfig+0x6bc>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b01      	cmp	r3, #1
 800712c:	d048      	beq.n	80071c0 <UART_SetConfig+0x6b8>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b02      	cmp	r3, #2
 8007134:	d042      	beq.n	80071bc <UART_SetConfig+0x6b4>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	2b03      	cmp	r3, #3
 800713c:	d03c      	beq.n	80071b8 <UART_SetConfig+0x6b0>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2b04      	cmp	r3, #4
 8007144:	d036      	beq.n	80071b4 <UART_SetConfig+0x6ac>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b05      	cmp	r3, #5
 800714c:	d026      	beq.n	800719c <UART_SetConfig+0x694>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b06      	cmp	r3, #6
 8007154:	d020      	beq.n	8007198 <UART_SetConfig+0x690>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	2b07      	cmp	r3, #7
 800715c:	d01a      	beq.n	8007194 <UART_SetConfig+0x68c>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b08      	cmp	r3, #8
 8007164:	d014      	beq.n	8007190 <UART_SetConfig+0x688>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	2b09      	cmp	r3, #9
 800716c:	d00e      	beq.n	800718c <UART_SetConfig+0x684>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	2b0a      	cmp	r3, #10
 8007174:	d008      	beq.n	8007188 <UART_SetConfig+0x680>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717a:	2b0b      	cmp	r3, #11
 800717c:	d102      	bne.n	8007184 <UART_SetConfig+0x67c>
 800717e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007182:	e020      	b.n	80071c6 <UART_SetConfig+0x6be>
 8007184:	2301      	movs	r3, #1
 8007186:	e01e      	b.n	80071c6 <UART_SetConfig+0x6be>
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	e01c      	b.n	80071c6 <UART_SetConfig+0x6be>
 800718c:	2340      	movs	r3, #64	; 0x40
 800718e:	e01a      	b.n	80071c6 <UART_SetConfig+0x6be>
 8007190:	2320      	movs	r3, #32
 8007192:	e018      	b.n	80071c6 <UART_SetConfig+0x6be>
 8007194:	2310      	movs	r3, #16
 8007196:	e016      	b.n	80071c6 <UART_SetConfig+0x6be>
 8007198:	230c      	movs	r3, #12
 800719a:	e014      	b.n	80071c6 <UART_SetConfig+0x6be>
 800719c:	230a      	movs	r3, #10
 800719e:	e012      	b.n	80071c6 <UART_SetConfig+0x6be>
 80071a0:	40011400 	.word	0x40011400
 80071a4:	58024400 	.word	0x58024400
 80071a8:	40007800 	.word	0x40007800
 80071ac:	40007c00 	.word	0x40007c00
 80071b0:	58000c00 	.word	0x58000c00
 80071b4:	2308      	movs	r3, #8
 80071b6:	e006      	b.n	80071c6 <UART_SetConfig+0x6be>
 80071b8:	2306      	movs	r3, #6
 80071ba:	e004      	b.n	80071c6 <UART_SetConfig+0x6be>
 80071bc:	2304      	movs	r3, #4
 80071be:	e002      	b.n	80071c6 <UART_SetConfig+0x6be>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e000      	b.n	80071c6 <UART_SetConfig+0x6be>
 80071c4:	2301      	movs	r3, #1
 80071c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071cc:	e219      	b.n	8007602 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071ce:	f107 0318 	add.w	r3, r7, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd fd9c 	bl	8004d10 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071d8:	69fa      	ldr	r2, [r7, #28]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d044      	beq.n	800726c <UART_SetConfig+0x764>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d03e      	beq.n	8007268 <UART_SetConfig+0x760>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d038      	beq.n	8007264 <UART_SetConfig+0x75c>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d032      	beq.n	8007260 <UART_SetConfig+0x758>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d02c      	beq.n	800725c <UART_SetConfig+0x754>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b05      	cmp	r3, #5
 8007208:	d026      	beq.n	8007258 <UART_SetConfig+0x750>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	2b06      	cmp	r3, #6
 8007210:	d020      	beq.n	8007254 <UART_SetConfig+0x74c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	2b07      	cmp	r3, #7
 8007218:	d01a      	beq.n	8007250 <UART_SetConfig+0x748>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2b08      	cmp	r3, #8
 8007220:	d014      	beq.n	800724c <UART_SetConfig+0x744>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b09      	cmp	r3, #9
 8007228:	d00e      	beq.n	8007248 <UART_SetConfig+0x740>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b0a      	cmp	r3, #10
 8007230:	d008      	beq.n	8007244 <UART_SetConfig+0x73c>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	2b0b      	cmp	r3, #11
 8007238:	d102      	bne.n	8007240 <UART_SetConfig+0x738>
 800723a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800723e:	e016      	b.n	800726e <UART_SetConfig+0x766>
 8007240:	2301      	movs	r3, #1
 8007242:	e014      	b.n	800726e <UART_SetConfig+0x766>
 8007244:	2380      	movs	r3, #128	; 0x80
 8007246:	e012      	b.n	800726e <UART_SetConfig+0x766>
 8007248:	2340      	movs	r3, #64	; 0x40
 800724a:	e010      	b.n	800726e <UART_SetConfig+0x766>
 800724c:	2320      	movs	r3, #32
 800724e:	e00e      	b.n	800726e <UART_SetConfig+0x766>
 8007250:	2310      	movs	r3, #16
 8007252:	e00c      	b.n	800726e <UART_SetConfig+0x766>
 8007254:	230c      	movs	r3, #12
 8007256:	e00a      	b.n	800726e <UART_SetConfig+0x766>
 8007258:	230a      	movs	r3, #10
 800725a:	e008      	b.n	800726e <UART_SetConfig+0x766>
 800725c:	2308      	movs	r3, #8
 800725e:	e006      	b.n	800726e <UART_SetConfig+0x766>
 8007260:	2306      	movs	r3, #6
 8007262:	e004      	b.n	800726e <UART_SetConfig+0x766>
 8007264:	2304      	movs	r3, #4
 8007266:	e002      	b.n	800726e <UART_SetConfig+0x766>
 8007268:	2302      	movs	r3, #2
 800726a:	e000      	b.n	800726e <UART_SetConfig+0x766>
 800726c:	2301      	movs	r3, #1
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007274:	e1c5      	b.n	8007602 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007276:	f107 030c 	add.w	r3, r7, #12
 800727a:	4618      	mov	r0, r3
 800727c:	f7fd fe94 	bl	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d044      	beq.n	8007314 <UART_SetConfig+0x80c>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b01      	cmp	r3, #1
 8007290:	d03e      	beq.n	8007310 <UART_SetConfig+0x808>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b02      	cmp	r3, #2
 8007298:	d038      	beq.n	800730c <UART_SetConfig+0x804>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d032      	beq.n	8007308 <UART_SetConfig+0x800>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b04      	cmp	r3, #4
 80072a8:	d02c      	beq.n	8007304 <UART_SetConfig+0x7fc>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d026      	beq.n	8007300 <UART_SetConfig+0x7f8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b06      	cmp	r3, #6
 80072b8:	d020      	beq.n	80072fc <UART_SetConfig+0x7f4>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b07      	cmp	r3, #7
 80072c0:	d01a      	beq.n	80072f8 <UART_SetConfig+0x7f0>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b08      	cmp	r3, #8
 80072c8:	d014      	beq.n	80072f4 <UART_SetConfig+0x7ec>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	d00e      	beq.n	80072f0 <UART_SetConfig+0x7e8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	2b0a      	cmp	r3, #10
 80072d8:	d008      	beq.n	80072ec <UART_SetConfig+0x7e4>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	2b0b      	cmp	r3, #11
 80072e0:	d102      	bne.n	80072e8 <UART_SetConfig+0x7e0>
 80072e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072e6:	e016      	b.n	8007316 <UART_SetConfig+0x80e>
 80072e8:	2301      	movs	r3, #1
 80072ea:	e014      	b.n	8007316 <UART_SetConfig+0x80e>
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	e012      	b.n	8007316 <UART_SetConfig+0x80e>
 80072f0:	2340      	movs	r3, #64	; 0x40
 80072f2:	e010      	b.n	8007316 <UART_SetConfig+0x80e>
 80072f4:	2320      	movs	r3, #32
 80072f6:	e00e      	b.n	8007316 <UART_SetConfig+0x80e>
 80072f8:	2310      	movs	r3, #16
 80072fa:	e00c      	b.n	8007316 <UART_SetConfig+0x80e>
 80072fc:	230c      	movs	r3, #12
 80072fe:	e00a      	b.n	8007316 <UART_SetConfig+0x80e>
 8007300:	230a      	movs	r3, #10
 8007302:	e008      	b.n	8007316 <UART_SetConfig+0x80e>
 8007304:	2308      	movs	r3, #8
 8007306:	e006      	b.n	8007316 <UART_SetConfig+0x80e>
 8007308:	2306      	movs	r3, #6
 800730a:	e004      	b.n	8007316 <UART_SetConfig+0x80e>
 800730c:	2304      	movs	r3, #4
 800730e:	e002      	b.n	8007316 <UART_SetConfig+0x80e>
 8007310:	2302      	movs	r3, #2
 8007312:	e000      	b.n	8007316 <UART_SetConfig+0x80e>
 8007314:	2301      	movs	r3, #1
 8007316:	fbb2 f3f3 	udiv	r3, r2, r3
 800731a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800731c:	e171      	b.n	8007602 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800731e:	4b7a      	ldr	r3, [pc, #488]	; (8007508 <UART_SetConfig+0xa00>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d054      	beq.n	80073d4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800732a:	4b77      	ldr	r3, [pc, #476]	; (8007508 <UART_SetConfig+0xa00>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	08db      	lsrs	r3, r3, #3
 8007330:	f003 0303 	and.w	r3, r3, #3
 8007334:	4a75      	ldr	r2, [pc, #468]	; (800750c <UART_SetConfig+0xa04>)
 8007336:	40da      	lsrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	2b00      	cmp	r3, #0
 800733e:	d044      	beq.n	80073ca <UART_SetConfig+0x8c2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b01      	cmp	r3, #1
 8007346:	d03e      	beq.n	80073c6 <UART_SetConfig+0x8be>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	2b02      	cmp	r3, #2
 800734e:	d038      	beq.n	80073c2 <UART_SetConfig+0x8ba>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b03      	cmp	r3, #3
 8007356:	d032      	beq.n	80073be <UART_SetConfig+0x8b6>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b04      	cmp	r3, #4
 800735e:	d02c      	beq.n	80073ba <UART_SetConfig+0x8b2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b05      	cmp	r3, #5
 8007366:	d026      	beq.n	80073b6 <UART_SetConfig+0x8ae>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	2b06      	cmp	r3, #6
 800736e:	d020      	beq.n	80073b2 <UART_SetConfig+0x8aa>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	2b07      	cmp	r3, #7
 8007376:	d01a      	beq.n	80073ae <UART_SetConfig+0x8a6>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	2b08      	cmp	r3, #8
 800737e:	d014      	beq.n	80073aa <UART_SetConfig+0x8a2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b09      	cmp	r3, #9
 8007386:	d00e      	beq.n	80073a6 <UART_SetConfig+0x89e>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b0a      	cmp	r3, #10
 800738e:	d008      	beq.n	80073a2 <UART_SetConfig+0x89a>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b0b      	cmp	r3, #11
 8007396:	d102      	bne.n	800739e <UART_SetConfig+0x896>
 8007398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800739c:	e016      	b.n	80073cc <UART_SetConfig+0x8c4>
 800739e:	2301      	movs	r3, #1
 80073a0:	e014      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073a2:	2380      	movs	r3, #128	; 0x80
 80073a4:	e012      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	e010      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073aa:	2320      	movs	r3, #32
 80073ac:	e00e      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073ae:	2310      	movs	r3, #16
 80073b0:	e00c      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073b2:	230c      	movs	r3, #12
 80073b4:	e00a      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073b6:	230a      	movs	r3, #10
 80073b8:	e008      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073ba:	2308      	movs	r3, #8
 80073bc:	e006      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073be:	2306      	movs	r3, #6
 80073c0:	e004      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073c2:	2304      	movs	r3, #4
 80073c4:	e002      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e000      	b.n	80073cc <UART_SetConfig+0x8c4>
 80073ca:	2301      	movs	r3, #1
 80073cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80073d2:	e116      	b.n	8007602 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d043      	beq.n	8007464 <UART_SetConfig+0x95c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d03d      	beq.n	8007460 <UART_SetConfig+0x958>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d037      	beq.n	800745c <UART_SetConfig+0x954>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b03      	cmp	r3, #3
 80073f2:	d031      	beq.n	8007458 <UART_SetConfig+0x950>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d02b      	beq.n	8007454 <UART_SetConfig+0x94c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b05      	cmp	r3, #5
 8007402:	d025      	beq.n	8007450 <UART_SetConfig+0x948>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b06      	cmp	r3, #6
 800740a:	d01f      	beq.n	800744c <UART_SetConfig+0x944>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	2b07      	cmp	r3, #7
 8007412:	d019      	beq.n	8007448 <UART_SetConfig+0x940>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007418:	2b08      	cmp	r3, #8
 800741a:	d013      	beq.n	8007444 <UART_SetConfig+0x93c>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	2b09      	cmp	r3, #9
 8007422:	d00d      	beq.n	8007440 <UART_SetConfig+0x938>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	2b0a      	cmp	r3, #10
 800742a:	d007      	beq.n	800743c <UART_SetConfig+0x934>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b0b      	cmp	r3, #11
 8007432:	d101      	bne.n	8007438 <UART_SetConfig+0x930>
 8007434:	4b36      	ldr	r3, [pc, #216]	; (8007510 <UART_SetConfig+0xa08>)
 8007436:	e016      	b.n	8007466 <UART_SetConfig+0x95e>
 8007438:	4b34      	ldr	r3, [pc, #208]	; (800750c <UART_SetConfig+0xa04>)
 800743a:	e014      	b.n	8007466 <UART_SetConfig+0x95e>
 800743c:	4b35      	ldr	r3, [pc, #212]	; (8007514 <UART_SetConfig+0xa0c>)
 800743e:	e012      	b.n	8007466 <UART_SetConfig+0x95e>
 8007440:	4b35      	ldr	r3, [pc, #212]	; (8007518 <UART_SetConfig+0xa10>)
 8007442:	e010      	b.n	8007466 <UART_SetConfig+0x95e>
 8007444:	4b35      	ldr	r3, [pc, #212]	; (800751c <UART_SetConfig+0xa14>)
 8007446:	e00e      	b.n	8007466 <UART_SetConfig+0x95e>
 8007448:	4b35      	ldr	r3, [pc, #212]	; (8007520 <UART_SetConfig+0xa18>)
 800744a:	e00c      	b.n	8007466 <UART_SetConfig+0x95e>
 800744c:	4b35      	ldr	r3, [pc, #212]	; (8007524 <UART_SetConfig+0xa1c>)
 800744e:	e00a      	b.n	8007466 <UART_SetConfig+0x95e>
 8007450:	4b35      	ldr	r3, [pc, #212]	; (8007528 <UART_SetConfig+0xa20>)
 8007452:	e008      	b.n	8007466 <UART_SetConfig+0x95e>
 8007454:	4b35      	ldr	r3, [pc, #212]	; (800752c <UART_SetConfig+0xa24>)
 8007456:	e006      	b.n	8007466 <UART_SetConfig+0x95e>
 8007458:	4b35      	ldr	r3, [pc, #212]	; (8007530 <UART_SetConfig+0xa28>)
 800745a:	e004      	b.n	8007466 <UART_SetConfig+0x95e>
 800745c:	4b35      	ldr	r3, [pc, #212]	; (8007534 <UART_SetConfig+0xa2c>)
 800745e:	e002      	b.n	8007466 <UART_SetConfig+0x95e>
 8007460:	4b35      	ldr	r3, [pc, #212]	; (8007538 <UART_SetConfig+0xa30>)
 8007462:	e000      	b.n	8007466 <UART_SetConfig+0x95e>
 8007464:	4b29      	ldr	r3, [pc, #164]	; (800750c <UART_SetConfig+0xa04>)
 8007466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007468:	e0cb      	b.n	8007602 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	d046      	beq.n	8007500 <UART_SetConfig+0x9f8>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b01      	cmp	r3, #1
 8007478:	d040      	beq.n	80074fc <UART_SetConfig+0x9f4>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b02      	cmp	r3, #2
 8007480:	d03a      	beq.n	80074f8 <UART_SetConfig+0x9f0>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b03      	cmp	r3, #3
 8007488:	d034      	beq.n	80074f4 <UART_SetConfig+0x9ec>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b04      	cmp	r3, #4
 8007490:	d02e      	beq.n	80074f0 <UART_SetConfig+0x9e8>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b05      	cmp	r3, #5
 8007498:	d028      	beq.n	80074ec <UART_SetConfig+0x9e4>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	2b06      	cmp	r3, #6
 80074a0:	d022      	beq.n	80074e8 <UART_SetConfig+0x9e0>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b07      	cmp	r3, #7
 80074a8:	d01c      	beq.n	80074e4 <UART_SetConfig+0x9dc>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d016      	beq.n	80074e0 <UART_SetConfig+0x9d8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	d00f      	beq.n	80074da <UART_SetConfig+0x9d2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	2b0a      	cmp	r3, #10
 80074c0:	d008      	beq.n	80074d4 <UART_SetConfig+0x9cc>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b0b      	cmp	r3, #11
 80074c8:	d102      	bne.n	80074d0 <UART_SetConfig+0x9c8>
 80074ca:	f643 5309 	movw	r3, #15625	; 0x3d09
 80074ce:	e018      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074d0:	4b13      	ldr	r3, [pc, #76]	; (8007520 <UART_SetConfig+0xa18>)
 80074d2:	e016      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074d4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80074d8:	e013      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80074de:	e010      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074e0:	4b16      	ldr	r3, [pc, #88]	; (800753c <UART_SetConfig+0xa34>)
 80074e2:	e00e      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074e4:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <UART_SetConfig+0xa08>)
 80074e6:	e00c      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074e8:	4b15      	ldr	r3, [pc, #84]	; (8007540 <UART_SetConfig+0xa38>)
 80074ea:	e00a      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074ec:	4b15      	ldr	r3, [pc, #84]	; (8007544 <UART_SetConfig+0xa3c>)
 80074ee:	e008      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074f0:	4b08      	ldr	r3, [pc, #32]	; (8007514 <UART_SetConfig+0xa0c>)
 80074f2:	e006      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074f4:	4b14      	ldr	r3, [pc, #80]	; (8007548 <UART_SetConfig+0xa40>)
 80074f6:	e004      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <UART_SetConfig+0xa10>)
 80074fa:	e002      	b.n	8007502 <UART_SetConfig+0x9fa>
 80074fc:	4b07      	ldr	r3, [pc, #28]	; (800751c <UART_SetConfig+0xa14>)
 80074fe:	e000      	b.n	8007502 <UART_SetConfig+0x9fa>
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <UART_SetConfig+0xa18>)
 8007502:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007504:	e07d      	b.n	8007602 <UART_SetConfig+0xafa>
 8007506:	bf00      	nop
 8007508:	58024400 	.word	0x58024400
 800750c:	03d09000 	.word	0x03d09000
 8007510:	0003d090 	.word	0x0003d090
 8007514:	0007a120 	.word	0x0007a120
 8007518:	000f4240 	.word	0x000f4240
 800751c:	001e8480 	.word	0x001e8480
 8007520:	003d0900 	.word	0x003d0900
 8007524:	00516155 	.word	0x00516155
 8007528:	0061a800 	.word	0x0061a800
 800752c:	007a1200 	.word	0x007a1200
 8007530:	00a2c2aa 	.word	0x00a2c2aa
 8007534:	00f42400 	.word	0x00f42400
 8007538:	01e84800 	.word	0x01e84800
 800753c:	0001e848 	.word	0x0001e848
 8007540:	00051615 	.word	0x00051615
 8007544:	00061a80 	.word	0x00061a80
 8007548:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b00      	cmp	r3, #0
 8007552:	d04e      	beq.n	80075f2 <UART_SetConfig+0xaea>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b01      	cmp	r3, #1
 800755a:	d047      	beq.n	80075ec <UART_SetConfig+0xae4>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2b02      	cmp	r3, #2
 8007562:	d040      	beq.n	80075e6 <UART_SetConfig+0xade>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	2b03      	cmp	r3, #3
 800756a:	d039      	beq.n	80075e0 <UART_SetConfig+0xad8>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2b04      	cmp	r3, #4
 8007572:	d032      	beq.n	80075da <UART_SetConfig+0xad2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2b05      	cmp	r3, #5
 800757a:	d02b      	beq.n	80075d4 <UART_SetConfig+0xacc>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	2b06      	cmp	r3, #6
 8007582:	d024      	beq.n	80075ce <UART_SetConfig+0xac6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b07      	cmp	r3, #7
 800758a:	d01d      	beq.n	80075c8 <UART_SetConfig+0xac0>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	2b08      	cmp	r3, #8
 8007592:	d016      	beq.n	80075c2 <UART_SetConfig+0xaba>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	2b09      	cmp	r3, #9
 800759a:	d00f      	beq.n	80075bc <UART_SetConfig+0xab4>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	2b0a      	cmp	r3, #10
 80075a2:	d008      	beq.n	80075b6 <UART_SetConfig+0xaae>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	2b0b      	cmp	r3, #11
 80075aa:	d101      	bne.n	80075b0 <UART_SetConfig+0xaa8>
 80075ac:	2380      	movs	r3, #128	; 0x80
 80075ae:	e022      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075b4:	e01f      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ba:	e01c      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075c0:	e019      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075c6:	e016      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075cc:	e013      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80075d2:	e010      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80075d8:	e00d      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075de:	e00a      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80075e4:	e007      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075ea:	e004      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075f0:	e001      	b.n	80075f6 <UART_SetConfig+0xaee>
 80075f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075f8:	e003      	b.n	8007602 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007600:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	2b00      	cmp	r3, #0
 8007606:	f001 83e8 	beq.w	8008dda <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	4613      	mov	r3, r2
 8007610:	005b      	lsls	r3, r3, #1
 8007612:	4413      	add	r3, r2
 8007614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007616:	429a      	cmp	r2, r3
 8007618:	d305      	bcc.n	8007626 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007622:	429a      	cmp	r2, r3
 8007624:	d904      	bls.n	8007630 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800762c:	f001 bbd5 	b.w	8008dda <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007630:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007634:	2b08      	cmp	r3, #8
 8007636:	f000 8154 	beq.w	80078e2 <UART_SetConfig+0xdda>
 800763a:	2b08      	cmp	r3, #8
 800763c:	dc06      	bgt.n	800764c <UART_SetConfig+0xb44>
 800763e:	2b02      	cmp	r3, #2
 8007640:	d00f      	beq.n	8007662 <UART_SetConfig+0xb5a>
 8007642:	2b04      	cmp	r3, #4
 8007644:	f000 80ac 	beq.w	80077a0 <UART_SetConfig+0xc98>
 8007648:	f000 bc30 	b.w	8007eac <UART_SetConfig+0x13a4>
 800764c:	2b20      	cmp	r3, #32
 800764e:	f000 832d 	beq.w	8007cac <UART_SetConfig+0x11a4>
 8007652:	2b40      	cmp	r3, #64	; 0x40
 8007654:	f000 83a5 	beq.w	8007da2 <UART_SetConfig+0x129a>
 8007658:	2b10      	cmp	r3, #16
 800765a:	f000 81e3 	beq.w	8007a24 <UART_SetConfig+0xf1c>
 800765e:	f000 bc25 	b.w	8007eac <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007662:	f7fd fb3f 	bl	8004ce4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007666:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	4618      	mov	r0, r3
 800766c:	f04f 0100 	mov.w	r1, #0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b00      	cmp	r3, #0
 8007676:	d067      	beq.n	8007748 <UART_SetConfig+0xc40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b01      	cmp	r3, #1
 800767e:	d05e      	beq.n	800773e <UART_SetConfig+0xc36>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b02      	cmp	r3, #2
 8007686:	d055      	beq.n	8007734 <UART_SetConfig+0xc2c>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b03      	cmp	r3, #3
 800768e:	d04c      	beq.n	800772a <UART_SetConfig+0xc22>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	2b04      	cmp	r3, #4
 8007696:	d043      	beq.n	8007720 <UART_SetConfig+0xc18>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b05      	cmp	r3, #5
 800769e:	d03a      	beq.n	8007716 <UART_SetConfig+0xc0e>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	2b06      	cmp	r3, #6
 80076a6:	d031      	beq.n	800770c <UART_SetConfig+0xc04>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ac:	2b07      	cmp	r3, #7
 80076ae:	d028      	beq.n	8007702 <UART_SetConfig+0xbfa>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d01f      	beq.n	80076f8 <UART_SetConfig+0xbf0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d016      	beq.n	80076ee <UART_SetConfig+0xbe6>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	2b0a      	cmp	r3, #10
 80076c6:	d00d      	beq.n	80076e4 <UART_SetConfig+0xbdc>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	2b0b      	cmp	r3, #11
 80076ce:	d104      	bne.n	80076da <UART_SetConfig+0xbd2>
 80076d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076d4:	f04f 0400 	mov.w	r4, #0
 80076d8:	e03a      	b.n	8007750 <UART_SetConfig+0xc48>
 80076da:	f04f 0301 	mov.w	r3, #1
 80076de:	f04f 0400 	mov.w	r4, #0
 80076e2:	e035      	b.n	8007750 <UART_SetConfig+0xc48>
 80076e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	e030      	b.n	8007750 <UART_SetConfig+0xc48>
 80076ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80076f2:	f04f 0400 	mov.w	r4, #0
 80076f6:	e02b      	b.n	8007750 <UART_SetConfig+0xc48>
 80076f8:	f04f 0320 	mov.w	r3, #32
 80076fc:	f04f 0400 	mov.w	r4, #0
 8007700:	e026      	b.n	8007750 <UART_SetConfig+0xc48>
 8007702:	f04f 0310 	mov.w	r3, #16
 8007706:	f04f 0400 	mov.w	r4, #0
 800770a:	e021      	b.n	8007750 <UART_SetConfig+0xc48>
 800770c:	f04f 030c 	mov.w	r3, #12
 8007710:	f04f 0400 	mov.w	r4, #0
 8007714:	e01c      	b.n	8007750 <UART_SetConfig+0xc48>
 8007716:	f04f 030a 	mov.w	r3, #10
 800771a:	f04f 0400 	mov.w	r4, #0
 800771e:	e017      	b.n	8007750 <UART_SetConfig+0xc48>
 8007720:	f04f 0308 	mov.w	r3, #8
 8007724:	f04f 0400 	mov.w	r4, #0
 8007728:	e012      	b.n	8007750 <UART_SetConfig+0xc48>
 800772a:	f04f 0306 	mov.w	r3, #6
 800772e:	f04f 0400 	mov.w	r4, #0
 8007732:	e00d      	b.n	8007750 <UART_SetConfig+0xc48>
 8007734:	f04f 0304 	mov.w	r3, #4
 8007738:	f04f 0400 	mov.w	r4, #0
 800773c:	e008      	b.n	8007750 <UART_SetConfig+0xc48>
 800773e:	f04f 0302 	mov.w	r3, #2
 8007742:	f04f 0400 	mov.w	r4, #0
 8007746:	e003      	b.n	8007750 <UART_SetConfig+0xc48>
 8007748:	f04f 0301 	mov.w	r3, #1
 800774c:	f04f 0400 	mov.w	r4, #0
 8007750:	461a      	mov	r2, r3
 8007752:	4623      	mov	r3, r4
 8007754:	f7f8 fdc0 	bl	80002d8 <__aeabi_uldivmod>
 8007758:	4603      	mov	r3, r0
 800775a:	460c      	mov	r4, r1
 800775c:	4619      	mov	r1, r3
 800775e:	4622      	mov	r2, r4
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	f04f 0400 	mov.w	r4, #0
 8007768:	0214      	lsls	r4, r2, #8
 800776a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800776e:	020b      	lsls	r3, r1, #8
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	6852      	ldr	r2, [r2, #4]
 8007774:	0852      	lsrs	r2, r2, #1
 8007776:	4611      	mov	r1, r2
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	eb13 0b01 	adds.w	fp, r3, r1
 8007780:	eb44 0c02 	adc.w	ip, r4, r2
 8007784:	4658      	mov	r0, fp
 8007786:	4661      	mov	r1, ip
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f04f 0400 	mov.w	r4, #0
 8007790:	461a      	mov	r2, r3
 8007792:	4623      	mov	r3, r4
 8007794:	f7f8 fda0 	bl	80002d8 <__aeabi_uldivmod>
 8007798:	4603      	mov	r3, r0
 800779a:	460c      	mov	r4, r1
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800779e:	e389      	b.n	8007eb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077a0:	f107 0318 	add.w	r3, r7, #24
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7fd fab3 	bl	8004d10 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f04f 0100 	mov.w	r1, #0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d067      	beq.n	800788a <UART_SetConfig+0xd82>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d05e      	beq.n	8007880 <UART_SetConfig+0xd78>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d055      	beq.n	8007876 <UART_SetConfig+0xd6e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b03      	cmp	r3, #3
 80077d0:	d04c      	beq.n	800786c <UART_SetConfig+0xd64>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b04      	cmp	r3, #4
 80077d8:	d043      	beq.n	8007862 <UART_SetConfig+0xd5a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d03a      	beq.n	8007858 <UART_SetConfig+0xd50>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b06      	cmp	r3, #6
 80077e8:	d031      	beq.n	800784e <UART_SetConfig+0xd46>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ee:	2b07      	cmp	r3, #7
 80077f0:	d028      	beq.n	8007844 <UART_SetConfig+0xd3c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	2b08      	cmp	r3, #8
 80077f8:	d01f      	beq.n	800783a <UART_SetConfig+0xd32>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	2b09      	cmp	r3, #9
 8007800:	d016      	beq.n	8007830 <UART_SetConfig+0xd28>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007806:	2b0a      	cmp	r3, #10
 8007808:	d00d      	beq.n	8007826 <UART_SetConfig+0xd1e>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	2b0b      	cmp	r3, #11
 8007810:	d104      	bne.n	800781c <UART_SetConfig+0xd14>
 8007812:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007816:	f04f 0400 	mov.w	r4, #0
 800781a:	e03a      	b.n	8007892 <UART_SetConfig+0xd8a>
 800781c:	f04f 0301 	mov.w	r3, #1
 8007820:	f04f 0400 	mov.w	r4, #0
 8007824:	e035      	b.n	8007892 <UART_SetConfig+0xd8a>
 8007826:	f04f 0380 	mov.w	r3, #128	; 0x80
 800782a:	f04f 0400 	mov.w	r4, #0
 800782e:	e030      	b.n	8007892 <UART_SetConfig+0xd8a>
 8007830:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007834:	f04f 0400 	mov.w	r4, #0
 8007838:	e02b      	b.n	8007892 <UART_SetConfig+0xd8a>
 800783a:	f04f 0320 	mov.w	r3, #32
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	e026      	b.n	8007892 <UART_SetConfig+0xd8a>
 8007844:	f04f 0310 	mov.w	r3, #16
 8007848:	f04f 0400 	mov.w	r4, #0
 800784c:	e021      	b.n	8007892 <UART_SetConfig+0xd8a>
 800784e:	f04f 030c 	mov.w	r3, #12
 8007852:	f04f 0400 	mov.w	r4, #0
 8007856:	e01c      	b.n	8007892 <UART_SetConfig+0xd8a>
 8007858:	f04f 030a 	mov.w	r3, #10
 800785c:	f04f 0400 	mov.w	r4, #0
 8007860:	e017      	b.n	8007892 <UART_SetConfig+0xd8a>
 8007862:	f04f 0308 	mov.w	r3, #8
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	e012      	b.n	8007892 <UART_SetConfig+0xd8a>
 800786c:	f04f 0306 	mov.w	r3, #6
 8007870:	f04f 0400 	mov.w	r4, #0
 8007874:	e00d      	b.n	8007892 <UART_SetConfig+0xd8a>
 8007876:	f04f 0304 	mov.w	r3, #4
 800787a:	f04f 0400 	mov.w	r4, #0
 800787e:	e008      	b.n	8007892 <UART_SetConfig+0xd8a>
 8007880:	f04f 0302 	mov.w	r3, #2
 8007884:	f04f 0400 	mov.w	r4, #0
 8007888:	e003      	b.n	8007892 <UART_SetConfig+0xd8a>
 800788a:	f04f 0301 	mov.w	r3, #1
 800788e:	f04f 0400 	mov.w	r4, #0
 8007892:	461a      	mov	r2, r3
 8007894:	4623      	mov	r3, r4
 8007896:	f7f8 fd1f 	bl	80002d8 <__aeabi_uldivmod>
 800789a:	4603      	mov	r3, r0
 800789c:	460c      	mov	r4, r1
 800789e:	4619      	mov	r1, r3
 80078a0:	4622      	mov	r2, r4
 80078a2:	f04f 0300 	mov.w	r3, #0
 80078a6:	f04f 0400 	mov.w	r4, #0
 80078aa:	0214      	lsls	r4, r2, #8
 80078ac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80078b0:	020b      	lsls	r3, r1, #8
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	6852      	ldr	r2, [r2, #4]
 80078b6:	0852      	lsrs	r2, r2, #1
 80078b8:	4611      	mov	r1, r2
 80078ba:	f04f 0200 	mov.w	r2, #0
 80078be:	eb13 0b01 	adds.w	fp, r3, r1
 80078c2:	eb44 0c02 	adc.w	ip, r4, r2
 80078c6:	4658      	mov	r0, fp
 80078c8:	4661      	mov	r1, ip
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	f04f 0400 	mov.w	r4, #0
 80078d2:	461a      	mov	r2, r3
 80078d4:	4623      	mov	r3, r4
 80078d6:	f7f8 fcff 	bl	80002d8 <__aeabi_uldivmod>
 80078da:	4603      	mov	r3, r0
 80078dc:	460c      	mov	r4, r1
 80078de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078e0:	e2e8      	b.n	8007eb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e2:	f107 030c 	add.w	r3, r7, #12
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd fb5e 	bl	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f04f 0100 	mov.w	r1, #0
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d067      	beq.n	80079cc <UART_SetConfig+0xec4>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b01      	cmp	r3, #1
 8007902:	d05e      	beq.n	80079c2 <UART_SetConfig+0xeba>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b02      	cmp	r3, #2
 800790a:	d055      	beq.n	80079b8 <UART_SetConfig+0xeb0>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b03      	cmp	r3, #3
 8007912:	d04c      	beq.n	80079ae <UART_SetConfig+0xea6>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b04      	cmp	r3, #4
 800791a:	d043      	beq.n	80079a4 <UART_SetConfig+0xe9c>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b05      	cmp	r3, #5
 8007922:	d03a      	beq.n	800799a <UART_SetConfig+0xe92>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	2b06      	cmp	r3, #6
 800792a:	d031      	beq.n	8007990 <UART_SetConfig+0xe88>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	2b07      	cmp	r3, #7
 8007932:	d028      	beq.n	8007986 <UART_SetConfig+0xe7e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007938:	2b08      	cmp	r3, #8
 800793a:	d01f      	beq.n	800797c <UART_SetConfig+0xe74>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	2b09      	cmp	r3, #9
 8007942:	d016      	beq.n	8007972 <UART_SetConfig+0xe6a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007948:	2b0a      	cmp	r3, #10
 800794a:	d00d      	beq.n	8007968 <UART_SetConfig+0xe60>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007950:	2b0b      	cmp	r3, #11
 8007952:	d104      	bne.n	800795e <UART_SetConfig+0xe56>
 8007954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007958:	f04f 0400 	mov.w	r4, #0
 800795c:	e03a      	b.n	80079d4 <UART_SetConfig+0xecc>
 800795e:	f04f 0301 	mov.w	r3, #1
 8007962:	f04f 0400 	mov.w	r4, #0
 8007966:	e035      	b.n	80079d4 <UART_SetConfig+0xecc>
 8007968:	f04f 0380 	mov.w	r3, #128	; 0x80
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	e030      	b.n	80079d4 <UART_SetConfig+0xecc>
 8007972:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	e02b      	b.n	80079d4 <UART_SetConfig+0xecc>
 800797c:	f04f 0320 	mov.w	r3, #32
 8007980:	f04f 0400 	mov.w	r4, #0
 8007984:	e026      	b.n	80079d4 <UART_SetConfig+0xecc>
 8007986:	f04f 0310 	mov.w	r3, #16
 800798a:	f04f 0400 	mov.w	r4, #0
 800798e:	e021      	b.n	80079d4 <UART_SetConfig+0xecc>
 8007990:	f04f 030c 	mov.w	r3, #12
 8007994:	f04f 0400 	mov.w	r4, #0
 8007998:	e01c      	b.n	80079d4 <UART_SetConfig+0xecc>
 800799a:	f04f 030a 	mov.w	r3, #10
 800799e:	f04f 0400 	mov.w	r4, #0
 80079a2:	e017      	b.n	80079d4 <UART_SetConfig+0xecc>
 80079a4:	f04f 0308 	mov.w	r3, #8
 80079a8:	f04f 0400 	mov.w	r4, #0
 80079ac:	e012      	b.n	80079d4 <UART_SetConfig+0xecc>
 80079ae:	f04f 0306 	mov.w	r3, #6
 80079b2:	f04f 0400 	mov.w	r4, #0
 80079b6:	e00d      	b.n	80079d4 <UART_SetConfig+0xecc>
 80079b8:	f04f 0304 	mov.w	r3, #4
 80079bc:	f04f 0400 	mov.w	r4, #0
 80079c0:	e008      	b.n	80079d4 <UART_SetConfig+0xecc>
 80079c2:	f04f 0302 	mov.w	r3, #2
 80079c6:	f04f 0400 	mov.w	r4, #0
 80079ca:	e003      	b.n	80079d4 <UART_SetConfig+0xecc>
 80079cc:	f04f 0301 	mov.w	r3, #1
 80079d0:	f04f 0400 	mov.w	r4, #0
 80079d4:	461a      	mov	r2, r3
 80079d6:	4623      	mov	r3, r4
 80079d8:	f7f8 fc7e 	bl	80002d8 <__aeabi_uldivmod>
 80079dc:	4603      	mov	r3, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	4619      	mov	r1, r3
 80079e2:	4622      	mov	r2, r4
 80079e4:	f04f 0300 	mov.w	r3, #0
 80079e8:	f04f 0400 	mov.w	r4, #0
 80079ec:	0214      	lsls	r4, r2, #8
 80079ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079f2:	020b      	lsls	r3, r1, #8
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6852      	ldr	r2, [r2, #4]
 80079f8:	0852      	lsrs	r2, r2, #1
 80079fa:	4611      	mov	r1, r2
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	eb13 0b01 	adds.w	fp, r3, r1
 8007a04:	eb44 0c02 	adc.w	ip, r4, r2
 8007a08:	4658      	mov	r0, fp
 8007a0a:	4661      	mov	r1, ip
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f04f 0400 	mov.w	r4, #0
 8007a14:	461a      	mov	r2, r3
 8007a16:	4623      	mov	r3, r4
 8007a18:	f7f8 fc5e 	bl	80002d8 <__aeabi_uldivmod>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a22:	e247      	b.n	8007eb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a24:	4b96      	ldr	r3, [pc, #600]	; (8007c80 <UART_SetConfig+0x1178>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80a3 	beq.w	8007b78 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a32:	4b93      	ldr	r3, [pc, #588]	; (8007c80 <UART_SetConfig+0x1178>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	08db      	lsrs	r3, r3, #3
 8007a38:	f003 0303 	and.w	r3, r3, #3
 8007a3c:	4a91      	ldr	r2, [pc, #580]	; (8007c84 <UART_SetConfig+0x117c>)
 8007a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a42:	4618      	mov	r0, r3
 8007a44:	f04f 0100 	mov.w	r1, #0
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d067      	beq.n	8007b20 <UART_SetConfig+0x1018>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d05e      	beq.n	8007b16 <UART_SetConfig+0x100e>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	2b02      	cmp	r3, #2
 8007a5e:	d055      	beq.n	8007b0c <UART_SetConfig+0x1004>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2b03      	cmp	r3, #3
 8007a66:	d04c      	beq.n	8007b02 <UART_SetConfig+0xffa>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d043      	beq.n	8007af8 <UART_SetConfig+0xff0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2b05      	cmp	r3, #5
 8007a76:	d03a      	beq.n	8007aee <UART_SetConfig+0xfe6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	2b06      	cmp	r3, #6
 8007a7e:	d031      	beq.n	8007ae4 <UART_SetConfig+0xfdc>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	2b07      	cmp	r3, #7
 8007a86:	d028      	beq.n	8007ada <UART_SetConfig+0xfd2>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d01f      	beq.n	8007ad0 <UART_SetConfig+0xfc8>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	2b09      	cmp	r3, #9
 8007a96:	d016      	beq.n	8007ac6 <UART_SetConfig+0xfbe>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	2b0a      	cmp	r3, #10
 8007a9e:	d00d      	beq.n	8007abc <UART_SetConfig+0xfb4>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	2b0b      	cmp	r3, #11
 8007aa6:	d104      	bne.n	8007ab2 <UART_SetConfig+0xfaa>
 8007aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aac:	f04f 0400 	mov.w	r4, #0
 8007ab0:	e03a      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007ab2:	f04f 0301 	mov.w	r3, #1
 8007ab6:	f04f 0400 	mov.w	r4, #0
 8007aba:	e035      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007abc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007ac0:	f04f 0400 	mov.w	r4, #0
 8007ac4:	e030      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007ac6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007aca:	f04f 0400 	mov.w	r4, #0
 8007ace:	e02b      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007ad0:	f04f 0320 	mov.w	r3, #32
 8007ad4:	f04f 0400 	mov.w	r4, #0
 8007ad8:	e026      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007ada:	f04f 0310 	mov.w	r3, #16
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	e021      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007ae4:	f04f 030c 	mov.w	r3, #12
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	e01c      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007aee:	f04f 030a 	mov.w	r3, #10
 8007af2:	f04f 0400 	mov.w	r4, #0
 8007af6:	e017      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007af8:	f04f 0308 	mov.w	r3, #8
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	e012      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007b02:	f04f 0306 	mov.w	r3, #6
 8007b06:	f04f 0400 	mov.w	r4, #0
 8007b0a:	e00d      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007b0c:	f04f 0304 	mov.w	r3, #4
 8007b10:	f04f 0400 	mov.w	r4, #0
 8007b14:	e008      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007b16:	f04f 0302 	mov.w	r3, #2
 8007b1a:	f04f 0400 	mov.w	r4, #0
 8007b1e:	e003      	b.n	8007b28 <UART_SetConfig+0x1020>
 8007b20:	f04f 0301 	mov.w	r3, #1
 8007b24:	f04f 0400 	mov.w	r4, #0
 8007b28:	461a      	mov	r2, r3
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	f7f8 fbd4 	bl	80002d8 <__aeabi_uldivmod>
 8007b30:	4603      	mov	r3, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4619      	mov	r1, r3
 8007b36:	4622      	mov	r2, r4
 8007b38:	f04f 0300 	mov.w	r3, #0
 8007b3c:	f04f 0400 	mov.w	r4, #0
 8007b40:	0214      	lsls	r4, r2, #8
 8007b42:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007b46:	020b      	lsls	r3, r1, #8
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	6852      	ldr	r2, [r2, #4]
 8007b4c:	0852      	lsrs	r2, r2, #1
 8007b4e:	4611      	mov	r1, r2
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	eb13 0b01 	adds.w	fp, r3, r1
 8007b58:	eb44 0c02 	adc.w	ip, r4, r2
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	4661      	mov	r1, ip
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	f04f 0400 	mov.w	r4, #0
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4623      	mov	r3, r4
 8007b6c:	f7f8 fbb4 	bl	80002d8 <__aeabi_uldivmod>
 8007b70:	4603      	mov	r3, r0
 8007b72:	460c      	mov	r4, r1
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007b76:	e19d      	b.n	8007eb4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d05b      	beq.n	8007c38 <UART_SetConfig+0x1130>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d053      	beq.n	8007c30 <UART_SetConfig+0x1128>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	d04b      	beq.n	8007c28 <UART_SetConfig+0x1120>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d043      	beq.n	8007c20 <UART_SetConfig+0x1118>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d03b      	beq.n	8007c18 <UART_SetConfig+0x1110>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	2b05      	cmp	r3, #5
 8007ba6:	d033      	beq.n	8007c10 <UART_SetConfig+0x1108>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2b06      	cmp	r3, #6
 8007bae:	d02b      	beq.n	8007c08 <UART_SetConfig+0x1100>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2b07      	cmp	r3, #7
 8007bb6:	d023      	beq.n	8007c00 <UART_SetConfig+0x10f8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d01b      	beq.n	8007bf8 <UART_SetConfig+0x10f0>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	d013      	beq.n	8007bf0 <UART_SetConfig+0x10e8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	2b0a      	cmp	r3, #10
 8007bce:	d00b      	beq.n	8007be8 <UART_SetConfig+0x10e0>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	2b0b      	cmp	r3, #11
 8007bd6:	d103      	bne.n	8007be0 <UART_SetConfig+0x10d8>
 8007bd8:	4b2a      	ldr	r3, [pc, #168]	; (8007c84 <UART_SetConfig+0x117c>)
 8007bda:	f04f 0400 	mov.w	r4, #0
 8007bde:	e02e      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007be0:	4b29      	ldr	r3, [pc, #164]	; (8007c88 <UART_SetConfig+0x1180>)
 8007be2:	f04f 0403 	mov.w	r4, #3
 8007be6:	e02a      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007be8:	4b28      	ldr	r3, [pc, #160]	; (8007c8c <UART_SetConfig+0x1184>)
 8007bea:	f04f 0400 	mov.w	r4, #0
 8007bee:	e026      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007bf0:	4b27      	ldr	r3, [pc, #156]	; (8007c90 <UART_SetConfig+0x1188>)
 8007bf2:	f04f 0400 	mov.w	r4, #0
 8007bf6:	e022      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007bf8:	4b26      	ldr	r3, [pc, #152]	; (8007c94 <UART_SetConfig+0x118c>)
 8007bfa:	f04f 0400 	mov.w	r4, #0
 8007bfe:	e01e      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c00:	4b25      	ldr	r3, [pc, #148]	; (8007c98 <UART_SetConfig+0x1190>)
 8007c02:	f04f 0400 	mov.w	r4, #0
 8007c06:	e01a      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c08:	a419      	add	r4, pc, #100	; (adr r4, 8007c70 <UART_SetConfig+0x1168>)
 8007c0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c0e:	e016      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c10:	4b22      	ldr	r3, [pc, #136]	; (8007c9c <UART_SetConfig+0x1194>)
 8007c12:	f04f 0400 	mov.w	r4, #0
 8007c16:	e012      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c18:	4b21      	ldr	r3, [pc, #132]	; (8007ca0 <UART_SetConfig+0x1198>)
 8007c1a:	f04f 0400 	mov.w	r4, #0
 8007c1e:	e00e      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c20:	a415      	add	r4, pc, #84	; (adr r4, 8007c78 <UART_SetConfig+0x1170>)
 8007c22:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007c26:	e00a      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <UART_SetConfig+0x119c>)
 8007c2a:	f04f 0400 	mov.w	r4, #0
 8007c2e:	e006      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c30:	4b1d      	ldr	r3, [pc, #116]	; (8007ca8 <UART_SetConfig+0x11a0>)
 8007c32:	f04f 0401 	mov.w	r4, #1
 8007c36:	e002      	b.n	8007c3e <UART_SetConfig+0x1136>
 8007c38:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <UART_SetConfig+0x1180>)
 8007c3a:	f04f 0403 	mov.w	r4, #3
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	6852      	ldr	r2, [r2, #4]
 8007c42:	0852      	lsrs	r2, r2, #1
 8007c44:	4611      	mov	r1, r2
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	eb13 0b01 	adds.w	fp, r3, r1
 8007c4e:	eb44 0c02 	adc.w	ip, r4, r2
 8007c52:	4658      	mov	r0, fp
 8007c54:	4661      	mov	r1, ip
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f04f 0400 	mov.w	r4, #0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4623      	mov	r3, r4
 8007c62:	f7f8 fb39 	bl	80002d8 <__aeabi_uldivmod>
 8007c66:	4603      	mov	r3, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c6c:	e122      	b.n	8007eb4 <UART_SetConfig+0x13ac>
 8007c6e:	bf00      	nop
 8007c70:	51615500 	.word	0x51615500
 8007c74:	00000000 	.word	0x00000000
 8007c78:	a2c2aa00 	.word	0xa2c2aa00
 8007c7c:	00000000 	.word	0x00000000
 8007c80:	58024400 	.word	0x58024400
 8007c84:	03d09000 	.word	0x03d09000
 8007c88:	d0900000 	.word	0xd0900000
 8007c8c:	07a12000 	.word	0x07a12000
 8007c90:	0f424000 	.word	0x0f424000
 8007c94:	1e848000 	.word	0x1e848000
 8007c98:	3d090000 	.word	0x3d090000
 8007c9c:	61a80000 	.word	0x61a80000
 8007ca0:	7a120000 	.word	0x7a120000
 8007ca4:	f4240000 	.word	0xf4240000
 8007ca8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d05b      	beq.n	8007d6c <UART_SetConfig+0x1264>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d053      	beq.n	8007d64 <UART_SetConfig+0x125c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d04b      	beq.n	8007d5c <UART_SetConfig+0x1254>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d043      	beq.n	8007d54 <UART_SetConfig+0x124c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d03b      	beq.n	8007d4c <UART_SetConfig+0x1244>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	d033      	beq.n	8007d44 <UART_SetConfig+0x123c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b06      	cmp	r3, #6
 8007ce2:	d02b      	beq.n	8007d3c <UART_SetConfig+0x1234>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	2b07      	cmp	r3, #7
 8007cea:	d023      	beq.n	8007d34 <UART_SetConfig+0x122c>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d01b      	beq.n	8007d2c <UART_SetConfig+0x1224>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b09      	cmp	r3, #9
 8007cfa:	d013      	beq.n	8007d24 <UART_SetConfig+0x121c>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	2b0a      	cmp	r3, #10
 8007d02:	d00b      	beq.n	8007d1c <UART_SetConfig+0x1214>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2b0b      	cmp	r3, #11
 8007d0a:	d103      	bne.n	8007d14 <UART_SetConfig+0x120c>
 8007d0c:	4bc0      	ldr	r3, [pc, #768]	; (8008010 <UART_SetConfig+0x1508>)
 8007d0e:	f04f 0400 	mov.w	r4, #0
 8007d12:	e02e      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d14:	4bbf      	ldr	r3, [pc, #764]	; (8008014 <UART_SetConfig+0x150c>)
 8007d16:	f04f 0400 	mov.w	r4, #0
 8007d1a:	e02a      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d1c:	4bbe      	ldr	r3, [pc, #760]	; (8008018 <UART_SetConfig+0x1510>)
 8007d1e:	f04f 0400 	mov.w	r4, #0
 8007d22:	e026      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d24:	4bbd      	ldr	r3, [pc, #756]	; (800801c <UART_SetConfig+0x1514>)
 8007d26:	f04f 0400 	mov.w	r4, #0
 8007d2a:	e022      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d2c:	4bbc      	ldr	r3, [pc, #752]	; (8008020 <UART_SetConfig+0x1518>)
 8007d2e:	f04f 0400 	mov.w	r4, #0
 8007d32:	e01e      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d34:	4bbb      	ldr	r3, [pc, #748]	; (8008024 <UART_SetConfig+0x151c>)
 8007d36:	f04f 0400 	mov.w	r4, #0
 8007d3a:	e01a      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d3c:	a4b0      	add	r4, pc, #704	; (adr r4, 8008000 <UART_SetConfig+0x14f8>)
 8007d3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d42:	e016      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d44:	4bb8      	ldr	r3, [pc, #736]	; (8008028 <UART_SetConfig+0x1520>)
 8007d46:	f04f 0400 	mov.w	r4, #0
 8007d4a:	e012      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d4c:	4bb7      	ldr	r3, [pc, #732]	; (800802c <UART_SetConfig+0x1524>)
 8007d4e:	f04f 0400 	mov.w	r4, #0
 8007d52:	e00e      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d54:	a4ac      	add	r4, pc, #688	; (adr r4, 8008008 <UART_SetConfig+0x1500>)
 8007d56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d5a:	e00a      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d5c:	4bb4      	ldr	r3, [pc, #720]	; (8008030 <UART_SetConfig+0x1528>)
 8007d5e:	f04f 0400 	mov.w	r4, #0
 8007d62:	e006      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d64:	4bb3      	ldr	r3, [pc, #716]	; (8008034 <UART_SetConfig+0x152c>)
 8007d66:	f04f 0400 	mov.w	r4, #0
 8007d6a:	e002      	b.n	8007d72 <UART_SetConfig+0x126a>
 8007d6c:	4ba9      	ldr	r3, [pc, #676]	; (8008014 <UART_SetConfig+0x150c>)
 8007d6e:	f04f 0400 	mov.w	r4, #0
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6852      	ldr	r2, [r2, #4]
 8007d76:	0852      	lsrs	r2, r2, #1
 8007d78:	4611      	mov	r1, r2
 8007d7a:	f04f 0200 	mov.w	r2, #0
 8007d7e:	eb13 0b01 	adds.w	fp, r3, r1
 8007d82:	eb44 0c02 	adc.w	ip, r4, r2
 8007d86:	4658      	mov	r0, fp
 8007d88:	4661      	mov	r1, ip
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f04f 0400 	mov.w	r4, #0
 8007d92:	461a      	mov	r2, r3
 8007d94:	4623      	mov	r3, r4
 8007d96:	f7f8 fa9f 	bl	80002d8 <__aeabi_uldivmod>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007da0:	e088      	b.n	8007eb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d064      	beq.n	8007e74 <UART_SetConfig+0x136c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d05b      	beq.n	8007e6a <UART_SetConfig+0x1362>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d052      	beq.n	8007e60 <UART_SetConfig+0x1358>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d04a      	beq.n	8007e58 <UART_SetConfig+0x1350>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d041      	beq.n	8007e4e <UART_SetConfig+0x1346>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d039      	beq.n	8007e46 <UART_SetConfig+0x133e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	2b06      	cmp	r3, #6
 8007dd8:	d031      	beq.n	8007e3e <UART_SetConfig+0x1336>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b07      	cmp	r3, #7
 8007de0:	d028      	beq.n	8007e34 <UART_SetConfig+0x132c>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d01f      	beq.n	8007e2a <UART_SetConfig+0x1322>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d016      	beq.n	8007e20 <UART_SetConfig+0x1318>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b0a      	cmp	r3, #10
 8007df8:	d00d      	beq.n	8007e16 <UART_SetConfig+0x130e>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b0b      	cmp	r3, #11
 8007e00:	d104      	bne.n	8007e0c <UART_SetConfig+0x1304>
 8007e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e06:	f04f 0400 	mov.w	r4, #0
 8007e0a:	e037      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	e032      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e1a:	f04f 0400 	mov.w	r4, #0
 8007e1e:	e02d      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e24:	f04f 0400 	mov.w	r4, #0
 8007e28:	e028      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e2e:	f04f 0400 	mov.w	r4, #0
 8007e32:	e023      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e38:	f04f 0400 	mov.w	r4, #0
 8007e3c:	e01e      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e3e:	4b7e      	ldr	r3, [pc, #504]	; (8008038 <UART_SetConfig+0x1530>)
 8007e40:	f04f 0400 	mov.w	r4, #0
 8007e44:	e01a      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e46:	4b7d      	ldr	r3, [pc, #500]	; (800803c <UART_SetConfig+0x1534>)
 8007e48:	f04f 0400 	mov.w	r4, #0
 8007e4c:	e016      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e52:	f04f 0400 	mov.w	r4, #0
 8007e56:	e011      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e58:	4b79      	ldr	r3, [pc, #484]	; (8008040 <UART_SetConfig+0x1538>)
 8007e5a:	f04f 0400 	mov.w	r4, #0
 8007e5e:	e00d      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e64:	f04f 0400 	mov.w	r4, #0
 8007e68:	e008      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e6e:	f04f 0400 	mov.w	r4, #0
 8007e72:	e003      	b.n	8007e7c <UART_SetConfig+0x1374>
 8007e74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e78:	f04f 0400 	mov.w	r4, #0
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	6852      	ldr	r2, [r2, #4]
 8007e80:	0852      	lsrs	r2, r2, #1
 8007e82:	4611      	mov	r1, r2
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	eb13 0b01 	adds.w	fp, r3, r1
 8007e8c:	eb44 0c02 	adc.w	ip, r4, r2
 8007e90:	4658      	mov	r0, fp
 8007e92:	4661      	mov	r1, ip
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f04f 0400 	mov.w	r4, #0
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4623      	mov	r3, r4
 8007ea0:	f7f8 fa1a 	bl	80002d8 <__aeabi_uldivmod>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	460c      	mov	r4, r1
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eaa:	e003      	b.n	8007eb4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007eb2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eba:	d309      	bcc.n	8007ed0 <UART_SetConfig+0x13c8>
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ec2:	d205      	bcs.n	8007ed0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007eca:	60da      	str	r2, [r3, #12]
 8007ecc:	f000 bf85 	b.w	8008dda <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ed6:	f000 bf80 	b.w	8008dda <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ee2:	f040 83da 	bne.w	800869a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007ee6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007eea:	2b40      	cmp	r3, #64	; 0x40
 8007eec:	f200 83b3 	bhi.w	8008656 <UART_SetConfig+0x1b4e>
 8007ef0:	a201      	add	r2, pc, #4	; (adr r2, 8007ef8 <UART_SetConfig+0x13f0>)
 8007ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef6:	bf00      	nop
 8007ef8:	08008045 	.word	0x08008045
 8007efc:	080080fd 	.word	0x080080fd
 8007f00:	08008657 	.word	0x08008657
 8007f04:	08008657 	.word	0x08008657
 8007f08:	080081b5 	.word	0x080081b5
 8007f0c:	08008657 	.word	0x08008657
 8007f10:	08008657 	.word	0x08008657
 8007f14:	08008657 	.word	0x08008657
 8007f18:	08008271 	.word	0x08008271
 8007f1c:	08008657 	.word	0x08008657
 8007f20:	08008657 	.word	0x08008657
 8007f24:	08008657 	.word	0x08008657
 8007f28:	08008657 	.word	0x08008657
 8007f2c:	08008657 	.word	0x08008657
 8007f30:	08008657 	.word	0x08008657
 8007f34:	08008657 	.word	0x08008657
 8007f38:	0800832d 	.word	0x0800832d
 8007f3c:	08008657 	.word	0x08008657
 8007f40:	08008657 	.word	0x08008657
 8007f44:	08008657 	.word	0x08008657
 8007f48:	08008657 	.word	0x08008657
 8007f4c:	08008657 	.word	0x08008657
 8007f50:	08008657 	.word	0x08008657
 8007f54:	08008657 	.word	0x08008657
 8007f58:	08008657 	.word	0x08008657
 8007f5c:	08008657 	.word	0x08008657
 8007f60:	08008657 	.word	0x08008657
 8007f64:	08008657 	.word	0x08008657
 8007f68:	08008657 	.word	0x08008657
 8007f6c:	08008657 	.word	0x08008657
 8007f70:	08008657 	.word	0x08008657
 8007f74:	08008657 	.word	0x08008657
 8007f78:	0800849f 	.word	0x0800849f
 8007f7c:	08008657 	.word	0x08008657
 8007f80:	08008657 	.word	0x08008657
 8007f84:	08008657 	.word	0x08008657
 8007f88:	08008657 	.word	0x08008657
 8007f8c:	08008657 	.word	0x08008657
 8007f90:	08008657 	.word	0x08008657
 8007f94:	08008657 	.word	0x08008657
 8007f98:	08008657 	.word	0x08008657
 8007f9c:	08008657 	.word	0x08008657
 8007fa0:	08008657 	.word	0x08008657
 8007fa4:	08008657 	.word	0x08008657
 8007fa8:	08008657 	.word	0x08008657
 8007fac:	08008657 	.word	0x08008657
 8007fb0:	08008657 	.word	0x08008657
 8007fb4:	08008657 	.word	0x08008657
 8007fb8:	08008657 	.word	0x08008657
 8007fbc:	08008657 	.word	0x08008657
 8007fc0:	08008657 	.word	0x08008657
 8007fc4:	08008657 	.word	0x08008657
 8007fc8:	08008657 	.word	0x08008657
 8007fcc:	08008657 	.word	0x08008657
 8007fd0:	08008657 	.word	0x08008657
 8007fd4:	08008657 	.word	0x08008657
 8007fd8:	08008657 	.word	0x08008657
 8007fdc:	08008657 	.word	0x08008657
 8007fe0:	08008657 	.word	0x08008657
 8007fe4:	08008657 	.word	0x08008657
 8007fe8:	08008657 	.word	0x08008657
 8007fec:	08008657 	.word	0x08008657
 8007ff0:	08008657 	.word	0x08008657
 8007ff4:	08008657 	.word	0x08008657
 8007ff8:	08008595 	.word	0x08008595
 8007ffc:	f3af 8000 	nop.w
 8008000:	05161500 	.word	0x05161500
 8008004:	00000000 	.word	0x00000000
 8008008:	0a2c2a00 	.word	0x0a2c2a00
 800800c:	00000000 	.word	0x00000000
 8008010:	003d0900 	.word	0x003d0900
 8008014:	3d090000 	.word	0x3d090000
 8008018:	007a1200 	.word	0x007a1200
 800801c:	00f42400 	.word	0x00f42400
 8008020:	01e84800 	.word	0x01e84800
 8008024:	03d09000 	.word	0x03d09000
 8008028:	061a8000 	.word	0x061a8000
 800802c:	07a12000 	.word	0x07a12000
 8008030:	0f424000 	.word	0x0f424000
 8008034:	1e848000 	.word	0x1e848000
 8008038:	000aaa00 	.word	0x000aaa00
 800803c:	000ccc00 	.word	0x000ccc00
 8008040:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008044:	f7fb ff32 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8008048:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b00      	cmp	r3, #0
 8008050:	d044      	beq.n	80080dc <UART_SetConfig+0x15d4>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b01      	cmp	r3, #1
 8008058:	d03e      	beq.n	80080d8 <UART_SetConfig+0x15d0>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b02      	cmp	r3, #2
 8008060:	d038      	beq.n	80080d4 <UART_SetConfig+0x15cc>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b03      	cmp	r3, #3
 8008068:	d032      	beq.n	80080d0 <UART_SetConfig+0x15c8>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b04      	cmp	r3, #4
 8008070:	d02c      	beq.n	80080cc <UART_SetConfig+0x15c4>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b05      	cmp	r3, #5
 8008078:	d026      	beq.n	80080c8 <UART_SetConfig+0x15c0>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b06      	cmp	r3, #6
 8008080:	d020      	beq.n	80080c4 <UART_SetConfig+0x15bc>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008086:	2b07      	cmp	r3, #7
 8008088:	d01a      	beq.n	80080c0 <UART_SetConfig+0x15b8>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b08      	cmp	r3, #8
 8008090:	d014      	beq.n	80080bc <UART_SetConfig+0x15b4>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008096:	2b09      	cmp	r3, #9
 8008098:	d00e      	beq.n	80080b8 <UART_SetConfig+0x15b0>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	2b0a      	cmp	r3, #10
 80080a0:	d008      	beq.n	80080b4 <UART_SetConfig+0x15ac>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	2b0b      	cmp	r3, #11
 80080a8:	d102      	bne.n	80080b0 <UART_SetConfig+0x15a8>
 80080aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080ae:	e016      	b.n	80080de <UART_SetConfig+0x15d6>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e014      	b.n	80080de <UART_SetConfig+0x15d6>
 80080b4:	2380      	movs	r3, #128	; 0x80
 80080b6:	e012      	b.n	80080de <UART_SetConfig+0x15d6>
 80080b8:	2340      	movs	r3, #64	; 0x40
 80080ba:	e010      	b.n	80080de <UART_SetConfig+0x15d6>
 80080bc:	2320      	movs	r3, #32
 80080be:	e00e      	b.n	80080de <UART_SetConfig+0x15d6>
 80080c0:	2310      	movs	r3, #16
 80080c2:	e00c      	b.n	80080de <UART_SetConfig+0x15d6>
 80080c4:	230c      	movs	r3, #12
 80080c6:	e00a      	b.n	80080de <UART_SetConfig+0x15d6>
 80080c8:	230a      	movs	r3, #10
 80080ca:	e008      	b.n	80080de <UART_SetConfig+0x15d6>
 80080cc:	2308      	movs	r3, #8
 80080ce:	e006      	b.n	80080de <UART_SetConfig+0x15d6>
 80080d0:	2306      	movs	r3, #6
 80080d2:	e004      	b.n	80080de <UART_SetConfig+0x15d6>
 80080d4:	2304      	movs	r3, #4
 80080d6:	e002      	b.n	80080de <UART_SetConfig+0x15d6>
 80080d8:	2302      	movs	r3, #2
 80080da:	e000      	b.n	80080de <UART_SetConfig+0x15d6>
 80080dc:	2301      	movs	r3, #1
 80080de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	005a      	lsls	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	441a      	add	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080fa:	e2b0      	b.n	800865e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080fc:	f7fb feec 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 8008100:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b00      	cmp	r3, #0
 8008108:	d044      	beq.n	8008194 <UART_SetConfig+0x168c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b01      	cmp	r3, #1
 8008110:	d03e      	beq.n	8008190 <UART_SetConfig+0x1688>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b02      	cmp	r3, #2
 8008118:	d038      	beq.n	800818c <UART_SetConfig+0x1684>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b03      	cmp	r3, #3
 8008120:	d032      	beq.n	8008188 <UART_SetConfig+0x1680>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2b04      	cmp	r3, #4
 8008128:	d02c      	beq.n	8008184 <UART_SetConfig+0x167c>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	2b05      	cmp	r3, #5
 8008130:	d026      	beq.n	8008180 <UART_SetConfig+0x1678>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	2b06      	cmp	r3, #6
 8008138:	d020      	beq.n	800817c <UART_SetConfig+0x1674>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	2b07      	cmp	r3, #7
 8008140:	d01a      	beq.n	8008178 <UART_SetConfig+0x1670>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	2b08      	cmp	r3, #8
 8008148:	d014      	beq.n	8008174 <UART_SetConfig+0x166c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	2b09      	cmp	r3, #9
 8008150:	d00e      	beq.n	8008170 <UART_SetConfig+0x1668>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	2b0a      	cmp	r3, #10
 8008158:	d008      	beq.n	800816c <UART_SetConfig+0x1664>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815e:	2b0b      	cmp	r3, #11
 8008160:	d102      	bne.n	8008168 <UART_SetConfig+0x1660>
 8008162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008166:	e016      	b.n	8008196 <UART_SetConfig+0x168e>
 8008168:	2301      	movs	r3, #1
 800816a:	e014      	b.n	8008196 <UART_SetConfig+0x168e>
 800816c:	2380      	movs	r3, #128	; 0x80
 800816e:	e012      	b.n	8008196 <UART_SetConfig+0x168e>
 8008170:	2340      	movs	r3, #64	; 0x40
 8008172:	e010      	b.n	8008196 <UART_SetConfig+0x168e>
 8008174:	2320      	movs	r3, #32
 8008176:	e00e      	b.n	8008196 <UART_SetConfig+0x168e>
 8008178:	2310      	movs	r3, #16
 800817a:	e00c      	b.n	8008196 <UART_SetConfig+0x168e>
 800817c:	230c      	movs	r3, #12
 800817e:	e00a      	b.n	8008196 <UART_SetConfig+0x168e>
 8008180:	230a      	movs	r3, #10
 8008182:	e008      	b.n	8008196 <UART_SetConfig+0x168e>
 8008184:	2308      	movs	r3, #8
 8008186:	e006      	b.n	8008196 <UART_SetConfig+0x168e>
 8008188:	2306      	movs	r3, #6
 800818a:	e004      	b.n	8008196 <UART_SetConfig+0x168e>
 800818c:	2304      	movs	r3, #4
 800818e:	e002      	b.n	8008196 <UART_SetConfig+0x168e>
 8008190:	2302      	movs	r3, #2
 8008192:	e000      	b.n	8008196 <UART_SetConfig+0x168e>
 8008194:	2301      	movs	r3, #1
 8008196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008198:	fbb2 f3f3 	udiv	r3, r2, r3
 800819c:	005a      	lsls	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	085b      	lsrs	r3, r3, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081b2:	e254      	b.n	800865e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081b4:	f107 0318 	add.w	r3, r7, #24
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fc fda9 	bl	8004d10 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081be:	69fa      	ldr	r2, [r7, #28]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d044      	beq.n	8008252 <UART_SetConfig+0x174a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d03e      	beq.n	800824e <UART_SetConfig+0x1746>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	2b02      	cmp	r3, #2
 80081d6:	d038      	beq.n	800824a <UART_SetConfig+0x1742>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b03      	cmp	r3, #3
 80081de:	d032      	beq.n	8008246 <UART_SetConfig+0x173e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d02c      	beq.n	8008242 <UART_SetConfig+0x173a>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b05      	cmp	r3, #5
 80081ee:	d026      	beq.n	800823e <UART_SetConfig+0x1736>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	2b06      	cmp	r3, #6
 80081f6:	d020      	beq.n	800823a <UART_SetConfig+0x1732>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	2b07      	cmp	r3, #7
 80081fe:	d01a      	beq.n	8008236 <UART_SetConfig+0x172e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	2b08      	cmp	r3, #8
 8008206:	d014      	beq.n	8008232 <UART_SetConfig+0x172a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	2b09      	cmp	r3, #9
 800820e:	d00e      	beq.n	800822e <UART_SetConfig+0x1726>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	2b0a      	cmp	r3, #10
 8008216:	d008      	beq.n	800822a <UART_SetConfig+0x1722>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	2b0b      	cmp	r3, #11
 800821e:	d102      	bne.n	8008226 <UART_SetConfig+0x171e>
 8008220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008224:	e016      	b.n	8008254 <UART_SetConfig+0x174c>
 8008226:	2301      	movs	r3, #1
 8008228:	e014      	b.n	8008254 <UART_SetConfig+0x174c>
 800822a:	2380      	movs	r3, #128	; 0x80
 800822c:	e012      	b.n	8008254 <UART_SetConfig+0x174c>
 800822e:	2340      	movs	r3, #64	; 0x40
 8008230:	e010      	b.n	8008254 <UART_SetConfig+0x174c>
 8008232:	2320      	movs	r3, #32
 8008234:	e00e      	b.n	8008254 <UART_SetConfig+0x174c>
 8008236:	2310      	movs	r3, #16
 8008238:	e00c      	b.n	8008254 <UART_SetConfig+0x174c>
 800823a:	230c      	movs	r3, #12
 800823c:	e00a      	b.n	8008254 <UART_SetConfig+0x174c>
 800823e:	230a      	movs	r3, #10
 8008240:	e008      	b.n	8008254 <UART_SetConfig+0x174c>
 8008242:	2308      	movs	r3, #8
 8008244:	e006      	b.n	8008254 <UART_SetConfig+0x174c>
 8008246:	2306      	movs	r3, #6
 8008248:	e004      	b.n	8008254 <UART_SetConfig+0x174c>
 800824a:	2304      	movs	r3, #4
 800824c:	e002      	b.n	8008254 <UART_SetConfig+0x174c>
 800824e:	2302      	movs	r3, #2
 8008250:	e000      	b.n	8008254 <UART_SetConfig+0x174c>
 8008252:	2301      	movs	r3, #1
 8008254:	fbb2 f3f3 	udiv	r3, r2, r3
 8008258:	005a      	lsls	r2, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	085b      	lsrs	r3, r3, #1
 8008260:	441a      	add	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	fbb2 f3f3 	udiv	r3, r2, r3
 800826a:	b29b      	uxth	r3, r3
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800826e:	e1f6      	b.n	800865e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008270:	f107 030c 	add.w	r3, r7, #12
 8008274:	4618      	mov	r0, r3
 8008276:	f7fc fe97 	bl	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d044      	beq.n	800830e <UART_SetConfig+0x1806>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b01      	cmp	r3, #1
 800828a:	d03e      	beq.n	800830a <UART_SetConfig+0x1802>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b02      	cmp	r3, #2
 8008292:	d038      	beq.n	8008306 <UART_SetConfig+0x17fe>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b03      	cmp	r3, #3
 800829a:	d032      	beq.n	8008302 <UART_SetConfig+0x17fa>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d02c      	beq.n	80082fe <UART_SetConfig+0x17f6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b05      	cmp	r3, #5
 80082aa:	d026      	beq.n	80082fa <UART_SetConfig+0x17f2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b06      	cmp	r3, #6
 80082b2:	d020      	beq.n	80082f6 <UART_SetConfig+0x17ee>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b07      	cmp	r3, #7
 80082ba:	d01a      	beq.n	80082f2 <UART_SetConfig+0x17ea>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d014      	beq.n	80082ee <UART_SetConfig+0x17e6>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d00e      	beq.n	80082ea <UART_SetConfig+0x17e2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b0a      	cmp	r3, #10
 80082d2:	d008      	beq.n	80082e6 <UART_SetConfig+0x17de>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b0b      	cmp	r3, #11
 80082da:	d102      	bne.n	80082e2 <UART_SetConfig+0x17da>
 80082dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082e0:	e016      	b.n	8008310 <UART_SetConfig+0x1808>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e014      	b.n	8008310 <UART_SetConfig+0x1808>
 80082e6:	2380      	movs	r3, #128	; 0x80
 80082e8:	e012      	b.n	8008310 <UART_SetConfig+0x1808>
 80082ea:	2340      	movs	r3, #64	; 0x40
 80082ec:	e010      	b.n	8008310 <UART_SetConfig+0x1808>
 80082ee:	2320      	movs	r3, #32
 80082f0:	e00e      	b.n	8008310 <UART_SetConfig+0x1808>
 80082f2:	2310      	movs	r3, #16
 80082f4:	e00c      	b.n	8008310 <UART_SetConfig+0x1808>
 80082f6:	230c      	movs	r3, #12
 80082f8:	e00a      	b.n	8008310 <UART_SetConfig+0x1808>
 80082fa:	230a      	movs	r3, #10
 80082fc:	e008      	b.n	8008310 <UART_SetConfig+0x1808>
 80082fe:	2308      	movs	r3, #8
 8008300:	e006      	b.n	8008310 <UART_SetConfig+0x1808>
 8008302:	2306      	movs	r3, #6
 8008304:	e004      	b.n	8008310 <UART_SetConfig+0x1808>
 8008306:	2304      	movs	r3, #4
 8008308:	e002      	b.n	8008310 <UART_SetConfig+0x1808>
 800830a:	2302      	movs	r3, #2
 800830c:	e000      	b.n	8008310 <UART_SetConfig+0x1808>
 800830e:	2301      	movs	r3, #1
 8008310:	fbb2 f3f3 	udiv	r3, r2, r3
 8008314:	005a      	lsls	r2, r3, #1
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	085b      	lsrs	r3, r3, #1
 800831c:	441a      	add	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	fbb2 f3f3 	udiv	r3, r2, r3
 8008326:	b29b      	uxth	r3, r3
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800832a:	e198      	b.n	800865e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800832c:	4b87      	ldr	r3, [pc, #540]	; (800854c <UART_SetConfig+0x1a44>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0320 	and.w	r3, r3, #32
 8008334:	2b00      	cmp	r3, #0
 8008336:	d05e      	beq.n	80083f6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008338:	4b84      	ldr	r3, [pc, #528]	; (800854c <UART_SetConfig+0x1a44>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	08db      	lsrs	r3, r3, #3
 800833e:	f003 0303 	and.w	r3, r3, #3
 8008342:	4a83      	ldr	r2, [pc, #524]	; (8008550 <UART_SetConfig+0x1a48>)
 8008344:	40da      	lsrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b00      	cmp	r3, #0
 800834c:	d044      	beq.n	80083d8 <UART_SetConfig+0x18d0>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b01      	cmp	r3, #1
 8008354:	d03e      	beq.n	80083d4 <UART_SetConfig+0x18cc>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b02      	cmp	r3, #2
 800835c:	d038      	beq.n	80083d0 <UART_SetConfig+0x18c8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b03      	cmp	r3, #3
 8008364:	d032      	beq.n	80083cc <UART_SetConfig+0x18c4>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b04      	cmp	r3, #4
 800836c:	d02c      	beq.n	80083c8 <UART_SetConfig+0x18c0>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	2b05      	cmp	r3, #5
 8008374:	d026      	beq.n	80083c4 <UART_SetConfig+0x18bc>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	2b06      	cmp	r3, #6
 800837c:	d020      	beq.n	80083c0 <UART_SetConfig+0x18b8>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008382:	2b07      	cmp	r3, #7
 8008384:	d01a      	beq.n	80083bc <UART_SetConfig+0x18b4>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800838a:	2b08      	cmp	r3, #8
 800838c:	d014      	beq.n	80083b8 <UART_SetConfig+0x18b0>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008392:	2b09      	cmp	r3, #9
 8008394:	d00e      	beq.n	80083b4 <UART_SetConfig+0x18ac>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839a:	2b0a      	cmp	r3, #10
 800839c:	d008      	beq.n	80083b0 <UART_SetConfig+0x18a8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a2:	2b0b      	cmp	r3, #11
 80083a4:	d102      	bne.n	80083ac <UART_SetConfig+0x18a4>
 80083a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083aa:	e016      	b.n	80083da <UART_SetConfig+0x18d2>
 80083ac:	2301      	movs	r3, #1
 80083ae:	e014      	b.n	80083da <UART_SetConfig+0x18d2>
 80083b0:	2380      	movs	r3, #128	; 0x80
 80083b2:	e012      	b.n	80083da <UART_SetConfig+0x18d2>
 80083b4:	2340      	movs	r3, #64	; 0x40
 80083b6:	e010      	b.n	80083da <UART_SetConfig+0x18d2>
 80083b8:	2320      	movs	r3, #32
 80083ba:	e00e      	b.n	80083da <UART_SetConfig+0x18d2>
 80083bc:	2310      	movs	r3, #16
 80083be:	e00c      	b.n	80083da <UART_SetConfig+0x18d2>
 80083c0:	230c      	movs	r3, #12
 80083c2:	e00a      	b.n	80083da <UART_SetConfig+0x18d2>
 80083c4:	230a      	movs	r3, #10
 80083c6:	e008      	b.n	80083da <UART_SetConfig+0x18d2>
 80083c8:	2308      	movs	r3, #8
 80083ca:	e006      	b.n	80083da <UART_SetConfig+0x18d2>
 80083cc:	2306      	movs	r3, #6
 80083ce:	e004      	b.n	80083da <UART_SetConfig+0x18d2>
 80083d0:	2304      	movs	r3, #4
 80083d2:	e002      	b.n	80083da <UART_SetConfig+0x18d2>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e000      	b.n	80083da <UART_SetConfig+0x18d2>
 80083d8:	2301      	movs	r3, #1
 80083da:	fbb2 f3f3 	udiv	r3, r2, r3
 80083de:	005a      	lsls	r2, r3, #1
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	085b      	lsrs	r3, r3, #1
 80083e6:	441a      	add	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80083f4:	e133      	b.n	800865e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d043      	beq.n	8008486 <UART_SetConfig+0x197e>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b01      	cmp	r3, #1
 8008404:	d03d      	beq.n	8008482 <UART_SetConfig+0x197a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b02      	cmp	r3, #2
 800840c:	d037      	beq.n	800847e <UART_SetConfig+0x1976>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b03      	cmp	r3, #3
 8008414:	d031      	beq.n	800847a <UART_SetConfig+0x1972>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2b04      	cmp	r3, #4
 800841c:	d02b      	beq.n	8008476 <UART_SetConfig+0x196e>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b05      	cmp	r3, #5
 8008424:	d025      	beq.n	8008472 <UART_SetConfig+0x196a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b06      	cmp	r3, #6
 800842c:	d01f      	beq.n	800846e <UART_SetConfig+0x1966>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	2b07      	cmp	r3, #7
 8008434:	d019      	beq.n	800846a <UART_SetConfig+0x1962>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843a:	2b08      	cmp	r3, #8
 800843c:	d013      	beq.n	8008466 <UART_SetConfig+0x195e>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	2b09      	cmp	r3, #9
 8008444:	d00d      	beq.n	8008462 <UART_SetConfig+0x195a>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	2b0a      	cmp	r3, #10
 800844c:	d007      	beq.n	800845e <UART_SetConfig+0x1956>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	2b0b      	cmp	r3, #11
 8008454:	d101      	bne.n	800845a <UART_SetConfig+0x1952>
 8008456:	4b3f      	ldr	r3, [pc, #252]	; (8008554 <UART_SetConfig+0x1a4c>)
 8008458:	e016      	b.n	8008488 <UART_SetConfig+0x1980>
 800845a:	4b3f      	ldr	r3, [pc, #252]	; (8008558 <UART_SetConfig+0x1a50>)
 800845c:	e014      	b.n	8008488 <UART_SetConfig+0x1980>
 800845e:	4b3f      	ldr	r3, [pc, #252]	; (800855c <UART_SetConfig+0x1a54>)
 8008460:	e012      	b.n	8008488 <UART_SetConfig+0x1980>
 8008462:	4b3f      	ldr	r3, [pc, #252]	; (8008560 <UART_SetConfig+0x1a58>)
 8008464:	e010      	b.n	8008488 <UART_SetConfig+0x1980>
 8008466:	4b3f      	ldr	r3, [pc, #252]	; (8008564 <UART_SetConfig+0x1a5c>)
 8008468:	e00e      	b.n	8008488 <UART_SetConfig+0x1980>
 800846a:	4b3f      	ldr	r3, [pc, #252]	; (8008568 <UART_SetConfig+0x1a60>)
 800846c:	e00c      	b.n	8008488 <UART_SetConfig+0x1980>
 800846e:	4b3f      	ldr	r3, [pc, #252]	; (800856c <UART_SetConfig+0x1a64>)
 8008470:	e00a      	b.n	8008488 <UART_SetConfig+0x1980>
 8008472:	4b3f      	ldr	r3, [pc, #252]	; (8008570 <UART_SetConfig+0x1a68>)
 8008474:	e008      	b.n	8008488 <UART_SetConfig+0x1980>
 8008476:	4b3f      	ldr	r3, [pc, #252]	; (8008574 <UART_SetConfig+0x1a6c>)
 8008478:	e006      	b.n	8008488 <UART_SetConfig+0x1980>
 800847a:	4b3f      	ldr	r3, [pc, #252]	; (8008578 <UART_SetConfig+0x1a70>)
 800847c:	e004      	b.n	8008488 <UART_SetConfig+0x1980>
 800847e:	4b3f      	ldr	r3, [pc, #252]	; (800857c <UART_SetConfig+0x1a74>)
 8008480:	e002      	b.n	8008488 <UART_SetConfig+0x1980>
 8008482:	4b33      	ldr	r3, [pc, #204]	; (8008550 <UART_SetConfig+0x1a48>)
 8008484:	e000      	b.n	8008488 <UART_SetConfig+0x1980>
 8008486:	4b34      	ldr	r3, [pc, #208]	; (8008558 <UART_SetConfig+0x1a50>)
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	6852      	ldr	r2, [r2, #4]
 800848c:	0852      	lsrs	r2, r2, #1
 800848e:	441a      	add	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	fbb2 f3f3 	udiv	r3, r2, r3
 8008498:	b29b      	uxth	r3, r3
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800849c:	e0df      	b.n	800865e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d045      	beq.n	8008532 <UART_SetConfig+0x1a2a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d03f      	beq.n	800852e <UART_SetConfig+0x1a26>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d039      	beq.n	800852a <UART_SetConfig+0x1a22>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d033      	beq.n	8008526 <UART_SetConfig+0x1a1e>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d02d      	beq.n	8008522 <UART_SetConfig+0x1a1a>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	2b05      	cmp	r3, #5
 80084cc:	d027      	beq.n	800851e <UART_SetConfig+0x1a16>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b06      	cmp	r3, #6
 80084d4:	d021      	beq.n	800851a <UART_SetConfig+0x1a12>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b07      	cmp	r3, #7
 80084dc:	d01b      	beq.n	8008516 <UART_SetConfig+0x1a0e>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b08      	cmp	r3, #8
 80084e4:	d015      	beq.n	8008512 <UART_SetConfig+0x1a0a>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	d00f      	beq.n	800850e <UART_SetConfig+0x1a06>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	2b0a      	cmp	r3, #10
 80084f4:	d008      	beq.n	8008508 <UART_SetConfig+0x1a00>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b0b      	cmp	r3, #11
 80084fc:	d102      	bne.n	8008504 <UART_SetConfig+0x19fc>
 80084fe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008502:	e017      	b.n	8008534 <UART_SetConfig+0x1a2c>
 8008504:	4b18      	ldr	r3, [pc, #96]	; (8008568 <UART_SetConfig+0x1a60>)
 8008506:	e015      	b.n	8008534 <UART_SetConfig+0x1a2c>
 8008508:	f24f 4324 	movw	r3, #62500	; 0xf424
 800850c:	e012      	b.n	8008534 <UART_SetConfig+0x1a2c>
 800850e:	4b1c      	ldr	r3, [pc, #112]	; (8008580 <UART_SetConfig+0x1a78>)
 8008510:	e010      	b.n	8008534 <UART_SetConfig+0x1a2c>
 8008512:	4b1c      	ldr	r3, [pc, #112]	; (8008584 <UART_SetConfig+0x1a7c>)
 8008514:	e00e      	b.n	8008534 <UART_SetConfig+0x1a2c>
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <UART_SetConfig+0x1a4c>)
 8008518:	e00c      	b.n	8008534 <UART_SetConfig+0x1a2c>
 800851a:	4b1b      	ldr	r3, [pc, #108]	; (8008588 <UART_SetConfig+0x1a80>)
 800851c:	e00a      	b.n	8008534 <UART_SetConfig+0x1a2c>
 800851e:	4b1b      	ldr	r3, [pc, #108]	; (800858c <UART_SetConfig+0x1a84>)
 8008520:	e008      	b.n	8008534 <UART_SetConfig+0x1a2c>
 8008522:	4b0e      	ldr	r3, [pc, #56]	; (800855c <UART_SetConfig+0x1a54>)
 8008524:	e006      	b.n	8008534 <UART_SetConfig+0x1a2c>
 8008526:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <UART_SetConfig+0x1a88>)
 8008528:	e004      	b.n	8008534 <UART_SetConfig+0x1a2c>
 800852a:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <UART_SetConfig+0x1a58>)
 800852c:	e002      	b.n	8008534 <UART_SetConfig+0x1a2c>
 800852e:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <UART_SetConfig+0x1a5c>)
 8008530:	e000      	b.n	8008534 <UART_SetConfig+0x1a2c>
 8008532:	4b0d      	ldr	r3, [pc, #52]	; (8008568 <UART_SetConfig+0x1a60>)
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	6852      	ldr	r2, [r2, #4]
 8008538:	0852      	lsrs	r2, r2, #1
 800853a:	441a      	add	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	fbb2 f3f3 	udiv	r3, r2, r3
 8008544:	b29b      	uxth	r3, r3
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008548:	e089      	b.n	800865e <UART_SetConfig+0x1b56>
 800854a:	bf00      	nop
 800854c:	58024400 	.word	0x58024400
 8008550:	03d09000 	.word	0x03d09000
 8008554:	0007a120 	.word	0x0007a120
 8008558:	07a12000 	.word	0x07a12000
 800855c:	000f4240 	.word	0x000f4240
 8008560:	001e8480 	.word	0x001e8480
 8008564:	003d0900 	.word	0x003d0900
 8008568:	007a1200 	.word	0x007a1200
 800856c:	00a2c2aa 	.word	0x00a2c2aa
 8008570:	00c35000 	.word	0x00c35000
 8008574:	00f42400 	.word	0x00f42400
 8008578:	01458554 	.word	0x01458554
 800857c:	01e84800 	.word	0x01e84800
 8008580:	0001e848 	.word	0x0001e848
 8008584:	0003d090 	.word	0x0003d090
 8008588:	000a2c2a 	.word	0x000a2c2a
 800858c:	000c3500 	.word	0x000c3500
 8008590:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d04f      	beq.n	800863c <UART_SetConfig+0x1b34>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d048      	beq.n	8008636 <UART_SetConfig+0x1b2e>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b02      	cmp	r3, #2
 80085aa:	d041      	beq.n	8008630 <UART_SetConfig+0x1b28>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d03a      	beq.n	800862a <UART_SetConfig+0x1b22>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d033      	beq.n	8008624 <UART_SetConfig+0x1b1c>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b05      	cmp	r3, #5
 80085c2:	d02c      	beq.n	800861e <UART_SetConfig+0x1b16>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b06      	cmp	r3, #6
 80085ca:	d025      	beq.n	8008618 <UART_SetConfig+0x1b10>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d0:	2b07      	cmp	r3, #7
 80085d2:	d01e      	beq.n	8008612 <UART_SetConfig+0x1b0a>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	2b08      	cmp	r3, #8
 80085da:	d017      	beq.n	800860c <UART_SetConfig+0x1b04>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	2b09      	cmp	r3, #9
 80085e2:	d010      	beq.n	8008606 <UART_SetConfig+0x1afe>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e8:	2b0a      	cmp	r3, #10
 80085ea:	d009      	beq.n	8008600 <UART_SetConfig+0x1af8>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b0b      	cmp	r3, #11
 80085f2:	d102      	bne.n	80085fa <UART_SetConfig+0x1af2>
 80085f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085f8:	e022      	b.n	8008640 <UART_SetConfig+0x1b38>
 80085fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085fe:	e01f      	b.n	8008640 <UART_SetConfig+0x1b38>
 8008600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008604:	e01c      	b.n	8008640 <UART_SetConfig+0x1b38>
 8008606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860a:	e019      	b.n	8008640 <UART_SetConfig+0x1b38>
 800860c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008610:	e016      	b.n	8008640 <UART_SetConfig+0x1b38>
 8008612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008616:	e013      	b.n	8008640 <UART_SetConfig+0x1b38>
 8008618:	f241 5354 	movw	r3, #5460	; 0x1554
 800861c:	e010      	b.n	8008640 <UART_SetConfig+0x1b38>
 800861e:	f641 1398 	movw	r3, #6552	; 0x1998
 8008622:	e00d      	b.n	8008640 <UART_SetConfig+0x1b38>
 8008624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008628:	e00a      	b.n	8008640 <UART_SetConfig+0x1b38>
 800862a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800862e:	e007      	b.n	8008640 <UART_SetConfig+0x1b38>
 8008630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008634:	e004      	b.n	8008640 <UART_SetConfig+0x1b38>
 8008636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800863a:	e001      	b.n	8008640 <UART_SetConfig+0x1b38>
 800863c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	6852      	ldr	r2, [r2, #4]
 8008644:	0852      	lsrs	r2, r2, #1
 8008646:	441a      	add	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008650:	b29b      	uxth	r3, r3
 8008652:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008654:	e003      	b.n	800865e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800865c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	2b0f      	cmp	r3, #15
 8008662:	d916      	bls.n	8008692 <UART_SetConfig+0x1b8a>
 8008664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008666:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866a:	d212      	bcs.n	8008692 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800866c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866e:	b29b      	uxth	r3, r3
 8008670:	f023 030f 	bic.w	r3, r3, #15
 8008674:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	085b      	lsrs	r3, r3, #1
 800867a:	b29b      	uxth	r3, r3
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	b29a      	uxth	r2, r3
 8008682:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008684:	4313      	orrs	r3, r2
 8008686:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800868e:	60da      	str	r2, [r3, #12]
 8008690:	e3a3      	b.n	8008dda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008698:	e39f      	b.n	8008dda <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800869a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800869e:	2b40      	cmp	r3, #64	; 0x40
 80086a0:	f200 8388 	bhi.w	8008db4 <UART_SetConfig+0x22ac>
 80086a4:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <UART_SetConfig+0x1ba4>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	080087b1 	.word	0x080087b1
 80086b0:	08008867 	.word	0x08008867
 80086b4:	08008db5 	.word	0x08008db5
 80086b8:	08008db5 	.word	0x08008db5
 80086bc:	0800891d 	.word	0x0800891d
 80086c0:	08008db5 	.word	0x08008db5
 80086c4:	08008db5 	.word	0x08008db5
 80086c8:	08008db5 	.word	0x08008db5
 80086cc:	080089d7 	.word	0x080089d7
 80086d0:	08008db5 	.word	0x08008db5
 80086d4:	08008db5 	.word	0x08008db5
 80086d8:	08008db5 	.word	0x08008db5
 80086dc:	08008db5 	.word	0x08008db5
 80086e0:	08008db5 	.word	0x08008db5
 80086e4:	08008db5 	.word	0x08008db5
 80086e8:	08008db5 	.word	0x08008db5
 80086ec:	08008a91 	.word	0x08008a91
 80086f0:	08008db5 	.word	0x08008db5
 80086f4:	08008db5 	.word	0x08008db5
 80086f8:	08008db5 	.word	0x08008db5
 80086fc:	08008db5 	.word	0x08008db5
 8008700:	08008db5 	.word	0x08008db5
 8008704:	08008db5 	.word	0x08008db5
 8008708:	08008db5 	.word	0x08008db5
 800870c:	08008db5 	.word	0x08008db5
 8008710:	08008db5 	.word	0x08008db5
 8008714:	08008db5 	.word	0x08008db5
 8008718:	08008db5 	.word	0x08008db5
 800871c:	08008db5 	.word	0x08008db5
 8008720:	08008db5 	.word	0x08008db5
 8008724:	08008db5 	.word	0x08008db5
 8008728:	08008db5 	.word	0x08008db5
 800872c:	08008c01 	.word	0x08008c01
 8008730:	08008db5 	.word	0x08008db5
 8008734:	08008db5 	.word	0x08008db5
 8008738:	08008db5 	.word	0x08008db5
 800873c:	08008db5 	.word	0x08008db5
 8008740:	08008db5 	.word	0x08008db5
 8008744:	08008db5 	.word	0x08008db5
 8008748:	08008db5 	.word	0x08008db5
 800874c:	08008db5 	.word	0x08008db5
 8008750:	08008db5 	.word	0x08008db5
 8008754:	08008db5 	.word	0x08008db5
 8008758:	08008db5 	.word	0x08008db5
 800875c:	08008db5 	.word	0x08008db5
 8008760:	08008db5 	.word	0x08008db5
 8008764:	08008db5 	.word	0x08008db5
 8008768:	08008db5 	.word	0x08008db5
 800876c:	08008db5 	.word	0x08008db5
 8008770:	08008db5 	.word	0x08008db5
 8008774:	08008db5 	.word	0x08008db5
 8008778:	08008db5 	.word	0x08008db5
 800877c:	08008db5 	.word	0x08008db5
 8008780:	08008db5 	.word	0x08008db5
 8008784:	08008db5 	.word	0x08008db5
 8008788:	08008db5 	.word	0x08008db5
 800878c:	08008db5 	.word	0x08008db5
 8008790:	08008db5 	.word	0x08008db5
 8008794:	08008db5 	.word	0x08008db5
 8008798:	08008db5 	.word	0x08008db5
 800879c:	08008db5 	.word	0x08008db5
 80087a0:	08008db5 	.word	0x08008db5
 80087a4:	08008db5 	.word	0x08008db5
 80087a8:	08008db5 	.word	0x08008db5
 80087ac:	08008cf5 	.word	0x08008cf5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b0:	f7fb fb7c 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 80087b4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d044      	beq.n	8008848 <UART_SetConfig+0x1d40>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d03e      	beq.n	8008844 <UART_SetConfig+0x1d3c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d038      	beq.n	8008840 <UART_SetConfig+0x1d38>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d032      	beq.n	800883c <UART_SetConfig+0x1d34>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d02c      	beq.n	8008838 <UART_SetConfig+0x1d30>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	2b05      	cmp	r3, #5
 80087e4:	d026      	beq.n	8008834 <UART_SetConfig+0x1d2c>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	2b06      	cmp	r3, #6
 80087ec:	d020      	beq.n	8008830 <UART_SetConfig+0x1d28>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f2:	2b07      	cmp	r3, #7
 80087f4:	d01a      	beq.n	800882c <UART_SetConfig+0x1d24>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	2b08      	cmp	r3, #8
 80087fc:	d014      	beq.n	8008828 <UART_SetConfig+0x1d20>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008802:	2b09      	cmp	r3, #9
 8008804:	d00e      	beq.n	8008824 <UART_SetConfig+0x1d1c>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2b0a      	cmp	r3, #10
 800880c:	d008      	beq.n	8008820 <UART_SetConfig+0x1d18>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	2b0b      	cmp	r3, #11
 8008814:	d102      	bne.n	800881c <UART_SetConfig+0x1d14>
 8008816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800881a:	e016      	b.n	800884a <UART_SetConfig+0x1d42>
 800881c:	2301      	movs	r3, #1
 800881e:	e014      	b.n	800884a <UART_SetConfig+0x1d42>
 8008820:	2380      	movs	r3, #128	; 0x80
 8008822:	e012      	b.n	800884a <UART_SetConfig+0x1d42>
 8008824:	2340      	movs	r3, #64	; 0x40
 8008826:	e010      	b.n	800884a <UART_SetConfig+0x1d42>
 8008828:	2320      	movs	r3, #32
 800882a:	e00e      	b.n	800884a <UART_SetConfig+0x1d42>
 800882c:	2310      	movs	r3, #16
 800882e:	e00c      	b.n	800884a <UART_SetConfig+0x1d42>
 8008830:	230c      	movs	r3, #12
 8008832:	e00a      	b.n	800884a <UART_SetConfig+0x1d42>
 8008834:	230a      	movs	r3, #10
 8008836:	e008      	b.n	800884a <UART_SetConfig+0x1d42>
 8008838:	2308      	movs	r3, #8
 800883a:	e006      	b.n	800884a <UART_SetConfig+0x1d42>
 800883c:	2306      	movs	r3, #6
 800883e:	e004      	b.n	800884a <UART_SetConfig+0x1d42>
 8008840:	2304      	movs	r3, #4
 8008842:	e002      	b.n	800884a <UART_SetConfig+0x1d42>
 8008844:	2302      	movs	r3, #2
 8008846:	e000      	b.n	800884a <UART_SetConfig+0x1d42>
 8008848:	2301      	movs	r3, #1
 800884a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800884c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	441a      	add	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008860:	b29b      	uxth	r3, r3
 8008862:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008864:	e2aa      	b.n	8008dbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008866:	f7fb fb37 	bl	8003ed8 <HAL_RCC_GetPCLK2Freq>
 800886a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b00      	cmp	r3, #0
 8008872:	d044      	beq.n	80088fe <UART_SetConfig+0x1df6>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b01      	cmp	r3, #1
 800887a:	d03e      	beq.n	80088fa <UART_SetConfig+0x1df2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b02      	cmp	r3, #2
 8008882:	d038      	beq.n	80088f6 <UART_SetConfig+0x1dee>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b03      	cmp	r3, #3
 800888a:	d032      	beq.n	80088f2 <UART_SetConfig+0x1dea>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b04      	cmp	r3, #4
 8008892:	d02c      	beq.n	80088ee <UART_SetConfig+0x1de6>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b05      	cmp	r3, #5
 800889a:	d026      	beq.n	80088ea <UART_SetConfig+0x1de2>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	2b06      	cmp	r3, #6
 80088a2:	d020      	beq.n	80088e6 <UART_SetConfig+0x1dde>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	2b07      	cmp	r3, #7
 80088aa:	d01a      	beq.n	80088e2 <UART_SetConfig+0x1dda>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b0:	2b08      	cmp	r3, #8
 80088b2:	d014      	beq.n	80088de <UART_SetConfig+0x1dd6>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	2b09      	cmp	r3, #9
 80088ba:	d00e      	beq.n	80088da <UART_SetConfig+0x1dd2>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c0:	2b0a      	cmp	r3, #10
 80088c2:	d008      	beq.n	80088d6 <UART_SetConfig+0x1dce>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	2b0b      	cmp	r3, #11
 80088ca:	d102      	bne.n	80088d2 <UART_SetConfig+0x1dca>
 80088cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088d0:	e016      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e014      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088d6:	2380      	movs	r3, #128	; 0x80
 80088d8:	e012      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088da:	2340      	movs	r3, #64	; 0x40
 80088dc:	e010      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088de:	2320      	movs	r3, #32
 80088e0:	e00e      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088e2:	2310      	movs	r3, #16
 80088e4:	e00c      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088e6:	230c      	movs	r3, #12
 80088e8:	e00a      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088ea:	230a      	movs	r3, #10
 80088ec:	e008      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088ee:	2308      	movs	r3, #8
 80088f0:	e006      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088f2:	2306      	movs	r3, #6
 80088f4:	e004      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088f6:	2304      	movs	r3, #4
 80088f8:	e002      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088fa:	2302      	movs	r3, #2
 80088fc:	e000      	b.n	8008900 <UART_SetConfig+0x1df8>
 80088fe:	2301      	movs	r3, #1
 8008900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008902:	fbb2 f2f3 	udiv	r2, r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	085b      	lsrs	r3, r3, #1
 800890c:	441a      	add	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	fbb2 f3f3 	udiv	r3, r2, r3
 8008916:	b29b      	uxth	r3, r3
 8008918:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800891a:	e24f      	b.n	8008dbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800891c:	f107 0318 	add.w	r3, r7, #24
 8008920:	4618      	mov	r0, r3
 8008922:	f7fc f9f5 	bl	8004d10 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b00      	cmp	r3, #0
 800892e:	d044      	beq.n	80089ba <UART_SetConfig+0x1eb2>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b01      	cmp	r3, #1
 8008936:	d03e      	beq.n	80089b6 <UART_SetConfig+0x1eae>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2b02      	cmp	r3, #2
 800893e:	d038      	beq.n	80089b2 <UART_SetConfig+0x1eaa>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	2b03      	cmp	r3, #3
 8008946:	d032      	beq.n	80089ae <UART_SetConfig+0x1ea6>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b04      	cmp	r3, #4
 800894e:	d02c      	beq.n	80089aa <UART_SetConfig+0x1ea2>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	2b05      	cmp	r3, #5
 8008956:	d026      	beq.n	80089a6 <UART_SetConfig+0x1e9e>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b06      	cmp	r3, #6
 800895e:	d020      	beq.n	80089a2 <UART_SetConfig+0x1e9a>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b07      	cmp	r3, #7
 8008966:	d01a      	beq.n	800899e <UART_SetConfig+0x1e96>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b08      	cmp	r3, #8
 800896e:	d014      	beq.n	800899a <UART_SetConfig+0x1e92>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	2b09      	cmp	r3, #9
 8008976:	d00e      	beq.n	8008996 <UART_SetConfig+0x1e8e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	2b0a      	cmp	r3, #10
 800897e:	d008      	beq.n	8008992 <UART_SetConfig+0x1e8a>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b0b      	cmp	r3, #11
 8008986:	d102      	bne.n	800898e <UART_SetConfig+0x1e86>
 8008988:	f44f 7380 	mov.w	r3, #256	; 0x100
 800898c:	e016      	b.n	80089bc <UART_SetConfig+0x1eb4>
 800898e:	2301      	movs	r3, #1
 8008990:	e014      	b.n	80089bc <UART_SetConfig+0x1eb4>
 8008992:	2380      	movs	r3, #128	; 0x80
 8008994:	e012      	b.n	80089bc <UART_SetConfig+0x1eb4>
 8008996:	2340      	movs	r3, #64	; 0x40
 8008998:	e010      	b.n	80089bc <UART_SetConfig+0x1eb4>
 800899a:	2320      	movs	r3, #32
 800899c:	e00e      	b.n	80089bc <UART_SetConfig+0x1eb4>
 800899e:	2310      	movs	r3, #16
 80089a0:	e00c      	b.n	80089bc <UART_SetConfig+0x1eb4>
 80089a2:	230c      	movs	r3, #12
 80089a4:	e00a      	b.n	80089bc <UART_SetConfig+0x1eb4>
 80089a6:	230a      	movs	r3, #10
 80089a8:	e008      	b.n	80089bc <UART_SetConfig+0x1eb4>
 80089aa:	2308      	movs	r3, #8
 80089ac:	e006      	b.n	80089bc <UART_SetConfig+0x1eb4>
 80089ae:	2306      	movs	r3, #6
 80089b0:	e004      	b.n	80089bc <UART_SetConfig+0x1eb4>
 80089b2:	2304      	movs	r3, #4
 80089b4:	e002      	b.n	80089bc <UART_SetConfig+0x1eb4>
 80089b6:	2302      	movs	r3, #2
 80089b8:	e000      	b.n	80089bc <UART_SetConfig+0x1eb4>
 80089ba:	2301      	movs	r3, #1
 80089bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	085b      	lsrs	r3, r3, #1
 80089c6:	441a      	add	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089d4:	e1f2      	b.n	8008dbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089d6:	f107 030c 	add.w	r3, r7, #12
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fc fae4 	bl	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e0:	693a      	ldr	r2, [r7, #16]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d044      	beq.n	8008a74 <UART_SetConfig+0x1f6c>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d03e      	beq.n	8008a70 <UART_SetConfig+0x1f68>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d038      	beq.n	8008a6c <UART_SetConfig+0x1f64>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b03      	cmp	r3, #3
 8008a00:	d032      	beq.n	8008a68 <UART_SetConfig+0x1f60>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b04      	cmp	r3, #4
 8008a08:	d02c      	beq.n	8008a64 <UART_SetConfig+0x1f5c>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	d026      	beq.n	8008a60 <UART_SetConfig+0x1f58>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b06      	cmp	r3, #6
 8008a18:	d020      	beq.n	8008a5c <UART_SetConfig+0x1f54>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b07      	cmp	r3, #7
 8008a20:	d01a      	beq.n	8008a58 <UART_SetConfig+0x1f50>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	2b08      	cmp	r3, #8
 8008a28:	d014      	beq.n	8008a54 <UART_SetConfig+0x1f4c>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b09      	cmp	r3, #9
 8008a30:	d00e      	beq.n	8008a50 <UART_SetConfig+0x1f48>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b0a      	cmp	r3, #10
 8008a38:	d008      	beq.n	8008a4c <UART_SetConfig+0x1f44>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b0b      	cmp	r3, #11
 8008a40:	d102      	bne.n	8008a48 <UART_SetConfig+0x1f40>
 8008a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a46:	e016      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e014      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a4c:	2380      	movs	r3, #128	; 0x80
 8008a4e:	e012      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a50:	2340      	movs	r3, #64	; 0x40
 8008a52:	e010      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a54:	2320      	movs	r3, #32
 8008a56:	e00e      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	e00c      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a5c:	230c      	movs	r3, #12
 8008a5e:	e00a      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a60:	230a      	movs	r3, #10
 8008a62:	e008      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a64:	2308      	movs	r3, #8
 8008a66:	e006      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a68:	2306      	movs	r3, #6
 8008a6a:	e004      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	e002      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e000      	b.n	8008a76 <UART_SetConfig+0x1f6e>
 8008a74:	2301      	movs	r3, #1
 8008a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	441a      	add	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a8e:	e195      	b.n	8008dbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a90:	4b87      	ldr	r3, [pc, #540]	; (8008cb0 <UART_SetConfig+0x21a8>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d05d      	beq.n	8008b58 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a9c:	4b84      	ldr	r3, [pc, #528]	; (8008cb0 <UART_SetConfig+0x21a8>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	08db      	lsrs	r3, r3, #3
 8008aa2:	f003 0303 	and.w	r3, r3, #3
 8008aa6:	4a83      	ldr	r2, [pc, #524]	; (8008cb4 <UART_SetConfig+0x21ac>)
 8008aa8:	40da      	lsrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d044      	beq.n	8008b3c <UART_SetConfig+0x2034>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d03e      	beq.n	8008b38 <UART_SetConfig+0x2030>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d038      	beq.n	8008b34 <UART_SetConfig+0x202c>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d032      	beq.n	8008b30 <UART_SetConfig+0x2028>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d02c      	beq.n	8008b2c <UART_SetConfig+0x2024>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b05      	cmp	r3, #5
 8008ad8:	d026      	beq.n	8008b28 <UART_SetConfig+0x2020>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	2b06      	cmp	r3, #6
 8008ae0:	d020      	beq.n	8008b24 <UART_SetConfig+0x201c>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae6:	2b07      	cmp	r3, #7
 8008ae8:	d01a      	beq.n	8008b20 <UART_SetConfig+0x2018>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d014      	beq.n	8008b1c <UART_SetConfig+0x2014>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2b09      	cmp	r3, #9
 8008af8:	d00e      	beq.n	8008b18 <UART_SetConfig+0x2010>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2b0a      	cmp	r3, #10
 8008b00:	d008      	beq.n	8008b14 <UART_SetConfig+0x200c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b06:	2b0b      	cmp	r3, #11
 8008b08:	d102      	bne.n	8008b10 <UART_SetConfig+0x2008>
 8008b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b0e:	e016      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e014      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	e012      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b18:	2340      	movs	r3, #64	; 0x40
 8008b1a:	e010      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	e00e      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b20:	2310      	movs	r3, #16
 8008b22:	e00c      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b24:	230c      	movs	r3, #12
 8008b26:	e00a      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b28:	230a      	movs	r3, #10
 8008b2a:	e008      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	e006      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b30:	2306      	movs	r3, #6
 8008b32:	e004      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b34:	2304      	movs	r3, #4
 8008b36:	e002      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e000      	b.n	8008b3e <UART_SetConfig+0x2036>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	441a      	add	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008b56:	e131      	b.n	8008dbc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d043      	beq.n	8008be8 <UART_SetConfig+0x20e0>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d03d      	beq.n	8008be4 <UART_SetConfig+0x20dc>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d037      	beq.n	8008be0 <UART_SetConfig+0x20d8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d031      	beq.n	8008bdc <UART_SetConfig+0x20d4>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d02b      	beq.n	8008bd8 <UART_SetConfig+0x20d0>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d025      	beq.n	8008bd4 <UART_SetConfig+0x20cc>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	2b06      	cmp	r3, #6
 8008b8e:	d01f      	beq.n	8008bd0 <UART_SetConfig+0x20c8>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	2b07      	cmp	r3, #7
 8008b96:	d019      	beq.n	8008bcc <UART_SetConfig+0x20c4>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d013      	beq.n	8008bc8 <UART_SetConfig+0x20c0>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	d00d      	beq.n	8008bc4 <UART_SetConfig+0x20bc>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bac:	2b0a      	cmp	r3, #10
 8008bae:	d007      	beq.n	8008bc0 <UART_SetConfig+0x20b8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	2b0b      	cmp	r3, #11
 8008bb6:	d101      	bne.n	8008bbc <UART_SetConfig+0x20b4>
 8008bb8:	4b3f      	ldr	r3, [pc, #252]	; (8008cb8 <UART_SetConfig+0x21b0>)
 8008bba:	e016      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bbc:	4b3d      	ldr	r3, [pc, #244]	; (8008cb4 <UART_SetConfig+0x21ac>)
 8008bbe:	e014      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bc0:	4b3e      	ldr	r3, [pc, #248]	; (8008cbc <UART_SetConfig+0x21b4>)
 8008bc2:	e012      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bc4:	4b3e      	ldr	r3, [pc, #248]	; (8008cc0 <UART_SetConfig+0x21b8>)
 8008bc6:	e010      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bc8:	4b3e      	ldr	r3, [pc, #248]	; (8008cc4 <UART_SetConfig+0x21bc>)
 8008bca:	e00e      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bcc:	4b3e      	ldr	r3, [pc, #248]	; (8008cc8 <UART_SetConfig+0x21c0>)
 8008bce:	e00c      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ccc <UART_SetConfig+0x21c4>)
 8008bd2:	e00a      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bd4:	4b3e      	ldr	r3, [pc, #248]	; (8008cd0 <UART_SetConfig+0x21c8>)
 8008bd6:	e008      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bd8:	4b3e      	ldr	r3, [pc, #248]	; (8008cd4 <UART_SetConfig+0x21cc>)
 8008bda:	e006      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	; (8008cd8 <UART_SetConfig+0x21d0>)
 8008bde:	e004      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008be0:	4b3e      	ldr	r3, [pc, #248]	; (8008cdc <UART_SetConfig+0x21d4>)
 8008be2:	e002      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008be4:	4b3e      	ldr	r3, [pc, #248]	; (8008ce0 <UART_SetConfig+0x21d8>)
 8008be6:	e000      	b.n	8008bea <UART_SetConfig+0x20e2>
 8008be8:	4b32      	ldr	r3, [pc, #200]	; (8008cb4 <UART_SetConfig+0x21ac>)
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	6852      	ldr	r2, [r2, #4]
 8008bee:	0852      	lsrs	r2, r2, #1
 8008bf0:	441a      	add	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bfe:	e0dd      	b.n	8008dbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d046      	beq.n	8008c96 <UART_SetConfig+0x218e>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d040      	beq.n	8008c92 <UART_SetConfig+0x218a>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d03a      	beq.n	8008c8e <UART_SetConfig+0x2186>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d034      	beq.n	8008c8a <UART_SetConfig+0x2182>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d02e      	beq.n	8008c86 <UART_SetConfig+0x217e>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	2b05      	cmp	r3, #5
 8008c2e:	d028      	beq.n	8008c82 <UART_SetConfig+0x217a>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	2b06      	cmp	r3, #6
 8008c36:	d022      	beq.n	8008c7e <UART_SetConfig+0x2176>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	2b07      	cmp	r3, #7
 8008c3e:	d01c      	beq.n	8008c7a <UART_SetConfig+0x2172>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	2b08      	cmp	r3, #8
 8008c46:	d016      	beq.n	8008c76 <UART_SetConfig+0x216e>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4c:	2b09      	cmp	r3, #9
 8008c4e:	d00f      	beq.n	8008c70 <UART_SetConfig+0x2168>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c54:	2b0a      	cmp	r3, #10
 8008c56:	d008      	beq.n	8008c6a <UART_SetConfig+0x2162>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	2b0b      	cmp	r3, #11
 8008c5e:	d102      	bne.n	8008c66 <UART_SetConfig+0x215e>
 8008c60:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008c64:	e018      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c66:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <UART_SetConfig+0x21c0>)
 8008c68:	e016      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c6a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008c6e:	e013      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008c74:	e010      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c76:	4b1b      	ldr	r3, [pc, #108]	; (8008ce4 <UART_SetConfig+0x21dc>)
 8008c78:	e00e      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c7a:	4b0f      	ldr	r3, [pc, #60]	; (8008cb8 <UART_SetConfig+0x21b0>)
 8008c7c:	e00c      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ce8 <UART_SetConfig+0x21e0>)
 8008c80:	e00a      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c82:	4b1a      	ldr	r3, [pc, #104]	; (8008cec <UART_SetConfig+0x21e4>)
 8008c84:	e008      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c86:	4b0d      	ldr	r3, [pc, #52]	; (8008cbc <UART_SetConfig+0x21b4>)
 8008c88:	e006      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c8a:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <UART_SetConfig+0x21e8>)
 8008c8c:	e004      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c8e:	4b0c      	ldr	r3, [pc, #48]	; (8008cc0 <UART_SetConfig+0x21b8>)
 8008c90:	e002      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c92:	4b0c      	ldr	r3, [pc, #48]	; (8008cc4 <UART_SetConfig+0x21bc>)
 8008c94:	e000      	b.n	8008c98 <UART_SetConfig+0x2190>
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <UART_SetConfig+0x21c0>)
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	6852      	ldr	r2, [r2, #4]
 8008c9c:	0852      	lsrs	r2, r2, #1
 8008c9e:	441a      	add	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008cac:	e086      	b.n	8008dbc <UART_SetConfig+0x22b4>
 8008cae:	bf00      	nop
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	03d09000 	.word	0x03d09000
 8008cb8:	0003d090 	.word	0x0003d090
 8008cbc:	0007a120 	.word	0x0007a120
 8008cc0:	000f4240 	.word	0x000f4240
 8008cc4:	001e8480 	.word	0x001e8480
 8008cc8:	003d0900 	.word	0x003d0900
 8008ccc:	00516155 	.word	0x00516155
 8008cd0:	0061a800 	.word	0x0061a800
 8008cd4:	007a1200 	.word	0x007a1200
 8008cd8:	00a2c2aa 	.word	0x00a2c2aa
 8008cdc:	00f42400 	.word	0x00f42400
 8008ce0:	01e84800 	.word	0x01e84800
 8008ce4:	0001e848 	.word	0x0001e848
 8008ce8:	00051615 	.word	0x00051615
 8008cec:	00061a80 	.word	0x00061a80
 8008cf0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d04e      	beq.n	8008d9a <UART_SetConfig+0x2292>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d047      	beq.n	8008d94 <UART_SetConfig+0x228c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d040      	beq.n	8008d8e <UART_SetConfig+0x2286>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d039      	beq.n	8008d88 <UART_SetConfig+0x2280>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d032      	beq.n	8008d82 <UART_SetConfig+0x227a>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b05      	cmp	r3, #5
 8008d22:	d02b      	beq.n	8008d7c <UART_SetConfig+0x2274>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	2b06      	cmp	r3, #6
 8008d2a:	d024      	beq.n	8008d76 <UART_SetConfig+0x226e>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b07      	cmp	r3, #7
 8008d32:	d01d      	beq.n	8008d70 <UART_SetConfig+0x2268>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d016      	beq.n	8008d6a <UART_SetConfig+0x2262>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d40:	2b09      	cmp	r3, #9
 8008d42:	d00f      	beq.n	8008d64 <UART_SetConfig+0x225c>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	2b0a      	cmp	r3, #10
 8008d4a:	d008      	beq.n	8008d5e <UART_SetConfig+0x2256>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d50:	2b0b      	cmp	r3, #11
 8008d52:	d101      	bne.n	8008d58 <UART_SetConfig+0x2250>
 8008d54:	2380      	movs	r3, #128	; 0x80
 8008d56:	e022      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d5c:	e01f      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d62:	e01c      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d68:	e019      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d6e:	e016      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d74:	e013      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008d7a:	e010      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008d80:	e00d      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d86:	e00a      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d88:	f241 5355 	movw	r3, #5461	; 0x1555
 8008d8c:	e007      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d92:	e004      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d98:	e001      	b.n	8008d9e <UART_SetConfig+0x2296>
 8008d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6852      	ldr	r2, [r2, #4]
 8008da2:	0852      	lsrs	r2, r2, #1
 8008da4:	441a      	add	r2, r3
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008db2:	e003      	b.n	8008dbc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008dba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbe:	2b0f      	cmp	r3, #15
 8008dc0:	d908      	bls.n	8008dd4 <UART_SetConfig+0x22cc>
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc8:	d204      	bcs.n	8008dd4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd0:	60da      	str	r2, [r3, #12]
 8008dd2:	e002      	b.n	8008dda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008df6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3740      	adds	r7, #64	; 0x40
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00a      	beq.n	8008e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00a      	beq.n	8008e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e54:	f003 0304 	and.w	r3, r3, #4
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	430a      	orrs	r2, r1
 8008e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e76:	f003 0308 	and.w	r3, r3, #8
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00a      	beq.n	8008e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	430a      	orrs	r2, r1
 8008e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e98:	f003 0310 	and.w	r3, r3, #16
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00a      	beq.n	8008eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	f003 0320 	and.w	r3, r3, #32
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00a      	beq.n	8008ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01a      	beq.n	8008f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	430a      	orrs	r2, r1
 8008ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f02:	d10a      	bne.n	8008f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	430a      	orrs	r2, r1
 8008f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	605a      	str	r2, [r3, #4]
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af02      	add	r7, sp, #8
 8008f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f58:	f7f8 fe5a 	bl	8001c10 <HAL_GetTick>
 8008f5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d10e      	bne.n	8008f8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f82c 	bl	8008fd8 <UART_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e022      	b.n	8008fd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d10e      	bne.n	8008fb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f816 	bl	8008fd8 <UART_WaitOnFlagUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e00c      	b.n	8008fd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe8:	e062      	b.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff0:	d05e      	beq.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ff2:	f7f8 fe0d 	bl	8001c10 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d302      	bcc.n	8009008 <UART_WaitOnFlagUntilTimeout+0x30>
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d11d      	bne.n	8009044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009016:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f022 0201 	bic.w	r2, r2, #1
 8009026:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2220      	movs	r2, #32
 8009034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009040:	2303      	movs	r3, #3
 8009042:	e045      	b.n	80090d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02e      	beq.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800905c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009060:	d126      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800906a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800907a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2220      	movs	r2, #32
 80090a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e00f      	b.n	80090d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	4013      	ands	r3, r2
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	429a      	cmp	r2, r3
 80090be:	bf0c      	ite	eq
 80090c0:	2301      	moveq	r3, #1
 80090c2:	2300      	movne	r3, #0
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d08d      	beq.n	8008fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6899      	ldr	r1, [r3, #8]
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b08      	ldr	r3, [pc, #32]	; (800911c <UART_EndRxTransfer+0x44>)
 80090fc:	400b      	ands	r3, r1
 80090fe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2220      	movs	r2, #32
 8009104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	effffffe 	.word	0xeffffffe

08009120 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7fd fcd8 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009144:	bf00      	nop
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009162:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2220      	movs	r2, #32
 8009168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fd fcb4 	bl	8006ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009178:	bf00      	nop
 800917a:	3708      	adds	r7, #8
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80091bc:	b480      	push	{r7}
 80091be:	b085      	sub	sp, #20
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d101      	bne.n	80091d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80091ce:	2302      	movs	r3, #2
 80091d0:	e027      	b.n	8009222 <HAL_UARTEx_DisableFifoMode+0x66>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2224      	movs	r2, #36	; 0x24
 80091de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0201 	bic.w	r2, r2, #1
 80091f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009200:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2220      	movs	r2, #32
 8009214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009242:	2302      	movs	r3, #2
 8009244:	e02d      	b.n	80092a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2224      	movs	r2, #36	; 0x24
 8009252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0201 	bic.w	r2, r2, #1
 800926c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f850 	bl	8009328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d101      	bne.n	80092c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80092be:	2302      	movs	r3, #2
 80092c0:	e02d      	b.n	800931e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2224      	movs	r2, #36	; 0x24
 80092ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f022 0201 	bic.w	r2, r2, #1
 80092e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f812 	bl	8009328 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2220      	movs	r2, #32
 8009310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3710      	adds	r7, #16
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}
	...

08009328 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b089      	sub	sp, #36	; 0x24
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009330:	4a2f      	ldr	r2, [pc, #188]	; (80093f0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009332:	f107 0314 	add.w	r3, r7, #20
 8009336:	e892 0003 	ldmia.w	r2, {r0, r1}
 800933a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800933e:	4a2d      	ldr	r2, [pc, #180]	; (80093f4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009340:	f107 030c 	add.w	r3, r7, #12
 8009344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009348:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009350:	2b00      	cmp	r3, #0
 8009352:	d108      	bne.n	8009366 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009364:	e03d      	b.n	80093e2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009366:	2308      	movs	r3, #8
 8009368:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800936a:	2308      	movs	r3, #8
 800936c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	0e5b      	lsrs	r3, r3, #25
 8009376:	b2db      	uxtb	r3, r3
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	0f5b      	lsrs	r3, r3, #29
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 0307 	and.w	r3, r3, #7
 800938c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800938e:	7fbb      	ldrb	r3, [r7, #30]
 8009390:	7f3a      	ldrb	r2, [r7, #28]
 8009392:	f107 0120 	add.w	r1, r7, #32
 8009396:	440a      	add	r2, r1
 8009398:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800939c:	fb02 f303 	mul.w	r3, r2, r3
 80093a0:	7f3a      	ldrb	r2, [r7, #28]
 80093a2:	f107 0120 	add.w	r1, r7, #32
 80093a6:	440a      	add	r2, r1
 80093a8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80093ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80093b8:	7ffb      	ldrb	r3, [r7, #31]
 80093ba:	7f7a      	ldrb	r2, [r7, #29]
 80093bc:	f107 0120 	add.w	r1, r7, #32
 80093c0:	440a      	add	r2, r1
 80093c2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80093c6:	fb02 f303 	mul.w	r3, r2, r3
 80093ca:	7f7a      	ldrb	r2, [r7, #29]
 80093cc:	f107 0120 	add.w	r1, r7, #32
 80093d0:	440a      	add	r2, r1
 80093d2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80093d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093da:	b29a      	uxth	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093e2:	bf00      	nop
 80093e4:	3724      	adds	r7, #36	; 0x24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	080099d8 	.word	0x080099d8
 80093f4:	080099e0 	.word	0x080099e0

080093f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093f8:	b084      	sub	sp, #16
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	f107 001c 	add.w	r0, r7, #28
 8009406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800940a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940c:	2b01      	cmp	r3, #1
 800940e:	d120      	bne.n	8009452 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	68da      	ldr	r2, [r3, #12]
 8009420:	4b25      	ldr	r3, [pc, #148]	; (80094b8 <USB_CoreInit+0xc0>)
 8009422:	4013      	ands	r3, r2
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009436:	2b01      	cmp	r3, #1
 8009438:	d105      	bne.n	8009446 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fa5a 	bl	8009900 <USB_CoreReset>
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
 8009450:	e01a      	b.n	8009488 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fa4e 	bl	8009900 <USB_CoreReset>
 8009464:	4603      	mov	r3, r0
 8009466:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	d106      	bne.n	800947c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	639a      	str	r2, [r3, #56]	; 0x38
 800947a:	e005      	b.n	8009488 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948a:	2b01      	cmp	r3, #1
 800948c:	d10b      	bne.n	80094a6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f043 0208 	orr.w	r2, r3, #8
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f043 0220 	orr.w	r2, r3, #32
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094b2:	b004      	add	sp, #16
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	ffbdffbf 	.word	0xffbdffbf

080094bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f023 0201 	bic.w	r2, r3, #1
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	370c      	adds	r7, #12
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr

080094de <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	460b      	mov	r3, r1
 80094e8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094f6:	78fb      	ldrb	r3, [r7, #3]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d106      	bne.n	800950a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60da      	str	r2, [r3, #12]
 8009508:	e00b      	b.n	8009522 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60da      	str	r2, [r3, #12]
 800951c:	e001      	b.n	8009522 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e003      	b.n	800952a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009522:	2032      	movs	r0, #50	; 0x32
 8009524:	f7f8 fb80 	bl	8001c28 <HAL_Delay>

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3708      	adds	r7, #8
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
	...

08009534 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009534:	b084      	sub	sp, #16
 8009536:	b580      	push	{r7, lr}
 8009538:	b086      	sub	sp, #24
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009542:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800954e:	2300      	movs	r3, #0
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	e009      	b.n	8009568 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	3340      	adds	r3, #64	; 0x40
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	2200      	movs	r2, #0
 8009560:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	3301      	adds	r3, #1
 8009566:	613b      	str	r3, [r7, #16]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2b0e      	cmp	r3, #14
 800956c:	d9f2      	bls.n	8009554 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800956e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d112      	bne.n	800959a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	e005      	b.n	80095a6 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800959e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095ac:	461a      	mov	r2, r3
 80095ae:	2300      	movs	r3, #0
 80095b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b8:	4619      	mov	r1, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095c0:	461a      	mov	r2, r3
 80095c2:	680b      	ldr	r3, [r1, #0]
 80095c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d10c      	bne.n	80095e6 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d104      	bne.n	80095dc <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f961 	bl	800989c <USB_SetDevSpeed>
 80095da:	e008      	b.n	80095ee <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095dc:	2101      	movs	r1, #1
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 f95c 	bl	800989c <USB_SetDevSpeed>
 80095e4:	e003      	b.n	80095ee <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095e6:	2103      	movs	r1, #3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f957 	bl	800989c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095ee:	2110      	movs	r1, #16
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 f90b 	bl	800980c <USB_FlushTxFifo>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f929 	bl	8009858 <USB_FlushRxFifo>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009616:	461a      	mov	r2, r3
 8009618:	2300      	movs	r3, #0
 800961a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	461a      	mov	r2, r3
 8009624:	2300      	movs	r3, #0
 8009626:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800962e:	461a      	mov	r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009634:	2300      	movs	r3, #0
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	e043      	b.n	80096c2 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800964c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009650:	d118      	bne.n	8009684 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10a      	bne.n	800966e <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009664:	461a      	mov	r2, r3
 8009666:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	e013      	b.n	8009696 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967a:	461a      	mov	r2, r3
 800967c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	e008      	b.n	8009696 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	015a      	lsls	r2, r3, #5
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009690:	461a      	mov	r2, r3
 8009692:	2300      	movs	r3, #0
 8009694:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a2:	461a      	mov	r2, r3
 80096a4:	2300      	movs	r3, #0
 80096a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096b4:	461a      	mov	r2, r3
 80096b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80096ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	3301      	adds	r3, #1
 80096c0:	613b      	str	r3, [r7, #16]
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d3b7      	bcc.n	800963a <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096ca:	2300      	movs	r3, #0
 80096cc:	613b      	str	r3, [r7, #16]
 80096ce:	e043      	b.n	8009758 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	015a      	lsls	r2, r3, #5
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	4413      	add	r3, r2
 80096d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096e6:	d118      	bne.n	800971a <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10a      	bne.n	8009704 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	015a      	lsls	r2, r3, #5
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4413      	add	r3, r2
 80096f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fa:	461a      	mov	r2, r3
 80096fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	e013      	b.n	800972c <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	461a      	mov	r2, r3
 8009712:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009716:	6013      	str	r3, [r2, #0]
 8009718:	e008      	b.n	800972c <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	015a      	lsls	r2, r3, #5
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4413      	add	r3, r2
 8009722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009726:	461a      	mov	r2, r3
 8009728:	2300      	movs	r3, #0
 800972a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009738:	461a      	mov	r2, r3
 800973a:	2300      	movs	r3, #0
 800973c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	015a      	lsls	r2, r3, #5
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4413      	add	r3, r2
 8009746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974a:	461a      	mov	r2, r3
 800974c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	3301      	adds	r3, #1
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	429a      	cmp	r2, r3
 800975e:	d3b7      	bcc.n	80096d0 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009766:	691b      	ldr	r3, [r3, #16]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800976e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009772:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	2b01      	cmp	r3, #1
 8009778:	d110      	bne.n	800979c <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009780:	461a      	mov	r2, r3
 8009782:	4b1e      	ldr	r3, [pc, #120]	; (80097fc <USB_DevInit+0x2c8>)
 8009784:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009794:	4619      	mov	r1, r3
 8009796:	4b1a      	ldr	r3, [pc, #104]	; (8009800 <USB_DevInit+0x2cc>)
 8009798:	4313      	orrs	r3, r2
 800979a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80097a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80097aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d105      	bne.n	80097bc <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	f043 0210 	orr.w	r2, r3, #16
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	699a      	ldr	r2, [r3, #24]
 80097c0:	4b10      	ldr	r3, [pc, #64]	; (8009804 <USB_DevInit+0x2d0>)
 80097c2:	4313      	orrs	r3, r2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	f043 0208 	orr.w	r2, r3, #8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d105      	bne.n	80097ec <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	699a      	ldr	r2, [r3, #24]
 80097e4:	4b08      	ldr	r3, [pc, #32]	; (8009808 <USB_DevInit+0x2d4>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3718      	adds	r7, #24
 80097f2:	46bd      	mov	sp, r7
 80097f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097f8:	b004      	add	sp, #16
 80097fa:	4770      	bx	lr
 80097fc:	00800100 	.word	0x00800100
 8009800:	00010003 	.word	0x00010003
 8009804:	803c3800 	.word	0x803c3800
 8009808:	40000004 	.word	0x40000004

0800980c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800980c:	b480      	push	{r7}
 800980e:	b085      	sub	sp, #20
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	019b      	lsls	r3, r3, #6
 800981e:	f043 0220 	orr.w	r2, r3, #32
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4a09      	ldr	r2, [pc, #36]	; (8009854 <USB_FlushTxFifo+0x48>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d901      	bls.n	8009838 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e006      	b.n	8009846 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0320 	and.w	r3, r3, #32
 8009840:	2b20      	cmp	r3, #32
 8009842:	d0f0      	beq.n	8009826 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	00030d40 	.word	0x00030d40

08009858 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2210      	movs	r2, #16
 8009868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3301      	adds	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4a09      	ldr	r2, [pc, #36]	; (8009898 <USB_FlushRxFifo+0x40>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d901      	bls.n	800987c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e006      	b.n	800988a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b10      	cmp	r3, #16
 8009886:	d0f0      	beq.n	800986a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	00030d40 	.word	0x00030d40

0800989c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	68f9      	ldr	r1, [r7, #12]
 80098b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098bc:	4313      	orrs	r3, r2
 80098be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr

080098ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098e8:	f043 0302 	orr.w	r3, r3, #2
 80098ec:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80098ee:	2003      	movs	r0, #3
 80098f0:	f7f8 f99a 	bl	8001c28 <HAL_Delay>

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	3301      	adds	r3, #1
 8009910:	60fb      	str	r3, [r7, #12]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	4a13      	ldr	r2, [pc, #76]	; (8009964 <USB_CoreReset+0x64>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d901      	bls.n	800991e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e01b      	b.n	8009956 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	daf2      	bge.n	800990c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	f043 0201 	orr.w	r2, r3, #1
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3301      	adds	r3, #1
 800993a:	60fb      	str	r3, [r7, #12]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4a09      	ldr	r2, [pc, #36]	; (8009964 <USB_CoreReset+0x64>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d901      	bls.n	8009948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e006      	b.n	8009956 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b01      	cmp	r3, #1
 8009952:	d0f0      	beq.n	8009936 <USB_CoreReset+0x36>

  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3714      	adds	r7, #20
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	00030d40 	.word	0x00030d40

08009968 <__libc_init_array>:
 8009968:	b570      	push	{r4, r5, r6, lr}
 800996a:	4e0d      	ldr	r6, [pc, #52]	; (80099a0 <__libc_init_array+0x38>)
 800996c:	4c0d      	ldr	r4, [pc, #52]	; (80099a4 <__libc_init_array+0x3c>)
 800996e:	1ba4      	subs	r4, r4, r6
 8009970:	10a4      	asrs	r4, r4, #2
 8009972:	2500      	movs	r5, #0
 8009974:	42a5      	cmp	r5, r4
 8009976:	d109      	bne.n	800998c <__libc_init_array+0x24>
 8009978:	4e0b      	ldr	r6, [pc, #44]	; (80099a8 <__libc_init_array+0x40>)
 800997a:	4c0c      	ldr	r4, [pc, #48]	; (80099ac <__libc_init_array+0x44>)
 800997c:	f000 f820 	bl	80099c0 <_init>
 8009980:	1ba4      	subs	r4, r4, r6
 8009982:	10a4      	asrs	r4, r4, #2
 8009984:	2500      	movs	r5, #0
 8009986:	42a5      	cmp	r5, r4
 8009988:	d105      	bne.n	8009996 <__libc_init_array+0x2e>
 800998a:	bd70      	pop	{r4, r5, r6, pc}
 800998c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009990:	4798      	blx	r3
 8009992:	3501      	adds	r5, #1
 8009994:	e7ee      	b.n	8009974 <__libc_init_array+0xc>
 8009996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800999a:	4798      	blx	r3
 800999c:	3501      	adds	r5, #1
 800999e:	e7f2      	b.n	8009986 <__libc_init_array+0x1e>
 80099a0:	08009a00 	.word	0x08009a00
 80099a4:	08009a00 	.word	0x08009a00
 80099a8:	08009a00 	.word	0x08009a00
 80099ac:	08009a04 	.word	0x08009a04

080099b0 <memset>:
 80099b0:	4402      	add	r2, r0
 80099b2:	4603      	mov	r3, r0
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d100      	bne.n	80099ba <memset+0xa>
 80099b8:	4770      	bx	lr
 80099ba:	f803 1b01 	strb.w	r1, [r3], #1
 80099be:	e7f9      	b.n	80099b4 <memset+0x4>

080099c0 <_init>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	bf00      	nop
 80099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c6:	bc08      	pop	{r3}
 80099c8:	469e      	mov	lr, r3
 80099ca:	4770      	bx	lr

080099cc <_fini>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	bf00      	nop
 80099d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099d2:	bc08      	pop	{r3}
 80099d4:	469e      	mov	lr, r3
 80099d6:	4770      	bx	lr

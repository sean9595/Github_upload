
Manipulator_Control_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097a4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009a3c  08009a3c  00019a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a5c  08009a5c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009a5c  08009a5c  00019a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a64  08009a64  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a64  08009a64  00019a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a68  08009a68  00019a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08009a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08009a7c  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009adc  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a84  240000d0  08009b3c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000b54  08009b3c  00020b54  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ad68  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000042b9  00000000  00000000  0004ae66  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001620  00000000  00000000  0004f120  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001478  00000000  00000000  00050740  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038f2a  00000000  00000000  00051bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000161ae  00000000  00000000  0008aae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00165708  00000000  00000000  000a0c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00206398  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005d04  00000000  00000000  00206414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009a24 	.word	0x08009a24

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009a24 	.word	0x08009a24

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_ETH_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_ETH_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ETH_Init+0x90>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x90>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x90>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	3302      	adds	r3, #2
 80005fa:	22e1      	movs	r2, #225	; 0xe1
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x90>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x90>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3304      	adds	r3, #4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x90>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	3305      	adds	r3, #5
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_ETH_Init+0x90>)
 800061e:	2201      	movs	r2, #1
 8000620:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x90>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_ETH_Init+0x98>)
 8000626:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_ETH_Init+0x90>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_ETH_Init+0x9c>)
 800062c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x90>)
 8000630:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x90>)
 8000638:	f001 fc74 	bl	8001f24 <HAL_ETH_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa6f 	bl	8000b24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ETH_Init+0xa0>)
 800064c:	f009 f9e2 	bl	8009a14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0xa0>)
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_ETH_Init+0xa0>)
 8000658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_ETH_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	240000ec 	.word	0x240000ec
 800066c:	40028000 	.word	0x40028000
 8000670:	24000070 	.word	0x24000070
 8000674:	24000010 	.word	0x24000010
 8000678:	2400015c 	.word	0x2400015c

0800067c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <HAL_ETH_MspInit+0x184>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f040 80ab 	bne.w	80007f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a6:	4a57      	ldr	r2, [pc, #348]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006be:	4b51      	ldr	r3, [pc, #324]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <HAL_ETH_MspInit+0x18c>)
 800078e:	f001 ffdf 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000792:	2386      	movs	r3, #134	; 0x86
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a2:	230b      	movs	r3, #11
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <HAL_ETH_MspInit+0x190>)
 80007ae:	f001 ffcf 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <HAL_ETH_MspInit+0x194>)
 80007d0:	f001 ffbe 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_ETH_MspInit+0x198>)
 80007f2:	f001 ffad 	bl	8002750 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40028000 	.word	0x40028000
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58021800 	.word	0x58021800

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x154>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <MX_GPIO_Init+0x154>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x154>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x154>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <MX_GPIO_Init+0x154>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x154>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x154>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x154>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x154>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x154>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x154>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x154>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ea:	f002 f8e1 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008f4:	f002 f8dc 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x160>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x164>)
 800090e:	f001 ff1f 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000912:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x158>)
 800092c:	f001 ff10 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000948:	f001 ff02 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000960:	f001 fef6 	bl	8002750 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58021800 	.word	0x58021800
 8000978:	11110000 	.word	0x11110000
 800097c:	58020800 	.word	0x58020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 ff58 	bl	8001838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f814 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff44 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 8000990:	f7ff fe22 	bl	80005d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000994:	f000 fdf4 	bl	8001580 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f000 fe9a 	bl	80016d0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800099c:	f000 fbec 	bl	8001178 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fc78 	bl	8001294 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uart_hal_rx_buffer_init(); //Uart 수신 링버퍼 초기화
 80009a4:	f000 f8c6 	bl	8000b34 <uart_hal_rx_buffer_init>
  serial_Init(); //Uart 수신 대기 상태로 설정.
 80009a8:	f000 f90a 	bl	8000bc0 <serial_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart_hal_rx_monitor(); //Uart 수신 처리 함수 호출. 이와 같이 함수를 이용하면 인터럽트를 루틴 밖에서 수신 처리를 하므로 다른 우선순위가 높은 인터럽트에 의해 수신 처리르 못하게 될 가능성을 없앨 수 있다.
 80009ac:	f000 f916 	bl	8000bdc <uart_hal_rx_monitor>
 80009b0:	e7fc      	b.n	80009ac <main+0x2c>
	...

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0cc      	sub	sp, #304	; 0x130
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009be:	224c      	movs	r2, #76	; 0x4c
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 f826 	bl	8009a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f009 f81f 	bl	8009a14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4618      	mov	r0, r3
 80009dc:	23bc      	movs	r3, #188	; 0xbc
 80009de:	461a      	mov	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f009 f817 	bl	8009a14 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e6:	2002      	movs	r0, #2
 80009e8:	f002 f9c4 	bl	8002d74 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <SystemClock_Config+0x164>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <SystemClock_Config+0x164>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009fe:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <SystemClock_Config+0x164>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	f003 0201 	and.w	r2, r3, #1
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	4b44      	ldr	r3, [pc, #272]	; (8000b1c <SystemClock_Config+0x168>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a43      	ldr	r2, [pc, #268]	; (8000b1c <SystemClock_Config+0x168>)
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <SystemClock_Config+0x168>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a26:	bf00      	nop
 8000a28:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <SystemClock_Config+0x168>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	d1f8      	bne.n	8000a28 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a56:	2318      	movs	r3, #24
 8000a58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f9bd 	bl	8002e04 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000a90:	f000 f848 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	233f      	movs	r3, #63	; 0x3f
 8000a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fd52 	bl	8003574 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000ad6:	f000 f825 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <SystemClock_Config+0x16c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 f898 	bl	8003c30 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8000b06:	f000 f80d 	bl	8000b24 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b0a:	f002 f96b 	bl	8002de4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b0e:	bf00      	nop
 8000b10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58000400 	.word	0x58000400
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	00040002 	.word	0x00040002

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <uart_hal_rx_buffer_init>:

/*링버퍼수신변수 선언 및 초기화*/
uart_hal_rx_type uart_hal_rx;

void uart_hal_rx_buffer_init()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	uart_hal_rx.input_p = 0;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <uart_hal_rx_buffer_init+0x20>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	uart_hal_rx.output_p = 0;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <uart_hal_rx_buffer_init+0x20>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	24000194 	.word	0x24000194

08000b58 <packet_Receive>:
/* Ring buffer CODE END */



void packet_Receive()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
if(uartHandle->Instance == USART3)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <packet_Receive+0x54>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <packet_Receive+0x58>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d11e      	bne.n	8000ba6 <packet_Receive+0x4e>
    {
	    uart_hal_rx.buffer[uart_hal_rx.input_p ++] = uart_hal_rx.temp;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <packet_Receive+0x5c>)
 8000b6a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	b291      	uxth	r1, r2
 8000b74:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <packet_Receive+0x5c>)
 8000b76:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <packet_Receive+0x5c>)
 8000b7e:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <packet_Receive+0x5c>)
 8000b84:	5499      	strb	r1, [r3, r2]

	    if (uart_hal_rx.input_p >= 1024)
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <packet_Receive+0x5c>)
 8000b88:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b92:	d303      	bcc.n	8000b9c <packet_Receive+0x44>
	    {
	    	uart_hal_rx.input_p = 0;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <packet_Receive+0x5c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	    }
	    HAL_UART_Receive_IT(&huart3, &uart_hal_rx.temp, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4906      	ldr	r1, [pc, #24]	; (8000bb8 <packet_Receive+0x60>)
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <packet_Receive+0x64>)
 8000ba2:	f005 fbc3 	bl	800632c <HAL_UART_Receive_IT>
    }
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	24000190 	.word	0x24000190
 8000bb0:	40004800 	.word	0x40004800
 8000bb4:	24000194 	.word	0x24000194
 8000bb8:	24000594 	.word	0x24000594
 8000bbc:	240006bc 	.word	0x240006bc

08000bc0 <serial_Init>:


void serial_Init()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &uart_hal_rx.temp, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4903      	ldr	r1, [pc, #12]	; (8000bd4 <serial_Init+0x14>)
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <serial_Init+0x18>)
 8000bca:	f005 fbaf 	bl	800632c <HAL_UART_Receive_IT>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	24000594 	.word	0x24000594
 8000bd8:	240006bc 	.word	0x240006bc

08000bdc <uart_hal_rx_monitor>:

void uart_hal_rx_monitor()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	while (uart_hal_getchar() != 0)
 8000be0:	bf00      	nop
 8000be2:	f000 f805 	bl	8000bf0 <uart_hal_getchar>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d1fa      	bne.n	8000be2 <uart_hal_rx_monitor+0x6>
		if(uart_hal_rx.rxd == 'sth')
		{
			//여기에 rxd값이 sth일때 처리하는 것을 작성.
		}
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <uart_hal_getchar>:

uint8_t uart_hal_getchar()
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	if(uart_hal_rx.input_p == uart_hal_rx.output_p)
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000bf6:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000bfe:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d101      	bne.n	8000c0c <uart_hal_getchar+0x1c>
	{
		return 0; //모니터링을 하지 않게 한다.
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e01a      	b.n	8000c42 <uart_hal_getchar+0x52>
	}

	uart_hal_rx.rxd = uart_hal_rx.buffer[uart_hal_rx.output_p++];
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000c0e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	b291      	uxth	r1, r2
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000c1a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000c22:	5c9a      	ldrb	r2, [r3, r2]
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000c26:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	if(uart_hal_rx.output_p >= 1024)
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000c2c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c36:	d303      	bcc.n	8000c40 <uart_hal_getchar+0x50>
	{
		uart_hal_rx.output_p = 0;
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <uart_hal_getchar+0x5c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	}

	return 1; //모니터링을 하게 한다.
 8000c40:	2301      	movs	r3, #1
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	24000194 	.word	0x24000194

08000c50 <servo_update>:
	servo[_servo_num].delta = 0;
	servo[_servo_num].run = 0;
}

void servo_update()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
	int pulse = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]

	for (i = 0; i < 3; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
 8000c62:	e0d2      	b.n	8000e0a <servo_update+0x1ba>
	{
		if (servo[i].run == 1 && servo[i].delta != 0)
 8000c64:	4a6d      	ldr	r2, [pc, #436]	; (8000e1c <servo_update+0x1cc>)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	2134      	movs	r1, #52	; 0x34
 8000c6a:	fb01 f303 	mul.w	r3, r1, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	332c      	adds	r3, #44	; 0x2c
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	f040 80b3 	bne.w	8000de0 <servo_update+0x190>
 8000c7a:	4a68      	ldr	r2, [pc, #416]	; (8000e1c <servo_update+0x1cc>)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2134      	movs	r1, #52	; 0x34
 8000c80:	fb01 f303 	mul.w	r3, r1, r3
 8000c84:	4413      	add	r3, r2
 8000c86:	3324      	adds	r3, #36	; 0x24
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 80a8 	beq.w	8000de0 <servo_update+0x190>
		{
			servo_speed_update(i);
 8000c90:	6838      	ldr	r0, [r7, #0]
 8000c92:	f000 f8c7 	bl	8000e24 <servo_speed_update>

			if (servo[i].delta > servo[i].cur_speed)
 8000c96:	4a61      	ldr	r2, [pc, #388]	; (8000e1c <servo_update+0x1cc>)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	2134      	movs	r1, #52	; 0x34
 8000c9c:	fb01 f303 	mul.w	r3, r1, r3
 8000ca0:	4413      	add	r3, r2
 8000ca2:	3324      	adds	r3, #36	; 0x24
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	495d      	ldr	r1, [pc, #372]	; (8000e1c <servo_update+0x1cc>)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2034      	movs	r0, #52	; 0x34
 8000cac:	fb00 f303 	mul.w	r3, r0, r3
 8000cb0:	440b      	add	r3, r1
 8000cb2:	3308      	adds	r3, #8
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	dd13      	ble.n	8000ce2 <servo_update+0x92>
			{
				pulse = servo[i].cur_speed * servo[i].direction;
 8000cba:	4a58      	ldr	r2, [pc, #352]	; (8000e1c <servo_update+0x1cc>)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2134      	movs	r1, #52	; 0x34
 8000cc0:	fb01 f303 	mul.w	r3, r1, r3
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4954      	ldr	r1, [pc, #336]	; (8000e1c <servo_update+0x1cc>)
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	2034      	movs	r0, #52	; 0x34
 8000cd0:	fb00 f202 	mul.w	r2, r0, r2
 8000cd4:	440a      	add	r2, r1
 8000cd6:	3228      	adds	r2, #40	; 0x28
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	e012      	b.n	8000d08 <servo_update+0xb8>
			}
			else
			{
				pulse = servo[i].delta * servo[i].direction;
 8000ce2:	4a4e      	ldr	r2, [pc, #312]	; (8000e1c <servo_update+0x1cc>)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2134      	movs	r1, #52	; 0x34
 8000ce8:	fb01 f303 	mul.w	r3, r1, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	3324      	adds	r3, #36	; 0x24
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	494a      	ldr	r1, [pc, #296]	; (8000e1c <servo_update+0x1cc>)
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	2034      	movs	r0, #52	; 0x34
 8000cf8:	fb00 f202 	mul.w	r2, r0, r2
 8000cfc:	440a      	add	r2, r1
 8000cfe:	3228      	adds	r2, #40	; 0x28
 8000d00:	6812      	ldr	r2, [r2, #0]
 8000d02:	fb02 f303 	mul.w	r3, r2, r3
 8000d06:	607b      	str	r3, [r7, #4]
			}

			servo[i].cur_angle += pulse;
 8000d08:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <servo_update+0x1cc>)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	2134      	movs	r1, #52	; 0x34
 8000d0e:	fb01 f303 	mul.w	r3, r1, r3
 8000d12:	4413      	add	r3, r2
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	441a      	add	r2, r3
 8000d1a:	4940      	ldr	r1, [pc, #256]	; (8000e1c <servo_update+0x1cc>)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	2034      	movs	r0, #52	; 0x34
 8000d20:	fb00 f303 	mul.w	r3, r0, r3
 8000d24:	440b      	add	r3, r1
 8000d26:	601a      	str	r2, [r3, #0]

			switch(i)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d010      	beq.n	8000d50 <servo_update+0x100>
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d01b      	beq.n	8000d6a <servo_update+0x11a>
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d126      	bne.n	8000d84 <servo_update+0x134>
			{
			case 0:
				tim_reg->CCR1 = PULSE_L + servo[i].cur_angle;
 8000d36:	4a39      	ldr	r2, [pc, #228]	; (8000e1c <servo_update+0x1cc>)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2134      	movs	r1, #52	; 0x34
 8000d3c:	fb01 f303 	mul.w	r3, r1, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <servo_update+0x1d0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000d4e:	e019      	b.n	8000d84 <servo_update+0x134>
			case 1:
				tim_reg->CCR2 = PULSE_L + servo[i].cur_angle;
 8000d50:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <servo_update+0x1cc>)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	2134      	movs	r1, #52	; 0x34
 8000d56:	fb01 f303 	mul.w	r3, r1, r3
 8000d5a:	4413      	add	r3, r2
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d62:	4b2f      	ldr	r3, [pc, #188]	; (8000e20 <servo_update+0x1d0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000d68:	e00c      	b.n	8000d84 <servo_update+0x134>
			case 2:
				tim_reg->CCR3 = PULSE_L + servo[i].cur_angle;
 8000d6a:	4a2c      	ldr	r2, [pc, #176]	; (8000e1c <servo_update+0x1cc>)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	2134      	movs	r1, #52	; 0x34
 8000d70:	fb01 f303 	mul.w	r3, r1, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <servo_update+0x1d0>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000d82:	bf00      	nop
			}

			servo[i].delta -= pulse * servo[i].direction;
 8000d84:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <servo_update+0x1cc>)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2134      	movs	r1, #52	; 0x34
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	3324      	adds	r3, #36	; 0x24
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4921      	ldr	r1, [pc, #132]	; (8000e1c <servo_update+0x1cc>)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2034      	movs	r0, #52	; 0x34
 8000d9a:	fb00 f303 	mul.w	r3, r0, r3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3328      	adds	r3, #40	; 0x28
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	fb01 f303 	mul.w	r3, r1, r3
 8000daa:	1ad2      	subs	r2, r2, r3
 8000dac:	491b      	ldr	r1, [pc, #108]	; (8000e1c <servo_update+0x1cc>)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2034      	movs	r0, #52	; 0x34
 8000db2:	fb00 f303 	mul.w	r3, r0, r3
 8000db6:	440b      	add	r3, r1
 8000db8:	3324      	adds	r3, #36	; 0x24
 8000dba:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps += 1;
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <servo_update+0x1cc>)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2134      	movs	r1, #52	; 0x34
 8000dc2:	fb01 f303 	mul.w	r3, r1, r3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	331c      	adds	r3, #28
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	4913      	ldr	r1, [pc, #76]	; (8000e1c <servo_update+0x1cc>)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	2034      	movs	r0, #52	; 0x34
 8000dd4:	fb00 f303 	mul.w	r3, r0, r3
 8000dd8:	440b      	add	r3, r1
 8000dda:	331c      	adds	r3, #28
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e011      	b.n	8000e04 <servo_update+0x1b4>
		}
		else
		{
			servo[i].run = 0;
 8000de0:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <servo_update+0x1cc>)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2134      	movs	r1, #52	; 0x34
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	332c      	adds	r3, #44	; 0x2c
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps = 0;
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <servo_update+0x1cc>)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2134      	movs	r1, #52	; 0x34
 8000df8:	fb01 f303 	mul.w	r3, r1, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	331c      	adds	r3, #28
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	3301      	adds	r3, #1
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	f77f af29 	ble.w	8000c64 <servo_update+0x14>
		}
	}
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	240005a0 	.word	0x240005a0
 8000e20:	2400059c 	.word	0x2400059c

08000e24 <servo_speed_update>:

void servo_speed_update(int _servo_num)
{
 8000e24:	b490      	push	{r4, r7}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	int i = _servo_num;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60fb      	str	r3, [r7, #12]

	if ((servo[i].cur_steps > servo[i].acc_steps - 1) && (servo[i].cur_steps <= servo[i].acc_steps + servo[i].fixed_speed_steps - 1))
 8000e30:	4a6c      	ldr	r2, [pc, #432]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2134      	movs	r1, #52	; 0x34
 8000e36:	fb01 f303 	mul.w	r3, r1, r3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	331c      	adds	r3, #28
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4968      	ldr	r1, [pc, #416]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2034      	movs	r0, #52	; 0x34
 8000e46:	fb00 f303 	mul.w	r3, r0, r3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3314      	adds	r3, #20
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dd2c      	ble.n	8000eb0 <servo_speed_update+0x8c>
 8000e56:	4a63      	ldr	r2, [pc, #396]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2134      	movs	r1, #52	; 0x34
 8000e5c:	fb01 f303 	mul.w	r3, r1, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	331c      	adds	r3, #28
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	495f      	ldr	r1, [pc, #380]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2034      	movs	r0, #52	; 0x34
 8000e6c:	fb00 f303 	mul.w	r3, r0, r3
 8000e70:	440b      	add	r3, r1
 8000e72:	3314      	adds	r3, #20
 8000e74:	6819      	ldr	r1, [r3, #0]
 8000e76:	485b      	ldr	r0, [pc, #364]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2434      	movs	r4, #52	; 0x34
 8000e7c:	fb04 f303 	mul.w	r3, r4, r3
 8000e80:	4403      	add	r3, r0
 8000e82:	3318      	adds	r3, #24
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	440b      	add	r3, r1
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	dc10      	bgt.n	8000eb0 <servo_speed_update+0x8c>
	{
		servo[i].cur_speed = servo[i].dst_speed;
 8000e8e:	4a55      	ldr	r2, [pc, #340]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2134      	movs	r1, #52	; 0x34
 8000e94:	fb01 f303 	mul.w	r3, r1, r3
 8000e98:	4413      	add	r3, r2
 8000e9a:	330c      	adds	r3, #12
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4951      	ldr	r1, [pc, #324]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2034      	movs	r0, #52	; 0x34
 8000ea4:	fb00 f303 	mul.w	r3, r0, r3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3308      	adds	r3, #8
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	e093      	b.n	8000fd8 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > 0) && (servo[i].cur_steps <= servo[i].acc_steps - 1))
 8000eb0:	4a4c      	ldr	r2, [pc, #304]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2134      	movs	r1, #52	; 0x34
 8000eb6:	fb01 f303 	mul.w	r3, r1, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	331c      	adds	r3, #28
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dd2c      	ble.n	8000f1e <servo_speed_update+0xfa>
 8000ec4:	4a47      	ldr	r2, [pc, #284]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2134      	movs	r1, #52	; 0x34
 8000eca:	fb01 f303 	mul.w	r3, r1, r3
 8000ece:	4413      	add	r3, r2
 8000ed0:	331c      	adds	r3, #28
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4943      	ldr	r1, [pc, #268]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	2034      	movs	r0, #52	; 0x34
 8000eda:	fb00 f303 	mul.w	r3, r0, r3
 8000ede:	440b      	add	r3, r1
 8000ee0:	3314      	adds	r3, #20
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dc19      	bgt.n	8000f1e <servo_speed_update+0xfa>
	{
		servo[i].cur_speed += servo[i].acc;
 8000eea:	4a3e      	ldr	r2, [pc, #248]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2134      	movs	r1, #52	; 0x34
 8000ef0:	fb01 f303 	mul.w	r3, r1, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	493a      	ldr	r1, [pc, #232]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2034      	movs	r0, #52	; 0x34
 8000f00:	fb00 f303 	mul.w	r3, r0, r3
 8000f04:	440b      	add	r3, r1
 8000f06:	3320      	adds	r3, #32
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	4935      	ldr	r1, [pc, #212]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	2034      	movs	r0, #52	; 0x34
 8000f12:	fb00 f303 	mul.w	r3, r0, r3
 8000f16:	440b      	add	r3, r1
 8000f18:	3308      	adds	r3, #8
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	e05c      	b.n	8000fd8 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > servo[i].acc_steps + servo[i].fixed_speed_steps - 1) && (servo[i].cur_steps <= servo[i].total_steps - 1))
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2134      	movs	r1, #52	; 0x34
 8000f24:	fb01 f303 	mul.w	r3, r1, r3
 8000f28:	4413      	add	r3, r2
 8000f2a:	331c      	adds	r3, #28
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	492d      	ldr	r1, [pc, #180]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2034      	movs	r0, #52	; 0x34
 8000f34:	fb00 f303 	mul.w	r3, r0, r3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3314      	adds	r3, #20
 8000f3c:	6819      	ldr	r1, [r3, #0]
 8000f3e:	4829      	ldr	r0, [pc, #164]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2434      	movs	r4, #52	; 0x34
 8000f44:	fb04 f303 	mul.w	r3, r4, r3
 8000f48:	4403      	add	r3, r0
 8000f4a:	3318      	adds	r3, #24
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	440b      	add	r3, r1
 8000f50:	3b01      	subs	r3, #1
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dd2c      	ble.n	8000fb0 <servo_speed_update+0x18c>
 8000f56:	4a23      	ldr	r2, [pc, #140]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2134      	movs	r1, #52	; 0x34
 8000f5c:	fb01 f303 	mul.w	r3, r1, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	331c      	adds	r3, #28
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	491f      	ldr	r1, [pc, #124]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2034      	movs	r0, #52	; 0x34
 8000f6c:	fb00 f303 	mul.w	r3, r0, r3
 8000f70:	440b      	add	r3, r1
 8000f72:	3310      	adds	r3, #16
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dc19      	bgt.n	8000fb0 <servo_speed_update+0x18c>
	{
		servo[i].cur_speed -= servo[i].acc;
 8000f7c:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2134      	movs	r1, #52	; 0x34
 8000f82:	fb01 f303 	mul.w	r3, r1, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	3308      	adds	r3, #8
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4915      	ldr	r1, [pc, #84]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2034      	movs	r0, #52	; 0x34
 8000f92:	fb00 f303 	mul.w	r3, r0, r3
 8000f96:	440b      	add	r3, r1
 8000f98:	3320      	adds	r3, #32
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	1ad2      	subs	r2, r2, r3
 8000f9e:	4911      	ldr	r1, [pc, #68]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2034      	movs	r0, #52	; 0x34
 8000fa4:	fb00 f303 	mul.w	r3, r0, r3
 8000fa8:	440b      	add	r3, r1
 8000faa:	3308      	adds	r3, #8
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	e013      	b.n	8000fd8 <servo_speed_update+0x1b4>
	}
	else if (servo[i].cur_steps == 0)
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2134      	movs	r1, #52	; 0x34
 8000fb6:	fb01 f303 	mul.w	r3, r1, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	331c      	adds	r3, #28
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d109      	bne.n	8000fd8 <servo_speed_update+0x1b4>
	{
		servo[i].cur_speed = BASE_SPEED;
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <servo_speed_update+0x1c0>)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2134      	movs	r1, #52	; 0x34
 8000fca:	fb01 f303 	mul.w	r3, r1, r3
 8000fce:	4413      	add	r3, r2
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	2205      	movs	r2, #5
 8000fd4:	601a      	str	r2, [r3, #0]
	}
}
 8000fd6:	e7ff      	b.n	8000fd8 <servo_speed_update+0x1b4>
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc90      	pop	{r4, r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	240005a0 	.word	0x240005a0

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_MspInit+0x30>)
 8000ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x30>)
 8000ff6:	f043 0302 	orr.w	r3, r3, #2
 8000ffa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x30>)
 8001000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	58024400 	.word	0x58024400

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001070:	f000 fc50 	bl	8001914 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM3_IRQHandler+0x10>)
 800107e:	f004 f955 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2400067c 	.word	0x2400067c

0800108c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM4_IRQHandler+0x10>)
 8001092:	f004 f94b 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2400063c 	.word	0x2400063c

080010a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <USART3_IRQHandler+0x10>)
 80010a6:	f005 fa19 	bl	80064dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	240006bc 	.word	0x240006bc

080010b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <SystemInit+0xac>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a28      	ldr	r2, [pc, #160]	; (8001160 <SystemInit+0xac>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <SystemInit+0xb0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a25      	ldr	r2, [pc, #148]	; (8001164 <SystemInit+0xb0>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <SystemInit+0xb0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <SystemInit+0xb0>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4921      	ldr	r1, [pc, #132]	; (8001164 <SystemInit+0xb0>)
 80010e0:	4b21      	ldr	r3, [pc, #132]	; (8001168 <SystemInit+0xb4>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SystemInit+0xb0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <SystemInit+0xb0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <SystemInit+0xb0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <SystemInit+0xb0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80010fe:	4b19      	ldr	r3, [pc, #100]	; (8001164 <SystemInit+0xb0>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <SystemInit+0xb0>)
 8001106:	2200      	movs	r2, #0
 8001108:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <SystemInit+0xb0>)
 800110c:	2200      	movs	r2, #0
 800110e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <SystemInit+0xb0>)
 8001112:	2200      	movs	r2, #0
 8001114:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <SystemInit+0xb0>)
 8001118:	2200      	movs	r2, #0
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <SystemInit+0xb0>)
 800111e:	2200      	movs	r2, #0
 8001120:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <SystemInit+0xb0>)
 8001124:	2200      	movs	r2, #0
 8001126:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <SystemInit+0xb0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a0d      	ldr	r2, [pc, #52]	; (8001164 <SystemInit+0xb0>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001132:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <SystemInit+0xb0>)
 8001136:	2200      	movs	r2, #0
 8001138:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <SystemInit+0xb8>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <SystemInit+0xbc>)
 8001140:	4013      	ands	r3, r2
 8001142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001146:	d202      	bcs.n	800114e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <SystemInit+0xc0>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <SystemInit+0xac>)
 8001150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001154:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	58024400 	.word	0x58024400
 8001168:	eaf6ed7f 	.word	0xeaf6ed7f
 800116c:	5c001000 	.word	0x5c001000
 8001170:	ffff0000 	.word	0xffff0000
 8001174:	51008108 	.word	0x51008108

08001178 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08e      	sub	sp, #56	; 0x38
 800117c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	463b      	mov	r3, r7
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
 80011a6:	615a      	str	r2, [r3, #20]
 80011a8:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80011aa:	4b38      	ldr	r3, [pc, #224]	; (800128c <MX_TIM3_Init+0x114>)
 80011ac:	4a38      	ldr	r2, [pc, #224]	; (8001290 <MX_TIM3_Init+0x118>)
 80011ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80011b0:	4b36      	ldr	r3, [pc, #216]	; (800128c <MX_TIM3_Init+0x114>)
 80011b2:	225f      	movs	r2, #95	; 0x5f
 80011b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b6:	4b35      	ldr	r3, [pc, #212]	; (800128c <MX_TIM3_Init+0x114>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <MX_TIM3_Init+0x114>)
 80011be:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80011c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <MX_TIM3_Init+0x114>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <MX_TIM3_Init+0x114>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011d0:	482e      	ldr	r0, [pc, #184]	; (800128c <MX_TIM3_Init+0x114>)
 80011d2:	f004 f84b 	bl	800526c <HAL_TIM_Base_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011dc:	f7ff fca2 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4827      	ldr	r0, [pc, #156]	; (800128c <MX_TIM3_Init+0x114>)
 80011ee:	f004 fad5 	bl	800579c <HAL_TIM_ConfigClockSource>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80011f8:	f7ff fc94 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011fc:	4823      	ldr	r0, [pc, #140]	; (800128c <MX_TIM3_Init+0x114>)
 80011fe:	f004 f860 	bl	80052c2 <HAL_TIM_PWM_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001208:	f7ff fc8c 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	481c      	ldr	r0, [pc, #112]	; (800128c <MX_TIM3_Init+0x114>)
 800121c:	f004 ffbc 	bl	8006198 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001226:	f7ff fc7d 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	4619      	mov	r1, r3
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <MX_TIM3_Init+0x114>)
 8001242:	f004 f993 	bl	800556c <HAL_TIM_PWM_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800124c:	f7ff fc6a 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2204      	movs	r2, #4
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_TIM3_Init+0x114>)
 8001258:	f004 f988 	bl	800556c <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001262:	f7ff fc5f 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001266:	463b      	mov	r3, r7
 8001268:	2208      	movs	r2, #8
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	; (800128c <MX_TIM3_Init+0x114>)
 800126e:	f004 f97d 	bl	800556c <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001278:	f7ff fc54 	bl	8000b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <MX_TIM3_Init+0x114>)
 800127e:	f000 f8c7 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3738      	adds	r7, #56	; 0x38
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2400067c 	.word	0x2400067c
 8001290:	40000400 	.word	0x40000400

08001294 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08e      	sub	sp, #56	; 0x38
 8001298:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b4:	463b      	mov	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]
 80012c2:	615a      	str	r2, [r3, #20]
 80012c4:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <MX_TIM4_Init+0xe4>)
 80012c8:	4a2c      	ldr	r2, [pc, #176]	; (800137c <MX_TIM4_Init+0xe8>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012cc:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <MX_TIM4_Init+0xe4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <MX_TIM4_Init+0xe4>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <MX_TIM4_Init+0xe4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012de:	4b26      	ldr	r3, [pc, #152]	; (8001378 <MX_TIM4_Init+0xe4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <MX_TIM4_Init+0xe4>)
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012ea:	4823      	ldr	r0, [pc, #140]	; (8001378 <MX_TIM4_Init+0xe4>)
 80012ec:	f003 ffbe 	bl	800526c <HAL_TIM_Base_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80012f6:	f7ff fc15 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001304:	4619      	mov	r1, r3
 8001306:	481c      	ldr	r0, [pc, #112]	; (8001378 <MX_TIM4_Init+0xe4>)
 8001308:	f004 fa48 	bl	800579c <HAL_TIM_ConfigClockSource>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001312:	f7ff fc07 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <MX_TIM4_Init+0xe4>)
 8001318:	f003 ffd3 	bl	80052c2 <HAL_TIM_PWM_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001322:	f7ff fbff 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4810      	ldr	r0, [pc, #64]	; (8001378 <MX_TIM4_Init+0xe4>)
 8001336:	f004 ff2f 	bl	8006198 <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001340:	f7ff fbf0 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001344:	2360      	movs	r3, #96	; 0x60
 8001346:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	; (8001378 <MX_TIM4_Init+0xe4>)
 800135c:	f004 f906 	bl	800556c <HAL_TIM_PWM_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001366:	f7ff fbdd 	bl	8000b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800136a:	4803      	ldr	r0, [pc, #12]	; (8001378 <MX_TIM4_Init+0xe4>)
 800136c:	f000 f850 	bl	8001410 <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3738      	adds	r7, #56	; 0x38
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2400063c 	.word	0x2400063c
 800137c:	40000800 	.word	0x40000800

08001380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_TIM_Base_MspInit+0x84>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d117      	bne.n	80013c2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	4b1d      	ldr	r3, [pc, #116]	; (8001408 <HAL_TIM_Base_MspInit+0x88>)
 8001394:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <HAL_TIM_Base_MspInit+0x88>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_TIM_Base_MspInit+0x88>)
 80013a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	201d      	movs	r0, #29
 80013b6:	f000 fbea 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ba:	201d      	movs	r0, #29
 80013bc:	f000 fc01 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80013c0:	e01b      	b.n	80013fa <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_TIM_Base_MspInit+0x8c>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d116      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <HAL_TIM_Base_MspInit+0x88>)
 80013ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013d2:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_TIM_Base_MspInit+0x88>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_TIM_Base_MspInit+0x88>)
 80013de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201e      	movs	r0, #30
 80013f0:	f000 fbcd 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013f4:	201e      	movs	r0, #30
 80013f6:	f000 fbe4 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40000400 	.word	0x40000400
 8001408:	58024400 	.word	0x58024400
 800140c:	40000800 	.word	0x40000800

08001410 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08c      	sub	sp, #48	; 0x30
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 031c 	add.w	r3, r7, #28
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a44      	ldr	r2, [pc, #272]	; (8001540 <HAL_TIM_MspPostInit+0x130>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d15d      	bne.n	80014ee <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	4a42      	ldr	r2, [pc, #264]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001442:	4b40      	ldr	r3, [pc, #256]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
 800144e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001450:	4b3c      	ldr	r3, [pc, #240]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	4a3b      	ldr	r2, [pc, #236]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001460:	4b38      	ldr	r3, [pc, #224]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	4a33      	ldr	r2, [pc, #204]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800148c:	2340      	movs	r3, #64	; 0x40
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800149c:	2302      	movs	r3, #2
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4828      	ldr	r0, [pc, #160]	; (8001548 <HAL_TIM_MspPostInit+0x138>)
 80014a8:	f001 f952 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014bc:	2302      	movs	r3, #2
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4821      	ldr	r0, [pc, #132]	; (800154c <HAL_TIM_MspPostInit+0x13c>)
 80014c8:	f001 f942 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014dc:	2302      	movs	r3, #2
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	481a      	ldr	r0, [pc, #104]	; (8001550 <HAL_TIM_MspPostInit+0x140>)
 80014e8:	f001 f932 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014ec:	e024      	b.n	8001538 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_TIM_MspPostInit+0x144>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d11f      	bne.n	8001538 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	4a11      	ldr	r2, [pc, #68]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_TIM_MspPostInit+0x134>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001528:	2302      	movs	r3, #2
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4809      	ldr	r0, [pc, #36]	; (8001558 <HAL_TIM_MspPostInit+0x148>)
 8001534:	f001 f90c 	bl	8002750 <HAL_GPIO_Init>
}
 8001538:	bf00      	nop
 800153a:	3730      	adds	r7, #48	; 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40000400 	.word	0x40000400
 8001544:	58024400 	.word	0x58024400
 8001548:	58020000 	.word	0x58020000
 800154c:	58020400 	.word	0x58020400
 8001550:	58020800 	.word	0x58020800
 8001554:	40000800 	.word	0x40000800
 8001558:	58020c00 	.word	0x58020c00

0800155c <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d101      	bne.n	8001574 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		servo_update();
 8001570:	f7ff fb6e 	bl	8000c50 <servo_update>
	}
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2400067c 	.word	0x2400067c

08001580 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001584:	4b22      	ldr	r3, [pc, #136]	; (8001610 <MX_USART3_UART_Init+0x90>)
 8001586:	4a23      	ldr	r2, [pc, #140]	; (8001614 <MX_USART3_UART_Init+0x94>)
 8001588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <MX_USART3_UART_Init+0x90>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_USART3_UART_Init+0x90>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_USART3_UART_Init+0x90>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b16      	ldr	r3, [pc, #88]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015ca:	f004 fe5f 	bl	800628c <HAL_UART_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80015d4:	f7ff faa6 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d8:	2100      	movs	r1, #0
 80015da:	480d      	ldr	r0, [pc, #52]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015dc:	f007 fe59 	bl	8009292 <HAL_UARTEx_SetTxFifoThreshold>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80015e6:	f7ff fa9d 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ea:	2100      	movs	r1, #0
 80015ec:	4808      	ldr	r0, [pc, #32]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015ee:	f007 fe8e 	bl	800930e <HAL_UARTEx_SetRxFifoThreshold>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80015f8:	f7ff fa94 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015fc:	4804      	ldr	r0, [pc, #16]	; (8001610 <MX_USART3_UART_Init+0x90>)
 80015fe:	f007 fe0f 	bl	8009220 <HAL_UARTEx_DisableFifoMode>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001608:	f7ff fa8c 	bl	8000b24 <Error_Handler>
  }

}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	240006bc 	.word	0x240006bc
 8001614:	40004800 	.word	0x40004800

08001618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_UART_MspInit+0x98>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d136      	bne.n	80016a8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <HAL_UART_MspInit+0x9c>)
 800163c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001640:	4a1c      	ldr	r2, [pc, #112]	; (80016b4 <HAL_UART_MspInit+0x9c>)
 8001642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_UART_MspInit+0x9c>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_UART_MspInit+0x9c>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <HAL_UART_MspInit+0x9c>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_UART_MspInit+0x9c>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001676:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167c:	2302      	movs	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001688:	2307      	movs	r3, #7
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <HAL_UART_MspInit+0xa0>)
 8001694:	f001 f85c 	bl	8002750 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2027      	movs	r0, #39	; 0x27
 800169e:	f000 fa76 	bl	8001b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016a2:	2027      	movs	r0, #39	; 0x27
 80016a4:	f000 fa8d 	bl	8001bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40004800 	.word	0x40004800
 80016b4:	58024400 	.word	0x58024400
 80016b8:	58020c00 	.word	0x58020c00

080016bc <HAL_UART_RxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* uartHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    /*링버퍼패킷처리*/
	packet_Receive();
 80016c4:	f7ff fa48 	bl	8000b58 <packet_Receive>

}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80016d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80016da:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016dc:	2209      	movs	r2, #9
 80016de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016ee:	2202      	movs	r2, #2
 80016f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001706:	2201      	movs	r2, #1
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800170c:	2201      	movs	r2, #1
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001712:	2200      	movs	r2, #0
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001718:	f001 f9e3 	bl	8002ae2 <HAL_PCD_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001722:	f7ff f9ff 	bl	8000b24 <Error_Handler>
  }

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24000748 	.word	0x24000748
 8001730:	40080000 	.word	0x40080000

08001734 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <HAL_PCD_MspInit+0xa4>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d13b      	bne.n	80017ce <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b21      	ldr	r3, [pc, #132]	; (80017dc <HAL_PCD_MspInit+0xa8>)
 8001758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <HAL_PCD_MspInit+0xa8>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <HAL_PCD_MspInit+0xa8>)
 8001768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001774:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001786:	230a      	movs	r3, #10
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <HAL_PCD_MspInit+0xac>)
 8001792:	f000 ffdd 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	480d      	ldr	r0, [pc, #52]	; (80017e0 <HAL_PCD_MspInit+0xac>)
 80017ac:	f000 ffd0 	bl	8002750 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_PCD_MspInit+0xa8>)
 80017b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017b6:	4a09      	ldr	r2, [pc, #36]	; (80017dc <HAL_PCD_MspInit+0xa8>)
 80017b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_PCD_MspInit+0xa8>)
 80017c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017ce:	bf00      	nop
 80017d0:	3728      	adds	r7, #40	; 0x28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40080000 	.word	0x40080000
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58020000 	.word	0x58020000

080017e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800181c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ea:	e003      	b.n	80017f4 <LoopCopyDataInit>

080017ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017f2:	3104      	adds	r1, #4

080017f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017f4:	480b      	ldr	r0, [pc, #44]	; (8001824 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017fc:	d3f6      	bcc.n	80017ec <CopyDataInit>
  ldr  r2, =_sbss
 80017fe:	4a0b      	ldr	r2, [pc, #44]	; (800182c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001800:	e002      	b.n	8001808 <LoopFillZerobss>

08001802 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001802:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001804:	f842 3b04 	str.w	r3, [r2], #4

08001808 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800180a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800180c:	d3f9      	bcc.n	8001802 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800180e:	f7ff fc51 	bl	80010b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001812:	f008 f8db 	bl	80099cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001816:	f7ff f8b3 	bl	8000980 <main>
  bx  lr    
 800181a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001820:	08009a6c 	.word	0x08009a6c
  ldr  r0, =_sdata
 8001824:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001828:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 800182c:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001830:	24000b54 	.word	0x24000b54

08001834 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC3_IRQHandler>
	...

08001838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f99b 	bl	8001b78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001842:	f002 f83b 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8001846:	4601      	mov	r1, r0
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_Init+0x60>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <HAL_Init+0x64>)
 8001854:	5cd3      	ldrb	r3, [r2, r3]
 8001856:	f003 031f 	and.w	r3, r3, #31
 800185a:	fa21 f303 	lsr.w	r3, r1, r3
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <HAL_Init+0x68>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001862:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_Init+0x68>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_Init+0x60>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	490b      	ldr	r1, [pc, #44]	; (800189c <HAL_Init+0x64>)
 8001870:	5ccb      	ldrb	r3, [r1, r3]
 8001872:	f003 031f 	and.w	r3, r3, #31
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_Init+0x6c>)
 800187c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f812 	bl	80018a8 <HAL_InitTick>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e002      	b.n	8001894 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800188e:	f7ff fbab 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}
 8001898:	58024400 	.word	0x58024400
 800189c:	08009a4c 	.word	0x08009a4c
 80018a0:	24000000 	.word	0x24000000
 80018a4:	24000004 	.word	0x24000004

080018a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_InitTick+0x60>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e021      	b.n	8001900 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018bc:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_InitTick+0x64>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_InitTick+0x60>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 f983 	bl	8001bde <HAL_SYSTICK_Config>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e00e      	b.n	8001900 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d80a      	bhi.n	80018fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f000 f94d 	bl	8001b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018f4:	4a06      	ldr	r2, [pc, #24]	; (8001910 <HAL_InitTick+0x68>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2400000c 	.word	0x2400000c
 800190c:	24000000 	.word	0x24000000
 8001910:	24000008 	.word	0x24000008

08001914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_IncTick+0x20>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x24>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_IncTick+0x24>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	2400000c 	.word	0x2400000c
 8001938:	24000b50 	.word	0x24000b50

0800193c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return uwTick;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <HAL_GetTick+0x14>)
 8001942:	681b      	ldr	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	24000b50 	.word	0x24000b50

08001954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800195c:	f7ff ffee 	bl	800193c <HAL_GetTick>
 8001960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d005      	beq.n	800197a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_Delay+0x40>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	461a      	mov	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800197a:	bf00      	nop
 800197c:	f7ff ffde 	bl	800193c <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8f7      	bhi.n	800197c <HAL_Delay+0x28>
  {
  }
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2400000c 	.word	0x2400000c

08001998 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetREVID+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0c1b      	lsrs	r3, r3, #16
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	5c001000 	.word	0x5c001000

080019b0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019c0:	4904      	ldr	r1, [pc, #16]	; (80019d4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	58000400 	.word	0x58000400

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <__NVIC_SetPriorityGrouping+0x40>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a06:	4a04      	ldr	r2, [pc, #16]	; (8001a18 <__NVIC_SetPriorityGrouping+0x40>)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	60d3      	str	r3, [r2, #12]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00
 8001a1c:	05fa0000 	.word	0x05fa0000

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <__NVIC_EnableIRQ+0x38>)
 8001a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000e100 	.word	0xe000e100

08001a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	6039      	str	r1, [r7, #0]
 8001a82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db0a      	blt.n	8001aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <__NVIC_SetPriority+0x4c>)
 8001a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	b2d2      	uxtb	r2, r2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa0:	e00a      	b.n	8001ab8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4908      	ldr	r1, [pc, #32]	; (8001ac8 <__NVIC_SetPriority+0x50>)
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	3b04      	subs	r3, #4
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	761a      	strb	r2, [r3, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f1c3 0307 	rsb	r3, r3, #7
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	bf28      	it	cs
 8001aea:	2304      	movcs	r3, #4
 8001aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3304      	adds	r3, #4
 8001af2:	2b06      	cmp	r3, #6
 8001af4:	d902      	bls.n	8001afc <NVIC_EncodePriority+0x30>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3b03      	subs	r3, #3
 8001afa:	e000      	b.n	8001afe <NVIC_EncodePriority+0x32>
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43da      	mvns	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	401a      	ands	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b14:	f04f 31ff 	mov.w	r1, #4294967295
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b24:	4313      	orrs	r3, r2
         );
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3724      	adds	r7, #36	; 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b44:	d301      	bcc.n	8001b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00f      	b.n	8001b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <SysTick_Config+0x40>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b52:	210f      	movs	r1, #15
 8001b54:	f04f 30ff 	mov.w	r0, #4294967295
 8001b58:	f7ff ff8e 	bl	8001a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <SysTick_Config+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SysTick_Config+0x40>)
 8001b64:	2207      	movs	r2, #7
 8001b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	e000e010 	.word	0xe000e010

08001b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ff29 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	60b9      	str	r1, [r7, #8]
 8001b98:	607a      	str	r2, [r7, #4]
 8001b9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9c:	f7ff ff40 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001ba0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7ff ff90 	bl	8001acc <NVIC_EncodePriority>
 8001bac:	4602      	mov	r2, r0
 8001bae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff5f 	bl	8001a78 <__NVIC_SetPriority>
}
 8001bba:	bf00      	nop
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff33 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffa4 	bl	8001b34 <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e188      	b.n	8001f1c <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d004      	beq.n	8001c20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2280      	movs	r2, #128	; 0x80
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e17d      	b.n	8001f1c <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a8c      	ldr	r2, [pc, #560]	; (8001e58 <HAL_DMA_Abort_IT+0x260>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d04a      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a8b      	ldr	r2, [pc, #556]	; (8001e5c <HAL_DMA_Abort_IT+0x264>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d045      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a89      	ldr	r2, [pc, #548]	; (8001e60 <HAL_DMA_Abort_IT+0x268>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d040      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a88      	ldr	r2, [pc, #544]	; (8001e64 <HAL_DMA_Abort_IT+0x26c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d03b      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a86      	ldr	r2, [pc, #536]	; (8001e68 <HAL_DMA_Abort_IT+0x270>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d036      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a85      	ldr	r2, [pc, #532]	; (8001e6c <HAL_DMA_Abort_IT+0x274>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d031      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a83      	ldr	r2, [pc, #524]	; (8001e70 <HAL_DMA_Abort_IT+0x278>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d02c      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a82      	ldr	r2, [pc, #520]	; (8001e74 <HAL_DMA_Abort_IT+0x27c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d027      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a80      	ldr	r2, [pc, #512]	; (8001e78 <HAL_DMA_Abort_IT+0x280>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d022      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <HAL_DMA_Abort_IT+0x284>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d01d      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a7d      	ldr	r2, [pc, #500]	; (8001e80 <HAL_DMA_Abort_IT+0x288>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d018      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7c      	ldr	r2, [pc, #496]	; (8001e84 <HAL_DMA_Abort_IT+0x28c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a7a      	ldr	r2, [pc, #488]	; (8001e88 <HAL_DMA_Abort_IT+0x290>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00e      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a79      	ldr	r2, [pc, #484]	; (8001e8c <HAL_DMA_Abort_IT+0x294>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a77      	ldr	r2, [pc, #476]	; (8001e90 <HAL_DMA_Abort_IT+0x298>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d004      	beq.n	8001cc0 <HAL_DMA_Abort_IT+0xc8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a76      	ldr	r2, [pc, #472]	; (8001e94 <HAL_DMA_Abort_IT+0x29c>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_DMA_Abort_IT+0xcc>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_DMA_Abort_IT+0xce>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d065      	beq.n	8001d96 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a60      	ldr	r2, [pc, #384]	; (8001e58 <HAL_DMA_Abort_IT+0x260>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d04a      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <HAL_DMA_Abort_IT+0x264>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d045      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a5d      	ldr	r2, [pc, #372]	; (8001e60 <HAL_DMA_Abort_IT+0x268>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d040      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a5b      	ldr	r2, [pc, #364]	; (8001e64 <HAL_DMA_Abort_IT+0x26c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d03b      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a5a      	ldr	r2, [pc, #360]	; (8001e68 <HAL_DMA_Abort_IT+0x270>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d036      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_DMA_Abort_IT+0x274>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_DMA_Abort_IT+0x278>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d02c      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a55      	ldr	r2, [pc, #340]	; (8001e74 <HAL_DMA_Abort_IT+0x27c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a54      	ldr	r2, [pc, #336]	; (8001e78 <HAL_DMA_Abort_IT+0x280>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a52      	ldr	r2, [pc, #328]	; (8001e7c <HAL_DMA_Abort_IT+0x284>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01d      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a51      	ldr	r2, [pc, #324]	; (8001e80 <HAL_DMA_Abort_IT+0x288>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a4f      	ldr	r2, [pc, #316]	; (8001e84 <HAL_DMA_Abort_IT+0x28c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <HAL_DMA_Abort_IT+0x290>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_DMA_Abort_IT+0x294>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_DMA_Abort_IT+0x298>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Abort_IT+0x17a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a49      	ldr	r2, [pc, #292]	; (8001e94 <HAL_DMA_Abort_IT+0x29c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <HAL_DMA_Abort_IT+0x18c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e0ca      	b.n	8001f1a <HAL_DMA_Abort_IT+0x322>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0201 	bic.w	r2, r2, #1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e0c1      	b.n	8001f1a <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 020e 	bic.w	r2, r2, #14
 8001da4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_DMA_Abort_IT+0x260>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d04a      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a29      	ldr	r2, [pc, #164]	; (8001e5c <HAL_DMA_Abort_IT+0x264>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d045      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_DMA_Abort_IT+0x268>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d040      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_DMA_Abort_IT+0x26c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d03b      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a25      	ldr	r2, [pc, #148]	; (8001e68 <HAL_DMA_Abort_IT+0x270>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d036      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <HAL_DMA_Abort_IT+0x274>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d031      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_DMA_Abort_IT+0x278>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d02c      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_DMA_Abort_IT+0x27c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d027      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_DMA_Abort_IT+0x280>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d022      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_DMA_Abort_IT+0x284>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d01d      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_DMA_Abort_IT+0x288>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d018      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_DMA_Abort_IT+0x28c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_DMA_Abort_IT+0x290>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00e      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_DMA_Abort_IT+0x294>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_DMA_Abort_IT+0x298>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_DMA_Abort_IT+0x24e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_DMA_Abort_IT+0x29c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d128      	bne.n	8001e98 <HAL_DMA_Abort_IT+0x2a0>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e027      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x2b0>
 8001e58:	40020010 	.word	0x40020010
 8001e5c:	40020028 	.word	0x40020028
 8001e60:	40020040 	.word	0x40020040
 8001e64:	40020058 	.word	0x40020058
 8001e68:	40020070 	.word	0x40020070
 8001e6c:	40020088 	.word	0x40020088
 8001e70:	400200a0 	.word	0x400200a0
 8001e74:	400200b8 	.word	0x400200b8
 8001e78:	40020410 	.word	0x40020410
 8001e7c:	40020428 	.word	0x40020428
 8001e80:	40020440 	.word	0x40020440
 8001e84:	40020458 	.word	0x40020458
 8001e88:	40020470 	.word	0x40020470
 8001e8c:	40020488 	.word	0x40020488
 8001e90:	400204a0 	.word	0x400204a0
 8001e94:	400204b8 	.word	0x400204b8
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001ed6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00c      	beq.n	8001efa <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eee:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ef8:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e0c6      	b.n	80020c4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7fe fb9c 	bl	800067c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2223      	movs	r2, #35	; 0x23
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b60      	ldr	r3, [pc, #384]	; (80020cc <HAL_ETH_Init+0x1a8>)
 8001f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f50:	4a5e      	ldr	r2, [pc, #376]	; (80020cc <HAL_ETH_Init+0x1a8>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f5a:	4b5c      	ldr	r3, [pc, #368]	; (80020cc <HAL_ETH_Init+0x1a8>)
 8001f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7a1b      	ldrb	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d103      	bne.n	8001f78 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff fd1d 	bl	80019b0 <HAL_SYSCFG_ETHInterfaceSelect>
 8001f76:	e003      	b.n	8001f80 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f78:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001f7c:	f7ff fd18 	bl	80019b0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f98:	f7ff fcd0 	bl	800193c <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001f9e:	e00f      	b.n	8001fc0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001fa0:	f7ff fccc 	bl	800193c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fae:	d907      	bls.n	8001fc0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2204      	movs	r2, #4
 8001fb4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	22e0      	movs	r2, #224	; 0xe0
 8001fba:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e081      	b.n	80020c4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1e6      	bne.n	8001fa0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fac0 	bl	8002558 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001fd8:	f001 fde2 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <HAL_ETH_Init+0x1ac>)
 8001fe0:	fba3 2302 	umull	r2, r3, r3, r2
 8001fe4:	0c9a      	lsrs	r2, r3, #18
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	3a01      	subs	r2, #1
 8001fec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fa13 	bl	800241c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800200c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002010:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d007      	beq.n	800202e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	22e0      	movs	r2, #224	; 0xe0
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e04a      	b.n	80020c4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	f241 1308 	movw	r3, #4360	; 0x1108
 8002036:	4413      	add	r3, r2
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <HAL_ETH_Init+0x1b0>)
 800203c:	4013      	ands	r3, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6952      	ldr	r2, [r2, #20]
 8002042:	0052      	lsls	r2, r2, #1
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	6809      	ldr	r1, [r1, #0]
 8002048:	431a      	orrs	r2, r3
 800204a:	f241 1308 	movw	r3, #4360	; 0x1108
 800204e:	440b      	add	r3, r1
 8002050:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fad8 	bl	8002608 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fb1c 	bl	8002696 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	3305      	adds	r3, #5
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	021a      	lsls	r2, r3, #8
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	3303      	adds	r3, #3
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	061a      	lsls	r2, r3, #24
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	3302      	adds	r3, #2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	041b      	lsls	r3, r3, #16
 8002090:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800209c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2210      	movs	r2, #16
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2210      	movs	r2, #16
 80020c0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	58024400 	.word	0x58024400
 80020d0:	431bde83 	.word	0x431bde83
 80020d4:	ffff8001 	.word	0xffff8001

080020d8 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80020ea:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80020f2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	7b1b      	ldrb	r3, [r3, #12]
 80020f8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80020fa:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	7b5b      	ldrb	r3, [r3, #13]
 8002100:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002102:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	7b9b      	ldrb	r3, [r3, #14]
 8002108:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800210a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	7bdb      	ldrb	r3, [r3, #15]
 8002110:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002112:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	7c12      	ldrb	r2, [r2, #16]
 8002118:	2a00      	cmp	r2, #0
 800211a:	d102      	bne.n	8002122 <ETH_SetMACConfig+0x4a>
 800211c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002120:	e000      	b.n	8002124 <ETH_SetMACConfig+0x4c>
 8002122:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002124:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	7c52      	ldrb	r2, [r2, #17]
 800212a:	2a00      	cmp	r2, #0
 800212c:	d102      	bne.n	8002134 <ETH_SetMACConfig+0x5c>
 800212e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002132:	e000      	b.n	8002136 <ETH_SetMACConfig+0x5e>
 8002134:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002136:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	7c9b      	ldrb	r3, [r3, #18]
 800213c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800213e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002144:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800214a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	7f1b      	ldrb	r3, [r3, #28]
 8002150:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002152:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	7f5b      	ldrb	r3, [r3, #29]
 8002158:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800215a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	7f92      	ldrb	r2, [r2, #30]
 8002160:	2a00      	cmp	r2, #0
 8002162:	d102      	bne.n	800216a <ETH_SetMACConfig+0x92>
 8002164:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002168:	e000      	b.n	800216c <ETH_SetMACConfig+0x94>
 800216a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800216c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	7fdb      	ldrb	r3, [r3, #31]
 8002172:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002174:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	f892 2020 	ldrb.w	r2, [r2, #32]
 800217c:	2a00      	cmp	r2, #0
 800217e:	d102      	bne.n	8002186 <ETH_SetMACConfig+0xae>
 8002180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002184:	e000      	b.n	8002188 <ETH_SetMACConfig+0xb0>
 8002186:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002188:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800218e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002196:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002198:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <ETH_SetMACConfig+0x22c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	68f9      	ldr	r1, [r7, #12]
 80021b2:	430b      	orrs	r3, r1
 80021b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021c4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80021ce:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80021d6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80021d8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80021e0:	2a00      	cmp	r2, #0
 80021e2:	d102      	bne.n	80021ea <ETH_SetMACConfig+0x112>
 80021e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021e8:	e000      	b.n	80021ec <ETH_SetMACConfig+0x114>
 80021ea:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80021ec:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <ETH_SetMACConfig+0x230>)
 80021fe:	4013      	ands	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	430b      	orrs	r3, r1
 8002208:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002210:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b3a      	ldr	r3, [pc, #232]	; (800230c <ETH_SetMACConfig+0x234>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	68f9      	ldr	r1, [r7, #12]
 800222a:	430b      	orrs	r3, r1
 800222c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002234:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800223a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002242:	2a00      	cmp	r2, #0
 8002244:	d101      	bne.n	800224a <ETH_SetMACConfig+0x172>
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	e000      	b.n	800224c <ETH_SetMACConfig+0x174>
 800224a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800224c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002252:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800225e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002262:	4013      	ands	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	68f9      	ldr	r1, [r7, #12]
 800226a:	430b      	orrs	r3, r1
 800226c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002274:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800227c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f023 0103 	bic.w	r1, r3, #3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	430a      	orrs	r2, r1
 8002296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80022a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d101      	bne.n	80022c6 <ETH_SetMACConfig+0x1ee>
 80022c2:	2240      	movs	r2, #64	; 0x40
 80022c4:	e000      	b.n	80022c8 <ETH_SetMACConfig+0x1f0>
 80022c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80022c8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80022d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022d2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80022da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	00048083 	.word	0x00048083
 8002308:	c0f88000 	.word	0xc0f88000
 800230c:	fffffef0 	.word	0xfffffef0

08002310 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b38      	ldr	r3, [pc, #224]	; (8002408 <ETH_SetDMAConfig+0xf8>)
 8002326:	4013      	ands	r3, r2
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	6809      	ldr	r1, [r1, #0]
 8002330:	431a      	orrs	r2, r3
 8002332:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002336:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002342:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	7b1b      	ldrb	r3, [r3, #12]
 8002348:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800234a:	4313      	orrs	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f241 0304 	movw	r3, #4100	; 0x1004
 8002356:	4413      	add	r3, r2
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b2c      	ldr	r3, [pc, #176]	; (800240c <ETH_SetDMAConfig+0xfc>)
 800235c:	4013      	ands	r3, r2
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6811      	ldr	r1, [r2, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	431a      	orrs	r2, r3
 8002366:	f241 0304 	movw	r3, #4100	; 0x1004
 800236a:	440b      	add	r3, r1
 800236c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	7b5b      	ldrb	r3, [r3, #13]
 8002372:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <ETH_SetDMAConfig+0x100>)
 8002388:	4013      	ands	r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	6811      	ldr	r1, [r2, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	431a      	orrs	r2, r3
 8002392:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002396:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7d1b      	ldrb	r3, [r3, #20]
 80023a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80023a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	7f5b      	ldrb	r3, [r3, #29]
 80023a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80023aa:	4313      	orrs	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	f241 1304 	movw	r3, #4356	; 0x1104
 80023b6:	4413      	add	r3, r2
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b16      	ldr	r3, [pc, #88]	; (8002414 <ETH_SetDMAConfig+0x104>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6811      	ldr	r1, [r2, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	431a      	orrs	r2, r3
 80023c6:	f241 1304 	movw	r3, #4356	; 0x1104
 80023ca:	440b      	add	r3, r1
 80023cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	7f1b      	ldrb	r3, [r3, #28]
 80023d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f241 1308 	movw	r3, #4360	; 0x1108
 80023e4:	4413      	add	r3, r2
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <ETH_SetDMAConfig+0x108>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6811      	ldr	r1, [r2, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	f241 1308 	movw	r3, #4360	; 0x1108
 80023f8:	440b      	add	r3, r1
 80023fa:	601a      	str	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	ffff87fd 	.word	0xffff87fd
 800240c:	ffff2ffe 	.word	0xffff2ffe
 8002410:	fffec000 	.word	0xfffec000
 8002414:	ffc0efef 	.word	0xffc0efef
 8002418:	7fc0ffff 	.word	0x7fc0ffff

0800241c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b0a4      	sub	sp, #144	; 0x90
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002424:	2301      	movs	r3, #1
 8002426:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800242a:	2300      	movs	r3, #0
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002434:	2300      	movs	r3, #0
 8002436:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002440:	2301      	movs	r3, #1
 8002442:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002446:	2301      	movs	r3, #1
 8002448:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002452:	2301      	movs	r3, #1
 8002454:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800245c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002464:	2300      	movs	r3, #0
 8002466:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002474:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002478:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800247a:	2300      	movs	r3, #0
 800247c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002480:	2300      	movs	r3, #0
 8002482:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002496:	2300      	movs	r3, #0
 8002498:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800249a:	2300      	movs	r3, #0
 800249c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800249e:	2300      	movs	r3, #0
 80024a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80024ae:	2301      	movs	r3, #1
 80024b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80024b4:	2320      	movs	r3, #32
 80024b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80024c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80024f0:	2301      	movs	r3, #1
 80024f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80024f6:	2300      	movs	r3, #0
 80024f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	4619      	mov	r1, r3
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff fde6 	bl	80020d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800250c:	2301      	movs	r3, #1
 800250e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002514:	2300      	movs	r3, #0
 8002516:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002526:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800252a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002530:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002534:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800253c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002540:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	4619      	mov	r1, r3
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff fee1 	bl	8002310 <ETH_SetDMAConfig>
}
 800254e:	bf00      	nop
 8002550:	3790      	adds	r7, #144	; 0x90
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002568:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002570:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002572:	f001 fb15 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8002576:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d908      	bls.n	8002592 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d804      	bhi.n	8002592 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e027      	b.n	80025e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d908      	bls.n	80025ac <ETH_MAC_MDIO_ClkConfig+0x54>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	4a17      	ldr	r2, [pc, #92]	; (80025fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d804      	bhi.n	80025ac <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	e01a      	b.n	80025e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d903      	bls.n	80025bc <ETH_MAC_MDIO_ClkConfig+0x64>
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4a12      	ldr	r2, [pc, #72]	; (8002600 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d911      	bls.n	80025e0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4a10      	ldr	r2, [pc, #64]	; (8002600 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d908      	bls.n	80025d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4a0f      	ldr	r2, [pc, #60]	; (8002604 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d804      	bhi.n	80025d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	e005      	b.n	80025e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	e000      	b.n	80025e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80025e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80025ec:	bf00      	nop
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	01312cff 	.word	0x01312cff
 80025f8:	02160ebf 	.word	0x02160ebf
 80025fc:	039386ff 	.word	0x039386ff
 8002600:	05f5e0ff 	.word	0x05f5e0ff
 8002604:	08f0d17f 	.word	0x08f0d17f

08002608 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e01d      	b.n	8002652 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68d9      	ldr	r1, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	3206      	adds	r2, #6
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d9de      	bls.n	8002616 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	f241 132c 	movw	r3, #4396	; 0x112c
 8002666:	4413      	add	r3, r2
 8002668:	2203      	movs	r2, #3
 800266a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68d9      	ldr	r1, [r3, #12]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	f241 1314 	movw	r3, #4372	; 0x1114
 8002678:	4413      	add	r3, r2
 800267a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002688:	601a      	str	r2, [r3, #0]
}
 800268a:	bf00      	nop
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e024      	b.n	80026ee <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6919      	ldr	r1, [r3, #16]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	330a      	adds	r3, #10
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3301      	adds	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d9d7      	bls.n	80026a4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	f241 1330 	movw	r3, #4400	; 0x1130
 800271a:	4413      	add	r3, r2
 800271c:	2203      	movs	r2, #3
 800271e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6919      	ldr	r1, [r3, #16]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	f241 131c 	movw	r3, #4380	; 0x111c
 800272c:	4413      	add	r3, r2
 800272e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002740:	4413      	add	r3, r2
 8002742:	6019      	str	r1, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800275e:	4b89      	ldr	r3, [pc, #548]	; (8002984 <HAL_GPIO_Init+0x234>)
 8002760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002762:	e194      	b.n	8002a8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	2101      	movs	r1, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8186 	beq.w	8002a88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x3c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b12      	cmp	r3, #18
 800278a:	d123      	bne.n	80027d4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002798:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	220f      	movs	r2, #15
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	08da      	lsrs	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3208      	adds	r2, #8
 80027ce:	69b9      	ldr	r1, [r7, #24]
 80027d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0203 	and.w	r2, r3, #3
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d00b      	beq.n	8002828 <HAL_GPIO_Init+0xd8>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d007      	beq.n	8002828 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281c:	2b11      	cmp	r3, #17
 800281e:	d003      	beq.n	8002828 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b12      	cmp	r3, #18
 8002826:	d130      	bne.n	800288a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285e:	2201      	movs	r2, #1
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 0201 	and.w	r2, r3, #1
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4013      	ands	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80e0 	beq.w	8002a88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c8:	4b2f      	ldr	r3, [pc, #188]	; (8002988 <HAL_GPIO_Init+0x238>)
 80028ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ce:	4a2e      	ldr	r2, [pc, #184]	; (8002988 <HAL_GPIO_Init+0x238>)
 80028d0:	f043 0302 	orr.w	r3, r3, #2
 80028d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_GPIO_Init+0x238>)
 80028da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e6:	4a29      	ldr	r2, [pc, #164]	; (800298c <HAL_GPIO_Init+0x23c>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a20      	ldr	r2, [pc, #128]	; (8002990 <HAL_GPIO_Init+0x240>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d052      	beq.n	80029b8 <HAL_GPIO_Init+0x268>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_GPIO_Init+0x244>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_GPIO_Init+0x22e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <HAL_GPIO_Init+0x248>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d02b      	beq.n	800297a <HAL_GPIO_Init+0x22a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1d      	ldr	r2, [pc, #116]	; (800299c <HAL_GPIO_Init+0x24c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d025      	beq.n	8002976 <HAL_GPIO_Init+0x226>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <HAL_GPIO_Init+0x250>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d01f      	beq.n	8002972 <HAL_GPIO_Init+0x222>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1b      	ldr	r2, [pc, #108]	; (80029a4 <HAL_GPIO_Init+0x254>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d019      	beq.n	800296e <HAL_GPIO_Init+0x21e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1a      	ldr	r2, [pc, #104]	; (80029a8 <HAL_GPIO_Init+0x258>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d013      	beq.n	800296a <HAL_GPIO_Init+0x21a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a19      	ldr	r2, [pc, #100]	; (80029ac <HAL_GPIO_Init+0x25c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d00d      	beq.n	8002966 <HAL_GPIO_Init+0x216>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <HAL_GPIO_Init+0x260>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d007      	beq.n	8002962 <HAL_GPIO_Init+0x212>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <HAL_GPIO_Init+0x264>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d101      	bne.n	800295e <HAL_GPIO_Init+0x20e>
 800295a:	2309      	movs	r3, #9
 800295c:	e02d      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 800295e:	230a      	movs	r3, #10
 8002960:	e02b      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 8002962:	2308      	movs	r3, #8
 8002964:	e029      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 8002966:	2307      	movs	r3, #7
 8002968:	e027      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 800296a:	2306      	movs	r3, #6
 800296c:	e025      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 800296e:	2305      	movs	r3, #5
 8002970:	e023      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 8002972:	2304      	movs	r3, #4
 8002974:	e021      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 8002976:	2303      	movs	r3, #3
 8002978:	e01f      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 800297a:	2302      	movs	r3, #2
 800297c:	e01d      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 800297e:	2301      	movs	r3, #1
 8002980:	e01b      	b.n	80029ba <HAL_GPIO_Init+0x26a>
 8002982:	bf00      	nop
 8002984:	58000080 	.word	0x58000080
 8002988:	58024400 	.word	0x58024400
 800298c:	58000400 	.word	0x58000400
 8002990:	58020000 	.word	0x58020000
 8002994:	58020400 	.word	0x58020400
 8002998:	58020800 	.word	0x58020800
 800299c:	58020c00 	.word	0x58020c00
 80029a0:	58021000 	.word	0x58021000
 80029a4:	58021400 	.word	0x58021400
 80029a8:	58021800 	.word	0x58021800
 80029ac:	58021c00 	.word	0x58021c00
 80029b0:	58022000 	.word	0x58022000
 80029b4:	58022400 	.word	0x58022400
 80029b8:	2300      	movs	r3, #0
 80029ba:	69fa      	ldr	r2, [r7, #28]
 80029bc:	f002 0203 	and.w	r2, r2, #3
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	4093      	lsls	r3, r2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ca:	4938      	ldr	r1, [pc, #224]	; (8002aac <HAL_GPIO_Init+0x35c>)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	3302      	adds	r3, #2
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f47f ae63 	bne.w	8002764 <HAL_GPIO_Init+0x14>
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	58000400 	.word	0x58000400

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002acc:	e003      	b.n	8002ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae4:	b08f      	sub	sp, #60	; 0x3c
 8002ae6:	af0a      	add	r7, sp, #40	; 0x28
 8002ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e116      	b.n	8002d22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d106      	bne.n	8002b14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7fe fe10 	bl	8001734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2203      	movs	r2, #3
 8002b18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d102      	bne.n	8002b2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f006 fcf4 	bl	8009520 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	687e      	ldr	r6, [r7, #4]
 8002b40:	466d      	mov	r5, sp
 8002b42:	f106 0410 	add.w	r4, r6, #16
 8002b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b52:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b56:	1d33      	adds	r3, r6, #4
 8002b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b5a:	6838      	ldr	r0, [r7, #0]
 8002b5c:	f006 fc7e 	bl	800945c <USB_CoreInit>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0d7      	b.n	8002d22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2100      	movs	r1, #0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f006 fce2 	bl	8009542 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e04a      	b.n	8002c1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b84:	7bfa      	ldrb	r2, [r7, #15]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	333d      	adds	r3, #61	; 0x3d
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b98:	7bfa      	ldrb	r2, [r7, #15]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	333c      	adds	r3, #60	; 0x3c
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	b298      	uxth	r0, r3
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3342      	adds	r3, #66	; 0x42
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	333f      	adds	r3, #63	; 0x3f
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	3344      	adds	r3, #68	; 0x44
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3348      	adds	r3, #72	; 0x48
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3350      	adds	r3, #80	; 0x50
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	3301      	adds	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d3af      	bcc.n	8002b84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e044      	b.n	8002cb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c56:	7bfa      	ldrb	r2, [r7, #15]
 8002c58:	6879      	ldr	r1, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c82:	7bfa      	ldrb	r2, [r7, #15]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	7bfa      	ldrb	r2, [r7, #15]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d3b5      	bcc.n	8002c2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	687e      	ldr	r6, [r7, #4]
 8002cc6:	466d      	mov	r5, sp
 8002cc8:	f106 0410 	add.w	r4, r6, #16
 8002ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cdc:	1d33      	adds	r3, r6, #4
 8002cde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ce0:	6838      	ldr	r0, [r7, #0]
 8002ce2:	f006 fc59 	bl	8009598 <USB_DevInit>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d005      	beq.n	8002cf8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e014      	b.n	8002d22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f80b 	bl	8002d2c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f006 fe09 	bl	8009932 <USB_DevDisconnect>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d5a:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	10000003 	.word	0x10000003

08002d74 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d008      	beq.n	8002d9a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d001      	beq.n	8002d9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e01d      	b.n	8002dd6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 0207 	bic.w	r2, r3, #7
 8002da2:	490f      	ldr	r1, [pc, #60]	; (8002de0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002daa:	f7fe fdc7 	bl	800193c <HAL_GetTick>
 8002dae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002db0:	e009      	b.n	8002dc6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002db2:	f7fe fdc3 	bl	800193c <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc0:	d901      	bls.n	8002dc6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e007      	b.n	8002dd6 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d1ee      	bne.n	8002db2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	58024800 	.word	0x58024800

08002de4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df2:	60d3      	str	r3, [r2, #12]
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	58024800 	.word	0x58024800

08002e04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e3a4      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 8087 	beq.w	8002f32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e24:	4b9a      	ldr	r3, [pc, #616]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e2e:	4b98      	ldr	r3, [pc, #608]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d007      	beq.n	8002e4a <HAL_RCC_OscConfig+0x46>
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	2b18      	cmp	r3, #24
 8002e3e:	d110      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5e>
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d10b      	bne.n	8002e62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4a:	4b91      	ldr	r3, [pc, #580]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d06c      	beq.n	8002f30 <HAL_RCC_OscConfig+0x12c>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d168      	bne.n	8002f30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e37e      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6a:	d106      	bne.n	8002e7a <HAL_RCC_OscConfig+0x76>
 8002e6c:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a87      	ldr	r2, [pc, #540]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	e02e      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x98>
 8002e82:	4b83      	ldr	r3, [pc, #524]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a82      	ldr	r2, [pc, #520]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	4b80      	ldr	r3, [pc, #512]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7f      	ldr	r2, [pc, #508]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	e01d      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCC_OscConfig+0xbc>
 8002ea6:	4b7a      	ldr	r3, [pc, #488]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a79      	ldr	r2, [pc, #484]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	4b77      	ldr	r3, [pc, #476]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a76      	ldr	r2, [pc, #472]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	e00b      	b.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
 8002ec0:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a72      	ldr	r2, [pc, #456]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b70      	ldr	r3, [pc, #448]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a6f      	ldr	r2, [pc, #444]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fd2c 	bl	800193c <HAL_GetTick>
 8002ee4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7fe fd28 	bl	800193c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	; 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e332      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002efa:	4b65      	ldr	r3, [pc, #404]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0xe4>
 8002f06:	e014      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f08:	f7fe fd18 	bl	800193c <HAL_GetTick>
 8002f0c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fd14 	bl	800193c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e31e      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f22:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1f0      	bne.n	8002f10 <HAL_RCC_OscConfig+0x10c>
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 80b0 	beq.w	80030a0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f4a:	4b51      	ldr	r3, [pc, #324]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_RCC_OscConfig+0x162>
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	2b18      	cmp	r3, #24
 8002f5a:	d149      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x1ec>
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d144      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f66:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d005      	beq.n	8002f7e <HAL_RCC_OscConfig+0x17a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e2f0      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f7e:	4b44      	ldr	r3, [pc, #272]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0219 	bic.w	r2, r3, #25
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4941      	ldr	r1, [pc, #260]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fcd4 	bl	800193c <HAL_GetTick>
 8002f94:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f98:	f7fe fcd0 	bl	800193c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e2da      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb6:	f7fe fcef 	bl	8001998 <HAL_GetREVID>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d80a      	bhi.n	8002fda <HAL_RCC_OscConfig+0x1d6>
 8002fc4:	4b32      	ldr	r3, [pc, #200]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	031b      	lsls	r3, r3, #12
 8002fd2:	492f      	ldr	r1, [pc, #188]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd8:	e062      	b.n	80030a0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	061b      	lsls	r3, r3, #24
 8002fe8:	4929      	ldr	r1, [pc, #164]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fee:	e057      	b.n	80030a0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d038      	beq.n	800306a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ff8:	4b25      	ldr	r3, [pc, #148]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 0219 	bic.w	r2, r3, #25
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	4922      	ldr	r1, [pc, #136]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fc97 	bl	800193c <HAL_GetTick>
 800300e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003012:	f7fe fc93 	bl	800193c <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e29d      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	f7fe fcb2 	bl	8001998 <HAL_GetREVID>
 8003034:	4602      	mov	r2, r0
 8003036:	f241 0303 	movw	r3, #4099	; 0x1003
 800303a:	429a      	cmp	r2, r3
 800303c:	d80a      	bhi.n	8003054 <HAL_RCC_OscConfig+0x250>
 800303e:	4b14      	ldr	r3, [pc, #80]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	031b      	lsls	r3, r3, #12
 800304c:	4910      	ldr	r1, [pc, #64]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 800304e:	4313      	orrs	r3, r2
 8003050:	604b      	str	r3, [r1, #4]
 8003052:	e025      	b.n	80030a0 <HAL_RCC_OscConfig+0x29c>
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	061b      	lsls	r3, r3, #24
 8003062:	490b      	ldr	r1, [pc, #44]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8003064:	4313      	orrs	r3, r2
 8003066:	604b      	str	r3, [r1, #4]
 8003068:	e01a      	b.n	80030a0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a08      	ldr	r2, [pc, #32]	; (8003090 <HAL_RCC_OscConfig+0x28c>)
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003076:	f7fe fc61 	bl	800193c <HAL_GetTick>
 800307a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800307c:	e00a      	b.n	8003094 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307e:	f7fe fc5d 	bl	800193c <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d903      	bls.n	8003094 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e267      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
 8003090:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003094:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ee      	bne.n	800307e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 808f 	beq.w	80031cc <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ae:	4b9a      	ldr	r3, [pc, #616]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030b6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030b8:	4b97      	ldr	r3, [pc, #604]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d007      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2d0>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	2b18      	cmp	r3, #24
 80030c8:	d12d      	bne.n	8003126 <HAL_RCC_OscConfig+0x322>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d128      	bne.n	8003126 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030d4:	4b90      	ldr	r3, [pc, #576]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_OscConfig+0x2e8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	2b80      	cmp	r3, #128	; 0x80
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e239      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ec:	f7fe fc54 	bl	8001998 <HAL_GetREVID>
 80030f0:	4602      	mov	r2, r0
 80030f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d80a      	bhi.n	8003110 <HAL_RCC_OscConfig+0x30c>
 80030fa:	4b87      	ldr	r3, [pc, #540]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	069b      	lsls	r3, r3, #26
 8003108:	4983      	ldr	r1, [pc, #524]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800310e:	e05d      	b.n	80031cc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003110:	4b81      	ldr	r3, [pc, #516]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	061b      	lsls	r3, r3, #24
 800311e:	497e      	ldr	r1, [pc, #504]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003120:	4313      	orrs	r3, r2
 8003122:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003124:	e052      	b.n	80031cc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d035      	beq.n	800319a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800312e:	4b7a      	ldr	r3, [pc, #488]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a79      	ldr	r2, [pc, #484]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fbff 	bl	800193c <HAL_GetTick>
 800313e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003142:	f7fe fbfb 	bl	800193c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e205      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003154:	4b70      	ldr	r3, [pc, #448]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003160:	f7fe fc1a 	bl	8001998 <HAL_GetREVID>
 8003164:	4602      	mov	r2, r0
 8003166:	f241 0303 	movw	r3, #4099	; 0x1003
 800316a:	429a      	cmp	r2, r3
 800316c:	d80a      	bhi.n	8003184 <HAL_RCC_OscConfig+0x380>
 800316e:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	069b      	lsls	r3, r3, #26
 800317c:	4966      	ldr	r1, [pc, #408]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	e023      	b.n	80031cc <HAL_RCC_OscConfig+0x3c8>
 8003184:	4b64      	ldr	r3, [pc, #400]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	4961      	ldr	r1, [pc, #388]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003194:	4313      	orrs	r3, r2
 8003196:	60cb      	str	r3, [r1, #12]
 8003198:	e018      	b.n	80031cc <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800319a:	4b5f      	ldr	r3, [pc, #380]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5e      	ldr	r2, [pc, #376]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80031a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f7fe fbc9 	bl	800193c <HAL_GetTick>
 80031aa:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031ae:	f7fe fbc5 	bl	800193c <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e1cf      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031c0:	4b55      	ldr	r3, [pc, #340]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d036      	beq.n	8003246 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d019      	beq.n	8003214 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e0:	4b4d      	ldr	r3, [pc, #308]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	4a4c      	ldr	r2, [pc, #304]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fba6 	bl	800193c <HAL_GetTick>
 80031f0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fba2 	bl	800193c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1ac      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003206:	4b44      	ldr	r3, [pc, #272]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0f0      	beq.n	80031f4 <HAL_RCC_OscConfig+0x3f0>
 8003212:	e018      	b.n	8003246 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	4a3f      	ldr	r2, [pc, #252]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7fe fb8c 	bl	800193c <HAL_GetTick>
 8003224:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003228:	f7fe fb88 	bl	800193c <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e192      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800323a:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800323c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d036      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d019      	beq.n	800328e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2e      	ldr	r2, [pc, #184]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003264:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003266:	f7fe fb69 	bl	800193c <HAL_GetTick>
 800326a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800326c:	e008      	b.n	8003280 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800326e:	f7fe fb65 	bl	800193c <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e16f      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0f0      	beq.n	800326e <HAL_RCC_OscConfig+0x46a>
 800328c:	e018      	b.n	80032c0 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a21      	ldr	r2, [pc, #132]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 8003294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003298:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800329a:	f7fe fb4f 	bl	800193c <HAL_GetTick>
 800329e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032a2:	f7fe fb4b 	bl	800193c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e155      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032b4:	4b18      	ldr	r3, [pc, #96]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8086 	beq.w	80033da <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032ce:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_RCC_OscConfig+0x518>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a12      	ldr	r2, [pc, #72]	; (800331c <HAL_RCC_OscConfig+0x518>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032da:	f7fe fb2f 	bl	800193c <HAL_GetTick>
 80032de:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe fb2b 	bl	800193c <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b64      	cmp	r3, #100	; 0x64
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e135      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_OscConfig+0x518>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10b      	bne.n	8003320 <HAL_RCC_OscConfig+0x51c>
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	4a02      	ldr	r2, [pc, #8]	; (8003318 <HAL_RCC_OscConfig+0x514>)
 800330e:	f043 0301 	orr.w	r3, r3, #1
 8003312:	6713      	str	r3, [r2, #112]	; 0x70
 8003314:	e032      	b.n	800337c <HAL_RCC_OscConfig+0x578>
 8003316:	bf00      	nop
 8003318:	58024400 	.word	0x58024400
 800331c:	58024800 	.word	0x58024800
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10c      	bne.n	8003342 <HAL_RCC_OscConfig+0x53e>
 8003328:	4b8f      	ldr	r3, [pc, #572]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	4a8e      	ldr	r2, [pc, #568]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800332e:	f023 0301 	bic.w	r3, r3, #1
 8003332:	6713      	str	r3, [r2, #112]	; 0x70
 8003334:	4b8c      	ldr	r3, [pc, #560]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003338:	4a8b      	ldr	r2, [pc, #556]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800333a:	f023 0304 	bic.w	r3, r3, #4
 800333e:	6713      	str	r3, [r2, #112]	; 0x70
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x578>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b05      	cmp	r3, #5
 8003348:	d10c      	bne.n	8003364 <HAL_RCC_OscConfig+0x560>
 800334a:	4b87      	ldr	r3, [pc, #540]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	4a86      	ldr	r2, [pc, #536]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6713      	str	r3, [r2, #112]	; 0x70
 8003356:	4b84      	ldr	r3, [pc, #528]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	4a83      	ldr	r2, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6713      	str	r3, [r2, #112]	; 0x70
 8003362:	e00b      	b.n	800337c <HAL_RCC_OscConfig+0x578>
 8003364:	4b80      	ldr	r3, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	4a7f      	ldr	r2, [pc, #508]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	6713      	str	r3, [r2, #112]	; 0x70
 8003370:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003374:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003376:	f023 0304 	bic.w	r3, r3, #4
 800337a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d015      	beq.n	80033b0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003384:	f7fe fada 	bl	800193c <HAL_GetTick>
 8003388:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fe fad6 	bl	800193c <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0de      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033a2:	4b71      	ldr	r3, [pc, #452]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0ee      	beq.n	800338c <HAL_RCC_OscConfig+0x588>
 80033ae:	e014      	b.n	80033da <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe fac4 	bl	800193c <HAL_GetTick>
 80033b4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe fac0 	bl	800193c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e0c8      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1ee      	bne.n	80033b8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80bd 	beq.w	800355e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033e4:	4b60      	ldr	r3, [pc, #384]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ec:	2b18      	cmp	r3, #24
 80033ee:	f000 80b4 	beq.w	800355a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	f040 8095 	bne.w	8003526 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a59      	ldr	r2, [pc, #356]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fa98 	bl	800193c <HAL_GetTick>
 800340c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fa94 	bl	800193c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e09e      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003422:	4b51      	ldr	r3, [pc, #324]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003432:	4b4e      	ldr	r3, [pc, #312]	; (800356c <HAL_RCC_OscConfig+0x768>)
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	430a      	orrs	r2, r1
 8003442:	4949      	ldr	r1, [pc, #292]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003444:	4313      	orrs	r3, r2
 8003446:	628b      	str	r3, [r1, #40]	; 0x28
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	3b01      	subs	r3, #1
 800344e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003456:	3b01      	subs	r3, #1
 8003458:	025b      	lsls	r3, r3, #9
 800345a:	b29b      	uxth	r3, r3
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003462:	3b01      	subs	r3, #1
 8003464:	041b      	lsls	r3, r3, #16
 8003466:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003470:	3b01      	subs	r3, #1
 8003472:	061b      	lsls	r3, r3, #24
 8003474:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003478:	493b      	ldr	r1, [pc, #236]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800347a:	4313      	orrs	r3, r2
 800347c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800347e:	4b3a      	ldr	r3, [pc, #232]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	4a39      	ldr	r2, [pc, #228]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003484:	f023 0301 	bic.w	r3, r3, #1
 8003488:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800348a:	4b37      	ldr	r3, [pc, #220]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800348c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800348e:	4b38      	ldr	r3, [pc, #224]	; (8003570 <HAL_RCC_OscConfig+0x76c>)
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003496:	00d2      	lsls	r2, r2, #3
 8003498:	4933      	ldr	r1, [pc, #204]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800349a:	4313      	orrs	r3, r2
 800349c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800349e:	4b32      	ldr	r3, [pc, #200]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	f023 020c 	bic.w	r2, r3, #12
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	492f      	ldr	r1, [pc, #188]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034b0:	4b2d      	ldr	r3, [pc, #180]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	f023 0202 	bic.w	r2, r3, #2
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034bc:	492a      	ldr	r1, [pc, #168]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	4a25      	ldr	r2, [pc, #148]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034da:	4b23      	ldr	r3, [pc, #140]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	4a22      	ldr	r2, [pc, #136]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 80034f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe fa1d 	bl	800193c <HAL_GetTick>
 8003502:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003506:	f7fe fa19 	bl	800193c <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e023      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x702>
 8003524:	e01b      	b.n	800355e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003526:	4b10      	ldr	r3, [pc, #64]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a0f      	ldr	r2, [pc, #60]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800352c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003532:	f7fe fa03 	bl	800193c <HAL_GetTick>
 8003536:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800353a:	f7fe f9ff 	bl	800193c <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e009      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_RCC_OscConfig+0x764>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x736>
 8003558:	e001      	b.n	800355e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	; 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	58024400 	.word	0x58024400
 800356c:	fffffc0c 	.word	0xfffffc0c
 8003570:	ffff0007 	.word	0xffff0007

08003574 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e18d      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003588:	4b8a      	ldr	r3, [pc, #552]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d910      	bls.n	80035b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003596:	4b87      	ldr	r3, [pc, #540]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f023 020f 	bic.w	r2, r3, #15
 800359e:	4985      	ldr	r1, [pc, #532]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035a6:	4b83      	ldr	r3, [pc, #524]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e175      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d010      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	4b7b      	ldr	r3, [pc, #492]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d908      	bls.n	80035e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035d4:	4b78      	ldr	r3, [pc, #480]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	4975      	ldr	r1, [pc, #468]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	4b70      	ldr	r3, [pc, #448]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035fe:	429a      	cmp	r2, r3
 8003600:	d908      	bls.n	8003614 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003602:	4b6d      	ldr	r3, [pc, #436]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	496a      	ldr	r1, [pc, #424]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003610:	4313      	orrs	r3, r2
 8003612:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d010      	beq.n	8003642 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	4b64      	ldr	r3, [pc, #400]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800362c:	429a      	cmp	r2, r3
 800362e:	d908      	bls.n	8003642 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003630:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	495e      	ldr	r1, [pc, #376]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800363e:	4313      	orrs	r3, r2
 8003640:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d010      	beq.n	8003670 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69da      	ldr	r2, [r3, #28]
 8003652:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800365a:	429a      	cmp	r2, r3
 800365c:	d908      	bls.n	8003670 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800365e:	4b56      	ldr	r3, [pc, #344]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	4953      	ldr	r1, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800366c:	4313      	orrs	r3, r2
 800366e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 030f 	and.w	r3, r3, #15
 8003688:	429a      	cmp	r2, r3
 800368a:	d908      	bls.n	800369e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800368c:	4b4a      	ldr	r3, [pc, #296]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f023 020f 	bic.w	r2, r3, #15
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4947      	ldr	r1, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 800369a:	4313      	orrs	r3, r2
 800369c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d055      	beq.n	8003756 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80036aa:	4b43      	ldr	r3, [pc, #268]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	4940      	ldr	r1, [pc, #256]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036c4:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d121      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0e7      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b03      	cmp	r3, #3
 80036da:	d107      	bne.n	80036ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036dc:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d115      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0db      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80036f4:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0cf      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003704:	4b2c      	ldr	r3, [pc, #176]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0c7      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003714:	4b28      	ldr	r3, [pc, #160]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	f023 0207 	bic.w	r2, r3, #7
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4925      	ldr	r1, [pc, #148]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003722:	4313      	orrs	r3, r2
 8003724:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003726:	f7fe f909 	bl	800193c <HAL_GetTick>
 800372a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372c:	e00a      	b.n	8003744 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372e:	f7fe f905 	bl	800193c <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	; 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0af      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003744:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	429a      	cmp	r2, r3
 8003754:	d1eb      	bne.n	800372e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d010      	beq.n	8003784 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	429a      	cmp	r2, r3
 8003770:	d208      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f023 020f 	bic.w	r2, r3, #15
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x244>)
 8003780:	4313      	orrs	r3, r2
 8003782:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d214      	bcs.n	80037bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003792:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f023 020f 	bic.w	r2, r3, #15
 800379a:	4906      	ldr	r1, [pc, #24]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a2:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_RCC_ClockConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e077      	b.n	80038a4 <HAL_RCC_ClockConfig+0x330>
 80037b4:	52002000 	.word	0x52002000
 80037b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691a      	ldr	r2, [r3, #16]
 80037cc:	4b37      	ldr	r3, [pc, #220]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d208      	bcs.n	80037ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80037d8:	4b34      	ldr	r3, [pc, #208]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4931      	ldr	r1, [pc, #196]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 80037fc:	69db      	ldr	r3, [r3, #28]
 80037fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003802:	429a      	cmp	r2, r3
 8003804:	d208      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4926      	ldr	r1, [pc, #152]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 8003814:	4313      	orrs	r3, r2
 8003816:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0310 	and.w	r3, r3, #16
 8003820:	2b00      	cmp	r3, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	4b20      	ldr	r3, [pc, #128]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003830:	429a      	cmp	r2, r3
 8003832:	d208      	bcs.n	8003846 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	491a      	ldr	r1, [pc, #104]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 8003842:	4313      	orrs	r3, r2
 8003844:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b00      	cmp	r3, #0
 8003850:	d010      	beq.n	8003874 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	4b15      	ldr	r3, [pc, #84]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385e:	429a      	cmp	r2, r3
 8003860:	d208      	bcs.n	8003874 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	490f      	ldr	r1, [pc, #60]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 8003870:	4313      	orrs	r3, r2
 8003872:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003874:	f000 f822 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8003878:	4601      	mov	r1, r0
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <HAL_RCC_ClockConfig+0x338>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	0a1b      	lsrs	r3, r3, #8
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <HAL_RCC_ClockConfig+0x33c>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	f003 031f 	and.w	r3, r3, #31
 800388c:	fa21 f303 	lsr.w	r3, r1, r3
 8003890:	4a08      	ldr	r2, [pc, #32]	; (80038b4 <HAL_RCC_ClockConfig+0x340>)
 8003892:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003894:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_RCC_ClockConfig+0x344>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4618      	mov	r0, r3
 800389a:	f7fe f805 	bl	80018a8 <HAL_InitTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80038a2:	7afb      	ldrb	r3, [r7, #11]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	58024400 	.word	0x58024400
 80038b0:	08009a4c 	.word	0x08009a4c
 80038b4:	24000000 	.word	0x24000000
 80038b8:	24000008 	.word	0x24000008

080038bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c2:	4baf      	ldr	r3, [pc, #700]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038ca:	2b18      	cmp	r3, #24
 80038cc:	f200 814e 	bhi.w	8003b6c <HAL_RCC_GetSysClockFreq+0x2b0>
 80038d0:	a201      	add	r2, pc, #4	; (adr r2, 80038d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80038d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d6:	bf00      	nop
 80038d8:	0800393d 	.word	0x0800393d
 80038dc:	08003b6d 	.word	0x08003b6d
 80038e0:	08003b6d 	.word	0x08003b6d
 80038e4:	08003b6d 	.word	0x08003b6d
 80038e8:	08003b6d 	.word	0x08003b6d
 80038ec:	08003b6d 	.word	0x08003b6d
 80038f0:	08003b6d 	.word	0x08003b6d
 80038f4:	08003b6d 	.word	0x08003b6d
 80038f8:	08003963 	.word	0x08003963
 80038fc:	08003b6d 	.word	0x08003b6d
 8003900:	08003b6d 	.word	0x08003b6d
 8003904:	08003b6d 	.word	0x08003b6d
 8003908:	08003b6d 	.word	0x08003b6d
 800390c:	08003b6d 	.word	0x08003b6d
 8003910:	08003b6d 	.word	0x08003b6d
 8003914:	08003b6d 	.word	0x08003b6d
 8003918:	08003969 	.word	0x08003969
 800391c:	08003b6d 	.word	0x08003b6d
 8003920:	08003b6d 	.word	0x08003b6d
 8003924:	08003b6d 	.word	0x08003b6d
 8003928:	08003b6d 	.word	0x08003b6d
 800392c:	08003b6d 	.word	0x08003b6d
 8003930:	08003b6d 	.word	0x08003b6d
 8003934:	08003b6d 	.word	0x08003b6d
 8003938:	0800396f 	.word	0x0800396f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800393c:	4b90      	ldr	r3, [pc, #576]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d009      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003948:	4b8d      	ldr	r3, [pc, #564]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	08db      	lsrs	r3, r3, #3
 800394e:	f003 0303 	and.w	r3, r3, #3
 8003952:	4a8c      	ldr	r2, [pc, #560]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
 8003958:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800395a:	e10a      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800395c:	4b89      	ldr	r3, [pc, #548]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800395e:	61bb      	str	r3, [r7, #24]
    break;
 8003960:	e107      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003962:	4b89      	ldr	r3, [pc, #548]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003964:	61bb      	str	r3, [r7, #24]
    break;
 8003966:	e104      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003968:	4b88      	ldr	r3, [pc, #544]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800396a:	61bb      	str	r3, [r7, #24]
    break;
 800396c:	e101      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800396e:	4b84      	ldr	r3, [pc, #528]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003978:	4b81      	ldr	r3, [pc, #516]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003982:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003984:	4b7e      	ldr	r3, [pc, #504]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800398e:	4b7c      	ldr	r3, [pc, #496]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003992:	08db      	lsrs	r3, r3, #3
 8003994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	fb02 f303 	mul.w	r3, r2, r3
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80da 	beq.w	8003b66 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d05a      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x1b2>
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d302      	bcc.n	80039c2 <HAL_RCC_GetSysClockFreq+0x106>
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d078      	beq.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80039c0:	e099      	b.n	8003af6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039c2:	4b6f      	ldr	r3, [pc, #444]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d02d      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039ce:	4b6c      	ldr	r3, [pc, #432]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	08db      	lsrs	r3, r3, #3
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	4a6a      	ldr	r2, [pc, #424]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80039da:	fa22 f303 	lsr.w	r3, r2, r3
 80039de:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f8:	4b61      	ldr	r3, [pc, #388]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a00:	ee07 3a90 	vmov	s15, r3
 8003a04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a08:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a0c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a24:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003a28:	e087      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a34:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003b94 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3c:	4b50      	ldr	r3, [pc, #320]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a50:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a6c:	e065      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a78:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003b98 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003a7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a88:	ee07 3a90 	vmov	s15, r3
 8003a8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a90:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a94:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ab0:	e043      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	ee07 3a90 	vmov	s15, r3
 8003ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003b9c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003ac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac4:	4b2e      	ldr	r3, [pc, #184]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ad8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003adc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af4:	e021      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b00:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003b98 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b18:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b1c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003b90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b38:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003b3a:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	0a5b      	lsrs	r3, r3, #9
 8003b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b44:	3301      	adds	r3, #1
 8003b46:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b5e:	ee17 3a90 	vmov	r3, s15
 8003b62:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003b64:	e005      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    break;
 8003b6a:	e002      	b.n	8003b72 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	; (8003b88 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003b6e:	61bb      	str	r3, [r7, #24]
    break;
 8003b70:	bf00      	nop
  }

  return sysclockfreq;
 8003b72:	69bb      	ldr	r3, [r7, #24]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3724      	adds	r7, #36	; 0x24
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	58024400 	.word	0x58024400
 8003b84:	03d09000 	.word	0x03d09000
 8003b88:	003d0900 	.word	0x003d0900
 8003b8c:	007a1200 	.word	0x007a1200
 8003b90:	46000000 	.word	0x46000000
 8003b94:	4c742400 	.word	0x4c742400
 8003b98:	4a742400 	.word	0x4a742400
 8003b9c:	4af42400 	.word	0x4af42400

08003ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ba4:	f001 f9e2 	bl	8004f6c <HAL_RCCEx_GetD1SysClockFreq>
 8003ba8:	4601      	mov	r1, r0
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <HAL_RCC_GetHCLKFreq+0x2c>)
 8003bac:	699b      	ldr	r3, [r3, #24]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4a07      	ldr	r2, [pc, #28]	; (8003bd0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	fa21 f303 	lsr.w	r3, r1, r3
 8003bbe:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003bc0:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003bc2:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	08009a4c 	.word	0x08009a4c
 8003bd4:	24000004 	.word	0x24000004

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bdc:	f7ff ffe0 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4601      	mov	r1, r0
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	091b      	lsrs	r3, r3, #4
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bee:	5cd3      	ldrb	r3, [r2, r3]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	08009a4c 	.word	0x08009a4c

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c08:	f7ff ffca 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c1a:	5cd3      	ldrb	r3, [r2, r3]
 8003c1c:	f003 031f 	and.w	r3, r3, #31
 8003c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	58024400 	.word	0x58024400
 8003c2c:	08009a4c 	.word	0x08009a4c

08003c30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c38:	2300      	movs	r3, #0
 8003c3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d03d      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c54:	d013      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c5a:	d802      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c60:	e01f      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003c62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c66:	d013      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c6c:	d01c      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003c6e:	e018      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c70:	4baf      	ldr	r3, [pc, #700]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4aae      	ldr	r2, [pc, #696]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c7c:	e015      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2102      	movs	r1, #2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 f98d 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	2102      	movs	r1, #2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 fa36 	bl	8005108 <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d109      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003cb0:	4b9f      	ldr	r3, [pc, #636]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbc:	499c      	ldr	r1, [pc, #624]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	650b      	str	r3, [r1, #80]	; 0x50
 8003cc2:	e001      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	7dfb      	ldrb	r3, [r7, #23]
 8003cc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d03d      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d826      	bhi.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003cf9 	.word	0x08003cf9
 8003ce8:	08003d07 	.word	0x08003d07
 8003cec:	08003d19 	.word	0x08003d19
 8003cf0:	08003d31 	.word	0x08003d31
 8003cf4:	08003d31 	.word	0x08003d31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf8:	4b8d      	ldr	r3, [pc, #564]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a8c      	ldr	r2, [pc, #560]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d04:	e015      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 f949 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d16:	e00c      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3324      	adds	r3, #36	; 0x24
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 f9f2 	bl	8005108 <RCCEx_PLL3_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d28:	e003      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d109      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d38:	4b7d      	ldr	r3, [pc, #500]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3c:	f023 0207 	bic.w	r2, r3, #7
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	497a      	ldr	r1, [pc, #488]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	650b      	str	r3, [r1, #80]	; 0x50
 8003d4a:	e001      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d03e      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d01c      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d804      	bhi.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003d6c:	2b40      	cmp	r3, #64	; 0x40
 8003d6e:	d00d      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d70:	e01e      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003d72:	2bc0      	cmp	r3, #192	; 0xc0
 8003d74:	d01f      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003d76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7a:	d01e      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003d7c:	e018      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7e:	4b6c      	ldr	r3, [pc, #432]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a6b      	ldr	r2, [pc, #428]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d8a:	e017      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	2100      	movs	r1, #0
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f906 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003d9c:	e00e      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	3324      	adds	r3, #36	; 0x24
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 f9af 	bl	8005108 <RCCEx_PLL3_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003dae:	e005      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	75fb      	strb	r3, [r7, #23]
      break;
 8003db4:	e002      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003db6:	bf00      	nop
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003dc2:	4b5b      	ldr	r3, [pc, #364]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	4958      	ldr	r1, [pc, #352]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	650b      	str	r3, [r1, #80]	; 0x50
 8003dd4:	e001      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d044      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df0:	d01f      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df6:	d805      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e00:	d00e      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003e02:	e01f      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003e04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e08:	d01f      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e0e:	d01e      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e10:	e018      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e12:	4b47      	ldr	r3, [pc, #284]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	4a46      	ldr	r2, [pc, #280]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e1e:	e017      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 f8bc 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003e30:	e00e      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3324      	adds	r3, #36	; 0x24
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 f965 	bl	8005108 <RCCEx_PLL3_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e42:	e005      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	75fb      	strb	r3, [r7, #23]
      break;
 8003e48:	e002      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e000      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e50:	7dfb      	ldrb	r3, [r7, #23]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e56:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e64:	4932      	ldr	r1, [pc, #200]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	658b      	str	r3, [r1, #88]	; 0x58
 8003e6a:	e001      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
 8003e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d044      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e86:	d01f      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e8c:	d805      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00a      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003e92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e96:	d00e      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003e98:	e01f      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003e9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e9e:	d01f      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ea0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea4:	d01e      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ea6:	e018      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea8:	4b21      	ldr	r3, [pc, #132]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	4a20      	ldr	r2, [pc, #128]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003eb4:	e017      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f001 f871 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003ec6:	e00e      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3324      	adds	r3, #36	; 0x24
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f001 f91a 	bl	8005108 <RCCEx_PLL3_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ed8:	e005      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003efa:	490d      	ldr	r1, [pc, #52]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	658b      	str	r3, [r1, #88]	; 0x58
 8003f00:	e001      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d035      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d00c      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003f1a:	2b10      	cmp	r3, #16
 8003f1c:	d802      	bhi.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003f22:	e017      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d00c      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003f28:	2b30      	cmp	r3, #48	; 0x30
 8003f2a:	d018      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003f2c:	e012      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003f2e:	bf00      	nop
 8003f30:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f34:	4baf      	ldr	r3, [pc, #700]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4aae      	ldr	r2, [pc, #696]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f40:	e00e      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2102      	movs	r1, #2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f001 f82b 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003f52:	e005      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	75fb      	strb	r3, [r7, #23]
      break;
 8003f58:	e002      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f60:	7dfb      	ldrb	r3, [r7, #23]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d109      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f66:	4ba3      	ldr	r3, [pc, #652]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f72:	49a0      	ldr	r1, [pc, #640]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003f78:	e001      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d042      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f92:	d01f      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003f94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f98:	d805      	bhi.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d00e      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003fa4:	e01f      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003fa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003faa:	d01f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003fac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fb0:	d01e      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003fb2:	e018      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b8f      	ldr	r3, [pc, #572]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a8e      	ldr	r2, [pc, #568]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fc0:	e017      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 ffeb 	bl	8004fa4 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fd2:	e00e      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3324      	adds	r3, #36	; 0x24
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 f894 	bl	8005108 <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003fe4:	e005      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fea:	e002      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ff2:	7dfb      	ldrb	r3, [r7, #23]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ff8:	4b7e      	ldr	r3, [pc, #504]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	497b      	ldr	r1, [pc, #492]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004006:	4313      	orrs	r3, r2
 8004008:	650b      	str	r3, [r1, #80]	; 0x50
 800400a:	e001      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
 800400e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d042      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004024:	d01b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800402a:	d805      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d022      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004036:	e01b      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004038:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800403c:	d01d      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800403e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004042:	d01c      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004048:	d01b      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800404a:	e011      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	2101      	movs	r1, #1
 8004052:	4618      	mov	r0, r3
 8004054:	f000 ffa6 	bl	8004fa4 <RCCEx_PLL2_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800405c:	e012      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3324      	adds	r3, #36	; 0x24
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f84f 	bl	8005108 <RCCEx_PLL3_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800406e:	e009      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	75fb      	strb	r3, [r7, #23]
      break;
 8004074:	e006      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004076:	bf00      	nop
 8004078:	e004      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800407a:	bf00      	nop
 800407c:	e002      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800407e:	bf00      	nop
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800408a:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004096:	4957      	ldr	r1, [pc, #348]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	650b      	str	r3, [r1, #80]	; 0x50
 800409c:	e001      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d044      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b8:	d01b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040be:	d805      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d022      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80040c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040c8:	d00a      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80040ca:	e01b      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d01d      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80040d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040d6:	d01c      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80040d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040dc:	d01b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80040de:	e011      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 ff5c 	bl	8004fa4 <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80040f0:	e012      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3324      	adds	r3, #36	; 0x24
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 f805 	bl	8005108 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004102:	e009      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
      break;
 8004108:	e006      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800410a:	bf00      	nop
 800410c:	e004      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800410e:	bf00      	nop
 8004110:	e002      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004112:	bf00      	nop
 8004114:	e000      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004118:	7dfb      	ldrb	r3, [r7, #23]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10a      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800411e:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800412c:	4931      	ldr	r1, [pc, #196]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	658b      	str	r3, [r1, #88]	; 0x58
 8004132:	e001      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7dfb      	ldrb	r3, [r7, #23]
 8004136:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004148:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800414c:	d005      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800414e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004152:	d009      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d013      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004158:	e00f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415a:	4b26      	ldr	r3, [pc, #152]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800415c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415e:	4a25      	ldr	r2, [pc, #148]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004164:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004166:	e00c      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3304      	adds	r3, #4
 800416c:	2101      	movs	r1, #1
 800416e:	4618      	mov	r0, r3
 8004170:	f000 ff18 	bl	8004fa4 <RCCEx_PLL2_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004178:	e003      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	75fb      	strb	r3, [r7, #23]
      break;
 800417e:	e000      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004182:	7dfb      	ldrb	r3, [r7, #23]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d109      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004188:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004194:	4917      	ldr	r1, [pc, #92]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	650b      	str	r3, [r1, #80]	; 0x50
 800419a:	e001      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7dfb      	ldrb	r3, [r7, #23]
 800419e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d035      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d81b      	bhi.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041f9 	.word	0x080041f9
 80041c0:	080041cd 	.word	0x080041cd
 80041c4:	080041db 	.word	0x080041db
 80041c8:	080041f9 	.word	0x080041f9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	4a08      	ldr	r2, [pc, #32]	; (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041d8:	e00f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3304      	adds	r3, #4
 80041de:	2102      	movs	r1, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fedf 	bl	8004fa4 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80041ea:	e006      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	75fb      	strb	r3, [r7, #23]
      break;
 80041f0:	e003      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
      break;
 80041f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d109      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004200:	4bba      	ldr	r3, [pc, #744]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004204:	f023 0203 	bic.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	49b7      	ldr	r1, [pc, #732]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800420e:	4313      	orrs	r3, r2
 8004210:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004212:	e001      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004214:	7dfb      	ldrb	r3, [r7, #23]
 8004216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8086 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004226:	4bb2      	ldr	r3, [pc, #712]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4ab1      	ldr	r2, [pc, #708]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800422c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004230:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004232:	f7fd fb83 	bl	800193c <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004238:	e009      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423a:	f7fd fb7f 	bl	800193c <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b64      	cmp	r3, #100	; 0x64
 8004246:	d902      	bls.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	75fb      	strb	r3, [r7, #23]
        break;
 800424c:	e005      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800424e:	4ba8      	ldr	r3, [pc, #672]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ef      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d166      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004260:	4ba2      	ldr	r3, [pc, #648]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800426a:	4053      	eors	r3, r2
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004274:	4b9d      	ldr	r3, [pc, #628]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800427e:	4b9b      	ldr	r3, [pc, #620]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a9a      	ldr	r2, [pc, #616]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800428a:	4b98      	ldr	r3, [pc, #608]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a97      	ldr	r2, [pc, #604]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004296:	4a95      	ldr	r2, [pc, #596]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042a6:	d115      	bne.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd fb48 	bl	800193c <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ae:	e00b      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd fb44 	bl	800193c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d902      	bls.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	75fb      	strb	r3, [r7, #23]
            break;
 80042c6:	e005      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c8:	4b88      	ldr	r3, [pc, #544]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ed      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d126      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e8:	d10d      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80042ea:	4b80      	ldr	r3, [pc, #512]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042f8:	0919      	lsrs	r1, r3, #4
 80042fa:	4b7e      	ldr	r3, [pc, #504]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80042fc:	400b      	ands	r3, r1
 80042fe:	497b      	ldr	r1, [pc, #492]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004300:	4313      	orrs	r3, r2
 8004302:	610b      	str	r3, [r1, #16]
 8004304:	e005      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004306:	4b79      	ldr	r3, [pc, #484]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	4a78      	ldr	r2, [pc, #480]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800430c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004310:	6113      	str	r3, [r2, #16]
 8004312:	4b76      	ldr	r3, [pc, #472]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800431c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004320:	4972      	ldr	r1, [pc, #456]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004322:	4313      	orrs	r3, r2
 8004324:	670b      	str	r3, [r1, #112]	; 0x70
 8004326:	e004      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	75bb      	strb	r3, [r7, #22]
 800432c:	e001      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	7dfb      	ldrb	r3, [r7, #23]
 8004330:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d07d      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004342:	2b28      	cmp	r3, #40	; 0x28
 8004344:	d866      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	0800441b 	.word	0x0800441b
 8004350:	08004415 	.word	0x08004415
 8004354:	08004415 	.word	0x08004415
 8004358:	08004415 	.word	0x08004415
 800435c:	08004415 	.word	0x08004415
 8004360:	08004415 	.word	0x08004415
 8004364:	08004415 	.word	0x08004415
 8004368:	08004415 	.word	0x08004415
 800436c:	080043f1 	.word	0x080043f1
 8004370:	08004415 	.word	0x08004415
 8004374:	08004415 	.word	0x08004415
 8004378:	08004415 	.word	0x08004415
 800437c:	08004415 	.word	0x08004415
 8004380:	08004415 	.word	0x08004415
 8004384:	08004415 	.word	0x08004415
 8004388:	08004415 	.word	0x08004415
 800438c:	08004403 	.word	0x08004403
 8004390:	08004415 	.word	0x08004415
 8004394:	08004415 	.word	0x08004415
 8004398:	08004415 	.word	0x08004415
 800439c:	08004415 	.word	0x08004415
 80043a0:	08004415 	.word	0x08004415
 80043a4:	08004415 	.word	0x08004415
 80043a8:	08004415 	.word	0x08004415
 80043ac:	0800441b 	.word	0x0800441b
 80043b0:	08004415 	.word	0x08004415
 80043b4:	08004415 	.word	0x08004415
 80043b8:	08004415 	.word	0x08004415
 80043bc:	08004415 	.word	0x08004415
 80043c0:	08004415 	.word	0x08004415
 80043c4:	08004415 	.word	0x08004415
 80043c8:	08004415 	.word	0x08004415
 80043cc:	0800441b 	.word	0x0800441b
 80043d0:	08004415 	.word	0x08004415
 80043d4:	08004415 	.word	0x08004415
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004415 	.word	0x08004415
 80043e0:	08004415 	.word	0x08004415
 80043e4:	08004415 	.word	0x08004415
 80043e8:	08004415 	.word	0x08004415
 80043ec:	0800441b 	.word	0x0800441b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	2101      	movs	r1, #1
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fdd4 	bl	8004fa4 <RCCEx_PLL2_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004400:	e00c      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3324      	adds	r3, #36	; 0x24
 8004406:	2101      	movs	r1, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fe7d 	bl	8005108 <RCCEx_PLL3_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004412:	e003      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	75fb      	strb	r3, [r7, #23]
      break;
 8004418:	e000      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800441a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441c:	7dfb      	ldrb	r3, [r7, #23]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d109      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004422:	4b32      	ldr	r3, [pc, #200]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800442e:	492f      	ldr	r1, [pc, #188]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	654b      	str	r3, [r1, #84]	; 0x54
 8004434:	e001      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	7dfb      	ldrb	r3, [r7, #23]
 8004438:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d037      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	2b05      	cmp	r3, #5
 800444c:	d820      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800444e:	a201      	add	r2, pc, #4	; (adr r2, 8004454 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004454:	08004497 	.word	0x08004497
 8004458:	0800446d 	.word	0x0800446d
 800445c:	0800447f 	.word	0x0800447f
 8004460:	08004497 	.word	0x08004497
 8004464:	08004497 	.word	0x08004497
 8004468:	08004497 	.word	0x08004497
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	2101      	movs	r1, #1
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fd96 	bl	8004fa4 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800447c:	e00c      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3324      	adds	r3, #36	; 0x24
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fe3f 	bl	8005108 <RCCEx_PLL3_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800448e:	e003      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
      break;
 8004494:	e000      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004498:	7dfb      	ldrb	r3, [r7, #23]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800449e:	4b13      	ldr	r3, [pc, #76]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	f023 0207 	bic.w	r2, r3, #7
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044aa:	4910      	ldr	r1, [pc, #64]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	654b      	str	r3, [r1, #84]	; 0x54
 80044b0:	e001      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0304 	and.w	r3, r3, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d040      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d827      	bhi.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80044cc:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	08004523 	.word	0x08004523
 80044d8:	080044f9 	.word	0x080044f9
 80044dc:	0800450b 	.word	0x0800450b
 80044e0:	08004523 	.word	0x08004523
 80044e4:	08004523 	.word	0x08004523
 80044e8:	08004523 	.word	0x08004523
 80044ec:	58024400 	.word	0x58024400
 80044f0:	58024800 	.word	0x58024800
 80044f4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3304      	adds	r3, #4
 80044fc:	2101      	movs	r1, #1
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 fd50 	bl	8004fa4 <RCCEx_PLL2_Config>
 8004504:	4603      	mov	r3, r0
 8004506:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004508:	e00c      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	3324      	adds	r3, #36	; 0x24
 800450e:	2101      	movs	r1, #1
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fdf9 	bl	8005108 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
      break;
 8004520:	e000      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004522:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800452a:	4bb3      	ldr	r3, [pc, #716]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	f023 0207 	bic.w	r2, r3, #7
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	49af      	ldr	r1, [pc, #700]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800453a:	4313      	orrs	r3, r2
 800453c:	658b      	str	r3, [r1, #88]	; 0x58
 800453e:	e001      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d044      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800455a:	d01b      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800455c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004560:	d805      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004562:	2b00      	cmp	r3, #0
 8004564:	d022      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800456a:	d00a      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800456c:	e01b      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d01d      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004578:	d01c      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800457a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800457e:	d01b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004580:	e011      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3304      	adds	r3, #4
 8004586:	2100      	movs	r1, #0
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fd0b 	bl	8004fa4 <RCCEx_PLL2_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004592:	e012      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3324      	adds	r3, #36	; 0x24
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fdb4 	bl	8005108 <RCCEx_PLL3_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80045a4:	e009      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
      break;
 80045aa:	e006      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045ac:	bf00      	nop
 80045ae:	e004      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045b0:	bf00      	nop
 80045b2:	e002      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045b4:	bf00      	nop
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80045b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045c0:	4b8d      	ldr	r3, [pc, #564]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ce:	498a      	ldr	r1, [pc, #552]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	654b      	str	r3, [r1, #84]	; 0x54
 80045d4:	e001      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d044      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f0:	d01b      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80045f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f6:	d805      	bhi.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d022      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004602:	e01b      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004608:	d01d      	beq.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800460a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800460e:	d01c      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004610:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004614:	d01b      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004616:	e011      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fcc0 	bl	8004fa4 <RCCEx_PLL2_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004628:	e012      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3324      	adds	r3, #36	; 0x24
 800462e:	2102      	movs	r1, #2
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fd69 	bl	8005108 <RCCEx_PLL3_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800463a:	e009      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	75fb      	strb	r3, [r7, #23]
      break;
 8004640:	e006      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004642:	bf00      	nop
 8004644:	e004      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800464e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004656:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004664:	4964      	ldr	r1, [pc, #400]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004666:	4313      	orrs	r3, r2
 8004668:	658b      	str	r3, [r1, #88]	; 0x58
 800466a:	e001      	b.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d044      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004686:	d01b      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800468c:	d805      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d022      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004698:	e01b      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800469a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469e:	d01d      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80046a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80046a4:	d01c      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80046a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046aa:	d01b      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80046ac:	e011      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fc75 	bl	8004fa4 <RCCEx_PLL2_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046be:	e012      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	2102      	movs	r1, #2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fd1e 	bl	8005108 <RCCEx_PLL3_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80046d0:	e009      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
      break;
 80046d6:	e006      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80046d8:	bf00      	nop
 80046da:	e004      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80046dc:	bf00      	nop
 80046de:	e002      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80046e0:	bf00      	nop
 80046e2:	e000      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80046e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046ec:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046fa:	493f      	ldr	r1, [pc, #252]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004700:	e001      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004702:	7dfb      	ldrb	r3, [r7, #23]
 8004704:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01b      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800471c:	d10b      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3324      	adds	r3, #36	; 0x24
 8004722:	2102      	movs	r1, #2
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fcef 	bl	8005108 <RCCEx_PLL3_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00c      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	75bb      	strb	r3, [r7, #22]
 8004734:	e009      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004736:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004744:	492c      	ldr	r1, [pc, #176]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004746:	4313      	orrs	r3, r2
 8004748:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01b      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d10b      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3324      	adds	r3, #36	; 0x24
 8004766:	2102      	movs	r1, #2
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fccd 	bl	8005108 <RCCEx_PLL3_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00c      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	75bb      	strb	r3, [r7, #22]
 8004778:	e009      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004788:	491b      	ldr	r1, [pc, #108]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d032      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a4:	d00d      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80047a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047aa:	d016      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d111      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3304      	adds	r3, #4
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fbf4 	bl	8004fa4 <RCCEx_PLL2_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047c0:	e00c      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3324      	adds	r3, #36	; 0x24
 80047c6:	2102      	movs	r1, #2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 fc9d 	bl	8005108 <RCCEx_PLL3_Config>
 80047ce:	4603      	mov	r3, r0
 80047d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80047d2:	e003      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	75fb      	strb	r3, [r7, #23]
      break;
 80047d8:	e000      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80047da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10c      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047f0:	4901      	ldr	r1, [pc, #4]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	658b      	str	r3, [r1, #88]	; 0x58
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80047f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d02f      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004816:	d00c      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004818:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800481c:	d015      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800481e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004822:	d10f      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004824:	4b79      	ldr	r3, [pc, #484]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4a78      	ldr	r2, [pc, #480]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800482a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004830:	e00c      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3324      	adds	r3, #36	; 0x24
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fc65 	bl	8005108 <RCCEx_PLL3_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004842:	e003      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	75fb      	strb	r3, [r7, #23]
      break;
 8004848:	e000      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800484a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004852:	4b6e      	ldr	r3, [pc, #440]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004860:	496a      	ldr	r1, [pc, #424]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	654b      	str	r3, [r1, #84]	; 0x54
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d029      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d007      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004886:	e00f      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004888:	4b60      	ldr	r3, [pc, #384]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	4a5f      	ldr	r2, [pc, #380]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800488e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004892:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004894:	e00b      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3304      	adds	r3, #4
 800489a:	2102      	movs	r1, #2
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fb81 	bl	8004fa4 <RCCEx_PLL2_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80048a6:	e002      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	75fb      	strb	r3, [r7, #23]
      break;
 80048ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80048b4:	4b55      	ldr	r3, [pc, #340]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c0:	4952      	ldr	r1, [pc, #328]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80048c6:	e001      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	2102      	movs	r1, #2
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fc12 	bl	8005108 <RCCEx_PLL3_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02f      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004902:	d00c      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004908:	d802      	bhi.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d011      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800490e:	e00d      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004914:	d00f      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800491a:	d00e      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 800491c:	e006      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800491e:	4b3b      	ldr	r3, [pc, #236]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	4a3a      	ldr	r2, [pc, #232]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800492a:	e007      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	75fb      	strb	r3, [r7, #23]
      break;
 8004930:	e004      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004932:	bf00      	nop
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004936:	bf00      	nop
 8004938:	e000      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 800493a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004942:	4b32      	ldr	r3, [pc, #200]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494e:	492f      	ldr	r1, [pc, #188]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	654b      	str	r3, [r1, #84]	; 0x54
 8004954:	e001      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004956:	7dfb      	ldrb	r3, [r7, #23]
 8004958:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004966:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4926      	ldr	r1, [pc, #152]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004974:	4313      	orrs	r3, r2
 8004976:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004984:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004992:	491e      	ldr	r1, [pc, #120]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d008      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b0:	4916      	ldr	r1, [pc, #88]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00d      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049c2:	4b12      	ldr	r3, [pc, #72]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80049cc:	6113      	str	r3, [r2, #16]
 80049ce:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80049d8:	490c      	ldr	r1, [pc, #48]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	da08      	bge.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f2:	4906      	ldr	r1, [pc, #24]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80049f8:	7dbb      	ldrb	r3, [r7, #22]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	58024400 	.word	0x58024400

08004a10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a14:	f7ff f8c4 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8004a18:	4601      	mov	r1, r0
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	f003 0307 	and.w	r3, r3, #7
 8004a24:	4a04      	ldr	r2, [pc, #16]	; (8004a38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a26:	5cd3      	ldrb	r3, [r2, r3]
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	58024400 	.word	0x58024400
 8004a38:	08009a4c 	.word	0x08009a4c

08004a3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b089      	sub	sp, #36	; 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a44:	4b9d      	ldr	r3, [pc, #628]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004a4e:	4b9b      	ldr	r3, [pc, #620]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	0b1b      	lsrs	r3, r3, #12
 8004a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a58:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004a5a:	4b98      	ldr	r3, [pc, #608]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004a64:	4b95      	ldr	r3, [pc, #596]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	08db      	lsrs	r3, r3, #3
 8004a6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 810a 	beq.w	8004c9c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d05a      	beq.n	8004b44 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d302      	bcc.n	8004a98 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d078      	beq.n	8004b88 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004a96:	e099      	b.n	8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a98:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0320 	and.w	r3, r3, #32
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d02d      	beq.n	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004aa4:	4b85      	ldr	r3, [pc, #532]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	08db      	lsrs	r3, r3, #3
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	4a84      	ldr	r2, [pc, #528]	; (8004cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ace:	4b7b      	ldr	r3, [pc, #492]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004afe:	e087      	b.n	8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b6a      	ldr	r3, [pc, #424]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b42:	e065      	b.n	8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b56:	4b59      	ldr	r3, [pc, #356]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b86:	e043      	b.n	8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	ee07 3a90 	vmov	s15, r3
 8004b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b9a:	4b48      	ldr	r3, [pc, #288]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004baa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bca:	e021      	b.n	8004c10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	ee07 3a90 	vmov	s15, r3
 8004bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bde:	4b37      	ldr	r3, [pc, #220]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c10:	4b2a      	ldr	r3, [pc, #168]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	0a5b      	lsrs	r3, r3, #9
 8004c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c36:	ee17 2a90 	vmov	r2, s15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004c3e:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c64:	ee17 2a90 	vmov	r2, s15
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	0e1b      	lsrs	r3, r3, #24
 8004c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c92:	ee17 2a90 	vmov	r2, s15
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c9a:	e008      	b.n	8004cae <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
}
 8004cae:	bf00      	nop
 8004cb0:	3724      	adds	r7, #36	; 0x24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
 8004cc0:	03d09000 	.word	0x03d09000
 8004cc4:	46000000 	.word	0x46000000
 8004cc8:	4c742400 	.word	0x4c742400
 8004ccc:	4a742400 	.word	0x4a742400
 8004cd0:	4af42400 	.word	0x4af42400

08004cd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b089      	sub	sp, #36	; 0x24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cdc:	4b9d      	ldr	r3, [pc, #628]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0303 	and.w	r3, r3, #3
 8004ce4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004ce6:	4b9b      	ldr	r3, [pc, #620]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cea:	0d1b      	lsrs	r3, r3, #20
 8004cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf0:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004cf2:	4b98      	ldr	r3, [pc, #608]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004cfc:	4b95      	ldr	r3, [pc, #596]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d00:	08db      	lsrs	r3, r3, #3
 8004d02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d14:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 810a 	beq.w	8004f34 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d05a      	beq.n	8004ddc <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d302      	bcc.n	8004d30 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d078      	beq.n	8004e20 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004d2e:	e099      	b.n	8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d30:	4b88      	ldr	r3, [pc, #544]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0320 	and.w	r3, r3, #32
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02d      	beq.n	8004d98 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d3c:	4b85      	ldr	r3, [pc, #532]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	08db      	lsrs	r3, r3, #3
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	4a84      	ldr	r2, [pc, #528]	; (8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
 8004d4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	ee07 3a90 	vmov	s15, r3
 8004d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d66:	4b7b      	ldr	r3, [pc, #492]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004d96:	e087      	b.n	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f60 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004daa:	4b6a      	ldr	r3, [pc, #424]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dda:	e065      	b.n	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dee:	4b59      	ldr	r3, [pc, #356]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e1e:	e043      	b.n	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e32:	4b48      	ldr	r3, [pc, #288]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3a:	ee07 3a90 	vmov	s15, r3
 8004e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e62:	e021      	b.n	8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e76:	4b37      	ldr	r3, [pc, #220]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	ee07 3a90 	vmov	s15, r3
 8004e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f5c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ea6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004ea8:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	0a5b      	lsrs	r3, r3, #9
 8004eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ece:	ee17 2a90 	vmov	r2, s15
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ed6:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	0c1b      	lsrs	r3, r3, #16
 8004edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee0:	ee07 3a90 	vmov	s15, r3
 8004ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004efc:	ee17 2a90 	vmov	r2, s15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f04:	4b13      	ldr	r3, [pc, #76]	; (8004f54 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	0e1b      	lsrs	r3, r3, #24
 8004f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f2a:	ee17 2a90 	vmov	r2, s15
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004f32:	e008      	b.n	8004f46 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
}
 8004f46:	bf00      	nop
 8004f48:	3724      	adds	r7, #36	; 0x24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	58024400 	.word	0x58024400
 8004f58:	03d09000 	.word	0x03d09000
 8004f5c:	46000000 	.word	0x46000000
 8004f60:	4c742400 	.word	0x4c742400
 8004f64:	4a742400 	.word	0x4a742400
 8004f68:	4af42400 	.word	0x4af42400

08004f6c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f70:	f7fe fca4 	bl	80038bc <HAL_RCC_GetSysClockFreq>
 8004f74:	4601      	mov	r1, r0
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	4a06      	ldr	r2, [pc, #24]	; (8004f9c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8004f82:	5cd3      	ldrb	r3, [r2, r3]
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	fa21 f303 	lsr.w	r3, r1, r3
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004f8e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004f90:	4b03      	ldr	r3, [pc, #12]	; (8004fa0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8004f92:	681b      	ldr	r3, [r3, #0]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	58024400 	.word	0x58024400
 8004f9c:	08009a4c 	.word	0x08009a4c
 8004fa0:	24000000 	.word	0x24000000

08004fa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fb2:	4b53      	ldr	r3, [pc, #332]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d101      	bne.n	8004fc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e099      	b.n	80050f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004fc2:	4b4f      	ldr	r3, [pc, #316]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a4e      	ldr	r2, [pc, #312]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fce:	f7fc fcb5 	bl	800193c <HAL_GetTick>
 8004fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fd4:	e008      	b.n	8004fe8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004fd6:	f7fc fcb1 	bl	800193c <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d901      	bls.n	8004fe8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e086      	b.n	80050f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fe8:	4b45      	ldr	r3, [pc, #276]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f0      	bne.n	8004fd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ff4:	4b42      	ldr	r3, [pc, #264]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	031b      	lsls	r3, r3, #12
 8005002:	493f      	ldr	r1, [pc, #252]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	628b      	str	r3, [r1, #40]	; 0x28
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	3b01      	subs	r3, #1
 800500e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	3b01      	subs	r3, #1
 8005018:	025b      	lsls	r3, r3, #9
 800501a:	b29b      	uxth	r3, r3
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	3b01      	subs	r3, #1
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800502a:	431a      	orrs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	3b01      	subs	r3, #1
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005038:	4931      	ldr	r1, [pc, #196]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800503e:	4b30      	ldr	r3, [pc, #192]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	492d      	ldr	r1, [pc, #180]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 800504c:	4313      	orrs	r3, r2
 800504e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005050:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	f023 0220 	bic.w	r2, r3, #32
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	4928      	ldr	r1, [pc, #160]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 800505e:	4313      	orrs	r3, r2
 8005060:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005062:	4b27      	ldr	r3, [pc, #156]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	4a26      	ldr	r2, [pc, #152]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <RCCEx_PLL2_Config+0x160>)
 8005074:	4013      	ands	r3, r2
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	69d2      	ldr	r2, [r2, #28]
 800507a:	00d2      	lsls	r2, r2, #3
 800507c:	4920      	ldr	r1, [pc, #128]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005082:	4b1f      	ldr	r3, [pc, #124]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005088:	f043 0310 	orr.w	r3, r3, #16
 800508c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	4a19      	ldr	r2, [pc, #100]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 800509a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800509e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050a0:	e00f      	b.n	80050c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d106      	bne.n	80050b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050a8:	4b15      	ldr	r3, [pc, #84]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	4a14      	ldr	r2, [pc, #80]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050b4:	e005      	b.n	80050c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80050b6:	4b12      	ldr	r3, [pc, #72]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	4a11      	ldr	r2, [pc, #68]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80050c2:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ce:	f7fc fc35 	bl	800193c <HAL_GetTick>
 80050d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050d4:	e008      	b.n	80050e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050d6:	f7fc fc31 	bl	800193c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e006      	b.n	80050f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	58024400 	.word	0x58024400
 8005104:	ffff0007 	.word	0xffff0007

08005108 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005116:	4b53      	ldr	r3, [pc, #332]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	2b03      	cmp	r3, #3
 8005120:	d101      	bne.n	8005126 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e099      	b.n	800525a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005126:	4b4f      	ldr	r3, [pc, #316]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4e      	ldr	r2, [pc, #312]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800512c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fc fc03 	bl	800193c <HAL_GetTick>
 8005136:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005138:	e008      	b.n	800514c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800513a:	f7fc fbff 	bl	800193c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e086      	b.n	800525a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800514c:	4b45      	ldr	r3, [pc, #276]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f0      	bne.n	800513a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005158:	4b42      	ldr	r3, [pc, #264]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	051b      	lsls	r3, r3, #20
 8005166:	493f      	ldr	r1, [pc, #252]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005168:	4313      	orrs	r3, r2
 800516a:	628b      	str	r3, [r1, #40]	; 0x28
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	3b01      	subs	r3, #1
 8005172:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	3b01      	subs	r3, #1
 800517c:	025b      	lsls	r3, r3, #9
 800517e:	b29b      	uxth	r3, r3
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	3b01      	subs	r3, #1
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	3b01      	subs	r3, #1
 8005196:	061b      	lsls	r3, r3, #24
 8005198:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800519c:	4931      	ldr	r1, [pc, #196]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051a2:	4b30      	ldr	r3, [pc, #192]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	492d      	ldr	r1, [pc, #180]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80051b4:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	4928      	ldr	r1, [pc, #160]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80051c6:	4b27      	ldr	r3, [pc, #156]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	4a26      	ldr	r2, [pc, #152]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051d2:	4b24      	ldr	r3, [pc, #144]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d6:	4b24      	ldr	r3, [pc, #144]	; (8005268 <RCCEx_PLL3_Config+0x160>)
 80051d8:	4013      	ands	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	69d2      	ldr	r2, [r2, #28]
 80051de:	00d2      	lsls	r2, r2, #3
 80051e0:	4920      	ldr	r1, [pc, #128]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051e6:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 80051fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005202:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005204:	e00f      	b.n	8005226 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800520c:	4b15      	ldr	r3, [pc, #84]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005210:	4a14      	ldr	r2, [pc, #80]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005212:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005216:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005218:	e005      	b.n	8005226 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800521a:	4b12      	ldr	r3, [pc, #72]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	4a11      	ldr	r2, [pc, #68]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005224:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a0e      	ldr	r2, [pc, #56]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fc fb83 	bl	800193c <HAL_GetTick>
 8005236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005238:	e008      	b.n	800524c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800523a:	f7fc fb7f 	bl	800193c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e006      	b.n	800525a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <RCCEx_PLL3_Config+0x15c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	ffff0007 	.word	0xffff0007

0800526c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e01d      	b.n	80052ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fc f874 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f000 fb6e 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e01d      	b.n	8005310 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f815 	bl	8005318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2202      	movs	r2, #2
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	4619      	mov	r1, r3
 8005300:	4610      	mov	r0, r2
 8005302:	f000 fb43 	bl	800598c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d122      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b02      	cmp	r3, #2
 800534e:	d11b      	bne.n	8005388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0202 	mvn.w	r2, #2
 8005358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 faee 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005374:	e005      	b.n	8005382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fae0 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 faf1 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d122      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fac4 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 fab6 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fac7 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d122      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0308 	and.w	r3, r3, #8
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d11b      	bne.n	8005430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0208 	mvn.w	r2, #8
 8005400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2204      	movs	r2, #4
 8005406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d003      	beq.n	800541e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa9a 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 800541c:	e005      	b.n	800542a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa8c 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa9d 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b10      	cmp	r3, #16
 800543c:	d122      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b10      	cmp	r3, #16
 800544a:	d11b      	bne.n	8005484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f06f 0210 	mvn.w	r2, #16
 8005454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2208      	movs	r2, #8
 800545a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	69db      	ldr	r3, [r3, #28]
 8005462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa70 	bl	8005950 <HAL_TIM_IC_CaptureCallback>
 8005470:	e005      	b.n	800547e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 fa62 	bl	800593c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fa73 	bl	8005964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d10e      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0201 	mvn.w	r2, #1
 80054a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fc f856 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d10e      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d107      	bne.n	80054dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fec4 	bl	8006264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ea:	d10e      	bne.n	800550a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d107      	bne.n	800550a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 feb7 	bl	8006278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d10e      	bne.n	8005536 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d107      	bne.n	8005536 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fa21 	bl	8005978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b20      	cmp	r3, #32
 8005542:	d10e      	bne.n	8005562 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d107      	bne.n	8005562 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0220 	mvn.w	r2, #32
 800555a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fe77 	bl	8006250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005582:	2302      	movs	r3, #2
 8005584:	e105      	b.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2202      	movs	r2, #2
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b14      	cmp	r3, #20
 800559a:	f200 80f0 	bhi.w	800577e <HAL_TIM_PWM_ConfigChannel+0x212>
 800559e:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	080055f9 	.word	0x080055f9
 80055a8:	0800577f 	.word	0x0800577f
 80055ac:	0800577f 	.word	0x0800577f
 80055b0:	0800577f 	.word	0x0800577f
 80055b4:	08005639 	.word	0x08005639
 80055b8:	0800577f 	.word	0x0800577f
 80055bc:	0800577f 	.word	0x0800577f
 80055c0:	0800577f 	.word	0x0800577f
 80055c4:	0800567b 	.word	0x0800567b
 80055c8:	0800577f 	.word	0x0800577f
 80055cc:	0800577f 	.word	0x0800577f
 80055d0:	0800577f 	.word	0x0800577f
 80055d4:	080056bb 	.word	0x080056bb
 80055d8:	0800577f 	.word	0x0800577f
 80055dc:	0800577f 	.word	0x0800577f
 80055e0:	0800577f 	.word	0x0800577f
 80055e4:	080056fd 	.word	0x080056fd
 80055e8:	0800577f 	.word	0x0800577f
 80055ec:	0800577f 	.word	0x0800577f
 80055f0:	0800577f 	.word	0x0800577f
 80055f4:	0800573d 	.word	0x0800573d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68b9      	ldr	r1, [r7, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fa5e 	bl	8005ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0208 	orr.w	r2, r2, #8
 8005612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0204 	bic.w	r2, r2, #4
 8005622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	6999      	ldr	r1, [r3, #24]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	691a      	ldr	r2, [r3, #16]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	619a      	str	r2, [r3, #24]
      break;
 8005636:	e0a3      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	4618      	mov	r0, r3
 8005640:	f000 face 	bl	8005be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699a      	ldr	r2, [r3, #24]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6999      	ldr	r1, [r3, #24]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	619a      	str	r2, [r3, #24]
      break;
 8005678:	e082      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fb37 	bl	8005cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0208 	orr.w	r2, r2, #8
 8005694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69da      	ldr	r2, [r3, #28]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0204 	bic.w	r2, r2, #4
 80056a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69d9      	ldr	r1, [r3, #28]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	61da      	str	r2, [r3, #28]
      break;
 80056b8:	e062      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68b9      	ldr	r1, [r7, #8]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fb9d 	bl	8005e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69da      	ldr	r2, [r3, #28]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69d9      	ldr	r1, [r3, #28]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	021a      	lsls	r2, r3, #8
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	61da      	str	r2, [r3, #28]
      break;
 80056fa:	e041      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 fbe4 	bl	8005ed0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0208 	orr.w	r2, r2, #8
 8005716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0204 	bic.w	r2, r2, #4
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800573a:	e021      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 fc26 	bl	8005f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005756:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	021a      	lsls	r2, r3, #8
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800577c:	e000      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800577e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop

0800579c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d101      	bne.n	80057b4 <HAL_TIM_ConfigClockSource+0x18>
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0b7      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x188>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2202      	movs	r2, #2
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4b57      	ldr	r3, [pc, #348]	; (800592c <HAL_TIM_ConfigClockSource+0x190>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b70      	cmp	r3, #112	; 0x70
 80057ea:	d02e      	beq.n	800584a <HAL_TIM_ConfigClockSource+0xae>
 80057ec:	2b70      	cmp	r3, #112	; 0x70
 80057ee:	d812      	bhi.n	8005816 <HAL_TIM_ConfigClockSource+0x7a>
 80057f0:	2b30      	cmp	r3, #48	; 0x30
 80057f2:	f000 8084 	beq.w	80058fe <HAL_TIM_ConfigClockSource+0x162>
 80057f6:	2b30      	cmp	r3, #48	; 0x30
 80057f8:	d806      	bhi.n	8005808 <HAL_TIM_ConfigClockSource+0x6c>
 80057fa:	2b10      	cmp	r3, #16
 80057fc:	d07f      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d07d      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d07b      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005806:	e084      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005808:	2b50      	cmp	r3, #80	; 0x50
 800580a:	d048      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x102>
 800580c:	2b60      	cmp	r3, #96	; 0x60
 800580e:	d056      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x122>
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d064      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005814:	e07d      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005816:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800581a:	d070      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
 800581c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005820:	d809      	bhi.n	8005836 <HAL_TIM_ConfigClockSource+0x9a>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005826:	d027      	beq.n	8005878 <HAL_TIM_ConfigClockSource+0xdc>
 8005828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800582c:	d067      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005832:	d06d      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005834:	e06d      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005836:	4a3e      	ldr	r2, [pc, #248]	; (8005930 <HAL_TIM_ConfigClockSource+0x194>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d060      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
 800583c:	4a3d      	ldr	r2, [pc, #244]	; (8005934 <HAL_TIM_ConfigClockSource+0x198>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d05d      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
 8005842:	4a3d      	ldr	r2, [pc, #244]	; (8005938 <HAL_TIM_ConfigClockSource+0x19c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d05a      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005848:	e063      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6899      	ldr	r1, [r3, #8]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f000 fc7d 	bl	8006158 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800586c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	609a      	str	r2, [r3, #8]
      break;
 8005876:	e04c      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	6899      	ldr	r1, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f000 fc66 	bl	8006158 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800589a:	609a      	str	r2, [r3, #8]
      break;
 800589c:	e039      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fbd6 	bl	800605c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2150      	movs	r1, #80	; 0x50
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fc30 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 80058bc:	e029      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 fbf5 	bl	80060ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2160      	movs	r1, #96	; 0x60
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fc20 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 80058dc:	e019      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fbb6 	bl	800605c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fc10 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 80058fc:	e009      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	4610      	mov	r0, r2
 800590a:	f000 fc07 	bl	800611c <TIM_ITRx_SetConfig>
      break;
 800590e:	e000      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005910:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	ffceff88 	.word	0xffceff88
 8005930:	00100030 	.word	0x00100030
 8005934:	00100040 	.word	0x00100040
 8005938:	00100020 	.word	0x00100020

0800593c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a40      	ldr	r2, [pc, #256]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059aa:	d00f      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3d      	ldr	r2, [pc, #244]	; (8005aa4 <TIM_Base_SetConfig+0x118>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3c      	ldr	r2, [pc, #240]	; (8005aa8 <TIM_Base_SetConfig+0x11c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a3b      	ldr	r2, [pc, #236]	; (8005aac <TIM_Base_SetConfig+0x120>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_Base_SetConfig+0x40>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a3a      	ldr	r2, [pc, #232]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d108      	bne.n	80059de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2f      	ldr	r2, [pc, #188]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01f      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ec:	d01b      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2c      	ldr	r2, [pc, #176]	; (8005aa4 <TIM_Base_SetConfig+0x118>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d017      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <TIM_Base_SetConfig+0x11c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2a      	ldr	r2, [pc, #168]	; (8005aac <TIM_Base_SetConfig+0x120>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a28      	ldr	r2, [pc, #160]	; (8005ab4 <TIM_Base_SetConfig+0x128>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <TIM_Base_SetConfig+0x12c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_Base_SetConfig+0x9a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a26      	ldr	r2, [pc, #152]	; (8005abc <TIM_Base_SetConfig+0x130>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d108      	bne.n	8005a38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a10      	ldr	r2, [pc, #64]	; (8005aa0 <TIM_Base_SetConfig+0x114>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00f      	beq.n	8005a84 <TIM_Base_SetConfig+0xf8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a12      	ldr	r2, [pc, #72]	; (8005ab0 <TIM_Base_SetConfig+0x124>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00b      	beq.n	8005a84 <TIM_Base_SetConfig+0xf8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <TIM_Base_SetConfig+0x128>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_Base_SetConfig+0xf8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a10      	ldr	r2, [pc, #64]	; (8005ab8 <TIM_Base_SetConfig+0x12c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_Base_SetConfig+0xf8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a0f      	ldr	r2, [pc, #60]	; (8005abc <TIM_Base_SetConfig+0x130>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d103      	bne.n	8005a8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	615a      	str	r2, [r3, #20]
}
 8005a92:	bf00      	nop
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40010000 	.word	0x40010000
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40010400 	.word	0x40010400
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40014400 	.word	0x40014400
 8005abc:	40014800 	.word	0x40014800

08005ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4b37      	ldr	r3, [pc, #220]	; (8005bc8 <TIM_OC1_SetConfig+0x108>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f023 0302 	bic.w	r3, r3, #2
 8005b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a2d      	ldr	r2, [pc, #180]	; (8005bcc <TIM_OC1_SetConfig+0x10c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d00f      	beq.n	8005b3c <TIM_OC1_SetConfig+0x7c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a2c      	ldr	r2, [pc, #176]	; (8005bd0 <TIM_OC1_SetConfig+0x110>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_OC1_SetConfig+0x7c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a2b      	ldr	r2, [pc, #172]	; (8005bd4 <TIM_OC1_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_OC1_SetConfig+0x7c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <TIM_OC1_SetConfig+0x118>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC1_SetConfig+0x7c>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a29      	ldr	r2, [pc, #164]	; (8005bdc <TIM_OC1_SetConfig+0x11c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d10c      	bne.n	8005b56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f023 0308 	bic.w	r3, r3, #8
 8005b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f023 0304 	bic.w	r3, r3, #4
 8005b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1c      	ldr	r2, [pc, #112]	; (8005bcc <TIM_OC1_SetConfig+0x10c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d00f      	beq.n	8005b7e <TIM_OC1_SetConfig+0xbe>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <TIM_OC1_SetConfig+0x110>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00b      	beq.n	8005b7e <TIM_OC1_SetConfig+0xbe>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <TIM_OC1_SetConfig+0x114>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d007      	beq.n	8005b7e <TIM_OC1_SetConfig+0xbe>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <TIM_OC1_SetConfig+0x118>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d003      	beq.n	8005b7e <TIM_OC1_SetConfig+0xbe>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <TIM_OC1_SetConfig+0x11c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d111      	bne.n	8005ba2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	fffeff8f 	.word	0xfffeff8f
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f023 0210 	bic.w	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <TIM_OC2_SetConfig+0xfc>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f023 0320 	bic.w	r3, r3, #32
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a29      	ldr	r2, [pc, #164]	; (8005ce0 <TIM_OC2_SetConfig+0x100>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC2_SetConfig+0x68>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a28      	ldr	r2, [pc, #160]	; (8005ce4 <TIM_OC2_SetConfig+0x104>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10d      	bne.n	8005c64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <TIM_OC2_SetConfig+0x100>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_OC2_SetConfig+0xac>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ce4 <TIM_OC2_SetConfig+0x104>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_OC2_SetConfig+0xac>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a1c      	ldr	r2, [pc, #112]	; (8005ce8 <TIM_OC2_SetConfig+0x108>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_OC2_SetConfig+0xac>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a1b      	ldr	r2, [pc, #108]	; (8005cec <TIM_OC2_SetConfig+0x10c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC2_SetConfig+0xac>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1a      	ldr	r2, [pc, #104]	; (8005cf0 <TIM_OC2_SetConfig+0x110>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d113      	bne.n	8005cb4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	feff8fff 	.word	0xfeff8fff
 8005ce0:	40010000 	.word	0x40010000
 8005ce4:	40010400 	.word	0x40010400
 8005ce8:	40014000 	.word	0x40014000
 8005cec:	40014400 	.word	0x40014400
 8005cf0:	40014800 	.word	0x40014800

08005cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a27      	ldr	r2, [pc, #156]	; (8005dec <TIM_OC3_SetConfig+0xf8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_OC3_SetConfig+0x66>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a26      	ldr	r2, [pc, #152]	; (8005df0 <TIM_OC3_SetConfig+0xfc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d10d      	bne.n	8005d76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a1c      	ldr	r2, [pc, #112]	; (8005dec <TIM_OC3_SetConfig+0xf8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00f      	beq.n	8005d9e <TIM_OC3_SetConfig+0xaa>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <TIM_OC3_SetConfig+0xfc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_OC3_SetConfig+0xaa>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <TIM_OC3_SetConfig+0x100>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d007      	beq.n	8005d9e <TIM_OC3_SetConfig+0xaa>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a19      	ldr	r2, [pc, #100]	; (8005df8 <TIM_OC3_SetConfig+0x104>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC3_SetConfig+0xaa>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <TIM_OC3_SetConfig+0x108>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d113      	bne.n	8005dc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40010400 	.word	0x40010400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	031b      	lsls	r3, r3, #12
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <TIM_OC4_SetConfig+0xbc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d00f      	beq.n	8005e80 <TIM_OC4_SetConfig+0x80>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <TIM_OC4_SetConfig+0xc0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <TIM_OC4_SetConfig+0x80>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <TIM_OC4_SetConfig+0xc4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_OC4_SetConfig+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <TIM_OC4_SetConfig+0xc8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_OC4_SetConfig+0x80>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <TIM_OC4_SetConfig+0xcc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d109      	bne.n	8005e94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	019b      	lsls	r3, r3, #6
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40010400 	.word	0x40010400
 8005ec4:	40014000 	.word	0x40014000
 8005ec8:	40014400 	.word	0x40014400
 8005ecc:	40014800 	.word	0x40014800

08005ed0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <TIM_OC5_SetConfig+0xb0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00f      	beq.n	8005f46 <TIM_OC5_SetConfig+0x76>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a16      	ldr	r2, [pc, #88]	; (8005f84 <TIM_OC5_SetConfig+0xb4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00b      	beq.n	8005f46 <TIM_OC5_SetConfig+0x76>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a15      	ldr	r2, [pc, #84]	; (8005f88 <TIM_OC5_SetConfig+0xb8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d007      	beq.n	8005f46 <TIM_OC5_SetConfig+0x76>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a14      	ldr	r2, [pc, #80]	; (8005f8c <TIM_OC5_SetConfig+0xbc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_OC5_SetConfig+0x76>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a13      	ldr	r2, [pc, #76]	; (8005f90 <TIM_OC5_SetConfig+0xc0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d109      	bne.n	8005f5a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	697a      	ldr	r2, [r7, #20]
 8005f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40010000 	.word	0x40010000
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40014400 	.word	0x40014400
 8005f90:	40014800 	.word	0x40014800

08005f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	051b      	lsls	r3, r3, #20
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <TIM_OC6_SetConfig+0xb4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00f      	beq.n	800600c <TIM_OC6_SetConfig+0x78>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a17      	ldr	r2, [pc, #92]	; (800604c <TIM_OC6_SetConfig+0xb8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00b      	beq.n	800600c <TIM_OC6_SetConfig+0x78>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <TIM_OC6_SetConfig+0xbc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d007      	beq.n	800600c <TIM_OC6_SetConfig+0x78>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a15      	ldr	r2, [pc, #84]	; (8006054 <TIM_OC6_SetConfig+0xc0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <TIM_OC6_SetConfig+0x78>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a14      	ldr	r2, [pc, #80]	; (8006058 <TIM_OC6_SetConfig+0xc4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006012:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	029b      	lsls	r3, r3, #10
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	40010000 	.word	0x40010000
 800604c:	40010400 	.word	0x40010400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0201 	bic.w	r2, r3, #1
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 030a 	bic.w	r3, r3, #10
 8006098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	621a      	str	r2, [r3, #32]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b087      	sub	sp, #28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1b      	ldr	r3, [r3, #32]
 80060ca:	f023 0210 	bic.w	r2, r3, #16
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	031b      	lsls	r3, r3, #12
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4b09      	ldr	r3, [pc, #36]	; (8006154 <TIM_ITRx_SetConfig+0x38>)
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006134:	683a      	ldr	r2, [r7, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	f043 0307 	orr.w	r3, r3, #7
 800613e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	609a      	str	r2, [r3, #8]
}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	ffcfff8f 	.word	0xffcfff8f

08006158 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006172:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	021a      	lsls	r2, r3, #8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	431a      	orrs	r2, r3
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	609a      	str	r2, [r3, #8]
}
 800618c:	bf00      	nop
 800618e:	371c      	adds	r7, #28
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e045      	b.n	800623c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1c      	ldr	r2, [pc, #112]	; (8006248 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d004      	beq.n	80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a1b      	ldr	r2, [pc, #108]	; (800624c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d108      	bne.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800620e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40010000 	.word	0x40010000
 800624c:	40010400 	.word	0x40010400

08006250 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e042      	b.n	8006324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d106      	bne.n	80062b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fb f9b1 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2224      	movs	r2, #36	; 0x24
 80062ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa9a 	bl	8006808 <UART_SetConfig>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e022      	b.n	8006324 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f002 fc0c 	bl	8008b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689a      	ldr	r2, [r3, #8]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800630a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f002 fc93 	bl	8008c48 <UART_CheckIdleState>
 8006322:	4603      	mov	r3, r0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006340:	2b20      	cmp	r3, #32
 8006342:	f040 80bc 	bne.w	80064be <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <HAL_UART_Receive_IT+0x26>
 800634c:	88fb      	ldrh	r3, [r7, #6]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e0b4      	b.n	80064c0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_UART_Receive_IT+0x38>
 8006360:	2302      	movs	r3, #2
 8006362:	e0ad      	b.n	80064c0 <HAL_UART_Receive_IT+0x194>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	88fa      	ldrh	r2, [r7, #6]
 8006376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006390:	d10e      	bne.n	80063b0 <HAL_UART_Receive_IT+0x84>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d105      	bne.n	80063a6 <HAL_UART_Receive_IT+0x7a>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80063a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063a4:	e02d      	b.n	8006402 <HAL_UART_Receive_IT+0xd6>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	22ff      	movs	r2, #255	; 0xff
 80063aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ae:	e028      	b.n	8006402 <HAL_UART_Receive_IT+0xd6>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10d      	bne.n	80063d4 <HAL_UART_Receive_IT+0xa8>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <HAL_UART_Receive_IT+0x9e>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	22ff      	movs	r2, #255	; 0xff
 80063c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063c8:	e01b      	b.n	8006402 <HAL_UART_Receive_IT+0xd6>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	227f      	movs	r2, #127	; 0x7f
 80063ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063d2:	e016      	b.n	8006402 <HAL_UART_Receive_IT+0xd6>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063dc:	d10d      	bne.n	80063fa <HAL_UART_Receive_IT+0xce>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <HAL_UART_Receive_IT+0xc4>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	227f      	movs	r2, #127	; 0x7f
 80063ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ee:	e008      	b.n	8006402 <HAL_UART_Receive_IT+0xd6>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	223f      	movs	r2, #63	; 0x3f
 80063f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063f8:	e003      	b.n	8006402 <HAL_UART_Receive_IT+0xd6>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2222      	movs	r2, #34	; 0x22
 800640e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f042 0201 	orr.w	r2, r2, #1
 8006420:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642a:	d12a      	bne.n	8006482 <HAL_UART_Receive_IT+0x156>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	429a      	cmp	r2, r3
 8006436:	d324      	bcc.n	8006482 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006440:	d107      	bne.n	8006452 <HAL_UART_Receive_IT+0x126>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d103      	bne.n	8006452 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4a1f      	ldr	r2, [pc, #124]	; (80064cc <HAL_UART_Receive_IT+0x1a0>)
 800644e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006450:	e002      	b.n	8006458 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a1e      	ldr	r2, [pc, #120]	; (80064d0 <HAL_UART_Receive_IT+0x1a4>)
 8006456:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	e01b      	b.n	80064ba <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648a:	d107      	bne.n	800649c <HAL_UART_Receive_IT+0x170>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a0f      	ldr	r2, [pc, #60]	; (80064d4 <HAL_UART_Receive_IT+0x1a8>)
 8006498:	66da      	str	r2, [r3, #108]	; 0x6c
 800649a:	e002      	b.n	80064a2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a0e      	ldr	r2, [pc, #56]	; (80064d8 <HAL_UART_Receive_IT+0x1ac>)
 80064a0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80064b8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	e000      	b.n	80064c0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80064be:	2302      	movs	r3, #2
  }
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	080090dd 	.word	0x080090dd
 80064d0:	08008fd5 	.word	0x08008fd5
 80064d4:	08008f2b 	.word	0x08008f2b
 80064d8:	08008e81 	.word	0x08008e81

080064dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006502:	4013      	ands	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d118      	bne.n	800653e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b00      	cmp	r3, #0
 8006514:	d013      	beq.n	800653e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	f003 0320 	and.w	r3, r3, #32
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d009      	beq.n	800653e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800652e:	2b00      	cmp	r3, #0
 8006530:	f000 8145 	beq.w	80067be <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	4798      	blx	r3
      }
      return;
 800653c:	e13f      	b.n	80067be <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80e8 	beq.w	8006716 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4ba1      	ldr	r3, [pc, #644]	; (80067d0 <HAL_UART_IRQHandler+0x2f4>)
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d105      	bne.n	800655c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	4ba0      	ldr	r3, [pc, #640]	; (80067d4 <HAL_UART_IRQHandler+0x2f8>)
 8006554:	4013      	ands	r3, r2
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80dd 	beq.w	8006716 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d010      	beq.n	8006588 <HAL_UART_IRQHandler+0xac>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00b      	beq.n	8006588 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2201      	movs	r2, #1
 8006576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f043 0201 	orr.w	r2, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d010      	beq.n	80065b4 <HAL_UART_IRQHandler+0xd8>
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2202      	movs	r2, #2
 80065a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065aa:	f043 0204 	orr.w	r2, r3, #4
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f003 0304 	and.w	r3, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <HAL_UART_IRQHandler+0x104>
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00b      	beq.n	80065e0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2204      	movs	r2, #4
 80065ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d6:	f043 0202 	orr.w	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d015      	beq.n	8006616 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4b76      	ldr	r3, [pc, #472]	; (80067d0 <HAL_UART_IRQHandler+0x2f4>)
 80065f8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2208      	movs	r2, #8
 8006604:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660c:	f043 0208 	orr.w	r2, r3, #8
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800661c:	2b00      	cmp	r3, #0
 800661e:	d011      	beq.n	8006644 <HAL_UART_IRQHandler+0x168>
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00c      	beq.n	8006644 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80b9 	beq.w	80067c2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d011      	beq.n	800667e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d007      	beq.n	800667e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006684:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d004      	beq.n	800669e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800669a:	2b00      	cmp	r3, #0
 800669c:	d031      	beq.n	8006702 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f002 fb9a 	bl	8008dd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d123      	bne.n	80066fa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d013      	beq.n	80066f2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ce:	4a42      	ldr	r2, [pc, #264]	; (80067d8 <HAL_UART_IRQHandler+0x2fc>)
 80066d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fb fa8e 	bl	8001bf8 <HAL_DMA_Abort_IT>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d017      	beq.n	8006712 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f0:	e00f      	b.n	8006712 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f87c 	bl	80067f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f8:	e00b      	b.n	8006712 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f878 	bl	80067f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006700:	e007      	b.n	8006712 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f874 	bl	80067f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006710:	e057      	b.n	80067c2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006712:	bf00      	nop
    return;
 8006714:	e055      	b.n	80067c2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00d      	beq.n	800673c <HAL_UART_IRQHandler+0x260>
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d008      	beq.n	800673c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006732:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f002 fd55 	bl	80091e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800673a:	e045      	b.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	2b00      	cmp	r3, #0
 8006744:	d012      	beq.n	800676c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	d104      	bne.n	800675a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d008      	beq.n	800676c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	2b00      	cmp	r3, #0
 8006760:	d031      	beq.n	80067c6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	4798      	blx	r3
    }
    return;
 800676a:	e02c      	b.n	80067c6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d008      	beq.n	8006788 <HAL_UART_IRQHandler+0x2ac>
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f002 fb63 	bl	8008e4c <UART_EndTransmit_IT>
    return;
 8006786:	e01f      	b.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <HAL_UART_IRQHandler+0x2c8>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f002 fd35 	bl	800920c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067a2:	e011      	b.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00c      	beq.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	da09      	bge.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f002 fd1f 	bl	80091f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067ba:	bf00      	nop
 80067bc:	e004      	b.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80067be:	bf00      	nop
 80067c0:	e002      	b.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80067c6:	bf00      	nop
  }
}
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	10000001 	.word	0x10000001
 80067d4:	04000120 	.word	0x04000120
 80067d8:	08008e21 	.word	0x08008e21

080067dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	0000      	movs	r0, r0
	...

08006808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006808:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800680c:	b090      	sub	sp, #64	; 0x40
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800681c:	2300      	movs	r3, #0
 800681e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	4313      	orrs	r3, r2
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800683c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800683e:	4313      	orrs	r3, r2
 8006840:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4bc1      	ldr	r3, [pc, #772]	; (8006b50 <UART_SetConfig+0x348>)
 800684a:	4013      	ands	r3, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006852:	430b      	orrs	r3, r1
 8006854:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4ab7      	ldr	r2, [pc, #732]	; (8006b54 <UART_SetConfig+0x34c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d004      	beq.n	8006886 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006882:	4313      	orrs	r3, r2
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	4bb2      	ldr	r3, [pc, #712]	; (8006b58 <UART_SetConfig+0x350>)
 800688e:	4013      	ands	r3, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006896:	430b      	orrs	r3, r1
 8006898:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	f023 010f 	bic.w	r1, r3, #15
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4aa9      	ldr	r2, [pc, #676]	; (8006b5c <UART_SetConfig+0x354>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d177      	bne.n	80069aa <UART_SetConfig+0x1a2>
 80068ba:	4ba9      	ldr	r3, [pc, #676]	; (8006b60 <UART_SetConfig+0x358>)
 80068bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068c2:	2b28      	cmp	r3, #40	; 0x28
 80068c4:	d86c      	bhi.n	80069a0 <UART_SetConfig+0x198>
 80068c6:	a201      	add	r2, pc, #4	; (adr r2, 80068cc <UART_SetConfig+0xc4>)
 80068c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068cc:	08006971 	.word	0x08006971
 80068d0:	080069a1 	.word	0x080069a1
 80068d4:	080069a1 	.word	0x080069a1
 80068d8:	080069a1 	.word	0x080069a1
 80068dc:	080069a1 	.word	0x080069a1
 80068e0:	080069a1 	.word	0x080069a1
 80068e4:	080069a1 	.word	0x080069a1
 80068e8:	080069a1 	.word	0x080069a1
 80068ec:	08006979 	.word	0x08006979
 80068f0:	080069a1 	.word	0x080069a1
 80068f4:	080069a1 	.word	0x080069a1
 80068f8:	080069a1 	.word	0x080069a1
 80068fc:	080069a1 	.word	0x080069a1
 8006900:	080069a1 	.word	0x080069a1
 8006904:	080069a1 	.word	0x080069a1
 8006908:	080069a1 	.word	0x080069a1
 800690c:	08006981 	.word	0x08006981
 8006910:	080069a1 	.word	0x080069a1
 8006914:	080069a1 	.word	0x080069a1
 8006918:	080069a1 	.word	0x080069a1
 800691c:	080069a1 	.word	0x080069a1
 8006920:	080069a1 	.word	0x080069a1
 8006924:	080069a1 	.word	0x080069a1
 8006928:	080069a1 	.word	0x080069a1
 800692c:	08006989 	.word	0x08006989
 8006930:	080069a1 	.word	0x080069a1
 8006934:	080069a1 	.word	0x080069a1
 8006938:	080069a1 	.word	0x080069a1
 800693c:	080069a1 	.word	0x080069a1
 8006940:	080069a1 	.word	0x080069a1
 8006944:	080069a1 	.word	0x080069a1
 8006948:	080069a1 	.word	0x080069a1
 800694c:	08006991 	.word	0x08006991
 8006950:	080069a1 	.word	0x080069a1
 8006954:	080069a1 	.word	0x080069a1
 8006958:	080069a1 	.word	0x080069a1
 800695c:	080069a1 	.word	0x080069a1
 8006960:	080069a1 	.word	0x080069a1
 8006964:	080069a1 	.word	0x080069a1
 8006968:	080069a1 	.word	0x080069a1
 800696c:	08006999 	.word	0x08006999
 8006970:	2301      	movs	r3, #1
 8006972:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006976:	e233      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006978:	2304      	movs	r3, #4
 800697a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800697e:	e22f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006980:	2308      	movs	r3, #8
 8006982:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006986:	e22b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006988:	2310      	movs	r3, #16
 800698a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800698e:	e227      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006990:	2320      	movs	r3, #32
 8006992:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006996:	e223      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800699e:	e21f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 80069a0:	2380      	movs	r3, #128	; 0x80
 80069a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069a6:	bf00      	nop
 80069a8:	e21a      	b.n	8006de0 <UART_SetConfig+0x5d8>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a6d      	ldr	r2, [pc, #436]	; (8006b64 <UART_SetConfig+0x35c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d132      	bne.n	8006a1a <UART_SetConfig+0x212>
 80069b4:	4b6a      	ldr	r3, [pc, #424]	; (8006b60 <UART_SetConfig+0x358>)
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	2b05      	cmp	r3, #5
 80069be:	d827      	bhi.n	8006a10 <UART_SetConfig+0x208>
 80069c0:	a201      	add	r2, pc, #4	; (adr r2, 80069c8 <UART_SetConfig+0x1c0>)
 80069c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c6:	bf00      	nop
 80069c8:	080069e1 	.word	0x080069e1
 80069cc:	080069e9 	.word	0x080069e9
 80069d0:	080069f1 	.word	0x080069f1
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	08006a01 	.word	0x08006a01
 80069dc:	08006a09 	.word	0x08006a09
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069e6:	e1fb      	b.n	8006de0 <UART_SetConfig+0x5d8>
 80069e8:	2304      	movs	r3, #4
 80069ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069ee:	e1f7      	b.n	8006de0 <UART_SetConfig+0x5d8>
 80069f0:	2308      	movs	r3, #8
 80069f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069f6:	e1f3      	b.n	8006de0 <UART_SetConfig+0x5d8>
 80069f8:	2310      	movs	r3, #16
 80069fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069fe:	e1ef      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a00:	2320      	movs	r3, #32
 8006a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a06:	e1eb      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a0e:	e1e7      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a10:	2380      	movs	r3, #128	; 0x80
 8006a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a16:	bf00      	nop
 8006a18:	e1e2      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a52      	ldr	r2, [pc, #328]	; (8006b68 <UART_SetConfig+0x360>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d132      	bne.n	8006a8a <UART_SetConfig+0x282>
 8006a24:	4b4e      	ldr	r3, [pc, #312]	; (8006b60 <UART_SetConfig+0x358>)
 8006a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	2b05      	cmp	r3, #5
 8006a2e:	d827      	bhi.n	8006a80 <UART_SetConfig+0x278>
 8006a30:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <UART_SetConfig+0x230>)
 8006a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a36:	bf00      	nop
 8006a38:	08006a51 	.word	0x08006a51
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	08006a61 	.word	0x08006a61
 8006a44:	08006a69 	.word	0x08006a69
 8006a48:	08006a71 	.word	0x08006a71
 8006a4c:	08006a79 	.word	0x08006a79
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a56:	e1c3      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a5e:	e1bf      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a66:	e1bb      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a6e:	e1b7      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a70:	2320      	movs	r3, #32
 8006a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a76:	e1b3      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a78:	2340      	movs	r3, #64	; 0x40
 8006a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a7e:	e1af      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a86:	bf00      	nop
 8006a88:	e1aa      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a37      	ldr	r2, [pc, #220]	; (8006b6c <UART_SetConfig+0x364>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d132      	bne.n	8006afa <UART_SetConfig+0x2f2>
 8006a94:	4b32      	ldr	r3, [pc, #200]	; (8006b60 <UART_SetConfig+0x358>)
 8006a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	2b05      	cmp	r3, #5
 8006a9e:	d827      	bhi.n	8006af0 <UART_SetConfig+0x2e8>
 8006aa0:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <UART_SetConfig+0x2a0>)
 8006aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa6:	bf00      	nop
 8006aa8:	08006ac1 	.word	0x08006ac1
 8006aac:	08006ac9 	.word	0x08006ac9
 8006ab0:	08006ad1 	.word	0x08006ad1
 8006ab4:	08006ad9 	.word	0x08006ad9
 8006ab8:	08006ae1 	.word	0x08006ae1
 8006abc:	08006ae9 	.word	0x08006ae9
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ac6:	e18b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006ac8:	2304      	movs	r3, #4
 8006aca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ace:	e187      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006ad0:	2308      	movs	r3, #8
 8006ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ad6:	e183      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ade:	e17f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ae6:	e17b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aee:	e177      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006af6:	bf00      	nop
 8006af8:	e172      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <UART_SetConfig+0x368>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d144      	bne.n	8006b8e <UART_SetConfig+0x386>
 8006b04:	4b16      	ldr	r3, [pc, #88]	; (8006b60 <UART_SetConfig+0x358>)
 8006b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	2b05      	cmp	r3, #5
 8006b0e:	d839      	bhi.n	8006b84 <UART_SetConfig+0x37c>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <UART_SetConfig+0x310>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b31 	.word	0x08006b31
 8006b1c:	08006b39 	.word	0x08006b39
 8006b20:	08006b41 	.word	0x08006b41
 8006b24:	08006b49 	.word	0x08006b49
 8006b28:	08006b75 	.word	0x08006b75
 8006b2c:	08006b7d 	.word	0x08006b7d
 8006b30:	2300      	movs	r3, #0
 8006b32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b36:	e153      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b3e:	e14f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006b40:	2308      	movs	r3, #8
 8006b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b46:	e14b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006b48:	2310      	movs	r3, #16
 8006b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b4e:	e147      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006b50:	cfff69f3 	.word	0xcfff69f3
 8006b54:	58000c00 	.word	0x58000c00
 8006b58:	11fff4ff 	.word	0x11fff4ff
 8006b5c:	40011000 	.word	0x40011000
 8006b60:	58024400 	.word	0x58024400
 8006b64:	40004400 	.word	0x40004400
 8006b68:	40004800 	.word	0x40004800
 8006b6c:	40004c00 	.word	0x40004c00
 8006b70:	40005000 	.word	0x40005000
 8006b74:	2320      	movs	r3, #32
 8006b76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b7a:	e131      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b82:	e12d      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006b84:	2380      	movs	r3, #128	; 0x80
 8006b86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b8a:	bf00      	nop
 8006b8c:	e128      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4ac3      	ldr	r2, [pc, #780]	; (8006ea0 <UART_SetConfig+0x698>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d178      	bne.n	8006c8a <UART_SetConfig+0x482>
 8006b98:	4bc2      	ldr	r3, [pc, #776]	; (8006ea4 <UART_SetConfig+0x69c>)
 8006b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba0:	2b28      	cmp	r3, #40	; 0x28
 8006ba2:	d86d      	bhi.n	8006c80 <UART_SetConfig+0x478>
 8006ba4:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x3a4>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006c51 	.word	0x08006c51
 8006bb0:	08006c81 	.word	0x08006c81
 8006bb4:	08006c81 	.word	0x08006c81
 8006bb8:	08006c81 	.word	0x08006c81
 8006bbc:	08006c81 	.word	0x08006c81
 8006bc0:	08006c81 	.word	0x08006c81
 8006bc4:	08006c81 	.word	0x08006c81
 8006bc8:	08006c81 	.word	0x08006c81
 8006bcc:	08006c59 	.word	0x08006c59
 8006bd0:	08006c81 	.word	0x08006c81
 8006bd4:	08006c81 	.word	0x08006c81
 8006bd8:	08006c81 	.word	0x08006c81
 8006bdc:	08006c81 	.word	0x08006c81
 8006be0:	08006c81 	.word	0x08006c81
 8006be4:	08006c81 	.word	0x08006c81
 8006be8:	08006c81 	.word	0x08006c81
 8006bec:	08006c61 	.word	0x08006c61
 8006bf0:	08006c81 	.word	0x08006c81
 8006bf4:	08006c81 	.word	0x08006c81
 8006bf8:	08006c81 	.word	0x08006c81
 8006bfc:	08006c81 	.word	0x08006c81
 8006c00:	08006c81 	.word	0x08006c81
 8006c04:	08006c81 	.word	0x08006c81
 8006c08:	08006c81 	.word	0x08006c81
 8006c0c:	08006c69 	.word	0x08006c69
 8006c10:	08006c81 	.word	0x08006c81
 8006c14:	08006c81 	.word	0x08006c81
 8006c18:	08006c81 	.word	0x08006c81
 8006c1c:	08006c81 	.word	0x08006c81
 8006c20:	08006c81 	.word	0x08006c81
 8006c24:	08006c81 	.word	0x08006c81
 8006c28:	08006c81 	.word	0x08006c81
 8006c2c:	08006c71 	.word	0x08006c71
 8006c30:	08006c81 	.word	0x08006c81
 8006c34:	08006c81 	.word	0x08006c81
 8006c38:	08006c81 	.word	0x08006c81
 8006c3c:	08006c81 	.word	0x08006c81
 8006c40:	08006c81 	.word	0x08006c81
 8006c44:	08006c81 	.word	0x08006c81
 8006c48:	08006c81 	.word	0x08006c81
 8006c4c:	08006c79 	.word	0x08006c79
 8006c50:	2301      	movs	r3, #1
 8006c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c56:	e0c3      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006c58:	2304      	movs	r3, #4
 8006c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c5e:	e0bf      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006c60:	2308      	movs	r3, #8
 8006c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c66:	e0bb      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006c68:	2310      	movs	r3, #16
 8006c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c6e:	e0b7      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006c70:	2320      	movs	r3, #32
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	e0b3      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006c78:	2340      	movs	r3, #64	; 0x40
 8006c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c7e:	e0af      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c86:	bf00      	nop
 8006c88:	e0aa      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a86      	ldr	r2, [pc, #536]	; (8006ea8 <UART_SetConfig+0x6a0>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d132      	bne.n	8006cfa <UART_SetConfig+0x4f2>
 8006c94:	4b83      	ldr	r3, [pc, #524]	; (8006ea4 <UART_SetConfig+0x69c>)
 8006c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d827      	bhi.n	8006cf0 <UART_SetConfig+0x4e8>
 8006ca0:	a201      	add	r2, pc, #4	; (adr r2, 8006ca8 <UART_SetConfig+0x4a0>)
 8006ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca6:	bf00      	nop
 8006ca8:	08006cc1 	.word	0x08006cc1
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	08006cd1 	.word	0x08006cd1
 8006cb4:	08006cd9 	.word	0x08006cd9
 8006cb8:	08006ce1 	.word	0x08006ce1
 8006cbc:	08006ce9 	.word	0x08006ce9
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cc6:	e08b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006cc8:	2304      	movs	r3, #4
 8006cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cce:	e087      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006cd0:	2308      	movs	r3, #8
 8006cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cd6:	e083      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006cd8:	2310      	movs	r3, #16
 8006cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cde:	e07f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006ce0:	2320      	movs	r3, #32
 8006ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ce6:	e07b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006ce8:	2340      	movs	r3, #64	; 0x40
 8006cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cee:	e077      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006cf0:	2380      	movs	r3, #128	; 0x80
 8006cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cf6:	bf00      	nop
 8006cf8:	e072      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6b      	ldr	r2, [pc, #428]	; (8006eac <UART_SetConfig+0x6a4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d132      	bne.n	8006d6a <UART_SetConfig+0x562>
 8006d04:	4b67      	ldr	r3, [pc, #412]	; (8006ea4 <UART_SetConfig+0x69c>)
 8006d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d08:	f003 0307 	and.w	r3, r3, #7
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	d827      	bhi.n	8006d60 <UART_SetConfig+0x558>
 8006d10:	a201      	add	r2, pc, #4	; (adr r2, 8006d18 <UART_SetConfig+0x510>)
 8006d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d16:	bf00      	nop
 8006d18:	08006d31 	.word	0x08006d31
 8006d1c:	08006d39 	.word	0x08006d39
 8006d20:	08006d41 	.word	0x08006d41
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d51 	.word	0x08006d51
 8006d2c:	08006d59 	.word	0x08006d59
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d36:	e053      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d3e:	e04f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006d40:	2308      	movs	r3, #8
 8006d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d46:	e04b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d4e:	e047      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006d50:	2320      	movs	r3, #32
 8006d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d56:	e043      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d5e:	e03f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d66:	bf00      	nop
 8006d68:	e03a      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a50      	ldr	r2, [pc, #320]	; (8006eb0 <UART_SetConfig+0x6a8>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d132      	bne.n	8006dda <UART_SetConfig+0x5d2>
 8006d74:	4b4b      	ldr	r3, [pc, #300]	; (8006ea4 <UART_SetConfig+0x69c>)
 8006d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	d827      	bhi.n	8006dd0 <UART_SetConfig+0x5c8>
 8006d80:	a201      	add	r2, pc, #4	; (adr r2, 8006d88 <UART_SetConfig+0x580>)
 8006d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d86:	bf00      	nop
 8006d88:	08006da1 	.word	0x08006da1
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	08006db1 	.word	0x08006db1
 8006d94:	08006db9 	.word	0x08006db9
 8006d98:	08006dc1 	.word	0x08006dc1
 8006d9c:	08006dc9 	.word	0x08006dc9
 8006da0:	2302      	movs	r3, #2
 8006da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006da6:	e01b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006da8:	2304      	movs	r3, #4
 8006daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dae:	e017      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006db0:	2308      	movs	r3, #8
 8006db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006db6:	e013      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006db8:	2310      	movs	r3, #16
 8006dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dbe:	e00f      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006dc0:	2320      	movs	r3, #32
 8006dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dc6:	e00b      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006dc8:	2340      	movs	r3, #64	; 0x40
 8006dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dce:	e007      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dd6:	bf00      	nop
 8006dd8:	e002      	b.n	8006de0 <UART_SetConfig+0x5d8>
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a32      	ldr	r2, [pc, #200]	; (8006eb0 <UART_SetConfig+0x6a8>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	f040 86f7 	bne.w	8007bda <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	f000 80c0 	beq.w	8006f76 <UART_SetConfig+0x76e>
 8006df6:	2b08      	cmp	r3, #8
 8006df8:	dc04      	bgt.n	8006e04 <UART_SetConfig+0x5fc>
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d00c      	beq.n	8006e18 <UART_SetConfig+0x610>
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d065      	beq.n	8006ece <UART_SetConfig+0x6c6>
 8006e02:	e27a      	b.n	80072fa <UART_SetConfig+0xaf2>
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	f000 81b0 	beq.w	800716a <UART_SetConfig+0x962>
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	f000 821e 	beq.w	800724c <UART_SetConfig+0xa44>
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	f000 8104 	beq.w	800701e <UART_SetConfig+0x816>
 8006e16:	e270      	b.n	80072fa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e18:	f7fd fdfa 	bl	8004a10 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d04e      	beq.n	8006ec4 <UART_SetConfig+0x6bc>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d048      	beq.n	8006ec0 <UART_SetConfig+0x6b8>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d042      	beq.n	8006ebc <UART_SetConfig+0x6b4>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	2b03      	cmp	r3, #3
 8006e3c:	d03c      	beq.n	8006eb8 <UART_SetConfig+0x6b0>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	d036      	beq.n	8006eb4 <UART_SetConfig+0x6ac>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	d026      	beq.n	8006e9c <UART_SetConfig+0x694>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	2b06      	cmp	r3, #6
 8006e54:	d020      	beq.n	8006e98 <UART_SetConfig+0x690>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	2b07      	cmp	r3, #7
 8006e5c:	d01a      	beq.n	8006e94 <UART_SetConfig+0x68c>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d014      	beq.n	8006e90 <UART_SetConfig+0x688>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	d00e      	beq.n	8006e8c <UART_SetConfig+0x684>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	2b0a      	cmp	r3, #10
 8006e74:	d008      	beq.n	8006e88 <UART_SetConfig+0x680>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2b0b      	cmp	r3, #11
 8006e7c:	d102      	bne.n	8006e84 <UART_SetConfig+0x67c>
 8006e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e82:	e020      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006e84:	2301      	movs	r3, #1
 8006e86:	e01e      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	e01c      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006e8c:	2340      	movs	r3, #64	; 0x40
 8006e8e:	e01a      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006e90:	2320      	movs	r3, #32
 8006e92:	e018      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006e94:	2310      	movs	r3, #16
 8006e96:	e016      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006e98:	230c      	movs	r3, #12
 8006e9a:	e014      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006e9c:	230a      	movs	r3, #10
 8006e9e:	e012      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006ea0:	40011400 	.word	0x40011400
 8006ea4:	58024400 	.word	0x58024400
 8006ea8:	40007800 	.word	0x40007800
 8006eac:	40007c00 	.word	0x40007c00
 8006eb0:	58000c00 	.word	0x58000c00
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	e006      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006eb8:	2306      	movs	r3, #6
 8006eba:	e004      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006ebc:	2304      	movs	r3, #4
 8006ebe:	e002      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	e000      	b.n	8006ec6 <UART_SetConfig+0x6be>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ecc:	e219      	b.n	8007302 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ece:	f107 0318 	add.w	r3, r7, #24
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fd fdb2 	bl	8004a3c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d044      	beq.n	8006f6c <UART_SetConfig+0x764>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d03e      	beq.n	8006f68 <UART_SetConfig+0x760>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d038      	beq.n	8006f64 <UART_SetConfig+0x75c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d032      	beq.n	8006f60 <UART_SetConfig+0x758>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d02c      	beq.n	8006f5c <UART_SetConfig+0x754>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	2b05      	cmp	r3, #5
 8006f08:	d026      	beq.n	8006f58 <UART_SetConfig+0x750>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b06      	cmp	r3, #6
 8006f10:	d020      	beq.n	8006f54 <UART_SetConfig+0x74c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f16:	2b07      	cmp	r3, #7
 8006f18:	d01a      	beq.n	8006f50 <UART_SetConfig+0x748>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d014      	beq.n	8006f4c <UART_SetConfig+0x744>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d00e      	beq.n	8006f48 <UART_SetConfig+0x740>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b0a      	cmp	r3, #10
 8006f30:	d008      	beq.n	8006f44 <UART_SetConfig+0x73c>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	2b0b      	cmp	r3, #11
 8006f38:	d102      	bne.n	8006f40 <UART_SetConfig+0x738>
 8006f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f3e:	e016      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e014      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	e012      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f48:	2340      	movs	r3, #64	; 0x40
 8006f4a:	e010      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f4c:	2320      	movs	r3, #32
 8006f4e:	e00e      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f50:	2310      	movs	r3, #16
 8006f52:	e00c      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f54:	230c      	movs	r3, #12
 8006f56:	e00a      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f58:	230a      	movs	r3, #10
 8006f5a:	e008      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	e006      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f60:	2306      	movs	r3, #6
 8006f62:	e004      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f64:	2304      	movs	r3, #4
 8006f66:	e002      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e000      	b.n	8006f6e <UART_SetConfig+0x766>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f74:	e1c5      	b.n	8007302 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f76:	f107 030c 	add.w	r3, r7, #12
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7fd feaa 	bl	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d044      	beq.n	8007014 <UART_SetConfig+0x80c>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d03e      	beq.n	8007010 <UART_SetConfig+0x808>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d038      	beq.n	800700c <UART_SetConfig+0x804>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d032      	beq.n	8007008 <UART_SetConfig+0x800>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d02c      	beq.n	8007004 <UART_SetConfig+0x7fc>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	2b05      	cmp	r3, #5
 8006fb0:	d026      	beq.n	8007000 <UART_SetConfig+0x7f8>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	2b06      	cmp	r3, #6
 8006fb8:	d020      	beq.n	8006ffc <UART_SetConfig+0x7f4>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	2b07      	cmp	r3, #7
 8006fc0:	d01a      	beq.n	8006ff8 <UART_SetConfig+0x7f0>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b08      	cmp	r3, #8
 8006fc8:	d014      	beq.n	8006ff4 <UART_SetConfig+0x7ec>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fce:	2b09      	cmp	r3, #9
 8006fd0:	d00e      	beq.n	8006ff0 <UART_SetConfig+0x7e8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	2b0a      	cmp	r3, #10
 8006fd8:	d008      	beq.n	8006fec <UART_SetConfig+0x7e4>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b0b      	cmp	r3, #11
 8006fe0:	d102      	bne.n	8006fe8 <UART_SetConfig+0x7e0>
 8006fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fe6:	e016      	b.n	8007016 <UART_SetConfig+0x80e>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e014      	b.n	8007016 <UART_SetConfig+0x80e>
 8006fec:	2380      	movs	r3, #128	; 0x80
 8006fee:	e012      	b.n	8007016 <UART_SetConfig+0x80e>
 8006ff0:	2340      	movs	r3, #64	; 0x40
 8006ff2:	e010      	b.n	8007016 <UART_SetConfig+0x80e>
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	e00e      	b.n	8007016 <UART_SetConfig+0x80e>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	e00c      	b.n	8007016 <UART_SetConfig+0x80e>
 8006ffc:	230c      	movs	r3, #12
 8006ffe:	e00a      	b.n	8007016 <UART_SetConfig+0x80e>
 8007000:	230a      	movs	r3, #10
 8007002:	e008      	b.n	8007016 <UART_SetConfig+0x80e>
 8007004:	2308      	movs	r3, #8
 8007006:	e006      	b.n	8007016 <UART_SetConfig+0x80e>
 8007008:	2306      	movs	r3, #6
 800700a:	e004      	b.n	8007016 <UART_SetConfig+0x80e>
 800700c:	2304      	movs	r3, #4
 800700e:	e002      	b.n	8007016 <UART_SetConfig+0x80e>
 8007010:	2302      	movs	r3, #2
 8007012:	e000      	b.n	8007016 <UART_SetConfig+0x80e>
 8007014:	2301      	movs	r3, #1
 8007016:	fbb2 f3f3 	udiv	r3, r2, r3
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800701c:	e171      	b.n	8007302 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800701e:	4b7a      	ldr	r3, [pc, #488]	; (8007208 <UART_SetConfig+0xa00>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 0320 	and.w	r3, r3, #32
 8007026:	2b00      	cmp	r3, #0
 8007028:	d054      	beq.n	80070d4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800702a:	4b77      	ldr	r3, [pc, #476]	; (8007208 <UART_SetConfig+0xa00>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	4a75      	ldr	r2, [pc, #468]	; (800720c <UART_SetConfig+0xa04>)
 8007036:	40da      	lsrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d044      	beq.n	80070ca <UART_SetConfig+0x8c2>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007044:	2b01      	cmp	r3, #1
 8007046:	d03e      	beq.n	80070c6 <UART_SetConfig+0x8be>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	2b02      	cmp	r3, #2
 800704e:	d038      	beq.n	80070c2 <UART_SetConfig+0x8ba>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	2b03      	cmp	r3, #3
 8007056:	d032      	beq.n	80070be <UART_SetConfig+0x8b6>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	2b04      	cmp	r3, #4
 800705e:	d02c      	beq.n	80070ba <UART_SetConfig+0x8b2>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	2b05      	cmp	r3, #5
 8007066:	d026      	beq.n	80070b6 <UART_SetConfig+0x8ae>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	2b06      	cmp	r3, #6
 800706e:	d020      	beq.n	80070b2 <UART_SetConfig+0x8aa>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	2b07      	cmp	r3, #7
 8007076:	d01a      	beq.n	80070ae <UART_SetConfig+0x8a6>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	2b08      	cmp	r3, #8
 800707e:	d014      	beq.n	80070aa <UART_SetConfig+0x8a2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	2b09      	cmp	r3, #9
 8007086:	d00e      	beq.n	80070a6 <UART_SetConfig+0x89e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	2b0a      	cmp	r3, #10
 800708e:	d008      	beq.n	80070a2 <UART_SetConfig+0x89a>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	2b0b      	cmp	r3, #11
 8007096:	d102      	bne.n	800709e <UART_SetConfig+0x896>
 8007098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800709c:	e016      	b.n	80070cc <UART_SetConfig+0x8c4>
 800709e:	2301      	movs	r3, #1
 80070a0:	e014      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070a2:	2380      	movs	r3, #128	; 0x80
 80070a4:	e012      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070a6:	2340      	movs	r3, #64	; 0x40
 80070a8:	e010      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070aa:	2320      	movs	r3, #32
 80070ac:	e00e      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070ae:	2310      	movs	r3, #16
 80070b0:	e00c      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070b2:	230c      	movs	r3, #12
 80070b4:	e00a      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070b6:	230a      	movs	r3, #10
 80070b8:	e008      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070ba:	2308      	movs	r3, #8
 80070bc:	e006      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070be:	2306      	movs	r3, #6
 80070c0:	e004      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070c2:	2304      	movs	r3, #4
 80070c4:	e002      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e000      	b.n	80070cc <UART_SetConfig+0x8c4>
 80070ca:	2301      	movs	r3, #1
 80070cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80070d2:	e116      	b.n	8007302 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d043      	beq.n	8007164 <UART_SetConfig+0x95c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d03d      	beq.n	8007160 <UART_SetConfig+0x958>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d037      	beq.n	800715c <UART_SetConfig+0x954>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d031      	beq.n	8007158 <UART_SetConfig+0x950>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	d02b      	beq.n	8007154 <UART_SetConfig+0x94c>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	2b05      	cmp	r3, #5
 8007102:	d025      	beq.n	8007150 <UART_SetConfig+0x948>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007108:	2b06      	cmp	r3, #6
 800710a:	d01f      	beq.n	800714c <UART_SetConfig+0x944>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b07      	cmp	r3, #7
 8007112:	d019      	beq.n	8007148 <UART_SetConfig+0x940>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b08      	cmp	r3, #8
 800711a:	d013      	beq.n	8007144 <UART_SetConfig+0x93c>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b09      	cmp	r3, #9
 8007122:	d00d      	beq.n	8007140 <UART_SetConfig+0x938>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	2b0a      	cmp	r3, #10
 800712a:	d007      	beq.n	800713c <UART_SetConfig+0x934>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	2b0b      	cmp	r3, #11
 8007132:	d101      	bne.n	8007138 <UART_SetConfig+0x930>
 8007134:	4b36      	ldr	r3, [pc, #216]	; (8007210 <UART_SetConfig+0xa08>)
 8007136:	e016      	b.n	8007166 <UART_SetConfig+0x95e>
 8007138:	4b34      	ldr	r3, [pc, #208]	; (800720c <UART_SetConfig+0xa04>)
 800713a:	e014      	b.n	8007166 <UART_SetConfig+0x95e>
 800713c:	4b35      	ldr	r3, [pc, #212]	; (8007214 <UART_SetConfig+0xa0c>)
 800713e:	e012      	b.n	8007166 <UART_SetConfig+0x95e>
 8007140:	4b35      	ldr	r3, [pc, #212]	; (8007218 <UART_SetConfig+0xa10>)
 8007142:	e010      	b.n	8007166 <UART_SetConfig+0x95e>
 8007144:	4b35      	ldr	r3, [pc, #212]	; (800721c <UART_SetConfig+0xa14>)
 8007146:	e00e      	b.n	8007166 <UART_SetConfig+0x95e>
 8007148:	4b35      	ldr	r3, [pc, #212]	; (8007220 <UART_SetConfig+0xa18>)
 800714a:	e00c      	b.n	8007166 <UART_SetConfig+0x95e>
 800714c:	4b35      	ldr	r3, [pc, #212]	; (8007224 <UART_SetConfig+0xa1c>)
 800714e:	e00a      	b.n	8007166 <UART_SetConfig+0x95e>
 8007150:	4b35      	ldr	r3, [pc, #212]	; (8007228 <UART_SetConfig+0xa20>)
 8007152:	e008      	b.n	8007166 <UART_SetConfig+0x95e>
 8007154:	4b35      	ldr	r3, [pc, #212]	; (800722c <UART_SetConfig+0xa24>)
 8007156:	e006      	b.n	8007166 <UART_SetConfig+0x95e>
 8007158:	4b35      	ldr	r3, [pc, #212]	; (8007230 <UART_SetConfig+0xa28>)
 800715a:	e004      	b.n	8007166 <UART_SetConfig+0x95e>
 800715c:	4b35      	ldr	r3, [pc, #212]	; (8007234 <UART_SetConfig+0xa2c>)
 800715e:	e002      	b.n	8007166 <UART_SetConfig+0x95e>
 8007160:	4b35      	ldr	r3, [pc, #212]	; (8007238 <UART_SetConfig+0xa30>)
 8007162:	e000      	b.n	8007166 <UART_SetConfig+0x95e>
 8007164:	4b29      	ldr	r3, [pc, #164]	; (800720c <UART_SetConfig+0xa04>)
 8007166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007168:	e0cb      	b.n	8007302 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	2b00      	cmp	r3, #0
 8007170:	d046      	beq.n	8007200 <UART_SetConfig+0x9f8>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	2b01      	cmp	r3, #1
 8007178:	d040      	beq.n	80071fc <UART_SetConfig+0x9f4>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717e:	2b02      	cmp	r3, #2
 8007180:	d03a      	beq.n	80071f8 <UART_SetConfig+0x9f0>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	2b03      	cmp	r3, #3
 8007188:	d034      	beq.n	80071f4 <UART_SetConfig+0x9ec>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	2b04      	cmp	r3, #4
 8007190:	d02e      	beq.n	80071f0 <UART_SetConfig+0x9e8>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	2b05      	cmp	r3, #5
 8007198:	d028      	beq.n	80071ec <UART_SetConfig+0x9e4>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	2b06      	cmp	r3, #6
 80071a0:	d022      	beq.n	80071e8 <UART_SetConfig+0x9e0>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	2b07      	cmp	r3, #7
 80071a8:	d01c      	beq.n	80071e4 <UART_SetConfig+0x9dc>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d016      	beq.n	80071e0 <UART_SetConfig+0x9d8>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d00f      	beq.n	80071da <UART_SetConfig+0x9d2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b0a      	cmp	r3, #10
 80071c0:	d008      	beq.n	80071d4 <UART_SetConfig+0x9cc>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b0b      	cmp	r3, #11
 80071c8:	d102      	bne.n	80071d0 <UART_SetConfig+0x9c8>
 80071ca:	f643 5309 	movw	r3, #15625	; 0x3d09
 80071ce:	e018      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071d0:	4b13      	ldr	r3, [pc, #76]	; (8007220 <UART_SetConfig+0xa18>)
 80071d2:	e016      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071d4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80071d8:	e013      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80071de:	e010      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071e0:	4b16      	ldr	r3, [pc, #88]	; (800723c <UART_SetConfig+0xa34>)
 80071e2:	e00e      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <UART_SetConfig+0xa08>)
 80071e6:	e00c      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <UART_SetConfig+0xa38>)
 80071ea:	e00a      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071ec:	4b15      	ldr	r3, [pc, #84]	; (8007244 <UART_SetConfig+0xa3c>)
 80071ee:	e008      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071f0:	4b08      	ldr	r3, [pc, #32]	; (8007214 <UART_SetConfig+0xa0c>)
 80071f2:	e006      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071f4:	4b14      	ldr	r3, [pc, #80]	; (8007248 <UART_SetConfig+0xa40>)
 80071f6:	e004      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071f8:	4b07      	ldr	r3, [pc, #28]	; (8007218 <UART_SetConfig+0xa10>)
 80071fa:	e002      	b.n	8007202 <UART_SetConfig+0x9fa>
 80071fc:	4b07      	ldr	r3, [pc, #28]	; (800721c <UART_SetConfig+0xa14>)
 80071fe:	e000      	b.n	8007202 <UART_SetConfig+0x9fa>
 8007200:	4b07      	ldr	r3, [pc, #28]	; (8007220 <UART_SetConfig+0xa18>)
 8007202:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007204:	e07d      	b.n	8007302 <UART_SetConfig+0xafa>
 8007206:	bf00      	nop
 8007208:	58024400 	.word	0x58024400
 800720c:	03d09000 	.word	0x03d09000
 8007210:	0003d090 	.word	0x0003d090
 8007214:	0007a120 	.word	0x0007a120
 8007218:	000f4240 	.word	0x000f4240
 800721c:	001e8480 	.word	0x001e8480
 8007220:	003d0900 	.word	0x003d0900
 8007224:	00516155 	.word	0x00516155
 8007228:	0061a800 	.word	0x0061a800
 800722c:	007a1200 	.word	0x007a1200
 8007230:	00a2c2aa 	.word	0x00a2c2aa
 8007234:	00f42400 	.word	0x00f42400
 8007238:	01e84800 	.word	0x01e84800
 800723c:	0001e848 	.word	0x0001e848
 8007240:	00051615 	.word	0x00051615
 8007244:	00061a80 	.word	0x00061a80
 8007248:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007250:	2b00      	cmp	r3, #0
 8007252:	d04e      	beq.n	80072f2 <UART_SetConfig+0xaea>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	2b01      	cmp	r3, #1
 800725a:	d047      	beq.n	80072ec <UART_SetConfig+0xae4>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	2b02      	cmp	r3, #2
 8007262:	d040      	beq.n	80072e6 <UART_SetConfig+0xade>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	2b03      	cmp	r3, #3
 800726a:	d039      	beq.n	80072e0 <UART_SetConfig+0xad8>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007270:	2b04      	cmp	r3, #4
 8007272:	d032      	beq.n	80072da <UART_SetConfig+0xad2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	2b05      	cmp	r3, #5
 800727a:	d02b      	beq.n	80072d4 <UART_SetConfig+0xacc>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b06      	cmp	r3, #6
 8007282:	d024      	beq.n	80072ce <UART_SetConfig+0xac6>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007288:	2b07      	cmp	r3, #7
 800728a:	d01d      	beq.n	80072c8 <UART_SetConfig+0xac0>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	2b08      	cmp	r3, #8
 8007292:	d016      	beq.n	80072c2 <UART_SetConfig+0xaba>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	2b09      	cmp	r3, #9
 800729a:	d00f      	beq.n	80072bc <UART_SetConfig+0xab4>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	2b0a      	cmp	r3, #10
 80072a2:	d008      	beq.n	80072b6 <UART_SetConfig+0xaae>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	2b0b      	cmp	r3, #11
 80072aa:	d101      	bne.n	80072b0 <UART_SetConfig+0xaa8>
 80072ac:	2380      	movs	r3, #128	; 0x80
 80072ae:	e022      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072b4:	e01f      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ba:	e01c      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072c0:	e019      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072c6:	e016      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072cc:	e013      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80072d2:	e010      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80072d8:	e00d      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072de:	e00a      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80072e4:	e007      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072ea:	e004      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072f0:	e001      	b.n	80072f6 <UART_SetConfig+0xaee>
 80072f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072f8:	e003      	b.n	8007302 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007300:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	2b00      	cmp	r3, #0
 8007306:	f001 83e8 	beq.w	8008ada <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007316:	429a      	cmp	r2, r3
 8007318:	d305      	bcc.n	8007326 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007322:	429a      	cmp	r2, r3
 8007324:	d904      	bls.n	8007330 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800732c:	f001 bbd5 	b.w	8008ada <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007330:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007334:	2b08      	cmp	r3, #8
 8007336:	f000 8154 	beq.w	80075e2 <UART_SetConfig+0xdda>
 800733a:	2b08      	cmp	r3, #8
 800733c:	dc06      	bgt.n	800734c <UART_SetConfig+0xb44>
 800733e:	2b02      	cmp	r3, #2
 8007340:	d00f      	beq.n	8007362 <UART_SetConfig+0xb5a>
 8007342:	2b04      	cmp	r3, #4
 8007344:	f000 80ac 	beq.w	80074a0 <UART_SetConfig+0xc98>
 8007348:	f000 bc30 	b.w	8007bac <UART_SetConfig+0x13a4>
 800734c:	2b20      	cmp	r3, #32
 800734e:	f000 832d 	beq.w	80079ac <UART_SetConfig+0x11a4>
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	f000 83a5 	beq.w	8007aa2 <UART_SetConfig+0x129a>
 8007358:	2b10      	cmp	r3, #16
 800735a:	f000 81e3 	beq.w	8007724 <UART_SetConfig+0xf1c>
 800735e:	f000 bc25 	b.w	8007bac <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007362:	f7fd fb55 	bl	8004a10 <HAL_RCCEx_GetD3PCLK1Freq>
 8007366:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	4618      	mov	r0, r3
 800736c:	f04f 0100 	mov.w	r1, #0
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007374:	2b00      	cmp	r3, #0
 8007376:	d067      	beq.n	8007448 <UART_SetConfig+0xc40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737c:	2b01      	cmp	r3, #1
 800737e:	d05e      	beq.n	800743e <UART_SetConfig+0xc36>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	2b02      	cmp	r3, #2
 8007386:	d055      	beq.n	8007434 <UART_SetConfig+0xc2c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	2b03      	cmp	r3, #3
 800738e:	d04c      	beq.n	800742a <UART_SetConfig+0xc22>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	2b04      	cmp	r3, #4
 8007396:	d043      	beq.n	8007420 <UART_SetConfig+0xc18>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	2b05      	cmp	r3, #5
 800739e:	d03a      	beq.n	8007416 <UART_SetConfig+0xc0e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	2b06      	cmp	r3, #6
 80073a6:	d031      	beq.n	800740c <UART_SetConfig+0xc04>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	2b07      	cmp	r3, #7
 80073ae:	d028      	beq.n	8007402 <UART_SetConfig+0xbfa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	d01f      	beq.n	80073f8 <UART_SetConfig+0xbf0>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073bc:	2b09      	cmp	r3, #9
 80073be:	d016      	beq.n	80073ee <UART_SetConfig+0xbe6>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b0a      	cmp	r3, #10
 80073c6:	d00d      	beq.n	80073e4 <UART_SetConfig+0xbdc>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	2b0b      	cmp	r3, #11
 80073ce:	d104      	bne.n	80073da <UART_SetConfig+0xbd2>
 80073d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073d4:	f04f 0400 	mov.w	r4, #0
 80073d8:	e03a      	b.n	8007450 <UART_SetConfig+0xc48>
 80073da:	f04f 0301 	mov.w	r3, #1
 80073de:	f04f 0400 	mov.w	r4, #0
 80073e2:	e035      	b.n	8007450 <UART_SetConfig+0xc48>
 80073e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073e8:	f04f 0400 	mov.w	r4, #0
 80073ec:	e030      	b.n	8007450 <UART_SetConfig+0xc48>
 80073ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80073f2:	f04f 0400 	mov.w	r4, #0
 80073f6:	e02b      	b.n	8007450 <UART_SetConfig+0xc48>
 80073f8:	f04f 0320 	mov.w	r3, #32
 80073fc:	f04f 0400 	mov.w	r4, #0
 8007400:	e026      	b.n	8007450 <UART_SetConfig+0xc48>
 8007402:	f04f 0310 	mov.w	r3, #16
 8007406:	f04f 0400 	mov.w	r4, #0
 800740a:	e021      	b.n	8007450 <UART_SetConfig+0xc48>
 800740c:	f04f 030c 	mov.w	r3, #12
 8007410:	f04f 0400 	mov.w	r4, #0
 8007414:	e01c      	b.n	8007450 <UART_SetConfig+0xc48>
 8007416:	f04f 030a 	mov.w	r3, #10
 800741a:	f04f 0400 	mov.w	r4, #0
 800741e:	e017      	b.n	8007450 <UART_SetConfig+0xc48>
 8007420:	f04f 0308 	mov.w	r3, #8
 8007424:	f04f 0400 	mov.w	r4, #0
 8007428:	e012      	b.n	8007450 <UART_SetConfig+0xc48>
 800742a:	f04f 0306 	mov.w	r3, #6
 800742e:	f04f 0400 	mov.w	r4, #0
 8007432:	e00d      	b.n	8007450 <UART_SetConfig+0xc48>
 8007434:	f04f 0304 	mov.w	r3, #4
 8007438:	f04f 0400 	mov.w	r4, #0
 800743c:	e008      	b.n	8007450 <UART_SetConfig+0xc48>
 800743e:	f04f 0302 	mov.w	r3, #2
 8007442:	f04f 0400 	mov.w	r4, #0
 8007446:	e003      	b.n	8007450 <UART_SetConfig+0xc48>
 8007448:	f04f 0301 	mov.w	r3, #1
 800744c:	f04f 0400 	mov.w	r4, #0
 8007450:	461a      	mov	r2, r3
 8007452:	4623      	mov	r3, r4
 8007454:	f7f8 ff40 	bl	80002d8 <__aeabi_uldivmod>
 8007458:	4603      	mov	r3, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4619      	mov	r1, r3
 800745e:	4622      	mov	r2, r4
 8007460:	f04f 0300 	mov.w	r3, #0
 8007464:	f04f 0400 	mov.w	r4, #0
 8007468:	0214      	lsls	r4, r2, #8
 800746a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800746e:	020b      	lsls	r3, r1, #8
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6852      	ldr	r2, [r2, #4]
 8007474:	0852      	lsrs	r2, r2, #1
 8007476:	4611      	mov	r1, r2
 8007478:	f04f 0200 	mov.w	r2, #0
 800747c:	eb13 0b01 	adds.w	fp, r3, r1
 8007480:	eb44 0c02 	adc.w	ip, r4, r2
 8007484:	4658      	mov	r0, fp
 8007486:	4661      	mov	r1, ip
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f04f 0400 	mov.w	r4, #0
 8007490:	461a      	mov	r2, r3
 8007492:	4623      	mov	r3, r4
 8007494:	f7f8 ff20 	bl	80002d8 <__aeabi_uldivmod>
 8007498:	4603      	mov	r3, r0
 800749a:	460c      	mov	r4, r1
 800749c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800749e:	e389      	b.n	8007bb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074a0:	f107 0318 	add.w	r3, r7, #24
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fd fac9 	bl	8004a3c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f04f 0100 	mov.w	r1, #0
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d067      	beq.n	800758a <UART_SetConfig+0xd82>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d05e      	beq.n	8007580 <UART_SetConfig+0xd78>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d055      	beq.n	8007576 <UART_SetConfig+0xd6e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d04c      	beq.n	800756c <UART_SetConfig+0xd64>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d043      	beq.n	8007562 <UART_SetConfig+0xd5a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d03a      	beq.n	8007558 <UART_SetConfig+0xd50>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	2b06      	cmp	r3, #6
 80074e8:	d031      	beq.n	800754e <UART_SetConfig+0xd46>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	2b07      	cmp	r3, #7
 80074f0:	d028      	beq.n	8007544 <UART_SetConfig+0xd3c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d01f      	beq.n	800753a <UART_SetConfig+0xd32>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	2b09      	cmp	r3, #9
 8007500:	d016      	beq.n	8007530 <UART_SetConfig+0xd28>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	2b0a      	cmp	r3, #10
 8007508:	d00d      	beq.n	8007526 <UART_SetConfig+0xd1e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750e:	2b0b      	cmp	r3, #11
 8007510:	d104      	bne.n	800751c <UART_SetConfig+0xd14>
 8007512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007516:	f04f 0400 	mov.w	r4, #0
 800751a:	e03a      	b.n	8007592 <UART_SetConfig+0xd8a>
 800751c:	f04f 0301 	mov.w	r3, #1
 8007520:	f04f 0400 	mov.w	r4, #0
 8007524:	e035      	b.n	8007592 <UART_SetConfig+0xd8a>
 8007526:	f04f 0380 	mov.w	r3, #128	; 0x80
 800752a:	f04f 0400 	mov.w	r4, #0
 800752e:	e030      	b.n	8007592 <UART_SetConfig+0xd8a>
 8007530:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007534:	f04f 0400 	mov.w	r4, #0
 8007538:	e02b      	b.n	8007592 <UART_SetConfig+0xd8a>
 800753a:	f04f 0320 	mov.w	r3, #32
 800753e:	f04f 0400 	mov.w	r4, #0
 8007542:	e026      	b.n	8007592 <UART_SetConfig+0xd8a>
 8007544:	f04f 0310 	mov.w	r3, #16
 8007548:	f04f 0400 	mov.w	r4, #0
 800754c:	e021      	b.n	8007592 <UART_SetConfig+0xd8a>
 800754e:	f04f 030c 	mov.w	r3, #12
 8007552:	f04f 0400 	mov.w	r4, #0
 8007556:	e01c      	b.n	8007592 <UART_SetConfig+0xd8a>
 8007558:	f04f 030a 	mov.w	r3, #10
 800755c:	f04f 0400 	mov.w	r4, #0
 8007560:	e017      	b.n	8007592 <UART_SetConfig+0xd8a>
 8007562:	f04f 0308 	mov.w	r3, #8
 8007566:	f04f 0400 	mov.w	r4, #0
 800756a:	e012      	b.n	8007592 <UART_SetConfig+0xd8a>
 800756c:	f04f 0306 	mov.w	r3, #6
 8007570:	f04f 0400 	mov.w	r4, #0
 8007574:	e00d      	b.n	8007592 <UART_SetConfig+0xd8a>
 8007576:	f04f 0304 	mov.w	r3, #4
 800757a:	f04f 0400 	mov.w	r4, #0
 800757e:	e008      	b.n	8007592 <UART_SetConfig+0xd8a>
 8007580:	f04f 0302 	mov.w	r3, #2
 8007584:	f04f 0400 	mov.w	r4, #0
 8007588:	e003      	b.n	8007592 <UART_SetConfig+0xd8a>
 800758a:	f04f 0301 	mov.w	r3, #1
 800758e:	f04f 0400 	mov.w	r4, #0
 8007592:	461a      	mov	r2, r3
 8007594:	4623      	mov	r3, r4
 8007596:	f7f8 fe9f 	bl	80002d8 <__aeabi_uldivmod>
 800759a:	4603      	mov	r3, r0
 800759c:	460c      	mov	r4, r1
 800759e:	4619      	mov	r1, r3
 80075a0:	4622      	mov	r2, r4
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	f04f 0400 	mov.w	r4, #0
 80075aa:	0214      	lsls	r4, r2, #8
 80075ac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80075b0:	020b      	lsls	r3, r1, #8
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6852      	ldr	r2, [r2, #4]
 80075b6:	0852      	lsrs	r2, r2, #1
 80075b8:	4611      	mov	r1, r2
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	eb13 0b01 	adds.w	fp, r3, r1
 80075c2:	eb44 0c02 	adc.w	ip, r4, r2
 80075c6:	4658      	mov	r0, fp
 80075c8:	4661      	mov	r1, ip
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f04f 0400 	mov.w	r4, #0
 80075d2:	461a      	mov	r2, r3
 80075d4:	4623      	mov	r3, r4
 80075d6:	f7f8 fe7f 	bl	80002d8 <__aeabi_uldivmod>
 80075da:	4603      	mov	r3, r0
 80075dc:	460c      	mov	r4, r1
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075e0:	e2e8      	b.n	8007bb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e2:	f107 030c 	add.w	r3, r7, #12
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd fb74 	bl	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	4618      	mov	r0, r3
 80075f0:	f04f 0100 	mov.w	r1, #0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d067      	beq.n	80076cc <UART_SetConfig+0xec4>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	2b01      	cmp	r3, #1
 8007602:	d05e      	beq.n	80076c2 <UART_SetConfig+0xeba>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	2b02      	cmp	r3, #2
 800760a:	d055      	beq.n	80076b8 <UART_SetConfig+0xeb0>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	2b03      	cmp	r3, #3
 8007612:	d04c      	beq.n	80076ae <UART_SetConfig+0xea6>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	2b04      	cmp	r3, #4
 800761a:	d043      	beq.n	80076a4 <UART_SetConfig+0xe9c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007620:	2b05      	cmp	r3, #5
 8007622:	d03a      	beq.n	800769a <UART_SetConfig+0xe92>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b06      	cmp	r3, #6
 800762a:	d031      	beq.n	8007690 <UART_SetConfig+0xe88>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007630:	2b07      	cmp	r3, #7
 8007632:	d028      	beq.n	8007686 <UART_SetConfig+0xe7e>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	2b08      	cmp	r3, #8
 800763a:	d01f      	beq.n	800767c <UART_SetConfig+0xe74>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	2b09      	cmp	r3, #9
 8007642:	d016      	beq.n	8007672 <UART_SetConfig+0xe6a>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007648:	2b0a      	cmp	r3, #10
 800764a:	d00d      	beq.n	8007668 <UART_SetConfig+0xe60>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	2b0b      	cmp	r3, #11
 8007652:	d104      	bne.n	800765e <UART_SetConfig+0xe56>
 8007654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007658:	f04f 0400 	mov.w	r4, #0
 800765c:	e03a      	b.n	80076d4 <UART_SetConfig+0xecc>
 800765e:	f04f 0301 	mov.w	r3, #1
 8007662:	f04f 0400 	mov.w	r4, #0
 8007666:	e035      	b.n	80076d4 <UART_SetConfig+0xecc>
 8007668:	f04f 0380 	mov.w	r3, #128	; 0x80
 800766c:	f04f 0400 	mov.w	r4, #0
 8007670:	e030      	b.n	80076d4 <UART_SetConfig+0xecc>
 8007672:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007676:	f04f 0400 	mov.w	r4, #0
 800767a:	e02b      	b.n	80076d4 <UART_SetConfig+0xecc>
 800767c:	f04f 0320 	mov.w	r3, #32
 8007680:	f04f 0400 	mov.w	r4, #0
 8007684:	e026      	b.n	80076d4 <UART_SetConfig+0xecc>
 8007686:	f04f 0310 	mov.w	r3, #16
 800768a:	f04f 0400 	mov.w	r4, #0
 800768e:	e021      	b.n	80076d4 <UART_SetConfig+0xecc>
 8007690:	f04f 030c 	mov.w	r3, #12
 8007694:	f04f 0400 	mov.w	r4, #0
 8007698:	e01c      	b.n	80076d4 <UART_SetConfig+0xecc>
 800769a:	f04f 030a 	mov.w	r3, #10
 800769e:	f04f 0400 	mov.w	r4, #0
 80076a2:	e017      	b.n	80076d4 <UART_SetConfig+0xecc>
 80076a4:	f04f 0308 	mov.w	r3, #8
 80076a8:	f04f 0400 	mov.w	r4, #0
 80076ac:	e012      	b.n	80076d4 <UART_SetConfig+0xecc>
 80076ae:	f04f 0306 	mov.w	r3, #6
 80076b2:	f04f 0400 	mov.w	r4, #0
 80076b6:	e00d      	b.n	80076d4 <UART_SetConfig+0xecc>
 80076b8:	f04f 0304 	mov.w	r3, #4
 80076bc:	f04f 0400 	mov.w	r4, #0
 80076c0:	e008      	b.n	80076d4 <UART_SetConfig+0xecc>
 80076c2:	f04f 0302 	mov.w	r3, #2
 80076c6:	f04f 0400 	mov.w	r4, #0
 80076ca:	e003      	b.n	80076d4 <UART_SetConfig+0xecc>
 80076cc:	f04f 0301 	mov.w	r3, #1
 80076d0:	f04f 0400 	mov.w	r4, #0
 80076d4:	461a      	mov	r2, r3
 80076d6:	4623      	mov	r3, r4
 80076d8:	f7f8 fdfe 	bl	80002d8 <__aeabi_uldivmod>
 80076dc:	4603      	mov	r3, r0
 80076de:	460c      	mov	r4, r1
 80076e0:	4619      	mov	r1, r3
 80076e2:	4622      	mov	r2, r4
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	0214      	lsls	r4, r2, #8
 80076ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80076f2:	020b      	lsls	r3, r1, #8
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	6852      	ldr	r2, [r2, #4]
 80076f8:	0852      	lsrs	r2, r2, #1
 80076fa:	4611      	mov	r1, r2
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	eb13 0b01 	adds.w	fp, r3, r1
 8007704:	eb44 0c02 	adc.w	ip, r4, r2
 8007708:	4658      	mov	r0, fp
 800770a:	4661      	mov	r1, ip
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f04f 0400 	mov.w	r4, #0
 8007714:	461a      	mov	r2, r3
 8007716:	4623      	mov	r3, r4
 8007718:	f7f8 fdde 	bl	80002d8 <__aeabi_uldivmod>
 800771c:	4603      	mov	r3, r0
 800771e:	460c      	mov	r4, r1
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007722:	e247      	b.n	8007bb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007724:	4b96      	ldr	r3, [pc, #600]	; (8007980 <UART_SetConfig+0x1178>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 80a3 	beq.w	8007878 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007732:	4b93      	ldr	r3, [pc, #588]	; (8007980 <UART_SetConfig+0x1178>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	08db      	lsrs	r3, r3, #3
 8007738:	f003 0303 	and.w	r3, r3, #3
 800773c:	4a91      	ldr	r2, [pc, #580]	; (8007984 <UART_SetConfig+0x117c>)
 800773e:	fa22 f303 	lsr.w	r3, r2, r3
 8007742:	4618      	mov	r0, r3
 8007744:	f04f 0100 	mov.w	r1, #0
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d067      	beq.n	8007820 <UART_SetConfig+0x1018>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	2b01      	cmp	r3, #1
 8007756:	d05e      	beq.n	8007816 <UART_SetConfig+0x100e>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	2b02      	cmp	r3, #2
 800775e:	d055      	beq.n	800780c <UART_SetConfig+0x1004>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007764:	2b03      	cmp	r3, #3
 8007766:	d04c      	beq.n	8007802 <UART_SetConfig+0xffa>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	2b04      	cmp	r3, #4
 800776e:	d043      	beq.n	80077f8 <UART_SetConfig+0xff0>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	2b05      	cmp	r3, #5
 8007776:	d03a      	beq.n	80077ee <UART_SetConfig+0xfe6>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	2b06      	cmp	r3, #6
 800777e:	d031      	beq.n	80077e4 <UART_SetConfig+0xfdc>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	2b07      	cmp	r3, #7
 8007786:	d028      	beq.n	80077da <UART_SetConfig+0xfd2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	2b08      	cmp	r3, #8
 800778e:	d01f      	beq.n	80077d0 <UART_SetConfig+0xfc8>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	2b09      	cmp	r3, #9
 8007796:	d016      	beq.n	80077c6 <UART_SetConfig+0xfbe>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	2b0a      	cmp	r3, #10
 800779e:	d00d      	beq.n	80077bc <UART_SetConfig+0xfb4>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	2b0b      	cmp	r3, #11
 80077a6:	d104      	bne.n	80077b2 <UART_SetConfig+0xfaa>
 80077a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077ac:	f04f 0400 	mov.w	r4, #0
 80077b0:	e03a      	b.n	8007828 <UART_SetConfig+0x1020>
 80077b2:	f04f 0301 	mov.w	r3, #1
 80077b6:	f04f 0400 	mov.w	r4, #0
 80077ba:	e035      	b.n	8007828 <UART_SetConfig+0x1020>
 80077bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077c0:	f04f 0400 	mov.w	r4, #0
 80077c4:	e030      	b.n	8007828 <UART_SetConfig+0x1020>
 80077c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80077ca:	f04f 0400 	mov.w	r4, #0
 80077ce:	e02b      	b.n	8007828 <UART_SetConfig+0x1020>
 80077d0:	f04f 0320 	mov.w	r3, #32
 80077d4:	f04f 0400 	mov.w	r4, #0
 80077d8:	e026      	b.n	8007828 <UART_SetConfig+0x1020>
 80077da:	f04f 0310 	mov.w	r3, #16
 80077de:	f04f 0400 	mov.w	r4, #0
 80077e2:	e021      	b.n	8007828 <UART_SetConfig+0x1020>
 80077e4:	f04f 030c 	mov.w	r3, #12
 80077e8:	f04f 0400 	mov.w	r4, #0
 80077ec:	e01c      	b.n	8007828 <UART_SetConfig+0x1020>
 80077ee:	f04f 030a 	mov.w	r3, #10
 80077f2:	f04f 0400 	mov.w	r4, #0
 80077f6:	e017      	b.n	8007828 <UART_SetConfig+0x1020>
 80077f8:	f04f 0308 	mov.w	r3, #8
 80077fc:	f04f 0400 	mov.w	r4, #0
 8007800:	e012      	b.n	8007828 <UART_SetConfig+0x1020>
 8007802:	f04f 0306 	mov.w	r3, #6
 8007806:	f04f 0400 	mov.w	r4, #0
 800780a:	e00d      	b.n	8007828 <UART_SetConfig+0x1020>
 800780c:	f04f 0304 	mov.w	r3, #4
 8007810:	f04f 0400 	mov.w	r4, #0
 8007814:	e008      	b.n	8007828 <UART_SetConfig+0x1020>
 8007816:	f04f 0302 	mov.w	r3, #2
 800781a:	f04f 0400 	mov.w	r4, #0
 800781e:	e003      	b.n	8007828 <UART_SetConfig+0x1020>
 8007820:	f04f 0301 	mov.w	r3, #1
 8007824:	f04f 0400 	mov.w	r4, #0
 8007828:	461a      	mov	r2, r3
 800782a:	4623      	mov	r3, r4
 800782c:	f7f8 fd54 	bl	80002d8 <__aeabi_uldivmod>
 8007830:	4603      	mov	r3, r0
 8007832:	460c      	mov	r4, r1
 8007834:	4619      	mov	r1, r3
 8007836:	4622      	mov	r2, r4
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	f04f 0400 	mov.w	r4, #0
 8007840:	0214      	lsls	r4, r2, #8
 8007842:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007846:	020b      	lsls	r3, r1, #8
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	6852      	ldr	r2, [r2, #4]
 800784c:	0852      	lsrs	r2, r2, #1
 800784e:	4611      	mov	r1, r2
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	eb13 0b01 	adds.w	fp, r3, r1
 8007858:	eb44 0c02 	adc.w	ip, r4, r2
 800785c:	4658      	mov	r0, fp
 800785e:	4661      	mov	r1, ip
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f04f 0400 	mov.w	r4, #0
 8007868:	461a      	mov	r2, r3
 800786a:	4623      	mov	r3, r4
 800786c:	f7f8 fd34 	bl	80002d8 <__aeabi_uldivmod>
 8007870:	4603      	mov	r3, r0
 8007872:	460c      	mov	r4, r1
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007876:	e19d      	b.n	8007bb4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2b00      	cmp	r3, #0
 800787e:	d05b      	beq.n	8007938 <UART_SetConfig+0x1130>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	2b01      	cmp	r3, #1
 8007886:	d053      	beq.n	8007930 <UART_SetConfig+0x1128>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b02      	cmp	r3, #2
 800788e:	d04b      	beq.n	8007928 <UART_SetConfig+0x1120>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2b03      	cmp	r3, #3
 8007896:	d043      	beq.n	8007920 <UART_SetConfig+0x1118>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	2b04      	cmp	r3, #4
 800789e:	d03b      	beq.n	8007918 <UART_SetConfig+0x1110>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	2b05      	cmp	r3, #5
 80078a6:	d033      	beq.n	8007910 <UART_SetConfig+0x1108>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ac:	2b06      	cmp	r3, #6
 80078ae:	d02b      	beq.n	8007908 <UART_SetConfig+0x1100>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b07      	cmp	r3, #7
 80078b6:	d023      	beq.n	8007900 <UART_SetConfig+0x10f8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d01b      	beq.n	80078f8 <UART_SetConfig+0x10f0>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	d013      	beq.n	80078f0 <UART_SetConfig+0x10e8>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	2b0a      	cmp	r3, #10
 80078ce:	d00b      	beq.n	80078e8 <UART_SetConfig+0x10e0>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	2b0b      	cmp	r3, #11
 80078d6:	d103      	bne.n	80078e0 <UART_SetConfig+0x10d8>
 80078d8:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <UART_SetConfig+0x117c>)
 80078da:	f04f 0400 	mov.w	r4, #0
 80078de:	e02e      	b.n	800793e <UART_SetConfig+0x1136>
 80078e0:	4b29      	ldr	r3, [pc, #164]	; (8007988 <UART_SetConfig+0x1180>)
 80078e2:	f04f 0403 	mov.w	r4, #3
 80078e6:	e02a      	b.n	800793e <UART_SetConfig+0x1136>
 80078e8:	4b28      	ldr	r3, [pc, #160]	; (800798c <UART_SetConfig+0x1184>)
 80078ea:	f04f 0400 	mov.w	r4, #0
 80078ee:	e026      	b.n	800793e <UART_SetConfig+0x1136>
 80078f0:	4b27      	ldr	r3, [pc, #156]	; (8007990 <UART_SetConfig+0x1188>)
 80078f2:	f04f 0400 	mov.w	r4, #0
 80078f6:	e022      	b.n	800793e <UART_SetConfig+0x1136>
 80078f8:	4b26      	ldr	r3, [pc, #152]	; (8007994 <UART_SetConfig+0x118c>)
 80078fa:	f04f 0400 	mov.w	r4, #0
 80078fe:	e01e      	b.n	800793e <UART_SetConfig+0x1136>
 8007900:	4b25      	ldr	r3, [pc, #148]	; (8007998 <UART_SetConfig+0x1190>)
 8007902:	f04f 0400 	mov.w	r4, #0
 8007906:	e01a      	b.n	800793e <UART_SetConfig+0x1136>
 8007908:	a419      	add	r4, pc, #100	; (adr r4, 8007970 <UART_SetConfig+0x1168>)
 800790a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800790e:	e016      	b.n	800793e <UART_SetConfig+0x1136>
 8007910:	4b22      	ldr	r3, [pc, #136]	; (800799c <UART_SetConfig+0x1194>)
 8007912:	f04f 0400 	mov.w	r4, #0
 8007916:	e012      	b.n	800793e <UART_SetConfig+0x1136>
 8007918:	4b21      	ldr	r3, [pc, #132]	; (80079a0 <UART_SetConfig+0x1198>)
 800791a:	f04f 0400 	mov.w	r4, #0
 800791e:	e00e      	b.n	800793e <UART_SetConfig+0x1136>
 8007920:	a415      	add	r4, pc, #84	; (adr r4, 8007978 <UART_SetConfig+0x1170>)
 8007922:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007926:	e00a      	b.n	800793e <UART_SetConfig+0x1136>
 8007928:	4b1e      	ldr	r3, [pc, #120]	; (80079a4 <UART_SetConfig+0x119c>)
 800792a:	f04f 0400 	mov.w	r4, #0
 800792e:	e006      	b.n	800793e <UART_SetConfig+0x1136>
 8007930:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <UART_SetConfig+0x11a0>)
 8007932:	f04f 0401 	mov.w	r4, #1
 8007936:	e002      	b.n	800793e <UART_SetConfig+0x1136>
 8007938:	4b13      	ldr	r3, [pc, #76]	; (8007988 <UART_SetConfig+0x1180>)
 800793a:	f04f 0403 	mov.w	r4, #3
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6852      	ldr	r2, [r2, #4]
 8007942:	0852      	lsrs	r2, r2, #1
 8007944:	4611      	mov	r1, r2
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	eb13 0b01 	adds.w	fp, r3, r1
 800794e:	eb44 0c02 	adc.w	ip, r4, r2
 8007952:	4658      	mov	r0, fp
 8007954:	4661      	mov	r1, ip
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	461a      	mov	r2, r3
 8007960:	4623      	mov	r3, r4
 8007962:	f7f8 fcb9 	bl	80002d8 <__aeabi_uldivmod>
 8007966:	4603      	mov	r3, r0
 8007968:	460c      	mov	r4, r1
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800796c:	e122      	b.n	8007bb4 <UART_SetConfig+0x13ac>
 800796e:	bf00      	nop
 8007970:	51615500 	.word	0x51615500
 8007974:	00000000 	.word	0x00000000
 8007978:	a2c2aa00 	.word	0xa2c2aa00
 800797c:	00000000 	.word	0x00000000
 8007980:	58024400 	.word	0x58024400
 8007984:	03d09000 	.word	0x03d09000
 8007988:	d0900000 	.word	0xd0900000
 800798c:	07a12000 	.word	0x07a12000
 8007990:	0f424000 	.word	0x0f424000
 8007994:	1e848000 	.word	0x1e848000
 8007998:	3d090000 	.word	0x3d090000
 800799c:	61a80000 	.word	0x61a80000
 80079a0:	7a120000 	.word	0x7a120000
 80079a4:	f4240000 	.word	0xf4240000
 80079a8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d05b      	beq.n	8007a6c <UART_SetConfig+0x1264>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d053      	beq.n	8007a64 <UART_SetConfig+0x125c>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d04b      	beq.n	8007a5c <UART_SetConfig+0x1254>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d043      	beq.n	8007a54 <UART_SetConfig+0x124c>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d03b      	beq.n	8007a4c <UART_SetConfig+0x1244>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2b05      	cmp	r3, #5
 80079da:	d033      	beq.n	8007a44 <UART_SetConfig+0x123c>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	2b06      	cmp	r3, #6
 80079e2:	d02b      	beq.n	8007a3c <UART_SetConfig+0x1234>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e8:	2b07      	cmp	r3, #7
 80079ea:	d023      	beq.n	8007a34 <UART_SetConfig+0x122c>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d01b      	beq.n	8007a2c <UART_SetConfig+0x1224>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	2b09      	cmp	r3, #9
 80079fa:	d013      	beq.n	8007a24 <UART_SetConfig+0x121c>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	2b0a      	cmp	r3, #10
 8007a02:	d00b      	beq.n	8007a1c <UART_SetConfig+0x1214>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a08:	2b0b      	cmp	r3, #11
 8007a0a:	d103      	bne.n	8007a14 <UART_SetConfig+0x120c>
 8007a0c:	4bc0      	ldr	r3, [pc, #768]	; (8007d10 <UART_SetConfig+0x1508>)
 8007a0e:	f04f 0400 	mov.w	r4, #0
 8007a12:	e02e      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a14:	4bbf      	ldr	r3, [pc, #764]	; (8007d14 <UART_SetConfig+0x150c>)
 8007a16:	f04f 0400 	mov.w	r4, #0
 8007a1a:	e02a      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a1c:	4bbe      	ldr	r3, [pc, #760]	; (8007d18 <UART_SetConfig+0x1510>)
 8007a1e:	f04f 0400 	mov.w	r4, #0
 8007a22:	e026      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a24:	4bbd      	ldr	r3, [pc, #756]	; (8007d1c <UART_SetConfig+0x1514>)
 8007a26:	f04f 0400 	mov.w	r4, #0
 8007a2a:	e022      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a2c:	4bbc      	ldr	r3, [pc, #752]	; (8007d20 <UART_SetConfig+0x1518>)
 8007a2e:	f04f 0400 	mov.w	r4, #0
 8007a32:	e01e      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a34:	4bbb      	ldr	r3, [pc, #748]	; (8007d24 <UART_SetConfig+0x151c>)
 8007a36:	f04f 0400 	mov.w	r4, #0
 8007a3a:	e01a      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a3c:	a4b0      	add	r4, pc, #704	; (adr r4, 8007d00 <UART_SetConfig+0x14f8>)
 8007a3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a42:	e016      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a44:	4bb8      	ldr	r3, [pc, #736]	; (8007d28 <UART_SetConfig+0x1520>)
 8007a46:	f04f 0400 	mov.w	r4, #0
 8007a4a:	e012      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a4c:	4bb7      	ldr	r3, [pc, #732]	; (8007d2c <UART_SetConfig+0x1524>)
 8007a4e:	f04f 0400 	mov.w	r4, #0
 8007a52:	e00e      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a54:	a4ac      	add	r4, pc, #688	; (adr r4, 8007d08 <UART_SetConfig+0x1500>)
 8007a56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a5a:	e00a      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a5c:	4bb4      	ldr	r3, [pc, #720]	; (8007d30 <UART_SetConfig+0x1528>)
 8007a5e:	f04f 0400 	mov.w	r4, #0
 8007a62:	e006      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a64:	4bb3      	ldr	r3, [pc, #716]	; (8007d34 <UART_SetConfig+0x152c>)
 8007a66:	f04f 0400 	mov.w	r4, #0
 8007a6a:	e002      	b.n	8007a72 <UART_SetConfig+0x126a>
 8007a6c:	4ba9      	ldr	r3, [pc, #676]	; (8007d14 <UART_SetConfig+0x150c>)
 8007a6e:	f04f 0400 	mov.w	r4, #0
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6852      	ldr	r2, [r2, #4]
 8007a76:	0852      	lsrs	r2, r2, #1
 8007a78:	4611      	mov	r1, r2
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	eb13 0b01 	adds.w	fp, r3, r1
 8007a82:	eb44 0c02 	adc.w	ip, r4, r2
 8007a86:	4658      	mov	r0, fp
 8007a88:	4661      	mov	r1, ip
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f04f 0400 	mov.w	r4, #0
 8007a92:	461a      	mov	r2, r3
 8007a94:	4623      	mov	r3, r4
 8007a96:	f7f8 fc1f 	bl	80002d8 <__aeabi_uldivmod>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007aa0:	e088      	b.n	8007bb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d064      	beq.n	8007b74 <UART_SetConfig+0x136c>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d05b      	beq.n	8007b6a <UART_SetConfig+0x1362>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d052      	beq.n	8007b60 <UART_SetConfig+0x1358>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d04a      	beq.n	8007b58 <UART_SetConfig+0x1350>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d041      	beq.n	8007b4e <UART_SetConfig+0x1346>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d039      	beq.n	8007b46 <UART_SetConfig+0x133e>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d031      	beq.n	8007b3e <UART_SetConfig+0x1336>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	2b07      	cmp	r3, #7
 8007ae0:	d028      	beq.n	8007b34 <UART_SetConfig+0x132c>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d01f      	beq.n	8007b2a <UART_SetConfig+0x1322>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d016      	beq.n	8007b20 <UART_SetConfig+0x1318>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	2b0a      	cmp	r3, #10
 8007af8:	d00d      	beq.n	8007b16 <UART_SetConfig+0x130e>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	2b0b      	cmp	r3, #11
 8007b00:	d104      	bne.n	8007b0c <UART_SetConfig+0x1304>
 8007b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b06:	f04f 0400 	mov.w	r4, #0
 8007b0a:	e037      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b10:	f04f 0400 	mov.w	r4, #0
 8007b14:	e032      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b1a:	f04f 0400 	mov.w	r4, #0
 8007b1e:	e02d      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b24:	f04f 0400 	mov.w	r4, #0
 8007b28:	e028      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b2e:	f04f 0400 	mov.w	r4, #0
 8007b32:	e023      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007b38:	f04f 0400 	mov.w	r4, #0
 8007b3c:	e01e      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b3e:	4b7e      	ldr	r3, [pc, #504]	; (8007d38 <UART_SetConfig+0x1530>)
 8007b40:	f04f 0400 	mov.w	r4, #0
 8007b44:	e01a      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b46:	4b7d      	ldr	r3, [pc, #500]	; (8007d3c <UART_SetConfig+0x1534>)
 8007b48:	f04f 0400 	mov.w	r4, #0
 8007b4c:	e016      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007b52:	f04f 0400 	mov.w	r4, #0
 8007b56:	e011      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b58:	4b79      	ldr	r3, [pc, #484]	; (8007d40 <UART_SetConfig+0x1538>)
 8007b5a:	f04f 0400 	mov.w	r4, #0
 8007b5e:	e00d      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007b64:	f04f 0400 	mov.w	r4, #0
 8007b68:	e008      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007b6e:	f04f 0400 	mov.w	r4, #0
 8007b72:	e003      	b.n	8007b7c <UART_SetConfig+0x1374>
 8007b74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b78:	f04f 0400 	mov.w	r4, #0
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6852      	ldr	r2, [r2, #4]
 8007b80:	0852      	lsrs	r2, r2, #1
 8007b82:	4611      	mov	r1, r2
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	eb13 0b01 	adds.w	fp, r3, r1
 8007b8c:	eb44 0c02 	adc.w	ip, r4, r2
 8007b90:	4658      	mov	r0, fp
 8007b92:	4661      	mov	r1, ip
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f04f 0400 	mov.w	r4, #0
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4623      	mov	r3, r4
 8007ba0:	f7f8 fb9a 	bl	80002d8 <__aeabi_uldivmod>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007baa:	e003      	b.n	8007bb4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007bb2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bba:	d309      	bcc.n	8007bd0 <UART_SetConfig+0x13c8>
 8007bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc2:	d205      	bcs.n	8007bd0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bca:	60da      	str	r2, [r3, #12]
 8007bcc:	f000 bf85 	b.w	8008ada <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007bd6:	f000 bf80 	b.w	8008ada <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be2:	f040 83da 	bne.w	800839a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007be6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007bea:	2b40      	cmp	r3, #64	; 0x40
 8007bec:	f200 83b3 	bhi.w	8008356 <UART_SetConfig+0x1b4e>
 8007bf0:	a201      	add	r2, pc, #4	; (adr r2, 8007bf8 <UART_SetConfig+0x13f0>)
 8007bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf6:	bf00      	nop
 8007bf8:	08007d45 	.word	0x08007d45
 8007bfc:	08007dfd 	.word	0x08007dfd
 8007c00:	08008357 	.word	0x08008357
 8007c04:	08008357 	.word	0x08008357
 8007c08:	08007eb5 	.word	0x08007eb5
 8007c0c:	08008357 	.word	0x08008357
 8007c10:	08008357 	.word	0x08008357
 8007c14:	08008357 	.word	0x08008357
 8007c18:	08007f71 	.word	0x08007f71
 8007c1c:	08008357 	.word	0x08008357
 8007c20:	08008357 	.word	0x08008357
 8007c24:	08008357 	.word	0x08008357
 8007c28:	08008357 	.word	0x08008357
 8007c2c:	08008357 	.word	0x08008357
 8007c30:	08008357 	.word	0x08008357
 8007c34:	08008357 	.word	0x08008357
 8007c38:	0800802d 	.word	0x0800802d
 8007c3c:	08008357 	.word	0x08008357
 8007c40:	08008357 	.word	0x08008357
 8007c44:	08008357 	.word	0x08008357
 8007c48:	08008357 	.word	0x08008357
 8007c4c:	08008357 	.word	0x08008357
 8007c50:	08008357 	.word	0x08008357
 8007c54:	08008357 	.word	0x08008357
 8007c58:	08008357 	.word	0x08008357
 8007c5c:	08008357 	.word	0x08008357
 8007c60:	08008357 	.word	0x08008357
 8007c64:	08008357 	.word	0x08008357
 8007c68:	08008357 	.word	0x08008357
 8007c6c:	08008357 	.word	0x08008357
 8007c70:	08008357 	.word	0x08008357
 8007c74:	08008357 	.word	0x08008357
 8007c78:	0800819f 	.word	0x0800819f
 8007c7c:	08008357 	.word	0x08008357
 8007c80:	08008357 	.word	0x08008357
 8007c84:	08008357 	.word	0x08008357
 8007c88:	08008357 	.word	0x08008357
 8007c8c:	08008357 	.word	0x08008357
 8007c90:	08008357 	.word	0x08008357
 8007c94:	08008357 	.word	0x08008357
 8007c98:	08008357 	.word	0x08008357
 8007c9c:	08008357 	.word	0x08008357
 8007ca0:	08008357 	.word	0x08008357
 8007ca4:	08008357 	.word	0x08008357
 8007ca8:	08008357 	.word	0x08008357
 8007cac:	08008357 	.word	0x08008357
 8007cb0:	08008357 	.word	0x08008357
 8007cb4:	08008357 	.word	0x08008357
 8007cb8:	08008357 	.word	0x08008357
 8007cbc:	08008357 	.word	0x08008357
 8007cc0:	08008357 	.word	0x08008357
 8007cc4:	08008357 	.word	0x08008357
 8007cc8:	08008357 	.word	0x08008357
 8007ccc:	08008357 	.word	0x08008357
 8007cd0:	08008357 	.word	0x08008357
 8007cd4:	08008357 	.word	0x08008357
 8007cd8:	08008357 	.word	0x08008357
 8007cdc:	08008357 	.word	0x08008357
 8007ce0:	08008357 	.word	0x08008357
 8007ce4:	08008357 	.word	0x08008357
 8007ce8:	08008357 	.word	0x08008357
 8007cec:	08008357 	.word	0x08008357
 8007cf0:	08008357 	.word	0x08008357
 8007cf4:	08008357 	.word	0x08008357
 8007cf8:	08008295 	.word	0x08008295
 8007cfc:	f3af 8000 	nop.w
 8007d00:	05161500 	.word	0x05161500
 8007d04:	00000000 	.word	0x00000000
 8007d08:	0a2c2a00 	.word	0x0a2c2a00
 8007d0c:	00000000 	.word	0x00000000
 8007d10:	003d0900 	.word	0x003d0900
 8007d14:	3d090000 	.word	0x3d090000
 8007d18:	007a1200 	.word	0x007a1200
 8007d1c:	00f42400 	.word	0x00f42400
 8007d20:	01e84800 	.word	0x01e84800
 8007d24:	03d09000 	.word	0x03d09000
 8007d28:	061a8000 	.word	0x061a8000
 8007d2c:	07a12000 	.word	0x07a12000
 8007d30:	0f424000 	.word	0x0f424000
 8007d34:	1e848000 	.word	0x1e848000
 8007d38:	000aaa00 	.word	0x000aaa00
 8007d3c:	000ccc00 	.word	0x000ccc00
 8007d40:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fb ff48 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 8007d48:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d044      	beq.n	8007ddc <UART_SetConfig+0x15d4>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d03e      	beq.n	8007dd8 <UART_SetConfig+0x15d0>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d038      	beq.n	8007dd4 <UART_SetConfig+0x15cc>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d032      	beq.n	8007dd0 <UART_SetConfig+0x15c8>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b04      	cmp	r3, #4
 8007d70:	d02c      	beq.n	8007dcc <UART_SetConfig+0x15c4>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	2b05      	cmp	r3, #5
 8007d78:	d026      	beq.n	8007dc8 <UART_SetConfig+0x15c0>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	d020      	beq.n	8007dc4 <UART_SetConfig+0x15bc>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b07      	cmp	r3, #7
 8007d88:	d01a      	beq.n	8007dc0 <UART_SetConfig+0x15b8>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b08      	cmp	r3, #8
 8007d90:	d014      	beq.n	8007dbc <UART_SetConfig+0x15b4>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b09      	cmp	r3, #9
 8007d98:	d00e      	beq.n	8007db8 <UART_SetConfig+0x15b0>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b0a      	cmp	r3, #10
 8007da0:	d008      	beq.n	8007db4 <UART_SetConfig+0x15ac>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b0b      	cmp	r3, #11
 8007da8:	d102      	bne.n	8007db0 <UART_SetConfig+0x15a8>
 8007daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dae:	e016      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007db0:	2301      	movs	r3, #1
 8007db2:	e014      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	e012      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007db8:	2340      	movs	r3, #64	; 0x40
 8007dba:	e010      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	e00e      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dc0:	2310      	movs	r3, #16
 8007dc2:	e00c      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dc4:	230c      	movs	r3, #12
 8007dc6:	e00a      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dc8:	230a      	movs	r3, #10
 8007dca:	e008      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	e006      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dd0:	2306      	movs	r3, #6
 8007dd2:	e004      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	e002      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e000      	b.n	8007dde <UART_SetConfig+0x15d6>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de4:	005a      	lsls	r2, r3, #1
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	085b      	lsrs	r3, r3, #1
 8007dec:	441a      	add	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dfa:	e2b0      	b.n	800835e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dfc:	f7fb ff02 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8007e00:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d044      	beq.n	8007e94 <UART_SetConfig+0x168c>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d03e      	beq.n	8007e90 <UART_SetConfig+0x1688>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d038      	beq.n	8007e8c <UART_SetConfig+0x1684>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d032      	beq.n	8007e88 <UART_SetConfig+0x1680>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d02c      	beq.n	8007e84 <UART_SetConfig+0x167c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	d026      	beq.n	8007e80 <UART_SetConfig+0x1678>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	2b06      	cmp	r3, #6
 8007e38:	d020      	beq.n	8007e7c <UART_SetConfig+0x1674>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	2b07      	cmp	r3, #7
 8007e40:	d01a      	beq.n	8007e78 <UART_SetConfig+0x1670>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d014      	beq.n	8007e74 <UART_SetConfig+0x166c>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b09      	cmp	r3, #9
 8007e50:	d00e      	beq.n	8007e70 <UART_SetConfig+0x1668>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	2b0a      	cmp	r3, #10
 8007e58:	d008      	beq.n	8007e6c <UART_SetConfig+0x1664>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	2b0b      	cmp	r3, #11
 8007e60:	d102      	bne.n	8007e68 <UART_SetConfig+0x1660>
 8007e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e66:	e016      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e014      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e6c:	2380      	movs	r3, #128	; 0x80
 8007e6e:	e012      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	e010      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e74:	2320      	movs	r3, #32
 8007e76:	e00e      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e78:	2310      	movs	r3, #16
 8007e7a:	e00c      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e7c:	230c      	movs	r3, #12
 8007e7e:	e00a      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e80:	230a      	movs	r3, #10
 8007e82:	e008      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e84:	2308      	movs	r3, #8
 8007e86:	e006      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e88:	2306      	movs	r3, #6
 8007e8a:	e004      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e8c:	2304      	movs	r3, #4
 8007e8e:	e002      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e000      	b.n	8007e96 <UART_SetConfig+0x168e>
 8007e94:	2301      	movs	r3, #1
 8007e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9c:	005a      	lsls	r2, r3, #1
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	441a      	add	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007eb2:	e254      	b.n	800835e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eb4:	f107 0318 	add.w	r3, r7, #24
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fc fdbf 	bl	8004a3c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d044      	beq.n	8007f52 <UART_SetConfig+0x174a>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d03e      	beq.n	8007f4e <UART_SetConfig+0x1746>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d038      	beq.n	8007f4a <UART_SetConfig+0x1742>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	2b03      	cmp	r3, #3
 8007ede:	d032      	beq.n	8007f46 <UART_SetConfig+0x173e>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	2b04      	cmp	r3, #4
 8007ee6:	d02c      	beq.n	8007f42 <UART_SetConfig+0x173a>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	d026      	beq.n	8007f3e <UART_SetConfig+0x1736>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b06      	cmp	r3, #6
 8007ef6:	d020      	beq.n	8007f3a <UART_SetConfig+0x1732>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efc:	2b07      	cmp	r3, #7
 8007efe:	d01a      	beq.n	8007f36 <UART_SetConfig+0x172e>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d014      	beq.n	8007f32 <UART_SetConfig+0x172a>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	2b09      	cmp	r3, #9
 8007f0e:	d00e      	beq.n	8007f2e <UART_SetConfig+0x1726>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	2b0a      	cmp	r3, #10
 8007f16:	d008      	beq.n	8007f2a <UART_SetConfig+0x1722>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b0b      	cmp	r3, #11
 8007f1e:	d102      	bne.n	8007f26 <UART_SetConfig+0x171e>
 8007f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f24:	e016      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e014      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f2a:	2380      	movs	r3, #128	; 0x80
 8007f2c:	e012      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f2e:	2340      	movs	r3, #64	; 0x40
 8007f30:	e010      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f32:	2320      	movs	r3, #32
 8007f34:	e00e      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f36:	2310      	movs	r3, #16
 8007f38:	e00c      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	e00a      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f3e:	230a      	movs	r3, #10
 8007f40:	e008      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f42:	2308      	movs	r3, #8
 8007f44:	e006      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f46:	2306      	movs	r3, #6
 8007f48:	e004      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f4a:	2304      	movs	r3, #4
 8007f4c:	e002      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f4e:	2302      	movs	r3, #2
 8007f50:	e000      	b.n	8007f54 <UART_SetConfig+0x174c>
 8007f52:	2301      	movs	r3, #1
 8007f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f58:	005a      	lsls	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	441a      	add	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f6e:	e1f6      	b.n	800835e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f70:	f107 030c 	add.w	r3, r7, #12
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fc fead 	bl	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d044      	beq.n	800800e <UART_SetConfig+0x1806>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d03e      	beq.n	800800a <UART_SetConfig+0x1802>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d038      	beq.n	8008006 <UART_SetConfig+0x17fe>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d032      	beq.n	8008002 <UART_SetConfig+0x17fa>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d02c      	beq.n	8007ffe <UART_SetConfig+0x17f6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	2b05      	cmp	r3, #5
 8007faa:	d026      	beq.n	8007ffa <UART_SetConfig+0x17f2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb0:	2b06      	cmp	r3, #6
 8007fb2:	d020      	beq.n	8007ff6 <UART_SetConfig+0x17ee>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb8:	2b07      	cmp	r3, #7
 8007fba:	d01a      	beq.n	8007ff2 <UART_SetConfig+0x17ea>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d014      	beq.n	8007fee <UART_SetConfig+0x17e6>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	2b09      	cmp	r3, #9
 8007fca:	d00e      	beq.n	8007fea <UART_SetConfig+0x17e2>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd0:	2b0a      	cmp	r3, #10
 8007fd2:	d008      	beq.n	8007fe6 <UART_SetConfig+0x17de>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	2b0b      	cmp	r3, #11
 8007fda:	d102      	bne.n	8007fe2 <UART_SetConfig+0x17da>
 8007fdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fe0:	e016      	b.n	8008010 <UART_SetConfig+0x1808>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e014      	b.n	8008010 <UART_SetConfig+0x1808>
 8007fe6:	2380      	movs	r3, #128	; 0x80
 8007fe8:	e012      	b.n	8008010 <UART_SetConfig+0x1808>
 8007fea:	2340      	movs	r3, #64	; 0x40
 8007fec:	e010      	b.n	8008010 <UART_SetConfig+0x1808>
 8007fee:	2320      	movs	r3, #32
 8007ff0:	e00e      	b.n	8008010 <UART_SetConfig+0x1808>
 8007ff2:	2310      	movs	r3, #16
 8007ff4:	e00c      	b.n	8008010 <UART_SetConfig+0x1808>
 8007ff6:	230c      	movs	r3, #12
 8007ff8:	e00a      	b.n	8008010 <UART_SetConfig+0x1808>
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	e008      	b.n	8008010 <UART_SetConfig+0x1808>
 8007ffe:	2308      	movs	r3, #8
 8008000:	e006      	b.n	8008010 <UART_SetConfig+0x1808>
 8008002:	2306      	movs	r3, #6
 8008004:	e004      	b.n	8008010 <UART_SetConfig+0x1808>
 8008006:	2304      	movs	r3, #4
 8008008:	e002      	b.n	8008010 <UART_SetConfig+0x1808>
 800800a:	2302      	movs	r3, #2
 800800c:	e000      	b.n	8008010 <UART_SetConfig+0x1808>
 800800e:	2301      	movs	r3, #1
 8008010:	fbb2 f3f3 	udiv	r3, r2, r3
 8008014:	005a      	lsls	r2, r3, #1
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	441a      	add	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	fbb2 f3f3 	udiv	r3, r2, r3
 8008026:	b29b      	uxth	r3, r3
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800802a:	e198      	b.n	800835e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800802c:	4b87      	ldr	r3, [pc, #540]	; (800824c <UART_SetConfig+0x1a44>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0320 	and.w	r3, r3, #32
 8008034:	2b00      	cmp	r3, #0
 8008036:	d05e      	beq.n	80080f6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008038:	4b84      	ldr	r3, [pc, #528]	; (800824c <UART_SetConfig+0x1a44>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	08db      	lsrs	r3, r3, #3
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	4a83      	ldr	r2, [pc, #524]	; (8008250 <UART_SetConfig+0x1a48>)
 8008044:	40da      	lsrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	d044      	beq.n	80080d8 <UART_SetConfig+0x18d0>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	2b01      	cmp	r3, #1
 8008054:	d03e      	beq.n	80080d4 <UART_SetConfig+0x18cc>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	2b02      	cmp	r3, #2
 800805c:	d038      	beq.n	80080d0 <UART_SetConfig+0x18c8>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	2b03      	cmp	r3, #3
 8008064:	d032      	beq.n	80080cc <UART_SetConfig+0x18c4>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	2b04      	cmp	r3, #4
 800806c:	d02c      	beq.n	80080c8 <UART_SetConfig+0x18c0>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	2b05      	cmp	r3, #5
 8008074:	d026      	beq.n	80080c4 <UART_SetConfig+0x18bc>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807a:	2b06      	cmp	r3, #6
 800807c:	d020      	beq.n	80080c0 <UART_SetConfig+0x18b8>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008082:	2b07      	cmp	r3, #7
 8008084:	d01a      	beq.n	80080bc <UART_SetConfig+0x18b4>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808a:	2b08      	cmp	r3, #8
 800808c:	d014      	beq.n	80080b8 <UART_SetConfig+0x18b0>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b09      	cmp	r3, #9
 8008094:	d00e      	beq.n	80080b4 <UART_SetConfig+0x18ac>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	2b0a      	cmp	r3, #10
 800809c:	d008      	beq.n	80080b0 <UART_SetConfig+0x18a8>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a2:	2b0b      	cmp	r3, #11
 80080a4:	d102      	bne.n	80080ac <UART_SetConfig+0x18a4>
 80080a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080aa:	e016      	b.n	80080da <UART_SetConfig+0x18d2>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e014      	b.n	80080da <UART_SetConfig+0x18d2>
 80080b0:	2380      	movs	r3, #128	; 0x80
 80080b2:	e012      	b.n	80080da <UART_SetConfig+0x18d2>
 80080b4:	2340      	movs	r3, #64	; 0x40
 80080b6:	e010      	b.n	80080da <UART_SetConfig+0x18d2>
 80080b8:	2320      	movs	r3, #32
 80080ba:	e00e      	b.n	80080da <UART_SetConfig+0x18d2>
 80080bc:	2310      	movs	r3, #16
 80080be:	e00c      	b.n	80080da <UART_SetConfig+0x18d2>
 80080c0:	230c      	movs	r3, #12
 80080c2:	e00a      	b.n	80080da <UART_SetConfig+0x18d2>
 80080c4:	230a      	movs	r3, #10
 80080c6:	e008      	b.n	80080da <UART_SetConfig+0x18d2>
 80080c8:	2308      	movs	r3, #8
 80080ca:	e006      	b.n	80080da <UART_SetConfig+0x18d2>
 80080cc:	2306      	movs	r3, #6
 80080ce:	e004      	b.n	80080da <UART_SetConfig+0x18d2>
 80080d0:	2304      	movs	r3, #4
 80080d2:	e002      	b.n	80080da <UART_SetConfig+0x18d2>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e000      	b.n	80080da <UART_SetConfig+0x18d2>
 80080d8:	2301      	movs	r3, #1
 80080da:	fbb2 f3f3 	udiv	r3, r2, r3
 80080de:	005a      	lsls	r2, r3, #1
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	085b      	lsrs	r3, r3, #1
 80080e6:	441a      	add	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80080f4:	e133      	b.n	800835e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d043      	beq.n	8008186 <UART_SetConfig+0x197e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b01      	cmp	r3, #1
 8008104:	d03d      	beq.n	8008182 <UART_SetConfig+0x197a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b02      	cmp	r3, #2
 800810c:	d037      	beq.n	800817e <UART_SetConfig+0x1976>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	2b03      	cmp	r3, #3
 8008114:	d031      	beq.n	800817a <UART_SetConfig+0x1972>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2b04      	cmp	r3, #4
 800811c:	d02b      	beq.n	8008176 <UART_SetConfig+0x196e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	2b05      	cmp	r3, #5
 8008124:	d025      	beq.n	8008172 <UART_SetConfig+0x196a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	2b06      	cmp	r3, #6
 800812c:	d01f      	beq.n	800816e <UART_SetConfig+0x1966>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	2b07      	cmp	r3, #7
 8008134:	d019      	beq.n	800816a <UART_SetConfig+0x1962>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	2b08      	cmp	r3, #8
 800813c:	d013      	beq.n	8008166 <UART_SetConfig+0x195e>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	2b09      	cmp	r3, #9
 8008144:	d00d      	beq.n	8008162 <UART_SetConfig+0x195a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2b0a      	cmp	r3, #10
 800814c:	d007      	beq.n	800815e <UART_SetConfig+0x1956>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b0b      	cmp	r3, #11
 8008154:	d101      	bne.n	800815a <UART_SetConfig+0x1952>
 8008156:	4b3f      	ldr	r3, [pc, #252]	; (8008254 <UART_SetConfig+0x1a4c>)
 8008158:	e016      	b.n	8008188 <UART_SetConfig+0x1980>
 800815a:	4b3f      	ldr	r3, [pc, #252]	; (8008258 <UART_SetConfig+0x1a50>)
 800815c:	e014      	b.n	8008188 <UART_SetConfig+0x1980>
 800815e:	4b3f      	ldr	r3, [pc, #252]	; (800825c <UART_SetConfig+0x1a54>)
 8008160:	e012      	b.n	8008188 <UART_SetConfig+0x1980>
 8008162:	4b3f      	ldr	r3, [pc, #252]	; (8008260 <UART_SetConfig+0x1a58>)
 8008164:	e010      	b.n	8008188 <UART_SetConfig+0x1980>
 8008166:	4b3f      	ldr	r3, [pc, #252]	; (8008264 <UART_SetConfig+0x1a5c>)
 8008168:	e00e      	b.n	8008188 <UART_SetConfig+0x1980>
 800816a:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <UART_SetConfig+0x1a60>)
 800816c:	e00c      	b.n	8008188 <UART_SetConfig+0x1980>
 800816e:	4b3f      	ldr	r3, [pc, #252]	; (800826c <UART_SetConfig+0x1a64>)
 8008170:	e00a      	b.n	8008188 <UART_SetConfig+0x1980>
 8008172:	4b3f      	ldr	r3, [pc, #252]	; (8008270 <UART_SetConfig+0x1a68>)
 8008174:	e008      	b.n	8008188 <UART_SetConfig+0x1980>
 8008176:	4b3f      	ldr	r3, [pc, #252]	; (8008274 <UART_SetConfig+0x1a6c>)
 8008178:	e006      	b.n	8008188 <UART_SetConfig+0x1980>
 800817a:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <UART_SetConfig+0x1a70>)
 800817c:	e004      	b.n	8008188 <UART_SetConfig+0x1980>
 800817e:	4b3f      	ldr	r3, [pc, #252]	; (800827c <UART_SetConfig+0x1a74>)
 8008180:	e002      	b.n	8008188 <UART_SetConfig+0x1980>
 8008182:	4b33      	ldr	r3, [pc, #204]	; (8008250 <UART_SetConfig+0x1a48>)
 8008184:	e000      	b.n	8008188 <UART_SetConfig+0x1980>
 8008186:	4b34      	ldr	r3, [pc, #208]	; (8008258 <UART_SetConfig+0x1a50>)
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6852      	ldr	r2, [r2, #4]
 800818c:	0852      	lsrs	r2, r2, #1
 800818e:	441a      	add	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	b29b      	uxth	r3, r3
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800819c:	e0df      	b.n	800835e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d045      	beq.n	8008232 <UART_SetConfig+0x1a2a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d03f      	beq.n	800822e <UART_SetConfig+0x1a26>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d039      	beq.n	800822a <UART_SetConfig+0x1a22>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d033      	beq.n	8008226 <UART_SetConfig+0x1a1e>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d02d      	beq.n	8008222 <UART_SetConfig+0x1a1a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b05      	cmp	r3, #5
 80081cc:	d027      	beq.n	800821e <UART_SetConfig+0x1a16>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2b06      	cmp	r3, #6
 80081d4:	d021      	beq.n	800821a <UART_SetConfig+0x1a12>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	2b07      	cmp	r3, #7
 80081dc:	d01b      	beq.n	8008216 <UART_SetConfig+0x1a0e>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e2:	2b08      	cmp	r3, #8
 80081e4:	d015      	beq.n	8008212 <UART_SetConfig+0x1a0a>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d00f      	beq.n	800820e <UART_SetConfig+0x1a06>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	2b0a      	cmp	r3, #10
 80081f4:	d008      	beq.n	8008208 <UART_SetConfig+0x1a00>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b0b      	cmp	r3, #11
 80081fc:	d102      	bne.n	8008204 <UART_SetConfig+0x19fc>
 80081fe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008202:	e017      	b.n	8008234 <UART_SetConfig+0x1a2c>
 8008204:	4b18      	ldr	r3, [pc, #96]	; (8008268 <UART_SetConfig+0x1a60>)
 8008206:	e015      	b.n	8008234 <UART_SetConfig+0x1a2c>
 8008208:	f24f 4324 	movw	r3, #62500	; 0xf424
 800820c:	e012      	b.n	8008234 <UART_SetConfig+0x1a2c>
 800820e:	4b1c      	ldr	r3, [pc, #112]	; (8008280 <UART_SetConfig+0x1a78>)
 8008210:	e010      	b.n	8008234 <UART_SetConfig+0x1a2c>
 8008212:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <UART_SetConfig+0x1a7c>)
 8008214:	e00e      	b.n	8008234 <UART_SetConfig+0x1a2c>
 8008216:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <UART_SetConfig+0x1a4c>)
 8008218:	e00c      	b.n	8008234 <UART_SetConfig+0x1a2c>
 800821a:	4b1b      	ldr	r3, [pc, #108]	; (8008288 <UART_SetConfig+0x1a80>)
 800821c:	e00a      	b.n	8008234 <UART_SetConfig+0x1a2c>
 800821e:	4b1b      	ldr	r3, [pc, #108]	; (800828c <UART_SetConfig+0x1a84>)
 8008220:	e008      	b.n	8008234 <UART_SetConfig+0x1a2c>
 8008222:	4b0e      	ldr	r3, [pc, #56]	; (800825c <UART_SetConfig+0x1a54>)
 8008224:	e006      	b.n	8008234 <UART_SetConfig+0x1a2c>
 8008226:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <UART_SetConfig+0x1a88>)
 8008228:	e004      	b.n	8008234 <UART_SetConfig+0x1a2c>
 800822a:	4b0d      	ldr	r3, [pc, #52]	; (8008260 <UART_SetConfig+0x1a58>)
 800822c:	e002      	b.n	8008234 <UART_SetConfig+0x1a2c>
 800822e:	4b0d      	ldr	r3, [pc, #52]	; (8008264 <UART_SetConfig+0x1a5c>)
 8008230:	e000      	b.n	8008234 <UART_SetConfig+0x1a2c>
 8008232:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <UART_SetConfig+0x1a60>)
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	6852      	ldr	r2, [r2, #4]
 8008238:	0852      	lsrs	r2, r2, #1
 800823a:	441a      	add	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	fbb2 f3f3 	udiv	r3, r2, r3
 8008244:	b29b      	uxth	r3, r3
 8008246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008248:	e089      	b.n	800835e <UART_SetConfig+0x1b56>
 800824a:	bf00      	nop
 800824c:	58024400 	.word	0x58024400
 8008250:	03d09000 	.word	0x03d09000
 8008254:	0007a120 	.word	0x0007a120
 8008258:	07a12000 	.word	0x07a12000
 800825c:	000f4240 	.word	0x000f4240
 8008260:	001e8480 	.word	0x001e8480
 8008264:	003d0900 	.word	0x003d0900
 8008268:	007a1200 	.word	0x007a1200
 800826c:	00a2c2aa 	.word	0x00a2c2aa
 8008270:	00c35000 	.word	0x00c35000
 8008274:	00f42400 	.word	0x00f42400
 8008278:	01458554 	.word	0x01458554
 800827c:	01e84800 	.word	0x01e84800
 8008280:	0001e848 	.word	0x0001e848
 8008284:	0003d090 	.word	0x0003d090
 8008288:	000a2c2a 	.word	0x000a2c2a
 800828c:	000c3500 	.word	0x000c3500
 8008290:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b00      	cmp	r3, #0
 800829a:	d04f      	beq.n	800833c <UART_SetConfig+0x1b34>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d048      	beq.n	8008336 <UART_SetConfig+0x1b2e>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d041      	beq.n	8008330 <UART_SetConfig+0x1b28>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d03a      	beq.n	800832a <UART_SetConfig+0x1b22>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d033      	beq.n	8008324 <UART_SetConfig+0x1b1c>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b05      	cmp	r3, #5
 80082c2:	d02c      	beq.n	800831e <UART_SetConfig+0x1b16>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b06      	cmp	r3, #6
 80082ca:	d025      	beq.n	8008318 <UART_SetConfig+0x1b10>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b07      	cmp	r3, #7
 80082d2:	d01e      	beq.n	8008312 <UART_SetConfig+0x1b0a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d017      	beq.n	800830c <UART_SetConfig+0x1b04>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d010      	beq.n	8008306 <UART_SetConfig+0x1afe>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e8:	2b0a      	cmp	r3, #10
 80082ea:	d009      	beq.n	8008300 <UART_SetConfig+0x1af8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f0:	2b0b      	cmp	r3, #11
 80082f2:	d102      	bne.n	80082fa <UART_SetConfig+0x1af2>
 80082f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082f8:	e022      	b.n	8008340 <UART_SetConfig+0x1b38>
 80082fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082fe:	e01f      	b.n	8008340 <UART_SetConfig+0x1b38>
 8008300:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008304:	e01c      	b.n	8008340 <UART_SetConfig+0x1b38>
 8008306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800830a:	e019      	b.n	8008340 <UART_SetConfig+0x1b38>
 800830c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008310:	e016      	b.n	8008340 <UART_SetConfig+0x1b38>
 8008312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008316:	e013      	b.n	8008340 <UART_SetConfig+0x1b38>
 8008318:	f241 5354 	movw	r3, #5460	; 0x1554
 800831c:	e010      	b.n	8008340 <UART_SetConfig+0x1b38>
 800831e:	f641 1398 	movw	r3, #6552	; 0x1998
 8008322:	e00d      	b.n	8008340 <UART_SetConfig+0x1b38>
 8008324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008328:	e00a      	b.n	8008340 <UART_SetConfig+0x1b38>
 800832a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800832e:	e007      	b.n	8008340 <UART_SetConfig+0x1b38>
 8008330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008334:	e004      	b.n	8008340 <UART_SetConfig+0x1b38>
 8008336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800833a:	e001      	b.n	8008340 <UART_SetConfig+0x1b38>
 800833c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	6852      	ldr	r2, [r2, #4]
 8008344:	0852      	lsrs	r2, r2, #1
 8008346:	441a      	add	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008350:	b29b      	uxth	r3, r3
 8008352:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008354:	e003      	b.n	800835e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800835c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008360:	2b0f      	cmp	r3, #15
 8008362:	d916      	bls.n	8008392 <UART_SetConfig+0x1b8a>
 8008364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836a:	d212      	bcs.n	8008392 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800836c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836e:	b29b      	uxth	r3, r3
 8008370:	f023 030f 	bic.w	r3, r3, #15
 8008374:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008378:	085b      	lsrs	r3, r3, #1
 800837a:	b29b      	uxth	r3, r3
 800837c:	f003 0307 	and.w	r3, r3, #7
 8008380:	b29a      	uxth	r2, r3
 8008382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008384:	4313      	orrs	r3, r2
 8008386:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800838e:	60da      	str	r2, [r3, #12]
 8008390:	e3a3      	b.n	8008ada <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008398:	e39f      	b.n	8008ada <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800839a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800839e:	2b40      	cmp	r3, #64	; 0x40
 80083a0:	f200 8388 	bhi.w	8008ab4 <UART_SetConfig+0x22ac>
 80083a4:	a201      	add	r2, pc, #4	; (adr r2, 80083ac <UART_SetConfig+0x1ba4>)
 80083a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083aa:	bf00      	nop
 80083ac:	080084b1 	.word	0x080084b1
 80083b0:	08008567 	.word	0x08008567
 80083b4:	08008ab5 	.word	0x08008ab5
 80083b8:	08008ab5 	.word	0x08008ab5
 80083bc:	0800861d 	.word	0x0800861d
 80083c0:	08008ab5 	.word	0x08008ab5
 80083c4:	08008ab5 	.word	0x08008ab5
 80083c8:	08008ab5 	.word	0x08008ab5
 80083cc:	080086d7 	.word	0x080086d7
 80083d0:	08008ab5 	.word	0x08008ab5
 80083d4:	08008ab5 	.word	0x08008ab5
 80083d8:	08008ab5 	.word	0x08008ab5
 80083dc:	08008ab5 	.word	0x08008ab5
 80083e0:	08008ab5 	.word	0x08008ab5
 80083e4:	08008ab5 	.word	0x08008ab5
 80083e8:	08008ab5 	.word	0x08008ab5
 80083ec:	08008791 	.word	0x08008791
 80083f0:	08008ab5 	.word	0x08008ab5
 80083f4:	08008ab5 	.word	0x08008ab5
 80083f8:	08008ab5 	.word	0x08008ab5
 80083fc:	08008ab5 	.word	0x08008ab5
 8008400:	08008ab5 	.word	0x08008ab5
 8008404:	08008ab5 	.word	0x08008ab5
 8008408:	08008ab5 	.word	0x08008ab5
 800840c:	08008ab5 	.word	0x08008ab5
 8008410:	08008ab5 	.word	0x08008ab5
 8008414:	08008ab5 	.word	0x08008ab5
 8008418:	08008ab5 	.word	0x08008ab5
 800841c:	08008ab5 	.word	0x08008ab5
 8008420:	08008ab5 	.word	0x08008ab5
 8008424:	08008ab5 	.word	0x08008ab5
 8008428:	08008ab5 	.word	0x08008ab5
 800842c:	08008901 	.word	0x08008901
 8008430:	08008ab5 	.word	0x08008ab5
 8008434:	08008ab5 	.word	0x08008ab5
 8008438:	08008ab5 	.word	0x08008ab5
 800843c:	08008ab5 	.word	0x08008ab5
 8008440:	08008ab5 	.word	0x08008ab5
 8008444:	08008ab5 	.word	0x08008ab5
 8008448:	08008ab5 	.word	0x08008ab5
 800844c:	08008ab5 	.word	0x08008ab5
 8008450:	08008ab5 	.word	0x08008ab5
 8008454:	08008ab5 	.word	0x08008ab5
 8008458:	08008ab5 	.word	0x08008ab5
 800845c:	08008ab5 	.word	0x08008ab5
 8008460:	08008ab5 	.word	0x08008ab5
 8008464:	08008ab5 	.word	0x08008ab5
 8008468:	08008ab5 	.word	0x08008ab5
 800846c:	08008ab5 	.word	0x08008ab5
 8008470:	08008ab5 	.word	0x08008ab5
 8008474:	08008ab5 	.word	0x08008ab5
 8008478:	08008ab5 	.word	0x08008ab5
 800847c:	08008ab5 	.word	0x08008ab5
 8008480:	08008ab5 	.word	0x08008ab5
 8008484:	08008ab5 	.word	0x08008ab5
 8008488:	08008ab5 	.word	0x08008ab5
 800848c:	08008ab5 	.word	0x08008ab5
 8008490:	08008ab5 	.word	0x08008ab5
 8008494:	08008ab5 	.word	0x08008ab5
 8008498:	08008ab5 	.word	0x08008ab5
 800849c:	08008ab5 	.word	0x08008ab5
 80084a0:	08008ab5 	.word	0x08008ab5
 80084a4:	08008ab5 	.word	0x08008ab5
 80084a8:	08008ab5 	.word	0x08008ab5
 80084ac:	080089f5 	.word	0x080089f5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b0:	f7fb fb92 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80084b4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d044      	beq.n	8008548 <UART_SetConfig+0x1d40>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d03e      	beq.n	8008544 <UART_SetConfig+0x1d3c>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d038      	beq.n	8008540 <UART_SetConfig+0x1d38>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d032      	beq.n	800853c <UART_SetConfig+0x1d34>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d02c      	beq.n	8008538 <UART_SetConfig+0x1d30>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d026      	beq.n	8008534 <UART_SetConfig+0x1d2c>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	2b06      	cmp	r3, #6
 80084ec:	d020      	beq.n	8008530 <UART_SetConfig+0x1d28>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	2b07      	cmp	r3, #7
 80084f4:	d01a      	beq.n	800852c <UART_SetConfig+0x1d24>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fa:	2b08      	cmp	r3, #8
 80084fc:	d014      	beq.n	8008528 <UART_SetConfig+0x1d20>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008502:	2b09      	cmp	r3, #9
 8008504:	d00e      	beq.n	8008524 <UART_SetConfig+0x1d1c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	2b0a      	cmp	r3, #10
 800850c:	d008      	beq.n	8008520 <UART_SetConfig+0x1d18>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b0b      	cmp	r3, #11
 8008514:	d102      	bne.n	800851c <UART_SetConfig+0x1d14>
 8008516:	f44f 7380 	mov.w	r3, #256	; 0x100
 800851a:	e016      	b.n	800854a <UART_SetConfig+0x1d42>
 800851c:	2301      	movs	r3, #1
 800851e:	e014      	b.n	800854a <UART_SetConfig+0x1d42>
 8008520:	2380      	movs	r3, #128	; 0x80
 8008522:	e012      	b.n	800854a <UART_SetConfig+0x1d42>
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	e010      	b.n	800854a <UART_SetConfig+0x1d42>
 8008528:	2320      	movs	r3, #32
 800852a:	e00e      	b.n	800854a <UART_SetConfig+0x1d42>
 800852c:	2310      	movs	r3, #16
 800852e:	e00c      	b.n	800854a <UART_SetConfig+0x1d42>
 8008530:	230c      	movs	r3, #12
 8008532:	e00a      	b.n	800854a <UART_SetConfig+0x1d42>
 8008534:	230a      	movs	r3, #10
 8008536:	e008      	b.n	800854a <UART_SetConfig+0x1d42>
 8008538:	2308      	movs	r3, #8
 800853a:	e006      	b.n	800854a <UART_SetConfig+0x1d42>
 800853c:	2306      	movs	r3, #6
 800853e:	e004      	b.n	800854a <UART_SetConfig+0x1d42>
 8008540:	2304      	movs	r3, #4
 8008542:	e002      	b.n	800854a <UART_SetConfig+0x1d42>
 8008544:	2302      	movs	r3, #2
 8008546:	e000      	b.n	800854a <UART_SetConfig+0x1d42>
 8008548:	2301      	movs	r3, #1
 800854a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800854c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	441a      	add	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008560:	b29b      	uxth	r3, r3
 8008562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008564:	e2aa      	b.n	8008abc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008566:	f7fb fb4d 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 800856a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	d044      	beq.n	80085fe <UART_SetConfig+0x1df6>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b01      	cmp	r3, #1
 800857a:	d03e      	beq.n	80085fa <UART_SetConfig+0x1df2>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b02      	cmp	r3, #2
 8008582:	d038      	beq.n	80085f6 <UART_SetConfig+0x1dee>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b03      	cmp	r3, #3
 800858a:	d032      	beq.n	80085f2 <UART_SetConfig+0x1dea>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b04      	cmp	r3, #4
 8008592:	d02c      	beq.n	80085ee <UART_SetConfig+0x1de6>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b05      	cmp	r3, #5
 800859a:	d026      	beq.n	80085ea <UART_SetConfig+0x1de2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	d020      	beq.n	80085e6 <UART_SetConfig+0x1dde>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	d01a      	beq.n	80085e2 <UART_SetConfig+0x1dda>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d014      	beq.n	80085de <UART_SetConfig+0x1dd6>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	d00e      	beq.n	80085da <UART_SetConfig+0x1dd2>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b0a      	cmp	r3, #10
 80085c2:	d008      	beq.n	80085d6 <UART_SetConfig+0x1dce>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b0b      	cmp	r3, #11
 80085ca:	d102      	bne.n	80085d2 <UART_SetConfig+0x1dca>
 80085cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085d0:	e016      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085d2:	2301      	movs	r3, #1
 80085d4:	e014      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	e012      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085da:	2340      	movs	r3, #64	; 0x40
 80085dc:	e010      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085de:	2320      	movs	r3, #32
 80085e0:	e00e      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085e2:	2310      	movs	r3, #16
 80085e4:	e00c      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085e6:	230c      	movs	r3, #12
 80085e8:	e00a      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085ea:	230a      	movs	r3, #10
 80085ec:	e008      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085ee:	2308      	movs	r3, #8
 80085f0:	e006      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085f2:	2306      	movs	r3, #6
 80085f4:	e004      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085f6:	2304      	movs	r3, #4
 80085f8:	e002      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085fa:	2302      	movs	r3, #2
 80085fc:	e000      	b.n	8008600 <UART_SetConfig+0x1df8>
 80085fe:	2301      	movs	r3, #1
 8008600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008602:	fbb2 f2f3 	udiv	r2, r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	441a      	add	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	fbb2 f3f3 	udiv	r3, r2, r3
 8008616:	b29b      	uxth	r3, r3
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800861a:	e24f      	b.n	8008abc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800861c:	f107 0318 	add.w	r3, r7, #24
 8008620:	4618      	mov	r0, r3
 8008622:	f7fc fa0b 	bl	8004a3c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	2b00      	cmp	r3, #0
 800862e:	d044      	beq.n	80086ba <UART_SetConfig+0x1eb2>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008634:	2b01      	cmp	r3, #1
 8008636:	d03e      	beq.n	80086b6 <UART_SetConfig+0x1eae>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b02      	cmp	r3, #2
 800863e:	d038      	beq.n	80086b2 <UART_SetConfig+0x1eaa>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	2b03      	cmp	r3, #3
 8008646:	d032      	beq.n	80086ae <UART_SetConfig+0x1ea6>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	2b04      	cmp	r3, #4
 800864e:	d02c      	beq.n	80086aa <UART_SetConfig+0x1ea2>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	2b05      	cmp	r3, #5
 8008656:	d026      	beq.n	80086a6 <UART_SetConfig+0x1e9e>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b06      	cmp	r3, #6
 800865e:	d020      	beq.n	80086a2 <UART_SetConfig+0x1e9a>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008664:	2b07      	cmp	r3, #7
 8008666:	d01a      	beq.n	800869e <UART_SetConfig+0x1e96>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	2b08      	cmp	r3, #8
 800866e:	d014      	beq.n	800869a <UART_SetConfig+0x1e92>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	2b09      	cmp	r3, #9
 8008676:	d00e      	beq.n	8008696 <UART_SetConfig+0x1e8e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867c:	2b0a      	cmp	r3, #10
 800867e:	d008      	beq.n	8008692 <UART_SetConfig+0x1e8a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	2b0b      	cmp	r3, #11
 8008686:	d102      	bne.n	800868e <UART_SetConfig+0x1e86>
 8008688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800868c:	e016      	b.n	80086bc <UART_SetConfig+0x1eb4>
 800868e:	2301      	movs	r3, #1
 8008690:	e014      	b.n	80086bc <UART_SetConfig+0x1eb4>
 8008692:	2380      	movs	r3, #128	; 0x80
 8008694:	e012      	b.n	80086bc <UART_SetConfig+0x1eb4>
 8008696:	2340      	movs	r3, #64	; 0x40
 8008698:	e010      	b.n	80086bc <UART_SetConfig+0x1eb4>
 800869a:	2320      	movs	r3, #32
 800869c:	e00e      	b.n	80086bc <UART_SetConfig+0x1eb4>
 800869e:	2310      	movs	r3, #16
 80086a0:	e00c      	b.n	80086bc <UART_SetConfig+0x1eb4>
 80086a2:	230c      	movs	r3, #12
 80086a4:	e00a      	b.n	80086bc <UART_SetConfig+0x1eb4>
 80086a6:	230a      	movs	r3, #10
 80086a8:	e008      	b.n	80086bc <UART_SetConfig+0x1eb4>
 80086aa:	2308      	movs	r3, #8
 80086ac:	e006      	b.n	80086bc <UART_SetConfig+0x1eb4>
 80086ae:	2306      	movs	r3, #6
 80086b0:	e004      	b.n	80086bc <UART_SetConfig+0x1eb4>
 80086b2:	2304      	movs	r3, #4
 80086b4:	e002      	b.n	80086bc <UART_SetConfig+0x1eb4>
 80086b6:	2302      	movs	r3, #2
 80086b8:	e000      	b.n	80086bc <UART_SetConfig+0x1eb4>
 80086ba:	2301      	movs	r3, #1
 80086bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	441a      	add	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086d4:	e1f2      	b.n	8008abc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086d6:	f107 030c 	add.w	r3, r7, #12
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fc fafa 	bl	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d044      	beq.n	8008774 <UART_SetConfig+0x1f6c>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d03e      	beq.n	8008770 <UART_SetConfig+0x1f68>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d038      	beq.n	800876c <UART_SetConfig+0x1f64>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d032      	beq.n	8008768 <UART_SetConfig+0x1f60>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008706:	2b04      	cmp	r3, #4
 8008708:	d02c      	beq.n	8008764 <UART_SetConfig+0x1f5c>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	2b05      	cmp	r3, #5
 8008710:	d026      	beq.n	8008760 <UART_SetConfig+0x1f58>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	2b06      	cmp	r3, #6
 8008718:	d020      	beq.n	800875c <UART_SetConfig+0x1f54>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871e:	2b07      	cmp	r3, #7
 8008720:	d01a      	beq.n	8008758 <UART_SetConfig+0x1f50>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	2b08      	cmp	r3, #8
 8008728:	d014      	beq.n	8008754 <UART_SetConfig+0x1f4c>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	2b09      	cmp	r3, #9
 8008730:	d00e      	beq.n	8008750 <UART_SetConfig+0x1f48>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008736:	2b0a      	cmp	r3, #10
 8008738:	d008      	beq.n	800874c <UART_SetConfig+0x1f44>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	2b0b      	cmp	r3, #11
 8008740:	d102      	bne.n	8008748 <UART_SetConfig+0x1f40>
 8008742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008746:	e016      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008748:	2301      	movs	r3, #1
 800874a:	e014      	b.n	8008776 <UART_SetConfig+0x1f6e>
 800874c:	2380      	movs	r3, #128	; 0x80
 800874e:	e012      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008750:	2340      	movs	r3, #64	; 0x40
 8008752:	e010      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008754:	2320      	movs	r3, #32
 8008756:	e00e      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008758:	2310      	movs	r3, #16
 800875a:	e00c      	b.n	8008776 <UART_SetConfig+0x1f6e>
 800875c:	230c      	movs	r3, #12
 800875e:	e00a      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008760:	230a      	movs	r3, #10
 8008762:	e008      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008764:	2308      	movs	r3, #8
 8008766:	e006      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008768:	2306      	movs	r3, #6
 800876a:	e004      	b.n	8008776 <UART_SetConfig+0x1f6e>
 800876c:	2304      	movs	r3, #4
 800876e:	e002      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008770:	2302      	movs	r3, #2
 8008772:	e000      	b.n	8008776 <UART_SetConfig+0x1f6e>
 8008774:	2301      	movs	r3, #1
 8008776:	fbb2 f2f3 	udiv	r2, r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	fbb2 f3f3 	udiv	r3, r2, r3
 800878a:	b29b      	uxth	r3, r3
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800878e:	e195      	b.n	8008abc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008790:	4b87      	ldr	r3, [pc, #540]	; (80089b0 <UART_SetConfig+0x21a8>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0320 	and.w	r3, r3, #32
 8008798:	2b00      	cmp	r3, #0
 800879a:	d05d      	beq.n	8008858 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800879c:	4b84      	ldr	r3, [pc, #528]	; (80089b0 <UART_SetConfig+0x21a8>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	08db      	lsrs	r3, r3, #3
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	4a83      	ldr	r2, [pc, #524]	; (80089b4 <UART_SetConfig+0x21ac>)
 80087a8:	40da      	lsrs	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d044      	beq.n	800883c <UART_SetConfig+0x2034>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d03e      	beq.n	8008838 <UART_SetConfig+0x2030>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d038      	beq.n	8008834 <UART_SetConfig+0x202c>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	2b03      	cmp	r3, #3
 80087c8:	d032      	beq.n	8008830 <UART_SetConfig+0x2028>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d02c      	beq.n	800882c <UART_SetConfig+0x2024>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d026      	beq.n	8008828 <UART_SetConfig+0x2020>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087de:	2b06      	cmp	r3, #6
 80087e0:	d020      	beq.n	8008824 <UART_SetConfig+0x201c>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b07      	cmp	r3, #7
 80087e8:	d01a      	beq.n	8008820 <UART_SetConfig+0x2018>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b08      	cmp	r3, #8
 80087f0:	d014      	beq.n	800881c <UART_SetConfig+0x2014>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b09      	cmp	r3, #9
 80087f8:	d00e      	beq.n	8008818 <UART_SetConfig+0x2010>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b0a      	cmp	r3, #10
 8008800:	d008      	beq.n	8008814 <UART_SetConfig+0x200c>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b0b      	cmp	r3, #11
 8008808:	d102      	bne.n	8008810 <UART_SetConfig+0x2008>
 800880a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800880e:	e016      	b.n	800883e <UART_SetConfig+0x2036>
 8008810:	2301      	movs	r3, #1
 8008812:	e014      	b.n	800883e <UART_SetConfig+0x2036>
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	e012      	b.n	800883e <UART_SetConfig+0x2036>
 8008818:	2340      	movs	r3, #64	; 0x40
 800881a:	e010      	b.n	800883e <UART_SetConfig+0x2036>
 800881c:	2320      	movs	r3, #32
 800881e:	e00e      	b.n	800883e <UART_SetConfig+0x2036>
 8008820:	2310      	movs	r3, #16
 8008822:	e00c      	b.n	800883e <UART_SetConfig+0x2036>
 8008824:	230c      	movs	r3, #12
 8008826:	e00a      	b.n	800883e <UART_SetConfig+0x2036>
 8008828:	230a      	movs	r3, #10
 800882a:	e008      	b.n	800883e <UART_SetConfig+0x2036>
 800882c:	2308      	movs	r3, #8
 800882e:	e006      	b.n	800883e <UART_SetConfig+0x2036>
 8008830:	2306      	movs	r3, #6
 8008832:	e004      	b.n	800883e <UART_SetConfig+0x2036>
 8008834:	2304      	movs	r3, #4
 8008836:	e002      	b.n	800883e <UART_SetConfig+0x2036>
 8008838:	2302      	movs	r3, #2
 800883a:	e000      	b.n	800883e <UART_SetConfig+0x2036>
 800883c:	2301      	movs	r3, #1
 800883e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	085b      	lsrs	r3, r3, #1
 8008848:	441a      	add	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008852:	b29b      	uxth	r3, r3
 8008854:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008856:	e131      	b.n	8008abc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d043      	beq.n	80088e8 <UART_SetConfig+0x20e0>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	2b01      	cmp	r3, #1
 8008866:	d03d      	beq.n	80088e4 <UART_SetConfig+0x20dc>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	2b02      	cmp	r3, #2
 800886e:	d037      	beq.n	80088e0 <UART_SetConfig+0x20d8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008874:	2b03      	cmp	r3, #3
 8008876:	d031      	beq.n	80088dc <UART_SetConfig+0x20d4>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887c:	2b04      	cmp	r3, #4
 800887e:	d02b      	beq.n	80088d8 <UART_SetConfig+0x20d0>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008884:	2b05      	cmp	r3, #5
 8008886:	d025      	beq.n	80088d4 <UART_SetConfig+0x20cc>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	2b06      	cmp	r3, #6
 800888e:	d01f      	beq.n	80088d0 <UART_SetConfig+0x20c8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	2b07      	cmp	r3, #7
 8008896:	d019      	beq.n	80088cc <UART_SetConfig+0x20c4>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800889c:	2b08      	cmp	r3, #8
 800889e:	d013      	beq.n	80088c8 <UART_SetConfig+0x20c0>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	d00d      	beq.n	80088c4 <UART_SetConfig+0x20bc>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	2b0a      	cmp	r3, #10
 80088ae:	d007      	beq.n	80088c0 <UART_SetConfig+0x20b8>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	2b0b      	cmp	r3, #11
 80088b6:	d101      	bne.n	80088bc <UART_SetConfig+0x20b4>
 80088b8:	4b3f      	ldr	r3, [pc, #252]	; (80089b8 <UART_SetConfig+0x21b0>)
 80088ba:	e016      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088bc:	4b3d      	ldr	r3, [pc, #244]	; (80089b4 <UART_SetConfig+0x21ac>)
 80088be:	e014      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088c0:	4b3e      	ldr	r3, [pc, #248]	; (80089bc <UART_SetConfig+0x21b4>)
 80088c2:	e012      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088c4:	4b3e      	ldr	r3, [pc, #248]	; (80089c0 <UART_SetConfig+0x21b8>)
 80088c6:	e010      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088c8:	4b3e      	ldr	r3, [pc, #248]	; (80089c4 <UART_SetConfig+0x21bc>)
 80088ca:	e00e      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088cc:	4b3e      	ldr	r3, [pc, #248]	; (80089c8 <UART_SetConfig+0x21c0>)
 80088ce:	e00c      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088d0:	4b3e      	ldr	r3, [pc, #248]	; (80089cc <UART_SetConfig+0x21c4>)
 80088d2:	e00a      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088d4:	4b3e      	ldr	r3, [pc, #248]	; (80089d0 <UART_SetConfig+0x21c8>)
 80088d6:	e008      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088d8:	4b3e      	ldr	r3, [pc, #248]	; (80089d4 <UART_SetConfig+0x21cc>)
 80088da:	e006      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088dc:	4b3e      	ldr	r3, [pc, #248]	; (80089d8 <UART_SetConfig+0x21d0>)
 80088de:	e004      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088e0:	4b3e      	ldr	r3, [pc, #248]	; (80089dc <UART_SetConfig+0x21d4>)
 80088e2:	e002      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088e4:	4b3e      	ldr	r3, [pc, #248]	; (80089e0 <UART_SetConfig+0x21d8>)
 80088e6:	e000      	b.n	80088ea <UART_SetConfig+0x20e2>
 80088e8:	4b32      	ldr	r3, [pc, #200]	; (80089b4 <UART_SetConfig+0x21ac>)
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6852      	ldr	r2, [r2, #4]
 80088ee:	0852      	lsrs	r2, r2, #1
 80088f0:	441a      	add	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088fe:	e0dd      	b.n	8008abc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d046      	beq.n	8008996 <UART_SetConfig+0x218e>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b01      	cmp	r3, #1
 800890e:	d040      	beq.n	8008992 <UART_SetConfig+0x218a>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b02      	cmp	r3, #2
 8008916:	d03a      	beq.n	800898e <UART_SetConfig+0x2186>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b03      	cmp	r3, #3
 800891e:	d034      	beq.n	800898a <UART_SetConfig+0x2182>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b04      	cmp	r3, #4
 8008926:	d02e      	beq.n	8008986 <UART_SetConfig+0x217e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b05      	cmp	r3, #5
 800892e:	d028      	beq.n	8008982 <UART_SetConfig+0x217a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b06      	cmp	r3, #6
 8008936:	d022      	beq.n	800897e <UART_SetConfig+0x2176>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2b07      	cmp	r3, #7
 800893e:	d01c      	beq.n	800897a <UART_SetConfig+0x2172>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	2b08      	cmp	r3, #8
 8008946:	d016      	beq.n	8008976 <UART_SetConfig+0x216e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b09      	cmp	r3, #9
 800894e:	d00f      	beq.n	8008970 <UART_SetConfig+0x2168>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	2b0a      	cmp	r3, #10
 8008956:	d008      	beq.n	800896a <UART_SetConfig+0x2162>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b0b      	cmp	r3, #11
 800895e:	d102      	bne.n	8008966 <UART_SetConfig+0x215e>
 8008960:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008964:	e018      	b.n	8008998 <UART_SetConfig+0x2190>
 8008966:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <UART_SetConfig+0x21c0>)
 8008968:	e016      	b.n	8008998 <UART_SetConfig+0x2190>
 800896a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800896e:	e013      	b.n	8008998 <UART_SetConfig+0x2190>
 8008970:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008974:	e010      	b.n	8008998 <UART_SetConfig+0x2190>
 8008976:	4b1b      	ldr	r3, [pc, #108]	; (80089e4 <UART_SetConfig+0x21dc>)
 8008978:	e00e      	b.n	8008998 <UART_SetConfig+0x2190>
 800897a:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <UART_SetConfig+0x21b0>)
 800897c:	e00c      	b.n	8008998 <UART_SetConfig+0x2190>
 800897e:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <UART_SetConfig+0x21e0>)
 8008980:	e00a      	b.n	8008998 <UART_SetConfig+0x2190>
 8008982:	4b1a      	ldr	r3, [pc, #104]	; (80089ec <UART_SetConfig+0x21e4>)
 8008984:	e008      	b.n	8008998 <UART_SetConfig+0x2190>
 8008986:	4b0d      	ldr	r3, [pc, #52]	; (80089bc <UART_SetConfig+0x21b4>)
 8008988:	e006      	b.n	8008998 <UART_SetConfig+0x2190>
 800898a:	4b19      	ldr	r3, [pc, #100]	; (80089f0 <UART_SetConfig+0x21e8>)
 800898c:	e004      	b.n	8008998 <UART_SetConfig+0x2190>
 800898e:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <UART_SetConfig+0x21b8>)
 8008990:	e002      	b.n	8008998 <UART_SetConfig+0x2190>
 8008992:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <UART_SetConfig+0x21bc>)
 8008994:	e000      	b.n	8008998 <UART_SetConfig+0x2190>
 8008996:	4b0c      	ldr	r3, [pc, #48]	; (80089c8 <UART_SetConfig+0x21c0>)
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	6852      	ldr	r2, [r2, #4]
 800899c:	0852      	lsrs	r2, r2, #1
 800899e:	441a      	add	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089ac:	e086      	b.n	8008abc <UART_SetConfig+0x22b4>
 80089ae:	bf00      	nop
 80089b0:	58024400 	.word	0x58024400
 80089b4:	03d09000 	.word	0x03d09000
 80089b8:	0003d090 	.word	0x0003d090
 80089bc:	0007a120 	.word	0x0007a120
 80089c0:	000f4240 	.word	0x000f4240
 80089c4:	001e8480 	.word	0x001e8480
 80089c8:	003d0900 	.word	0x003d0900
 80089cc:	00516155 	.word	0x00516155
 80089d0:	0061a800 	.word	0x0061a800
 80089d4:	007a1200 	.word	0x007a1200
 80089d8:	00a2c2aa 	.word	0x00a2c2aa
 80089dc:	00f42400 	.word	0x00f42400
 80089e0:	01e84800 	.word	0x01e84800
 80089e4:	0001e848 	.word	0x0001e848
 80089e8:	00051615 	.word	0x00051615
 80089ec:	00061a80 	.word	0x00061a80
 80089f0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d04e      	beq.n	8008a9a <UART_SetConfig+0x2292>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d047      	beq.n	8008a94 <UART_SetConfig+0x228c>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d040      	beq.n	8008a8e <UART_SetConfig+0x2286>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d039      	beq.n	8008a88 <UART_SetConfig+0x2280>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d032      	beq.n	8008a82 <UART_SetConfig+0x227a>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	2b05      	cmp	r3, #5
 8008a22:	d02b      	beq.n	8008a7c <UART_SetConfig+0x2274>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2b06      	cmp	r3, #6
 8008a2a:	d024      	beq.n	8008a76 <UART_SetConfig+0x226e>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	2b07      	cmp	r3, #7
 8008a32:	d01d      	beq.n	8008a70 <UART_SetConfig+0x2268>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d016      	beq.n	8008a6a <UART_SetConfig+0x2262>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	2b09      	cmp	r3, #9
 8008a42:	d00f      	beq.n	8008a64 <UART_SetConfig+0x225c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a48:	2b0a      	cmp	r3, #10
 8008a4a:	d008      	beq.n	8008a5e <UART_SetConfig+0x2256>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	2b0b      	cmp	r3, #11
 8008a52:	d101      	bne.n	8008a58 <UART_SetConfig+0x2250>
 8008a54:	2380      	movs	r3, #128	; 0x80
 8008a56:	e022      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5c:	e01f      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a62:	e01c      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a68:	e019      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6e:	e016      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a74:	e013      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008a7a:	e010      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008a80:	e00d      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a86:	e00a      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a88:	f241 5355 	movw	r3, #5461	; 0x1555
 8008a8c:	e007      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a92:	e004      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a98:	e001      	b.n	8008a9e <UART_SetConfig+0x2296>
 8008a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6852      	ldr	r2, [r2, #4]
 8008aa2:	0852      	lsrs	r2, r2, #1
 8008aa4:	441a      	add	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ab2:	e003      	b.n	8008abc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008aba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d908      	bls.n	8008ad4 <UART_SetConfig+0x22cc>
 8008ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac8:	d204      	bcs.n	8008ad4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ad0:	60da      	str	r2, [r3, #12]
 8008ad2:	e002      	b.n	8008ada <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008af6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3740      	adds	r7, #64	; 0x40
 8008afe:	46bd      	mov	sp, r7
 8008b00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	f003 0301 	and.w	r3, r3, #1
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00a      	beq.n	8008b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d00a      	beq.n	8008b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b76:	f003 0308 	and.w	r3, r3, #8
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00a      	beq.n	8008b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d00a      	beq.n	8008bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	430a      	orrs	r2, r1
 8008bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00a      	beq.n	8008bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	430a      	orrs	r2, r1
 8008bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01a      	beq.n	8008c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c02:	d10a      	bne.n	8008c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	605a      	str	r2, [r3, #4]
  }
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c58:	f7f8 fe70 	bl	800193c <HAL_GetTick>
 8008c5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d10e      	bne.n	8008c8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f82c 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e022      	b.n	8008cd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d10e      	bne.n	8008cb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f816 	bl	8008cd8 <UART_WaitOnFlagUntilTimeout>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e00c      	b.n	8008cd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce8:	e062      	b.n	8008db0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d05e      	beq.n	8008db0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7f8 fe23 	bl	800193c <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11d      	bne.n	8008d44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 0201 	bic.w	r2, r2, #1
 8008d26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2220      	movs	r2, #32
 8008d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	e045      	b.n	8008dd0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0304 	and.w	r3, r3, #4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d02e      	beq.n	8008db0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d60:	d126      	bne.n	8008db0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d6a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	689a      	ldr	r2, [r3, #8]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f022 0201 	bic.w	r2, r2, #1
 8008d8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2220      	movs	r2, #32
 8008da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e00f      	b.n	8008dd0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	69da      	ldr	r2, [r3, #28]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	4013      	ands	r3, r2
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	bf0c      	ite	eq
 8008dc0:	2301      	moveq	r3, #1
 8008dc2:	2300      	movne	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d08d      	beq.n	8008cea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6899      	ldr	r1, [r3, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b08      	ldr	r3, [pc, #32]	; (8008e1c <UART_EndRxTransfer+0x44>)
 8008dfc:	400b      	ands	r3, r1
 8008dfe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	effffffe 	.word	0xeffffffe

08008e20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f7fd fcd6 	bl	80067f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e62:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2220      	movs	r2, #32
 8008e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7fd fcb2 	bl	80067dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e8e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e96:	2b22      	cmp	r3, #34	; 0x22
 8008e98:	d13b      	bne.n	8008f12 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ea2:	89bb      	ldrh	r3, [r7, #12]
 8008ea4:	b2d9      	uxtb	r1, r3
 8008ea6:	89fb      	ldrh	r3, [r7, #14]
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eae:	400a      	ands	r2, r1
 8008eb0:	b2d2      	uxtb	r2, r2
 8008eb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d122      	bne.n	8008f22 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008eea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0201 	bic.w	r2, r2, #1
 8008efa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7f8 fbd6 	bl	80016bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f10:	e007      	b.n	8008f22 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f042 0208 	orr.w	r2, r2, #8
 8008f20:	619a      	str	r2, [r3, #24]
}
 8008f22:	bf00      	nop
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f38:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f40:	2b22      	cmp	r3, #34	; 0x22
 8008f42:	d13b      	bne.n	8008fbc <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f50:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f52:	89ba      	ldrh	r2, [r7, #12]
 8008f54:	89fb      	ldrh	r3, [r7, #14]
 8008f56:	4013      	ands	r3, r2
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f62:	1c9a      	adds	r2, r3, #2
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	3b01      	subs	r3, #1
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d122      	bne.n	8008fcc <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f94:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689a      	ldr	r2, [r3, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f022 0201 	bic.w	r2, r2, #1
 8008fa4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7f8 fb81 	bl	80016bc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fba:	e007      	b.n	8008fcc <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	699a      	ldr	r2, [r3, #24]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0208 	orr.w	r2, r2, #8
 8008fca:	619a      	str	r2, [r3, #24]
}
 8008fcc:	bf00      	nop
 8008fce:	3710      	adds	r7, #16
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fe2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fea:	2b22      	cmp	r3, #34	; 0x22
 8008fec:	d166      	bne.n	80090bc <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ff4:	81fb      	strh	r3, [r7, #14]
 8008ff6:	e03d      	b.n	8009074 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009000:	893b      	ldrh	r3, [r7, #8]
 8009002:	b2d9      	uxtb	r1, r3
 8009004:	89bb      	ldrh	r3, [r7, #12]
 8009006:	b2da      	uxtb	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900c:	400a      	ands	r2, r1
 800900e:	b2d2      	uxtb	r2, r2
 8009010:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009022:	b29b      	uxth	r3, r3
 8009024:	3b01      	subs	r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d119      	bne.n	800906e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009048:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6899      	ldr	r1, [r3, #8]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	4b1f      	ldr	r3, [pc, #124]	; (80090d4 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8009056:	400b      	ands	r3, r1
 8009058:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2220      	movs	r2, #32
 800905e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7f8 fb27 	bl	80016bc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800906e:	89fb      	ldrh	r3, [r7, #14]
 8009070:	3b01      	subs	r3, #1
 8009072:	81fb      	strh	r3, [r7, #14]
 8009074:	89fb      	ldrh	r3, [r7, #14]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1be      	bne.n	8008ff8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009080:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009082:	897b      	ldrh	r3, [r7, #10]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d021      	beq.n	80090cc <UART_RxISR_8BIT_FIFOEN+0xf8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800908e:	897a      	ldrh	r2, [r7, #10]
 8009090:	429a      	cmp	r2, r3
 8009092:	d21b      	bcs.n	80090cc <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	689a      	ldr	r2, [r3, #8]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80090a2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a0c      	ldr	r2, [pc, #48]	; (80090d8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80090a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f042 0220 	orr.w	r2, r2, #32
 80090b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ba:	e007      	b.n	80090cc <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0208 	orr.w	r2, r2, #8
 80090ca:	619a      	str	r2, [r3, #24]
}
 80090cc:	bf00      	nop
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	effffffe 	.word	0xeffffffe
 80090d8:	08008e81 	.word	0x08008e81

080090dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090ea:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f2:	2b22      	cmp	r3, #34	; 0x22
 80090f4:	d166      	bne.n	80091c4 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090fc:	82fb      	strh	r3, [r7, #22]
 80090fe:	e03d      	b.n	800917c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800910e:	8a3a      	ldrh	r2, [r7, #16]
 8009110:	8abb      	ldrh	r3, [r7, #20]
 8009112:	4013      	ands	r3, r2
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911e:	1c9a      	adds	r2, r3, #2
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d119      	bne.n	8009176 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009150:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	6899      	ldr	r1, [r3, #8]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	4b1f      	ldr	r3, [pc, #124]	; (80091dc <UART_RxISR_16BIT_FIFOEN+0x100>)
 800915e:	400b      	ands	r3, r1
 8009160:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2220      	movs	r2, #32
 8009166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7f8 faa3 	bl	80016bc <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009176:	8afb      	ldrh	r3, [r7, #22]
 8009178:	3b01      	subs	r3, #1
 800917a:	82fb      	strh	r3, [r7, #22]
 800917c:	8afb      	ldrh	r3, [r7, #22]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1be      	bne.n	8009100 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009188:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800918a:	8a7b      	ldrh	r3, [r7, #18]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d021      	beq.n	80091d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009196:	8a7a      	ldrh	r2, [r7, #18]
 8009198:	429a      	cmp	r2, r3
 800919a:	d21b      	bcs.n	80091d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80091aa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a0c      	ldr	r2, [pc, #48]	; (80091e0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80091b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0220 	orr.w	r2, r2, #32
 80091c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091c2:	e007      	b.n	80091d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f042 0208 	orr.w	r2, r2, #8
 80091d2:	619a      	str	r2, [r3, #24]
}
 80091d4:	bf00      	nop
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	effffffe 	.word	0xeffffffe
 80091e0:	08008f2b 	.word	0x08008f2b

080091e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091ec:	bf00      	nop
 80091ee:	370c      	adds	r7, #12
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009200:	bf00      	nop
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800922e:	2b01      	cmp	r3, #1
 8009230:	d101      	bne.n	8009236 <HAL_UARTEx_DisableFifoMode+0x16>
 8009232:	2302      	movs	r3, #2
 8009234:	e027      	b.n	8009286 <HAL_UARTEx_DisableFifoMode+0x66>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2224      	movs	r2, #36	; 0x24
 8009242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0201 	bic.w	r2, r2, #1
 800925c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009264:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b084      	sub	sp, #16
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e02d      	b.n	8009306 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2224      	movs	r2, #36	; 0x24
 80092b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0201 	bic.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f850 	bl	800938c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009322:	2302      	movs	r3, #2
 8009324:	e02d      	b.n	8009382 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2224      	movs	r2, #36	; 0x24
 8009332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0201 	bic.w	r2, r2, #1
 800934c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	683a      	ldr	r2, [r7, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f812 	bl	800938c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2220      	movs	r2, #32
 8009374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800938c:	b480      	push	{r7}
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009394:	4a2f      	ldr	r2, [pc, #188]	; (8009454 <UARTEx_SetNbDataToProcess+0xc8>)
 8009396:	f107 0314 	add.w	r3, r7, #20
 800939a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800939e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80093a2:	4a2d      	ldr	r2, [pc, #180]	; (8009458 <UARTEx_SetNbDataToProcess+0xcc>)
 80093a4:	f107 030c 	add.w	r3, r7, #12
 80093a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80093ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d108      	bne.n	80093ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093c8:	e03d      	b.n	8009446 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093ca:	2308      	movs	r3, #8
 80093cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093ce:	2308      	movs	r3, #8
 80093d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	0e5b      	lsrs	r3, r3, #25
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 0307 	and.w	r3, r3, #7
 80093e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	0f5b      	lsrs	r3, r3, #29
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	f003 0307 	and.w	r3, r3, #7
 80093f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80093f2:	7fbb      	ldrb	r3, [r7, #30]
 80093f4:	7f3a      	ldrb	r2, [r7, #28]
 80093f6:	f107 0120 	add.w	r1, r7, #32
 80093fa:	440a      	add	r2, r1
 80093fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	7f3a      	ldrb	r2, [r7, #28]
 8009406:	f107 0120 	add.w	r1, r7, #32
 800940a:	440a      	add	r2, r1
 800940c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009410:	fb93 f3f2 	sdiv	r3, r3, r2
 8009414:	b29a      	uxth	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800941c:	7ffb      	ldrb	r3, [r7, #31]
 800941e:	7f7a      	ldrb	r2, [r7, #29]
 8009420:	f107 0120 	add.w	r1, r7, #32
 8009424:	440a      	add	r2, r1
 8009426:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800942a:	fb02 f303 	mul.w	r3, r2, r3
 800942e:	7f7a      	ldrb	r2, [r7, #29]
 8009430:	f107 0120 	add.w	r1, r7, #32
 8009434:	440a      	add	r2, r1
 8009436:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800943a:	fb93 f3f2 	sdiv	r3, r3, r2
 800943e:	b29a      	uxth	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009446:	bf00      	nop
 8009448:	3724      	adds	r7, #36	; 0x24
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	08009a3c 	.word	0x08009a3c
 8009458:	08009a44 	.word	0x08009a44

0800945c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800945c:	b084      	sub	sp, #16
 800945e:	b580      	push	{r7, lr}
 8009460:	b084      	sub	sp, #16
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	f107 001c 	add.w	r0, r7, #28
 800946a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2b01      	cmp	r3, #1
 8009472:	d120      	bne.n	80094b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009478:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	4b25      	ldr	r3, [pc, #148]	; (800951c <USB_CoreInit+0xc0>)
 8009486:	4013      	ands	r3, r2
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800949a:	2b01      	cmp	r3, #1
 800949c:	d105      	bne.n	80094aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa5a 	bl	8009964 <USB_CoreReset>
 80094b0:	4603      	mov	r3, r0
 80094b2:	73fb      	strb	r3, [r7, #15]
 80094b4:	e01a      	b.n	80094ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa4e 	bl	8009964 <USB_CoreReset>
 80094c8:	4603      	mov	r3, r0
 80094ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	639a      	str	r2, [r3, #56]	; 0x38
 80094de:	e005      	b.n	80094ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d10b      	bne.n	800950a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f043 0208 	orr.w	r2, r3, #8
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f043 0220 	orr.w	r2, r3, #32
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009516:	b004      	add	sp, #16
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	ffbdffbf 	.word	0xffbdffbf

08009520 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009520:	b480      	push	{r7}
 8009522:	b083      	sub	sp, #12
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f023 0201 	bic.w	r2, r3, #1
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	460b      	mov	r3, r1
 800954c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d106      	bne.n	800956e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60da      	str	r2, [r3, #12]
 800956c:	e00b      	b.n	8009586 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d106      	bne.n	8009582 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60da      	str	r2, [r3, #12]
 8009580:	e001      	b.n	8009586 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e003      	b.n	800958e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009586:	2032      	movs	r0, #50	; 0x32
 8009588:	f7f8 f9e4 	bl	8001954 <HAL_Delay>

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009598:	b084      	sub	sp, #16
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80095a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095b2:	2300      	movs	r3, #0
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	e009      	b.n	80095cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	3340      	adds	r3, #64	; 0x40
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	4413      	add	r3, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3301      	adds	r3, #1
 80095ca:	613b      	str	r3, [r7, #16]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2b0e      	cmp	r3, #14
 80095d0:	d9f2      	bls.n	80095b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d112      	bne.n	80095fe <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	601a      	str	r2, [r3, #0]
 80095fc:	e005      	b.n	800960a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009610:	461a      	mov	r2, r3
 8009612:	2300      	movs	r3, #0
 8009614:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961c:	4619      	mov	r1, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009624:	461a      	mov	r2, r3
 8009626:	680b      	ldr	r3, [r1, #0]
 8009628:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	2b01      	cmp	r3, #1
 800962e:	d10c      	bne.n	800964a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d104      	bne.n	8009640 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009636:	2100      	movs	r1, #0
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f961 	bl	8009900 <USB_SetDevSpeed>
 800963e:	e008      	b.n	8009652 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009640:	2101      	movs	r1, #1
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f95c 	bl	8009900 <USB_SetDevSpeed>
 8009648:	e003      	b.n	8009652 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800964a:	2103      	movs	r1, #3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f957 	bl	8009900 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009652:	2110      	movs	r1, #16
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f90b 	bl	8009870 <USB_FlushTxFifo>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f929 	bl	80098bc <USB_FlushRxFifo>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967a:	461a      	mov	r2, r3
 800967c:	2300      	movs	r3, #0
 800967e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009686:	461a      	mov	r2, r3
 8009688:	2300      	movs	r3, #0
 800968a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009692:	461a      	mov	r2, r3
 8009694:	2300      	movs	r3, #0
 8009696:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009698:	2300      	movs	r3, #0
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	e043      	b.n	8009726 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096b4:	d118      	bne.n	80096e8 <USB_DevInit+0x150>
    {
      if (i == 0U)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c8:	461a      	mov	r2, r3
 80096ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	e013      	b.n	80096fa <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096de:	461a      	mov	r2, r3
 80096e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096e4:	6013      	str	r3, [r2, #0]
 80096e6:	e008      	b.n	80096fa <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f4:	461a      	mov	r2, r3
 80096f6:	2300      	movs	r3, #0
 80096f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4413      	add	r3, r2
 8009702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009706:	461a      	mov	r2, r3
 8009708:	2300      	movs	r3, #0
 800970a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	015a      	lsls	r2, r3, #5
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4413      	add	r3, r2
 8009714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009718:	461a      	mov	r2, r3
 800971a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800971e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	3301      	adds	r3, #1
 8009724:	613b      	str	r3, [r7, #16]
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	429a      	cmp	r2, r3
 800972c:	d3b7      	bcc.n	800969e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800972e:	2300      	movs	r3, #0
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	e043      	b.n	80097bc <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009746:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800974a:	d118      	bne.n	800977e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975e:	461a      	mov	r2, r3
 8009760:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	e013      	b.n	8009790 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	461a      	mov	r2, r3
 8009776:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	e008      	b.n	8009790 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	015a      	lsls	r2, r3, #5
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	4413      	add	r3, r2
 8009786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978a:	461a      	mov	r2, r3
 800978c:	2300      	movs	r3, #0
 800978e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979c:	461a      	mov	r2, r3
 800979e:	2300      	movs	r3, #0
 80097a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	461a      	mov	r2, r3
 80097b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	3301      	adds	r3, #1
 80097ba:	613b      	str	r3, [r7, #16]
 80097bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d3b7      	bcc.n	8009734 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80097d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d110      	bne.n	8009800 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097e4:	461a      	mov	r2, r3
 80097e6:	4b1e      	ldr	r3, [pc, #120]	; (8009860 <USB_DevInit+0x2c8>)
 80097e8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f8:	4619      	mov	r1, r3
 80097fa:	4b1a      	ldr	r3, [pc, #104]	; (8009864 <USB_DevInit+0x2cc>)
 80097fc:	4313      	orrs	r3, r2
 80097fe:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800980c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	2b00      	cmp	r3, #0
 8009812:	d105      	bne.n	8009820 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	f043 0210 	orr.w	r2, r3, #16
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699a      	ldr	r2, [r3, #24]
 8009824:	4b10      	ldr	r3, [pc, #64]	; (8009868 <USB_DevInit+0x2d0>)
 8009826:	4313      	orrs	r3, r2
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800982c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d005      	beq.n	800983e <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	f043 0208 	orr.w	r2, r3, #8
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800983e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009840:	2b01      	cmp	r3, #1
 8009842:	d105      	bne.n	8009850 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699a      	ldr	r2, [r3, #24]
 8009848:	4b08      	ldr	r3, [pc, #32]	; (800986c <USB_DevInit+0x2d4>)
 800984a:	4313      	orrs	r3, r2
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009850:	7dfb      	ldrb	r3, [r7, #23]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800985c:	b004      	add	sp, #16
 800985e:	4770      	bx	lr
 8009860:	00800100 	.word	0x00800100
 8009864:	00010003 	.word	0x00010003
 8009868:	803c3800 	.word	0x803c3800
 800986c:	40000004 	.word	0x40000004

08009870 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800987a:	2300      	movs	r3, #0
 800987c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	019b      	lsls	r3, r3, #6
 8009882:	f043 0220 	orr.w	r2, r3, #32
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	3301      	adds	r3, #1
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4a09      	ldr	r2, [pc, #36]	; (80098b8 <USB_FlushTxFifo+0x48>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d901      	bls.n	800989c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e006      	b.n	80098aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	d0f0      	beq.n	800988a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	00030d40 	.word	0x00030d40

080098bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2210      	movs	r2, #16
 80098cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4a09      	ldr	r2, [pc, #36]	; (80098fc <USB_FlushRxFifo+0x40>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d901      	bls.n	80098e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e006      	b.n	80098ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f003 0310 	and.w	r3, r3, #16
 80098e8:	2b10      	cmp	r3, #16
 80098ea:	d0f0      	beq.n	80098ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	00030d40 	.word	0x00030d40

08009900 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	78fb      	ldrb	r3, [r7, #3]
 800991a:	68f9      	ldr	r1, [r7, #12]
 800991c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009920:	4313      	orrs	r3, r2
 8009922:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr

08009932 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b084      	sub	sp, #16
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800994c:	f043 0302 	orr.w	r3, r3, #2
 8009950:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009952:	2003      	movs	r0, #3
 8009954:	f7f7 fffe 	bl	8001954 <HAL_Delay>

  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3301      	adds	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4a13      	ldr	r2, [pc, #76]	; (80099c8 <USB_CoreReset+0x64>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d901      	bls.n	8009982 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800997e:	2303      	movs	r3, #3
 8009980:	e01b      	b.n	80099ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	2b00      	cmp	r3, #0
 8009988:	daf2      	bge.n	8009970 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800998a:	2300      	movs	r3, #0
 800998c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f043 0201 	orr.w	r2, r3, #1
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	4a09      	ldr	r2, [pc, #36]	; (80099c8 <USB_CoreReset+0x64>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d901      	bls.n	80099ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e006      	b.n	80099ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	f003 0301 	and.w	r3, r3, #1
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d0f0      	beq.n	800999a <USB_CoreReset+0x36>

  return HAL_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3714      	adds	r7, #20
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	00030d40 	.word	0x00030d40

080099cc <__libc_init_array>:
 80099cc:	b570      	push	{r4, r5, r6, lr}
 80099ce:	4e0d      	ldr	r6, [pc, #52]	; (8009a04 <__libc_init_array+0x38>)
 80099d0:	4c0d      	ldr	r4, [pc, #52]	; (8009a08 <__libc_init_array+0x3c>)
 80099d2:	1ba4      	subs	r4, r4, r6
 80099d4:	10a4      	asrs	r4, r4, #2
 80099d6:	2500      	movs	r5, #0
 80099d8:	42a5      	cmp	r5, r4
 80099da:	d109      	bne.n	80099f0 <__libc_init_array+0x24>
 80099dc:	4e0b      	ldr	r6, [pc, #44]	; (8009a0c <__libc_init_array+0x40>)
 80099de:	4c0c      	ldr	r4, [pc, #48]	; (8009a10 <__libc_init_array+0x44>)
 80099e0:	f000 f820 	bl	8009a24 <_init>
 80099e4:	1ba4      	subs	r4, r4, r6
 80099e6:	10a4      	asrs	r4, r4, #2
 80099e8:	2500      	movs	r5, #0
 80099ea:	42a5      	cmp	r5, r4
 80099ec:	d105      	bne.n	80099fa <__libc_init_array+0x2e>
 80099ee:	bd70      	pop	{r4, r5, r6, pc}
 80099f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099f4:	4798      	blx	r3
 80099f6:	3501      	adds	r5, #1
 80099f8:	e7ee      	b.n	80099d8 <__libc_init_array+0xc>
 80099fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099fe:	4798      	blx	r3
 8009a00:	3501      	adds	r5, #1
 8009a02:	e7f2      	b.n	80099ea <__libc_init_array+0x1e>
 8009a04:	08009a64 	.word	0x08009a64
 8009a08:	08009a64 	.word	0x08009a64
 8009a0c:	08009a64 	.word	0x08009a64
 8009a10:	08009a68 	.word	0x08009a68

08009a14 <memset>:
 8009a14:	4402      	add	r2, r0
 8009a16:	4603      	mov	r3, r0
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d100      	bne.n	8009a1e <memset+0xa>
 8009a1c:	4770      	bx	lr
 8009a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a22:	e7f9      	b.n	8009a18 <memset+0x4>

08009a24 <_init>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr

08009a30 <_fini>:
 8009a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a32:	bf00      	nop
 8009a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a36:	bc08      	pop	{r3}
 8009a38:	469e      	mov	lr, r3
 8009a3a:	4770      	bx	lr

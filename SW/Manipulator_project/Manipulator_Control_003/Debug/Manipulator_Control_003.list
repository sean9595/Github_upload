
Manipulator_Control_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009824  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009adc  08009adc  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009adc  08009adc  00019adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ae4  08009ae4  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ae4  08009ae4  00019ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ae8  08009ae8  00019ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  08009aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000018  08009b04  00020018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000078  08009b64  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a84  240000d8  08009bc4  000200d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000b5c  08009bc4  00020b5c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002adf0  00000000  00000000  00020106  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000042ca  00000000  00000000  0004aef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001620  00000000  00000000  0004f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001478  00000000  00000000  000507e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038f2a  00000000  00000000  00051c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   000161c2  00000000  00000000  0008ab82  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00165745  00000000  00000000  000a0d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00206489  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005d04  00000000  00000000  00206504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d8 	.word	0x240000d8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009aa4 	.word	0x08009aa4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000dc 	.word	0x240000dc
 80002d4:	08009aa4 	.word	0x08009aa4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_ETH_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_ETH_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ETH_Init+0x90>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x90>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x90>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	3302      	adds	r3, #2
 80005fa:	22e1      	movs	r2, #225	; 0xe1
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x90>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x90>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3304      	adds	r3, #4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x90>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	3305      	adds	r3, #5
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_ETH_Init+0x90>)
 800061e:	2201      	movs	r2, #1
 8000620:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x90>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_ETH_Init+0x98>)
 8000626:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_ETH_Init+0x90>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_ETH_Init+0x9c>)
 800062c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x90>)
 8000630:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x90>)
 8000638:	f001 fcb4 	bl	8001fa4 <HAL_ETH_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa6f 	bl	8000b24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ETH_Init+0xa0>)
 800064c:	f009 fa22 	bl	8009a94 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0xa0>)
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_ETH_Init+0xa0>)
 8000658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_ETH_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	240000f4 	.word	0x240000f4
 800066c:	40028000 	.word	0x40028000
 8000670:	24000078 	.word	0x24000078
 8000674:	24000018 	.word	0x24000018
 8000678:	24000164 	.word	0x24000164

0800067c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <HAL_ETH_MspInit+0x184>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f040 80ab 	bne.w	80007f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a6:	4a57      	ldr	r2, [pc, #348]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006be:	4b51      	ldr	r3, [pc, #324]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <HAL_ETH_MspInit+0x18c>)
 800078e:	f002 f81f 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000792:	2386      	movs	r3, #134	; 0x86
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a2:	230b      	movs	r3, #11
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <HAL_ETH_MspInit+0x190>)
 80007ae:	f002 f80f 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <HAL_ETH_MspInit+0x194>)
 80007d0:	f001 fffe 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_ETH_MspInit+0x198>)
 80007f2:	f001 ffed 	bl	80027d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40028000 	.word	0x40028000
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58021800 	.word	0x58021800

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x154>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <MX_GPIO_Init+0x154>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x154>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x154>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <MX_GPIO_Init+0x154>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x154>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x154>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x154>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x154>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x154>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x154>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x154>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ea:	f002 f921 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008f4:	f002 f91c 	bl	8002b30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x160>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x164>)
 800090e:	f001 ff5f 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000912:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x158>)
 800092c:	f001 ff50 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000948:	f001 ff42 	bl	80027d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000960:	f001 ff36 	bl	80027d0 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58021800 	.word	0x58021800
 8000978:	11110000 	.word	0x11110000
 800097c:	58020800 	.word	0x58020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 ff98 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f814 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff44 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 8000990:	f7ff fe22 	bl	80005d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000994:	f000 fe34 	bl	8001600 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f000 feda 	bl	8001750 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800099c:	f000 fc2c 	bl	80011f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fcb8 	bl	8001314 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uart_hal_rx_buffer_init(); //UART 수신 링버퍼 초기화
 80009a4:	f000 f8c6 	bl	8000b34 <uart_hal_rx_buffer_init>
  serial_Init(); //UART 수신 대기 상태로 설정.
 80009a8:	f000 f90a 	bl	8000bc0 <serial_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart_hal_rx_monitor(); //UART 수신 처리 함수 호출. 이와 같이 함수를 이용하면 인터럽트를 루틴 밖에서 수신 처리를 하므로 다른 우선순위가 높은 인터럽트에 의해 수신 처리르 못하게 될 가능성을 없앨 수 있다.
 80009ac:	f000 f916 	bl	8000bdc <uart_hal_rx_monitor>
 80009b0:	e7fc      	b.n	80009ac <main+0x2c>
	...

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0cc      	sub	sp, #304	; 0x130
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009be:	224c      	movs	r2, #76	; 0x4c
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 f866 	bl	8009a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f009 f85f 	bl	8009a94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4618      	mov	r0, r3
 80009dc:	23bc      	movs	r3, #188	; 0xbc
 80009de:	461a      	mov	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f009 f857 	bl	8009a94 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e6:	2002      	movs	r0, #2
 80009e8:	f002 fa04 	bl	8002df4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <SystemClock_Config+0x164>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <SystemClock_Config+0x164>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009fe:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <SystemClock_Config+0x164>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	f003 0201 	and.w	r2, r3, #1
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	4b44      	ldr	r3, [pc, #272]	; (8000b1c <SystemClock_Config+0x168>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a43      	ldr	r2, [pc, #268]	; (8000b1c <SystemClock_Config+0x168>)
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <SystemClock_Config+0x168>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a26:	bf00      	nop
 8000a28:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <SystemClock_Config+0x168>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	d1f8      	bne.n	8000a28 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a56:	2318      	movs	r3, #24
 8000a58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 f9fd 	bl	8002e84 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000a90:	f000 f848 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	233f      	movs	r3, #63	; 0x3f
 8000a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fd92 	bl	80035f4 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000ad6:	f000 f825 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <SystemClock_Config+0x16c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 f8d8 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8000b06:	f000 f80d 	bl	8000b24 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b0a:	f002 f9ab 	bl	8002e64 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b0e:	bf00      	nop
 8000b10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58000400 	.word	0x58000400
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	00040002 	.word	0x00040002

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <uart_hal_rx_buffer_init>:

/*링버퍼수신변수 선언 및 초기화*/
uart_hal_rx_type uart_hal_rx;

void uart_hal_rx_buffer_init()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	uart_hal_rx.input_p = 0;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <uart_hal_rx_buffer_init+0x20>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	uart_hal_rx.output_p = 0;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <uart_hal_rx_buffer_init+0x20>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404

}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	2400019c 	.word	0x2400019c

08000b58 <packet_Receive>:
/* Ring buffer CODE END */



void packet_Receive()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
if(uartHandle->Instance == USART3)
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <packet_Receive+0x54>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <packet_Receive+0x58>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d11e      	bne.n	8000ba6 <packet_Receive+0x4e>
    {
	    uart_hal_rx.buffer[uart_hal_rx.input_p ++] = uart_hal_rx.temp;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <packet_Receive+0x5c>)
 8000b6a:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	b291      	uxth	r1, r2
 8000b74:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <packet_Receive+0x5c>)
 8000b76:	f8a2 1402 	strh.w	r1, [r2, #1026]	; 0x402
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <packet_Receive+0x5c>)
 8000b7e:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <packet_Receive+0x5c>)
 8000b84:	5499      	strb	r1, [r3, r2]

	    if (uart_hal_rx.input_p >= 1024)
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <packet_Receive+0x5c>)
 8000b88:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b92:	d303      	bcc.n	8000b9c <packet_Receive+0x44>
	    {
	    	uart_hal_rx.input_p = 0;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <packet_Receive+0x5c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
	    }
	    HAL_UART_Receive_IT(&huart3, &uart_hal_rx.temp, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4906      	ldr	r1, [pc, #24]	; (8000bb8 <packet_Receive+0x60>)
 8000ba0:	4806      	ldr	r0, [pc, #24]	; (8000bbc <packet_Receive+0x64>)
 8000ba2:	f005 fc03 	bl	80063ac <HAL_UART_Receive_IT>
    }
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	24000198 	.word	0x24000198
 8000bb0:	40004800 	.word	0x40004800
 8000bb4:	2400019c 	.word	0x2400019c
 8000bb8:	2400059c 	.word	0x2400059c
 8000bbc:	240006c4 	.word	0x240006c4

08000bc0 <serial_Init>:


void serial_Init()
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &uart_hal_rx.temp, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4903      	ldr	r1, [pc, #12]	; (8000bd4 <serial_Init+0x14>)
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <serial_Init+0x18>)
 8000bca:	f005 fbef 	bl	80063ac <HAL_UART_Receive_IT>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2400059c 	.word	0x2400059c
 8000bd8:	240006c4 	.word	0x240006c4

08000bdc <uart_hal_rx_monitor>:

void uart_hal_rx_monitor()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	while (uart_hal_getchar() != 0)
 8000be0:	e035      	b.n	8000c4e <uart_hal_rx_monitor+0x72>
	{
		if(uart_hal_rx.rxd == DLE)
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000be4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <uart_hal_rx_monitor+0x88>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d033      	beq.n	8000c5a <uart_hal_rx_monitor+0x7e>
		{
          break;
		}

		if(uart_hal_rx.rxd == STX)
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000bf4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <uart_hal_rx_monitor+0x8c>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d10e      	bne.n	8000c20 <uart_hal_rx_monitor+0x44>
		{
			if(uart_hal_rx.buffer[uart_hal_rx.output_p-1] == DLE)
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000c04:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <uart_hal_rx_monitor+0x88>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d002      	beq.n	8000c20 <uart_hal_rx_monitor+0x44>
			{
                //start of data
			}

			else if(uart_hal_rx.buffer[uart_hal_rx.output_p-1] != DLE)
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000c1c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
			{
				//rxd에 담긴 데이터는 그냥 데이터
			}
		}

		if(uart_hal_rx.rxd == ETX)
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000c22:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <uart_hal_rx_monitor+0x90>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d10e      	bne.n	8000c4e <uart_hal_rx_monitor+0x72>
		{
			if(uart_hal_rx.buffer[uart_hal_rx.output_p-1] == DLE)
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000c32:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000c3c:	5cd3      	ldrb	r3, [r2, r3]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <uart_hal_rx_monitor+0x88>)
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d002      	beq.n	8000c4e <uart_hal_rx_monitor+0x72>
			{
			    //End of data
			}

			else if(uart_hal_rx.buffer[uart_hal_rx.output_p-1] != DLE)
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <uart_hal_rx_monitor+0x84>)
 8000c4a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
	while (uart_hal_getchar() != 0)
 8000c4e:	f000 f80f 	bl	8000c70 <uart_hal_getchar>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1c4      	bne.n	8000be2 <uart_hal_rx_monitor+0x6>
			}
		}


	}
}
 8000c58:	e000      	b.n	8000c5c <uart_hal_rx_monitor+0x80>
          break;
 8000c5a:	bf00      	nop
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2400019c 	.word	0x2400019c
 8000c64:	24000000 	.word	0x24000000
 8000c68:	24000002 	.word	0x24000002
 8000c6c:	24000004 	.word	0x24000004

08000c70 <uart_hal_getchar>:

uint8_t uart_hal_getchar()
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
	if(uart_hal_rx.input_p == uart_hal_rx.output_p)
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000c76:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000c7e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d101      	bne.n	8000c8c <uart_hal_getchar+0x1c>
	{
		return 0; //모니터링을 하지 않게 한다.
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e01a      	b.n	8000cc2 <uart_hal_getchar+0x52>
	}

	uart_hal_rx.rxd = uart_hal_rx.buffer[uart_hal_rx.output_p++];
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000c8e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	b291      	uxth	r1, r2
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000c9a:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000ca2:	5c9a      	ldrb	r2, [r3, r2]
 8000ca4:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000ca6:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401

	if(uart_hal_rx.output_p >= 1024)
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000cac:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cb6:	d303      	bcc.n	8000cc0 <uart_hal_getchar+0x50>
	{
		uart_hal_rx.output_p = 0;
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <uart_hal_getchar+0x5c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	}

	return 1; //모니터링을 하게 한다.
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	2400019c 	.word	0x2400019c

08000cd0 <servo_update>:
	servo[_servo_num].delta = 0;
	servo[_servo_num].run = 0;
}

void servo_update()
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	int pulse = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]

	for (i = 0; i < 3; i++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	e0d2      	b.n	8000e8a <servo_update+0x1ba>
	{
		if (servo[i].run == 1 && servo[i].delta != 0)
 8000ce4:	4a6d      	ldr	r2, [pc, #436]	; (8000e9c <servo_update+0x1cc>)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	2134      	movs	r1, #52	; 0x34
 8000cea:	fb01 f303 	mul.w	r3, r1, r3
 8000cee:	4413      	add	r3, r2
 8000cf0:	332c      	adds	r3, #44	; 0x2c
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	f040 80b3 	bne.w	8000e60 <servo_update+0x190>
 8000cfa:	4a68      	ldr	r2, [pc, #416]	; (8000e9c <servo_update+0x1cc>)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2134      	movs	r1, #52	; 0x34
 8000d00:	fb01 f303 	mul.w	r3, r1, r3
 8000d04:	4413      	add	r3, r2
 8000d06:	3324      	adds	r3, #36	; 0x24
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80a8 	beq.w	8000e60 <servo_update+0x190>
		{
			servo_speed_update(i);
 8000d10:	6838      	ldr	r0, [r7, #0]
 8000d12:	f000 f8c7 	bl	8000ea4 <servo_speed_update>

			if (servo[i].delta > servo[i].cur_speed)
 8000d16:	4a61      	ldr	r2, [pc, #388]	; (8000e9c <servo_update+0x1cc>)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2134      	movs	r1, #52	; 0x34
 8000d1c:	fb01 f303 	mul.w	r3, r1, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	3324      	adds	r3, #36	; 0x24
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	495d      	ldr	r1, [pc, #372]	; (8000e9c <servo_update+0x1cc>)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2034      	movs	r0, #52	; 0x34
 8000d2c:	fb00 f303 	mul.w	r3, r0, r3
 8000d30:	440b      	add	r3, r1
 8000d32:	3308      	adds	r3, #8
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	dd13      	ble.n	8000d62 <servo_update+0x92>
			{
				pulse = servo[i].cur_speed * servo[i].direction;
 8000d3a:	4a58      	ldr	r2, [pc, #352]	; (8000e9c <servo_update+0x1cc>)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2134      	movs	r1, #52	; 0x34
 8000d40:	fb01 f303 	mul.w	r3, r1, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	3308      	adds	r3, #8
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4954      	ldr	r1, [pc, #336]	; (8000e9c <servo_update+0x1cc>)
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	2034      	movs	r0, #52	; 0x34
 8000d50:	fb00 f202 	mul.w	r2, r0, r2
 8000d54:	440a      	add	r2, r1
 8000d56:	3228      	adds	r2, #40	; 0x28
 8000d58:	6812      	ldr	r2, [r2, #0]
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	e012      	b.n	8000d88 <servo_update+0xb8>
			}
			else
			{
				pulse = servo[i].delta * servo[i].direction;
 8000d62:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <servo_update+0x1cc>)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2134      	movs	r1, #52	; 0x34
 8000d68:	fb01 f303 	mul.w	r3, r1, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3324      	adds	r3, #36	; 0x24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	494a      	ldr	r1, [pc, #296]	; (8000e9c <servo_update+0x1cc>)
 8000d74:	683a      	ldr	r2, [r7, #0]
 8000d76:	2034      	movs	r0, #52	; 0x34
 8000d78:	fb00 f202 	mul.w	r2, r0, r2
 8000d7c:	440a      	add	r2, r1
 8000d7e:	3228      	adds	r2, #40	; 0x28
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	607b      	str	r3, [r7, #4]
			}

			servo[i].cur_angle += pulse;
 8000d88:	4a44      	ldr	r2, [pc, #272]	; (8000e9c <servo_update+0x1cc>)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	2134      	movs	r1, #52	; 0x34
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	4413      	add	r3, r2
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	441a      	add	r2, r3
 8000d9a:	4940      	ldr	r1, [pc, #256]	; (8000e9c <servo_update+0x1cc>)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2034      	movs	r0, #52	; 0x34
 8000da0:	fb00 f303 	mul.w	r3, r0, r3
 8000da4:	440b      	add	r3, r1
 8000da6:	601a      	str	r2, [r3, #0]

			switch(i)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d010      	beq.n	8000dd0 <servo_update+0x100>
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d01b      	beq.n	8000dea <servo_update+0x11a>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d126      	bne.n	8000e04 <servo_update+0x134>
			{
			case 0:
				tim_reg->CCR1 = PULSE_L + servo[i].cur_angle;
 8000db6:	4a39      	ldr	r2, [pc, #228]	; (8000e9c <servo_update+0x1cc>)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2134      	movs	r1, #52	; 0x34
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000dc8:	4b35      	ldr	r3, [pc, #212]	; (8000ea0 <servo_update+0x1d0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000dce:	e019      	b.n	8000e04 <servo_update+0x134>
			case 1:
				tim_reg->CCR2 = PULSE_L + servo[i].cur_angle;
 8000dd0:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <servo_update+0x1cc>)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2134      	movs	r1, #52	; 0x34
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000de2:	4b2f      	ldr	r3, [pc, #188]	; (8000ea0 <servo_update+0x1d0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000de8:	e00c      	b.n	8000e04 <servo_update+0x134>
			case 2:
				tim_reg->CCR3 = PULSE_L + servo[i].cur_angle;
 8000dea:	4a2c      	ldr	r2, [pc, #176]	; (8000e9c <servo_update+0x1cc>)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2134      	movs	r1, #52	; 0x34
 8000df0:	fb01 f303 	mul.w	r3, r1, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <servo_update+0x1d0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000e02:	bf00      	nop
			}

			servo[i].delta -= pulse * servo[i].direction;
 8000e04:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <servo_update+0x1cc>)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2134      	movs	r1, #52	; 0x34
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	3324      	adds	r3, #36	; 0x24
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4921      	ldr	r1, [pc, #132]	; (8000e9c <servo_update+0x1cc>)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2034      	movs	r0, #52	; 0x34
 8000e1a:	fb00 f303 	mul.w	r3, r0, r3
 8000e1e:	440b      	add	r3, r1
 8000e20:	3328      	adds	r3, #40	; 0x28
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	fb01 f303 	mul.w	r3, r1, r3
 8000e2a:	1ad2      	subs	r2, r2, r3
 8000e2c:	491b      	ldr	r1, [pc, #108]	; (8000e9c <servo_update+0x1cc>)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2034      	movs	r0, #52	; 0x34
 8000e32:	fb00 f303 	mul.w	r3, r0, r3
 8000e36:	440b      	add	r3, r1
 8000e38:	3324      	adds	r3, #36	; 0x24
 8000e3a:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps += 1;
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <servo_update+0x1cc>)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2134      	movs	r1, #52	; 0x34
 8000e42:	fb01 f303 	mul.w	r3, r1, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	331c      	adds	r3, #28
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	1c5a      	adds	r2, r3, #1
 8000e4e:	4913      	ldr	r1, [pc, #76]	; (8000e9c <servo_update+0x1cc>)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	2034      	movs	r0, #52	; 0x34
 8000e54:	fb00 f303 	mul.w	r3, r0, r3
 8000e58:	440b      	add	r3, r1
 8000e5a:	331c      	adds	r3, #28
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e011      	b.n	8000e84 <servo_update+0x1b4>
		}
		else
		{
			servo[i].run = 0;
 8000e60:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <servo_update+0x1cc>)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	2134      	movs	r1, #52	; 0x34
 8000e66:	fb01 f303 	mul.w	r3, r1, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	332c      	adds	r3, #44	; 0x2c
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps = 0;
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <servo_update+0x1cc>)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2134      	movs	r1, #52	; 0x34
 8000e78:	fb01 f303 	mul.w	r3, r1, r3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	331c      	adds	r3, #28
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	3301      	adds	r3, #1
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	f77f af29 	ble.w	8000ce4 <servo_update+0x14>
		}
	}
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	240005a8 	.word	0x240005a8
 8000ea0:	240005a4 	.word	0x240005a4

08000ea4 <servo_speed_update>:

void servo_speed_update(int _servo_num)
{
 8000ea4:	b490      	push	{r4, r7}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	int i = _servo_num;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	60fb      	str	r3, [r7, #12]

	if ((servo[i].cur_steps > servo[i].acc_steps - 1) && (servo[i].cur_steps <= servo[i].acc_steps + servo[i].fixed_speed_steps - 1))
 8000eb0:	4a6c      	ldr	r2, [pc, #432]	; (8001064 <servo_speed_update+0x1c0>)
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2134      	movs	r1, #52	; 0x34
 8000eb6:	fb01 f303 	mul.w	r3, r1, r3
 8000eba:	4413      	add	r3, r2
 8000ebc:	331c      	adds	r3, #28
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4968      	ldr	r1, [pc, #416]	; (8001064 <servo_speed_update+0x1c0>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2034      	movs	r0, #52	; 0x34
 8000ec6:	fb00 f303 	mul.w	r3, r0, r3
 8000eca:	440b      	add	r3, r1
 8000ecc:	3314      	adds	r3, #20
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dd2c      	ble.n	8000f30 <servo_speed_update+0x8c>
 8000ed6:	4a63      	ldr	r2, [pc, #396]	; (8001064 <servo_speed_update+0x1c0>)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2134      	movs	r1, #52	; 0x34
 8000edc:	fb01 f303 	mul.w	r3, r1, r3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	331c      	adds	r3, #28
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	495f      	ldr	r1, [pc, #380]	; (8001064 <servo_speed_update+0x1c0>)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2034      	movs	r0, #52	; 0x34
 8000eec:	fb00 f303 	mul.w	r3, r0, r3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	3314      	adds	r3, #20
 8000ef4:	6819      	ldr	r1, [r3, #0]
 8000ef6:	485b      	ldr	r0, [pc, #364]	; (8001064 <servo_speed_update+0x1c0>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2434      	movs	r4, #52	; 0x34
 8000efc:	fb04 f303 	mul.w	r3, r4, r3
 8000f00:	4403      	add	r3, r0
 8000f02:	3318      	adds	r3, #24
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	440b      	add	r3, r1
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	dc10      	bgt.n	8000f30 <servo_speed_update+0x8c>
	{
		servo[i].cur_speed = servo[i].dst_speed;
 8000f0e:	4a55      	ldr	r2, [pc, #340]	; (8001064 <servo_speed_update+0x1c0>)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2134      	movs	r1, #52	; 0x34
 8000f14:	fb01 f303 	mul.w	r3, r1, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	330c      	adds	r3, #12
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	4951      	ldr	r1, [pc, #324]	; (8001064 <servo_speed_update+0x1c0>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2034      	movs	r0, #52	; 0x34
 8000f24:	fb00 f303 	mul.w	r3, r0, r3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e093      	b.n	8001058 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > 0) && (servo[i].cur_steps <= servo[i].acc_steps - 1))
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <servo_speed_update+0x1c0>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2134      	movs	r1, #52	; 0x34
 8000f36:	fb01 f303 	mul.w	r3, r1, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	331c      	adds	r3, #28
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	dd2c      	ble.n	8000f9e <servo_speed_update+0xfa>
 8000f44:	4a47      	ldr	r2, [pc, #284]	; (8001064 <servo_speed_update+0x1c0>)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2134      	movs	r1, #52	; 0x34
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	331c      	adds	r3, #28
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4943      	ldr	r1, [pc, #268]	; (8001064 <servo_speed_update+0x1c0>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2034      	movs	r0, #52	; 0x34
 8000f5a:	fb00 f303 	mul.w	r3, r0, r3
 8000f5e:	440b      	add	r3, r1
 8000f60:	3314      	adds	r3, #20
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	429a      	cmp	r2, r3
 8000f68:	dc19      	bgt.n	8000f9e <servo_speed_update+0xfa>
	{
		servo[i].cur_speed += servo[i].acc;
 8000f6a:	4a3e      	ldr	r2, [pc, #248]	; (8001064 <servo_speed_update+0x1c0>)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2134      	movs	r1, #52	; 0x34
 8000f70:	fb01 f303 	mul.w	r3, r1, r3
 8000f74:	4413      	add	r3, r2
 8000f76:	3308      	adds	r3, #8
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	493a      	ldr	r1, [pc, #232]	; (8001064 <servo_speed_update+0x1c0>)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2034      	movs	r0, #52	; 0x34
 8000f80:	fb00 f303 	mul.w	r3, r0, r3
 8000f84:	440b      	add	r3, r1
 8000f86:	3320      	adds	r3, #32
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	4935      	ldr	r1, [pc, #212]	; (8001064 <servo_speed_update+0x1c0>)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	2034      	movs	r0, #52	; 0x34
 8000f92:	fb00 f303 	mul.w	r3, r0, r3
 8000f96:	440b      	add	r3, r1
 8000f98:	3308      	adds	r3, #8
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	e05c      	b.n	8001058 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > servo[i].acc_steps + servo[i].fixed_speed_steps - 1) && (servo[i].cur_steps <= servo[i].total_steps - 1))
 8000f9e:	4a31      	ldr	r2, [pc, #196]	; (8001064 <servo_speed_update+0x1c0>)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2134      	movs	r1, #52	; 0x34
 8000fa4:	fb01 f303 	mul.w	r3, r1, r3
 8000fa8:	4413      	add	r3, r2
 8000faa:	331c      	adds	r3, #28
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	492d      	ldr	r1, [pc, #180]	; (8001064 <servo_speed_update+0x1c0>)
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2034      	movs	r0, #52	; 0x34
 8000fb4:	fb00 f303 	mul.w	r3, r0, r3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3314      	adds	r3, #20
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	4829      	ldr	r0, [pc, #164]	; (8001064 <servo_speed_update+0x1c0>)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2434      	movs	r4, #52	; 0x34
 8000fc4:	fb04 f303 	mul.w	r3, r4, r3
 8000fc8:	4403      	add	r3, r0
 8000fca:	3318      	adds	r3, #24
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	440b      	add	r3, r1
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dd2c      	ble.n	8001030 <servo_speed_update+0x18c>
 8000fd6:	4a23      	ldr	r2, [pc, #140]	; (8001064 <servo_speed_update+0x1c0>)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2134      	movs	r1, #52	; 0x34
 8000fdc:	fb01 f303 	mul.w	r3, r1, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	331c      	adds	r3, #28
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	491f      	ldr	r1, [pc, #124]	; (8001064 <servo_speed_update+0x1c0>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2034      	movs	r0, #52	; 0x34
 8000fec:	fb00 f303 	mul.w	r3, r0, r3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	3310      	adds	r3, #16
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	dc19      	bgt.n	8001030 <servo_speed_update+0x18c>
	{
		servo[i].cur_speed -= servo[i].acc;
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <servo_speed_update+0x1c0>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2134      	movs	r1, #52	; 0x34
 8001002:	fb01 f303 	mul.w	r3, r1, r3
 8001006:	4413      	add	r3, r2
 8001008:	3308      	adds	r3, #8
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4915      	ldr	r1, [pc, #84]	; (8001064 <servo_speed_update+0x1c0>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2034      	movs	r0, #52	; 0x34
 8001012:	fb00 f303 	mul.w	r3, r0, r3
 8001016:	440b      	add	r3, r1
 8001018:	3320      	adds	r3, #32
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1ad2      	subs	r2, r2, r3
 800101e:	4911      	ldr	r1, [pc, #68]	; (8001064 <servo_speed_update+0x1c0>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2034      	movs	r0, #52	; 0x34
 8001024:	fb00 f303 	mul.w	r3, r0, r3
 8001028:	440b      	add	r3, r1
 800102a:	3308      	adds	r3, #8
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e013      	b.n	8001058 <servo_speed_update+0x1b4>
	}
	else if (servo[i].cur_steps == 0)
 8001030:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <servo_speed_update+0x1c0>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2134      	movs	r1, #52	; 0x34
 8001036:	fb01 f303 	mul.w	r3, r1, r3
 800103a:	4413      	add	r3, r2
 800103c:	331c      	adds	r3, #28
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d109      	bne.n	8001058 <servo_speed_update+0x1b4>
	{
		servo[i].cur_speed = BASE_SPEED;
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <servo_speed_update+0x1c0>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2134      	movs	r1, #52	; 0x34
 800104a:	fb01 f303 	mul.w	r3, r1, r3
 800104e:	4413      	add	r3, r2
 8001050:	3308      	adds	r3, #8
 8001052:	2205      	movs	r2, #5
 8001054:	601a      	str	r2, [r3, #0]
	}
}
 8001056:	e7ff      	b.n	8001058 <servo_speed_update+0x1b4>
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bc90      	pop	{r4, r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	240005a8 	.word	0x240005a8

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_MspInit+0x30>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001074:	4a08      	ldr	r2, [pc, #32]	; (8001098 <HAL_MspInit+0x30>)
 8001076:	f043 0302 	orr.w	r3, r3, #2
 800107a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_MspInit+0x30>)
 8001080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	58024400 	.word	0x58024400

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 fc50 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <TIM3_IRQHandler+0x10>)
 80010fe:	f004 f955 	bl	80053ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	24000684 	.word	0x24000684

0800110c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <TIM4_IRQHandler+0x10>)
 8001112:	f004 f94b 	bl	80053ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	24000644 	.word	0x24000644

08001120 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <USART3_IRQHandler+0x10>)
 8001126:	f005 fa19 	bl	800655c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	240006c4 	.word	0x240006c4

08001134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001138:	4b29      	ldr	r3, [pc, #164]	; (80011e0 <SystemInit+0xac>)
 800113a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800113e:	4a28      	ldr	r2, [pc, #160]	; (80011e0 <SystemInit+0xac>)
 8001140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001148:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <SystemInit+0xb0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a25      	ldr	r2, [pc, #148]	; (80011e4 <SystemInit+0xb0>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <SystemInit+0xb0>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <SystemInit+0xb0>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4921      	ldr	r1, [pc, #132]	; (80011e4 <SystemInit+0xb0>)
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <SystemInit+0xb4>)
 8001162:	4013      	ands	r3, r2
 8001164:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <SystemInit+0xb0>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <SystemInit+0xb0>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <SystemInit+0xb0>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <SystemInit+0xb0>)
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <SystemInit+0xb0>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <SystemInit+0xb0>)
 8001186:	2200      	movs	r2, #0
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <SystemInit+0xb0>)
 800118c:	2200      	movs	r2, #0
 800118e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <SystemInit+0xb0>)
 8001192:	2200      	movs	r2, #0
 8001194:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <SystemInit+0xb0>)
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <SystemInit+0xb0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <SystemInit+0xb0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <SystemInit+0xb0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <SystemInit+0xb0>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <SystemInit+0xb0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <SystemInit+0xb8>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <SystemInit+0xbc>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011c6:	d202      	bcs.n	80011ce <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011c8:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <SystemInit+0xc0>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SystemInit+0xac>)
 80011d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00
 80011e4:	58024400 	.word	0x58024400
 80011e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011ec:	5c001000 	.word	0x5c001000
 80011f0:	ffff0000 	.word	0xffff0000
 80011f4:	51008108 	.word	0x51008108

080011f8 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <MX_TIM3_Init+0x114>)
 800122c:	4a38      	ldr	r2, [pc, #224]	; (8001310 <MX_TIM3_Init+0x118>)
 800122e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <MX_TIM3_Init+0x114>)
 8001232:	225f      	movs	r2, #95	; 0x5f
 8001234:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b35      	ldr	r3, [pc, #212]	; (800130c <MX_TIM3_Init+0x114>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_TIM3_Init+0x114>)
 800123e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001242:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <MX_TIM3_Init+0x114>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124a:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_TIM3_Init+0x114>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001250:	482e      	ldr	r0, [pc, #184]	; (800130c <MX_TIM3_Init+0x114>)
 8001252:	f004 f84b 	bl	80052ec <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800125c:	f7ff fc62 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126a:	4619      	mov	r1, r3
 800126c:	4827      	ldr	r0, [pc, #156]	; (800130c <MX_TIM3_Init+0x114>)
 800126e:	f004 fad5 	bl	800581c <HAL_TIM_ConfigClockSource>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001278:	f7ff fc54 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <MX_TIM3_Init+0x114>)
 800127e:	f004 f860 	bl	8005342 <HAL_TIM_PWM_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001288:	f7ff fc4c 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	481c      	ldr	r0, [pc, #112]	; (800130c <MX_TIM3_Init+0x114>)
 800129c:	f004 ffbc 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80012a6:	f7ff fc3d 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012aa:	2360      	movs	r3, #96	; 0x60
 80012ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	4619      	mov	r1, r3
 80012c0:	4812      	ldr	r0, [pc, #72]	; (800130c <MX_TIM3_Init+0x114>)
 80012c2:	f004 f993 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80012cc:	f7ff fc2a 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012d0:	463b      	mov	r3, r7
 80012d2:	2204      	movs	r2, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	480d      	ldr	r0, [pc, #52]	; (800130c <MX_TIM3_Init+0x114>)
 80012d8:	f004 f988 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80012e2:	f7ff fc1f 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	2208      	movs	r2, #8
 80012ea:	4619      	mov	r1, r3
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <MX_TIM3_Init+0x114>)
 80012ee:	f004 f97d 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80012f8:	f7ff fc14 	bl	8000b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 80012fc:	4803      	ldr	r0, [pc, #12]	; (800130c <MX_TIM3_Init+0x114>)
 80012fe:	f000 f8c7 	bl	8001490 <HAL_TIM_MspPostInit>

}
 8001302:	bf00      	nop
 8001304:	3738      	adds	r7, #56	; 0x38
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24000684 	.word	0x24000684
 8001310:	40000400 	.word	0x40000400

08001314 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]
 8001342:	615a      	str	r2, [r3, #20]
 8001344:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <MX_TIM4_Init+0xe4>)
 8001348:	4a2c      	ldr	r2, [pc, #176]	; (80013fc <MX_TIM4_Init+0xe8>)
 800134a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800134c:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <MX_TIM4_Init+0xe4>)
 800134e:	2200      	movs	r2, #0
 8001350:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001352:	4b29      	ldr	r3, [pc, #164]	; (80013f8 <MX_TIM4_Init+0xe4>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <MX_TIM4_Init+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <MX_TIM4_Init+0xe4>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001364:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <MX_TIM4_Init+0xe4>)
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800136a:	4823      	ldr	r0, [pc, #140]	; (80013f8 <MX_TIM4_Init+0xe4>)
 800136c:	f003 ffbe 	bl	80052ec <HAL_TIM_Base_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001376:	f7ff fbd5 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001380:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001384:	4619      	mov	r1, r3
 8001386:	481c      	ldr	r0, [pc, #112]	; (80013f8 <MX_TIM4_Init+0xe4>)
 8001388:	f004 fa48 	bl	800581c <HAL_TIM_ConfigClockSource>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001392:	f7ff fbc7 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <MX_TIM4_Init+0xe4>)
 8001398:	f003 ffd3 	bl	8005342 <HAL_TIM_PWM_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013a2:	f7ff fbbf 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	4810      	ldr	r0, [pc, #64]	; (80013f8 <MX_TIM4_Init+0xe4>)
 80013b6:	f004 ff2f 	bl	8006218 <HAL_TIMEx_MasterConfigSynchronization>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013c0:	f7ff fbb0 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c4:	2360      	movs	r3, #96	; 0x60
 80013c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_TIM4_Init+0xe4>)
 80013dc:	f004 f906 	bl	80055ec <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80013e6:	f7ff fb9d 	bl	8000b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM4_Init+0xe4>)
 80013ec:	f000 f850 	bl	8001490 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3738      	adds	r7, #56	; 0x38
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	24000644 	.word	0x24000644
 80013fc:	40000800 	.word	0x40000800

08001400 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a1d      	ldr	r2, [pc, #116]	; (8001484 <HAL_TIM_Base_MspInit+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d117      	bne.n	8001442 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_TIM_Base_MspInit+0x88>)
 8001414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_TIM_Base_MspInit+0x88>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_TIM_Base_MspInit+0x88>)
 8001424:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	201d      	movs	r0, #29
 8001436:	f000 fbea 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800143a:	201d      	movs	r0, #29
 800143c:	f000 fc01 	bl	8001c42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001440:	e01b      	b.n	800147a <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_TIM_Base_MspInit+0x8c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d116      	bne.n	800147a <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_TIM_Base_MspInit+0x88>)
 800144e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001452:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_TIM_Base_MspInit+0x88>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_TIM_Base_MspInit+0x88>)
 800145e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	201e      	movs	r0, #30
 8001470:	f000 fbcd 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001474:	201e      	movs	r0, #30
 8001476:	f000 fbe4 	bl	8001c42 <HAL_NVIC_EnableIRQ>
}
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40000400 	.word	0x40000400
 8001488:	58024400 	.word	0x58024400
 800148c:	40000800 	.word	0x40000800

08001490 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08c      	sub	sp, #48	; 0x30
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a44      	ldr	r2, [pc, #272]	; (80015c0 <HAL_TIM_MspPostInit+0x130>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d15d      	bne.n	800156e <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a42      	ldr	r2, [pc, #264]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d0:	4b3c      	ldr	r3, [pc, #240]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a3b      	ldr	r2, [pc, #236]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014d8:	f043 0302 	orr.w	r3, r3, #2
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	4b35      	ldr	r3, [pc, #212]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 8001500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800150c:	2340      	movs	r3, #64	; 0x40
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800151c:	2302      	movs	r3, #2
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	4828      	ldr	r0, [pc, #160]	; (80015c8 <HAL_TIM_MspPostInit+0x138>)
 8001528:	f001 f952 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800152c:	2301      	movs	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800153c:	2302      	movs	r3, #2
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <HAL_TIM_MspPostInit+0x13c>)
 8001548:	f001 f942 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800155c:	2302      	movs	r3, #2
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	481a      	ldr	r0, [pc, #104]	; (80015d0 <HAL_TIM_MspPostInit+0x140>)
 8001568:	f001 f932 	bl	80027d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800156c:	e024      	b.n	80015b8 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_TIM_MspPostInit+0x144>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d11f      	bne.n	80015b8 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	4a11      	ldr	r2, [pc, #68]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_TIM_MspPostInit+0x134>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80015a8:	2302      	movs	r3, #2
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	4809      	ldr	r0, [pc, #36]	; (80015d8 <HAL_TIM_MspPostInit+0x148>)
 80015b4:	f001 f90c 	bl	80027d0 <HAL_GPIO_Init>
}
 80015b8:	bf00      	nop
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40000400 	.word	0x40000400
 80015c4:	58024400 	.word	0x58024400
 80015c8:	58020000 	.word	0x58020000
 80015cc:	58020400 	.word	0x58020400
 80015d0:	58020800 	.word	0x58020800
 80015d4:	40000800 	.word	0x40000800
 80015d8:	58020c00 	.word	0x58020c00

080015dc <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d101      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		servo_update();
 80015f0:	f7ff fb6e 	bl	8000cd0 <servo_update>
	}
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	24000684 	.word	0x24000684

08001600 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_USART3_UART_Init+0x90>)
 8001606:	4a23      	ldr	r2, [pc, #140]	; (8001694 <MX_USART3_UART_Init+0x94>)
 8001608:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800160c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001610:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_USART3_UART_Init+0x90>)
 8001614:	2200      	movs	r2, #0
 8001616:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800161a:	2200      	movs	r2, #0
 800161c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_USART3_UART_Init+0x90>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001624:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_USART3_UART_Init+0x90>)
 8001626:	220c      	movs	r2, #12
 8001628:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001630:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_USART3_UART_Init+0x90>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001636:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_USART3_UART_Init+0x90>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_USART3_UART_Init+0x90>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001648:	4811      	ldr	r0, [pc, #68]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800164a:	f004 fe5f 	bl	800630c <HAL_UART_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001654:	f7ff fa66 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001658:	2100      	movs	r1, #0
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800165c:	f007 fe59 	bl	8009312 <HAL_UARTEx_SetTxFifoThreshold>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001666:	f7ff fa5d 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4808      	ldr	r0, [pc, #32]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800166e:	f007 fe8e 	bl	800938e <HAL_UARTEx_SetRxFifoThreshold>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001678:	f7ff fa54 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <MX_USART3_UART_Init+0x90>)
 800167e:	f007 fe0f 	bl	80092a0 <HAL_UARTEx_DisableFifoMode>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001688:	f7ff fa4c 	bl	8000b24 <Error_Handler>
  }

}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}
 8001690:	240006c4 	.word	0x240006c4
 8001694:	40004800 	.word	0x40004800

08001698 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_UART_MspInit+0x98>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d136      	bne.n	8001728 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_UART_MspInit+0x9c>)
 80016bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c0:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <HAL_UART_MspInit+0x9c>)
 80016c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_UART_MspInit+0x9c>)
 80016cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <HAL_UART_MspInit+0x9c>)
 80016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016de:	4a15      	ldr	r2, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x9c>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_UART_MspInit+0x9c>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001708:	2307      	movs	r3, #7
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_UART_MspInit+0xa0>)
 8001714:	f001 f85c 	bl	80027d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2027      	movs	r0, #39	; 0x27
 800171e:	f000 fa76 	bl	8001c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001722:	2027      	movs	r0, #39	; 0x27
 8001724:	f000 fa8d 	bl	8001c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40004800 	.word	0x40004800
 8001734:	58024400 	.word	0x58024400
 8001738:	58020c00 	.word	0x58020c00

0800173c <HAL_UART_RxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* uartHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    /*링버퍼패킷처리*/
	packet_Receive();
 8001744:	f7ff fa08 	bl	8000b58 <packet_Receive>

}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001754:	4b15      	ldr	r3, [pc, #84]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001756:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001758:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800175c:	2209      	movs	r2, #9
 800175e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001762:	2202      	movs	r2, #2
 8001764:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800176e:	2202      	movs	r2, #2
 8001770:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001774:	2201      	movs	r2, #1
 8001776:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001780:	2200      	movs	r2, #0
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001786:	2201      	movs	r2, #1
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800178c:	2201      	movs	r2, #1
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001792:	2200      	movs	r2, #0
 8001794:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001798:	f001 f9e3 	bl	8002b62 <HAL_PCD_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80017a2:	f7ff f9bf 	bl	8000b24 <Error_Handler>
  }

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	24000750 	.word	0x24000750
 80017b0:	40080000 	.word	0x40080000

080017b4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a21      	ldr	r2, [pc, #132]	; (8001858 <HAL_PCD_MspInit+0xa4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d13b      	bne.n	800184e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b21      	ldr	r3, [pc, #132]	; (800185c <HAL_PCD_MspInit+0xa8>)
 80017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <HAL_PCD_MspInit+0xa8>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <HAL_PCD_MspInit+0xa8>)
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017f4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001806:	230a      	movs	r3, #10
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4813      	ldr	r0, [pc, #76]	; (8001860 <HAL_PCD_MspInit+0xac>)
 8001812:	f000 ffdd 	bl	80027d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <HAL_PCD_MspInit+0xac>)
 800182c:	f000 ffd0 	bl	80027d0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_PCD_MspInit+0xa8>)
 8001832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_PCD_MspInit+0xa8>)
 8001838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800183c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_PCD_MspInit+0xa8>)
 8001842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40080000 	.word	0x40080000
 800185c:	58024400 	.word	0x58024400
 8001860:	58020000 	.word	0x58020000

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800189c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001868:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800186a:	e003      	b.n	8001874 <LoopCopyDataInit>

0800186c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800186e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001870:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001872:	3104      	adds	r1, #4

08001874 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001874:	480b      	ldr	r0, [pc, #44]	; (80018a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001878:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800187a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800187c:	d3f6      	bcc.n	800186c <CopyDataInit>
  ldr  r2, =_sbss
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001880:	e002      	b.n	8001888 <LoopFillZerobss>

08001882 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001882:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001884:	f842 3b04 	str.w	r3, [r2], #4

08001888 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800188a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800188c:	d3f9      	bcc.n	8001882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800188e:	f7ff fc51 	bl	8001134 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001892:	f008 f8db 	bl	8009a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001896:	f7ff f873 	bl	8000980 <main>
  bx  lr    
 800189a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80018a0:	08009aec 	.word	0x08009aec
  ldr  r0, =_sdata
 80018a4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80018a8:	24000018 	.word	0x24000018
  ldr  r2, =_sbss
 80018ac:	240000d8 	.word	0x240000d8
  ldr  r3, = _ebss
 80018b0:	24000b5c 	.word	0x24000b5c

080018b4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC3_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f99b 	bl	8001bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018c2:	f002 f83b 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80018c6:	4601      	mov	r1, r0
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <HAL_Init+0x60>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_Init+0x64>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	fa21 f303 	lsr.w	r3, r1, r3
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_Init+0x68>)
 80018e0:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_Init+0x68>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_Init+0x60>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	490b      	ldr	r1, [pc, #44]	; (800191c <HAL_Init+0x64>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_Init+0x6c>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f812 	bl	8001928 <HAL_InitTick>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e002      	b.n	8001914 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800190e:	f7ff fbab 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}
 8001918:	58024400 	.word	0x58024400
 800191c:	08009acc 	.word	0x08009acc
 8001920:	24000008 	.word	0x24000008
 8001924:	2400000c 	.word	0x2400000c

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_InitTick+0x60>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e021      	b.n	8001980 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800193c:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_InitTick+0x64>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_InitTick+0x60>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 f983 	bl	8001c5e <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f94d 	bl	8001c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x68>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	24000014 	.word	0x24000014
 800198c:	24000008 	.word	0x24000008
 8001990:	24000010 	.word	0x24000010

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	24000014 	.word	0x24000014
 80019b8:	24000b58 	.word	0x24000b58

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	24000b58 	.word	0x24000b58

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_Delay+0x40>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	24000014 	.word	0x24000014

08001a18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_GetREVID+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0c1b      	lsrs	r3, r3, #16
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	5c001000 	.word	0x5c001000

08001a30 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001a40:	4904      	ldr	r1, [pc, #16]	; (8001a54 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	58000400 	.word	0x58000400

08001a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <__NVIC_SetPriorityGrouping+0x40>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a74:	4013      	ands	r3, r2
 8001a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <__NVIC_SetPriorityGrouping+0x44>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <__NVIC_SetPriorityGrouping+0x40>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00
 8001a9c:	05fa0000 	.word	0x05fa0000

08001aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	f003 0307 	and.w	r3, r3, #7
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	db0b      	blt.n	8001ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	f003 021f 	and.w	r2, r3, #31
 8001ad4:	4907      	ldr	r1, [pc, #28]	; (8001af4 <__NVIC_EnableIRQ+0x38>)
 8001ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2001      	movs	r0, #1
 8001ade:	fa00 f202 	lsl.w	r2, r0, r2
 8001ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e100 	.word	0xe000e100

08001af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	db0a      	blt.n	8001b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	b2da      	uxtb	r2, r3
 8001b10:	490c      	ldr	r1, [pc, #48]	; (8001b44 <__NVIC_SetPriority+0x4c>)
 8001b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b16:	0112      	lsls	r2, r2, #4
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b20:	e00a      	b.n	8001b38 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4908      	ldr	r1, [pc, #32]	; (8001b48 <__NVIC_SetPriority+0x50>)
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	f003 030f 	and.w	r3, r3, #15
 8001b2e:	3b04      	subs	r3, #4
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	b2d2      	uxtb	r2, r2
 8001b34:	440b      	add	r3, r1
 8001b36:	761a      	strb	r2, [r3, #24]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000e100 	.word	0xe000e100
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f1c3 0307 	rsb	r3, r3, #7
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	bf28      	it	cs
 8001b6a:	2304      	movcs	r3, #4
 8001b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3304      	adds	r3, #4
 8001b72:	2b06      	cmp	r3, #6
 8001b74:	d902      	bls.n	8001b7c <NVIC_EncodePriority+0x30>
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3b03      	subs	r3, #3
 8001b7a:	e000      	b.n	8001b7e <NVIC_EncodePriority+0x32>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	f04f 32ff 	mov.w	r2, #4294967295
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	401a      	ands	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b94:	f04f 31ff 	mov.w	r1, #4294967295
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	43d9      	mvns	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	4313      	orrs	r3, r2
         );
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bc4:	d301      	bcc.n	8001bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00f      	b.n	8001bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <SysTick_Config+0x40>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f7ff ff8e 	bl	8001af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SysTick_Config+0x40>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001be2:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <SysTick_Config+0x40>)
 8001be4:	2207      	movs	r2, #7
 8001be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	e000e010 	.word	0xe000e010

08001bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff29 	bl	8001a58 <__NVIC_SetPriorityGrouping>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	4603      	mov	r3, r0
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
 8001c1a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff40 	bl	8001aa0 <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff90 	bl	8001b4c <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5f 	bl	8001af8 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff33 	bl	8001abc <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa4 	bl	8001bb4 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e188      	b.n	8001f9c <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d004      	beq.n	8001ca0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2280      	movs	r2, #128	; 0x80
 8001c9a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e17d      	b.n	8001f9c <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a8c      	ldr	r2, [pc, #560]	; (8001ed8 <HAL_DMA_Abort_IT+0x260>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04a      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a8b      	ldr	r2, [pc, #556]	; (8001edc <HAL_DMA_Abort_IT+0x264>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d045      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a89      	ldr	r2, [pc, #548]	; (8001ee0 <HAL_DMA_Abort_IT+0x268>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d040      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a88      	ldr	r2, [pc, #544]	; (8001ee4 <HAL_DMA_Abort_IT+0x26c>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d03b      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a86      	ldr	r2, [pc, #536]	; (8001ee8 <HAL_DMA_Abort_IT+0x270>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d036      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a85      	ldr	r2, [pc, #532]	; (8001eec <HAL_DMA_Abort_IT+0x274>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d031      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a83      	ldr	r2, [pc, #524]	; (8001ef0 <HAL_DMA_Abort_IT+0x278>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02c      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a82      	ldr	r2, [pc, #520]	; (8001ef4 <HAL_DMA_Abort_IT+0x27c>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d027      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a80      	ldr	r2, [pc, #512]	; (8001ef8 <HAL_DMA_Abort_IT+0x280>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7f      	ldr	r2, [pc, #508]	; (8001efc <HAL_DMA_Abort_IT+0x284>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d01d      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a7d      	ldr	r2, [pc, #500]	; (8001f00 <HAL_DMA_Abort_IT+0x288>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7c      	ldr	r2, [pc, #496]	; (8001f04 <HAL_DMA_Abort_IT+0x28c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a7a      	ldr	r2, [pc, #488]	; (8001f08 <HAL_DMA_Abort_IT+0x290>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a79      	ldr	r2, [pc, #484]	; (8001f0c <HAL_DMA_Abort_IT+0x294>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a77      	ldr	r2, [pc, #476]	; (8001f10 <HAL_DMA_Abort_IT+0x298>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_DMA_Abort_IT+0xc8>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a76      	ldr	r2, [pc, #472]	; (8001f14 <HAL_DMA_Abort_IT+0x29c>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Abort_IT+0xcc>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Abort_IT+0xce>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d065      	beq.n	8001e16 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a60      	ldr	r2, [pc, #384]	; (8001ed8 <HAL_DMA_Abort_IT+0x260>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d04a      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a5e      	ldr	r2, [pc, #376]	; (8001edc <HAL_DMA_Abort_IT+0x264>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d045      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a5d      	ldr	r2, [pc, #372]	; (8001ee0 <HAL_DMA_Abort_IT+0x268>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d040      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a5b      	ldr	r2, [pc, #364]	; (8001ee4 <HAL_DMA_Abort_IT+0x26c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d03b      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HAL_DMA_Abort_IT+0x270>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d036      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a58      	ldr	r2, [pc, #352]	; (8001eec <HAL_DMA_Abort_IT+0x274>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d031      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a57      	ldr	r2, [pc, #348]	; (8001ef0 <HAL_DMA_Abort_IT+0x278>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d02c      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_DMA_Abort_IT+0x27c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <HAL_DMA_Abort_IT+0x280>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d022      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a52      	ldr	r2, [pc, #328]	; (8001efc <HAL_DMA_Abort_IT+0x284>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d01d      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <HAL_DMA_Abort_IT+0x288>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d018      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a4f      	ldr	r2, [pc, #316]	; (8001f04 <HAL_DMA_Abort_IT+0x28c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a4e      	ldr	r2, [pc, #312]	; (8001f08 <HAL_DMA_Abort_IT+0x290>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d00e      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_DMA_Abort_IT+0x294>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d009      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a4b      	ldr	r2, [pc, #300]	; (8001f10 <HAL_DMA_Abort_IT+0x298>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d004      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x17a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a49      	ldr	r2, [pc, #292]	; (8001f14 <HAL_DMA_Abort_IT+0x29c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d108      	bne.n	8001e04 <HAL_DMA_Abort_IT+0x18c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e0ca      	b.n	8001f9a <HAL_DMA_Abort_IT+0x322>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e0c1      	b.n	8001f9a <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 020e 	bic.w	r2, r2, #14
 8001e24:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a2b      	ldr	r2, [pc, #172]	; (8001ed8 <HAL_DMA_Abort_IT+0x260>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04a      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_DMA_Abort_IT+0x264>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d045      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a28      	ldr	r2, [pc, #160]	; (8001ee0 <HAL_DMA_Abort_IT+0x268>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d040      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <HAL_DMA_Abort_IT+0x26c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d03b      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a25      	ldr	r2, [pc, #148]	; (8001ee8 <HAL_DMA_Abort_IT+0x270>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a23      	ldr	r2, [pc, #140]	; (8001eec <HAL_DMA_Abort_IT+0x274>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <HAL_DMA_Abort_IT+0x278>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d02c      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <HAL_DMA_Abort_IT+0x27c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d027      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_DMA_Abort_IT+0x280>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d022      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_DMA_Abort_IT+0x284>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_DMA_Abort_IT+0x288>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d018      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a1a      	ldr	r2, [pc, #104]	; (8001f04 <HAL_DMA_Abort_IT+0x28c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_DMA_Abort_IT+0x290>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00e      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_DMA_Abort_IT+0x294>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d009      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_DMA_Abort_IT+0x298>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x24e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_DMA_Abort_IT+0x29c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d128      	bne.n	8001f18 <HAL_DMA_Abort_IT+0x2a0>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e027      	b.n	8001f28 <HAL_DMA_Abort_IT+0x2b0>
 8001ed8:	40020010 	.word	0x40020010
 8001edc:	40020028 	.word	0x40020028
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	40020070 	.word	0x40020070
 8001eec:	40020088 	.word	0x40020088
 8001ef0:	400200a0 	.word	0x400200a0
 8001ef4:	400200b8 	.word	0x400200b8
 8001ef8:	40020410 	.word	0x40020410
 8001efc:	40020428 	.word	0x40020428
 8001f00:	40020440 	.word	0x40020440
 8001f04:	40020458 	.word	0x40020458
 8001f08:	40020470 	.word	0x40020470
 8001f0c:	40020488 	.word	0x40020488
 8001f10:	400204a0 	.word	0x400204a0
 8001f14:	400204b8 	.word	0x400204b8
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2201      	movs	r2, #1
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f56:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00c      	beq.n	8001f7a <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f78:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e0c6      	b.n	8002144 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d102      	bne.n	8001fc4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe fb5c 	bl	800067c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2223      	movs	r2, #35	; 0x23
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b60      	ldr	r3, [pc, #384]	; (800214c <HAL_ETH_Init+0x1a8>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fd0:	4a5e      	ldr	r2, [pc, #376]	; (800214c <HAL_ETH_Init+0x1a8>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fda:	4b5c      	ldr	r3, [pc, #368]	; (800214c <HAL_ETH_Init+0x1a8>)
 8001fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7a1b      	ldrb	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fd1d 	bl	8001a30 <HAL_SYSCFG_ETHInterfaceSelect>
 8001ff6:	e003      	b.n	8002000 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ff8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001ffc:	f7ff fd18 	bl	8001a30 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002016:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002018:	f7ff fcd0 	bl	80019bc <HAL_GetTick>
 800201c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800201e:	e00f      	b.n	8002040 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002020:	f7ff fccc 	bl	80019bc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800202e:	d907      	bls.n	8002040 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2204      	movs	r2, #4
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	22e0      	movs	r2, #224	; 0xe0
 800203a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e081      	b.n	8002144 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1e6      	bne.n	8002020 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fac0 	bl	80025d8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002058:	f001 fde2 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <HAL_ETH_Init+0x1ac>)
 8002060:	fba3 2302 	umull	r2, r3, r3, r2
 8002064:	0c9a      	lsrs	r2, r3, #18
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	3a01      	subs	r2, #1
 800206c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fa13 	bl	800249c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800208c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002090:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	22e0      	movs	r2, #224	; 0xe0
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e04a      	b.n	8002144 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80020b6:	4413      	add	r3, r2
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_ETH_Init+0x1b0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6952      	ldr	r2, [r2, #20]
 80020c2:	0052      	lsls	r2, r2, #1
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	6809      	ldr	r1, [r1, #0]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	f241 1308 	movw	r3, #4360	; 0x1108
 80020ce:	440b      	add	r3, r1
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fad8 	bl	8002688 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fb1c 	bl	8002716 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	3305      	adds	r3, #5
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021a      	lsls	r2, r3, #8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	3304      	adds	r3, #4
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	3303      	adds	r3, #3
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	061a      	lsls	r2, r3, #24
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	3302      	adds	r3, #2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	041b      	lsls	r3, r3, #16
 8002110:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	3301      	adds	r3, #1
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800211c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800212a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800212c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2210      	movs	r2, #16
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2210      	movs	r2, #16
 8002140:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	58024400 	.word	0x58024400
 8002150:	431bde83 	.word	0x431bde83
 8002154:	ffff8001 	.word	0xffff8001

08002158 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800216a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002172:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	7b1b      	ldrb	r3, [r3, #12]
 8002178:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800217a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	7b5b      	ldrb	r3, [r3, #13]
 8002180:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002182:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	7b9b      	ldrb	r3, [r3, #14]
 8002188:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800218a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	7bdb      	ldrb	r3, [r3, #15]
 8002190:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002192:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	7c12      	ldrb	r2, [r2, #16]
 8002198:	2a00      	cmp	r2, #0
 800219a:	d102      	bne.n	80021a2 <ETH_SetMACConfig+0x4a>
 800219c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021a0:	e000      	b.n	80021a4 <ETH_SetMACConfig+0x4c>
 80021a2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80021a4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	7c52      	ldrb	r2, [r2, #17]
 80021aa:	2a00      	cmp	r2, #0
 80021ac:	d102      	bne.n	80021b4 <ETH_SetMACConfig+0x5c>
 80021ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021b2:	e000      	b.n	80021b6 <ETH_SetMACConfig+0x5e>
 80021b4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80021b6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	7c9b      	ldrb	r3, [r3, #18]
 80021bc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80021be:	431a      	orrs	r2, r3
                                macconf->Speed |
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80021c4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80021ca:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	7f1b      	ldrb	r3, [r3, #28]
 80021d0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80021d2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	7f5b      	ldrb	r3, [r3, #29]
 80021d8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80021da:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	7f92      	ldrb	r2, [r2, #30]
 80021e0:	2a00      	cmp	r2, #0
 80021e2:	d102      	bne.n	80021ea <ETH_SetMACConfig+0x92>
 80021e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e8:	e000      	b.n	80021ec <ETH_SetMACConfig+0x94>
 80021ea:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80021ec:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7fdb      	ldrb	r3, [r3, #31]
 80021f2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80021f4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80021fc:	2a00      	cmp	r2, #0
 80021fe:	d102      	bne.n	8002206 <ETH_SetMACConfig+0xae>
 8002200:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002204:	e000      	b.n	8002208 <ETH_SetMACConfig+0xb0>
 8002206:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002208:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800220e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002216:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002218:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b56      	ldr	r3, [pc, #344]	; (8002384 <ETH_SetMACConfig+0x22c>)
 800222a:	4013      	ands	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	430b      	orrs	r3, r1
 8002234:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002242:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002244:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800224c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800224e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002256:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002258:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002260:	2a00      	cmp	r2, #0
 8002262:	d102      	bne.n	800226a <ETH_SetMACConfig+0x112>
 8002264:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002268:	e000      	b.n	800226c <ETH_SetMACConfig+0x114>
 800226a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800226c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	4b42      	ldr	r3, [pc, #264]	; (8002388 <ETH_SetMACConfig+0x230>)
 800227e:	4013      	ands	r3, r2
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	430b      	orrs	r3, r1
 8002288:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002290:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	4b3a      	ldr	r3, [pc, #232]	; (800238c <ETH_SetMACConfig+0x234>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	68f9      	ldr	r1, [r7, #12]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022b4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022ba:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	d101      	bne.n	80022ca <ETH_SetMACConfig+0x172>
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	e000      	b.n	80022cc <ETH_SetMACConfig+0x174>
 80022ca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80022cc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022de:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	430b      	orrs	r3, r1
 80022ec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80022f4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80022fc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80022fe:	4313      	orrs	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f023 0103 	bic.w	r1, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	430a      	orrs	r2, r1
 8002316:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002322:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800233e:	2a00      	cmp	r2, #0
 8002340:	d101      	bne.n	8002346 <ETH_SetMACConfig+0x1ee>
 8002342:	2240      	movs	r2, #64	; 0x40
 8002344:	e000      	b.n	8002348 <ETH_SetMACConfig+0x1f0>
 8002346:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002348:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002350:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002352:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800235a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800235c:	4313      	orrs	r3, r2
 800235e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002368:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	430a      	orrs	r2, r1
 8002374:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	00048083 	.word	0x00048083
 8002388:	c0f88000 	.word	0xc0f88000
 800238c:	fffffef0 	.word	0xfffffef0

08002390 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b38      	ldr	r3, [pc, #224]	; (8002488 <ETH_SetDMAConfig+0xf8>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	6809      	ldr	r1, [r1, #0]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80023b6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023c2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	7b1b      	ldrb	r3, [r3, #12]
 80023c8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80023d6:	4413      	add	r3, r2
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <ETH_SetDMAConfig+0xfc>)
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6811      	ldr	r1, [r2, #0]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	f241 0304 	movw	r3, #4100	; 0x1004
 80023ea:	440b      	add	r3, r1
 80023ec:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7b5b      	ldrb	r3, [r3, #13]
 80023f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <ETH_SetDMAConfig+0x100>)
 8002408:	4013      	ands	r3, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6811      	ldr	r1, [r2, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	431a      	orrs	r2, r3
 8002412:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002416:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7d1b      	ldrb	r3, [r3, #20]
 8002420:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002422:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	7f5b      	ldrb	r3, [r3, #29]
 8002428:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	f241 1304 	movw	r3, #4356	; 0x1104
 8002436:	4413      	add	r3, r2
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	4b16      	ldr	r3, [pc, #88]	; (8002494 <ETH_SetDMAConfig+0x104>)
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6811      	ldr	r1, [r2, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	431a      	orrs	r2, r3
 8002446:	f241 1304 	movw	r3, #4356	; 0x1104
 800244a:	440b      	add	r3, r1
 800244c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	7f1b      	ldrb	r3, [r3, #28]
 8002452:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	f241 1308 	movw	r3, #4360	; 0x1108
 8002464:	4413      	add	r3, r2
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <ETH_SetDMAConfig+0x108>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	431a      	orrs	r2, r3
 8002474:	f241 1308 	movw	r3, #4360	; 0x1108
 8002478:	440b      	add	r3, r1
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	ffff87fd 	.word	0xffff87fd
 800248c:	ffff2ffe 	.word	0xffff2ffe
 8002490:	fffec000 	.word	0xfffec000
 8002494:	ffc0efef 	.word	0xffc0efef
 8002498:	7fc0ffff 	.word	0x7fc0ffff

0800249c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0a4      	sub	sp, #144	; 0x90
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024aa:	2300      	movs	r3, #0
 80024ac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024dc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80024f4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80024f8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002516:	2300      	movs	r3, #0
 8002518:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800251a:	2300      	movs	r3, #0
 800251c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800251e:	2300      	movs	r3, #0
 8002520:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800252e:	2301      	movs	r3, #1
 8002530:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002534:	2320      	movs	r3, #32
 8002536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002546:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800254c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002550:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002564:	2300      	movs	r3, #0
 8002566:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800256a:	2300      	movs	r3, #0
 800256c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002570:	2301      	movs	r3, #1
 8002572:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002576:	2300      	movs	r3, #0
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fde6 	bl	8002158 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800258c:	2301      	movs	r3, #1
 800258e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002590:	2301      	movs	r3, #1
 8002592:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80025bc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fee1 	bl	8002390 <ETH_SetDMAConfig>
}
 80025ce:	bf00      	nop
 80025d0:	3790      	adds	r7, #144	; 0x90
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025f2:	f001 fb15 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 80025f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d908      	bls.n	8002612 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4a1d      	ldr	r2, [pc, #116]	; (8002678 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d804      	bhi.n	8002612 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	e027      	b.n	8002662 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d908      	bls.n	800262c <ETH_MAC_MDIO_ClkConfig+0x54>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d804      	bhi.n	800262c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e01a      	b.n	8002662 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d903      	bls.n	800263c <ETH_MAC_MDIO_ClkConfig+0x64>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d911      	bls.n	8002660 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d908      	bls.n	8002656 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d804      	bhi.n	8002656 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e005      	b.n	8002662 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e000      	b.n	8002662 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002660:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800266c:	bf00      	nop
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	01312cff 	.word	0x01312cff
 8002678:	02160ebf 	.word	0x02160ebf
 800267c:	039386ff 	.word	0x039386ff
 8002680:	05f5e0ff 	.word	0x05f5e0ff
 8002684:	08f0d17f 	.word	0x08f0d17f

08002688 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	e01d      	b.n	80026d2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68d9      	ldr	r1, [r3, #12]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	440b      	add	r3, r1
 80026a6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	3206      	adds	r2, #6
 80026c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d9de      	bls.n	8002696 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f241 132c 	movw	r3, #4396	; 0x112c
 80026e6:	4413      	add	r3, r2
 80026e8:	2203      	movs	r2, #3
 80026ea:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	f241 1314 	movw	r3, #4372	; 0x1114
 80026f8:	4413      	add	r3, r2
 80026fa:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002716:	b480      	push	{r7}
 8002718:	b085      	sub	sp, #20
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	e024      	b.n	800276e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6919      	ldr	r1, [r3, #16]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2200      	movs	r2, #0
 800274c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2200      	movs	r2, #0
 8002752:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	330a      	adds	r3, #10
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d9d7      	bls.n	8002724 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	f241 1330 	movw	r3, #4400	; 0x1130
 800279a:	4413      	add	r3, r2
 800279c:	2203      	movs	r2, #3
 800279e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6919      	ldr	r1, [r3, #16]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80027ac:	4413      	add	r3, r2
 80027ae:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	f241 1328 	movw	r3, #4392	; 0x1128
 80027c0:	4413      	add	r3, r2
 80027c2:	6019      	str	r1, [r3, #0]
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <HAL_GPIO_Init+0x234>)
 80027e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027e2:	e194      	b.n	8002b0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8186 	beq.w	8002b08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x3c>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b12      	cmp	r3, #18
 800280a:	d123      	bne.n	8002854 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	08da      	lsrs	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	69b9      	ldr	r1, [r7, #24]
 8002850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d00b      	beq.n	80028a8 <HAL_GPIO_Init+0xd8>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289c:	2b11      	cmp	r3, #17
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	d130      	bne.n	800290a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028de:	2201      	movs	r2, #1
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0201 	and.w	r2, r3, #1
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80e0 	beq.w	8002b08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002948:	4b2f      	ldr	r3, [pc, #188]	; (8002a08 <HAL_GPIO_Init+0x238>)
 800294a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800294e:	4a2e      	ldr	r2, [pc, #184]	; (8002a08 <HAL_GPIO_Init+0x238>)
 8002950:	f043 0302 	orr.w	r3, r3, #2
 8002954:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_GPIO_Init+0x238>)
 800295a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002966:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <HAL_GPIO_Init+0x23c>)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	089b      	lsrs	r3, r3, #2
 800296c:	3302      	adds	r3, #2
 800296e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	220f      	movs	r2, #15
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a20      	ldr	r2, [pc, #128]	; (8002a10 <HAL_GPIO_Init+0x240>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d052      	beq.n	8002a38 <HAL_GPIO_Init+0x268>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a1f      	ldr	r2, [pc, #124]	; (8002a14 <HAL_GPIO_Init+0x244>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d031      	beq.n	80029fe <HAL_GPIO_Init+0x22e>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_GPIO_Init+0x248>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02b      	beq.n	80029fa <HAL_GPIO_Init+0x22a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1d      	ldr	r2, [pc, #116]	; (8002a1c <HAL_GPIO_Init+0x24c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d025      	beq.n	80029f6 <HAL_GPIO_Init+0x226>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_GPIO_Init+0x250>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <HAL_GPIO_Init+0x222>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_GPIO_Init+0x254>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d019      	beq.n	80029ee <HAL_GPIO_Init+0x21e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1a      	ldr	r2, [pc, #104]	; (8002a28 <HAL_GPIO_Init+0x258>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_GPIO_Init+0x21a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_GPIO_Init+0x25c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00d      	beq.n	80029e6 <HAL_GPIO_Init+0x216>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a18      	ldr	r2, [pc, #96]	; (8002a30 <HAL_GPIO_Init+0x260>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d007      	beq.n	80029e2 <HAL_GPIO_Init+0x212>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_GPIO_Init+0x264>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_GPIO_Init+0x20e>
 80029da:	2309      	movs	r3, #9
 80029dc:	e02d      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029de:	230a      	movs	r3, #10
 80029e0:	e02b      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029e2:	2308      	movs	r3, #8
 80029e4:	e029      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e027      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029ea:	2306      	movs	r3, #6
 80029ec:	e025      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029ee:	2305      	movs	r3, #5
 80029f0:	e023      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029f2:	2304      	movs	r3, #4
 80029f4:	e021      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029f6:	2303      	movs	r3, #3
 80029f8:	e01f      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e01d      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 80029fe:	2301      	movs	r3, #1
 8002a00:	e01b      	b.n	8002a3a <HAL_GPIO_Init+0x26a>
 8002a02:	bf00      	nop
 8002a04:	58000080 	.word	0x58000080
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	58000400 	.word	0x58000400
 8002a10:	58020000 	.word	0x58020000
 8002a14:	58020400 	.word	0x58020400
 8002a18:	58020800 	.word	0x58020800
 8002a1c:	58020c00 	.word	0x58020c00
 8002a20:	58021000 	.word	0x58021000
 8002a24:	58021400 	.word	0x58021400
 8002a28:	58021800 	.word	0x58021800
 8002a2c:	58021c00 	.word	0x58021c00
 8002a30:	58022000 	.word	0x58022000
 8002a34:	58022400 	.word	0x58022400
 8002a38:	2300      	movs	r3, #0
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	f002 0203 	and.w	r2, r2, #3
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	4093      	lsls	r3, r2
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4a:	4938      	ldr	r1, [pc, #224]	; (8002b2c <HAL_GPIO_Init+0x35c>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa22 f303 	lsr.w	r3, r2, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f ae63 	bne.w	80027e4 <HAL_GPIO_Init+0x14>
  }
}
 8002b1e:	bf00      	nop
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	58000400 	.word	0x58000400

08002b30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b40:	787b      	ldrb	r3, [r7, #1]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b46:	887a      	ldrh	r2, [r7, #2]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b4c:	e003      	b.n	8002b56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	041a      	lsls	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	619a      	str	r2, [r3, #24]
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b64:	b08f      	sub	sp, #60	; 0x3c
 8002b66:	af0a      	add	r7, sp, #40	; 0x28
 8002b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e116      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fe fe10 	bl	80017b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d102      	bne.n	8002bae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f006 fcf4 	bl	80095a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	687e      	ldr	r6, [r7, #4]
 8002bc0:	466d      	mov	r5, sp
 8002bc2:	f106 0410 	add.w	r4, r6, #16
 8002bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bd6:	1d33      	adds	r3, r6, #4
 8002bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f006 fc7e 	bl	80094dc <USB_CoreInit>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0d7      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f006 fce2 	bl	80095c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e04a      	b.n	8002c9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	333d      	adds	r3, #61	; 0x3d
 8002c14:	2201      	movs	r2, #1
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	333c      	adds	r3, #60	; 0x3c
 8002c28:	7bfa      	ldrb	r2, [r7, #15]
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	b298      	uxth	r0, r3
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	3342      	adds	r3, #66	; 0x42
 8002c40:	4602      	mov	r2, r0
 8002c42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c44:	7bfa      	ldrb	r2, [r7, #15]
 8002c46:	6879      	ldr	r1, [r7, #4]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	1a9b      	subs	r3, r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	333f      	adds	r3, #63	; 0x3f
 8002c54:	2200      	movs	r2, #0
 8002c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c58:	7bfa      	ldrb	r2, [r7, #15]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	3344      	adds	r3, #68	; 0x44
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c6c:	7bfa      	ldrb	r2, [r7, #15]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	3348      	adds	r3, #72	; 0x48
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3350      	adds	r3, #80	; 0x50
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	3301      	adds	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3af      	bcc.n	8002c04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
 8002ca8:	e044      	b.n	8002d34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3301      	adds	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
 8002d34:	7bfa      	ldrb	r2, [r7, #15]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d3b5      	bcc.n	8002caa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	687e      	ldr	r6, [r7, #4]
 8002d46:	466d      	mov	r5, sp
 8002d48:	f106 0410 	add.w	r4, r6, #16
 8002d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d58:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d5c:	1d33      	adds	r3, r6, #4
 8002d5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d60:	6838      	ldr	r0, [r7, #0]
 8002d62:	f006 fc59 	bl	8009618 <USB_DevInit>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e014      	b.n	8002da2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d102      	bne.n	8002d96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f80b 	bl	8002dac <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f006 fe09 	bl	80099b2 <USB_DevDisconnect>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002dac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	10000003 	.word	0x10000003

08002df4 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_PWREx_ConfigSupply+0x6c>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d008      	beq.n	8002e1a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e08:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d001      	beq.n	8002e1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e01d      	b.n	8002e56 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e1a:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	490f      	ldr	r1, [pc, #60]	; (8002e60 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e2a:	f7fe fdc7 	bl	80019bc <HAL_GetTick>
 8002e2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002e30:	e009      	b.n	8002e46 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002e32:	f7fe fdc3 	bl	80019bc <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e40:	d901      	bls.n	8002e46 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e007      	b.n	8002e56 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e52:	d1ee      	bne.n	8002e32 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	58024800 	.word	0x58024800

08002e64 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a04      	ldr	r2, [pc, #16]	; (8002e80 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	60d3      	str	r3, [r2, #12]
}
 8002e74:	bf00      	nop
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	58024800 	.word	0x58024800

08002e84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e3a4      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8087 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ea4:	4b9a      	ldr	r3, [pc, #616]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002eae:	4b98      	ldr	r3, [pc, #608]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d007      	beq.n	8002eca <HAL_RCC_OscConfig+0x46>
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	2b18      	cmp	r3, #24
 8002ebe:	d110      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x5e>
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eca:	4b91      	ldr	r3, [pc, #580]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d06c      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x12c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d168      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e37e      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x76>
 8002eec:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a87      	ldr	r2, [pc, #540]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	e02e      	b.n	8002f58 <HAL_RCC_OscConfig+0xd4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x98>
 8002f02:	4b83      	ldr	r3, [pc, #524]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a82      	ldr	r2, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	4b80      	ldr	r3, [pc, #512]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7f      	ldr	r2, [pc, #508]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e01d      	b.n	8002f58 <HAL_RCC_OscConfig+0xd4>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0xbc>
 8002f26:	4b7a      	ldr	r3, [pc, #488]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a79      	ldr	r2, [pc, #484]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b77      	ldr	r3, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a76      	ldr	r2, [pc, #472]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0xd4>
 8002f40:	4b73      	ldr	r3, [pc, #460]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a72      	ldr	r2, [pc, #456]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b70      	ldr	r3, [pc, #448]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a6f      	ldr	r2, [pc, #444]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe fd2c 	bl	80019bc <HAL_GetTick>
 8002f64:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe fd28 	bl	80019bc <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e332      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f7a:	4b65      	ldr	r3, [pc, #404]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0xe4>
 8002f86:	e014      	b.n	8002fb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fd18 	bl	80019bc <HAL_GetTick>
 8002f8c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f90:	f7fe fd14 	bl	80019bc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e31e      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002fa2:	4b5b      	ldr	r3, [pc, #364]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x10c>
 8002fae:	e000      	b.n	8002fb2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80b0 	beq.w	8003120 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc0:	4b53      	ldr	r3, [pc, #332]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fca:	4b51      	ldr	r3, [pc, #324]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x162>
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	2b18      	cmp	r3, #24
 8002fda:	d149      	bne.n	8003070 <HAL_RCC_OscConfig+0x1ec>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d144      	bne.n	8003070 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x17a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e2f0      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ffe:	4b44      	ldr	r3, [pc, #272]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 0219 	bic.w	r2, r3, #25
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	4941      	ldr	r1, [pc, #260]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 800300c:	4313      	orrs	r3, r2
 800300e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe fcd4 	bl	80019bc <HAL_GetTick>
 8003014:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003018:	f7fe fcd0 	bl	80019bc <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e2da      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800302a:	4b39      	ldr	r3, [pc, #228]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	f7fe fcef 	bl	8001a18 <HAL_GetREVID>
 800303a:	4602      	mov	r2, r0
 800303c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003040:	429a      	cmp	r2, r3
 8003042:	d80a      	bhi.n	800305a <HAL_RCC_OscConfig+0x1d6>
 8003044:	4b32      	ldr	r3, [pc, #200]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	031b      	lsls	r3, r3, #12
 8003052:	492f      	ldr	r1, [pc, #188]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003058:	e062      	b.n	8003120 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b2d      	ldr	r3, [pc, #180]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	061b      	lsls	r3, r3, #24
 8003068:	4929      	ldr	r1, [pc, #164]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 800306a:	4313      	orrs	r3, r2
 800306c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800306e:	e057      	b.n	8003120 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d038      	beq.n	80030ea <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0219 	bic.w	r2, r3, #25
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4922      	ldr	r1, [pc, #136]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe fc97 	bl	80019bc <HAL_GetTick>
 800308e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe fc93 	bl	80019bc <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e29d      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030a4:	4b1a      	ldr	r3, [pc, #104]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	f7fe fcb2 	bl	8001a18 <HAL_GetREVID>
 80030b4:	4602      	mov	r2, r0
 80030b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d80a      	bhi.n	80030d4 <HAL_RCC_OscConfig+0x250>
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	031b      	lsls	r3, r3, #12
 80030cc:	4910      	ldr	r1, [pc, #64]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
 80030d2:	e025      	b.n	8003120 <HAL_RCC_OscConfig+0x29c>
 80030d4:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	061b      	lsls	r3, r3, #24
 80030e2:	490b      	ldr	r1, [pc, #44]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
 80030e8:	e01a      	b.n	8003120 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a08      	ldr	r2, [pc, #32]	; (8003110 <HAL_RCC_OscConfig+0x28c>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fe fc61 	bl	80019bc <HAL_GetTick>
 80030fa:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030fc:	e00a      	b.n	8003114 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fe:	f7fe fc5d 	bl	80019bc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d903      	bls.n	8003114 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e267      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
 8003110:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003114:	4ba0      	ldr	r3, [pc, #640]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1ee      	bne.n	80030fe <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 808f 	beq.w	800324c <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800312e:	4b9a      	ldr	r3, [pc, #616]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003136:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003138:	4b97      	ldr	r3, [pc, #604]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 800313a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313c:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d007      	beq.n	8003154 <HAL_RCC_OscConfig+0x2d0>
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b18      	cmp	r3, #24
 8003148:	d12d      	bne.n	80031a6 <HAL_RCC_OscConfig+0x322>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d128      	bne.n	80031a6 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003154:	4b90      	ldr	r3, [pc, #576]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x2e8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e239      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800316c:	f7fe fc54 	bl	8001a18 <HAL_GetREVID>
 8003170:	4602      	mov	r2, r0
 8003172:	f241 0303 	movw	r3, #4099	; 0x1003
 8003176:	429a      	cmp	r2, r3
 8003178:	d80a      	bhi.n	8003190 <HAL_RCC_OscConfig+0x30c>
 800317a:	4b87      	ldr	r3, [pc, #540]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	069b      	lsls	r3, r3, #26
 8003188:	4983      	ldr	r1, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 800318a:	4313      	orrs	r3, r2
 800318c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800318e:	e05d      	b.n	800324c <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003190:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	497e      	ldr	r1, [pc, #504]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031a4:	e052      	b.n	800324c <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d035      	beq.n	800321a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031ae:	4b7a      	ldr	r3, [pc, #488]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a79      	ldr	r2, [pc, #484]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80031b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7fe fbff 	bl	80019bc <HAL_GetTick>
 80031be:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80031c2:	f7fe fbfb 	bl	80019bc <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e205      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031d4:	4b70      	ldr	r3, [pc, #448]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e0:	f7fe fc1a 	bl	8001a18 <HAL_GetREVID>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f241 0303 	movw	r3, #4099	; 0x1003
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d80a      	bhi.n	8003204 <HAL_RCC_OscConfig+0x380>
 80031ee:	4b6a      	ldr	r3, [pc, #424]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	069b      	lsls	r3, r3, #26
 80031fc:	4966      	ldr	r1, [pc, #408]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	604b      	str	r3, [r1, #4]
 8003202:	e023      	b.n	800324c <HAL_RCC_OscConfig+0x3c8>
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	061b      	lsls	r3, r3, #24
 8003212:	4961      	ldr	r1, [pc, #388]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003214:	4313      	orrs	r3, r2
 8003216:	60cb      	str	r3, [r1, #12]
 8003218:	e018      	b.n	800324c <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800321a:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a5e      	ldr	r2, [pc, #376]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003220:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fe fbc9 	bl	80019bc <HAL_GetTick>
 800322a:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800322e:	f7fe fbc5 	bl	80019bc <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1cf      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f0      	bne.n	800322e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d036      	beq.n	80032c6 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d019      	beq.n	8003294 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003260:	4b4d      	ldr	r3, [pc, #308]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	4a4c      	ldr	r2, [pc, #304]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe fba6 	bl	80019bc <HAL_GetTick>
 8003270:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003274:	f7fe fba2 	bl	80019bc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e1ac      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003286:	4b44      	ldr	r3, [pc, #272]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x3f0>
 8003292:	e018      	b.n	80032c6 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003294:	4b40      	ldr	r3, [pc, #256]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003298:	4a3f      	ldr	r2, [pc, #252]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a0:	f7fe fb8c 	bl	80019bc <HAL_GetTick>
 80032a4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a8:	f7fe fb88 	bl	80019bc <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e192      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032ba:	4b37      	ldr	r3, [pc, #220]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80032bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d036      	beq.n	8003340 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d019      	beq.n	800330e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032da:	4b2f      	ldr	r3, [pc, #188]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2e      	ldr	r2, [pc, #184]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 80032e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032e4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032e6:	f7fe fb69 	bl	80019bc <HAL_GetTick>
 80032ea:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032ee:	f7fe fb65 	bl	80019bc <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e16f      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0f0      	beq.n	80032ee <HAL_RCC_OscConfig+0x46a>
 800330c:	e018      	b.n	8003340 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a21      	ldr	r2, [pc, #132]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003318:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800331a:	f7fe fb4f 	bl	80019bc <HAL_GetTick>
 800331e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003322:	f7fe fb4b 	bl	80019bc <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e155      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003334:	4b18      	ldr	r3, [pc, #96]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f0      	bne.n	8003322 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8086 	beq.w	800345a <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800334e:	4b13      	ldr	r3, [pc, #76]	; (800339c <HAL_RCC_OscConfig+0x518>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <HAL_RCC_OscConfig+0x518>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335a:	f7fe fb2f 	bl	80019bc <HAL_GetTick>
 800335e:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003360:	e008      	b.n	8003374 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fe fb2b 	bl	80019bc <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b64      	cmp	r3, #100	; 0x64
 800336e:	d901      	bls.n	8003374 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e135      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003374:	4b09      	ldr	r3, [pc, #36]	; (800339c <HAL_RCC_OscConfig+0x518>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0f0      	beq.n	8003362 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x51c>
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a02      	ldr	r2, [pc, #8]	; (8003398 <HAL_RCC_OscConfig+0x514>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	e032      	b.n	80033fc <HAL_RCC_OscConfig+0x578>
 8003396:	bf00      	nop
 8003398:	58024400 	.word	0x58024400
 800339c:	58024800 	.word	0x58024800
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10c      	bne.n	80033c2 <HAL_RCC_OscConfig+0x53e>
 80033a8:	4b8f      	ldr	r3, [pc, #572]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a8e      	ldr	r2, [pc, #568]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	4b8c      	ldr	r3, [pc, #560]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b8:	4a8b      	ldr	r2, [pc, #556]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033ba:	f023 0304 	bic.w	r3, r3, #4
 80033be:	6713      	str	r3, [r2, #112]	; 0x70
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x578>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x560>
 80033ca:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ce:	4a86      	ldr	r2, [pc, #536]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6713      	str	r3, [r2, #112]	; 0x70
 80033d6:	4b84      	ldr	r3, [pc, #528]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a83      	ldr	r2, [pc, #524]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x578>
 80033e4:	4b80      	ldr	r3, [pc, #512]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	4a7f      	ldr	r2, [pc, #508]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	; 0x70
 80033f0:	4b7d      	ldr	r3, [pc, #500]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	4a7c      	ldr	r2, [pc, #496]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe fada 	bl	80019bc <HAL_GetTick>
 8003408:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe fad6 	bl	80019bc <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0de      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003422:	4b71      	ldr	r3, [pc, #452]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ee      	beq.n	800340c <HAL_RCC_OscConfig+0x588>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7fe fac4 	bl	80019bc <HAL_GetTick>
 8003434:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fe fac0 	bl	80019bc <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	; 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0c8      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800344e:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ee      	bne.n	8003438 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 80bd 	beq.w	80035de <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003464:	4b60      	ldr	r3, [pc, #384]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800346c:	2b18      	cmp	r3, #24
 800346e:	f000 80b4 	beq.w	80035da <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b02      	cmp	r3, #2
 8003478:	f040 8095 	bne.w	80035a6 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b5a      	ldr	r3, [pc, #360]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a59      	ldr	r2, [pc, #356]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003482:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fa98 	bl	80019bc <HAL_GetTick>
 800348c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fa94 	bl	80019bc <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e09e      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034a2:	4b51      	ldr	r3, [pc, #324]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ae:	4b4e      	ldr	r3, [pc, #312]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80034b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b2:	4b4e      	ldr	r3, [pc, #312]	; (80035ec <HAL_RCC_OscConfig+0x768>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	430a      	orrs	r2, r1
 80034c2:	4949      	ldr	r1, [pc, #292]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	628b      	str	r3, [r1, #40]	; 0x28
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	3b01      	subs	r3, #1
 80034ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	3b01      	subs	r3, #1
 80034d8:	025b      	lsls	r3, r3, #9
 80034da:	b29b      	uxth	r3, r3
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	3b01      	subs	r3, #1
 80034e4:	041b      	lsls	r3, r3, #16
 80034e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	3b01      	subs	r3, #1
 80034f2:	061b      	lsls	r3, r3, #24
 80034f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034f8:	493b      	ldr	r1, [pc, #236]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034fe:	4b3a      	ldr	r3, [pc, #232]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	4a39      	ldr	r2, [pc, #228]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003504:	f023 0301 	bic.w	r3, r3, #1
 8003508:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800350a:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800350c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800350e:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_RCC_OscConfig+0x76c>)
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003516:	00d2      	lsls	r2, r2, #3
 8003518:	4933      	ldr	r1, [pc, #204]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800351a:	4313      	orrs	r3, r2
 800351c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800351e:	4b32      	ldr	r3, [pc, #200]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f023 020c 	bic.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	492f      	ldr	r1, [pc, #188]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800352c:	4313      	orrs	r3, r2
 800352e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003530:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	f023 0202 	bic.w	r2, r3, #2
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	492a      	ldr	r1, [pc, #168]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800353e:	4313      	orrs	r3, r2
 8003540:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	4a28      	ldr	r2, [pc, #160]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003572:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 8003578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800357c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357e:	f7fe fa1d 	bl	80019bc <HAL_GetTick>
 8003582:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003586:	f7fe fa19 	bl	80019bc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e023      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x702>
 80035a4:	e01b      	b.n	80035de <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80035ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe fa03 	bl	80019bc <HAL_GetTick>
 80035b6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fe f9ff 	bl	80019bc <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e009      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_RCC_OscConfig+0x764>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f0      	bne.n	80035ba <HAL_RCC_OscConfig+0x736>
 80035d8:	e001      	b.n	80035de <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3728      	adds	r7, #40	; 0x28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	58024400 	.word	0x58024400
 80035ec:	fffffc0c 	.word	0xfffffc0c
 80035f0:	ffff0007 	.word	0xffff0007

080035f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e18d      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b8a      	ldr	r3, [pc, #552]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d910      	bls.n	8003638 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b87      	ldr	r3, [pc, #540]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	4985      	ldr	r1, [pc, #532]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b83      	ldr	r3, [pc, #524]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e175      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d010      	beq.n	8003666 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	4b7b      	ldr	r3, [pc, #492]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003650:	429a      	cmp	r2, r3
 8003652:	d908      	bls.n	8003666 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003654:	4b78      	ldr	r3, [pc, #480]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	4975      	ldr	r1, [pc, #468]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003662:	4313      	orrs	r3, r2
 8003664:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	4b70      	ldr	r3, [pc, #448]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800367e:	429a      	cmp	r2, r3
 8003680:	d908      	bls.n	8003694 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003682:	4b6d      	ldr	r3, [pc, #436]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	496a      	ldr	r1, [pc, #424]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003690:	4313      	orrs	r3, r2
 8003692:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b00      	cmp	r3, #0
 800369e:	d010      	beq.n	80036c2 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	699a      	ldr	r2, [r3, #24]
 80036a4:	4b64      	ldr	r3, [pc, #400]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d908      	bls.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036b0:	4b61      	ldr	r3, [pc, #388]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	495e      	ldr	r1, [pc, #376]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d010      	beq.n	80036f0 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	4b59      	ldr	r3, [pc, #356]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036da:	429a      	cmp	r2, r3
 80036dc:	d908      	bls.n	80036f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80036de:	4b56      	ldr	r3, [pc, #344]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4953      	ldr	r1, [pc, #332]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4b4d      	ldr	r3, [pc, #308]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	429a      	cmp	r2, r3
 800370a:	d908      	bls.n	800371e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b4a      	ldr	r3, [pc, #296]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f023 020f 	bic.w	r2, r3, #15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4947      	ldr	r1, [pc, #284]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 800371a:	4313      	orrs	r3, r2
 800371c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d055      	beq.n	80037d6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800372a:	4b43      	ldr	r3, [pc, #268]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4940      	ldr	r1, [pc, #256]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003738:	4313      	orrs	r3, r2
 800373a:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d107      	bne.n	8003754 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003744:	4b3c      	ldr	r3, [pc, #240]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d121      	bne.n	8003794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0e7      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d107      	bne.n	800376c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800375c:	4b36      	ldr	r3, [pc, #216]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d115      	bne.n	8003794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0db      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003774:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0cf      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003784:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0c7      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f023 0207 	bic.w	r2, r3, #7
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4925      	ldr	r1, [pc, #148]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fe f909 	bl	80019bc <HAL_GetTick>
 80037aa:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ae:	f7fe f905 	bl	80019bc <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e0af      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c4:	4b1c      	ldr	r3, [pc, #112]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d1eb      	bne.n	80037ae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d010      	beq.n	8003804 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d208      	bcs.n	8003804 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f2:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	f023 020f 	bic.w	r2, r3, #15
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	490e      	ldr	r1, [pc, #56]	; (8003838 <HAL_RCC_ClockConfig+0x244>)
 8003800:	4313      	orrs	r3, r2
 8003802:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d214      	bcs.n	800383c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 020f 	bic.w	r2, r3, #15
 800381a:	4906      	ldr	r1, [pc, #24]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b04      	ldr	r3, [pc, #16]	; (8003834 <HAL_RCC_ClockConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e077      	b.n	8003924 <HAL_RCC_ClockConfig+0x330>
 8003834:	52002000 	.word	0x52002000
 8003838:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d010      	beq.n	800386a <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	4b37      	ldr	r3, [pc, #220]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003854:	429a      	cmp	r2, r3
 8003856:	d208      	bcs.n	800386a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	4931      	ldr	r1, [pc, #196]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 8003866:	4313      	orrs	r3, r2
 8003868:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d010      	beq.n	8003898 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	4b2c      	ldr	r3, [pc, #176]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003882:	429a      	cmp	r2, r3
 8003884:	d208      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003886:	4b29      	ldr	r3, [pc, #164]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	4926      	ldr	r1, [pc, #152]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 8003894:	4313      	orrs	r3, r2
 8003896:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699a      	ldr	r2, [r3, #24]
 80038a8:	4b20      	ldr	r3, [pc, #128]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d208      	bcs.n	80038c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	491a      	ldr	r1, [pc, #104]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d010      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038de:	429a      	cmp	r2, r3
 80038e0:	d208      	bcs.n	80038f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80038e2:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	490f      	ldr	r1, [pc, #60]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038f4:	f000 f822 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80038f8:	4601      	mov	r1, r0
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <HAL_RCC_ClockConfig+0x338>)
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x33c>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa21 f303 	lsr.w	r3, r1, r3
 8003910:	4a08      	ldr	r2, [pc, #32]	; (8003934 <HAL_RCC_ClockConfig+0x340>)
 8003912:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003914:	4b08      	ldr	r3, [pc, #32]	; (8003938 <HAL_RCC_ClockConfig+0x344>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe f805 	bl	8001928 <HAL_InitTick>
 800391e:	4603      	mov	r3, r0
 8003920:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003922:	7afb      	ldrb	r3, [r7, #11]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	58024400 	.word	0x58024400
 8003930:	08009acc 	.word	0x08009acc
 8003934:	24000008 	.word	0x24000008
 8003938:	24000010 	.word	0x24000010

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003942:	4baf      	ldr	r3, [pc, #700]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800394a:	2b18      	cmp	r3, #24
 800394c:	f200 814e 	bhi.w	8003bec <HAL_RCC_GetSysClockFreq+0x2b0>
 8003950:	a201      	add	r2, pc, #4	; (adr r2, 8003958 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	080039bd 	.word	0x080039bd
 800395c:	08003bed 	.word	0x08003bed
 8003960:	08003bed 	.word	0x08003bed
 8003964:	08003bed 	.word	0x08003bed
 8003968:	08003bed 	.word	0x08003bed
 800396c:	08003bed 	.word	0x08003bed
 8003970:	08003bed 	.word	0x08003bed
 8003974:	08003bed 	.word	0x08003bed
 8003978:	080039e3 	.word	0x080039e3
 800397c:	08003bed 	.word	0x08003bed
 8003980:	08003bed 	.word	0x08003bed
 8003984:	08003bed 	.word	0x08003bed
 8003988:	08003bed 	.word	0x08003bed
 800398c:	08003bed 	.word	0x08003bed
 8003990:	08003bed 	.word	0x08003bed
 8003994:	08003bed 	.word	0x08003bed
 8003998:	080039e9 	.word	0x080039e9
 800399c:	08003bed 	.word	0x08003bed
 80039a0:	08003bed 	.word	0x08003bed
 80039a4:	08003bed 	.word	0x08003bed
 80039a8:	08003bed 	.word	0x08003bed
 80039ac:	08003bed 	.word	0x08003bed
 80039b0:	08003bed 	.word	0x08003bed
 80039b4:	08003bed 	.word	0x08003bed
 80039b8:	080039ef 	.word	0x080039ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039bc:	4b90      	ldr	r3, [pc, #576]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d009      	beq.n	80039dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80039c8:	4b8d      	ldr	r3, [pc, #564]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	08db      	lsrs	r3, r3, #3
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	4a8c      	ldr	r2, [pc, #560]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80039d4:	fa22 f303 	lsr.w	r3, r2, r3
 80039d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80039da:	e10a      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039dc:	4b89      	ldr	r3, [pc, #548]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80039de:	61bb      	str	r3, [r7, #24]
    break;
 80039e0:	e107      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80039e2:	4b89      	ldr	r3, [pc, #548]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80039e4:	61bb      	str	r3, [r7, #24]
    break;
 80039e6:	e104      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80039e8:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d0>)
 80039ea:	61bb      	str	r3, [r7, #24]
    break;
 80039ec:	e101      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ee:	4b84      	ldr	r3, [pc, #528]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80039f8:	4b81      	ldr	r3, [pc, #516]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a04:	4b7e      	ldr	r3, [pc, #504]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a0e:	4b7c      	ldr	r3, [pc, #496]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a12:	08db      	lsrs	r3, r3, #3
 8003a14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80da 	beq.w	8003be6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d05a      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x1b2>
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d302      	bcc.n	8003a42 <HAL_RCC_GetSysClockFreq+0x106>
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d078      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003a40:	e099      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a42:	4b6f      	ldr	r3, [pc, #444]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d02d      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	08db      	lsrs	r3, r3, #3
 8003a54:	f003 0303 	and.w	r3, r3, #3
 8003a58:	4a6a      	ldr	r2, [pc, #424]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	ee07 3a90 	vmov	s15, r3
 8003a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a80:	ee07 3a90 	vmov	s15, r3
 8003a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a88:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a8c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003c10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003aa8:	e087      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	ee07 3a90 	vmov	s15, r3
 8003ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003c14 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003abc:	4b50      	ldr	r3, [pc, #320]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac4:	ee07 3a90 	vmov	s15, r3
 8003ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003acc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ad0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003c10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aec:	e065      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003c18 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b00:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	ee07 3a90 	vmov	s15, r3
 8003b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b10:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b14:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003c10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b30:	e043      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	ee07 3a90 	vmov	s15, r3
 8003b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003b40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b44:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4c:	ee07 3a90 	vmov	s15, r3
 8003b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b54:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b58:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003c10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b74:	e021      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b80:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003c18 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b88:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b98:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003c10 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003ba0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bb8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	0a5b      	lsrs	r3, r3, #9
 8003bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bde:	ee17 3a90 	vmov	r3, s15
 8003be2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003be4:	e005      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
    break;
 8003bea:	e002      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003bee:	61bb      	str	r3, [r7, #24]
    break;
 8003bf0:	bf00      	nop
  }

  return sysclockfreq;
 8003bf2:	69bb      	ldr	r3, [r7, #24]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3724      	adds	r7, #36	; 0x24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	58024400 	.word	0x58024400
 8003c04:	03d09000 	.word	0x03d09000
 8003c08:	003d0900 	.word	0x003d0900
 8003c0c:	007a1200 	.word	0x007a1200
 8003c10:	46000000 	.word	0x46000000
 8003c14:	4c742400 	.word	0x4c742400
 8003c18:	4a742400 	.word	0x4a742400
 8003c1c:	4af42400 	.word	0x4af42400

08003c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c24:	f001 f9e2 	bl	8004fec <HAL_RCCEx_GetD1SysClockFreq>
 8003c28:	4601      	mov	r1, r0
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_RCC_GetHCLKFreq+0x2c>)
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	4a07      	ldr	r2, [pc, #28]	; (8003c50 <HAL_RCC_GetHCLKFreq+0x30>)
 8003c34:	5cd3      	ldrb	r3, [r2, r3]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	fa21 f303 	lsr.w	r3, r1, r3
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x34>)
 8003c40:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x34>)
 8003c44:	681b      	ldr	r3, [r3, #0]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	58024400 	.word	0x58024400
 8003c50:	08009acc 	.word	0x08009acc
 8003c54:	2400000c 	.word	0x2400000c

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c5c:	f7ff ffe0 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4a04      	ldr	r2, [pc, #16]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	f003 031f 	and.w	r3, r3, #31
 8003c74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	08009acc 	.word	0x08009acc

08003c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003c88:	f7ff ffca 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c8c:	4601      	mov	r1, r0
 8003c8e:	4b06      	ldr	r3, [pc, #24]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	58024400 	.word	0x58024400
 8003cac:	08009acc 	.word	0x08009acc

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cb8:	2300      	movs	r3, #0
 8003cba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03d      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd4:	d013      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cda:	d802      	bhi.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003ce0:	e01f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003ce8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cec:	d01c      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003cee:	e018      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cf0:	4baf      	ldr	r3, [pc, #700]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	4aae      	ldr	r2, [pc, #696]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003cfc:	e015      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	3304      	adds	r3, #4
 8003d02:	2102      	movs	r1, #2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f001 f98d 	bl	8005024 <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d0e:	e00c      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3324      	adds	r3, #36	; 0x24
 8003d14:	2102      	movs	r1, #2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f001 fa36 	bl	8005188 <RCCEx_PLL3_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d20:	e003      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
      break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d109      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d30:	4b9f      	ldr	r3, [pc, #636]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d3c:	499c      	ldr	r1, [pc, #624]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	650b      	str	r3, [r1, #80]	; 0x50
 8003d42:	e001      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	7dfb      	ldrb	r3, [r7, #23]
 8003d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d03d      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d826      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003d5c:	a201      	add	r2, pc, #4	; (adr r2, 8003d64 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d62:	bf00      	nop
 8003d64:	08003d79 	.word	0x08003d79
 8003d68:	08003d87 	.word	0x08003d87
 8003d6c:	08003d99 	.word	0x08003d99
 8003d70:	08003db1 	.word	0x08003db1
 8003d74:	08003db1 	.word	0x08003db1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d78:	4b8d      	ldr	r3, [pc, #564]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	4a8c      	ldr	r2, [pc, #560]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d84:	e015      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 f949 	bl	8005024 <RCCEx_PLL2_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d96:	e00c      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	3324      	adds	r3, #36	; 0x24
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f001 f9f2 	bl	8005188 <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	75fb      	strb	r3, [r7, #23]
      break;
 8003dae:	e000      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003db2:	7dfb      	ldrb	r3, [r7, #23]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003db8:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbc:	f023 0207 	bic.w	r2, r3, #7
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	497a      	ldr	r1, [pc, #488]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8003dca:	e001      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dcc:	7dfb      	ldrb	r3, [r7, #23]
 8003dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d03e      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	d01c      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d804      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d00d      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003df0:	e01e      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003df2:	2bc0      	cmp	r3, #192	; 0xc0
 8003df4:	d01f      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfa:	d01e      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dfc:	e018      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfe:	4b6c      	ldr	r3, [pc, #432]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e0a:	e017      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2100      	movs	r1, #0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f001 f906 	bl	8005024 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e1c:	e00e      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3324      	adds	r3, #36	; 0x24
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f001 f9af 	bl	8005188 <RCCEx_PLL3_Config>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e2e:	e005      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
      break;
 8003e34:	e002      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003e36:	bf00      	nop
 8003e38:	e000      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e3c:	7dfb      	ldrb	r3, [r7, #23]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d109      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003e42:	4b5b      	ldr	r3, [pc, #364]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e46:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4e:	4958      	ldr	r1, [pc, #352]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	650b      	str	r3, [r1, #80]	; 0x50
 8003e54:	e001      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	7dfb      	ldrb	r3, [r7, #23]
 8003e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d044      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e70:	d01f      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e76:	d805      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e80:	d00e      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003e82:	e01f      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e88:	d01f      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e8e:	d01e      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e90:	e018      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e92:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	4a46      	ldr	r2, [pc, #280]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e9e:	e017      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 f8bc 	bl	8005024 <RCCEx_PLL2_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003eb0:	e00e      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 f965 	bl	8005188 <RCCEx_PLL3_Config>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ec2:	e005      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ed6:	4b36      	ldr	r3, [pc, #216]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ee4:	4932      	ldr	r1, [pc, #200]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	658b      	str	r3, [r1, #88]	; 0x58
 8003eea:	e001      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7dfb      	ldrb	r3, [r7, #23]
 8003eee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d044      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f06:	d01f      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f0c:	d805      	bhi.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003f12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f16:	d00e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f18:	e01f      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003f1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f1e:	d01f      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f24:	d01e      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f26:	e018      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f34:	e017      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f001 f871 	bl	8005024 <RCCEx_PLL2_Config>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f46:	e00e      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 f91a 	bl	8005188 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f58:	e005      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f5e:	e002      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f60:	bf00      	nop
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f7a:	490d      	ldr	r1, [pc, #52]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	658b      	str	r3, [r1, #88]	; 0x58
 8003f80:	e001      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	7dfb      	ldrb	r3, [r7, #23]
 8003f84:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d035      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d00c      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003f9a:	2b10      	cmp	r3, #16
 8003f9c:	d802      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01b      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003fa2:	e017      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d00c      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003fa8:	2b30      	cmp	r3, #48	; 0x30
 8003faa:	d018      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003fac:	e012      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003fae:	bf00      	nop
 8003fb0:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4baf      	ldr	r3, [pc, #700]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4aae      	ldr	r2, [pc, #696]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003fc0:	e00e      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 f82b 	bl	8005024 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003fd2:	e005      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd8:	e002      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e000      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d109      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fe6:	4ba3      	ldr	r3, [pc, #652]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	49a0      	ldr	r1, [pc, #640]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003ff8:	e001      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d042      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	d01f      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004018:	d805      	bhi.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800401e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004022:	d00e      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004024:	e01f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004026:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800402a:	d01f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800402c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004030:	d01e      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004032:	e018      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004034:	4b8f      	ldr	r3, [pc, #572]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4a8e      	ldr	r2, [pc, #568]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800403a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004040:	e017      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ffeb 	bl	8005024 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004052:	e00e      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3324      	adds	r3, #36	; 0x24
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f001 f894 	bl	8005188 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004064:	e005      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	75fb      	strb	r3, [r7, #23]
      break;
 800406a:	e002      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004070:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d109      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004078:	4b7e      	ldr	r3, [pc, #504]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004084:	497b      	ldr	r1, [pc, #492]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004086:	4313      	orrs	r3, r2
 8004088:	650b      	str	r3, [r1, #80]	; 0x50
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d042      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a4:	d01b      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80040a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040aa:	d805      	bhi.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d022      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80040b6:	e01b      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80040b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040bc:	d01d      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80040be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040c2:	d01c      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80040c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040c8:	d01b      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80040ca:	e011      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 ffa6 	bl	8005024 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040dc:	e012      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3324      	adds	r3, #36	; 0x24
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f84f 	bl	8005188 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800410a:	4b5a      	ldr	r3, [pc, #360]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800410c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800410e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004116:	4957      	ldr	r1, [pc, #348]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	650b      	str	r3, [r1, #80]	; 0x50
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d044      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004138:	d01b      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800413a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413e:	d805      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004140:	2b00      	cmp	r3, #0
 8004142:	d022      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004148:	d00a      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800414a:	e01b      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d01d      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004156:	d01c      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800415c:	d01b      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800415e:	e011      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	2101      	movs	r1, #1
 8004166:	4618      	mov	r0, r3
 8004168:	f000 ff5c 	bl	8005024 <RCCEx_PLL2_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004170:	e012      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3324      	adds	r3, #36	; 0x24
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f805 	bl	8005188 <RCCEx_PLL3_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004182:	e009      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	75fb      	strb	r3, [r7, #23]
      break;
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800418a:	bf00      	nop
 800418c:	e004      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800418e:	bf00      	nop
 8004190:	e002      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004192:	bf00      	nop
 8004194:	e000      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004198:	7dfb      	ldrb	r3, [r7, #23]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800419e:	4b35      	ldr	r3, [pc, #212]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041ac:	4931      	ldr	r1, [pc, #196]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	658b      	str	r3, [r1, #88]	; 0x58
 80041b2:	e001      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d02d      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041cc:	d005      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80041ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d2:	d009      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80041d8:	e00f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041da:	4b26      	ldr	r3, [pc, #152]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	4a25      	ldr	r2, [pc, #148]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041e6:	e00c      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 ff18 	bl	8005024 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
      break;
 80041fe:	e000      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004202:	7dfb      	ldrb	r3, [r7, #23]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800420a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004214:	4917      	ldr	r1, [pc, #92]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	650b      	str	r3, [r1, #80]	; 0x50
 800421a:	e001      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d035      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	2b03      	cmp	r3, #3
 8004232:	d81b      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	08004279 	.word	0x08004279
 8004240:	0800424d 	.word	0x0800424d
 8004244:	0800425b 	.word	0x0800425b
 8004248:	08004279 	.word	0x08004279
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424c:	4b09      	ldr	r3, [pc, #36]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800424e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004258:	e00f      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3304      	adds	r3, #4
 800425e:	2102      	movs	r1, #2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fedf 	bl	8005024 <RCCEx_PLL2_Config>
 8004266:	4603      	mov	r3, r0
 8004268:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800426a:	e006      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	75fb      	strb	r3, [r7, #23]
      break;
 8004270:	e003      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004272:	bf00      	nop
 8004274:	58024400 	.word	0x58024400
      break;
 8004278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004280:	4bba      	ldr	r3, [pc, #744]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	f023 0203 	bic.w	r2, r3, #3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428c:	49b7      	ldr	r1, [pc, #732]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800428e:	4313      	orrs	r3, r2
 8004290:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004292:	e001      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8086 	beq.w	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042a6:	4bb2      	ldr	r3, [pc, #712]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4ab1      	ldr	r2, [pc, #708]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042b2:	f7fd fb83 	bl	80019bc <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042b8:	e009      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ba:	f7fd fb7f 	bl	80019bc <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d902      	bls.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	75fb      	strb	r3, [r7, #23]
        break;
 80042cc:	e005      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80042ce:	4ba8      	ldr	r3, [pc, #672]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ef      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d166      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042e0:	4ba2      	ldr	r3, [pc, #648]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80042ea:	4053      	eors	r3, r2
 80042ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d013      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f4:	4b9d      	ldr	r3, [pc, #628]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042fe:	4b9b      	ldr	r3, [pc, #620]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a9a      	ldr	r2, [pc, #616]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800430a:	4b98      	ldr	r3, [pc, #608]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800430c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430e:	4a97      	ldr	r2, [pc, #604]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004316:	4a95      	ldr	r2, [pc, #596]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004326:	d115      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fd fb48 	bl	80019bc <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432e:	e00b      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fd fb44 	bl	80019bc <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d902      	bls.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	75fb      	strb	r3, [r7, #23]
            break;
 8004346:	e005      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004348:	4b88      	ldr	r3, [pc, #544]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ed      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d126      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004368:	d10d      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800436a:	4b80      	ldr	r3, [pc, #512]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004378:	0919      	lsrs	r1, r3, #4
 800437a:	4b7e      	ldr	r3, [pc, #504]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800437c:	400b      	ands	r3, r1
 800437e:	497b      	ldr	r1, [pc, #492]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]
 8004384:	e005      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004386:	4b79      	ldr	r3, [pc, #484]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4a78      	ldr	r2, [pc, #480]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800438c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004390:	6113      	str	r3, [r2, #16]
 8004392:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004394:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800439c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a0:	4972      	ldr	r1, [pc, #456]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	670b      	str	r3, [r1, #112]	; 0x70
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	75bb      	strb	r3, [r7, #22]
 80043ac:	e001      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	7dfb      	ldrb	r3, [r7, #23]
 80043b0:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d07d      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c2:	2b28      	cmp	r3, #40	; 0x28
 80043c4:	d866      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	0800449b 	.word	0x0800449b
 80043d0:	08004495 	.word	0x08004495
 80043d4:	08004495 	.word	0x08004495
 80043d8:	08004495 	.word	0x08004495
 80043dc:	08004495 	.word	0x08004495
 80043e0:	08004495 	.word	0x08004495
 80043e4:	08004495 	.word	0x08004495
 80043e8:	08004495 	.word	0x08004495
 80043ec:	08004471 	.word	0x08004471
 80043f0:	08004495 	.word	0x08004495
 80043f4:	08004495 	.word	0x08004495
 80043f8:	08004495 	.word	0x08004495
 80043fc:	08004495 	.word	0x08004495
 8004400:	08004495 	.word	0x08004495
 8004404:	08004495 	.word	0x08004495
 8004408:	08004495 	.word	0x08004495
 800440c:	08004483 	.word	0x08004483
 8004410:	08004495 	.word	0x08004495
 8004414:	08004495 	.word	0x08004495
 8004418:	08004495 	.word	0x08004495
 800441c:	08004495 	.word	0x08004495
 8004420:	08004495 	.word	0x08004495
 8004424:	08004495 	.word	0x08004495
 8004428:	08004495 	.word	0x08004495
 800442c:	0800449b 	.word	0x0800449b
 8004430:	08004495 	.word	0x08004495
 8004434:	08004495 	.word	0x08004495
 8004438:	08004495 	.word	0x08004495
 800443c:	08004495 	.word	0x08004495
 8004440:	08004495 	.word	0x08004495
 8004444:	08004495 	.word	0x08004495
 8004448:	08004495 	.word	0x08004495
 800444c:	0800449b 	.word	0x0800449b
 8004450:	08004495 	.word	0x08004495
 8004454:	08004495 	.word	0x08004495
 8004458:	08004495 	.word	0x08004495
 800445c:	08004495 	.word	0x08004495
 8004460:	08004495 	.word	0x08004495
 8004464:	08004495 	.word	0x08004495
 8004468:	08004495 	.word	0x08004495
 800446c:	0800449b 	.word	0x0800449b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3304      	adds	r3, #4
 8004474:	2101      	movs	r1, #1
 8004476:	4618      	mov	r0, r3
 8004478:	f000 fdd4 	bl	8005024 <RCCEx_PLL2_Config>
 800447c:	4603      	mov	r3, r0
 800447e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004480:	e00c      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3324      	adds	r3, #36	; 0x24
 8004486:	2101      	movs	r1, #1
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fe7d 	bl	8005188 <RCCEx_PLL3_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004492:	e003      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	e000      	b.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800449a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449c:	7dfb      	ldrb	r3, [r7, #23]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044a2:	4b32      	ldr	r3, [pc, #200]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	492f      	ldr	r1, [pc, #188]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	654b      	str	r3, [r1, #84]	; 0x54
 80044b4:	e001      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d037      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d820      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004517 	.word	0x08004517
 80044d8:	080044ed 	.word	0x080044ed
 80044dc:	080044ff 	.word	0x080044ff
 80044e0:	08004517 	.word	0x08004517
 80044e4:	08004517 	.word	0x08004517
 80044e8:	08004517 	.word	0x08004517
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3304      	adds	r3, #4
 80044f0:	2101      	movs	r1, #1
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fd96 	bl	8005024 <RCCEx_PLL2_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80044fc:	e00c      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3324      	adds	r3, #36	; 0x24
 8004502:	2101      	movs	r1, #1
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fe3f 	bl	8005188 <RCCEx_PLL3_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800450e:	e003      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	75fb      	strb	r3, [r7, #23]
      break;
 8004514:	e000      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f023 0207 	bic.w	r2, r3, #7
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800452a:	4910      	ldr	r1, [pc, #64]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	654b      	str	r3, [r1, #84]	; 0x54
 8004530:	e001      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d040      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	2b05      	cmp	r3, #5
 800454a:	d827      	bhi.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	080045a3 	.word	0x080045a3
 8004558:	08004579 	.word	0x08004579
 800455c:	0800458b 	.word	0x0800458b
 8004560:	080045a3 	.word	0x080045a3
 8004564:	080045a3 	.word	0x080045a3
 8004568:	080045a3 	.word	0x080045a3
 800456c:	58024400 	.word	0x58024400
 8004570:	58024800 	.word	0x58024800
 8004574:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	2101      	movs	r1, #1
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fd50 	bl	8005024 <RCCEx_PLL2_Config>
 8004584:	4603      	mov	r3, r0
 8004586:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004588:	e00c      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3324      	adds	r3, #36	; 0x24
 800458e:	2101      	movs	r1, #1
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fdf9 	bl	8005188 <RCCEx_PLL3_Config>
 8004596:	4603      	mov	r3, r0
 8004598:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800459a:	e003      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	75fb      	strb	r3, [r7, #23]
      break;
 80045a0:	e000      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80045a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045aa:	4bb3      	ldr	r3, [pc, #716]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ae:	f023 0207 	bic.w	r2, r3, #7
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b8:	49af      	ldr	r1, [pc, #700]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	658b      	str	r3, [r1, #88]	; 0x58
 80045be:	e001      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0320 	and.w	r3, r3, #32
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d044      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045da:	d01b      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80045dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045e0:	d805      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d022      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80045e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ea:	d00a      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80045ec:	e01b      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80045ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045f2:	d01d      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80045f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f8:	d01c      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80045fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80045fe:	d01b      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004600:	e011      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3304      	adds	r3, #4
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fd0b 	bl	8005024 <RCCEx_PLL2_Config>
 800460e:	4603      	mov	r3, r0
 8004610:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004612:	e012      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3324      	adds	r3, #36	; 0x24
 8004618:	2102      	movs	r1, #2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fdb4 	bl	8005188 <RCCEx_PLL3_Config>
 8004620:	4603      	mov	r3, r0
 8004622:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004624:	e009      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
      break;
 800462a:	e006      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800462c:	bf00      	nop
 800462e:	e004      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004630:	bf00      	nop
 8004632:	e002      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004634:	bf00      	nop
 8004636:	e000      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800463a:	7dfb      	ldrb	r3, [r7, #23]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004640:	4b8d      	ldr	r3, [pc, #564]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004644:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800464e:	498a      	ldr	r1, [pc, #552]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	654b      	str	r3, [r1, #84]	; 0x54
 8004654:	e001      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	7dfb      	ldrb	r3, [r7, #23]
 8004658:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004662:	2b00      	cmp	r3, #0
 8004664:	d044      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d01b      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d805      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004682:	e01b      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004688:	d01d      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800468a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800468e:	d01c      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004694:	d01b      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004696:	e011      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2100      	movs	r1, #0
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fcc0 	bl	8005024 <RCCEx_PLL2_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046a8:	e012      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3324      	adds	r3, #36	; 0x24
 80046ae:	2102      	movs	r1, #2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fd69 	bl	8005188 <RCCEx_PLL3_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80046ba:	e009      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
      break;
 80046c0:	e006      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046c2:	bf00      	nop
 80046c4:	e004      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046c6:	bf00      	nop
 80046c8:	e002      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046ca:	bf00      	nop
 80046cc:	e000      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80046ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046d6:	4b68      	ldr	r3, [pc, #416]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e4:	4964      	ldr	r1, [pc, #400]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	658b      	str	r3, [r1, #88]	; 0x58
 80046ea:	e001      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d044      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004706:	d01b      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470c:	d805      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800470e:	2b00      	cmp	r3, #0
 8004710:	d022      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004718:	e01b      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800471a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800471e:	d01d      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004720:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004724:	d01c      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8004726:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800472a:	d01b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800472c:	e011      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fc75 	bl	8005024 <RCCEx_PLL2_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800473e:	e012      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fd1e 	bl	8005188 <RCCEx_PLL3_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004750:	e009      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
      break;
 8004756:	e006      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004758:	bf00      	nop
 800475a:	e004      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800475c:	bf00      	nop
 800475e:	e002      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004760:	bf00      	nop
 8004762:	e000      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004766:	7dfb      	ldrb	r3, [r7, #23]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800476c:	4b42      	ldr	r3, [pc, #264]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477a:	493f      	ldr	r1, [pc, #252]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	658b      	str	r3, [r1, #88]	; 0x58
 8004780:	e001      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01b      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d10b      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3324      	adds	r3, #36	; 0x24
 80047a2:	2102      	movs	r1, #2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fcef 	bl	8005188 <RCCEx_PLL3_Config>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	75bb      	strb	r3, [r7, #22]
 80047b4:	e009      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047b6:	4b30      	ldr	r3, [pc, #192]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c4:	492c      	ldr	r1, [pc, #176]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0310 	and.w	r3, r3, #16
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d01b      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e0:	d10b      	bne.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3324      	adds	r3, #36	; 0x24
 80047e6:	2102      	movs	r1, #2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fccd 	bl	8005188 <RCCEx_PLL3_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00c      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	75bb      	strb	r3, [r7, #22]
 80047f8:	e009      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fa:	4b1f      	ldr	r3, [pc, #124]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004808:	491b      	ldr	r1, [pc, #108]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800480a:	4313      	orrs	r3, r2
 800480c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d032      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d00d      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800482a:	d016      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d111      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fbf4 	bl	8005024 <RCCEx_PLL2_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004840:	e00c      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	3324      	adds	r3, #36	; 0x24
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fc9d 	bl	8005188 <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
      break;
 8004858:	e000      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 800485a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485c:	7dfb      	ldrb	r3, [r7, #23]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10c      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004870:	4901      	ldr	r1, [pc, #4]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004872:	4313      	orrs	r3, r2
 8004874:	658b      	str	r3, [r1, #88]	; 0x58
 8004876:	e003      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004878:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d02f      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004892:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004896:	d00c      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004898:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800489c:	d015      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a2:	d10f      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048a4:	4b79      	ldr	r3, [pc, #484]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a8:	4a78      	ldr	r2, [pc, #480]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80048b0:	e00c      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3324      	adds	r3, #36	; 0x24
 80048b6:	2101      	movs	r1, #1
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 fc65 	bl	8005188 <RCCEx_PLL3_Config>
 80048be:	4603      	mov	r3, r0
 80048c0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80048c2:	e003      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
      break;
 80048c8:	e000      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 80048ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048d2:	4b6e      	ldr	r3, [pc, #440]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048e0:	496a      	ldr	r1, [pc, #424]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	654b      	str	r3, [r1, #84]	; 0x54
 80048e6:	e001      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e8:	7dfb      	ldrb	r3, [r7, #23]
 80048ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d029      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d007      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004906:	e00f      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004908:	4b60      	ldr	r3, [pc, #384]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	4a5f      	ldr	r2, [pc, #380]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800490e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004914:	e00b      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	2102      	movs	r1, #2
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fb81 	bl	8005024 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004926:	e002      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	75fb      	strb	r3, [r7, #23]
      break;
 800492c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800492e:	7dfb      	ldrb	r3, [r7, #23]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d109      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004934:	4b55      	ldr	r3, [pc, #340]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004940:	4952      	ldr	r1, [pc, #328]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004942:	4313      	orrs	r3, r2
 8004944:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004946:	e001      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004948:	7dfb      	ldrb	r3, [r7, #23]
 800494a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3324      	adds	r3, #36	; 0x24
 800495c:	2102      	movs	r1, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fc12 	bl	8005188 <RCCEx_PLL3_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02f      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004982:	d00c      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004988:	d802      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d011      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800498e:	e00d      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004994:	d00f      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499a:	d00e      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800499e:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a2:	4a3a      	ldr	r2, [pc, #232]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80049aa:	e007      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	75fb      	strb	r3, [r7, #23]
      break;
 80049b0:	e004      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 80049ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049c2:	4b32      	ldr	r3, [pc, #200]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049ce:	492f      	ldr	r1, [pc, #188]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	654b      	str	r3, [r1, #84]	; 0x54
 80049d4:	e001      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d008      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049e6:	4b29      	ldr	r3, [pc, #164]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f2:	4926      	ldr	r1, [pc, #152]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d009      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a04:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a12:	491e      	ldr	r1, [pc, #120]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a24:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a30:	4916      	ldr	r1, [pc, #88]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	4a11      	ldr	r2, [pc, #68]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a48:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a4c:	6113      	str	r3, [r2, #16]
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a50:	691a      	ldr	r2, [r3, #16]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	da08      	bge.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a72:	4906      	ldr	r1, [pc, #24]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004a78:	7dbb      	ldrb	r3, [r7, #22]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	58024400 	.word	0x58024400

08004a90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a94:	f7ff f8c4 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8004a98:	4601      	mov	r1, r0
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004aa6:	5cd3      	ldrb	r3, [r2, r3]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	58024400 	.word	0x58024400
 8004ab8:	08009acc 	.word	0x08009acc

08004abc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ac4:	4b9d      	ldr	r3, [pc, #628]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004ace:	4b9b      	ldr	r3, [pc, #620]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	0b1b      	lsrs	r3, r3, #12
 8004ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad8:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004ada:	4b98      	ldr	r3, [pc, #608]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004ae4:	4b95      	ldr	r3, [pc, #596]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	fb02 f303 	mul.w	r3, r2, r3
 8004af4:	ee07 3a90 	vmov	s15, r3
 8004af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 810a 	beq.w	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d05a      	beq.n	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d302      	bcc.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d078      	beq.n	8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004b16:	e099      	b.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b18:	4b88      	ldr	r3, [pc, #544]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02d      	beq.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b24:	4b85      	ldr	r3, [pc, #532]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	4a84      	ldr	r2, [pc, #528]	; (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b7b      	ldr	r3, [pc, #492]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b7e:	e087      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b6a      	ldr	r3, [pc, #424]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bc2:	e065      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd6:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c06:	e043      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b48      	ldr	r3, [pc, #288]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c4a:	e021      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5e:	4b37      	ldr	r3, [pc, #220]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004c90:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb6:	ee17 2a90 	vmov	r2, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce4:	ee17 2a90 	vmov	r2, s15
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	0e1b      	lsrs	r3, r3, #24
 8004cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d12:	ee17 2a90 	vmov	r2, s15
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d1a:	e008      	b.n	8004d2e <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	3724      	adds	r7, #36	; 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	03d09000 	.word	0x03d09000
 8004d44:	46000000 	.word	0x46000000
 8004d48:	4c742400 	.word	0x4c742400
 8004d4c:	4a742400 	.word	0x4a742400
 8004d50:	4af42400 	.word	0x4af42400

08004d54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b089      	sub	sp, #36	; 0x24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d5c:	4b9d      	ldr	r3, [pc, #628]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004d66:	4b9b      	ldr	r3, [pc, #620]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004d72:	4b98      	ldr	r3, [pc, #608]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004d7c:	4b95      	ldr	r3, [pc, #596]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d80:	08db      	lsrs	r3, r3, #3
 8004d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 810a 	beq.w	8004fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d05a      	beq.n	8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d302      	bcc.n	8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d078      	beq.n	8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004dae:	e099      	b.n	8004ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db0:	4b88      	ldr	r3, [pc, #544]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0320 	and.w	r3, r3, #32
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d02d      	beq.n	8004e18 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dbc:	4b85      	ldr	r3, [pc, #532]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	08db      	lsrs	r3, r3, #3
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	4a84      	ldr	r2, [pc, #528]	; (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dcc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	ee07 3a90 	vmov	s15, r3
 8004dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	ee07 3a90 	vmov	s15, r3
 8004dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de6:	4b7b      	ldr	r3, [pc, #492]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e12:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e16:	e087      	b.n	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e5a:	e065      	b.n	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e6e:	4b59      	ldr	r3, [pc, #356]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e9e:	e043      	b.n	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb2:	4b48      	ldr	r3, [pc, #288]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eba:	ee07 3a90 	vmov	s15, r3
 8004ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ec6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ede:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ee2:	e021      	b.n	8004f28 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004f28:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	0a5b      	lsrs	r3, r3, #9
 8004f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f4e:	ee17 2a90 	vmov	r2, s15
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004f56:	4b1f      	ldr	r3, [pc, #124]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f7c:	ee17 2a90 	vmov	r2, s15
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	0e1b      	lsrs	r3, r3, #24
 8004f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004faa:	ee17 2a90 	vmov	r2, s15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
}
 8004fc6:	bf00      	nop
 8004fc8:	3724      	adds	r7, #36	; 0x24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	58024400 	.word	0x58024400
 8004fd8:	03d09000 	.word	0x03d09000
 8004fdc:	46000000 	.word	0x46000000
 8004fe0:	4c742400 	.word	0x4c742400
 8004fe4:	4a742400 	.word	0x4a742400
 8004fe8:	4af42400 	.word	0x4af42400

08004fec <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ff0:	f7fe fca4 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	0a1b      	lsrs	r3, r3, #8
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	4a06      	ldr	r2, [pc, #24]	; (800501c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005002:	5cd3      	ldrb	r3, [r2, r3]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	fa21 f303 	lsr.w	r3, r1, r3
 800500c:	4a04      	ldr	r2, [pc, #16]	; (8005020 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800500e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005010:	4b03      	ldr	r3, [pc, #12]	; (8005020 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005012:	681b      	ldr	r3, [r3, #0]
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	58024400 	.word	0x58024400
 800501c:	08009acc 	.word	0x08009acc
 8005020:	24000008 	.word	0x24000008

08005024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005032:	4b53      	ldr	r3, [pc, #332]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b03      	cmp	r3, #3
 800503c:	d101      	bne.n	8005042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e099      	b.n	8005176 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005042:	4b4f      	ldr	r3, [pc, #316]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a4e      	ldr	r2, [pc, #312]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005048:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800504c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800504e:	f7fc fcb5 	bl	80019bc <HAL_GetTick>
 8005052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005054:	e008      	b.n	8005068 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005056:	f7fc fcb1 	bl	80019bc <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e086      	b.n	8005176 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005068:	4b45      	ldr	r3, [pc, #276]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f0      	bne.n	8005056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005074:	4b42      	ldr	r3, [pc, #264]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	031b      	lsls	r3, r3, #12
 8005082:	493f      	ldr	r1, [pc, #252]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	628b      	str	r3, [r1, #40]	; 0x28
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	3b01      	subs	r3, #1
 800508e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	3b01      	subs	r3, #1
 8005098:	025b      	lsls	r3, r3, #9
 800509a:	b29b      	uxth	r3, r3
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	041b      	lsls	r3, r3, #16
 80050a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80050aa:	431a      	orrs	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80050b8:	4931      	ldr	r1, [pc, #196]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80050be:	4b30      	ldr	r3, [pc, #192]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	492d      	ldr	r1, [pc, #180]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050d0:	4b2b      	ldr	r3, [pc, #172]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	f023 0220 	bic.w	r2, r3, #32
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4928      	ldr	r1, [pc, #160]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	4a26      	ldr	r2, [pc, #152]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050e8:	f023 0310 	bic.w	r3, r3, #16
 80050ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050ee:	4b24      	ldr	r3, [pc, #144]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <RCCEx_PLL2_Config+0x160>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69d2      	ldr	r2, [r2, #28]
 80050fa:	00d2      	lsls	r2, r2, #3
 80050fc:	4920      	ldr	r1, [pc, #128]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005102:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005108:	f043 0310 	orr.w	r3, r3, #16
 800510c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800511a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800511e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005120:	e00f      	b.n	8005142 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d106      	bne.n	8005136 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005128:	4b15      	ldr	r3, [pc, #84]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800512e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005132:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005134:	e005      	b.n	8005142 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005136:	4b12      	ldr	r3, [pc, #72]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	4a11      	ldr	r2, [pc, #68]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800513c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005140:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a0e      	ldr	r2, [pc, #56]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 8005148:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800514c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800514e:	f7fc fc35 	bl	80019bc <HAL_GetTick>
 8005152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005154:	e008      	b.n	8005168 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005156:	f7fc fc31 	bl	80019bc <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e006      	b.n	8005176 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <RCCEx_PLL2_Config+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	58024400 	.word	0x58024400
 8005184:	ffff0007 	.word	0xffff0007

08005188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005196:	4b53      	ldr	r3, [pc, #332]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d101      	bne.n	80051a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e099      	b.n	80052da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051a6:	4b4f      	ldr	r3, [pc, #316]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4e      	ldr	r2, [pc, #312]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b2:	f7fc fc03 	bl	80019bc <HAL_GetTick>
 80051b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051b8:	e008      	b.n	80051cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80051ba:	f7fc fbff 	bl	80019bc <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e086      	b.n	80052da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f0      	bne.n	80051ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051d8:	4b42      	ldr	r3, [pc, #264]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	051b      	lsls	r3, r3, #20
 80051e6:	493f      	ldr	r1, [pc, #252]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	628b      	str	r3, [r1, #40]	; 0x28
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	025b      	lsls	r3, r3, #9
 80051fe:	b29b      	uxth	r3, r3
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	3b01      	subs	r3, #1
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	3b01      	subs	r3, #1
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800521c:	4931      	ldr	r1, [pc, #196]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800521e:	4313      	orrs	r3, r2
 8005220:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005226:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	492d      	ldr	r1, [pc, #180]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005234:	4b2b      	ldr	r3, [pc, #172]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	4928      	ldr	r1, [pc, #160]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005242:	4313      	orrs	r3, r2
 8005244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005246:	4b27      	ldr	r3, [pc, #156]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800524c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005256:	4b24      	ldr	r3, [pc, #144]	; (80052e8 <RCCEx_PLL3_Config+0x160>)
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	69d2      	ldr	r2, [r2, #28]
 800525e:	00d2      	lsls	r2, r2, #3
 8005260:	4920      	ldr	r1, [pc, #128]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005262:	4313      	orrs	r3, r2
 8005264:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800527e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005284:	e00f      	b.n	80052a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d106      	bne.n	800529a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 8005292:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005296:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005298:	e005      	b.n	80052a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800529a:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b2:	f7fc fb83 	bl	80019bc <HAL_GetTick>
 80052b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052b8:	e008      	b.n	80052cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80052ba:	f7fc fb7f 	bl	80019bc <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052cc:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <RCCEx_PLL3_Config+0x15c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	58024400 	.word	0x58024400
 80052e8:	ffff0007 	.word	0xffff0007

080052ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e01d      	b.n	800533a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d106      	bne.n	8005318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc f874 	bl	8001400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f000 fb6e 	bl	8005a0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e01d      	b.n	8005390 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f815 	bl	8005398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	3304      	adds	r3, #4
 800537e:	4619      	mov	r1, r3
 8005380:	4610      	mov	r0, r2
 8005382:	f000 fb43 	bl	8005a0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0202 	mvn.w	r2, #2
 80053d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 faee 	bl	80059d0 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fae0 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 faf1 	bl	80059e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0304 	and.w	r3, r3, #4
 8005420:	2b04      	cmp	r3, #4
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0204 	mvn.w	r2, #4
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2202      	movs	r2, #2
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fac4 	bl	80059d0 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fab6 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fac7 	bl	80059e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b08      	cmp	r3, #8
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0208 	mvn.w	r2, #8
 8005480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2204      	movs	r2, #4
 8005486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fa9a 	bl	80059d0 <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa8c 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa9d 	bl	80059e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0310 	and.w	r3, r3, #16
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0210 	mvn.w	r2, #16
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2208      	movs	r2, #8
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa70 	bl	80059d0 <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa62 	bl	80059bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fa73 	bl	80059e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10e      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b01      	cmp	r3, #1
 800551e:	d107      	bne.n	8005530 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0201 	mvn.w	r2, #1
 8005528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fc f856 	bl	80015dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b80      	cmp	r3, #128	; 0x80
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fec4 	bl	80062e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d10e      	bne.n	800558a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005576:	2b80      	cmp	r3, #128	; 0x80
 8005578:	d107      	bne.n	800558a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 feb7 	bl	80062f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005594:	2b40      	cmp	r3, #64	; 0x40
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fa21 	bl	80059f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d10e      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d107      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f06f 0220 	mvn.w	r2, #32
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fe77 	bl	80062d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005602:	2302      	movs	r3, #2
 8005604:	e105      	b.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b14      	cmp	r3, #20
 800561a:	f200 80f0 	bhi.w	80057fe <HAL_TIM_PWM_ConfigChannel+0x212>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005679 	.word	0x08005679
 8005628:	080057ff 	.word	0x080057ff
 800562c:	080057ff 	.word	0x080057ff
 8005630:	080057ff 	.word	0x080057ff
 8005634:	080056b9 	.word	0x080056b9
 8005638:	080057ff 	.word	0x080057ff
 800563c:	080057ff 	.word	0x080057ff
 8005640:	080057ff 	.word	0x080057ff
 8005644:	080056fb 	.word	0x080056fb
 8005648:	080057ff 	.word	0x080057ff
 800564c:	080057ff 	.word	0x080057ff
 8005650:	080057ff 	.word	0x080057ff
 8005654:	0800573b 	.word	0x0800573b
 8005658:	080057ff 	.word	0x080057ff
 800565c:	080057ff 	.word	0x080057ff
 8005660:	080057ff 	.word	0x080057ff
 8005664:	0800577d 	.word	0x0800577d
 8005668:	080057ff 	.word	0x080057ff
 800566c:	080057ff 	.word	0x080057ff
 8005670:	080057ff 	.word	0x080057ff
 8005674:	080057bd 	.word	0x080057bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fa5e 	bl	8005b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0208 	orr.w	r2, r2, #8
 8005692:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f022 0204 	bic.w	r2, r2, #4
 80056a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6999      	ldr	r1, [r3, #24]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	691a      	ldr	r2, [r3, #16]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	619a      	str	r2, [r3, #24]
      break;
 80056b6:	e0a3      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68b9      	ldr	r1, [r7, #8]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 face 	bl	8005c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6999      	ldr	r1, [r3, #24]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	021a      	lsls	r2, r3, #8
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	619a      	str	r2, [r3, #24]
      break;
 80056f8:	e082      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fb37 	bl	8005d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0208 	orr.w	r2, r2, #8
 8005714:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69da      	ldr	r2, [r3, #28]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 0204 	bic.w	r2, r2, #4
 8005724:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69d9      	ldr	r1, [r3, #28]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	61da      	str	r2, [r3, #28]
      break;
 8005738:	e062      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	4618      	mov	r0, r3
 8005742:	f000 fb9d 	bl	8005e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69da      	ldr	r2, [r3, #28]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69d9      	ldr	r1, [r3, #28]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	021a      	lsls	r2, r3, #8
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	61da      	str	r2, [r3, #28]
      break;
 800577a:	e041      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fbe4 	bl	8005f50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0208 	orr.w	r2, r2, #8
 8005796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f022 0204 	bic.w	r2, r2, #4
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ba:	e021      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fc26 	bl	8006014 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	021a      	lsls	r2, r3, #8
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057fc:	e000      	b.n	8005800 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80057fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop

0800581c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIM_ConfigClockSource+0x18>
 8005830:	2302      	movs	r3, #2
 8005832:	e0b7      	b.n	80059a4 <HAL_TIM_ConfigClockSource+0x188>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4b57      	ldr	r3, [pc, #348]	; (80059ac <HAL_TIM_ConfigClockSource+0x190>)
 8005850:	4013      	ands	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b70      	cmp	r3, #112	; 0x70
 800586a:	d02e      	beq.n	80058ca <HAL_TIM_ConfigClockSource+0xae>
 800586c:	2b70      	cmp	r3, #112	; 0x70
 800586e:	d812      	bhi.n	8005896 <HAL_TIM_ConfigClockSource+0x7a>
 8005870:	2b30      	cmp	r3, #48	; 0x30
 8005872:	f000 8084 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x162>
 8005876:	2b30      	cmp	r3, #48	; 0x30
 8005878:	d806      	bhi.n	8005888 <HAL_TIM_ConfigClockSource+0x6c>
 800587a:	2b10      	cmp	r3, #16
 800587c:	d07f      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
 800587e:	2b20      	cmp	r3, #32
 8005880:	d07d      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d07b      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005886:	e084      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005888:	2b50      	cmp	r3, #80	; 0x50
 800588a:	d048      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x102>
 800588c:	2b60      	cmp	r3, #96	; 0x60
 800588e:	d056      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x122>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d064      	beq.n	800595e <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005894:	e07d      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005896:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800589a:	d070      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
 800589c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80058a0:	d809      	bhi.n	80058b6 <HAL_TIM_ConfigClockSource+0x9a>
 80058a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a6:	d027      	beq.n	80058f8 <HAL_TIM_ConfigClockSource+0xdc>
 80058a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058ac:	d067      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
 80058ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b2:	d06d      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058b4:	e06d      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 80058b6:	4a3e      	ldr	r2, [pc, #248]	; (80059b0 <HAL_TIM_ConfigClockSource+0x194>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d060      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
 80058bc:	4a3d      	ldr	r2, [pc, #244]	; (80059b4 <HAL_TIM_ConfigClockSource+0x198>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d05d      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
 80058c2:	4a3d      	ldr	r2, [pc, #244]	; (80059b8 <HAL_TIM_ConfigClockSource+0x19c>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d05a      	beq.n	800597e <HAL_TIM_ConfigClockSource+0x162>
      break;
 80058c8:	e063      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6818      	ldr	r0, [r3, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f000 fc7d 	bl	80061d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	609a      	str	r2, [r3, #8]
      break;
 80058f6:	e04c      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6899      	ldr	r1, [r3, #8]
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f000 fc66 	bl	80061d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800591a:	609a      	str	r2, [r3, #8]
      break;
 800591c:	e039      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fbd6 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2150      	movs	r1, #80	; 0x50
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc30 	bl	800619c <TIM_ITRx_SetConfig>
      break;
 800593c:	e029      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6859      	ldr	r1, [r3, #4]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	461a      	mov	r2, r3
 800594c:	f000 fbf5 	bl	800613a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2160      	movs	r1, #96	; 0x60
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fc20 	bl	800619c <TIM_ITRx_SetConfig>
      break;
 800595c:	e019      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6818      	ldr	r0, [r3, #0]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	68db      	ldr	r3, [r3, #12]
 800596a:	461a      	mov	r2, r3
 800596c:	f000 fbb6 	bl	80060dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2140      	movs	r1, #64	; 0x40
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc10 	bl	800619c <TIM_ITRx_SetConfig>
      break;
 800597c:	e009      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4619      	mov	r1, r3
 8005988:	4610      	mov	r0, r2
 800598a:	f000 fc07 	bl	800619c <TIM_ITRx_SetConfig>
      break;
 800598e:	e000      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005990:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	ffceff88 	.word	0xffceff88
 80059b0:	00100030 	.word	0x00100030
 80059b4:	00100040 	.word	0x00100040
 80059b8:	00100020 	.word	0x00100020

080059bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a40      	ldr	r2, [pc, #256]	; (8005b20 <TIM_Base_SetConfig+0x114>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d013      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2a:	d00f      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a3d      	ldr	r2, [pc, #244]	; (8005b24 <TIM_Base_SetConfig+0x118>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00b      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a3c      	ldr	r2, [pc, #240]	; (8005b28 <TIM_Base_SetConfig+0x11c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d007      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a3b      	ldr	r2, [pc, #236]	; (8005b2c <TIM_Base_SetConfig+0x120>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_Base_SetConfig+0x40>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a3a      	ldr	r2, [pc, #232]	; (8005b30 <TIM_Base_SetConfig+0x124>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d108      	bne.n	8005a5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2f      	ldr	r2, [pc, #188]	; (8005b20 <TIM_Base_SetConfig+0x114>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01f      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6c:	d01b      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a2c      	ldr	r2, [pc, #176]	; (8005b24 <TIM_Base_SetConfig+0x118>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d017      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2b      	ldr	r2, [pc, #172]	; (8005b28 <TIM_Base_SetConfig+0x11c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a2a      	ldr	r2, [pc, #168]	; (8005b2c <TIM_Base_SetConfig+0x120>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00f      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a29      	ldr	r2, [pc, #164]	; (8005b30 <TIM_Base_SetConfig+0x124>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00b      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a28      	ldr	r2, [pc, #160]	; (8005b34 <TIM_Base_SetConfig+0x128>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d007      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a27      	ldr	r2, [pc, #156]	; (8005b38 <TIM_Base_SetConfig+0x12c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d003      	beq.n	8005aa6 <TIM_Base_SetConfig+0x9a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <TIM_Base_SetConfig+0x130>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d108      	bne.n	8005ab8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a10      	ldr	r2, [pc, #64]	; (8005b20 <TIM_Base_SetConfig+0x114>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00f      	beq.n	8005b04 <TIM_Base_SetConfig+0xf8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <TIM_Base_SetConfig+0x124>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00b      	beq.n	8005b04 <TIM_Base_SetConfig+0xf8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a11      	ldr	r2, [pc, #68]	; (8005b34 <TIM_Base_SetConfig+0x128>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d007      	beq.n	8005b04 <TIM_Base_SetConfig+0xf8>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <TIM_Base_SetConfig+0x12c>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d003      	beq.n	8005b04 <TIM_Base_SetConfig+0xf8>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <TIM_Base_SetConfig+0x130>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d103      	bne.n	8005b0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	691a      	ldr	r2, [r3, #16]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	615a      	str	r2, [r3, #20]
}
 8005b12:	bf00      	nop
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40000400 	.word	0x40000400
 8005b28:	40000800 	.word	0x40000800
 8005b2c:	40000c00 	.word	0x40000c00
 8005b30:	40010400 	.word	0x40010400
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40014400 	.word	0x40014400
 8005b3c:	40014800 	.word	0x40014800

08005b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4b37      	ldr	r3, [pc, #220]	; (8005c48 <TIM_OC1_SetConfig+0x108>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0303 	bic.w	r3, r3, #3
 8005b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 0302 	bic.w	r3, r3, #2
 8005b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a2d      	ldr	r2, [pc, #180]	; (8005c4c <TIM_OC1_SetConfig+0x10c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00f      	beq.n	8005bbc <TIM_OC1_SetConfig+0x7c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a2c      	ldr	r2, [pc, #176]	; (8005c50 <TIM_OC1_SetConfig+0x110>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <TIM_OC1_SetConfig+0x7c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a2b      	ldr	r2, [pc, #172]	; (8005c54 <TIM_OC1_SetConfig+0x114>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d007      	beq.n	8005bbc <TIM_OC1_SetConfig+0x7c>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a2a      	ldr	r2, [pc, #168]	; (8005c58 <TIM_OC1_SetConfig+0x118>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC1_SetConfig+0x7c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a29      	ldr	r2, [pc, #164]	; (8005c5c <TIM_OC1_SetConfig+0x11c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d10c      	bne.n	8005bd6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0308 	bic.w	r3, r3, #8
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f023 0304 	bic.w	r3, r3, #4
 8005bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1c      	ldr	r2, [pc, #112]	; (8005c4c <TIM_OC1_SetConfig+0x10c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00f      	beq.n	8005bfe <TIM_OC1_SetConfig+0xbe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <TIM_OC1_SetConfig+0x110>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <TIM_OC1_SetConfig+0xbe>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <TIM_OC1_SetConfig+0x114>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <TIM_OC1_SetConfig+0xbe>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <TIM_OC1_SetConfig+0x118>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_OC1_SetConfig+0xbe>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <TIM_OC1_SetConfig+0x11c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d111      	bne.n	8005c22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	621a      	str	r2, [r3, #32]
}
 8005c3c:	bf00      	nop
 8005c3e:	371c      	adds	r7, #28
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	fffeff8f 	.word	0xfffeff8f
 8005c4c:	40010000 	.word	0x40010000
 8005c50:	40010400 	.word	0x40010400
 8005c54:	40014000 	.word	0x40014000
 8005c58:	40014400 	.word	0x40014400
 8005c5c:	40014800 	.word	0x40014800

08005c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0210 	bic.w	r2, r3, #16
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4b34      	ldr	r3, [pc, #208]	; (8005d5c <TIM_OC2_SetConfig+0xfc>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f023 0320 	bic.w	r3, r3, #32
 8005caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	011b      	lsls	r3, r3, #4
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a29      	ldr	r2, [pc, #164]	; (8005d60 <TIM_OC2_SetConfig+0x100>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC2_SetConfig+0x68>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a28      	ldr	r2, [pc, #160]	; (8005d64 <TIM_OC2_SetConfig+0x104>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d10d      	bne.n	8005ce4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <TIM_OC2_SetConfig+0x100>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00f      	beq.n	8005d0c <TIM_OC2_SetConfig+0xac>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1d      	ldr	r2, [pc, #116]	; (8005d64 <TIM_OC2_SetConfig+0x104>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00b      	beq.n	8005d0c <TIM_OC2_SetConfig+0xac>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1c      	ldr	r2, [pc, #112]	; (8005d68 <TIM_OC2_SetConfig+0x108>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_OC2_SetConfig+0xac>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <TIM_OC2_SetConfig+0x10c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_OC2_SetConfig+0xac>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <TIM_OC2_SetConfig+0x110>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d113      	bne.n	8005d34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	699b      	ldr	r3, [r3, #24]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	621a      	str	r2, [r3, #32]
}
 8005d4e:	bf00      	nop
 8005d50:	371c      	adds	r7, #28
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	feff8fff 	.word	0xfeff8fff
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40010400 	.word	0x40010400
 8005d68:	40014000 	.word	0x40014000
 8005d6c:	40014400 	.word	0x40014400
 8005d70:	40014800 	.word	0x40014800

08005d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0303 	bic.w	r3, r3, #3
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a27      	ldr	r2, [pc, #156]	; (8005e6c <TIM_OC3_SetConfig+0xf8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d003      	beq.n	8005dda <TIM_OC3_SetConfig+0x66>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a26      	ldr	r2, [pc, #152]	; (8005e70 <TIM_OC3_SetConfig+0xfc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d10d      	bne.n	8005df6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1c      	ldr	r2, [pc, #112]	; (8005e6c <TIM_OC3_SetConfig+0xf8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00f      	beq.n	8005e1e <TIM_OC3_SetConfig+0xaa>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <TIM_OC3_SetConfig+0xfc>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00b      	beq.n	8005e1e <TIM_OC3_SetConfig+0xaa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1a      	ldr	r2, [pc, #104]	; (8005e74 <TIM_OC3_SetConfig+0x100>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d007      	beq.n	8005e1e <TIM_OC3_SetConfig+0xaa>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a19      	ldr	r2, [pc, #100]	; (8005e78 <TIM_OC3_SetConfig+0x104>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d003      	beq.n	8005e1e <TIM_OC3_SetConfig+0xaa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <TIM_OC3_SetConfig+0x108>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d113      	bne.n	8005e46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	699b      	ldr	r3, [r3, #24]
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	621a      	str	r2, [r3, #32]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40010400 	.word	0x40010400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800

08005e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	031b      	lsls	r3, r3, #12
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <TIM_OC4_SetConfig+0xbc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00f      	beq.n	8005f00 <TIM_OC4_SetConfig+0x80>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a17      	ldr	r2, [pc, #92]	; (8005f40 <TIM_OC4_SetConfig+0xc0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <TIM_OC4_SetConfig+0x80>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a16      	ldr	r2, [pc, #88]	; (8005f44 <TIM_OC4_SetConfig+0xc4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_OC4_SetConfig+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a15      	ldr	r2, [pc, #84]	; (8005f48 <TIM_OC4_SetConfig+0xc8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC4_SetConfig+0x80>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <TIM_OC4_SetConfig+0xcc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d109      	bne.n	8005f14 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	019b      	lsls	r3, r3, #6
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	621a      	str	r2, [r3, #32]
}
 8005f2e:	bf00      	nop
 8005f30:	371c      	adds	r7, #28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40010400 	.word	0x40010400
 8005f44:	40014000 	.word	0x40014000
 8005f48:	40014400 	.word	0x40014400
 8005f4c:	40014800 	.word	0x40014800

08005f50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	041b      	lsls	r3, r3, #16
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a17      	ldr	r2, [pc, #92]	; (8006000 <TIM_OC5_SetConfig+0xb0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a16      	ldr	r2, [pc, #88]	; (8006004 <TIM_OC5_SetConfig+0xb4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a15      	ldr	r2, [pc, #84]	; (8006008 <TIM_OC5_SetConfig+0xb8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a14      	ldr	r2, [pc, #80]	; (800600c <TIM_OC5_SetConfig+0xbc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x76>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a13      	ldr	r2, [pc, #76]	; (8006010 <TIM_OC5_SetConfig+0xc0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d109      	bne.n	8005fda <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40010000 	.word	0x40010000
 8006004:	40010400 	.word	0x40010400
 8006008:	40014000 	.word	0x40014000
 800600c:	40014400 	.word	0x40014400
 8006010:	40014800 	.word	0x40014800

08006014 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	021b      	lsls	r3, r3, #8
 800604a:	68fa      	ldr	r2, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	051b      	lsls	r3, r3, #20
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a18      	ldr	r2, [pc, #96]	; (80060c8 <TIM_OC6_SetConfig+0xb4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d00f      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <TIM_OC6_SetConfig+0xb8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00b      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a16      	ldr	r2, [pc, #88]	; (80060d0 <TIM_OC6_SetConfig+0xbc>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d007      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a15      	ldr	r2, [pc, #84]	; (80060d4 <TIM_OC6_SetConfig+0xc0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d003      	beq.n	800608c <TIM_OC6_SetConfig+0x78>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a14      	ldr	r2, [pc, #80]	; (80060d8 <TIM_OC6_SetConfig+0xc4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d109      	bne.n	80060a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006092:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	029b      	lsls	r3, r3, #10
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	621a      	str	r2, [r3, #32]
}
 80060ba:	bf00      	nop
 80060bc:	371c      	adds	r7, #28
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40010000 	.word	0x40010000
 80060cc:	40010400 	.word	0x40010400
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800

080060dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f023 030a 	bic.w	r3, r3, #10
 8006118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	621a      	str	r2, [r3, #32]
}
 800612e:	bf00      	nop
 8006130:	371c      	adds	r7, #28
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	60f8      	str	r0, [r7, #12]
 8006142:	60b9      	str	r1, [r7, #8]
 8006144:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f023 0210 	bic.w	r2, r3, #16
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006164:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006176:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
	...

0800619c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <TIM_ITRx_SetConfig+0x38>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f043 0307 	orr.w	r3, r3, #7
 80061be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	609a      	str	r2, [r3, #8]
}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	ffcfff8f 	.word	0xffcfff8f

080061d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4313      	orrs	r3, r2
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800622c:	2302      	movs	r3, #2
 800622e:	e045      	b.n	80062bc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d004      	beq.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1b      	ldr	r2, [pc, #108]	; (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d108      	bne.n	8006276 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800626a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800628e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	4313      	orrs	r3, r2
 8006298:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000
 80062cc:	40010400 	.word	0x40010400

080062d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e042      	b.n	80063a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006324:	2b00      	cmp	r3, #0
 8006326:	d106      	bne.n	8006336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fb f9b1 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2224      	movs	r2, #36	; 0x24
 800633a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa9a 	bl	8006888 <UART_SetConfig>
 8006354:	4603      	mov	r3, r0
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e022      	b.n	80063a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f002 fc0c 	bl	8008b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800637a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800638a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f002 fc93 	bl	8008cc8 <UART_CheckIdleState>
 80063a2:	4603      	mov	r3, r0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	4613      	mov	r3, r2
 80063b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	f040 80bc 	bne.w	800653e <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_UART_Receive_IT+0x26>
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e0b4      	b.n	8006540 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d101      	bne.n	80063e4 <HAL_UART_Receive_IT+0x38>
 80063e0:	2302      	movs	r3, #2
 80063e2:	e0ad      	b.n	8006540 <HAL_UART_Receive_IT+0x194>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	88fa      	ldrh	r2, [r7, #6]
 80063f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006410:	d10e      	bne.n	8006430 <HAL_UART_Receive_IT+0x84>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d105      	bne.n	8006426 <HAL_UART_Receive_IT+0x7a>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006424:	e02d      	b.n	8006482 <HAL_UART_Receive_IT+0xd6>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	22ff      	movs	r2, #255	; 0xff
 800642a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800642e:	e028      	b.n	8006482 <HAL_UART_Receive_IT+0xd6>
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10d      	bne.n	8006454 <HAL_UART_Receive_IT+0xa8>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_UART_Receive_IT+0x9e>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	22ff      	movs	r2, #255	; 0xff
 8006444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006448:	e01b      	b.n	8006482 <HAL_UART_Receive_IT+0xd6>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	227f      	movs	r2, #127	; 0x7f
 800644e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006452:	e016      	b.n	8006482 <HAL_UART_Receive_IT+0xd6>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800645c:	d10d      	bne.n	800647a <HAL_UART_Receive_IT+0xce>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <HAL_UART_Receive_IT+0xc4>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	227f      	movs	r2, #127	; 0x7f
 800646a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800646e:	e008      	b.n	8006482 <HAL_UART_Receive_IT+0xd6>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	223f      	movs	r2, #63	; 0x3f
 8006474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006478:	e003      	b.n	8006482 <HAL_UART_Receive_IT+0xd6>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2222      	movs	r2, #34	; 0x22
 800648e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0201 	orr.w	r2, r2, #1
 80064a0:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064aa:	d12a      	bne.n	8006502 <HAL_UART_Receive_IT+0x156>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80064b2:	88fa      	ldrh	r2, [r7, #6]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d324      	bcc.n	8006502 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c0:	d107      	bne.n	80064d2 <HAL_UART_Receive_IT+0x126>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	4a1f      	ldr	r2, [pc, #124]	; (800654c <HAL_UART_Receive_IT+0x1a0>)
 80064ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80064d0:	e002      	b.n	80064d8 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_UART_Receive_IT+0x1a4>)
 80064d6:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ee:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80064fe:	609a      	str	r2, [r3, #8]
 8006500:	e01b      	b.n	800653a <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650a:	d107      	bne.n	800651c <HAL_UART_Receive_IT+0x170>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d103      	bne.n	800651c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	4a0f      	ldr	r2, [pc, #60]	; (8006554 <HAL_UART_Receive_IT+0x1a8>)
 8006518:	66da      	str	r2, [r3, #108]	; 0x6c
 800651a:	e002      	b.n	8006522 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a0e      	ldr	r2, [pc, #56]	; (8006558 <HAL_UART_Receive_IT+0x1ac>)
 8006520:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006538:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800653e:	2302      	movs	r3, #2
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	0800915d 	.word	0x0800915d
 8006550:	08009055 	.word	0x08009055
 8006554:	08008fab 	.word	0x08008fab
 8006558:	08008f01 	.word	0x08008f01

0800655c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006582:	4013      	ands	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d118      	bne.n	80065be <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d013      	beq.n	80065be <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d009      	beq.n	80065be <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8145 	beq.w	800683e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
      }
      return;
 80065bc:	e13f      	b.n	800683e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80e8 	beq.w	8006796 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4ba1      	ldr	r3, [pc, #644]	; (8006850 <HAL_UART_IRQHandler+0x2f4>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	4ba0      	ldr	r3, [pc, #640]	; (8006854 <HAL_UART_IRQHandler+0x2f8>)
 80065d4:	4013      	ands	r3, r2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 80dd 	beq.w	8006796 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0301 	and.w	r3, r3, #1
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d010      	beq.n	8006608 <HAL_UART_IRQHandler+0xac>
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	f043 0201 	orr.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d010      	beq.n	8006634 <HAL_UART_IRQHandler+0xd8>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00b      	beq.n	8006634 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2202      	movs	r2, #2
 8006622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662a:	f043 0204 	orr.w	r2, r3, #4
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <HAL_UART_IRQHandler+0x104>
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2204      	movs	r2, #4
 800664e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006656:	f043 0202 	orr.w	r2, r3, #2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f003 0308 	and.w	r3, r3, #8
 8006666:	2b00      	cmp	r3, #0
 8006668:	d015      	beq.n	8006696 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4b76      	ldr	r3, [pc, #472]	; (8006850 <HAL_UART_IRQHandler+0x2f4>)
 8006678:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2208      	movs	r2, #8
 8006684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668c:	f043 0208 	orr.w	r2, r3, #8
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669c:	2b00      	cmp	r3, #0
 800669e:	d011      	beq.n	80066c4 <HAL_UART_IRQHandler+0x168>
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f043 0220 	orr.w	r2, r3, #32
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 80b9 	beq.w	8006842 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d011      	beq.n	80066fe <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f003 0320 	and.w	r3, r3, #32
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006704:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b40      	cmp	r3, #64	; 0x40
 8006712:	d004      	beq.n	800671e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800671a:	2b00      	cmp	r3, #0
 800671c:	d031      	beq.n	8006782 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f002 fb9a 	bl	8008e58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d123      	bne.n	800677a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006740:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006746:	2b00      	cmp	r3, #0
 8006748:	d013      	beq.n	8006772 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800674e:	4a42      	ldr	r2, [pc, #264]	; (8006858 <HAL_UART_IRQHandler+0x2fc>)
 8006750:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006756:	4618      	mov	r0, r3
 8006758:	f7fb fa8e 	bl	8001c78 <HAL_DMA_Abort_IT>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800676c:	4610      	mov	r0, r2
 800676e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006770:	e00f      	b.n	8006792 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f87c 	bl	8006870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006778:	e00b      	b.n	8006792 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f878 	bl	8006870 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	e007      	b.n	8006792 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f874 	bl	8006870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006790:	e057      	b.n	8006842 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006792:	bf00      	nop
    return;
 8006794:	e055      	b.n	8006842 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00d      	beq.n	80067bc <HAL_UART_IRQHandler+0x260>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d008      	beq.n	80067bc <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80067b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f002 fd55 	bl	8009264 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067ba:	e045      	b.n	8006848 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d012      	beq.n	80067ec <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d104      	bne.n	80067da <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d008      	beq.n	80067ec <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d031      	beq.n	8006846 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
    }
    return;
 80067ea:	e02c      	b.n	8006846 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_UART_IRQHandler+0x2ac>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f002 fb63 	bl	8008ecc <UART_EndTransmit_IT>
    return;
 8006806:	e01f      	b.n	8006848 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d008      	beq.n	8006824 <HAL_UART_IRQHandler+0x2c8>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f002 fd35 	bl	800928c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006822:	e011      	b.n	8006848 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00c      	beq.n	8006848 <HAL_UART_IRQHandler+0x2ec>
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	da09      	bge.n	8006848 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f002 fd1f 	bl	8009278 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800683a:	bf00      	nop
 800683c:	e004      	b.n	8006848 <HAL_UART_IRQHandler+0x2ec>
      return;
 800683e:	bf00      	nop
 8006840:	e002      	b.n	8006848 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006842:	bf00      	nop
 8006844:	e000      	b.n	8006848 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006846:	bf00      	nop
  }
}
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	10000001 	.word	0x10000001
 8006854:	04000120 	.word	0x04000120
 8006858:	08008ea1 	.word	0x08008ea1

0800685c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	0000      	movs	r0, r0
	...

08006888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800688c:	b090      	sub	sp, #64	; 0x40
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006892:	2300      	movs	r3, #0
 8006894:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800689c:	2300      	movs	r3, #0
 800689e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	431a      	orrs	r2, r3
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068be:	4313      	orrs	r3, r2
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	4bc1      	ldr	r3, [pc, #772]	; (8006bd0 <UART_SetConfig+0x348>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	699b      	ldr	r3, [r3, #24]
 80068f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4ab7      	ldr	r2, [pc, #732]	; (8006bd4 <UART_SetConfig+0x34c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d004      	beq.n	8006906 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006902:	4313      	orrs	r3, r2
 8006904:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	4bb2      	ldr	r3, [pc, #712]	; (8006bd8 <UART_SetConfig+0x350>)
 800690e:	4013      	ands	r3, r2
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006916:	430b      	orrs	r3, r1
 8006918:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	f023 010f 	bic.w	r1, r3, #15
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4aa9      	ldr	r2, [pc, #676]	; (8006bdc <UART_SetConfig+0x354>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d177      	bne.n	8006a2a <UART_SetConfig+0x1a2>
 800693a:	4ba9      	ldr	r3, [pc, #676]	; (8006be0 <UART_SetConfig+0x358>)
 800693c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006942:	2b28      	cmp	r3, #40	; 0x28
 8006944:	d86c      	bhi.n	8006a20 <UART_SetConfig+0x198>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0xc4>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	080069f1 	.word	0x080069f1
 8006950:	08006a21 	.word	0x08006a21
 8006954:	08006a21 	.word	0x08006a21
 8006958:	08006a21 	.word	0x08006a21
 800695c:	08006a21 	.word	0x08006a21
 8006960:	08006a21 	.word	0x08006a21
 8006964:	08006a21 	.word	0x08006a21
 8006968:	08006a21 	.word	0x08006a21
 800696c:	080069f9 	.word	0x080069f9
 8006970:	08006a21 	.word	0x08006a21
 8006974:	08006a21 	.word	0x08006a21
 8006978:	08006a21 	.word	0x08006a21
 800697c:	08006a21 	.word	0x08006a21
 8006980:	08006a21 	.word	0x08006a21
 8006984:	08006a21 	.word	0x08006a21
 8006988:	08006a21 	.word	0x08006a21
 800698c:	08006a01 	.word	0x08006a01
 8006990:	08006a21 	.word	0x08006a21
 8006994:	08006a21 	.word	0x08006a21
 8006998:	08006a21 	.word	0x08006a21
 800699c:	08006a21 	.word	0x08006a21
 80069a0:	08006a21 	.word	0x08006a21
 80069a4:	08006a21 	.word	0x08006a21
 80069a8:	08006a21 	.word	0x08006a21
 80069ac:	08006a09 	.word	0x08006a09
 80069b0:	08006a21 	.word	0x08006a21
 80069b4:	08006a21 	.word	0x08006a21
 80069b8:	08006a21 	.word	0x08006a21
 80069bc:	08006a21 	.word	0x08006a21
 80069c0:	08006a21 	.word	0x08006a21
 80069c4:	08006a21 	.word	0x08006a21
 80069c8:	08006a21 	.word	0x08006a21
 80069cc:	08006a11 	.word	0x08006a11
 80069d0:	08006a21 	.word	0x08006a21
 80069d4:	08006a21 	.word	0x08006a21
 80069d8:	08006a21 	.word	0x08006a21
 80069dc:	08006a21 	.word	0x08006a21
 80069e0:	08006a21 	.word	0x08006a21
 80069e4:	08006a21 	.word	0x08006a21
 80069e8:	08006a21 	.word	0x08006a21
 80069ec:	08006a19 	.word	0x08006a19
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069f6:	e233      	b.n	8006e60 <UART_SetConfig+0x5d8>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80069fe:	e22f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a06:	e22b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a0e:	e227      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a10:	2320      	movs	r3, #32
 8006a12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a16:	e223      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a18:	2340      	movs	r3, #64	; 0x40
 8006a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a1e:	e21f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a20:	2380      	movs	r3, #128	; 0x80
 8006a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a26:	bf00      	nop
 8006a28:	e21a      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a6d      	ldr	r2, [pc, #436]	; (8006be4 <UART_SetConfig+0x35c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d132      	bne.n	8006a9a <UART_SetConfig+0x212>
 8006a34:	4b6a      	ldr	r3, [pc, #424]	; (8006be0 <UART_SetConfig+0x358>)
 8006a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	2b05      	cmp	r3, #5
 8006a3e:	d827      	bhi.n	8006a90 <UART_SetConfig+0x208>
 8006a40:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0x1c0>)
 8006a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a46:	bf00      	nop
 8006a48:	08006a61 	.word	0x08006a61
 8006a4c:	08006a69 	.word	0x08006a69
 8006a50:	08006a71 	.word	0x08006a71
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a81 	.word	0x08006a81
 8006a5c:	08006a89 	.word	0x08006a89
 8006a60:	2300      	movs	r3, #0
 8006a62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a66:	e1fb      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a68:	2304      	movs	r3, #4
 8006a6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a6e:	e1f7      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a70:	2308      	movs	r3, #8
 8006a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a76:	e1f3      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a7e:	e1ef      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a80:	2320      	movs	r3, #32
 8006a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a86:	e1eb      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a88:	2340      	movs	r3, #64	; 0x40
 8006a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a8e:	e1e7      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a90:	2380      	movs	r3, #128	; 0x80
 8006a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a96:	bf00      	nop
 8006a98:	e1e2      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a52      	ldr	r2, [pc, #328]	; (8006be8 <UART_SetConfig+0x360>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d132      	bne.n	8006b0a <UART_SetConfig+0x282>
 8006aa4:	4b4e      	ldr	r3, [pc, #312]	; (8006be0 <UART_SetConfig+0x358>)
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	2b05      	cmp	r3, #5
 8006aae:	d827      	bhi.n	8006b00 <UART_SetConfig+0x278>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x230>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006ad1 	.word	0x08006ad1
 8006abc:	08006ad9 	.word	0x08006ad9
 8006ac0:	08006ae1 	.word	0x08006ae1
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006af1 	.word	0x08006af1
 8006acc:	08006af9 	.word	0x08006af9
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ad6:	e1c3      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006ad8:	2304      	movs	r3, #4
 8006ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ade:	e1bf      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006ae0:	2308      	movs	r3, #8
 8006ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ae6:	e1bb      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aee:	e1b7      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006af0:	2320      	movs	r3, #32
 8006af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006af6:	e1b3      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006afe:	e1af      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b00:	2380      	movs	r3, #128	; 0x80
 8006b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b06:	bf00      	nop
 8006b08:	e1aa      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a37      	ldr	r2, [pc, #220]	; (8006bec <UART_SetConfig+0x364>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d132      	bne.n	8006b7a <UART_SetConfig+0x2f2>
 8006b14:	4b32      	ldr	r3, [pc, #200]	; (8006be0 <UART_SetConfig+0x358>)
 8006b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	2b05      	cmp	r3, #5
 8006b1e:	d827      	bhi.n	8006b70 <UART_SetConfig+0x2e8>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0x2a0>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b41 	.word	0x08006b41
 8006b2c:	08006b49 	.word	0x08006b49
 8006b30:	08006b51 	.word	0x08006b51
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b46:	e18b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b4e:	e187      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b56:	e183      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b5e:	e17f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b60:	2320      	movs	r3, #32
 8006b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b66:	e17b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b6e:	e177      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b70:	2380      	movs	r3, #128	; 0x80
 8006b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b76:	bf00      	nop
 8006b78:	e172      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1c      	ldr	r2, [pc, #112]	; (8006bf0 <UART_SetConfig+0x368>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d144      	bne.n	8006c0e <UART_SetConfig+0x386>
 8006b84:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <UART_SetConfig+0x358>)
 8006b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	2b05      	cmp	r3, #5
 8006b8e:	d839      	bhi.n	8006c04 <UART_SetConfig+0x37c>
 8006b90:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <UART_SetConfig+0x310>)
 8006b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b96:	bf00      	nop
 8006b98:	08006bb1 	.word	0x08006bb1
 8006b9c:	08006bb9 	.word	0x08006bb9
 8006ba0:	08006bc1 	.word	0x08006bc1
 8006ba4:	08006bc9 	.word	0x08006bc9
 8006ba8:	08006bf5 	.word	0x08006bf5
 8006bac:	08006bfd 	.word	0x08006bfd
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bb6:	e153      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006bb8:	2304      	movs	r3, #4
 8006bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bbe:	e14f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bc6:	e14b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bce:	e147      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006bd0:	cfff69f3 	.word	0xcfff69f3
 8006bd4:	58000c00 	.word	0x58000c00
 8006bd8:	11fff4ff 	.word	0x11fff4ff
 8006bdc:	40011000 	.word	0x40011000
 8006be0:	58024400 	.word	0x58024400
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40004800 	.word	0x40004800
 8006bec:	40004c00 	.word	0x40004c00
 8006bf0:	40005000 	.word	0x40005000
 8006bf4:	2320      	movs	r3, #32
 8006bf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bfa:	e131      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c02:	e12d      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006c04:	2380      	movs	r3, #128	; 0x80
 8006c06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c0a:	bf00      	nop
 8006c0c:	e128      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4ac3      	ldr	r2, [pc, #780]	; (8006f20 <UART_SetConfig+0x698>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d178      	bne.n	8006d0a <UART_SetConfig+0x482>
 8006c18:	4bc2      	ldr	r3, [pc, #776]	; (8006f24 <UART_SetConfig+0x69c>)
 8006c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c20:	2b28      	cmp	r3, #40	; 0x28
 8006c22:	d86d      	bhi.n	8006d00 <UART_SetConfig+0x478>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x3a4>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006cd1 	.word	0x08006cd1
 8006c30:	08006d01 	.word	0x08006d01
 8006c34:	08006d01 	.word	0x08006d01
 8006c38:	08006d01 	.word	0x08006d01
 8006c3c:	08006d01 	.word	0x08006d01
 8006c40:	08006d01 	.word	0x08006d01
 8006c44:	08006d01 	.word	0x08006d01
 8006c48:	08006d01 	.word	0x08006d01
 8006c4c:	08006cd9 	.word	0x08006cd9
 8006c50:	08006d01 	.word	0x08006d01
 8006c54:	08006d01 	.word	0x08006d01
 8006c58:	08006d01 	.word	0x08006d01
 8006c5c:	08006d01 	.word	0x08006d01
 8006c60:	08006d01 	.word	0x08006d01
 8006c64:	08006d01 	.word	0x08006d01
 8006c68:	08006d01 	.word	0x08006d01
 8006c6c:	08006ce1 	.word	0x08006ce1
 8006c70:	08006d01 	.word	0x08006d01
 8006c74:	08006d01 	.word	0x08006d01
 8006c78:	08006d01 	.word	0x08006d01
 8006c7c:	08006d01 	.word	0x08006d01
 8006c80:	08006d01 	.word	0x08006d01
 8006c84:	08006d01 	.word	0x08006d01
 8006c88:	08006d01 	.word	0x08006d01
 8006c8c:	08006ce9 	.word	0x08006ce9
 8006c90:	08006d01 	.word	0x08006d01
 8006c94:	08006d01 	.word	0x08006d01
 8006c98:	08006d01 	.word	0x08006d01
 8006c9c:	08006d01 	.word	0x08006d01
 8006ca0:	08006d01 	.word	0x08006d01
 8006ca4:	08006d01 	.word	0x08006d01
 8006ca8:	08006d01 	.word	0x08006d01
 8006cac:	08006cf1 	.word	0x08006cf1
 8006cb0:	08006d01 	.word	0x08006d01
 8006cb4:	08006d01 	.word	0x08006d01
 8006cb8:	08006d01 	.word	0x08006d01
 8006cbc:	08006d01 	.word	0x08006d01
 8006cc0:	08006d01 	.word	0x08006d01
 8006cc4:	08006d01 	.word	0x08006d01
 8006cc8:	08006d01 	.word	0x08006d01
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cd6:	e0c3      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cde:	e0bf      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ce6:	e0bb      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cee:	e0b7      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006cf0:	2320      	movs	r3, #32
 8006cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cf6:	e0b3      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006cf8:	2340      	movs	r3, #64	; 0x40
 8006cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cfe:	e0af      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d00:	2380      	movs	r3, #128	; 0x80
 8006d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d06:	bf00      	nop
 8006d08:	e0aa      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a86      	ldr	r2, [pc, #536]	; (8006f28 <UART_SetConfig+0x6a0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d132      	bne.n	8006d7a <UART_SetConfig+0x4f2>
 8006d14:	4b83      	ldr	r3, [pc, #524]	; (8006f24 <UART_SetConfig+0x69c>)
 8006d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	d827      	bhi.n	8006d70 <UART_SetConfig+0x4e8>
 8006d20:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x4a0>)
 8006d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006d41 	.word	0x08006d41
 8006d2c:	08006d49 	.word	0x08006d49
 8006d30:	08006d51 	.word	0x08006d51
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d61 	.word	0x08006d61
 8006d3c:	08006d69 	.word	0x08006d69
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d46:	e08b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d48:	2304      	movs	r3, #4
 8006d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d4e:	e087      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d50:	2308      	movs	r3, #8
 8006d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d56:	e083      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d58:	2310      	movs	r3, #16
 8006d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d5e:	e07f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d60:	2320      	movs	r3, #32
 8006d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d66:	e07b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d68:	2340      	movs	r3, #64	; 0x40
 8006d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d6e:	e077      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d70:	2380      	movs	r3, #128	; 0x80
 8006d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d76:	bf00      	nop
 8006d78:	e072      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a6b      	ldr	r2, [pc, #428]	; (8006f2c <UART_SetConfig+0x6a4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d132      	bne.n	8006dea <UART_SetConfig+0x562>
 8006d84:	4b67      	ldr	r3, [pc, #412]	; (8006f24 <UART_SetConfig+0x69c>)
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	2b05      	cmp	r3, #5
 8006d8e:	d827      	bhi.n	8006de0 <UART_SetConfig+0x558>
 8006d90:	a201      	add	r2, pc, #4	; (adr r2, 8006d98 <UART_SetConfig+0x510>)
 8006d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d96:	bf00      	nop
 8006d98:	08006db1 	.word	0x08006db1
 8006d9c:	08006db9 	.word	0x08006db9
 8006da0:	08006dc1 	.word	0x08006dc1
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006dd1 	.word	0x08006dd1
 8006dac:	08006dd9 	.word	0x08006dd9
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006db6:	e053      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006db8:	2304      	movs	r3, #4
 8006dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dbe:	e04f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dc6:	e04b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dce:	e047      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006dd0:	2320      	movs	r3, #32
 8006dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dd6:	e043      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006dd8:	2340      	movs	r3, #64	; 0x40
 8006dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dde:	e03f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006de0:	2380      	movs	r3, #128	; 0x80
 8006de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006de6:	bf00      	nop
 8006de8:	e03a      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a50      	ldr	r2, [pc, #320]	; (8006f30 <UART_SetConfig+0x6a8>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d132      	bne.n	8006e5a <UART_SetConfig+0x5d2>
 8006df4:	4b4b      	ldr	r3, [pc, #300]	; (8006f24 <UART_SetConfig+0x69c>)
 8006df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	2b05      	cmp	r3, #5
 8006dfe:	d827      	bhi.n	8006e50 <UART_SetConfig+0x5c8>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <UART_SetConfig+0x580>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006e21 	.word	0x08006e21
 8006e0c:	08006e29 	.word	0x08006e29
 8006e10:	08006e31 	.word	0x08006e31
 8006e14:	08006e39 	.word	0x08006e39
 8006e18:	08006e41 	.word	0x08006e41
 8006e1c:	08006e49 	.word	0x08006e49
 8006e20:	2302      	movs	r3, #2
 8006e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e26:	e01b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006e28:	2304      	movs	r3, #4
 8006e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e2e:	e017      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006e30:	2308      	movs	r3, #8
 8006e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e36:	e013      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006e38:	2310      	movs	r3, #16
 8006e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e3e:	e00f      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006e40:	2320      	movs	r3, #32
 8006e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e46:	e00b      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e4e:	e007      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006e50:	2380      	movs	r3, #128	; 0x80
 8006e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e56:	bf00      	nop
 8006e58:	e002      	b.n	8006e60 <UART_SetConfig+0x5d8>
 8006e5a:	2380      	movs	r3, #128	; 0x80
 8006e5c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a32      	ldr	r2, [pc, #200]	; (8006f30 <UART_SetConfig+0x6a8>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	f040 86f7 	bne.w	8007c5a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	f000 80c0 	beq.w	8006ff6 <UART_SetConfig+0x76e>
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	dc04      	bgt.n	8006e84 <UART_SetConfig+0x5fc>
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d00c      	beq.n	8006e98 <UART_SetConfig+0x610>
 8006e7e:	2b04      	cmp	r3, #4
 8006e80:	d065      	beq.n	8006f4e <UART_SetConfig+0x6c6>
 8006e82:	e27a      	b.n	800737a <UART_SetConfig+0xaf2>
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	f000 81b0 	beq.w	80071ea <UART_SetConfig+0x962>
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	f000 821e 	beq.w	80072cc <UART_SetConfig+0xa44>
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	f000 8104 	beq.w	800709e <UART_SetConfig+0x816>
 8006e96:	e270      	b.n	800737a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006e98:	f7fd fdfa 	bl	8004a90 <HAL_RCCEx_GetD3PCLK1Freq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d04e      	beq.n	8006f44 <UART_SetConfig+0x6bc>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d048      	beq.n	8006f40 <UART_SetConfig+0x6b8>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d042      	beq.n	8006f3c <UART_SetConfig+0x6b4>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d03c      	beq.n	8006f38 <UART_SetConfig+0x6b0>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d036      	beq.n	8006f34 <UART_SetConfig+0x6ac>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	d026      	beq.n	8006f1c <UART_SetConfig+0x694>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	2b06      	cmp	r3, #6
 8006ed4:	d020      	beq.n	8006f18 <UART_SetConfig+0x690>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b07      	cmp	r3, #7
 8006edc:	d01a      	beq.n	8006f14 <UART_SetConfig+0x68c>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee2:	2b08      	cmp	r3, #8
 8006ee4:	d014      	beq.n	8006f10 <UART_SetConfig+0x688>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	2b09      	cmp	r3, #9
 8006eec:	d00e      	beq.n	8006f0c <UART_SetConfig+0x684>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	2b0a      	cmp	r3, #10
 8006ef4:	d008      	beq.n	8006f08 <UART_SetConfig+0x680>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	2b0b      	cmp	r3, #11
 8006efc:	d102      	bne.n	8006f04 <UART_SetConfig+0x67c>
 8006efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f02:	e020      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e01e      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f08:	2380      	movs	r3, #128	; 0x80
 8006f0a:	e01c      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f0c:	2340      	movs	r3, #64	; 0x40
 8006f0e:	e01a      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f10:	2320      	movs	r3, #32
 8006f12:	e018      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f14:	2310      	movs	r3, #16
 8006f16:	e016      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f18:	230c      	movs	r3, #12
 8006f1a:	e014      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f1c:	230a      	movs	r3, #10
 8006f1e:	e012      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f20:	40011400 	.word	0x40011400
 8006f24:	58024400 	.word	0x58024400
 8006f28:	40007800 	.word	0x40007800
 8006f2c:	40007c00 	.word	0x40007c00
 8006f30:	58000c00 	.word	0x58000c00
 8006f34:	2308      	movs	r3, #8
 8006f36:	e006      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f38:	2306      	movs	r3, #6
 8006f3a:	e004      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	e002      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e000      	b.n	8006f46 <UART_SetConfig+0x6be>
 8006f44:	2301      	movs	r3, #1
 8006f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f4c:	e219      	b.n	8007382 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f4e:	f107 0318 	add.w	r3, r7, #24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fd fdb2 	bl	8004abc <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f58:	69fa      	ldr	r2, [r7, #28]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d044      	beq.n	8006fec <UART_SetConfig+0x764>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d03e      	beq.n	8006fe8 <UART_SetConfig+0x760>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d038      	beq.n	8006fe4 <UART_SetConfig+0x75c>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d032      	beq.n	8006fe0 <UART_SetConfig+0x758>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d02c      	beq.n	8006fdc <UART_SetConfig+0x754>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d026      	beq.n	8006fd8 <UART_SetConfig+0x750>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	2b06      	cmp	r3, #6
 8006f90:	d020      	beq.n	8006fd4 <UART_SetConfig+0x74c>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	2b07      	cmp	r3, #7
 8006f98:	d01a      	beq.n	8006fd0 <UART_SetConfig+0x748>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d014      	beq.n	8006fcc <UART_SetConfig+0x744>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	2b09      	cmp	r3, #9
 8006fa8:	d00e      	beq.n	8006fc8 <UART_SetConfig+0x740>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	2b0a      	cmp	r3, #10
 8006fb0:	d008      	beq.n	8006fc4 <UART_SetConfig+0x73c>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	2b0b      	cmp	r3, #11
 8006fb8:	d102      	bne.n	8006fc0 <UART_SetConfig+0x738>
 8006fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fbe:	e016      	b.n	8006fee <UART_SetConfig+0x766>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e014      	b.n	8006fee <UART_SetConfig+0x766>
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	e012      	b.n	8006fee <UART_SetConfig+0x766>
 8006fc8:	2340      	movs	r3, #64	; 0x40
 8006fca:	e010      	b.n	8006fee <UART_SetConfig+0x766>
 8006fcc:	2320      	movs	r3, #32
 8006fce:	e00e      	b.n	8006fee <UART_SetConfig+0x766>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	e00c      	b.n	8006fee <UART_SetConfig+0x766>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	e00a      	b.n	8006fee <UART_SetConfig+0x766>
 8006fd8:	230a      	movs	r3, #10
 8006fda:	e008      	b.n	8006fee <UART_SetConfig+0x766>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	e006      	b.n	8006fee <UART_SetConfig+0x766>
 8006fe0:	2306      	movs	r3, #6
 8006fe2:	e004      	b.n	8006fee <UART_SetConfig+0x766>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	e002      	b.n	8006fee <UART_SetConfig+0x766>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e000      	b.n	8006fee <UART_SetConfig+0x766>
 8006fec:	2301      	movs	r3, #1
 8006fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006ff4:	e1c5      	b.n	8007382 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff6:	f107 030c 	add.w	r3, r7, #12
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fd feaa 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007000:	693a      	ldr	r2, [r7, #16]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d044      	beq.n	8007094 <UART_SetConfig+0x80c>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2b01      	cmp	r3, #1
 8007010:	d03e      	beq.n	8007090 <UART_SetConfig+0x808>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b02      	cmp	r3, #2
 8007018:	d038      	beq.n	800708c <UART_SetConfig+0x804>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b03      	cmp	r3, #3
 8007020:	d032      	beq.n	8007088 <UART_SetConfig+0x800>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	2b04      	cmp	r3, #4
 8007028:	d02c      	beq.n	8007084 <UART_SetConfig+0x7fc>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2b05      	cmp	r3, #5
 8007030:	d026      	beq.n	8007080 <UART_SetConfig+0x7f8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	2b06      	cmp	r3, #6
 8007038:	d020      	beq.n	800707c <UART_SetConfig+0x7f4>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b07      	cmp	r3, #7
 8007040:	d01a      	beq.n	8007078 <UART_SetConfig+0x7f0>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	2b08      	cmp	r3, #8
 8007048:	d014      	beq.n	8007074 <UART_SetConfig+0x7ec>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	2b09      	cmp	r3, #9
 8007050:	d00e      	beq.n	8007070 <UART_SetConfig+0x7e8>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	2b0a      	cmp	r3, #10
 8007058:	d008      	beq.n	800706c <UART_SetConfig+0x7e4>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	2b0b      	cmp	r3, #11
 8007060:	d102      	bne.n	8007068 <UART_SetConfig+0x7e0>
 8007062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007066:	e016      	b.n	8007096 <UART_SetConfig+0x80e>
 8007068:	2301      	movs	r3, #1
 800706a:	e014      	b.n	8007096 <UART_SetConfig+0x80e>
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	e012      	b.n	8007096 <UART_SetConfig+0x80e>
 8007070:	2340      	movs	r3, #64	; 0x40
 8007072:	e010      	b.n	8007096 <UART_SetConfig+0x80e>
 8007074:	2320      	movs	r3, #32
 8007076:	e00e      	b.n	8007096 <UART_SetConfig+0x80e>
 8007078:	2310      	movs	r3, #16
 800707a:	e00c      	b.n	8007096 <UART_SetConfig+0x80e>
 800707c:	230c      	movs	r3, #12
 800707e:	e00a      	b.n	8007096 <UART_SetConfig+0x80e>
 8007080:	230a      	movs	r3, #10
 8007082:	e008      	b.n	8007096 <UART_SetConfig+0x80e>
 8007084:	2308      	movs	r3, #8
 8007086:	e006      	b.n	8007096 <UART_SetConfig+0x80e>
 8007088:	2306      	movs	r3, #6
 800708a:	e004      	b.n	8007096 <UART_SetConfig+0x80e>
 800708c:	2304      	movs	r3, #4
 800708e:	e002      	b.n	8007096 <UART_SetConfig+0x80e>
 8007090:	2302      	movs	r3, #2
 8007092:	e000      	b.n	8007096 <UART_SetConfig+0x80e>
 8007094:	2301      	movs	r3, #1
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800709c:	e171      	b.n	8007382 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800709e:	4b7a      	ldr	r3, [pc, #488]	; (8007288 <UART_SetConfig+0xa00>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d054      	beq.n	8007154 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80070aa:	4b77      	ldr	r3, [pc, #476]	; (8007288 <UART_SetConfig+0xa00>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	08db      	lsrs	r3, r3, #3
 80070b0:	f003 0303 	and.w	r3, r3, #3
 80070b4:	4a75      	ldr	r2, [pc, #468]	; (800728c <UART_SetConfig+0xa04>)
 80070b6:	40da      	lsrs	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d044      	beq.n	800714a <UART_SetConfig+0x8c2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d03e      	beq.n	8007146 <UART_SetConfig+0x8be>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d038      	beq.n	8007142 <UART_SetConfig+0x8ba>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	d032      	beq.n	800713e <UART_SetConfig+0x8b6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d02c      	beq.n	800713a <UART_SetConfig+0x8b2>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b05      	cmp	r3, #5
 80070e6:	d026      	beq.n	8007136 <UART_SetConfig+0x8ae>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b06      	cmp	r3, #6
 80070ee:	d020      	beq.n	8007132 <UART_SetConfig+0x8aa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b07      	cmp	r3, #7
 80070f6:	d01a      	beq.n	800712e <UART_SetConfig+0x8a6>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d014      	beq.n	800712a <UART_SetConfig+0x8a2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	2b09      	cmp	r3, #9
 8007106:	d00e      	beq.n	8007126 <UART_SetConfig+0x89e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b0a      	cmp	r3, #10
 800710e:	d008      	beq.n	8007122 <UART_SetConfig+0x89a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b0b      	cmp	r3, #11
 8007116:	d102      	bne.n	800711e <UART_SetConfig+0x896>
 8007118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800711c:	e016      	b.n	800714c <UART_SetConfig+0x8c4>
 800711e:	2301      	movs	r3, #1
 8007120:	e014      	b.n	800714c <UART_SetConfig+0x8c4>
 8007122:	2380      	movs	r3, #128	; 0x80
 8007124:	e012      	b.n	800714c <UART_SetConfig+0x8c4>
 8007126:	2340      	movs	r3, #64	; 0x40
 8007128:	e010      	b.n	800714c <UART_SetConfig+0x8c4>
 800712a:	2320      	movs	r3, #32
 800712c:	e00e      	b.n	800714c <UART_SetConfig+0x8c4>
 800712e:	2310      	movs	r3, #16
 8007130:	e00c      	b.n	800714c <UART_SetConfig+0x8c4>
 8007132:	230c      	movs	r3, #12
 8007134:	e00a      	b.n	800714c <UART_SetConfig+0x8c4>
 8007136:	230a      	movs	r3, #10
 8007138:	e008      	b.n	800714c <UART_SetConfig+0x8c4>
 800713a:	2308      	movs	r3, #8
 800713c:	e006      	b.n	800714c <UART_SetConfig+0x8c4>
 800713e:	2306      	movs	r3, #6
 8007140:	e004      	b.n	800714c <UART_SetConfig+0x8c4>
 8007142:	2304      	movs	r3, #4
 8007144:	e002      	b.n	800714c <UART_SetConfig+0x8c4>
 8007146:	2302      	movs	r3, #2
 8007148:	e000      	b.n	800714c <UART_SetConfig+0x8c4>
 800714a:	2301      	movs	r3, #1
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8007152:	e116      	b.n	8007382 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007158:	2b00      	cmp	r3, #0
 800715a:	d043      	beq.n	80071e4 <UART_SetConfig+0x95c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	2b01      	cmp	r3, #1
 8007162:	d03d      	beq.n	80071e0 <UART_SetConfig+0x958>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007168:	2b02      	cmp	r3, #2
 800716a:	d037      	beq.n	80071dc <UART_SetConfig+0x954>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	2b03      	cmp	r3, #3
 8007172:	d031      	beq.n	80071d8 <UART_SetConfig+0x950>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	2b04      	cmp	r3, #4
 800717a:	d02b      	beq.n	80071d4 <UART_SetConfig+0x94c>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	2b05      	cmp	r3, #5
 8007182:	d025      	beq.n	80071d0 <UART_SetConfig+0x948>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	2b06      	cmp	r3, #6
 800718a:	d01f      	beq.n	80071cc <UART_SetConfig+0x944>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	2b07      	cmp	r3, #7
 8007192:	d019      	beq.n	80071c8 <UART_SetConfig+0x940>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	2b08      	cmp	r3, #8
 800719a:	d013      	beq.n	80071c4 <UART_SetConfig+0x93c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	2b09      	cmp	r3, #9
 80071a2:	d00d      	beq.n	80071c0 <UART_SetConfig+0x938>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2b0a      	cmp	r3, #10
 80071aa:	d007      	beq.n	80071bc <UART_SetConfig+0x934>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2b0b      	cmp	r3, #11
 80071b2:	d101      	bne.n	80071b8 <UART_SetConfig+0x930>
 80071b4:	4b36      	ldr	r3, [pc, #216]	; (8007290 <UART_SetConfig+0xa08>)
 80071b6:	e016      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071b8:	4b34      	ldr	r3, [pc, #208]	; (800728c <UART_SetConfig+0xa04>)
 80071ba:	e014      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071bc:	4b35      	ldr	r3, [pc, #212]	; (8007294 <UART_SetConfig+0xa0c>)
 80071be:	e012      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071c0:	4b35      	ldr	r3, [pc, #212]	; (8007298 <UART_SetConfig+0xa10>)
 80071c2:	e010      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071c4:	4b35      	ldr	r3, [pc, #212]	; (800729c <UART_SetConfig+0xa14>)
 80071c6:	e00e      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071c8:	4b35      	ldr	r3, [pc, #212]	; (80072a0 <UART_SetConfig+0xa18>)
 80071ca:	e00c      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071cc:	4b35      	ldr	r3, [pc, #212]	; (80072a4 <UART_SetConfig+0xa1c>)
 80071ce:	e00a      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071d0:	4b35      	ldr	r3, [pc, #212]	; (80072a8 <UART_SetConfig+0xa20>)
 80071d2:	e008      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071d4:	4b35      	ldr	r3, [pc, #212]	; (80072ac <UART_SetConfig+0xa24>)
 80071d6:	e006      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071d8:	4b35      	ldr	r3, [pc, #212]	; (80072b0 <UART_SetConfig+0xa28>)
 80071da:	e004      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071dc:	4b35      	ldr	r3, [pc, #212]	; (80072b4 <UART_SetConfig+0xa2c>)
 80071de:	e002      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071e0:	4b35      	ldr	r3, [pc, #212]	; (80072b8 <UART_SetConfig+0xa30>)
 80071e2:	e000      	b.n	80071e6 <UART_SetConfig+0x95e>
 80071e4:	4b29      	ldr	r3, [pc, #164]	; (800728c <UART_SetConfig+0xa04>)
 80071e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071e8:	e0cb      	b.n	8007382 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d046      	beq.n	8007280 <UART_SetConfig+0x9f8>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d040      	beq.n	800727c <UART_SetConfig+0x9f4>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d03a      	beq.n	8007278 <UART_SetConfig+0x9f0>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b03      	cmp	r3, #3
 8007208:	d034      	beq.n	8007274 <UART_SetConfig+0x9ec>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	2b04      	cmp	r3, #4
 8007210:	d02e      	beq.n	8007270 <UART_SetConfig+0x9e8>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	2b05      	cmp	r3, #5
 8007218:	d028      	beq.n	800726c <UART_SetConfig+0x9e4>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	2b06      	cmp	r3, #6
 8007220:	d022      	beq.n	8007268 <UART_SetConfig+0x9e0>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007226:	2b07      	cmp	r3, #7
 8007228:	d01c      	beq.n	8007264 <UART_SetConfig+0x9dc>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2b08      	cmp	r3, #8
 8007230:	d016      	beq.n	8007260 <UART_SetConfig+0x9d8>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	2b09      	cmp	r3, #9
 8007238:	d00f      	beq.n	800725a <UART_SetConfig+0x9d2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	2b0a      	cmp	r3, #10
 8007240:	d008      	beq.n	8007254 <UART_SetConfig+0x9cc>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	2b0b      	cmp	r3, #11
 8007248:	d102      	bne.n	8007250 <UART_SetConfig+0x9c8>
 800724a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800724e:	e018      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007250:	4b13      	ldr	r3, [pc, #76]	; (80072a0 <UART_SetConfig+0xa18>)
 8007252:	e016      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007254:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007258:	e013      	b.n	8007282 <UART_SetConfig+0x9fa>
 800725a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800725e:	e010      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007260:	4b16      	ldr	r3, [pc, #88]	; (80072bc <UART_SetConfig+0xa34>)
 8007262:	e00e      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007264:	4b0a      	ldr	r3, [pc, #40]	; (8007290 <UART_SetConfig+0xa08>)
 8007266:	e00c      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007268:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <UART_SetConfig+0xa38>)
 800726a:	e00a      	b.n	8007282 <UART_SetConfig+0x9fa>
 800726c:	4b15      	ldr	r3, [pc, #84]	; (80072c4 <UART_SetConfig+0xa3c>)
 800726e:	e008      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007270:	4b08      	ldr	r3, [pc, #32]	; (8007294 <UART_SetConfig+0xa0c>)
 8007272:	e006      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007274:	4b14      	ldr	r3, [pc, #80]	; (80072c8 <UART_SetConfig+0xa40>)
 8007276:	e004      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007278:	4b07      	ldr	r3, [pc, #28]	; (8007298 <UART_SetConfig+0xa10>)
 800727a:	e002      	b.n	8007282 <UART_SetConfig+0x9fa>
 800727c:	4b07      	ldr	r3, [pc, #28]	; (800729c <UART_SetConfig+0xa14>)
 800727e:	e000      	b.n	8007282 <UART_SetConfig+0x9fa>
 8007280:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <UART_SetConfig+0xa18>)
 8007282:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007284:	e07d      	b.n	8007382 <UART_SetConfig+0xafa>
 8007286:	bf00      	nop
 8007288:	58024400 	.word	0x58024400
 800728c:	03d09000 	.word	0x03d09000
 8007290:	0003d090 	.word	0x0003d090
 8007294:	0007a120 	.word	0x0007a120
 8007298:	000f4240 	.word	0x000f4240
 800729c:	001e8480 	.word	0x001e8480
 80072a0:	003d0900 	.word	0x003d0900
 80072a4:	00516155 	.word	0x00516155
 80072a8:	0061a800 	.word	0x0061a800
 80072ac:	007a1200 	.word	0x007a1200
 80072b0:	00a2c2aa 	.word	0x00a2c2aa
 80072b4:	00f42400 	.word	0x00f42400
 80072b8:	01e84800 	.word	0x01e84800
 80072bc:	0001e848 	.word	0x0001e848
 80072c0:	00051615 	.word	0x00051615
 80072c4:	00061a80 	.word	0x00061a80
 80072c8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d04e      	beq.n	8007372 <UART_SetConfig+0xaea>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d047      	beq.n	800736c <UART_SetConfig+0xae4>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d040      	beq.n	8007366 <UART_SetConfig+0xade>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d039      	beq.n	8007360 <UART_SetConfig+0xad8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	d032      	beq.n	800735a <UART_SetConfig+0xad2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	2b05      	cmp	r3, #5
 80072fa:	d02b      	beq.n	8007354 <UART_SetConfig+0xacc>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	2b06      	cmp	r3, #6
 8007302:	d024      	beq.n	800734e <UART_SetConfig+0xac6>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b07      	cmp	r3, #7
 800730a:	d01d      	beq.n	8007348 <UART_SetConfig+0xac0>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b08      	cmp	r3, #8
 8007312:	d016      	beq.n	8007342 <UART_SetConfig+0xaba>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007318:	2b09      	cmp	r3, #9
 800731a:	d00f      	beq.n	800733c <UART_SetConfig+0xab4>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007320:	2b0a      	cmp	r3, #10
 8007322:	d008      	beq.n	8007336 <UART_SetConfig+0xaae>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2b0b      	cmp	r3, #11
 800732a:	d101      	bne.n	8007330 <UART_SetConfig+0xaa8>
 800732c:	2380      	movs	r3, #128	; 0x80
 800732e:	e022      	b.n	8007376 <UART_SetConfig+0xaee>
 8007330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007334:	e01f      	b.n	8007376 <UART_SetConfig+0xaee>
 8007336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800733a:	e01c      	b.n	8007376 <UART_SetConfig+0xaee>
 800733c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007340:	e019      	b.n	8007376 <UART_SetConfig+0xaee>
 8007342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007346:	e016      	b.n	8007376 <UART_SetConfig+0xaee>
 8007348:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800734c:	e013      	b.n	8007376 <UART_SetConfig+0xaee>
 800734e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007352:	e010      	b.n	8007376 <UART_SetConfig+0xaee>
 8007354:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007358:	e00d      	b.n	8007376 <UART_SetConfig+0xaee>
 800735a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800735e:	e00a      	b.n	8007376 <UART_SetConfig+0xaee>
 8007360:	f241 5355 	movw	r3, #5461	; 0x1555
 8007364:	e007      	b.n	8007376 <UART_SetConfig+0xaee>
 8007366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800736a:	e004      	b.n	8007376 <UART_SetConfig+0xaee>
 800736c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007370:	e001      	b.n	8007376 <UART_SetConfig+0xaee>
 8007372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007378:	e003      	b.n	8007382 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007380:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	2b00      	cmp	r3, #0
 8007386:	f001 83e8 	beq.w	8008b5a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	005b      	lsls	r3, r3, #1
 8007392:	4413      	add	r3, r2
 8007394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007396:	429a      	cmp	r2, r3
 8007398:	d305      	bcc.n	80073a6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d904      	bls.n	80073b0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80073ac:	f001 bbd5 	b.w	8008b5a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 80073b0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80073b4:	2b08      	cmp	r3, #8
 80073b6:	f000 8154 	beq.w	8007662 <UART_SetConfig+0xdda>
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	dc06      	bgt.n	80073cc <UART_SetConfig+0xb44>
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d00f      	beq.n	80073e2 <UART_SetConfig+0xb5a>
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	f000 80ac 	beq.w	8007520 <UART_SetConfig+0xc98>
 80073c8:	f000 bc30 	b.w	8007c2c <UART_SetConfig+0x13a4>
 80073cc:	2b20      	cmp	r3, #32
 80073ce:	f000 832d 	beq.w	8007a2c <UART_SetConfig+0x11a4>
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	f000 83a5 	beq.w	8007b22 <UART_SetConfig+0x129a>
 80073d8:	2b10      	cmp	r3, #16
 80073da:	f000 81e3 	beq.w	80077a4 <UART_SetConfig+0xf1c>
 80073de:	f000 bc25 	b.w	8007c2c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073e2:	f7fd fb55 	bl	8004a90 <HAL_RCCEx_GetD3PCLK1Freq>
 80073e6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ea:	4618      	mov	r0, r3
 80073ec:	f04f 0100 	mov.w	r1, #0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d067      	beq.n	80074c8 <UART_SetConfig+0xc40>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d05e      	beq.n	80074be <UART_SetConfig+0xc36>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007404:	2b02      	cmp	r3, #2
 8007406:	d055      	beq.n	80074b4 <UART_SetConfig+0xc2c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	2b03      	cmp	r3, #3
 800740e:	d04c      	beq.n	80074aa <UART_SetConfig+0xc22>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007414:	2b04      	cmp	r3, #4
 8007416:	d043      	beq.n	80074a0 <UART_SetConfig+0xc18>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741c:	2b05      	cmp	r3, #5
 800741e:	d03a      	beq.n	8007496 <UART_SetConfig+0xc0e>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	2b06      	cmp	r3, #6
 8007426:	d031      	beq.n	800748c <UART_SetConfig+0xc04>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	2b07      	cmp	r3, #7
 800742e:	d028      	beq.n	8007482 <UART_SetConfig+0xbfa>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	2b08      	cmp	r3, #8
 8007436:	d01f      	beq.n	8007478 <UART_SetConfig+0xbf0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2b09      	cmp	r3, #9
 800743e:	d016      	beq.n	800746e <UART_SetConfig+0xbe6>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	2b0a      	cmp	r3, #10
 8007446:	d00d      	beq.n	8007464 <UART_SetConfig+0xbdc>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744c:	2b0b      	cmp	r3, #11
 800744e:	d104      	bne.n	800745a <UART_SetConfig+0xbd2>
 8007450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007454:	f04f 0400 	mov.w	r4, #0
 8007458:	e03a      	b.n	80074d0 <UART_SetConfig+0xc48>
 800745a:	f04f 0301 	mov.w	r3, #1
 800745e:	f04f 0400 	mov.w	r4, #0
 8007462:	e035      	b.n	80074d0 <UART_SetConfig+0xc48>
 8007464:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007468:	f04f 0400 	mov.w	r4, #0
 800746c:	e030      	b.n	80074d0 <UART_SetConfig+0xc48>
 800746e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007472:	f04f 0400 	mov.w	r4, #0
 8007476:	e02b      	b.n	80074d0 <UART_SetConfig+0xc48>
 8007478:	f04f 0320 	mov.w	r3, #32
 800747c:	f04f 0400 	mov.w	r4, #0
 8007480:	e026      	b.n	80074d0 <UART_SetConfig+0xc48>
 8007482:	f04f 0310 	mov.w	r3, #16
 8007486:	f04f 0400 	mov.w	r4, #0
 800748a:	e021      	b.n	80074d0 <UART_SetConfig+0xc48>
 800748c:	f04f 030c 	mov.w	r3, #12
 8007490:	f04f 0400 	mov.w	r4, #0
 8007494:	e01c      	b.n	80074d0 <UART_SetConfig+0xc48>
 8007496:	f04f 030a 	mov.w	r3, #10
 800749a:	f04f 0400 	mov.w	r4, #0
 800749e:	e017      	b.n	80074d0 <UART_SetConfig+0xc48>
 80074a0:	f04f 0308 	mov.w	r3, #8
 80074a4:	f04f 0400 	mov.w	r4, #0
 80074a8:	e012      	b.n	80074d0 <UART_SetConfig+0xc48>
 80074aa:	f04f 0306 	mov.w	r3, #6
 80074ae:	f04f 0400 	mov.w	r4, #0
 80074b2:	e00d      	b.n	80074d0 <UART_SetConfig+0xc48>
 80074b4:	f04f 0304 	mov.w	r3, #4
 80074b8:	f04f 0400 	mov.w	r4, #0
 80074bc:	e008      	b.n	80074d0 <UART_SetConfig+0xc48>
 80074be:	f04f 0302 	mov.w	r3, #2
 80074c2:	f04f 0400 	mov.w	r4, #0
 80074c6:	e003      	b.n	80074d0 <UART_SetConfig+0xc48>
 80074c8:	f04f 0301 	mov.w	r3, #1
 80074cc:	f04f 0400 	mov.w	r4, #0
 80074d0:	461a      	mov	r2, r3
 80074d2:	4623      	mov	r3, r4
 80074d4:	f7f8 ff00 	bl	80002d8 <__aeabi_uldivmod>
 80074d8:	4603      	mov	r3, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	4619      	mov	r1, r3
 80074de:	4622      	mov	r2, r4
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	f04f 0400 	mov.w	r4, #0
 80074e8:	0214      	lsls	r4, r2, #8
 80074ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80074ee:	020b      	lsls	r3, r1, #8
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6852      	ldr	r2, [r2, #4]
 80074f4:	0852      	lsrs	r2, r2, #1
 80074f6:	4611      	mov	r1, r2
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	eb13 0b01 	adds.w	fp, r3, r1
 8007500:	eb44 0c02 	adc.w	ip, r4, r2
 8007504:	4658      	mov	r0, fp
 8007506:	4661      	mov	r1, ip
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f04f 0400 	mov.w	r4, #0
 8007510:	461a      	mov	r2, r3
 8007512:	4623      	mov	r3, r4
 8007514:	f7f8 fee0 	bl	80002d8 <__aeabi_uldivmod>
 8007518:	4603      	mov	r3, r0
 800751a:	460c      	mov	r4, r1
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800751e:	e389      	b.n	8007c34 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007520:	f107 0318 	add.w	r3, r7, #24
 8007524:	4618      	mov	r0, r3
 8007526:	f7fd fac9 	bl	8004abc <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4618      	mov	r0, r3
 800752e:	f04f 0100 	mov.w	r1, #0
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007536:	2b00      	cmp	r3, #0
 8007538:	d067      	beq.n	800760a <UART_SetConfig+0xd82>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753e:	2b01      	cmp	r3, #1
 8007540:	d05e      	beq.n	8007600 <UART_SetConfig+0xd78>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007546:	2b02      	cmp	r3, #2
 8007548:	d055      	beq.n	80075f6 <UART_SetConfig+0xd6e>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	2b03      	cmp	r3, #3
 8007550:	d04c      	beq.n	80075ec <UART_SetConfig+0xd64>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007556:	2b04      	cmp	r3, #4
 8007558:	d043      	beq.n	80075e2 <UART_SetConfig+0xd5a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755e:	2b05      	cmp	r3, #5
 8007560:	d03a      	beq.n	80075d8 <UART_SetConfig+0xd50>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	2b06      	cmp	r3, #6
 8007568:	d031      	beq.n	80075ce <UART_SetConfig+0xd46>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	2b07      	cmp	r3, #7
 8007570:	d028      	beq.n	80075c4 <UART_SetConfig+0xd3c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	2b08      	cmp	r3, #8
 8007578:	d01f      	beq.n	80075ba <UART_SetConfig+0xd32>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b09      	cmp	r3, #9
 8007580:	d016      	beq.n	80075b0 <UART_SetConfig+0xd28>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	2b0a      	cmp	r3, #10
 8007588:	d00d      	beq.n	80075a6 <UART_SetConfig+0xd1e>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	2b0b      	cmp	r3, #11
 8007590:	d104      	bne.n	800759c <UART_SetConfig+0xd14>
 8007592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007596:	f04f 0400 	mov.w	r4, #0
 800759a:	e03a      	b.n	8007612 <UART_SetConfig+0xd8a>
 800759c:	f04f 0301 	mov.w	r3, #1
 80075a0:	f04f 0400 	mov.w	r4, #0
 80075a4:	e035      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075a6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80075aa:	f04f 0400 	mov.w	r4, #0
 80075ae:	e030      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80075b4:	f04f 0400 	mov.w	r4, #0
 80075b8:	e02b      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075ba:	f04f 0320 	mov.w	r3, #32
 80075be:	f04f 0400 	mov.w	r4, #0
 80075c2:	e026      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075c4:	f04f 0310 	mov.w	r3, #16
 80075c8:	f04f 0400 	mov.w	r4, #0
 80075cc:	e021      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075ce:	f04f 030c 	mov.w	r3, #12
 80075d2:	f04f 0400 	mov.w	r4, #0
 80075d6:	e01c      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075d8:	f04f 030a 	mov.w	r3, #10
 80075dc:	f04f 0400 	mov.w	r4, #0
 80075e0:	e017      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075e2:	f04f 0308 	mov.w	r3, #8
 80075e6:	f04f 0400 	mov.w	r4, #0
 80075ea:	e012      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075ec:	f04f 0306 	mov.w	r3, #6
 80075f0:	f04f 0400 	mov.w	r4, #0
 80075f4:	e00d      	b.n	8007612 <UART_SetConfig+0xd8a>
 80075f6:	f04f 0304 	mov.w	r3, #4
 80075fa:	f04f 0400 	mov.w	r4, #0
 80075fe:	e008      	b.n	8007612 <UART_SetConfig+0xd8a>
 8007600:	f04f 0302 	mov.w	r3, #2
 8007604:	f04f 0400 	mov.w	r4, #0
 8007608:	e003      	b.n	8007612 <UART_SetConfig+0xd8a>
 800760a:	f04f 0301 	mov.w	r3, #1
 800760e:	f04f 0400 	mov.w	r4, #0
 8007612:	461a      	mov	r2, r3
 8007614:	4623      	mov	r3, r4
 8007616:	f7f8 fe5f 	bl	80002d8 <__aeabi_uldivmod>
 800761a:	4603      	mov	r3, r0
 800761c:	460c      	mov	r4, r1
 800761e:	4619      	mov	r1, r3
 8007620:	4622      	mov	r2, r4
 8007622:	f04f 0300 	mov.w	r3, #0
 8007626:	f04f 0400 	mov.w	r4, #0
 800762a:	0214      	lsls	r4, r2, #8
 800762c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007630:	020b      	lsls	r3, r1, #8
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	6852      	ldr	r2, [r2, #4]
 8007636:	0852      	lsrs	r2, r2, #1
 8007638:	4611      	mov	r1, r2
 800763a:	f04f 0200 	mov.w	r2, #0
 800763e:	eb13 0b01 	adds.w	fp, r3, r1
 8007642:	eb44 0c02 	adc.w	ip, r4, r2
 8007646:	4658      	mov	r0, fp
 8007648:	4661      	mov	r1, ip
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f04f 0400 	mov.w	r4, #0
 8007652:	461a      	mov	r2, r3
 8007654:	4623      	mov	r3, r4
 8007656:	f7f8 fe3f 	bl	80002d8 <__aeabi_uldivmod>
 800765a:	4603      	mov	r3, r0
 800765c:	460c      	mov	r4, r1
 800765e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007660:	e2e8      	b.n	8007c34 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007662:	f107 030c 	add.w	r3, r7, #12
 8007666:	4618      	mov	r0, r3
 8007668:	f7fd fb74 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4618      	mov	r0, r3
 8007670:	f04f 0100 	mov.w	r1, #0
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d067      	beq.n	800774c <UART_SetConfig+0xec4>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	2b01      	cmp	r3, #1
 8007682:	d05e      	beq.n	8007742 <UART_SetConfig+0xeba>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	2b02      	cmp	r3, #2
 800768a:	d055      	beq.n	8007738 <UART_SetConfig+0xeb0>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007690:	2b03      	cmp	r3, #3
 8007692:	d04c      	beq.n	800772e <UART_SetConfig+0xea6>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	2b04      	cmp	r3, #4
 800769a:	d043      	beq.n	8007724 <UART_SetConfig+0xe9c>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a0:	2b05      	cmp	r3, #5
 80076a2:	d03a      	beq.n	800771a <UART_SetConfig+0xe92>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a8:	2b06      	cmp	r3, #6
 80076aa:	d031      	beq.n	8007710 <UART_SetConfig+0xe88>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	2b07      	cmp	r3, #7
 80076b2:	d028      	beq.n	8007706 <UART_SetConfig+0xe7e>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	d01f      	beq.n	80076fc <UART_SetConfig+0xe74>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	2b09      	cmp	r3, #9
 80076c2:	d016      	beq.n	80076f2 <UART_SetConfig+0xe6a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	2b0a      	cmp	r3, #10
 80076ca:	d00d      	beq.n	80076e8 <UART_SetConfig+0xe60>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d0:	2b0b      	cmp	r3, #11
 80076d2:	d104      	bne.n	80076de <UART_SetConfig+0xe56>
 80076d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076d8:	f04f 0400 	mov.w	r4, #0
 80076dc:	e03a      	b.n	8007754 <UART_SetConfig+0xecc>
 80076de:	f04f 0301 	mov.w	r3, #1
 80076e2:	f04f 0400 	mov.w	r4, #0
 80076e6:	e035      	b.n	8007754 <UART_SetConfig+0xecc>
 80076e8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076ec:	f04f 0400 	mov.w	r4, #0
 80076f0:	e030      	b.n	8007754 <UART_SetConfig+0xecc>
 80076f2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80076f6:	f04f 0400 	mov.w	r4, #0
 80076fa:	e02b      	b.n	8007754 <UART_SetConfig+0xecc>
 80076fc:	f04f 0320 	mov.w	r3, #32
 8007700:	f04f 0400 	mov.w	r4, #0
 8007704:	e026      	b.n	8007754 <UART_SetConfig+0xecc>
 8007706:	f04f 0310 	mov.w	r3, #16
 800770a:	f04f 0400 	mov.w	r4, #0
 800770e:	e021      	b.n	8007754 <UART_SetConfig+0xecc>
 8007710:	f04f 030c 	mov.w	r3, #12
 8007714:	f04f 0400 	mov.w	r4, #0
 8007718:	e01c      	b.n	8007754 <UART_SetConfig+0xecc>
 800771a:	f04f 030a 	mov.w	r3, #10
 800771e:	f04f 0400 	mov.w	r4, #0
 8007722:	e017      	b.n	8007754 <UART_SetConfig+0xecc>
 8007724:	f04f 0308 	mov.w	r3, #8
 8007728:	f04f 0400 	mov.w	r4, #0
 800772c:	e012      	b.n	8007754 <UART_SetConfig+0xecc>
 800772e:	f04f 0306 	mov.w	r3, #6
 8007732:	f04f 0400 	mov.w	r4, #0
 8007736:	e00d      	b.n	8007754 <UART_SetConfig+0xecc>
 8007738:	f04f 0304 	mov.w	r3, #4
 800773c:	f04f 0400 	mov.w	r4, #0
 8007740:	e008      	b.n	8007754 <UART_SetConfig+0xecc>
 8007742:	f04f 0302 	mov.w	r3, #2
 8007746:	f04f 0400 	mov.w	r4, #0
 800774a:	e003      	b.n	8007754 <UART_SetConfig+0xecc>
 800774c:	f04f 0301 	mov.w	r3, #1
 8007750:	f04f 0400 	mov.w	r4, #0
 8007754:	461a      	mov	r2, r3
 8007756:	4623      	mov	r3, r4
 8007758:	f7f8 fdbe 	bl	80002d8 <__aeabi_uldivmod>
 800775c:	4603      	mov	r3, r0
 800775e:	460c      	mov	r4, r1
 8007760:	4619      	mov	r1, r3
 8007762:	4622      	mov	r2, r4
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	f04f 0400 	mov.w	r4, #0
 800776c:	0214      	lsls	r4, r2, #8
 800776e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007772:	020b      	lsls	r3, r1, #8
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	6852      	ldr	r2, [r2, #4]
 8007778:	0852      	lsrs	r2, r2, #1
 800777a:	4611      	mov	r1, r2
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	eb13 0b01 	adds.w	fp, r3, r1
 8007784:	eb44 0c02 	adc.w	ip, r4, r2
 8007788:	4658      	mov	r0, fp
 800778a:	4661      	mov	r1, ip
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f04f 0400 	mov.w	r4, #0
 8007794:	461a      	mov	r2, r3
 8007796:	4623      	mov	r3, r4
 8007798:	f7f8 fd9e 	bl	80002d8 <__aeabi_uldivmod>
 800779c:	4603      	mov	r3, r0
 800779e:	460c      	mov	r4, r1
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077a2:	e247      	b.n	8007c34 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077a4:	4b96      	ldr	r3, [pc, #600]	; (8007a00 <UART_SetConfig+0x1178>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80a3 	beq.w	80078f8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077b2:	4b93      	ldr	r3, [pc, #588]	; (8007a00 <UART_SetConfig+0x1178>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	08db      	lsrs	r3, r3, #3
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	4a91      	ldr	r2, [pc, #580]	; (8007a04 <UART_SetConfig+0x117c>)
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	4618      	mov	r0, r3
 80077c4:	f04f 0100 	mov.w	r1, #0
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d067      	beq.n	80078a0 <UART_SetConfig+0x1018>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d05e      	beq.n	8007896 <UART_SetConfig+0x100e>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d055      	beq.n	800788c <UART_SetConfig+0x1004>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d04c      	beq.n	8007882 <UART_SetConfig+0xffa>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d043      	beq.n	8007878 <UART_SetConfig+0xff0>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	2b05      	cmp	r3, #5
 80077f6:	d03a      	beq.n	800786e <UART_SetConfig+0xfe6>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b06      	cmp	r3, #6
 80077fe:	d031      	beq.n	8007864 <UART_SetConfig+0xfdc>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	2b07      	cmp	r3, #7
 8007806:	d028      	beq.n	800785a <UART_SetConfig+0xfd2>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780c:	2b08      	cmp	r3, #8
 800780e:	d01f      	beq.n	8007850 <UART_SetConfig+0xfc8>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	2b09      	cmp	r3, #9
 8007816:	d016      	beq.n	8007846 <UART_SetConfig+0xfbe>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	2b0a      	cmp	r3, #10
 800781e:	d00d      	beq.n	800783c <UART_SetConfig+0xfb4>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	2b0b      	cmp	r3, #11
 8007826:	d104      	bne.n	8007832 <UART_SetConfig+0xfaa>
 8007828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800782c:	f04f 0400 	mov.w	r4, #0
 8007830:	e03a      	b.n	80078a8 <UART_SetConfig+0x1020>
 8007832:	f04f 0301 	mov.w	r3, #1
 8007836:	f04f 0400 	mov.w	r4, #0
 800783a:	e035      	b.n	80078a8 <UART_SetConfig+0x1020>
 800783c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007840:	f04f 0400 	mov.w	r4, #0
 8007844:	e030      	b.n	80078a8 <UART_SetConfig+0x1020>
 8007846:	f04f 0340 	mov.w	r3, #64	; 0x40
 800784a:	f04f 0400 	mov.w	r4, #0
 800784e:	e02b      	b.n	80078a8 <UART_SetConfig+0x1020>
 8007850:	f04f 0320 	mov.w	r3, #32
 8007854:	f04f 0400 	mov.w	r4, #0
 8007858:	e026      	b.n	80078a8 <UART_SetConfig+0x1020>
 800785a:	f04f 0310 	mov.w	r3, #16
 800785e:	f04f 0400 	mov.w	r4, #0
 8007862:	e021      	b.n	80078a8 <UART_SetConfig+0x1020>
 8007864:	f04f 030c 	mov.w	r3, #12
 8007868:	f04f 0400 	mov.w	r4, #0
 800786c:	e01c      	b.n	80078a8 <UART_SetConfig+0x1020>
 800786e:	f04f 030a 	mov.w	r3, #10
 8007872:	f04f 0400 	mov.w	r4, #0
 8007876:	e017      	b.n	80078a8 <UART_SetConfig+0x1020>
 8007878:	f04f 0308 	mov.w	r3, #8
 800787c:	f04f 0400 	mov.w	r4, #0
 8007880:	e012      	b.n	80078a8 <UART_SetConfig+0x1020>
 8007882:	f04f 0306 	mov.w	r3, #6
 8007886:	f04f 0400 	mov.w	r4, #0
 800788a:	e00d      	b.n	80078a8 <UART_SetConfig+0x1020>
 800788c:	f04f 0304 	mov.w	r3, #4
 8007890:	f04f 0400 	mov.w	r4, #0
 8007894:	e008      	b.n	80078a8 <UART_SetConfig+0x1020>
 8007896:	f04f 0302 	mov.w	r3, #2
 800789a:	f04f 0400 	mov.w	r4, #0
 800789e:	e003      	b.n	80078a8 <UART_SetConfig+0x1020>
 80078a0:	f04f 0301 	mov.w	r3, #1
 80078a4:	f04f 0400 	mov.w	r4, #0
 80078a8:	461a      	mov	r2, r3
 80078aa:	4623      	mov	r3, r4
 80078ac:	f7f8 fd14 	bl	80002d8 <__aeabi_uldivmod>
 80078b0:	4603      	mov	r3, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	4619      	mov	r1, r3
 80078b6:	4622      	mov	r2, r4
 80078b8:	f04f 0300 	mov.w	r3, #0
 80078bc:	f04f 0400 	mov.w	r4, #0
 80078c0:	0214      	lsls	r4, r2, #8
 80078c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80078c6:	020b      	lsls	r3, r1, #8
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	6852      	ldr	r2, [r2, #4]
 80078cc:	0852      	lsrs	r2, r2, #1
 80078ce:	4611      	mov	r1, r2
 80078d0:	f04f 0200 	mov.w	r2, #0
 80078d4:	eb13 0b01 	adds.w	fp, r3, r1
 80078d8:	eb44 0c02 	adc.w	ip, r4, r2
 80078dc:	4658      	mov	r0, fp
 80078de:	4661      	mov	r1, ip
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	f04f 0400 	mov.w	r4, #0
 80078e8:	461a      	mov	r2, r3
 80078ea:	4623      	mov	r3, r4
 80078ec:	f7f8 fcf4 	bl	80002d8 <__aeabi_uldivmod>
 80078f0:	4603      	mov	r3, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80078f6:	e19d      	b.n	8007c34 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d05b      	beq.n	80079b8 <UART_SetConfig+0x1130>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	2b01      	cmp	r3, #1
 8007906:	d053      	beq.n	80079b0 <UART_SetConfig+0x1128>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	2b02      	cmp	r3, #2
 800790e:	d04b      	beq.n	80079a8 <UART_SetConfig+0x1120>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	2b03      	cmp	r3, #3
 8007916:	d043      	beq.n	80079a0 <UART_SetConfig+0x1118>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791c:	2b04      	cmp	r3, #4
 800791e:	d03b      	beq.n	8007998 <UART_SetConfig+0x1110>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	2b05      	cmp	r3, #5
 8007926:	d033      	beq.n	8007990 <UART_SetConfig+0x1108>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	2b06      	cmp	r3, #6
 800792e:	d02b      	beq.n	8007988 <UART_SetConfig+0x1100>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	2b07      	cmp	r3, #7
 8007936:	d023      	beq.n	8007980 <UART_SetConfig+0x10f8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	2b08      	cmp	r3, #8
 800793e:	d01b      	beq.n	8007978 <UART_SetConfig+0x10f0>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	2b09      	cmp	r3, #9
 8007946:	d013      	beq.n	8007970 <UART_SetConfig+0x10e8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794c:	2b0a      	cmp	r3, #10
 800794e:	d00b      	beq.n	8007968 <UART_SetConfig+0x10e0>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	2b0b      	cmp	r3, #11
 8007956:	d103      	bne.n	8007960 <UART_SetConfig+0x10d8>
 8007958:	4b2a      	ldr	r3, [pc, #168]	; (8007a04 <UART_SetConfig+0x117c>)
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	e02e      	b.n	80079be <UART_SetConfig+0x1136>
 8007960:	4b29      	ldr	r3, [pc, #164]	; (8007a08 <UART_SetConfig+0x1180>)
 8007962:	f04f 0403 	mov.w	r4, #3
 8007966:	e02a      	b.n	80079be <UART_SetConfig+0x1136>
 8007968:	4b28      	ldr	r3, [pc, #160]	; (8007a0c <UART_SetConfig+0x1184>)
 800796a:	f04f 0400 	mov.w	r4, #0
 800796e:	e026      	b.n	80079be <UART_SetConfig+0x1136>
 8007970:	4b27      	ldr	r3, [pc, #156]	; (8007a10 <UART_SetConfig+0x1188>)
 8007972:	f04f 0400 	mov.w	r4, #0
 8007976:	e022      	b.n	80079be <UART_SetConfig+0x1136>
 8007978:	4b26      	ldr	r3, [pc, #152]	; (8007a14 <UART_SetConfig+0x118c>)
 800797a:	f04f 0400 	mov.w	r4, #0
 800797e:	e01e      	b.n	80079be <UART_SetConfig+0x1136>
 8007980:	4b25      	ldr	r3, [pc, #148]	; (8007a18 <UART_SetConfig+0x1190>)
 8007982:	f04f 0400 	mov.w	r4, #0
 8007986:	e01a      	b.n	80079be <UART_SetConfig+0x1136>
 8007988:	a419      	add	r4, pc, #100	; (adr r4, 80079f0 <UART_SetConfig+0x1168>)
 800798a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800798e:	e016      	b.n	80079be <UART_SetConfig+0x1136>
 8007990:	4b22      	ldr	r3, [pc, #136]	; (8007a1c <UART_SetConfig+0x1194>)
 8007992:	f04f 0400 	mov.w	r4, #0
 8007996:	e012      	b.n	80079be <UART_SetConfig+0x1136>
 8007998:	4b21      	ldr	r3, [pc, #132]	; (8007a20 <UART_SetConfig+0x1198>)
 800799a:	f04f 0400 	mov.w	r4, #0
 800799e:	e00e      	b.n	80079be <UART_SetConfig+0x1136>
 80079a0:	a415      	add	r4, pc, #84	; (adr r4, 80079f8 <UART_SetConfig+0x1170>)
 80079a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80079a6:	e00a      	b.n	80079be <UART_SetConfig+0x1136>
 80079a8:	4b1e      	ldr	r3, [pc, #120]	; (8007a24 <UART_SetConfig+0x119c>)
 80079aa:	f04f 0400 	mov.w	r4, #0
 80079ae:	e006      	b.n	80079be <UART_SetConfig+0x1136>
 80079b0:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <UART_SetConfig+0x11a0>)
 80079b2:	f04f 0401 	mov.w	r4, #1
 80079b6:	e002      	b.n	80079be <UART_SetConfig+0x1136>
 80079b8:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <UART_SetConfig+0x1180>)
 80079ba:	f04f 0403 	mov.w	r4, #3
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6852      	ldr	r2, [r2, #4]
 80079c2:	0852      	lsrs	r2, r2, #1
 80079c4:	4611      	mov	r1, r2
 80079c6:	f04f 0200 	mov.w	r2, #0
 80079ca:	eb13 0b01 	adds.w	fp, r3, r1
 80079ce:	eb44 0c02 	adc.w	ip, r4, r2
 80079d2:	4658      	mov	r0, fp
 80079d4:	4661      	mov	r1, ip
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f04f 0400 	mov.w	r4, #0
 80079de:	461a      	mov	r2, r3
 80079e0:	4623      	mov	r3, r4
 80079e2:	f7f8 fc79 	bl	80002d8 <__aeabi_uldivmod>
 80079e6:	4603      	mov	r3, r0
 80079e8:	460c      	mov	r4, r1
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079ec:	e122      	b.n	8007c34 <UART_SetConfig+0x13ac>
 80079ee:	bf00      	nop
 80079f0:	51615500 	.word	0x51615500
 80079f4:	00000000 	.word	0x00000000
 80079f8:	a2c2aa00 	.word	0xa2c2aa00
 80079fc:	00000000 	.word	0x00000000
 8007a00:	58024400 	.word	0x58024400
 8007a04:	03d09000 	.word	0x03d09000
 8007a08:	d0900000 	.word	0xd0900000
 8007a0c:	07a12000 	.word	0x07a12000
 8007a10:	0f424000 	.word	0x0f424000
 8007a14:	1e848000 	.word	0x1e848000
 8007a18:	3d090000 	.word	0x3d090000
 8007a1c:	61a80000 	.word	0x61a80000
 8007a20:	7a120000 	.word	0x7a120000
 8007a24:	f4240000 	.word	0xf4240000
 8007a28:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d05b      	beq.n	8007aec <UART_SetConfig+0x1264>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d053      	beq.n	8007ae4 <UART_SetConfig+0x125c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d04b      	beq.n	8007adc <UART_SetConfig+0x1254>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d043      	beq.n	8007ad4 <UART_SetConfig+0x124c>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d03b      	beq.n	8007acc <UART_SetConfig+0x1244>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	d033      	beq.n	8007ac4 <UART_SetConfig+0x123c>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	2b06      	cmp	r3, #6
 8007a62:	d02b      	beq.n	8007abc <UART_SetConfig+0x1234>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a68:	2b07      	cmp	r3, #7
 8007a6a:	d023      	beq.n	8007ab4 <UART_SetConfig+0x122c>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	d01b      	beq.n	8007aac <UART_SetConfig+0x1224>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	2b09      	cmp	r3, #9
 8007a7a:	d013      	beq.n	8007aa4 <UART_SetConfig+0x121c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b0a      	cmp	r3, #10
 8007a82:	d00b      	beq.n	8007a9c <UART_SetConfig+0x1214>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	2b0b      	cmp	r3, #11
 8007a8a:	d103      	bne.n	8007a94 <UART_SetConfig+0x120c>
 8007a8c:	4bc0      	ldr	r3, [pc, #768]	; (8007d90 <UART_SetConfig+0x1508>)
 8007a8e:	f04f 0400 	mov.w	r4, #0
 8007a92:	e02e      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007a94:	4bbf      	ldr	r3, [pc, #764]	; (8007d94 <UART_SetConfig+0x150c>)
 8007a96:	f04f 0400 	mov.w	r4, #0
 8007a9a:	e02a      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007a9c:	4bbe      	ldr	r3, [pc, #760]	; (8007d98 <UART_SetConfig+0x1510>)
 8007a9e:	f04f 0400 	mov.w	r4, #0
 8007aa2:	e026      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007aa4:	4bbd      	ldr	r3, [pc, #756]	; (8007d9c <UART_SetConfig+0x1514>)
 8007aa6:	f04f 0400 	mov.w	r4, #0
 8007aaa:	e022      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007aac:	4bbc      	ldr	r3, [pc, #752]	; (8007da0 <UART_SetConfig+0x1518>)
 8007aae:	f04f 0400 	mov.w	r4, #0
 8007ab2:	e01e      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007ab4:	4bbb      	ldr	r3, [pc, #748]	; (8007da4 <UART_SetConfig+0x151c>)
 8007ab6:	f04f 0400 	mov.w	r4, #0
 8007aba:	e01a      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007abc:	a4b0      	add	r4, pc, #704	; (adr r4, 8007d80 <UART_SetConfig+0x14f8>)
 8007abe:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ac2:	e016      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007ac4:	4bb8      	ldr	r3, [pc, #736]	; (8007da8 <UART_SetConfig+0x1520>)
 8007ac6:	f04f 0400 	mov.w	r4, #0
 8007aca:	e012      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007acc:	4bb7      	ldr	r3, [pc, #732]	; (8007dac <UART_SetConfig+0x1524>)
 8007ace:	f04f 0400 	mov.w	r4, #0
 8007ad2:	e00e      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007ad4:	a4ac      	add	r4, pc, #688	; (adr r4, 8007d88 <UART_SetConfig+0x1500>)
 8007ad6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007ada:	e00a      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007adc:	4bb4      	ldr	r3, [pc, #720]	; (8007db0 <UART_SetConfig+0x1528>)
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	e006      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007ae4:	4bb3      	ldr	r3, [pc, #716]	; (8007db4 <UART_SetConfig+0x152c>)
 8007ae6:	f04f 0400 	mov.w	r4, #0
 8007aea:	e002      	b.n	8007af2 <UART_SetConfig+0x126a>
 8007aec:	4ba9      	ldr	r3, [pc, #676]	; (8007d94 <UART_SetConfig+0x150c>)
 8007aee:	f04f 0400 	mov.w	r4, #0
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	6852      	ldr	r2, [r2, #4]
 8007af6:	0852      	lsrs	r2, r2, #1
 8007af8:	4611      	mov	r1, r2
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	eb13 0b01 	adds.w	fp, r3, r1
 8007b02:	eb44 0c02 	adc.w	ip, r4, r2
 8007b06:	4658      	mov	r0, fp
 8007b08:	4661      	mov	r1, ip
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f04f 0400 	mov.w	r4, #0
 8007b12:	461a      	mov	r2, r3
 8007b14:	4623      	mov	r3, r4
 8007b16:	f7f8 fbdf 	bl	80002d8 <__aeabi_uldivmod>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b20:	e088      	b.n	8007c34 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d064      	beq.n	8007bf4 <UART_SetConfig+0x136c>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d05b      	beq.n	8007bea <UART_SetConfig+0x1362>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d052      	beq.n	8007be0 <UART_SetConfig+0x1358>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	d04a      	beq.n	8007bd8 <UART_SetConfig+0x1350>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d041      	beq.n	8007bce <UART_SetConfig+0x1346>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d039      	beq.n	8007bc6 <UART_SetConfig+0x133e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b56:	2b06      	cmp	r3, #6
 8007b58:	d031      	beq.n	8007bbe <UART_SetConfig+0x1336>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	2b07      	cmp	r3, #7
 8007b60:	d028      	beq.n	8007bb4 <UART_SetConfig+0x132c>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b66:	2b08      	cmp	r3, #8
 8007b68:	d01f      	beq.n	8007baa <UART_SetConfig+0x1322>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2b09      	cmp	r3, #9
 8007b70:	d016      	beq.n	8007ba0 <UART_SetConfig+0x1318>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b76:	2b0a      	cmp	r3, #10
 8007b78:	d00d      	beq.n	8007b96 <UART_SetConfig+0x130e>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	2b0b      	cmp	r3, #11
 8007b80:	d104      	bne.n	8007b8c <UART_SetConfig+0x1304>
 8007b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b86:	f04f 0400 	mov.w	r4, #0
 8007b8a:	e037      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007b8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007b90:	f04f 0400 	mov.w	r4, #0
 8007b94:	e032      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b9a:	f04f 0400 	mov.w	r4, #0
 8007b9e:	e02d      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007ba4:	f04f 0400 	mov.w	r4, #0
 8007ba8:	e028      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007baa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007bae:	f04f 0400 	mov.w	r4, #0
 8007bb2:	e023      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007bb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007bb8:	f04f 0400 	mov.w	r4, #0
 8007bbc:	e01e      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007bbe:	4b7e      	ldr	r3, [pc, #504]	; (8007db8 <UART_SetConfig+0x1530>)
 8007bc0:	f04f 0400 	mov.w	r4, #0
 8007bc4:	e01a      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007bc6:	4b7d      	ldr	r3, [pc, #500]	; (8007dbc <UART_SetConfig+0x1534>)
 8007bc8:	f04f 0400 	mov.w	r4, #0
 8007bcc:	e016      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007bce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007bd2:	f04f 0400 	mov.w	r4, #0
 8007bd6:	e011      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007bd8:	4b79      	ldr	r3, [pc, #484]	; (8007dc0 <UART_SetConfig+0x1538>)
 8007bda:	f04f 0400 	mov.w	r4, #0
 8007bde:	e00d      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007be4:	f04f 0400 	mov.w	r4, #0
 8007be8:	e008      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007bee:	f04f 0400 	mov.w	r4, #0
 8007bf2:	e003      	b.n	8007bfc <UART_SetConfig+0x1374>
 8007bf4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007bf8:	f04f 0400 	mov.w	r4, #0
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	6852      	ldr	r2, [r2, #4]
 8007c00:	0852      	lsrs	r2, r2, #1
 8007c02:	4611      	mov	r1, r2
 8007c04:	f04f 0200 	mov.w	r2, #0
 8007c08:	eb13 0b01 	adds.w	fp, r3, r1
 8007c0c:	eb44 0c02 	adc.w	ip, r4, r2
 8007c10:	4658      	mov	r0, fp
 8007c12:	4661      	mov	r1, ip
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f04f 0400 	mov.w	r4, #0
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4623      	mov	r3, r4
 8007c20:	f7f8 fb5a 	bl	80002d8 <__aeabi_uldivmod>
 8007c24:	4603      	mov	r3, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c2a:	e003      	b.n	8007c34 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007c32:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c3a:	d309      	bcc.n	8007c50 <UART_SetConfig+0x13c8>
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c42:	d205      	bcs.n	8007c50 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c4a:	60da      	str	r2, [r3, #12]
 8007c4c:	f000 bf85 	b.w	8008b5a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c56:	f000 bf80 	b.w	8008b5a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c62:	f040 83da 	bne.w	800841a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007c66:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007c6a:	2b40      	cmp	r3, #64	; 0x40
 8007c6c:	f200 83b3 	bhi.w	80083d6 <UART_SetConfig+0x1b4e>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <UART_SetConfig+0x13f0>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007dc5 	.word	0x08007dc5
 8007c7c:	08007e7d 	.word	0x08007e7d
 8007c80:	080083d7 	.word	0x080083d7
 8007c84:	080083d7 	.word	0x080083d7
 8007c88:	08007f35 	.word	0x08007f35
 8007c8c:	080083d7 	.word	0x080083d7
 8007c90:	080083d7 	.word	0x080083d7
 8007c94:	080083d7 	.word	0x080083d7
 8007c98:	08007ff1 	.word	0x08007ff1
 8007c9c:	080083d7 	.word	0x080083d7
 8007ca0:	080083d7 	.word	0x080083d7
 8007ca4:	080083d7 	.word	0x080083d7
 8007ca8:	080083d7 	.word	0x080083d7
 8007cac:	080083d7 	.word	0x080083d7
 8007cb0:	080083d7 	.word	0x080083d7
 8007cb4:	080083d7 	.word	0x080083d7
 8007cb8:	080080ad 	.word	0x080080ad
 8007cbc:	080083d7 	.word	0x080083d7
 8007cc0:	080083d7 	.word	0x080083d7
 8007cc4:	080083d7 	.word	0x080083d7
 8007cc8:	080083d7 	.word	0x080083d7
 8007ccc:	080083d7 	.word	0x080083d7
 8007cd0:	080083d7 	.word	0x080083d7
 8007cd4:	080083d7 	.word	0x080083d7
 8007cd8:	080083d7 	.word	0x080083d7
 8007cdc:	080083d7 	.word	0x080083d7
 8007ce0:	080083d7 	.word	0x080083d7
 8007ce4:	080083d7 	.word	0x080083d7
 8007ce8:	080083d7 	.word	0x080083d7
 8007cec:	080083d7 	.word	0x080083d7
 8007cf0:	080083d7 	.word	0x080083d7
 8007cf4:	080083d7 	.word	0x080083d7
 8007cf8:	0800821f 	.word	0x0800821f
 8007cfc:	080083d7 	.word	0x080083d7
 8007d00:	080083d7 	.word	0x080083d7
 8007d04:	080083d7 	.word	0x080083d7
 8007d08:	080083d7 	.word	0x080083d7
 8007d0c:	080083d7 	.word	0x080083d7
 8007d10:	080083d7 	.word	0x080083d7
 8007d14:	080083d7 	.word	0x080083d7
 8007d18:	080083d7 	.word	0x080083d7
 8007d1c:	080083d7 	.word	0x080083d7
 8007d20:	080083d7 	.word	0x080083d7
 8007d24:	080083d7 	.word	0x080083d7
 8007d28:	080083d7 	.word	0x080083d7
 8007d2c:	080083d7 	.word	0x080083d7
 8007d30:	080083d7 	.word	0x080083d7
 8007d34:	080083d7 	.word	0x080083d7
 8007d38:	080083d7 	.word	0x080083d7
 8007d3c:	080083d7 	.word	0x080083d7
 8007d40:	080083d7 	.word	0x080083d7
 8007d44:	080083d7 	.word	0x080083d7
 8007d48:	080083d7 	.word	0x080083d7
 8007d4c:	080083d7 	.word	0x080083d7
 8007d50:	080083d7 	.word	0x080083d7
 8007d54:	080083d7 	.word	0x080083d7
 8007d58:	080083d7 	.word	0x080083d7
 8007d5c:	080083d7 	.word	0x080083d7
 8007d60:	080083d7 	.word	0x080083d7
 8007d64:	080083d7 	.word	0x080083d7
 8007d68:	080083d7 	.word	0x080083d7
 8007d6c:	080083d7 	.word	0x080083d7
 8007d70:	080083d7 	.word	0x080083d7
 8007d74:	080083d7 	.word	0x080083d7
 8007d78:	08008315 	.word	0x08008315
 8007d7c:	f3af 8000 	nop.w
 8007d80:	05161500 	.word	0x05161500
 8007d84:	00000000 	.word	0x00000000
 8007d88:	0a2c2a00 	.word	0x0a2c2a00
 8007d8c:	00000000 	.word	0x00000000
 8007d90:	003d0900 	.word	0x003d0900
 8007d94:	3d090000 	.word	0x3d090000
 8007d98:	007a1200 	.word	0x007a1200
 8007d9c:	00f42400 	.word	0x00f42400
 8007da0:	01e84800 	.word	0x01e84800
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	061a8000 	.word	0x061a8000
 8007dac:	07a12000 	.word	0x07a12000
 8007db0:	0f424000 	.word	0x0f424000
 8007db4:	1e848000 	.word	0x1e848000
 8007db8:	000aaa00 	.word	0x000aaa00
 8007dbc:	000ccc00 	.word	0x000ccc00
 8007dc0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fb ff48 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d044      	beq.n	8007e5c <UART_SetConfig+0x15d4>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d03e      	beq.n	8007e58 <UART_SetConfig+0x15d0>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d038      	beq.n	8007e54 <UART_SetConfig+0x15cc>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d032      	beq.n	8007e50 <UART_SetConfig+0x15c8>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d02c      	beq.n	8007e4c <UART_SetConfig+0x15c4>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	d026      	beq.n	8007e48 <UART_SetConfig+0x15c0>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b06      	cmp	r3, #6
 8007e00:	d020      	beq.n	8007e44 <UART_SetConfig+0x15bc>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	2b07      	cmp	r3, #7
 8007e08:	d01a      	beq.n	8007e40 <UART_SetConfig+0x15b8>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d014      	beq.n	8007e3c <UART_SetConfig+0x15b4>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	2b09      	cmp	r3, #9
 8007e18:	d00e      	beq.n	8007e38 <UART_SetConfig+0x15b0>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	2b0a      	cmp	r3, #10
 8007e20:	d008      	beq.n	8007e34 <UART_SetConfig+0x15ac>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	2b0b      	cmp	r3, #11
 8007e28:	d102      	bne.n	8007e30 <UART_SetConfig+0x15a8>
 8007e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e2e:	e016      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e014      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	e012      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e38:	2340      	movs	r3, #64	; 0x40
 8007e3a:	e010      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e3c:	2320      	movs	r3, #32
 8007e3e:	e00e      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e40:	2310      	movs	r3, #16
 8007e42:	e00c      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e44:	230c      	movs	r3, #12
 8007e46:	e00a      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e48:	230a      	movs	r3, #10
 8007e4a:	e008      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e4c:	2308      	movs	r3, #8
 8007e4e:	e006      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e50:	2306      	movs	r3, #6
 8007e52:	e004      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e54:	2304      	movs	r3, #4
 8007e56:	e002      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e000      	b.n	8007e5e <UART_SetConfig+0x15d6>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e64:	005a      	lsls	r2, r3, #1
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	441a      	add	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e7a:	e2b0      	b.n	80083de <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e7c:	f7fb ff02 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 8007e80:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d044      	beq.n	8007f14 <UART_SetConfig+0x168c>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d03e      	beq.n	8007f10 <UART_SetConfig+0x1688>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d038      	beq.n	8007f0c <UART_SetConfig+0x1684>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d032      	beq.n	8007f08 <UART_SetConfig+0x1680>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d02c      	beq.n	8007f04 <UART_SetConfig+0x167c>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	2b05      	cmp	r3, #5
 8007eb0:	d026      	beq.n	8007f00 <UART_SetConfig+0x1678>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	2b06      	cmp	r3, #6
 8007eb8:	d020      	beq.n	8007efc <UART_SetConfig+0x1674>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	2b07      	cmp	r3, #7
 8007ec0:	d01a      	beq.n	8007ef8 <UART_SetConfig+0x1670>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d014      	beq.n	8007ef4 <UART_SetConfig+0x166c>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b09      	cmp	r3, #9
 8007ed0:	d00e      	beq.n	8007ef0 <UART_SetConfig+0x1668>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed6:	2b0a      	cmp	r3, #10
 8007ed8:	d008      	beq.n	8007eec <UART_SetConfig+0x1664>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	2b0b      	cmp	r3, #11
 8007ee0:	d102      	bne.n	8007ee8 <UART_SetConfig+0x1660>
 8007ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ee6:	e016      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e014      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007eec:	2380      	movs	r3, #128	; 0x80
 8007eee:	e012      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	e010      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007ef4:	2320      	movs	r3, #32
 8007ef6:	e00e      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007ef8:	2310      	movs	r3, #16
 8007efa:	e00c      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007efc:	230c      	movs	r3, #12
 8007efe:	e00a      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007f00:	230a      	movs	r3, #10
 8007f02:	e008      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007f04:	2308      	movs	r3, #8
 8007f06:	e006      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007f08:	2306      	movs	r3, #6
 8007f0a:	e004      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007f0c:	2304      	movs	r3, #4
 8007f0e:	e002      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e000      	b.n	8007f16 <UART_SetConfig+0x168e>
 8007f14:	2301      	movs	r3, #1
 8007f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1c:	005a      	lsls	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	085b      	lsrs	r3, r3, #1
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f32:	e254      	b.n	80083de <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f34:	f107 0318 	add.w	r3, r7, #24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fc fdbf 	bl	8004abc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d044      	beq.n	8007fd2 <UART_SetConfig+0x174a>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d03e      	beq.n	8007fce <UART_SetConfig+0x1746>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d038      	beq.n	8007fca <UART_SetConfig+0x1742>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d032      	beq.n	8007fc6 <UART_SetConfig+0x173e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d02c      	beq.n	8007fc2 <UART_SetConfig+0x173a>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	2b05      	cmp	r3, #5
 8007f6e:	d026      	beq.n	8007fbe <UART_SetConfig+0x1736>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b06      	cmp	r3, #6
 8007f76:	d020      	beq.n	8007fba <UART_SetConfig+0x1732>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7c:	2b07      	cmp	r3, #7
 8007f7e:	d01a      	beq.n	8007fb6 <UART_SetConfig+0x172e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d014      	beq.n	8007fb2 <UART_SetConfig+0x172a>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	2b09      	cmp	r3, #9
 8007f8e:	d00e      	beq.n	8007fae <UART_SetConfig+0x1726>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	2b0a      	cmp	r3, #10
 8007f96:	d008      	beq.n	8007faa <UART_SetConfig+0x1722>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	2b0b      	cmp	r3, #11
 8007f9e:	d102      	bne.n	8007fa6 <UART_SetConfig+0x171e>
 8007fa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fa4:	e016      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e014      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007faa:	2380      	movs	r3, #128	; 0x80
 8007fac:	e012      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fae:	2340      	movs	r3, #64	; 0x40
 8007fb0:	e010      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fb2:	2320      	movs	r3, #32
 8007fb4:	e00e      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fb6:	2310      	movs	r3, #16
 8007fb8:	e00c      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	e00a      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fbe:	230a      	movs	r3, #10
 8007fc0:	e008      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fc2:	2308      	movs	r3, #8
 8007fc4:	e006      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fc6:	2306      	movs	r3, #6
 8007fc8:	e004      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fca:	2304      	movs	r3, #4
 8007fcc:	e002      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fce:	2302      	movs	r3, #2
 8007fd0:	e000      	b.n	8007fd4 <UART_SetConfig+0x174c>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	005a      	lsls	r2, r3, #1
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	085b      	lsrs	r3, r3, #1
 8007fe0:	441a      	add	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fee:	e1f6      	b.n	80083de <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff0:	f107 030c 	add.w	r3, r7, #12
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc fead 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d044      	beq.n	800808e <UART_SetConfig+0x1806>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	2b01      	cmp	r3, #1
 800800a:	d03e      	beq.n	800808a <UART_SetConfig+0x1802>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b02      	cmp	r3, #2
 8008012:	d038      	beq.n	8008086 <UART_SetConfig+0x17fe>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	2b03      	cmp	r3, #3
 800801a:	d032      	beq.n	8008082 <UART_SetConfig+0x17fa>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b04      	cmp	r3, #4
 8008022:	d02c      	beq.n	800807e <UART_SetConfig+0x17f6>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	2b05      	cmp	r3, #5
 800802a:	d026      	beq.n	800807a <UART_SetConfig+0x17f2>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b06      	cmp	r3, #6
 8008032:	d020      	beq.n	8008076 <UART_SetConfig+0x17ee>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b07      	cmp	r3, #7
 800803a:	d01a      	beq.n	8008072 <UART_SetConfig+0x17ea>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	2b08      	cmp	r3, #8
 8008042:	d014      	beq.n	800806e <UART_SetConfig+0x17e6>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b09      	cmp	r3, #9
 800804a:	d00e      	beq.n	800806a <UART_SetConfig+0x17e2>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	2b0a      	cmp	r3, #10
 8008052:	d008      	beq.n	8008066 <UART_SetConfig+0x17de>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	2b0b      	cmp	r3, #11
 800805a:	d102      	bne.n	8008062 <UART_SetConfig+0x17da>
 800805c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008060:	e016      	b.n	8008090 <UART_SetConfig+0x1808>
 8008062:	2301      	movs	r3, #1
 8008064:	e014      	b.n	8008090 <UART_SetConfig+0x1808>
 8008066:	2380      	movs	r3, #128	; 0x80
 8008068:	e012      	b.n	8008090 <UART_SetConfig+0x1808>
 800806a:	2340      	movs	r3, #64	; 0x40
 800806c:	e010      	b.n	8008090 <UART_SetConfig+0x1808>
 800806e:	2320      	movs	r3, #32
 8008070:	e00e      	b.n	8008090 <UART_SetConfig+0x1808>
 8008072:	2310      	movs	r3, #16
 8008074:	e00c      	b.n	8008090 <UART_SetConfig+0x1808>
 8008076:	230c      	movs	r3, #12
 8008078:	e00a      	b.n	8008090 <UART_SetConfig+0x1808>
 800807a:	230a      	movs	r3, #10
 800807c:	e008      	b.n	8008090 <UART_SetConfig+0x1808>
 800807e:	2308      	movs	r3, #8
 8008080:	e006      	b.n	8008090 <UART_SetConfig+0x1808>
 8008082:	2306      	movs	r3, #6
 8008084:	e004      	b.n	8008090 <UART_SetConfig+0x1808>
 8008086:	2304      	movs	r3, #4
 8008088:	e002      	b.n	8008090 <UART_SetConfig+0x1808>
 800808a:	2302      	movs	r3, #2
 800808c:	e000      	b.n	8008090 <UART_SetConfig+0x1808>
 800808e:	2301      	movs	r3, #1
 8008090:	fbb2 f3f3 	udiv	r3, r2, r3
 8008094:	005a      	lsls	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	085b      	lsrs	r3, r3, #1
 800809c:	441a      	add	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080aa:	e198      	b.n	80083de <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080ac:	4b87      	ldr	r3, [pc, #540]	; (80082cc <UART_SetConfig+0x1a44>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d05e      	beq.n	8008176 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080b8:	4b84      	ldr	r3, [pc, #528]	; (80082cc <UART_SetConfig+0x1a44>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	08db      	lsrs	r3, r3, #3
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	4a83      	ldr	r2, [pc, #524]	; (80082d0 <UART_SetConfig+0x1a48>)
 80080c4:	40da      	lsrs	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d044      	beq.n	8008158 <UART_SetConfig+0x18d0>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d03e      	beq.n	8008154 <UART_SetConfig+0x18cc>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d038      	beq.n	8008150 <UART_SetConfig+0x18c8>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b03      	cmp	r3, #3
 80080e4:	d032      	beq.n	800814c <UART_SetConfig+0x18c4>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ea:	2b04      	cmp	r3, #4
 80080ec:	d02c      	beq.n	8008148 <UART_SetConfig+0x18c0>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f2:	2b05      	cmp	r3, #5
 80080f4:	d026      	beq.n	8008144 <UART_SetConfig+0x18bc>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b06      	cmp	r3, #6
 80080fc:	d020      	beq.n	8008140 <UART_SetConfig+0x18b8>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	2b07      	cmp	r3, #7
 8008104:	d01a      	beq.n	800813c <UART_SetConfig+0x18b4>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	2b08      	cmp	r3, #8
 800810c:	d014      	beq.n	8008138 <UART_SetConfig+0x18b0>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008112:	2b09      	cmp	r3, #9
 8008114:	d00e      	beq.n	8008134 <UART_SetConfig+0x18ac>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811a:	2b0a      	cmp	r3, #10
 800811c:	d008      	beq.n	8008130 <UART_SetConfig+0x18a8>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008122:	2b0b      	cmp	r3, #11
 8008124:	d102      	bne.n	800812c <UART_SetConfig+0x18a4>
 8008126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800812a:	e016      	b.n	800815a <UART_SetConfig+0x18d2>
 800812c:	2301      	movs	r3, #1
 800812e:	e014      	b.n	800815a <UART_SetConfig+0x18d2>
 8008130:	2380      	movs	r3, #128	; 0x80
 8008132:	e012      	b.n	800815a <UART_SetConfig+0x18d2>
 8008134:	2340      	movs	r3, #64	; 0x40
 8008136:	e010      	b.n	800815a <UART_SetConfig+0x18d2>
 8008138:	2320      	movs	r3, #32
 800813a:	e00e      	b.n	800815a <UART_SetConfig+0x18d2>
 800813c:	2310      	movs	r3, #16
 800813e:	e00c      	b.n	800815a <UART_SetConfig+0x18d2>
 8008140:	230c      	movs	r3, #12
 8008142:	e00a      	b.n	800815a <UART_SetConfig+0x18d2>
 8008144:	230a      	movs	r3, #10
 8008146:	e008      	b.n	800815a <UART_SetConfig+0x18d2>
 8008148:	2308      	movs	r3, #8
 800814a:	e006      	b.n	800815a <UART_SetConfig+0x18d2>
 800814c:	2306      	movs	r3, #6
 800814e:	e004      	b.n	800815a <UART_SetConfig+0x18d2>
 8008150:	2304      	movs	r3, #4
 8008152:	e002      	b.n	800815a <UART_SetConfig+0x18d2>
 8008154:	2302      	movs	r3, #2
 8008156:	e000      	b.n	800815a <UART_SetConfig+0x18d2>
 8008158:	2301      	movs	r3, #1
 800815a:	fbb2 f3f3 	udiv	r3, r2, r3
 800815e:	005a      	lsls	r2, r3, #1
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	085b      	lsrs	r3, r3, #1
 8008166:	441a      	add	r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008170:	b29b      	uxth	r3, r3
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008174:	e133      	b.n	80083de <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	d043      	beq.n	8008206 <UART_SetConfig+0x197e>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	2b01      	cmp	r3, #1
 8008184:	d03d      	beq.n	8008202 <UART_SetConfig+0x197a>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	2b02      	cmp	r3, #2
 800818c:	d037      	beq.n	80081fe <UART_SetConfig+0x1976>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b03      	cmp	r3, #3
 8008194:	d031      	beq.n	80081fa <UART_SetConfig+0x1972>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	2b04      	cmp	r3, #4
 800819c:	d02b      	beq.n	80081f6 <UART_SetConfig+0x196e>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	2b05      	cmp	r3, #5
 80081a4:	d025      	beq.n	80081f2 <UART_SetConfig+0x196a>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081aa:	2b06      	cmp	r3, #6
 80081ac:	d01f      	beq.n	80081ee <UART_SetConfig+0x1966>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b07      	cmp	r3, #7
 80081b4:	d019      	beq.n	80081ea <UART_SetConfig+0x1962>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	2b08      	cmp	r3, #8
 80081bc:	d013      	beq.n	80081e6 <UART_SetConfig+0x195e>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	2b09      	cmp	r3, #9
 80081c4:	d00d      	beq.n	80081e2 <UART_SetConfig+0x195a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	2b0a      	cmp	r3, #10
 80081cc:	d007      	beq.n	80081de <UART_SetConfig+0x1956>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2b0b      	cmp	r3, #11
 80081d4:	d101      	bne.n	80081da <UART_SetConfig+0x1952>
 80081d6:	4b3f      	ldr	r3, [pc, #252]	; (80082d4 <UART_SetConfig+0x1a4c>)
 80081d8:	e016      	b.n	8008208 <UART_SetConfig+0x1980>
 80081da:	4b3f      	ldr	r3, [pc, #252]	; (80082d8 <UART_SetConfig+0x1a50>)
 80081dc:	e014      	b.n	8008208 <UART_SetConfig+0x1980>
 80081de:	4b3f      	ldr	r3, [pc, #252]	; (80082dc <UART_SetConfig+0x1a54>)
 80081e0:	e012      	b.n	8008208 <UART_SetConfig+0x1980>
 80081e2:	4b3f      	ldr	r3, [pc, #252]	; (80082e0 <UART_SetConfig+0x1a58>)
 80081e4:	e010      	b.n	8008208 <UART_SetConfig+0x1980>
 80081e6:	4b3f      	ldr	r3, [pc, #252]	; (80082e4 <UART_SetConfig+0x1a5c>)
 80081e8:	e00e      	b.n	8008208 <UART_SetConfig+0x1980>
 80081ea:	4b3f      	ldr	r3, [pc, #252]	; (80082e8 <UART_SetConfig+0x1a60>)
 80081ec:	e00c      	b.n	8008208 <UART_SetConfig+0x1980>
 80081ee:	4b3f      	ldr	r3, [pc, #252]	; (80082ec <UART_SetConfig+0x1a64>)
 80081f0:	e00a      	b.n	8008208 <UART_SetConfig+0x1980>
 80081f2:	4b3f      	ldr	r3, [pc, #252]	; (80082f0 <UART_SetConfig+0x1a68>)
 80081f4:	e008      	b.n	8008208 <UART_SetConfig+0x1980>
 80081f6:	4b3f      	ldr	r3, [pc, #252]	; (80082f4 <UART_SetConfig+0x1a6c>)
 80081f8:	e006      	b.n	8008208 <UART_SetConfig+0x1980>
 80081fa:	4b3f      	ldr	r3, [pc, #252]	; (80082f8 <UART_SetConfig+0x1a70>)
 80081fc:	e004      	b.n	8008208 <UART_SetConfig+0x1980>
 80081fe:	4b3f      	ldr	r3, [pc, #252]	; (80082fc <UART_SetConfig+0x1a74>)
 8008200:	e002      	b.n	8008208 <UART_SetConfig+0x1980>
 8008202:	4b33      	ldr	r3, [pc, #204]	; (80082d0 <UART_SetConfig+0x1a48>)
 8008204:	e000      	b.n	8008208 <UART_SetConfig+0x1980>
 8008206:	4b34      	ldr	r3, [pc, #208]	; (80082d8 <UART_SetConfig+0x1a50>)
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6852      	ldr	r2, [r2, #4]
 800820c:	0852      	lsrs	r2, r2, #1
 800820e:	441a      	add	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	fbb2 f3f3 	udiv	r3, r2, r3
 8008218:	b29b      	uxth	r3, r3
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800821c:	e0df      	b.n	80083de <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b00      	cmp	r3, #0
 8008224:	d045      	beq.n	80082b2 <UART_SetConfig+0x1a2a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b01      	cmp	r3, #1
 800822c:	d03f      	beq.n	80082ae <UART_SetConfig+0x1a26>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b02      	cmp	r3, #2
 8008234:	d039      	beq.n	80082aa <UART_SetConfig+0x1a22>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b03      	cmp	r3, #3
 800823c:	d033      	beq.n	80082a6 <UART_SetConfig+0x1a1e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b04      	cmp	r3, #4
 8008244:	d02d      	beq.n	80082a2 <UART_SetConfig+0x1a1a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	2b05      	cmp	r3, #5
 800824c:	d027      	beq.n	800829e <UART_SetConfig+0x1a16>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b06      	cmp	r3, #6
 8008254:	d021      	beq.n	800829a <UART_SetConfig+0x1a12>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825a:	2b07      	cmp	r3, #7
 800825c:	d01b      	beq.n	8008296 <UART_SetConfig+0x1a0e>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	2b08      	cmp	r3, #8
 8008264:	d015      	beq.n	8008292 <UART_SetConfig+0x1a0a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826a:	2b09      	cmp	r3, #9
 800826c:	d00f      	beq.n	800828e <UART_SetConfig+0x1a06>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b0a      	cmp	r3, #10
 8008274:	d008      	beq.n	8008288 <UART_SetConfig+0x1a00>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827a:	2b0b      	cmp	r3, #11
 800827c:	d102      	bne.n	8008284 <UART_SetConfig+0x19fc>
 800827e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008282:	e017      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 8008284:	4b18      	ldr	r3, [pc, #96]	; (80082e8 <UART_SetConfig+0x1a60>)
 8008286:	e015      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 8008288:	f24f 4324 	movw	r3, #62500	; 0xf424
 800828c:	e012      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 800828e:	4b1c      	ldr	r3, [pc, #112]	; (8008300 <UART_SetConfig+0x1a78>)
 8008290:	e010      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 8008292:	4b1c      	ldr	r3, [pc, #112]	; (8008304 <UART_SetConfig+0x1a7c>)
 8008294:	e00e      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 8008296:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <UART_SetConfig+0x1a4c>)
 8008298:	e00c      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 800829a:	4b1b      	ldr	r3, [pc, #108]	; (8008308 <UART_SetConfig+0x1a80>)
 800829c:	e00a      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 800829e:	4b1b      	ldr	r3, [pc, #108]	; (800830c <UART_SetConfig+0x1a84>)
 80082a0:	e008      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 80082a2:	4b0e      	ldr	r3, [pc, #56]	; (80082dc <UART_SetConfig+0x1a54>)
 80082a4:	e006      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 80082a6:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <UART_SetConfig+0x1a88>)
 80082a8:	e004      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 80082aa:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <UART_SetConfig+0x1a58>)
 80082ac:	e002      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <UART_SetConfig+0x1a5c>)
 80082b0:	e000      	b.n	80082b4 <UART_SetConfig+0x1a2c>
 80082b2:	4b0d      	ldr	r3, [pc, #52]	; (80082e8 <UART_SetConfig+0x1a60>)
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	6852      	ldr	r2, [r2, #4]
 80082b8:	0852      	lsrs	r2, r2, #1
 80082ba:	441a      	add	r2, r3
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082c8:	e089      	b.n	80083de <UART_SetConfig+0x1b56>
 80082ca:	bf00      	nop
 80082cc:	58024400 	.word	0x58024400
 80082d0:	03d09000 	.word	0x03d09000
 80082d4:	0007a120 	.word	0x0007a120
 80082d8:	07a12000 	.word	0x07a12000
 80082dc:	000f4240 	.word	0x000f4240
 80082e0:	001e8480 	.word	0x001e8480
 80082e4:	003d0900 	.word	0x003d0900
 80082e8:	007a1200 	.word	0x007a1200
 80082ec:	00a2c2aa 	.word	0x00a2c2aa
 80082f0:	00c35000 	.word	0x00c35000
 80082f4:	00f42400 	.word	0x00f42400
 80082f8:	01458554 	.word	0x01458554
 80082fc:	01e84800 	.word	0x01e84800
 8008300:	0001e848 	.word	0x0001e848
 8008304:	0003d090 	.word	0x0003d090
 8008308:	000a2c2a 	.word	0x000a2c2a
 800830c:	000c3500 	.word	0x000c3500
 8008310:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d04f      	beq.n	80083bc <UART_SetConfig+0x1b34>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008320:	2b01      	cmp	r3, #1
 8008322:	d048      	beq.n	80083b6 <UART_SetConfig+0x1b2e>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b02      	cmp	r3, #2
 800832a:	d041      	beq.n	80083b0 <UART_SetConfig+0x1b28>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	2b03      	cmp	r3, #3
 8008332:	d03a      	beq.n	80083aa <UART_SetConfig+0x1b22>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	2b04      	cmp	r3, #4
 800833a:	d033      	beq.n	80083a4 <UART_SetConfig+0x1b1c>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008340:	2b05      	cmp	r3, #5
 8008342:	d02c      	beq.n	800839e <UART_SetConfig+0x1b16>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b06      	cmp	r3, #6
 800834a:	d025      	beq.n	8008398 <UART_SetConfig+0x1b10>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b07      	cmp	r3, #7
 8008352:	d01e      	beq.n	8008392 <UART_SetConfig+0x1b0a>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	2b08      	cmp	r3, #8
 800835a:	d017      	beq.n	800838c <UART_SetConfig+0x1b04>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b09      	cmp	r3, #9
 8008362:	d010      	beq.n	8008386 <UART_SetConfig+0x1afe>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008368:	2b0a      	cmp	r3, #10
 800836a:	d009      	beq.n	8008380 <UART_SetConfig+0x1af8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	2b0b      	cmp	r3, #11
 8008372:	d102      	bne.n	800837a <UART_SetConfig+0x1af2>
 8008374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008378:	e022      	b.n	80083c0 <UART_SetConfig+0x1b38>
 800837a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800837e:	e01f      	b.n	80083c0 <UART_SetConfig+0x1b38>
 8008380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008384:	e01c      	b.n	80083c0 <UART_SetConfig+0x1b38>
 8008386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800838a:	e019      	b.n	80083c0 <UART_SetConfig+0x1b38>
 800838c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008390:	e016      	b.n	80083c0 <UART_SetConfig+0x1b38>
 8008392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008396:	e013      	b.n	80083c0 <UART_SetConfig+0x1b38>
 8008398:	f241 5354 	movw	r3, #5460	; 0x1554
 800839c:	e010      	b.n	80083c0 <UART_SetConfig+0x1b38>
 800839e:	f641 1398 	movw	r3, #6552	; 0x1998
 80083a2:	e00d      	b.n	80083c0 <UART_SetConfig+0x1b38>
 80083a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083a8:	e00a      	b.n	80083c0 <UART_SetConfig+0x1b38>
 80083aa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80083ae:	e007      	b.n	80083c0 <UART_SetConfig+0x1b38>
 80083b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80083b4:	e004      	b.n	80083c0 <UART_SetConfig+0x1b38>
 80083b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ba:	e001      	b.n	80083c0 <UART_SetConfig+0x1b38>
 80083bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6852      	ldr	r2, [r2, #4]
 80083c4:	0852      	lsrs	r2, r2, #1
 80083c6:	441a      	add	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083d4:	e003      	b.n	80083de <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80083dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e0:	2b0f      	cmp	r3, #15
 80083e2:	d916      	bls.n	8008412 <UART_SetConfig+0x1b8a>
 80083e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ea:	d212      	bcs.n	8008412 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f023 030f 	bic.w	r3, r3, #15
 80083f4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f8:	085b      	lsrs	r3, r3, #1
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	f003 0307 	and.w	r3, r3, #7
 8008400:	b29a      	uxth	r2, r3
 8008402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008404:	4313      	orrs	r3, r2
 8008406:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800840e:	60da      	str	r2, [r3, #12]
 8008410:	e3a3      	b.n	8008b5a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008418:	e39f      	b.n	8008b5a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800841a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	f200 8388 	bhi.w	8008b34 <UART_SetConfig+0x22ac>
 8008424:	a201      	add	r2, pc, #4	; (adr r2, 800842c <UART_SetConfig+0x1ba4>)
 8008426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842a:	bf00      	nop
 800842c:	08008531 	.word	0x08008531
 8008430:	080085e7 	.word	0x080085e7
 8008434:	08008b35 	.word	0x08008b35
 8008438:	08008b35 	.word	0x08008b35
 800843c:	0800869d 	.word	0x0800869d
 8008440:	08008b35 	.word	0x08008b35
 8008444:	08008b35 	.word	0x08008b35
 8008448:	08008b35 	.word	0x08008b35
 800844c:	08008757 	.word	0x08008757
 8008450:	08008b35 	.word	0x08008b35
 8008454:	08008b35 	.word	0x08008b35
 8008458:	08008b35 	.word	0x08008b35
 800845c:	08008b35 	.word	0x08008b35
 8008460:	08008b35 	.word	0x08008b35
 8008464:	08008b35 	.word	0x08008b35
 8008468:	08008b35 	.word	0x08008b35
 800846c:	08008811 	.word	0x08008811
 8008470:	08008b35 	.word	0x08008b35
 8008474:	08008b35 	.word	0x08008b35
 8008478:	08008b35 	.word	0x08008b35
 800847c:	08008b35 	.word	0x08008b35
 8008480:	08008b35 	.word	0x08008b35
 8008484:	08008b35 	.word	0x08008b35
 8008488:	08008b35 	.word	0x08008b35
 800848c:	08008b35 	.word	0x08008b35
 8008490:	08008b35 	.word	0x08008b35
 8008494:	08008b35 	.word	0x08008b35
 8008498:	08008b35 	.word	0x08008b35
 800849c:	08008b35 	.word	0x08008b35
 80084a0:	08008b35 	.word	0x08008b35
 80084a4:	08008b35 	.word	0x08008b35
 80084a8:	08008b35 	.word	0x08008b35
 80084ac:	08008981 	.word	0x08008981
 80084b0:	08008b35 	.word	0x08008b35
 80084b4:	08008b35 	.word	0x08008b35
 80084b8:	08008b35 	.word	0x08008b35
 80084bc:	08008b35 	.word	0x08008b35
 80084c0:	08008b35 	.word	0x08008b35
 80084c4:	08008b35 	.word	0x08008b35
 80084c8:	08008b35 	.word	0x08008b35
 80084cc:	08008b35 	.word	0x08008b35
 80084d0:	08008b35 	.word	0x08008b35
 80084d4:	08008b35 	.word	0x08008b35
 80084d8:	08008b35 	.word	0x08008b35
 80084dc:	08008b35 	.word	0x08008b35
 80084e0:	08008b35 	.word	0x08008b35
 80084e4:	08008b35 	.word	0x08008b35
 80084e8:	08008b35 	.word	0x08008b35
 80084ec:	08008b35 	.word	0x08008b35
 80084f0:	08008b35 	.word	0x08008b35
 80084f4:	08008b35 	.word	0x08008b35
 80084f8:	08008b35 	.word	0x08008b35
 80084fc:	08008b35 	.word	0x08008b35
 8008500:	08008b35 	.word	0x08008b35
 8008504:	08008b35 	.word	0x08008b35
 8008508:	08008b35 	.word	0x08008b35
 800850c:	08008b35 	.word	0x08008b35
 8008510:	08008b35 	.word	0x08008b35
 8008514:	08008b35 	.word	0x08008b35
 8008518:	08008b35 	.word	0x08008b35
 800851c:	08008b35 	.word	0x08008b35
 8008520:	08008b35 	.word	0x08008b35
 8008524:	08008b35 	.word	0x08008b35
 8008528:	08008b35 	.word	0x08008b35
 800852c:	08008a75 	.word	0x08008a75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008530:	f7fb fb92 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8008534:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	2b00      	cmp	r3, #0
 800853c:	d044      	beq.n	80085c8 <UART_SetConfig+0x1d40>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008542:	2b01      	cmp	r3, #1
 8008544:	d03e      	beq.n	80085c4 <UART_SetConfig+0x1d3c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	2b02      	cmp	r3, #2
 800854c:	d038      	beq.n	80085c0 <UART_SetConfig+0x1d38>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	2b03      	cmp	r3, #3
 8008554:	d032      	beq.n	80085bc <UART_SetConfig+0x1d34>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800855a:	2b04      	cmp	r3, #4
 800855c:	d02c      	beq.n	80085b8 <UART_SetConfig+0x1d30>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	2b05      	cmp	r3, #5
 8008564:	d026      	beq.n	80085b4 <UART_SetConfig+0x1d2c>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856a:	2b06      	cmp	r3, #6
 800856c:	d020      	beq.n	80085b0 <UART_SetConfig+0x1d28>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	2b07      	cmp	r3, #7
 8008574:	d01a      	beq.n	80085ac <UART_SetConfig+0x1d24>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857a:	2b08      	cmp	r3, #8
 800857c:	d014      	beq.n	80085a8 <UART_SetConfig+0x1d20>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	2b09      	cmp	r3, #9
 8008584:	d00e      	beq.n	80085a4 <UART_SetConfig+0x1d1c>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	2b0a      	cmp	r3, #10
 800858c:	d008      	beq.n	80085a0 <UART_SetConfig+0x1d18>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008592:	2b0b      	cmp	r3, #11
 8008594:	d102      	bne.n	800859c <UART_SetConfig+0x1d14>
 8008596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800859a:	e016      	b.n	80085ca <UART_SetConfig+0x1d42>
 800859c:	2301      	movs	r3, #1
 800859e:	e014      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	e012      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085a4:	2340      	movs	r3, #64	; 0x40
 80085a6:	e010      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085a8:	2320      	movs	r3, #32
 80085aa:	e00e      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085ac:	2310      	movs	r3, #16
 80085ae:	e00c      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085b0:	230c      	movs	r3, #12
 80085b2:	e00a      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085b4:	230a      	movs	r3, #10
 80085b6:	e008      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085b8:	2308      	movs	r3, #8
 80085ba:	e006      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085bc:	2306      	movs	r3, #6
 80085be:	e004      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085c0:	2304      	movs	r3, #4
 80085c2:	e002      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085c4:	2302      	movs	r3, #2
 80085c6:	e000      	b.n	80085ca <UART_SetConfig+0x1d42>
 80085c8:	2301      	movs	r3, #1
 80085ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	085b      	lsrs	r3, r3, #1
 80085d6:	441a      	add	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085e4:	e2aa      	b.n	8008b3c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085e6:	f7fb fb4d 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 80085ea:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d044      	beq.n	800867e <UART_SetConfig+0x1df6>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d03e      	beq.n	800867a <UART_SetConfig+0x1df2>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	2b02      	cmp	r3, #2
 8008602:	d038      	beq.n	8008676 <UART_SetConfig+0x1dee>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008608:	2b03      	cmp	r3, #3
 800860a:	d032      	beq.n	8008672 <UART_SetConfig+0x1dea>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	2b04      	cmp	r3, #4
 8008612:	d02c      	beq.n	800866e <UART_SetConfig+0x1de6>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008618:	2b05      	cmp	r3, #5
 800861a:	d026      	beq.n	800866a <UART_SetConfig+0x1de2>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2b06      	cmp	r3, #6
 8008622:	d020      	beq.n	8008666 <UART_SetConfig+0x1dde>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008628:	2b07      	cmp	r3, #7
 800862a:	d01a      	beq.n	8008662 <UART_SetConfig+0x1dda>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008630:	2b08      	cmp	r3, #8
 8008632:	d014      	beq.n	800865e <UART_SetConfig+0x1dd6>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	2b09      	cmp	r3, #9
 800863a:	d00e      	beq.n	800865a <UART_SetConfig+0x1dd2>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008640:	2b0a      	cmp	r3, #10
 8008642:	d008      	beq.n	8008656 <UART_SetConfig+0x1dce>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	2b0b      	cmp	r3, #11
 800864a:	d102      	bne.n	8008652 <UART_SetConfig+0x1dca>
 800864c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008650:	e016      	b.n	8008680 <UART_SetConfig+0x1df8>
 8008652:	2301      	movs	r3, #1
 8008654:	e014      	b.n	8008680 <UART_SetConfig+0x1df8>
 8008656:	2380      	movs	r3, #128	; 0x80
 8008658:	e012      	b.n	8008680 <UART_SetConfig+0x1df8>
 800865a:	2340      	movs	r3, #64	; 0x40
 800865c:	e010      	b.n	8008680 <UART_SetConfig+0x1df8>
 800865e:	2320      	movs	r3, #32
 8008660:	e00e      	b.n	8008680 <UART_SetConfig+0x1df8>
 8008662:	2310      	movs	r3, #16
 8008664:	e00c      	b.n	8008680 <UART_SetConfig+0x1df8>
 8008666:	230c      	movs	r3, #12
 8008668:	e00a      	b.n	8008680 <UART_SetConfig+0x1df8>
 800866a:	230a      	movs	r3, #10
 800866c:	e008      	b.n	8008680 <UART_SetConfig+0x1df8>
 800866e:	2308      	movs	r3, #8
 8008670:	e006      	b.n	8008680 <UART_SetConfig+0x1df8>
 8008672:	2306      	movs	r3, #6
 8008674:	e004      	b.n	8008680 <UART_SetConfig+0x1df8>
 8008676:	2304      	movs	r3, #4
 8008678:	e002      	b.n	8008680 <UART_SetConfig+0x1df8>
 800867a:	2302      	movs	r3, #2
 800867c:	e000      	b.n	8008680 <UART_SetConfig+0x1df8>
 800867e:	2301      	movs	r3, #1
 8008680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008682:	fbb2 f2f3 	udiv	r2, r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	085b      	lsrs	r3, r3, #1
 800868c:	441a      	add	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	fbb2 f3f3 	udiv	r3, r2, r3
 8008696:	b29b      	uxth	r3, r3
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800869a:	e24f      	b.n	8008b3c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800869c:	f107 0318 	add.w	r3, r7, #24
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7fc fa0b 	bl	8004abc <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086a6:	69fa      	ldr	r2, [r7, #28]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d044      	beq.n	800873a <UART_SetConfig+0x1eb2>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d03e      	beq.n	8008736 <UART_SetConfig+0x1eae>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d038      	beq.n	8008732 <UART_SetConfig+0x1eaa>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d032      	beq.n	800872e <UART_SetConfig+0x1ea6>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b04      	cmp	r3, #4
 80086ce:	d02c      	beq.n	800872a <UART_SetConfig+0x1ea2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b05      	cmp	r3, #5
 80086d6:	d026      	beq.n	8008726 <UART_SetConfig+0x1e9e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b06      	cmp	r3, #6
 80086de:	d020      	beq.n	8008722 <UART_SetConfig+0x1e9a>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b07      	cmp	r3, #7
 80086e6:	d01a      	beq.n	800871e <UART_SetConfig+0x1e96>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d014      	beq.n	800871a <UART_SetConfig+0x1e92>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2b09      	cmp	r3, #9
 80086f6:	d00e      	beq.n	8008716 <UART_SetConfig+0x1e8e>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	2b0a      	cmp	r3, #10
 80086fe:	d008      	beq.n	8008712 <UART_SetConfig+0x1e8a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	2b0b      	cmp	r3, #11
 8008706:	d102      	bne.n	800870e <UART_SetConfig+0x1e86>
 8008708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800870c:	e016      	b.n	800873c <UART_SetConfig+0x1eb4>
 800870e:	2301      	movs	r3, #1
 8008710:	e014      	b.n	800873c <UART_SetConfig+0x1eb4>
 8008712:	2380      	movs	r3, #128	; 0x80
 8008714:	e012      	b.n	800873c <UART_SetConfig+0x1eb4>
 8008716:	2340      	movs	r3, #64	; 0x40
 8008718:	e010      	b.n	800873c <UART_SetConfig+0x1eb4>
 800871a:	2320      	movs	r3, #32
 800871c:	e00e      	b.n	800873c <UART_SetConfig+0x1eb4>
 800871e:	2310      	movs	r3, #16
 8008720:	e00c      	b.n	800873c <UART_SetConfig+0x1eb4>
 8008722:	230c      	movs	r3, #12
 8008724:	e00a      	b.n	800873c <UART_SetConfig+0x1eb4>
 8008726:	230a      	movs	r3, #10
 8008728:	e008      	b.n	800873c <UART_SetConfig+0x1eb4>
 800872a:	2308      	movs	r3, #8
 800872c:	e006      	b.n	800873c <UART_SetConfig+0x1eb4>
 800872e:	2306      	movs	r3, #6
 8008730:	e004      	b.n	800873c <UART_SetConfig+0x1eb4>
 8008732:	2304      	movs	r3, #4
 8008734:	e002      	b.n	800873c <UART_SetConfig+0x1eb4>
 8008736:	2302      	movs	r3, #2
 8008738:	e000      	b.n	800873c <UART_SetConfig+0x1eb4>
 800873a:	2301      	movs	r3, #1
 800873c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	085b      	lsrs	r3, r3, #1
 8008746:	441a      	add	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008750:	b29b      	uxth	r3, r3
 8008752:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008754:	e1f2      	b.n	8008b3c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008756:	f107 030c 	add.w	r3, r7, #12
 800875a:	4618      	mov	r0, r3
 800875c:	f7fc fafa 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	2b00      	cmp	r3, #0
 8008768:	d044      	beq.n	80087f4 <UART_SetConfig+0x1f6c>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876e:	2b01      	cmp	r3, #1
 8008770:	d03e      	beq.n	80087f0 <UART_SetConfig+0x1f68>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	2b02      	cmp	r3, #2
 8008778:	d038      	beq.n	80087ec <UART_SetConfig+0x1f64>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877e:	2b03      	cmp	r3, #3
 8008780:	d032      	beq.n	80087e8 <UART_SetConfig+0x1f60>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	2b04      	cmp	r3, #4
 8008788:	d02c      	beq.n	80087e4 <UART_SetConfig+0x1f5c>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878e:	2b05      	cmp	r3, #5
 8008790:	d026      	beq.n	80087e0 <UART_SetConfig+0x1f58>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	2b06      	cmp	r3, #6
 8008798:	d020      	beq.n	80087dc <UART_SetConfig+0x1f54>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879e:	2b07      	cmp	r3, #7
 80087a0:	d01a      	beq.n	80087d8 <UART_SetConfig+0x1f50>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a6:	2b08      	cmp	r3, #8
 80087a8:	d014      	beq.n	80087d4 <UART_SetConfig+0x1f4c>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ae:	2b09      	cmp	r3, #9
 80087b0:	d00e      	beq.n	80087d0 <UART_SetConfig+0x1f48>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b6:	2b0a      	cmp	r3, #10
 80087b8:	d008      	beq.n	80087cc <UART_SetConfig+0x1f44>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	2b0b      	cmp	r3, #11
 80087c0:	d102      	bne.n	80087c8 <UART_SetConfig+0x1f40>
 80087c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087c6:	e016      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e014      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087cc:	2380      	movs	r3, #128	; 0x80
 80087ce:	e012      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087d0:	2340      	movs	r3, #64	; 0x40
 80087d2:	e010      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087d4:	2320      	movs	r3, #32
 80087d6:	e00e      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087d8:	2310      	movs	r3, #16
 80087da:	e00c      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087dc:	230c      	movs	r3, #12
 80087de:	e00a      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087e0:	230a      	movs	r3, #10
 80087e2:	e008      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087e4:	2308      	movs	r3, #8
 80087e6:	e006      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087e8:	2306      	movs	r3, #6
 80087ea:	e004      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087ec:	2304      	movs	r3, #4
 80087ee:	e002      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e000      	b.n	80087f6 <UART_SetConfig+0x1f6e>
 80087f4:	2301      	movs	r3, #1
 80087f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	441a      	add	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	fbb2 f3f3 	udiv	r3, r2, r3
 800880a:	b29b      	uxth	r3, r3
 800880c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800880e:	e195      	b.n	8008b3c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008810:	4b87      	ldr	r3, [pc, #540]	; (8008a30 <UART_SetConfig+0x21a8>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f003 0320 	and.w	r3, r3, #32
 8008818:	2b00      	cmp	r3, #0
 800881a:	d05d      	beq.n	80088d8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800881c:	4b84      	ldr	r3, [pc, #528]	; (8008a30 <UART_SetConfig+0x21a8>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	08db      	lsrs	r3, r3, #3
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	4a83      	ldr	r2, [pc, #524]	; (8008a34 <UART_SetConfig+0x21ac>)
 8008828:	40da      	lsrs	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	d044      	beq.n	80088bc <UART_SetConfig+0x2034>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b01      	cmp	r3, #1
 8008838:	d03e      	beq.n	80088b8 <UART_SetConfig+0x2030>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b02      	cmp	r3, #2
 8008840:	d038      	beq.n	80088b4 <UART_SetConfig+0x202c>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	2b03      	cmp	r3, #3
 8008848:	d032      	beq.n	80088b0 <UART_SetConfig+0x2028>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	2b04      	cmp	r3, #4
 8008850:	d02c      	beq.n	80088ac <UART_SetConfig+0x2024>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	2b05      	cmp	r3, #5
 8008858:	d026      	beq.n	80088a8 <UART_SetConfig+0x2020>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885e:	2b06      	cmp	r3, #6
 8008860:	d020      	beq.n	80088a4 <UART_SetConfig+0x201c>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	2b07      	cmp	r3, #7
 8008868:	d01a      	beq.n	80088a0 <UART_SetConfig+0x2018>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b08      	cmp	r3, #8
 8008870:	d014      	beq.n	800889c <UART_SetConfig+0x2014>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	2b09      	cmp	r3, #9
 8008878:	d00e      	beq.n	8008898 <UART_SetConfig+0x2010>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	2b0a      	cmp	r3, #10
 8008880:	d008      	beq.n	8008894 <UART_SetConfig+0x200c>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b0b      	cmp	r3, #11
 8008888:	d102      	bne.n	8008890 <UART_SetConfig+0x2008>
 800888a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800888e:	e016      	b.n	80088be <UART_SetConfig+0x2036>
 8008890:	2301      	movs	r3, #1
 8008892:	e014      	b.n	80088be <UART_SetConfig+0x2036>
 8008894:	2380      	movs	r3, #128	; 0x80
 8008896:	e012      	b.n	80088be <UART_SetConfig+0x2036>
 8008898:	2340      	movs	r3, #64	; 0x40
 800889a:	e010      	b.n	80088be <UART_SetConfig+0x2036>
 800889c:	2320      	movs	r3, #32
 800889e:	e00e      	b.n	80088be <UART_SetConfig+0x2036>
 80088a0:	2310      	movs	r3, #16
 80088a2:	e00c      	b.n	80088be <UART_SetConfig+0x2036>
 80088a4:	230c      	movs	r3, #12
 80088a6:	e00a      	b.n	80088be <UART_SetConfig+0x2036>
 80088a8:	230a      	movs	r3, #10
 80088aa:	e008      	b.n	80088be <UART_SetConfig+0x2036>
 80088ac:	2308      	movs	r3, #8
 80088ae:	e006      	b.n	80088be <UART_SetConfig+0x2036>
 80088b0:	2306      	movs	r3, #6
 80088b2:	e004      	b.n	80088be <UART_SetConfig+0x2036>
 80088b4:	2304      	movs	r3, #4
 80088b6:	e002      	b.n	80088be <UART_SetConfig+0x2036>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e000      	b.n	80088be <UART_SetConfig+0x2036>
 80088bc:	2301      	movs	r3, #1
 80088be:	fbb2 f2f3 	udiv	r2, r2, r3
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	085b      	lsrs	r3, r3, #1
 80088c8:	441a      	add	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80088d6:	e131      	b.n	8008b3c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d043      	beq.n	8008968 <UART_SetConfig+0x20e0>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d03d      	beq.n	8008964 <UART_SetConfig+0x20dc>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d037      	beq.n	8008960 <UART_SetConfig+0x20d8>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d031      	beq.n	800895c <UART_SetConfig+0x20d4>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d02b      	beq.n	8008958 <UART_SetConfig+0x20d0>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b05      	cmp	r3, #5
 8008906:	d025      	beq.n	8008954 <UART_SetConfig+0x20cc>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b06      	cmp	r3, #6
 800890e:	d01f      	beq.n	8008950 <UART_SetConfig+0x20c8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b07      	cmp	r3, #7
 8008916:	d019      	beq.n	800894c <UART_SetConfig+0x20c4>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b08      	cmp	r3, #8
 800891e:	d013      	beq.n	8008948 <UART_SetConfig+0x20c0>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b09      	cmp	r3, #9
 8008926:	d00d      	beq.n	8008944 <UART_SetConfig+0x20bc>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b0a      	cmp	r3, #10
 800892e:	d007      	beq.n	8008940 <UART_SetConfig+0x20b8>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b0b      	cmp	r3, #11
 8008936:	d101      	bne.n	800893c <UART_SetConfig+0x20b4>
 8008938:	4b3f      	ldr	r3, [pc, #252]	; (8008a38 <UART_SetConfig+0x21b0>)
 800893a:	e016      	b.n	800896a <UART_SetConfig+0x20e2>
 800893c:	4b3d      	ldr	r3, [pc, #244]	; (8008a34 <UART_SetConfig+0x21ac>)
 800893e:	e014      	b.n	800896a <UART_SetConfig+0x20e2>
 8008940:	4b3e      	ldr	r3, [pc, #248]	; (8008a3c <UART_SetConfig+0x21b4>)
 8008942:	e012      	b.n	800896a <UART_SetConfig+0x20e2>
 8008944:	4b3e      	ldr	r3, [pc, #248]	; (8008a40 <UART_SetConfig+0x21b8>)
 8008946:	e010      	b.n	800896a <UART_SetConfig+0x20e2>
 8008948:	4b3e      	ldr	r3, [pc, #248]	; (8008a44 <UART_SetConfig+0x21bc>)
 800894a:	e00e      	b.n	800896a <UART_SetConfig+0x20e2>
 800894c:	4b3e      	ldr	r3, [pc, #248]	; (8008a48 <UART_SetConfig+0x21c0>)
 800894e:	e00c      	b.n	800896a <UART_SetConfig+0x20e2>
 8008950:	4b3e      	ldr	r3, [pc, #248]	; (8008a4c <UART_SetConfig+0x21c4>)
 8008952:	e00a      	b.n	800896a <UART_SetConfig+0x20e2>
 8008954:	4b3e      	ldr	r3, [pc, #248]	; (8008a50 <UART_SetConfig+0x21c8>)
 8008956:	e008      	b.n	800896a <UART_SetConfig+0x20e2>
 8008958:	4b3e      	ldr	r3, [pc, #248]	; (8008a54 <UART_SetConfig+0x21cc>)
 800895a:	e006      	b.n	800896a <UART_SetConfig+0x20e2>
 800895c:	4b3e      	ldr	r3, [pc, #248]	; (8008a58 <UART_SetConfig+0x21d0>)
 800895e:	e004      	b.n	800896a <UART_SetConfig+0x20e2>
 8008960:	4b3e      	ldr	r3, [pc, #248]	; (8008a5c <UART_SetConfig+0x21d4>)
 8008962:	e002      	b.n	800896a <UART_SetConfig+0x20e2>
 8008964:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <UART_SetConfig+0x21d8>)
 8008966:	e000      	b.n	800896a <UART_SetConfig+0x20e2>
 8008968:	4b32      	ldr	r3, [pc, #200]	; (8008a34 <UART_SetConfig+0x21ac>)
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	6852      	ldr	r2, [r2, #4]
 800896e:	0852      	lsrs	r2, r2, #1
 8008970:	441a      	add	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	fbb2 f3f3 	udiv	r3, r2, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800897e:	e0dd      	b.n	8008b3c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d046      	beq.n	8008a16 <UART_SetConfig+0x218e>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2b01      	cmp	r3, #1
 800898e:	d040      	beq.n	8008a12 <UART_SetConfig+0x218a>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b02      	cmp	r3, #2
 8008996:	d03a      	beq.n	8008a0e <UART_SetConfig+0x2186>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	2b03      	cmp	r3, #3
 800899e:	d034      	beq.n	8008a0a <UART_SetConfig+0x2182>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b04      	cmp	r3, #4
 80089a6:	d02e      	beq.n	8008a06 <UART_SetConfig+0x217e>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d028      	beq.n	8008a02 <UART_SetConfig+0x217a>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b06      	cmp	r3, #6
 80089b6:	d022      	beq.n	80089fe <UART_SetConfig+0x2176>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089bc:	2b07      	cmp	r3, #7
 80089be:	d01c      	beq.n	80089fa <UART_SetConfig+0x2172>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c4:	2b08      	cmp	r3, #8
 80089c6:	d016      	beq.n	80089f6 <UART_SetConfig+0x216e>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	2b09      	cmp	r3, #9
 80089ce:	d00f      	beq.n	80089f0 <UART_SetConfig+0x2168>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2b0a      	cmp	r3, #10
 80089d6:	d008      	beq.n	80089ea <UART_SetConfig+0x2162>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089dc:	2b0b      	cmp	r3, #11
 80089de:	d102      	bne.n	80089e6 <UART_SetConfig+0x215e>
 80089e0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80089e4:	e018      	b.n	8008a18 <UART_SetConfig+0x2190>
 80089e6:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <UART_SetConfig+0x21c0>)
 80089e8:	e016      	b.n	8008a18 <UART_SetConfig+0x2190>
 80089ea:	f647 2312 	movw	r3, #31250	; 0x7a12
 80089ee:	e013      	b.n	8008a18 <UART_SetConfig+0x2190>
 80089f0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80089f4:	e010      	b.n	8008a18 <UART_SetConfig+0x2190>
 80089f6:	4b1b      	ldr	r3, [pc, #108]	; (8008a64 <UART_SetConfig+0x21dc>)
 80089f8:	e00e      	b.n	8008a18 <UART_SetConfig+0x2190>
 80089fa:	4b0f      	ldr	r3, [pc, #60]	; (8008a38 <UART_SetConfig+0x21b0>)
 80089fc:	e00c      	b.n	8008a18 <UART_SetConfig+0x2190>
 80089fe:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <UART_SetConfig+0x21e0>)
 8008a00:	e00a      	b.n	8008a18 <UART_SetConfig+0x2190>
 8008a02:	4b1a      	ldr	r3, [pc, #104]	; (8008a6c <UART_SetConfig+0x21e4>)
 8008a04:	e008      	b.n	8008a18 <UART_SetConfig+0x2190>
 8008a06:	4b0d      	ldr	r3, [pc, #52]	; (8008a3c <UART_SetConfig+0x21b4>)
 8008a08:	e006      	b.n	8008a18 <UART_SetConfig+0x2190>
 8008a0a:	4b19      	ldr	r3, [pc, #100]	; (8008a70 <UART_SetConfig+0x21e8>)
 8008a0c:	e004      	b.n	8008a18 <UART_SetConfig+0x2190>
 8008a0e:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <UART_SetConfig+0x21b8>)
 8008a10:	e002      	b.n	8008a18 <UART_SetConfig+0x2190>
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <UART_SetConfig+0x21bc>)
 8008a14:	e000      	b.n	8008a18 <UART_SetConfig+0x2190>
 8008a16:	4b0c      	ldr	r3, [pc, #48]	; (8008a48 <UART_SetConfig+0x21c0>)
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	6852      	ldr	r2, [r2, #4]
 8008a1c:	0852      	lsrs	r2, r2, #1
 8008a1e:	441a      	add	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a2c:	e086      	b.n	8008b3c <UART_SetConfig+0x22b4>
 8008a2e:	bf00      	nop
 8008a30:	58024400 	.word	0x58024400
 8008a34:	03d09000 	.word	0x03d09000
 8008a38:	0003d090 	.word	0x0003d090
 8008a3c:	0007a120 	.word	0x0007a120
 8008a40:	000f4240 	.word	0x000f4240
 8008a44:	001e8480 	.word	0x001e8480
 8008a48:	003d0900 	.word	0x003d0900
 8008a4c:	00516155 	.word	0x00516155
 8008a50:	0061a800 	.word	0x0061a800
 8008a54:	007a1200 	.word	0x007a1200
 8008a58:	00a2c2aa 	.word	0x00a2c2aa
 8008a5c:	00f42400 	.word	0x00f42400
 8008a60:	01e84800 	.word	0x01e84800
 8008a64:	0001e848 	.word	0x0001e848
 8008a68:	00051615 	.word	0x00051615
 8008a6c:	00061a80 	.word	0x00061a80
 8008a70:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d04e      	beq.n	8008b1a <UART_SetConfig+0x2292>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d047      	beq.n	8008b14 <UART_SetConfig+0x228c>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d040      	beq.n	8008b0e <UART_SetConfig+0x2286>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a90:	2b03      	cmp	r3, #3
 8008a92:	d039      	beq.n	8008b08 <UART_SetConfig+0x2280>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d032      	beq.n	8008b02 <UART_SetConfig+0x227a>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	2b05      	cmp	r3, #5
 8008aa2:	d02b      	beq.n	8008afc <UART_SetConfig+0x2274>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	2b06      	cmp	r3, #6
 8008aaa:	d024      	beq.n	8008af6 <UART_SetConfig+0x226e>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	2b07      	cmp	r3, #7
 8008ab2:	d01d      	beq.n	8008af0 <UART_SetConfig+0x2268>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d016      	beq.n	8008aea <UART_SetConfig+0x2262>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac0:	2b09      	cmp	r3, #9
 8008ac2:	d00f      	beq.n	8008ae4 <UART_SetConfig+0x225c>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac8:	2b0a      	cmp	r3, #10
 8008aca:	d008      	beq.n	8008ade <UART_SetConfig+0x2256>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad0:	2b0b      	cmp	r3, #11
 8008ad2:	d101      	bne.n	8008ad8 <UART_SetConfig+0x2250>
 8008ad4:	2380      	movs	r3, #128	; 0x80
 8008ad6:	e022      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008adc:	e01f      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ae2:	e01c      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008ae4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ae8:	e019      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aee:	e016      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008af0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008af4:	e013      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008af6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008afa:	e010      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008afc:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008b00:	e00d      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008b02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b06:	e00a      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008b08:	f241 5355 	movw	r3, #5461	; 0x1555
 8008b0c:	e007      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b12:	e004      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008b14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b18:	e001      	b.n	8008b1e <UART_SetConfig+0x2296>
 8008b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	6852      	ldr	r2, [r2, #4]
 8008b22:	0852      	lsrs	r2, r2, #1
 8008b24:	441a      	add	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008b32:	e003      	b.n	8008b3c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008b3a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3e:	2b0f      	cmp	r3, #15
 8008b40:	d908      	bls.n	8008b54 <UART_SetConfig+0x22cc>
 8008b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b48:	d204      	bcs.n	8008b54 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	e002      	b.n	8008b5a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008b76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3740      	adds	r7, #64	; 0x40
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d00a      	beq.n	8008bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00a      	beq.n	8008bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00a      	beq.n	8008c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	f003 0310 	and.w	r3, r3, #16
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00a      	beq.n	8008c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00a      	beq.n	8008c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01a      	beq.n	8008c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c82:	d10a      	bne.n	8008c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d00a      	beq.n	8008cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	430a      	orrs	r2, r1
 8008cba:	605a      	str	r2, [r3, #4]
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af02      	add	r7, sp, #8
 8008cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008cd8:	f7f8 fe70 	bl	80019bc <HAL_GetTick>
 8008cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b08      	cmp	r3, #8
 8008cea:	d10e      	bne.n	8008d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f82c 	bl	8008d58 <UART_WaitOnFlagUntilTimeout>
 8008d00:	4603      	mov	r3, r0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e022      	b.n	8008d50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d10e      	bne.n	8008d36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f816 	bl	8008d58 <UART_WaitOnFlagUntilTimeout>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d001      	beq.n	8008d36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e00c      	b.n	8008d50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2220      	movs	r2, #32
 8008d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	4613      	mov	r3, r2
 8008d66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d68:	e062      	b.n	8008e30 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d05e      	beq.n	8008e30 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d72:	f7f8 fe23 	bl	80019bc <HAL_GetTick>
 8008d76:	4602      	mov	r2, r0
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	1ad3      	subs	r3, r2, r3
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d302      	bcc.n	8008d88 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d11d      	bne.n	8008dc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689a      	ldr	r2, [r3, #8]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0201 	bic.w	r2, r2, #1
 8008da6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2220      	movs	r2, #32
 8008db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e045      	b.n	8008e50 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d02e      	beq.n	8008e30 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008de0:	d126      	bne.n	8008e30 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dea:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dfa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689a      	ldr	r2, [r3, #8]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0201 	bic.w	r2, r2, #1
 8008e0a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2220      	movs	r2, #32
 8008e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e00f      	b.n	8008e50 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69da      	ldr	r2, [r3, #28]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	68ba      	ldr	r2, [r7, #8]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	bf0c      	ite	eq
 8008e40:	2301      	moveq	r3, #1
 8008e42:	2300      	movne	r3, #0
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	461a      	mov	r2, r3
 8008e48:	79fb      	ldrb	r3, [r7, #7]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d08d      	beq.n	8008d6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e6e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6899      	ldr	r1, [r3, #8]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <UART_EndRxTransfer+0x44>)
 8008e7c:	400b      	ands	r3, r1
 8008e7e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008e8e:	bf00      	nop
 8008e90:	370c      	adds	r7, #12
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	effffffe 	.word	0xeffffffe

08008ea0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebe:	68f8      	ldr	r0, [r7, #12]
 8008ec0:	f7fd fcd6 	bl	8006870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ee2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fd fcb2 	bl	800685c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ef8:	bf00      	nop
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f0e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f16:	2b22      	cmp	r3, #34	; 0x22
 8008f18:	d13b      	bne.n	8008f92 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f22:	89bb      	ldrh	r3, [r7, #12]
 8008f24:	b2d9      	uxtb	r1, r3
 8008f26:	89fb      	ldrh	r3, [r7, #14]
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f2e:	400a      	ands	r2, r1
 8008f30:	b2d2      	uxtb	r2, r2
 8008f32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d122      	bne.n	8008fa2 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f6a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689a      	ldr	r2, [r3, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0201 	bic.w	r2, r2, #1
 8008f7a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7f8 fbd6 	bl	800173c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f90:	e007      	b.n	8008fa2 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	699a      	ldr	r2, [r3, #24]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f042 0208 	orr.w	r2, r2, #8
 8008fa0:	619a      	str	r2, [r3, #24]
}
 8008fa2:	bf00      	nop
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008fb8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fc0:	2b22      	cmp	r3, #34	; 0x22
 8008fc2:	d13b      	bne.n	800903c <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008fd2:	89ba      	ldrh	r2, [r7, #12]
 8008fd4:	89fb      	ldrh	r3, [r7, #14]
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe2:	1c9a      	adds	r2, r3, #2
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d122      	bne.n	800904c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009014:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0201 	bic.w	r2, r2, #1
 8009024:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7f8 fb81 	bl	800173c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800903a:	e007      	b.n	800904c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	699a      	ldr	r2, [r3, #24]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f042 0208 	orr.w	r2, r2, #8
 800904a:	619a      	str	r2, [r3, #24]
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009062:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800906a:	2b22      	cmp	r3, #34	; 0x22
 800906c:	d166      	bne.n	800913c <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009074:	81fb      	strh	r3, [r7, #14]
 8009076:	e03d      	b.n	80090f4 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009080:	893b      	ldrh	r3, [r7, #8]
 8009082:	b2d9      	uxtb	r1, r3
 8009084:	89bb      	ldrh	r3, [r7, #12]
 8009086:	b2da      	uxtb	r2, r3
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908c:	400a      	ands	r2, r1
 800908e:	b2d2      	uxtb	r2, r2
 8009090:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d119      	bne.n	80090ee <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090c8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6899      	ldr	r1, [r3, #8]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	4b1f      	ldr	r3, [pc, #124]	; (8009154 <UART_RxISR_8BIT_FIFOEN+0x100>)
 80090d6:	400b      	ands	r3, r1
 80090d8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7f8 fb27 	bl	800173c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80090ee:	89fb      	ldrh	r3, [r7, #14]
 80090f0:	3b01      	subs	r3, #1
 80090f2:	81fb      	strh	r3, [r7, #14]
 80090f4:	89fb      	ldrh	r3, [r7, #14]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1be      	bne.n	8009078 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009100:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009102:	897b      	ldrh	r3, [r7, #10]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d021      	beq.n	800914c <UART_RxISR_8BIT_FIFOEN+0xf8>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800910e:	897a      	ldrh	r2, [r7, #10]
 8009110:	429a      	cmp	r2, r3
 8009112:	d21b      	bcs.n	800914c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689a      	ldr	r2, [r3, #8]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009122:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a0c      	ldr	r2, [pc, #48]	; (8009158 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8009128:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f042 0220 	orr.w	r2, r2, #32
 8009138:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800913a:	e007      	b.n	800914c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699a      	ldr	r2, [r3, #24]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0208 	orr.w	r2, r2, #8
 800914a:	619a      	str	r2, [r3, #24]
}
 800914c:	bf00      	nop
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}
 8009154:	effffffe 	.word	0xeffffffe
 8009158:	08008f01 	.word	0x08008f01

0800915c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b086      	sub	sp, #24
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800916a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009172:	2b22      	cmp	r3, #34	; 0x22
 8009174:	d166      	bne.n	8009244 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800917c:	82fb      	strh	r3, [r7, #22]
 800917e:	e03d      	b.n	80091fc <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800918e:	8a3a      	ldrh	r2, [r7, #16]
 8009190:	8abb      	ldrh	r3, [r7, #20]
 8009192:	4013      	ands	r3, r2
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919e:	1c9a      	adds	r2, r3, #2
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091bc:	b29b      	uxth	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d119      	bne.n	80091f6 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091d0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6899      	ldr	r1, [r3, #8]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	4b1f      	ldr	r3, [pc, #124]	; (800925c <UART_RxISR_16BIT_FIFOEN+0x100>)
 80091de:	400b      	ands	r3, r1
 80091e0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2220      	movs	r2, #32
 80091e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f7f8 faa3 	bl	800173c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80091f6:	8afb      	ldrh	r3, [r7, #22]
 80091f8:	3b01      	subs	r3, #1
 80091fa:	82fb      	strh	r3, [r7, #22]
 80091fc:	8afb      	ldrh	r3, [r7, #22]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1be      	bne.n	8009180 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009208:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800920a:	8a7b      	ldrh	r3, [r7, #18]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d021      	beq.n	8009254 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009216:	8a7a      	ldrh	r2, [r7, #18]
 8009218:	429a      	cmp	r2, r3
 800921a:	d21b      	bcs.n	8009254 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800922a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a0c      	ldr	r2, [pc, #48]	; (8009260 <UART_RxISR_16BIT_FIFOEN+0x104>)
 8009230:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f042 0220 	orr.w	r2, r2, #32
 8009240:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009242:	e007      	b.n	8009254 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0208 	orr.w	r2, r2, #8
 8009252:	619a      	str	r2, [r3, #24]
}
 8009254:	bf00      	nop
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	effffffe 	.word	0xeffffffe
 8009260:	08008fab 	.word	0x08008fab

08009264 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d101      	bne.n	80092b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80092b2:	2302      	movs	r3, #2
 80092b4:	e027      	b.n	8009306 <HAL_UARTEx_DisableFifoMode+0x66>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2224      	movs	r2, #36	; 0x24
 80092c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f022 0201 	bic.w	r2, r2, #1
 80092dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2220      	movs	r2, #32
 80092f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009326:	2302      	movs	r3, #2
 8009328:	e02d      	b.n	8009386 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2224      	movs	r2, #36	; 0x24
 8009336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0201 	bic.w	r2, r2, #1
 8009350:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	689b      	ldr	r3, [r3, #8]
 8009358:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f850 	bl	800940c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d101      	bne.n	80093a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093a2:	2302      	movs	r3, #2
 80093a4:	e02d      	b.n	8009402 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2224      	movs	r2, #36	; 0x24
 80093b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0201 	bic.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f812 	bl	800940c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2220      	movs	r2, #32
 80093f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b089      	sub	sp, #36	; 0x24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009414:	4a2f      	ldr	r2, [pc, #188]	; (80094d4 <UARTEx_SetNbDataToProcess+0xc8>)
 8009416:	f107 0314 	add.w	r3, r7, #20
 800941a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800941e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009422:	4a2d      	ldr	r2, [pc, #180]	; (80094d8 <UARTEx_SetNbDataToProcess+0xcc>)
 8009424:	f107 030c 	add.w	r3, r7, #12
 8009428:	e892 0003 	ldmia.w	r2, {r0, r1}
 800942c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009434:	2b00      	cmp	r3, #0
 8009436:	d108      	bne.n	800944a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009448:	e03d      	b.n	80094c6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800944a:	2308      	movs	r3, #8
 800944c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800944e:	2308      	movs	r3, #8
 8009450:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	0e5b      	lsrs	r3, r3, #25
 800945a:	b2db      	uxtb	r3, r3
 800945c:	f003 0307 	and.w	r3, r3, #7
 8009460:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	0f5b      	lsrs	r3, r3, #29
 800946a:	b2db      	uxtb	r3, r3
 800946c:	f003 0307 	and.w	r3, r3, #7
 8009470:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009472:	7fbb      	ldrb	r3, [r7, #30]
 8009474:	7f3a      	ldrb	r2, [r7, #28]
 8009476:	f107 0120 	add.w	r1, r7, #32
 800947a:	440a      	add	r2, r1
 800947c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009480:	fb02 f303 	mul.w	r3, r2, r3
 8009484:	7f3a      	ldrb	r2, [r7, #28]
 8009486:	f107 0120 	add.w	r1, r7, #32
 800948a:	440a      	add	r2, r1
 800948c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009490:	fb93 f3f2 	sdiv	r3, r3, r2
 8009494:	b29a      	uxth	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800949c:	7ffb      	ldrb	r3, [r7, #31]
 800949e:	7f7a      	ldrb	r2, [r7, #29]
 80094a0:	f107 0120 	add.w	r1, r7, #32
 80094a4:	440a      	add	r2, r1
 80094a6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80094aa:	fb02 f303 	mul.w	r3, r2, r3
 80094ae:	7f7a      	ldrb	r2, [r7, #29]
 80094b0:	f107 0120 	add.w	r1, r7, #32
 80094b4:	440a      	add	r2, r1
 80094b6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80094ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80094be:	b29a      	uxth	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094c6:	bf00      	nop
 80094c8:	3724      	adds	r7, #36	; 0x24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	08009abc 	.word	0x08009abc
 80094d8:	08009ac4 	.word	0x08009ac4

080094dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094dc:	b084      	sub	sp, #16
 80094de:	b580      	push	{r7, lr}
 80094e0:	b084      	sub	sp, #16
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
 80094e6:	f107 001c 	add.w	r0, r7, #28
 80094ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d120      	bne.n	8009536 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	4b25      	ldr	r3, [pc, #148]	; (800959c <USB_CoreInit+0xc0>)
 8009506:	4013      	ands	r3, r2
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800951a:	2b01      	cmp	r3, #1
 800951c:	d105      	bne.n	800952a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fa5a 	bl	80099e4 <USB_CoreReset>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]
 8009534:	e01a      	b.n	800956c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 fa4e 	bl	80099e4 <USB_CoreReset>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800954c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800954e:	2b00      	cmp	r3, #0
 8009550:	d106      	bne.n	8009560 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	639a      	str	r2, [r3, #56]	; 0x38
 800955e:	e005      	b.n	800956c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956e:	2b01      	cmp	r3, #1
 8009570:	d10b      	bne.n	800958a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f043 0208 	orr.w	r2, r3, #8
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f043 0220 	orr.w	r2, r3, #32
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009596:	b004      	add	sp, #16
 8009598:	4770      	bx	lr
 800959a:	bf00      	nop
 800959c:	ffbdffbf 	.word	0xffbdffbf

080095a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f023 0201 	bic.w	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d106      	bne.n	80095ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60da      	str	r2, [r3, #12]
 80095ec:	e00b      	b.n	8009606 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80095ee:	78fb      	ldrb	r3, [r7, #3]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60da      	str	r2, [r3, #12]
 8009600:	e001      	b.n	8009606 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e003      	b.n	800960e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009606:	2032      	movs	r0, #50	; 0x32
 8009608:	f7f8 f9e4 	bl	80019d4 <HAL_Delay>

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009618:	b084      	sub	sp, #16
 800961a:	b580      	push	{r7, lr}
 800961c:	b086      	sub	sp, #24
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009626:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800962a:	2300      	movs	r3, #0
 800962c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009632:	2300      	movs	r3, #0
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	e009      	b.n	800964c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3340      	adds	r3, #64	; 0x40
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	4413      	add	r3, r2
 8009642:	2200      	movs	r2, #0
 8009644:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	3301      	adds	r3, #1
 800964a:	613b      	str	r3, [r7, #16]
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	2b0e      	cmp	r3, #14
 8009650:	d9f2      	bls.n	8009638 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d112      	bne.n	800967e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800965c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	601a      	str	r2, [r3, #0]
 800967c:	e005      	b.n	800968a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009682:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009690:	461a      	mov	r2, r3
 8009692:	2300      	movs	r3, #0
 8009694:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969c:	4619      	mov	r1, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a4:	461a      	mov	r2, r3
 80096a6:	680b      	ldr	r3, [r1, #0]
 80096a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d10c      	bne.n	80096ca <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096b6:	2100      	movs	r1, #0
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f000 f961 	bl	8009980 <USB_SetDevSpeed>
 80096be:	e008      	b.n	80096d2 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096c0:	2101      	movs	r1, #1
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f95c 	bl	8009980 <USB_SetDevSpeed>
 80096c8:	e003      	b.n	80096d2 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096ca:	2103      	movs	r1, #3
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f957 	bl	8009980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096d2:	2110      	movs	r1, #16
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f90b 	bl	80098f0 <USB_FlushTxFifo>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f000 f929 	bl	800993c <USB_FlushRxFifo>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fa:	461a      	mov	r2, r3
 80096fc:	2300      	movs	r3, #0
 80096fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009706:	461a      	mov	r2, r3
 8009708:	2300      	movs	r3, #0
 800970a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009712:	461a      	mov	r2, r3
 8009714:	2300      	movs	r3, #0
 8009716:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009718:	2300      	movs	r3, #0
 800971a:	613b      	str	r3, [r7, #16]
 800971c:	e043      	b.n	80097a6 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	015a      	lsls	r2, r3, #5
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	4413      	add	r3, r2
 8009726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009734:	d118      	bne.n	8009768 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	015a      	lsls	r2, r3, #5
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	4413      	add	r3, r2
 8009744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009748:	461a      	mov	r2, r3
 800974a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e013      	b.n	800977a <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800975e:	461a      	mov	r2, r3
 8009760:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	e008      	b.n	800977a <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009774:	461a      	mov	r2, r3
 8009776:	2300      	movs	r3, #0
 8009778:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009786:	461a      	mov	r2, r3
 8009788:	2300      	movs	r3, #0
 800978a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009798:	461a      	mov	r2, r3
 800979a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800979e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	3301      	adds	r3, #1
 80097a4:	613b      	str	r3, [r7, #16]
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d3b7      	bcc.n	800971e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	e043      	b.n	800983c <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097ca:	d118      	bne.n	80097fe <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097de:	461a      	mov	r2, r3
 80097e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	e013      	b.n	8009810 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f4:	461a      	mov	r2, r3
 80097f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	e008      	b.n	8009810 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980a:	461a      	mov	r2, r3
 800980c:	2300      	movs	r3, #0
 800980e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800981c:	461a      	mov	r2, r3
 800981e:	2300      	movs	r3, #0
 8009820:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982e:	461a      	mov	r2, r3
 8009830:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009834:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	3301      	adds	r3, #1
 800983a:	613b      	str	r3, [r7, #16]
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	429a      	cmp	r2, r3
 8009842:	d3b7      	bcc.n	80097b4 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009852:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009856:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8009858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985a:	2b01      	cmp	r3, #1
 800985c:	d110      	bne.n	8009880 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009864:	461a      	mov	r2, r3
 8009866:	4b1e      	ldr	r3, [pc, #120]	; (80098e0 <USB_DevInit+0x2c8>)
 8009868:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009878:	4619      	mov	r1, r3
 800987a:	4b1a      	ldr	r3, [pc, #104]	; (80098e4 <USB_DevInit+0x2cc>)
 800987c:	4313      	orrs	r3, r2
 800987e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800988c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	2b00      	cmp	r3, #0
 8009892:	d105      	bne.n	80098a0 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	f043 0210 	orr.w	r2, r3, #16
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	699a      	ldr	r2, [r3, #24]
 80098a4:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <USB_DevInit+0x2d0>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	f043 0208 	orr.w	r2, r3, #8
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d105      	bne.n	80098d0 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	699a      	ldr	r2, [r3, #24]
 80098c8:	4b08      	ldr	r3, [pc, #32]	; (80098ec <USB_DevInit+0x2d4>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3718      	adds	r7, #24
 80098d6:	46bd      	mov	sp, r7
 80098d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098dc:	b004      	add	sp, #16
 80098de:	4770      	bx	lr
 80098e0:	00800100 	.word	0x00800100
 80098e4:	00010003 	.word	0x00010003
 80098e8:	803c3800 	.word	0x803c3800
 80098ec:	40000004 	.word	0x40000004

080098f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80098fa:	2300      	movs	r3, #0
 80098fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	019b      	lsls	r3, r3, #6
 8009902:	f043 0220 	orr.w	r2, r3, #32
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3301      	adds	r3, #1
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	4a09      	ldr	r2, [pc, #36]	; (8009938 <USB_FlushTxFifo+0x48>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d901      	bls.n	800991c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e006      	b.n	800992a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	f003 0320 	and.w	r3, r3, #32
 8009924:	2b20      	cmp	r3, #32
 8009926:	d0f0      	beq.n	800990a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009928:	2300      	movs	r3, #0
}
 800992a:	4618      	mov	r0, r3
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	00030d40 	.word	0x00030d40

0800993c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009944:	2300      	movs	r3, #0
 8009946:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2210      	movs	r2, #16
 800994c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3301      	adds	r3, #1
 8009952:	60fb      	str	r3, [r7, #12]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	4a09      	ldr	r2, [pc, #36]	; (800997c <USB_FlushRxFifo+0x40>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d901      	bls.n	8009960 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	e006      	b.n	800996e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b10      	cmp	r3, #16
 800996a:	d0f0      	beq.n	800994e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	00030d40 	.word	0x00030d40

08009980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009980:	b480      	push	{r7}
 8009982:	b085      	sub	sp, #20
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	68f9      	ldr	r1, [r7, #12]
 800999c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099a0:	4313      	orrs	r3, r2
 80099a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099cc:	f043 0302 	orr.w	r3, r3, #2
 80099d0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80099d2:	2003      	movs	r0, #3
 80099d4:	f7f7 fffe 	bl	80019d4 <HAL_Delay>

  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3301      	adds	r3, #1
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	4a13      	ldr	r2, [pc, #76]	; (8009a48 <USB_CoreReset+0x64>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d901      	bls.n	8009a02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e01b      	b.n	8009a3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	daf2      	bge.n	80099f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f043 0201 	orr.w	r2, r3, #1
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <USB_CoreReset+0x64>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d901      	bls.n	8009a2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	e006      	b.n	8009a3a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d0f0      	beq.n	8009a1a <USB_CoreReset+0x36>

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	00030d40 	.word	0x00030d40

08009a4c <__libc_init_array>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	4e0d      	ldr	r6, [pc, #52]	; (8009a84 <__libc_init_array+0x38>)
 8009a50:	4c0d      	ldr	r4, [pc, #52]	; (8009a88 <__libc_init_array+0x3c>)
 8009a52:	1ba4      	subs	r4, r4, r6
 8009a54:	10a4      	asrs	r4, r4, #2
 8009a56:	2500      	movs	r5, #0
 8009a58:	42a5      	cmp	r5, r4
 8009a5a:	d109      	bne.n	8009a70 <__libc_init_array+0x24>
 8009a5c:	4e0b      	ldr	r6, [pc, #44]	; (8009a8c <__libc_init_array+0x40>)
 8009a5e:	4c0c      	ldr	r4, [pc, #48]	; (8009a90 <__libc_init_array+0x44>)
 8009a60:	f000 f820 	bl	8009aa4 <_init>
 8009a64:	1ba4      	subs	r4, r4, r6
 8009a66:	10a4      	asrs	r4, r4, #2
 8009a68:	2500      	movs	r5, #0
 8009a6a:	42a5      	cmp	r5, r4
 8009a6c:	d105      	bne.n	8009a7a <__libc_init_array+0x2e>
 8009a6e:	bd70      	pop	{r4, r5, r6, pc}
 8009a70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a74:	4798      	blx	r3
 8009a76:	3501      	adds	r5, #1
 8009a78:	e7ee      	b.n	8009a58 <__libc_init_array+0xc>
 8009a7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a7e:	4798      	blx	r3
 8009a80:	3501      	adds	r5, #1
 8009a82:	e7f2      	b.n	8009a6a <__libc_init_array+0x1e>
 8009a84:	08009ae4 	.word	0x08009ae4
 8009a88:	08009ae4 	.word	0x08009ae4
 8009a8c:	08009ae4 	.word	0x08009ae4
 8009a90:	08009ae8 	.word	0x08009ae8

08009a94 <memset>:
 8009a94:	4402      	add	r2, r0
 8009a96:	4603      	mov	r3, r0
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d100      	bne.n	8009a9e <memset+0xa>
 8009a9c:	4770      	bx	lr
 8009a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa2:	e7f9      	b.n	8009a98 <memset+0x4>

08009aa4 <_init>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	bf00      	nop
 8009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aaa:	bc08      	pop	{r3}
 8009aac:	469e      	mov	lr, r3
 8009aae:	4770      	bx	lr

08009ab0 <_fini>:
 8009ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab2:	bf00      	nop
 8009ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab6:	bc08      	pop	{r3}
 8009ab8:	469e      	mov	lr, r3
 8009aba:	4770      	bx	lr

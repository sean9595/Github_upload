
Manipulator_Control_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009710  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080099a8  080099a8  000199a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c8  080099c8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080099c8  080099c8  000199c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d0  080099d0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099d4  080099d4  000199d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080099d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080099e8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009a48  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000678  240000d0  08009aa8  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000748  08009aa8  00020748  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029bed  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000040ac  00000000  00000000  00049ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000015d8  00000000  00000000  0004dd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001440  00000000  00000000  0004f370  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b79  00000000  00000000  000507b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00015839  00000000  00000000  00089329  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001655a9  00000000  00000000  0009eb62  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0020410b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c3c  00000000  00000000  00204188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009990 	.word	0x08009990

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009990 	.word	0x08009990

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_ETH_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_ETH_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ETH_Init+0x90>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x90>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x90>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	3302      	adds	r3, #2
 80005fa:	22e1      	movs	r2, #225	; 0xe1
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x90>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x90>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3304      	adds	r3, #4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x90>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	3305      	adds	r3, #5
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_ETH_Init+0x90>)
 800061e:	2201      	movs	r2, #1
 8000620:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x90>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_ETH_Init+0x98>)
 8000626:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_ETH_Init+0x90>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_ETH_Init+0x9c>)
 800062c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x90>)
 8000630:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x90>)
 8000638:	f001 fdc6 	bl	80021c8 <HAL_ETH_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa87 	bl	8000b54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ETH_Init+0xa0>)
 800064c:	f009 f998 	bl	8009980 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0xa0>)
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_ETH_Init+0xa0>)
 8000658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_ETH_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	240000ec 	.word	0x240000ec
 800066c:	40028000 	.word	0x40028000
 8000670:	24000070 	.word	0x24000070
 8000674:	24000010 	.word	0x24000010
 8000678:	2400015c 	.word	0x2400015c

0800067c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <HAL_ETH_MspInit+0x184>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f040 80ab 	bne.w	80007f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a6:	4a57      	ldr	r2, [pc, #348]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006be:	4b51      	ldr	r3, [pc, #324]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <HAL_ETH_MspInit+0x18c>)
 800078e:	f002 f931 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000792:	2386      	movs	r3, #134	; 0x86
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a2:	230b      	movs	r3, #11
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <HAL_ETH_MspInit+0x190>)
 80007ae:	f002 f921 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <HAL_ETH_MspInit+0x194>)
 80007d0:	f002 f910 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_ETH_MspInit+0x198>)
 80007f2:	f002 f8ff 	bl	80029f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40028000 	.word	0x40028000
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58021800 	.word	0x58021800

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x154>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <MX_GPIO_Init+0x154>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x154>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x154>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <MX_GPIO_Init+0x154>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x154>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x154>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x154>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x154>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x154>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x154>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x154>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ea:	f002 fa33 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008f4:	f002 fa2e 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x160>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x164>)
 800090e:	f002 f871 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000912:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x158>)
 800092c:	f002 f862 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000948:	f002 f854 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000960:	f002 f848 	bl	80029f4 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58021800 	.word	0x58021800
 8000978:	11110000 	.word	0x11110000
 800097c:	58020800 	.word	0x58020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f001 f8aa 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f82c 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff44 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 8000990:	f7ff fe22 	bl	80005d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000994:	f000 ff50 	bl	8001838 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f000 ffec 	bl	8001974 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800099c:	f000 fd48 	bl	8001430 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fdd4 	bl	800154c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  servo_initialize(0); //
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f8dd 	bl	8000b64 <servo_initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  servo_goto(0, 0, 70);
 80009aa:	2246      	movs	r2, #70	; 0x46
 80009ac:	2100      	movs	r1, #0
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fc4a 	bl	8001248 <servo_goto>
				  if (!servo_is_running(0))
				  {
					  break;
				  }
			  }*/
			  HAL_Delay(3000);
 80009b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009b8:	f001 f91e 	bl	8001bf8 <HAL_Delay>
			  servo_goto(0, 1800, 30);
 80009bc:	221e      	movs	r2, #30
 80009be:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fc40 	bl	8001248 <servo_goto>
			  //servo_goto(1, 1800, 70);
			  while(1)
			  {
				  if (!servo_is_running(0))
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fc55 	bl	8001278 <servo_is_running>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d000      	beq.n	80009d6 <main+0x56>
 80009d4:	e7f8      	b.n	80009c8 <main+0x48>
				  {
					  break;
 80009d6:	bf00      	nop
				  }
			  }
			  HAL_Delay(3000);
 80009d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009dc:	f001 f90c 	bl	8001bf8 <HAL_Delay>
	  servo_goto(0, 0, 70);
 80009e0:	e7e3      	b.n	80009aa <main+0x2a>
	...

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0cc      	sub	sp, #304	; 0x130
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009ee:	224c      	movs	r2, #76	; 0x4c
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f008 ffc4 	bl	8009980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009fc:	2220      	movs	r2, #32
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f008 ffbd 	bl	8009980 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	23bc      	movs	r3, #188	; 0xbc
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f008 ffb5 	bl	8009980 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f002 fafe 	bl	8003018 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <SystemClock_Config+0x164>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	4a48      	ldr	r2, [pc, #288]	; (8000b48 <SystemClock_Config+0x164>)
 8000a28:	f023 0301 	bic.w	r3, r3, #1
 8000a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a2e:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <SystemClock_Config+0x164>)
 8000a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a32:	f003 0201 	and.w	r2, r3, #1
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <SystemClock_Config+0x168>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a43      	ldr	r2, [pc, #268]	; (8000b4c <SystemClock_Config+0x168>)
 8000a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <SystemClock_Config+0x168>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a56:	bf00      	nop
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <SystemClock_Config+0x168>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a64:	d1f8      	bne.n	8000a58 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a86:	2318      	movs	r3, #24
 8000a88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 faf7 	bl	80030a8 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ac0:	f000 f848 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	233f      	movs	r3, #63	; 0x3f
 8000ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000af8:	2101      	movs	r1, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fe8c 	bl	8003818 <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000b06:	f000 f825 	bl	8000b54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <SystemClock_Config+0x16c>)
 8000b10:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2200      	movs	r2, #0
 8000b18:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f9d2 	bl	8003ed4 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8000b36:	f000 f80d 	bl	8000b54 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b3a:	f002 faa5 	bl	8003088 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b3e:	bf00      	nop
 8000b40:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58000400 	.word	0x58000400
 8000b4c:	58024800 	.word	0x58024800
 8000b50:	00040002 	.word	0x00040002

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <servo_initialize>:

Servo servo[3];


void servo_initialize(int _servo_num)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (!servo[0].enable && !servo[1].enable && !servo[2].enable)
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <servo_initialize+0x74>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10f      	bne.n	8000b94 <servo_initialize+0x30>
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <servo_initialize+0x74>)
 8000b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10b      	bne.n	8000b94 <servo_initialize+0x30>
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <servo_initialize+0x74>)
 8000b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d106      	bne.n	8000b94 <servo_initialize+0x30>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <servo_initialize+0x78>)
 8000b88:	f004 fcee 	bl	8005568 <HAL_TIM_Base_Start_IT>
		tim_reg = htim3.Instance;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <servo_initialize+0x78>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <servo_initialize+0x7c>)
 8000b92:	6013      	str	r3, [r2, #0]
	}

	switch (_servo_num)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d008      	beq.n	8000bac <servo_initialize+0x48>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d00b      	beq.n	8000bb6 <servo_initialize+0x52>
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10e      	bne.n	8000bc0 <servo_initialize+0x5c>
	{
	case 0:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <servo_initialize+0x78>)
 8000ba6:	f004 fd3f 	bl	8005628 <HAL_TIM_PWM_Start_IT>
		break;
 8000baa:	e009      	b.n	8000bc0 <servo_initialize+0x5c>
	case 1:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000bac:	2104      	movs	r1, #4
 8000bae:	480b      	ldr	r0, [pc, #44]	; (8000bdc <servo_initialize+0x78>)
 8000bb0:	f004 fd3a 	bl	8005628 <HAL_TIM_PWM_Start_IT>
		break;
 8000bb4:	e004      	b.n	8000bc0 <servo_initialize+0x5c>
	case 2:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <servo_initialize+0x78>)
 8000bba:	f004 fd35 	bl	8005628 <HAL_TIM_PWM_Start_IT>
		break;
 8000bbe:	bf00      	nop
	}

	servo[_servo_num].cur_angle = 0;
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <servo_initialize+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2134      	movs	r1, #52	; 0x34
 8000bc6:	fb01 f303 	mul.w	r3, r1, r3
 8000bca:	4413      	add	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24000194 	.word	0x24000194
 8000bdc:	24000270 	.word	0x24000270
 8000be0:	24000190 	.word	0x24000190

08000be4 <servo_run>:

void servo_run(int _servo_num)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if (servo[_servo_num].delta != 0)
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <servo_run+0x50>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2134      	movs	r1, #52	; 0x34
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3324      	adds	r3, #36	; 0x24
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d009      	beq.n	8000c14 <servo_run+0x30>
	{
		servo[_servo_num].run = 1;
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <servo_run+0x50>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2134      	movs	r1, #52	; 0x34
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	332c      	adds	r3, #44	; 0x2c
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		servo[_servo_num].run = 0;
	}
}
 8000c12:	e008      	b.n	8000c26 <servo_run+0x42>
		servo[_servo_num].run = 0;
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <servo_run+0x50>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2134      	movs	r1, #52	; 0x34
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	332c      	adds	r3, #44	; 0x2c
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	24000194 	.word	0x24000194

08000c38 <servo_update>:
	servo[_servo_num].delta = 0;
	servo[_servo_num].run = 0;
}

void servo_update()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	int pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]

	for (i = 0; i < 3; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	e0d2      	b.n	8000df2 <servo_update+0x1ba>
	{
		if (servo[i].run == 1 && servo[i].delta != 0)
 8000c4c:	4a6d      	ldr	r2, [pc, #436]	; (8000e04 <servo_update+0x1cc>)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	2134      	movs	r1, #52	; 0x34
 8000c52:	fb01 f303 	mul.w	r3, r1, r3
 8000c56:	4413      	add	r3, r2
 8000c58:	332c      	adds	r3, #44	; 0x2c
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	f040 80b3 	bne.w	8000dc8 <servo_update+0x190>
 8000c62:	4a68      	ldr	r2, [pc, #416]	; (8000e04 <servo_update+0x1cc>)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2134      	movs	r1, #52	; 0x34
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3324      	adds	r3, #36	; 0x24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 80a8 	beq.w	8000dc8 <servo_update+0x190>
		{
			servo_speed_update(i);
 8000c78:	6838      	ldr	r0, [r7, #0]
 8000c7a:	f000 f8c7 	bl	8000e0c <servo_speed_update>

			if (servo[i].delta > servo[i].cur_speed)
 8000c7e:	4a61      	ldr	r2, [pc, #388]	; (8000e04 <servo_update+0x1cc>)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2134      	movs	r1, #52	; 0x34
 8000c84:	fb01 f303 	mul.w	r3, r1, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	3324      	adds	r3, #36	; 0x24
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	495d      	ldr	r1, [pc, #372]	; (8000e04 <servo_update+0x1cc>)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2034      	movs	r0, #52	; 0x34
 8000c94:	fb00 f303 	mul.w	r3, r0, r3
 8000c98:	440b      	add	r3, r1
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dd13      	ble.n	8000cca <servo_update+0x92>
			{
				pulse = servo[i].cur_speed * servo[i].direction;
 8000ca2:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <servo_update+0x1cc>)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2134      	movs	r1, #52	; 0x34
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	3308      	adds	r3, #8
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4954      	ldr	r1, [pc, #336]	; (8000e04 <servo_update+0x1cc>)
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	2034      	movs	r0, #52	; 0x34
 8000cb8:	fb00 f202 	mul.w	r2, r0, r2
 8000cbc:	440a      	add	r2, r1
 8000cbe:	3228      	adds	r2, #40	; 0x28
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	e012      	b.n	8000cf0 <servo_update+0xb8>
			}
			else
			{
				pulse = servo[i].delta * servo[i].direction;
 8000cca:	4a4e      	ldr	r2, [pc, #312]	; (8000e04 <servo_update+0x1cc>)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2134      	movs	r1, #52	; 0x34
 8000cd0:	fb01 f303 	mul.w	r3, r1, r3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3324      	adds	r3, #36	; 0x24
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	494a      	ldr	r1, [pc, #296]	; (8000e04 <servo_update+0x1cc>)
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	2034      	movs	r0, #52	; 0x34
 8000ce0:	fb00 f202 	mul.w	r2, r0, r2
 8000ce4:	440a      	add	r2, r1
 8000ce6:	3228      	adds	r2, #40	; 0x28
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	607b      	str	r3, [r7, #4]
			}

			servo[i].cur_angle += pulse;
 8000cf0:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <servo_update+0x1cc>)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2134      	movs	r1, #52	; 0x34
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	441a      	add	r2, r3
 8000d02:	4940      	ldr	r1, [pc, #256]	; (8000e04 <servo_update+0x1cc>)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2034      	movs	r0, #52	; 0x34
 8000d08:	fb00 f303 	mul.w	r3, r0, r3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	601a      	str	r2, [r3, #0]

			switch(i)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d010      	beq.n	8000d38 <servo_update+0x100>
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d01b      	beq.n	8000d52 <servo_update+0x11a>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d126      	bne.n	8000d6c <servo_update+0x134>
			{
			case 0:
				tim_reg->CCR1 = PULSE_L + servo[i].cur_angle;
 8000d1e:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <servo_update+0x1cc>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2134      	movs	r1, #52	; 0x34
 8000d24:	fb01 f303 	mul.w	r3, r1, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <servo_update+0x1d0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000d36:	e019      	b.n	8000d6c <servo_update+0x134>
			case 1:
				tim_reg->CCR2 = PULSE_L + servo[i].cur_angle;
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <servo_update+0x1cc>)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2134      	movs	r1, #52	; 0x34
 8000d3e:	fb01 f303 	mul.w	r3, r1, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <servo_update+0x1d0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000d50:	e00c      	b.n	8000d6c <servo_update+0x134>
			case 2:
				tim_reg->CCR3 = PULSE_L + servo[i].cur_angle;
 8000d52:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <servo_update+0x1cc>)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2134      	movs	r1, #52	; 0x34
 8000d58:	fb01 f303 	mul.w	r3, r1, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <servo_update+0x1d0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000d6a:	bf00      	nop
			}

			servo[i].delta -= pulse * servo[i].direction;
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <servo_update+0x1cc>)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2134      	movs	r1, #52	; 0x34
 8000d72:	fb01 f303 	mul.w	r3, r1, r3
 8000d76:	4413      	add	r3, r2
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4921      	ldr	r1, [pc, #132]	; (8000e04 <servo_update+0x1cc>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2034      	movs	r0, #52	; 0x34
 8000d82:	fb00 f303 	mul.w	r3, r0, r3
 8000d86:	440b      	add	r3, r1
 8000d88:	3328      	adds	r3, #40	; 0x28
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	491b      	ldr	r1, [pc, #108]	; (8000e04 <servo_update+0x1cc>)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2034      	movs	r0, #52	; 0x34
 8000d9a:	fb00 f303 	mul.w	r3, r0, r3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3324      	adds	r3, #36	; 0x24
 8000da2:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps += 1;
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <servo_update+0x1cc>)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2134      	movs	r1, #52	; 0x34
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	331c      	adds	r3, #28
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	4913      	ldr	r1, [pc, #76]	; (8000e04 <servo_update+0x1cc>)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2034      	movs	r0, #52	; 0x34
 8000dbc:	fb00 f303 	mul.w	r3, r0, r3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	331c      	adds	r3, #28
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e011      	b.n	8000dec <servo_update+0x1b4>
		}
		else
		{
			servo[i].run = 0;
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <servo_update+0x1cc>)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2134      	movs	r1, #52	; 0x34
 8000dce:	fb01 f303 	mul.w	r3, r1, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	332c      	adds	r3, #44	; 0x2c
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps = 0;
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <servo_update+0x1cc>)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2134      	movs	r1, #52	; 0x34
 8000de0:	fb01 f303 	mul.w	r3, r1, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	331c      	adds	r3, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	f77f af29 	ble.w	8000c4c <servo_update+0x14>
		}
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000194 	.word	0x24000194
 8000e08:	24000190 	.word	0x24000190

08000e0c <servo_speed_update>:

void servo_speed_update(int _servo_num)
{
 8000e0c:	b490      	push	{r4, r7}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	int i = _servo_num;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60fb      	str	r3, [r7, #12]

	if ((servo[i].cur_steps > servo[i].acc_steps - 1) && (servo[i].cur_steps <= servo[i].acc_steps + servo[i].fixed_speed_steps - 1))
 8000e18:	4a6c      	ldr	r2, [pc, #432]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2134      	movs	r1, #52	; 0x34
 8000e1e:	fb01 f303 	mul.w	r3, r1, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	331c      	adds	r3, #28
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4968      	ldr	r1, [pc, #416]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2034      	movs	r0, #52	; 0x34
 8000e2e:	fb00 f303 	mul.w	r3, r0, r3
 8000e32:	440b      	add	r3, r1
 8000e34:	3314      	adds	r3, #20
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dd2c      	ble.n	8000e98 <servo_speed_update+0x8c>
 8000e3e:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2134      	movs	r1, #52	; 0x34
 8000e44:	fb01 f303 	mul.w	r3, r1, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	331c      	adds	r3, #28
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	495f      	ldr	r1, [pc, #380]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2034      	movs	r0, #52	; 0x34
 8000e54:	fb00 f303 	mul.w	r3, r0, r3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3314      	adds	r3, #20
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	485b      	ldr	r0, [pc, #364]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2434      	movs	r4, #52	; 0x34
 8000e64:	fb04 f303 	mul.w	r3, r4, r3
 8000e68:	4403      	add	r3, r0
 8000e6a:	3318      	adds	r3, #24
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	440b      	add	r3, r1
 8000e70:	3b01      	subs	r3, #1
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dc10      	bgt.n	8000e98 <servo_speed_update+0x8c>
	{
		servo[i].cur_speed = servo[i].dst_speed;
 8000e76:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2134      	movs	r1, #52	; 0x34
 8000e7c:	fb01 f303 	mul.w	r3, r1, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	330c      	adds	r3, #12
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4951      	ldr	r1, [pc, #324]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2034      	movs	r0, #52	; 0x34
 8000e8c:	fb00 f303 	mul.w	r3, r0, r3
 8000e90:	440b      	add	r3, r1
 8000e92:	3308      	adds	r3, #8
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e093      	b.n	8000fc0 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > 0) && (servo[i].cur_steps <= servo[i].acc_steps - 1))
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2134      	movs	r1, #52	; 0x34
 8000e9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	331c      	adds	r3, #28
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dd2c      	ble.n	8000f06 <servo_speed_update+0xfa>
 8000eac:	4a47      	ldr	r2, [pc, #284]	; (8000fcc <servo_speed_update+0x1c0>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2134      	movs	r1, #52	; 0x34
 8000eb2:	fb01 f303 	mul.w	r3, r1, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	331c      	adds	r3, #28
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4943      	ldr	r1, [pc, #268]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2034      	movs	r0, #52	; 0x34
 8000ec2:	fb00 f303 	mul.w	r3, r0, r3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3314      	adds	r3, #20
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dc19      	bgt.n	8000f06 <servo_speed_update+0xfa>
	{
		servo[i].cur_speed += servo[i].acc;
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2134      	movs	r1, #52	; 0x34
 8000ed8:	fb01 f303 	mul.w	r3, r1, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	3308      	adds	r3, #8
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	493a      	ldr	r1, [pc, #232]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2034      	movs	r0, #52	; 0x34
 8000ee8:	fb00 f303 	mul.w	r3, r0, r3
 8000eec:	440b      	add	r3, r1
 8000eee:	3320      	adds	r3, #32
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	441a      	add	r2, r3
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2034      	movs	r0, #52	; 0x34
 8000efa:	fb00 f303 	mul.w	r3, r0, r3
 8000efe:	440b      	add	r3, r1
 8000f00:	3308      	adds	r3, #8
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e05c      	b.n	8000fc0 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > servo[i].acc_steps + servo[i].fixed_speed_steps - 1) && (servo[i].cur_steps <= servo[i].total_steps - 1))
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2134      	movs	r1, #52	; 0x34
 8000f0c:	fb01 f303 	mul.w	r3, r1, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	331c      	adds	r3, #28
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	492d      	ldr	r1, [pc, #180]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2034      	movs	r0, #52	; 0x34
 8000f1c:	fb00 f303 	mul.w	r3, r0, r3
 8000f20:	440b      	add	r3, r1
 8000f22:	3314      	adds	r3, #20
 8000f24:	6819      	ldr	r1, [r3, #0]
 8000f26:	4829      	ldr	r0, [pc, #164]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2434      	movs	r4, #52	; 0x34
 8000f2c:	fb04 f303 	mul.w	r3, r4, r3
 8000f30:	4403      	add	r3, r0
 8000f32:	3318      	adds	r3, #24
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	440b      	add	r3, r1
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dd2c      	ble.n	8000f98 <servo_speed_update+0x18c>
 8000f3e:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2134      	movs	r1, #52	; 0x34
 8000f44:	fb01 f303 	mul.w	r3, r1, r3
 8000f48:	4413      	add	r3, r2
 8000f4a:	331c      	adds	r3, #28
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	491f      	ldr	r1, [pc, #124]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2034      	movs	r0, #52	; 0x34
 8000f54:	fb00 f303 	mul.w	r3, r0, r3
 8000f58:	440b      	add	r3, r1
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dc19      	bgt.n	8000f98 <servo_speed_update+0x18c>
	{
		servo[i].cur_speed -= servo[i].acc;
 8000f64:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2134      	movs	r1, #52	; 0x34
 8000f6a:	fb01 f303 	mul.w	r3, r1, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	3308      	adds	r3, #8
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4915      	ldr	r1, [pc, #84]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2034      	movs	r0, #52	; 0x34
 8000f7a:	fb00 f303 	mul.w	r3, r0, r3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3320      	adds	r3, #32
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1ad2      	subs	r2, r2, r3
 8000f86:	4911      	ldr	r1, [pc, #68]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2034      	movs	r0, #52	; 0x34
 8000f8c:	fb00 f303 	mul.w	r3, r0, r3
 8000f90:	440b      	add	r3, r1
 8000f92:	3308      	adds	r3, #8
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e013      	b.n	8000fc0 <servo_speed_update+0x1b4>
	}
	else if (servo[i].cur_steps == 0)
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2134      	movs	r1, #52	; 0x34
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	331c      	adds	r3, #28
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <servo_speed_update+0x1b4>
	{
		servo[i].cur_speed = BASE_SPEED;
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <servo_speed_update+0x1c0>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2134      	movs	r1, #52	; 0x34
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3308      	adds	r3, #8
 8000fba:	2205      	movs	r2, #5
 8000fbc:	601a      	str	r2, [r3, #0]
	}
}
 8000fbe:	e7ff      	b.n	8000fc0 <servo_speed_update+0x1b4>
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc90      	pop	{r4, r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000194 	.word	0x24000194

08000fd0 <servo_set_angle>:

void servo_set_angle(int _servo_num, int _angle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

	if (_angle > 1800)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000fe4:	dd03      	ble.n	8000fee <servo_set_angle+0x1e>
	{
		_angle = 1800;
 8000fe6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e004      	b.n	8000ff8 <servo_set_angle+0x28>
	}
	else if (_angle < 0)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da01      	bge.n	8000ff8 <servo_set_angle+0x28>
	{
		_angle = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
	}

	servo[i].dst_angle = _angle;
 8000ff8:	4a6e      	ldr	r2, [pc, #440]	; (80011b4 <servo_set_angle+0x1e4>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2134      	movs	r1, #52	; 0x34
 8000ffe:	fb01 f303 	mul.w	r3, r1, r3
 8001002:	4413      	add	r3, r2
 8001004:	3304      	adds	r3, #4
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	601a      	str	r2, [r3, #0]
	servo[i].delta = servo[i].dst_angle - servo[i].cur_angle;
 800100a:	4a6a      	ldr	r2, [pc, #424]	; (80011b4 <servo_set_angle+0x1e4>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2134      	movs	r1, #52	; 0x34
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	4413      	add	r3, r2
 8001016:	3304      	adds	r3, #4
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4966      	ldr	r1, [pc, #408]	; (80011b4 <servo_set_angle+0x1e4>)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2034      	movs	r0, #52	; 0x34
 8001020:	fb00 f303 	mul.w	r3, r0, r3
 8001024:	440b      	add	r3, r1
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1ad2      	subs	r2, r2, r3
 800102a:	4962      	ldr	r1, [pc, #392]	; (80011b4 <servo_set_angle+0x1e4>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2034      	movs	r0, #52	; 0x34
 8001030:	fb00 f303 	mul.w	r3, r0, r3
 8001034:	440b      	add	r3, r1
 8001036:	3324      	adds	r3, #36	; 0x24
 8001038:	601a      	str	r2, [r3, #0]

	if (servo[i].delta < 0)
 800103a:	4a5e      	ldr	r2, [pc, #376]	; (80011b4 <servo_set_angle+0x1e4>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2134      	movs	r1, #52	; 0x34
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	3324      	adds	r3, #36	; 0x24
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	da16      	bge.n	800107c <servo_set_angle+0xac>
	{
		servo_set_direction(i, CW);
 800104e:	f04f 31ff 	mov.w	r1, #4294967295
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f8e2 	bl	800121c <servo_set_direction>
		servo[i].delta *= -1;
 8001058:	4a56      	ldr	r2, [pc, #344]	; (80011b4 <servo_set_angle+0x1e4>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2134      	movs	r1, #52	; 0x34
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3324      	adds	r3, #36	; 0x24
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	425a      	negs	r2, r3
 800106a:	4952      	ldr	r1, [pc, #328]	; (80011b4 <servo_set_angle+0x1e4>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2034      	movs	r0, #52	; 0x34
 8001070:	fb00 f303 	mul.w	r3, r0, r3
 8001074:	440b      	add	r3, r1
 8001076:	3324      	adds	r3, #36	; 0x24
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e00d      	b.n	8001098 <servo_set_angle+0xc8>
	}
	else if(servo[i].delta > 0)
 800107c:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <servo_set_angle+0x1e4>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2134      	movs	r1, #52	; 0x34
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	3324      	adds	r3, #36	; 0x24
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	dd03      	ble.n	8001098 <servo_set_angle+0xc8>
	{
		servo_set_direction(i, CCW);
 8001090:	2101      	movs	r1, #1
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f8c2 	bl	800121c <servo_set_direction>
	}

	servo[i].total_steps = servo[i].delta / (servo[i].dst_speed - ACC_RATIO * (servo[i].dst_speed - BASE_SPEED));
 8001098:	4a46      	ldr	r2, [pc, #280]	; (80011b4 <servo_set_angle+0x1e4>)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2134      	movs	r1, #52	; 0x34
 800109e:	fb01 f303 	mul.w	r3, r1, r3
 80010a2:	4413      	add	r3, r2
 80010a4:	3324      	adds	r3, #36	; 0x24
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80010b0:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <servo_set_angle+0x1e4>)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2134      	movs	r1, #52	; 0x34
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	330c      	adds	r3, #12
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	ee07 3a90 	vmov	s15, r3
 80010c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010c8:	4a3a      	ldr	r2, [pc, #232]	; (80011b4 <servo_set_angle+0x1e4>)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2134      	movs	r1, #52	; 0x34
 80010ce:	fb01 f303 	mul.w	r3, r1, r3
 80010d2:	4413      	add	r3, r2
 80010d4:	330c      	adds	r3, #12
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3b05      	subs	r3, #5
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010e2:	eeb4 4b00 	vmov.f64	d4, #64	; 0x3e000000  0.125
 80010e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80010ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80010ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010f2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	4a2e      	ldr	r2, [pc, #184]	; (80011b4 <servo_set_angle+0x1e4>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2134      	movs	r1, #52	; 0x34
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	4413      	add	r3, r2
 8001106:	3310      	adds	r3, #16
 8001108:	6018      	str	r0, [r3, #0]
	servo[i].acc_steps = ACC_RATIO * servo[i].total_steps;
 800110a:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <servo_set_angle+0x1e4>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2134      	movs	r1, #52	; 0x34
 8001110:	fb01 f303 	mul.w	r3, r1, r3
 8001114:	4413      	add	r3, r2
 8001116:	3310      	adds	r3, #16
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001122:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 8001126:	ee27 7b06 	vmul.f64	d7, d7, d6
 800112a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <servo_set_angle+0x1e4>)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2134      	movs	r1, #52	; 0x34
 8001138:	fb01 f303 	mul.w	r3, r1, r3
 800113c:	4413      	add	r3, r2
 800113e:	3314      	adds	r3, #20
 8001140:	6018      	str	r0, [r3, #0]
	servo[i].fixed_speed_steps = servo[i].total_steps - 2 * servo[i].acc_steps;
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <servo_set_angle+0x1e4>)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2134      	movs	r1, #52	; 0x34
 8001148:	fb01 f303 	mul.w	r3, r1, r3
 800114c:	4413      	add	r3, r2
 800114e:	3310      	adds	r3, #16
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	4918      	ldr	r1, [pc, #96]	; (80011b4 <servo_set_angle+0x1e4>)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2034      	movs	r0, #52	; 0x34
 8001158:	fb00 f303 	mul.w	r3, r0, r3
 800115c:	440b      	add	r3, r1
 800115e:	3314      	adds	r3, #20
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	1ad2      	subs	r2, r2, r3
 8001166:	4913      	ldr	r1, [pc, #76]	; (80011b4 <servo_set_angle+0x1e4>)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2034      	movs	r0, #52	; 0x34
 800116c:	fb00 f303 	mul.w	r3, r0, r3
 8001170:	440b      	add	r3, r1
 8001172:	3318      	adds	r3, #24
 8001174:	601a      	str	r2, [r3, #0]
	servo[i].acc = (servo[i].dst_speed - BASE_SPEED) / servo[i].acc_steps;
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <servo_set_angle+0x1e4>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2134      	movs	r1, #52	; 0x34
 800117c:	fb01 f303 	mul.w	r3, r1, r3
 8001180:	4413      	add	r3, r2
 8001182:	330c      	adds	r3, #12
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1f5a      	subs	r2, r3, #5
 8001188:	490a      	ldr	r1, [pc, #40]	; (80011b4 <servo_set_angle+0x1e4>)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2034      	movs	r0, #52	; 0x34
 800118e:	fb00 f303 	mul.w	r3, r0, r3
 8001192:	440b      	add	r3, r1
 8001194:	3314      	adds	r3, #20
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	fb92 f2f3 	sdiv	r2, r2, r3
 800119c:	4905      	ldr	r1, [pc, #20]	; (80011b4 <servo_set_angle+0x1e4>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2034      	movs	r0, #52	; 0x34
 80011a2:	fb00 f303 	mul.w	r3, r0, r3
 80011a6:	440b      	add	r3, r1
 80011a8:	3320      	adds	r3, #32
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	24000194 	.word	0x24000194

080011b8 <servo_set_speed>:

void servo_set_speed(int _servo_num, int _speed)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

	if (_speed > MAX_SPEED)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	2b32      	cmp	r3, #50	; 0x32
 80011ca:	dd09      	ble.n	80011e0 <servo_set_speed+0x28>
	{
		servo[i].dst_speed = MAX_SPEED;
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <servo_set_speed+0x60>)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2134      	movs	r1, #52	; 0x34
 80011d2:	fb01 f303 	mul.w	r3, r1, r3
 80011d6:	4413      	add	r3, r2
 80011d8:	330c      	adds	r3, #12
 80011da:	2232      	movs	r2, #50	; 0x32
 80011dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		servo[i].dst_speed = _speed;
	}
}
 80011de:	e015      	b.n	800120c <servo_set_speed+0x54>
	else if (_speed < MIN_SPEED)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	dc09      	bgt.n	80011fa <servo_set_speed+0x42>
		servo[i].dst_speed = MIN_SPEED;
 80011e6:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <servo_set_speed+0x60>)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2134      	movs	r1, #52	; 0x34
 80011ec:	fb01 f303 	mul.w	r3, r1, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	330c      	adds	r3, #12
 80011f4:	220a      	movs	r2, #10
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	e008      	b.n	800120c <servo_set_speed+0x54>
		servo[i].dst_speed = _speed;
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <servo_set_speed+0x60>)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2134      	movs	r1, #52	; 0x34
 8001200:	fb01 f303 	mul.w	r3, r1, r3
 8001204:	4413      	add	r3, r2
 8001206:	330c      	adds	r3, #12
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	24000194 	.word	0x24000194

0800121c <servo_set_direction>:

void servo_set_direction(int _servo_num, int _direction)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	servo[_servo_num].direction = _direction;
 8001226:	4a07      	ldr	r2, [pc, #28]	; (8001244 <servo_set_direction+0x28>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2134      	movs	r1, #52	; 0x34
 800122c:	fb01 f303 	mul.w	r3, r1, r3
 8001230:	4413      	add	r3, r2
 8001232:	3328      	adds	r3, #40	; 0x28
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	24000194 	.word	0x24000194

08001248 <servo_goto>:

void servo_goto(int _servo_num, int _val, int _speed)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	if (_speed != 0)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <servo_goto+0x1a>
	{
		servo_set_speed(_servo_num, _speed);
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff ffab 	bl	80011b8 <servo_set_speed>
	}

	servo_set_angle(_servo_num, _val);
 8001262:	68b9      	ldr	r1, [r7, #8]
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f7ff feb3 	bl	8000fd0 <servo_set_angle>
	servo_run(_servo_num);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fcba 	bl	8000be4 <servo_run>
}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <servo_is_running>:
	servo_set_angle(_servo_num, servo[_servo_num].cur_angle + _val * _direction);
	servo_run(_servo_num);
}

int servo_is_running(int _servo_num)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	return servo[_servo_num].run;
 8001280:	4a06      	ldr	r2, [pc, #24]	; (800129c <servo_is_running+0x24>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2134      	movs	r1, #52	; 0x34
 8001286:	fb01 f303 	mul.w	r3, r1, r3
 800128a:	4413      	add	r3, r2
 800128c:	332c      	adds	r3, #44	; 0x2c
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	24000194 	.word	0x24000194

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_MspInit+0x30>)
 80012a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ac:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x30>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x30>)
 80012b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	607b      	str	r3, [r7, #4]
 80012c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	58024400 	.word	0x58024400

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001328:	f000 fc46 	bl	8001bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <TIM3_IRQHandler+0x10>)
 8001336:	f004 fa15 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24000270 	.word	0x24000270

08001344 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <TIM4_IRQHandler+0x10>)
 800134a:	f004 fa0b 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24000230 	.word	0x24000230

08001358 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <USART3_IRQHandler+0x10>)
 800135e:	f005 fa27 	bl	80067b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	240002b0 	.word	0x240002b0

0800136c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001370:	4b29      	ldr	r3, [pc, #164]	; (8001418 <SystemInit+0xac>)
 8001372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001376:	4a28      	ldr	r2, [pc, #160]	; (8001418 <SystemInit+0xac>)
 8001378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800137c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <SystemInit+0xb0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a25      	ldr	r2, [pc, #148]	; (800141c <SystemInit+0xb0>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <SystemInit+0xb0>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <SystemInit+0xb0>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4921      	ldr	r1, [pc, #132]	; (800141c <SystemInit+0xb0>)
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <SystemInit+0xb4>)
 800139a:	4013      	ands	r3, r2
 800139c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <SystemInit+0xb0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <SystemInit+0xb0>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <SystemInit+0xb0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <SystemInit+0xb0>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <SystemInit+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80013bc:	4b17      	ldr	r3, [pc, #92]	; (800141c <SystemInit+0xb0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <SystemInit+0xb0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <SystemInit+0xb0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <SystemInit+0xb0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <SystemInit+0xb0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <SystemInit+0xb0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <SystemInit+0xb0>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <SystemInit+0xb0>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <SystemInit+0xb0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <SystemInit+0xb8>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <SystemInit+0xbc>)
 80013f8:	4013      	ands	r3, r2
 80013fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013fe:	d202      	bcs.n	8001406 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <SystemInit+0xc0>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <SystemInit+0xac>)
 8001408:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800140c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	58024400 	.word	0x58024400
 8001420:	eaf6ed7f 	.word	0xeaf6ed7f
 8001424:	5c001000 	.word	0x5c001000
 8001428:	ffff0000 	.word	0xffff0000
 800142c:	51008108 	.word	0x51008108

08001430 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]
 8001458:	609a      	str	r2, [r3, #8]
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	611a      	str	r2, [r3, #16]
 800145e:	615a      	str	r2, [r3, #20]
 8001460:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001462:	4b38      	ldr	r3, [pc, #224]	; (8001544 <MX_TIM3_Init+0x114>)
 8001464:	4a38      	ldr	r2, [pc, #224]	; (8001548 <MX_TIM3_Init+0x118>)
 8001466:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 8001468:	4b36      	ldr	r3, [pc, #216]	; (8001544 <MX_TIM3_Init+0x114>)
 800146a:	225f      	movs	r2, #95	; 0x5f
 800146c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MX_TIM3_Init+0x114>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001474:	4b33      	ldr	r3, [pc, #204]	; (8001544 <MX_TIM3_Init+0x114>)
 8001476:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800147a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <MX_TIM3_Init+0x114>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <MX_TIM3_Init+0x114>)
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001488:	482e      	ldr	r0, [pc, #184]	; (8001544 <MX_TIM3_Init+0x114>)
 800148a:	f004 f841 	bl	8005510 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001494:	f7ff fb5e 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a2:	4619      	mov	r1, r3
 80014a4:	4827      	ldr	r0, [pc, #156]	; (8001544 <MX_TIM3_Init+0x114>)
 80014a6:	f004 fb95 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014b0:	f7ff fb50 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014b4:	4823      	ldr	r0, [pc, #140]	; (8001544 <MX_TIM3_Init+0x114>)
 80014b6:	f004 f881 	bl	80055bc <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014c0:	f7ff fb48 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	481c      	ldr	r0, [pc, #112]	; (8001544 <MX_TIM3_Init+0x114>)
 80014d4:	f005 f8a2 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014de:	f7ff fb39 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	; 0x60
 80014e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	4812      	ldr	r0, [pc, #72]	; (8001544 <MX_TIM3_Init+0x114>)
 80014fa:	f004 fa53 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001504:	f7ff fb26 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	2204      	movs	r2, #4
 800150c:	4619      	mov	r1, r3
 800150e:	480d      	ldr	r0, [pc, #52]	; (8001544 <MX_TIM3_Init+0x114>)
 8001510:	f004 fa48 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800151a:	f7ff fb1b 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	2208      	movs	r2, #8
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM3_Init+0x114>)
 8001526:	f004 fa3d 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001530:	f7ff fb10 	bl	8000b54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM3_Init+0x114>)
 8001536:	f000 f8c7 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 800153a:	bf00      	nop
 800153c:	3738      	adds	r7, #56	; 0x38
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000270 	.word	0x24000270
 8001548:	40000400 	.word	0x40000400

0800154c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08e      	sub	sp, #56	; 0x38
 8001550:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001580:	4a2c      	ldr	r2, [pc, #176]	; (8001634 <MX_TIM4_Init+0xe8>)
 8001582:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b29      	ldr	r3, [pc, #164]	; (8001630 <MX_TIM4_Init+0xe4>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <MX_TIM4_Init+0xe4>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015a2:	4823      	ldr	r0, [pc, #140]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015a4:	f003 ffb4 	bl	8005510 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80015ae:	f7ff fad1 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015bc:	4619      	mov	r1, r3
 80015be:	481c      	ldr	r0, [pc, #112]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015c0:	f004 fb08 	bl	8005bd4 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80015ca:	f7ff fac3 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015d0:	f003 fff4 	bl	80055bc <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80015da:	f7ff fabb 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4810      	ldr	r0, [pc, #64]	; (8001630 <MX_TIM4_Init+0xe4>)
 80015ee:	f005 f815 	bl	800661c <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015f8:	f7ff faac 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	; 0x60
 80015fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001614:	f004 f9c6 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800161e:	f7ff fa99 	bl	8000b54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001622:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_TIM4_Init+0xe4>)
 8001624:	f000 f850 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8001628:	bf00      	nop
 800162a:	3738      	adds	r7, #56	; 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	24000230 	.word	0x24000230
 8001634:	40000800 	.word	0x40000800

08001638 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_TIM_Base_MspInit+0x84>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d117      	bne.n	800167a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_TIM_Base_MspInit+0x88>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_TIM_Base_MspInit+0x88>)
 8001652:	f043 0302 	orr.w	r3, r3, #2
 8001656:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_TIM_Base_MspInit+0x88>)
 800165c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2100      	movs	r1, #0
 800166c:	201d      	movs	r0, #29
 800166e:	f000 fbe0 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001672:	201d      	movs	r0, #29
 8001674:	f000 fbf7 	bl	8001e66 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001678:	e01b      	b.n	80016b2 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_TIM_Base_MspInit+0x8c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d116      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001684:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_TIM_Base_MspInit+0x88>)
 8001686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <HAL_TIM_Base_MspInit+0x88>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <HAL_TIM_Base_MspInit+0x88>)
 8001696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	201e      	movs	r0, #30
 80016a8:	f000 fbc3 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016ac:	201e      	movs	r0, #30
 80016ae:	f000 fbda 	bl	8001e66 <HAL_NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40000400 	.word	0x40000400
 80016c0:	58024400 	.word	0x58024400
 80016c4:	40000800 	.word	0x40000800

080016c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a44      	ldr	r2, [pc, #272]	; (80017f8 <HAL_TIM_MspPostInit+0x130>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d15d      	bne.n	80017a6 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b44      	ldr	r3, [pc, #272]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	4a42      	ldr	r2, [pc, #264]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fa:	4b40      	ldr	r3, [pc, #256]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 80016fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b3c      	ldr	r3, [pc, #240]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	4a3b      	ldr	r2, [pc, #236]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 8001710:	f043 0302 	orr.w	r3, r3, #2
 8001714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001718:	4b38      	ldr	r3, [pc, #224]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001726:	4b35      	ldr	r3, [pc, #212]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 8001728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172c:	4a33      	ldr	r2, [pc, #204]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001754:	2302      	movs	r3, #2
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	4828      	ldr	r0, [pc, #160]	; (8001800 <HAL_TIM_MspPostInit+0x138>)
 8001760:	f001 f948 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001764:	2301      	movs	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001774:	2302      	movs	r3, #2
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	4821      	ldr	r0, [pc, #132]	; (8001804 <HAL_TIM_MspPostInit+0x13c>)
 8001780:	f001 f938 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001788:	2302      	movs	r3, #2
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001794:	2302      	movs	r3, #2
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	481a      	ldr	r0, [pc, #104]	; (8001808 <HAL_TIM_MspPostInit+0x140>)
 80017a0:	f001 f928 	bl	80029f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017a4:	e024      	b.n	80017f0 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <HAL_TIM_MspPostInit+0x144>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d11f      	bne.n	80017f0 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 80017b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <HAL_TIM_MspPostInit+0x134>)
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017e0:	2302      	movs	r3, #2
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4809      	ldr	r0, [pc, #36]	; (8001810 <HAL_TIM_MspPostInit+0x148>)
 80017ec:	f001 f902 	bl	80029f4 <HAL_GPIO_Init>
}
 80017f0:	bf00      	nop
 80017f2:	3730      	adds	r7, #48	; 0x30
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40000400 	.word	0x40000400
 80017fc:	58024400 	.word	0x58024400
 8001800:	58020000 	.word	0x58020000
 8001804:	58020400 	.word	0x58020400
 8001808:	58020800 	.word	0x58020800
 800180c:	40000800 	.word	0x40000800
 8001810:	58020c00 	.word	0x58020c00

08001814 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d101      	bne.n	800182c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		servo_update();
 8001828:	f7ff fa06 	bl	8000c38 <servo_update>
	}
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000270 	.word	0x24000270

08001838 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 800183e:	4a23      	ldr	r2, [pc, #140]	; (80018cc <MX_USART3_UART_Init+0x94>)
 8001840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001882:	f004 ff45 	bl	8006710 <HAL_UART_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800188c:	f7ff f962 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001890:	2100      	movs	r1, #0
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 8001894:	f007 fcb3 	bl	80091fe <HAL_UARTEx_SetTxFifoThreshold>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800189e:	f7ff f959 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a2:	2100      	movs	r1, #0
 80018a4:	4808      	ldr	r0, [pc, #32]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 80018a6:	f007 fce8 	bl	800927a <HAL_UARTEx_SetRxFifoThreshold>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018b0:	f7ff f950 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_USART3_UART_Init+0x90>)
 80018b6:	f007 fc69 	bl	800918c <HAL_UARTEx_DisableFifoMode>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018c0:	f7ff f948 	bl	8000b54 <Error_Handler>
  }

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	240002b0 	.word	0x240002b0
 80018cc:	40004800 	.word	0x40004800

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_UART_MspInit+0x98>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d136      	bne.n	8001960 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_UART_MspInit+0x9c>)
 80018f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_UART_MspInit+0x9c>)
 80018fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_UART_MspInit+0x9c>)
 8001904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_UART_MspInit+0x9c>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <HAL_UART_MspInit+0x9c>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_UART_MspInit+0x9c>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800192e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001940:	2307      	movs	r3, #7
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4809      	ldr	r0, [pc, #36]	; (8001970 <HAL_UART_MspInit+0xa0>)
 800194c:	f001 f852 	bl	80029f4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	2027      	movs	r0, #39	; 0x27
 8001956:	f000 fa6c 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800195a:	2027      	movs	r0, #39	; 0x27
 800195c:	f000 fa83 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	3728      	adds	r7, #40	; 0x28
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40004800 	.word	0x40004800
 800196c:	58024400 	.word	0x58024400
 8001970:	58020c00 	.word	0x58020c00

08001974 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800197a:	4a16      	ldr	r2, [pc, #88]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800197c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001980:	2209      	movs	r2, #9
 8001982:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001986:	2202      	movs	r2, #2
 8001988:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001992:	2202      	movs	r2, #2
 8001994:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001998:	2201      	movs	r2, #1
 800199a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019aa:	2201      	movs	r2, #1
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019bc:	f001 f9e3 	bl	8002d86 <HAL_PCD_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80019c6:	f7ff f8c5 	bl	8000b54 <Error_Handler>
  }

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2400033c 	.word	0x2400033c
 80019d4:	40080000 	.word	0x40080000

080019d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_PCD_MspInit+0xa4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d13b      	bne.n	8001a72 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_PCD_MspInit+0xa8>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_PCD_MspInit+0xa8>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_PCD_MspInit+0xa8>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a18:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <HAL_PCD_MspInit+0xac>)
 8001a36:	f000 ffdd 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <HAL_PCD_MspInit+0xac>)
 8001a50:	f000 ffd0 	bl	80029f4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_PCD_MspInit+0xa8>)
 8001a56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_PCD_MspInit+0xa8>)
 8001a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_PCD_MspInit+0xa8>)
 8001a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40080000 	.word	0x40080000
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020000 	.word	0x58020000

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a8e:	e003      	b.n	8001a98 <LoopCopyDataInit>

08001a90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a96:	3104      	adds	r1, #4

08001a98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a98:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aa0:	d3f6      	bcc.n	8001a90 <CopyDataInit>
  ldr  r2, =_sbss
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aa4:	e002      	b.n	8001aac <LoopFillZerobss>

08001aa6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aa6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aa8:	f842 3b04 	str.w	r3, [r2], #4

08001aac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001aae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ab0:	d3f9      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ab2:	f7ff fc5b 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f007 ff3f 	bl	8009938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7fe ff61 	bl	8000980 <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001ac4:	080099d8 	.word	0x080099d8
  ldr  r0, =_sdata
 8001ac8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001acc:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001ad0:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001ad4:	24000748 	.word	0x24000748

08001ad8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC3_IRQHandler>
	...

08001adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 f99b 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ae6:	f002 f83b 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8001aea:	4601      	mov	r1, r0
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_Init+0x60>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <HAL_Init+0x64>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	fa21 f303 	lsr.w	r3, r1, r3
 8001b02:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_Init+0x68>)
 8001b04:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_Init+0x68>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_Init+0x60>)
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	490b      	ldr	r1, [pc, #44]	; (8001b40 <HAL_Init+0x64>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	f003 031f 	and.w	r3, r3, #31
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x6c>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f812 	bl	8001b4c <HAL_InitTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e002      	b.n	8001b38 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b32:	f7ff fbb5 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	58024400 	.word	0x58024400
 8001b40:	080099b8 	.word	0x080099b8
 8001b44:	24000000 	.word	0x24000000
 8001b48:	24000004 	.word	0x24000004

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <HAL_InitTick+0x60>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e021      	b.n	8001ba4 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_InitTick+0x64>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_InitTick+0x60>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f983 	bl	8001e82 <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b0f      	cmp	r3, #15
 8001b8a:	d80a      	bhi.n	8001ba2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f000 f94d 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b98:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <HAL_InitTick+0x68>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e000      	b.n	8001ba4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2400000c 	.word	0x2400000c
 8001bb0:	24000000 	.word	0x24000000
 8001bb4:	24000008 	.word	0x24000008

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2400000c 	.word	0x2400000c
 8001bdc:	24000744 	.word	0x24000744

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	24000744 	.word	0x24000744

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_Delay+0x40>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	2400000c 	.word	0x2400000c

08001c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_GetREVID+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0c1b      	lsrs	r3, r3, #16
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	5c001000 	.word	0x5c001000

08001c54 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c64:	4904      	ldr	r1, [pc, #16]	; (8001c78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	58000400 	.word	0x58000400

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <__NVIC_SetPriorityGrouping+0x40>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001caa:	4a04      	ldr	r2, [pc, #16]	; (8001cbc <__NVIC_SetPriorityGrouping+0x40>)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	60d3      	str	r3, [r2, #12]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00
 8001cc0:	05fa0000 	.word	0x05fa0000

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff40 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff33 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa4 	bl	8001dd8 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e188      	b.n	80021c0 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e17d      	b.n	80021c0 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a8c      	ldr	r2, [pc, #560]	; (80020fc <HAL_DMA_Abort_IT+0x260>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d04a      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a8b      	ldr	r2, [pc, #556]	; (8002100 <HAL_DMA_Abort_IT+0x264>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d045      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a89      	ldr	r2, [pc, #548]	; (8002104 <HAL_DMA_Abort_IT+0x268>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d040      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a88      	ldr	r2, [pc, #544]	; (8002108 <HAL_DMA_Abort_IT+0x26c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d03b      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a86      	ldr	r2, [pc, #536]	; (800210c <HAL_DMA_Abort_IT+0x270>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d036      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a85      	ldr	r2, [pc, #532]	; (8002110 <HAL_DMA_Abort_IT+0x274>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d031      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a83      	ldr	r2, [pc, #524]	; (8002114 <HAL_DMA_Abort_IT+0x278>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d02c      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a82      	ldr	r2, [pc, #520]	; (8002118 <HAL_DMA_Abort_IT+0x27c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d027      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a80      	ldr	r2, [pc, #512]	; (800211c <HAL_DMA_Abort_IT+0x280>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d022      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a7f      	ldr	r2, [pc, #508]	; (8002120 <HAL_DMA_Abort_IT+0x284>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d01d      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <HAL_DMA_Abort_IT+0x288>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d018      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a7c      	ldr	r2, [pc, #496]	; (8002128 <HAL_DMA_Abort_IT+0x28c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a7a      	ldr	r2, [pc, #488]	; (800212c <HAL_DMA_Abort_IT+0x290>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d00e      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a79      	ldr	r2, [pc, #484]	; (8002130 <HAL_DMA_Abort_IT+0x294>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d009      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a77      	ldr	r2, [pc, #476]	; (8002134 <HAL_DMA_Abort_IT+0x298>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d004      	beq.n	8001f64 <HAL_DMA_Abort_IT+0xc8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a76      	ldr	r2, [pc, #472]	; (8002138 <HAL_DMA_Abort_IT+0x29c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d101      	bne.n	8001f68 <HAL_DMA_Abort_IT+0xcc>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <HAL_DMA_Abort_IT+0xce>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d065      	beq.n	800203a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2204      	movs	r2, #4
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a60      	ldr	r2, [pc, #384]	; (80020fc <HAL_DMA_Abort_IT+0x260>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d04a      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a5e      	ldr	r2, [pc, #376]	; (8002100 <HAL_DMA_Abort_IT+0x264>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d045      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <HAL_DMA_Abort_IT+0x268>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d040      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a5b      	ldr	r2, [pc, #364]	; (8002108 <HAL_DMA_Abort_IT+0x26c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d03b      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5a      	ldr	r2, [pc, #360]	; (800210c <HAL_DMA_Abort_IT+0x270>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d036      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a58      	ldr	r2, [pc, #352]	; (8002110 <HAL_DMA_Abort_IT+0x274>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d031      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_DMA_Abort_IT+0x278>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d02c      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a55      	ldr	r2, [pc, #340]	; (8002118 <HAL_DMA_Abort_IT+0x27c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d027      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a54      	ldr	r2, [pc, #336]	; (800211c <HAL_DMA_Abort_IT+0x280>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_DMA_Abort_IT+0x284>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01d      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a51      	ldr	r2, [pc, #324]	; (8002124 <HAL_DMA_Abort_IT+0x288>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d018      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4f      	ldr	r2, [pc, #316]	; (8002128 <HAL_DMA_Abort_IT+0x28c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a4e      	ldr	r2, [pc, #312]	; (800212c <HAL_DMA_Abort_IT+0x290>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00e      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	; (8002130 <HAL_DMA_Abort_IT+0x294>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a4b      	ldr	r2, [pc, #300]	; (8002134 <HAL_DMA_Abort_IT+0x298>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d004      	beq.n	8002016 <HAL_DMA_Abort_IT+0x17a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a49      	ldr	r2, [pc, #292]	; (8002138 <HAL_DMA_Abort_IT+0x29c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d108      	bne.n	8002028 <HAL_DMA_Abort_IT+0x18c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e0ca      	b.n	80021be <HAL_DMA_Abort_IT+0x322>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e0c1      	b.n	80021be <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 020e 	bic.w	r2, r2, #14
 8002048:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_DMA_Abort_IT+0x260>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d04a      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a29      	ldr	r2, [pc, #164]	; (8002100 <HAL_DMA_Abort_IT+0x264>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d045      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_DMA_Abort_IT+0x268>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d040      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a26      	ldr	r2, [pc, #152]	; (8002108 <HAL_DMA_Abort_IT+0x26c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d03b      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_DMA_Abort_IT+0x270>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d036      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <HAL_DMA_Abort_IT+0x274>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d031      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_DMA_Abort_IT+0x278>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d02c      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a20      	ldr	r2, [pc, #128]	; (8002118 <HAL_DMA_Abort_IT+0x27c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d027      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HAL_DMA_Abort_IT+0x280>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d022      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <HAL_DMA_Abort_IT+0x284>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01d      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_DMA_Abort_IT+0x288>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d018      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a1a      	ldr	r2, [pc, #104]	; (8002128 <HAL_DMA_Abort_IT+0x28c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_DMA_Abort_IT+0x290>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00e      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_DMA_Abort_IT+0x294>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a16      	ldr	r2, [pc, #88]	; (8002134 <HAL_DMA_Abort_IT+0x298>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d004      	beq.n	80020ea <HAL_DMA_Abort_IT+0x24e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <HAL_DMA_Abort_IT+0x29c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d128      	bne.n	800213c <HAL_DMA_Abort_IT+0x2a0>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e027      	b.n	800214c <HAL_DMA_Abort_IT+0x2b0>
 80020fc:	40020010 	.word	0x40020010
 8002100:	40020028 	.word	0x40020028
 8002104:	40020040 	.word	0x40020040
 8002108:	40020058 	.word	0x40020058
 800210c:	40020070 	.word	0x40020070
 8002110:	40020088 	.word	0x40020088
 8002114:	400200a0 	.word	0x400200a0
 8002118:	400200b8 	.word	0x400200b8
 800211c:	40020410 	.word	0x40020410
 8002120:	40020428 	.word	0x40020428
 8002124:	40020440 	.word	0x40020440
 8002128:	40020458 	.word	0x40020458
 800212c:	40020470 	.word	0x40020470
 8002130:	40020488 	.word	0x40020488
 8002134:	400204a0 	.word	0x400204a0
 8002138:	400204b8 	.word	0x400204b8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800215a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800217a:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00c      	beq.n	800219e <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002192:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800219c:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0c6      	b.n	8002368 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d102      	bne.n	80021e8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fa4a 	bl	800067c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2223      	movs	r2, #35	; 0x23
 80021ec:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ee:	4b60      	ldr	r3, [pc, #384]	; (8002370 <HAL_ETH_Init+0x1a8>)
 80021f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f4:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <HAL_ETH_Init+0x1a8>)
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021fe:	4b5c      	ldr	r3, [pc, #368]	; (8002370 <HAL_ETH_Init+0x1a8>)
 8002200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7a1b      	ldrb	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff fd1d 	bl	8001c54 <HAL_SYSCFG_ETHInterfaceSelect>
 800221a:	e003      	b.n	8002224 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800221c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002220:	f7ff fd18 	bl	8001c54 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800223c:	f7ff fcd0 	bl	8001be0 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002242:	e00f      	b.n	8002264 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002244:	f7ff fccc 	bl	8001be0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002252:	d907      	bls.n	8002264 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2204      	movs	r2, #4
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	22e0      	movs	r2, #224	; 0xe0
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e081      	b.n	8002368 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e6      	bne.n	8002244 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fac0 	bl	80027fc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800227c:	f001 fde2 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8002280:	4602      	mov	r2, r0
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <HAL_ETH_Init+0x1ac>)
 8002284:	fba3 2302 	umull	r2, r3, r3, r2
 8002288:	0c9a      	lsrs	r2, r3, #18
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3a01      	subs	r2, #1
 8002290:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fa13 	bl	80026c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022b4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d007      	beq.n	80022d2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	22e0      	movs	r2, #224	; 0xe0
 80022cc:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e04a      	b.n	8002368 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	f241 1308 	movw	r3, #4360	; 0x1108
 80022da:	4413      	add	r3, r2
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b26      	ldr	r3, [pc, #152]	; (8002378 <HAL_ETH_Init+0x1b0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6952      	ldr	r2, [r2, #20]
 80022e6:	0052      	lsls	r2, r2, #1
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	6809      	ldr	r1, [r1, #0]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80022f2:	440b      	add	r3, r1
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fad8 	bl	80028ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fb1c 	bl	800293a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	3305      	adds	r3, #5
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	021a      	lsls	r2, r3, #8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	3304      	adds	r3, #4
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	3303      	adds	r3, #3
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	061a      	lsls	r2, r3, #24
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	3302      	adds	r3, #2
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	041b      	lsls	r3, r3, #16
 8002334:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	3301      	adds	r3, #1
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002340:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800234e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002350:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2210      	movs	r2, #16
 800235e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2210      	movs	r2, #16
 8002364:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	58024400 	.word	0x58024400
 8002374:	431bde83 	.word	0x431bde83
 8002378:	ffff8001 	.word	0xffff8001

0800237c <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800238e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	791b      	ldrb	r3, [r3, #4]
 8002394:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002396:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	7b1b      	ldrb	r3, [r3, #12]
 800239c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800239e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	7b5b      	ldrb	r3, [r3, #13]
 80023a4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023a6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	7b9b      	ldrb	r3, [r3, #14]
 80023ac:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	7bdb      	ldrb	r3, [r3, #15]
 80023b4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023b6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	7c12      	ldrb	r2, [r2, #16]
 80023bc:	2a00      	cmp	r2, #0
 80023be:	d102      	bne.n	80023c6 <ETH_SetMACConfig+0x4a>
 80023c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023c4:	e000      	b.n	80023c8 <ETH_SetMACConfig+0x4c>
 80023c6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023c8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	7c52      	ldrb	r2, [r2, #17]
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	d102      	bne.n	80023d8 <ETH_SetMACConfig+0x5c>
 80023d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d6:	e000      	b.n	80023da <ETH_SetMACConfig+0x5e>
 80023d8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023da:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	7c9b      	ldrb	r3, [r3, #18]
 80023e0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023e2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80023e8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80023ee:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	7f1b      	ldrb	r3, [r3, #28]
 80023f4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80023f6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	7f5b      	ldrb	r3, [r3, #29]
 80023fc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80023fe:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	7f92      	ldrb	r2, [r2, #30]
 8002404:	2a00      	cmp	r2, #0
 8002406:	d102      	bne.n	800240e <ETH_SetMACConfig+0x92>
 8002408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800240c:	e000      	b.n	8002410 <ETH_SetMACConfig+0x94>
 800240e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002410:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7fdb      	ldrb	r3, [r3, #31]
 8002416:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002418:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002420:	2a00      	cmp	r2, #0
 8002422:	d102      	bne.n	800242a <ETH_SetMACConfig+0xae>
 8002424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002428:	e000      	b.n	800242c <ETH_SetMACConfig+0xb0>
 800242a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800242c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002432:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800243a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800243c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <ETH_SetMACConfig+0x22c>)
 800244e:	4013      	ands	r3, r2
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	430b      	orrs	r3, r1
 8002458:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002466:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002468:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002470:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002472:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800247a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800247c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002484:	2a00      	cmp	r2, #0
 8002486:	d102      	bne.n	800248e <ETH_SetMACConfig+0x112>
 8002488:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800248c:	e000      	b.n	8002490 <ETH_SetMACConfig+0x114>
 800248e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002490:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002496:	4313      	orrs	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	4b42      	ldr	r3, [pc, #264]	; (80025ac <ETH_SetMACConfig+0x230>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	68f9      	ldr	r1, [r7, #12]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <ETH_SetMACConfig+0x234>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	430b      	orrs	r3, r1
 80024d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024de:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024e6:	2a00      	cmp	r2, #0
 80024e8:	d101      	bne.n	80024ee <ETH_SetMACConfig+0x172>
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	e000      	b.n	80024f0 <ETH_SetMACConfig+0x174>
 80024ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80024f0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002502:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002506:	4013      	ands	r3, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	68f9      	ldr	r1, [r7, #12]
 800250e:	430b      	orrs	r3, r1
 8002510:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002518:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002520:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f023 0103 	bic.w	r1, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	430a      	orrs	r2, r1
 800253a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002546:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002562:	2a00      	cmp	r2, #0
 8002564:	d101      	bne.n	800256a <ETH_SetMACConfig+0x1ee>
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	e000      	b.n	800256c <ETH_SetMACConfig+0x1f0>
 800256a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800256c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002574:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002576:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800257e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800258c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	430a      	orrs	r2, r1
 8002598:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	00048083 	.word	0x00048083
 80025ac:	c0f88000 	.word	0xc0f88000
 80025b0:	fffffef0 	.word	0xfffffef0

080025b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4b38      	ldr	r3, [pc, #224]	; (80026ac <ETH_SetDMAConfig+0xf8>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	6809      	ldr	r1, [r1, #0]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80025da:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	791b      	ldrb	r3, [r3, #4]
 80025e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025e6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	7b1b      	ldrb	r3, [r3, #12]
 80025ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	f241 0304 	movw	r3, #4100	; 0x1004
 80025fa:	4413      	add	r3, r2
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b2c      	ldr	r3, [pc, #176]	; (80026b0 <ETH_SetDMAConfig+0xfc>)
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6811      	ldr	r1, [r2, #0]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	431a      	orrs	r2, r3
 800260a:	f241 0304 	movw	r3, #4100	; 0x1004
 800260e:	440b      	add	r3, r1
 8002610:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	7b5b      	ldrb	r3, [r3, #13]
 8002616:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800261c:	4313      	orrs	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <ETH_SetDMAConfig+0x100>)
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6811      	ldr	r1, [r2, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	431a      	orrs	r2, r3
 8002636:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800263a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	7d1b      	ldrb	r3, [r3, #20]
 8002644:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002646:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	7f5b      	ldrb	r3, [r3, #29]
 800264c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f241 1304 	movw	r3, #4356	; 0x1104
 800265a:	4413      	add	r3, r2
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <ETH_SetDMAConfig+0x104>)
 8002660:	4013      	ands	r3, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6811      	ldr	r1, [r2, #0]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	431a      	orrs	r2, r3
 800266a:	f241 1304 	movw	r3, #4356	; 0x1104
 800266e:	440b      	add	r3, r1
 8002670:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	7f1b      	ldrb	r3, [r3, #28]
 8002676:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f241 1308 	movw	r3, #4360	; 0x1108
 8002688:	4413      	add	r3, r2
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <ETH_SetDMAConfig+0x108>)
 800268e:	4013      	ands	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6811      	ldr	r1, [r2, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	431a      	orrs	r2, r3
 8002698:	f241 1308 	movw	r3, #4360	; 0x1108
 800269c:	440b      	add	r3, r1
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	ffff87fd 	.word	0xffff87fd
 80026b0:	ffff2ffe 	.word	0xffff2ffe
 80026b4:	fffec000 	.word	0xfffec000
 80026b8:	ffc0efef 	.word	0xffc0efef
 80026bc:	7fc0ffff 	.word	0x7fc0ffff

080026c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0a4      	sub	sp, #144	; 0x90
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026ce:	2300      	movs	r3, #0
 80026d0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002700:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002702:	2300      	movs	r3, #0
 8002704:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002708:	2300      	movs	r3, #0
 800270a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002712:	2300      	movs	r3, #0
 8002714:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002718:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800271c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002724:	2300      	movs	r3, #0
 8002726:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002728:	2301      	movs	r3, #1
 800272a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800273a:	2300      	movs	r3, #0
 800273c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800273e:	2300      	movs	r3, #0
 8002740:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002742:	2300      	movs	r3, #0
 8002744:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002758:	2320      	movs	r3, #32
 800275a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800275e:	2301      	movs	r3, #1
 8002760:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800276a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002770:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800277c:	2302      	movs	r3, #2
 800277e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800279a:	2300      	movs	r3, #0
 800279c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fde6 	bl	800237c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027b4:	2301      	movs	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027ca:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80027e0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	4619      	mov	r1, r3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fee1 	bl	80025b4 <ETH_SetDMAConfig>
}
 80027f2:	bf00      	nop
 80027f4:	3790      	adds	r7, #144	; 0x90
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800280c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002814:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002816:	f001 fb15 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 800281a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	4a1e      	ldr	r2, [pc, #120]	; (8002898 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d908      	bls.n	8002836 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4a1d      	ldr	r2, [pc, #116]	; (800289c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d804      	bhi.n	8002836 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	e027      	b.n	8002886 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	4a18      	ldr	r2, [pc, #96]	; (800289c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d908      	bls.n	8002850 <ETH_MAC_MDIO_ClkConfig+0x54>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d804      	bhi.n	8002850 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	e01a      	b.n	8002886 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d903      	bls.n	8002860 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d911      	bls.n	8002884 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d908      	bls.n	800287a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4a0f      	ldr	r2, [pc, #60]	; (80028a8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d804      	bhi.n	800287a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e005      	b.n	8002886 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e000      	b.n	8002886 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002884:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	01312cff 	.word	0x01312cff
 800289c:	02160ebf 	.word	0x02160ebf
 80028a0:	039386ff 	.word	0x039386ff
 80028a4:	05f5e0ff 	.word	0x05f5e0ff
 80028a8:	08f0d17f 	.word	0x08f0d17f

080028ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e01d      	b.n	80028f6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68d9      	ldr	r1, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	3206      	adds	r2, #6
 80028ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d9de      	bls.n	80028ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f241 132c 	movw	r3, #4396	; 0x112c
 800290a:	4413      	add	r3, r2
 800290c:	2203      	movs	r2, #3
 800290e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68d9      	ldr	r1, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f241 1314 	movw	r3, #4372	; 0x1114
 800291c:	4413      	add	r3, r2
 800291e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800292c:	601a      	str	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800293a:	b480      	push	{r7}
 800293c:	b085      	sub	sp, #20
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002942:	2300      	movs	r3, #0
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	e024      	b.n	8002992 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6919      	ldr	r1, [r3, #16]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4613      	mov	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2200      	movs	r2, #0
 8002964:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2200      	movs	r2, #0
 800297c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	330a      	adds	r3, #10
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	3301      	adds	r3, #1
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d9d7      	bls.n	8002948 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	f241 1330 	movw	r3, #4400	; 0x1130
 80029be:	4413      	add	r3, r2
 80029c0:	2203      	movs	r2, #3
 80029c2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80029d0:	4413      	add	r3, r2
 80029d2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	f241 1328 	movw	r3, #4392	; 0x1128
 80029e4:	4413      	add	r3, r2
 80029e6:	6019      	str	r1, [r3, #0]
}
 80029e8:	bf00      	nop
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a02:	4b89      	ldr	r3, [pc, #548]	; (8002c28 <HAL_GPIO_Init+0x234>)
 8002a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a06:	e194      	b.n	8002d32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8186 	beq.w	8002d2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x3c>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b12      	cmp	r3, #18
 8002a2e:	d123      	bne.n	8002a78 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	08da      	lsrs	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3208      	adds	r2, #8
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d00b      	beq.n	8002acc <HAL_GPIO_Init+0xd8>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d007      	beq.n	8002acc <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac0:	2b11      	cmp	r3, #17
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b12      	cmp	r3, #18
 8002aca:	d130      	bne.n	8002b2e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b02:	2201      	movs	r2, #1
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 0201 	and.w	r2, r3, #1
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	2203      	movs	r2, #3
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80e0 	beq.w	8002d2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_GPIO_Init+0x238>)
 8002b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b72:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <HAL_GPIO_Init+0x238>)
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_GPIO_Init+0x238>)
 8002b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8a:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <HAL_GPIO_Init+0x23c>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_GPIO_Init+0x240>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d052      	beq.n	8002c5c <HAL_GPIO_Init+0x268>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <HAL_GPIO_Init+0x244>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d031      	beq.n	8002c22 <HAL_GPIO_Init+0x22e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <HAL_GPIO_Init+0x248>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02b      	beq.n	8002c1e <HAL_GPIO_Init+0x22a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_GPIO_Init+0x24c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d025      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_GPIO_Init+0x250>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01f      	beq.n	8002c16 <HAL_GPIO_Init+0x222>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_GPIO_Init+0x254>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d019      	beq.n	8002c12 <HAL_GPIO_Init+0x21e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_GPIO_Init+0x258>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_GPIO_Init+0x25c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x216>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_GPIO_Init+0x260>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x212>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_GPIO_Init+0x264>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x20e>
 8002bfe:	2309      	movs	r3, #9
 8002c00:	e02d      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c02:	230a      	movs	r3, #10
 8002c04:	e02b      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c06:	2308      	movs	r3, #8
 8002c08:	e029      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	e027      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c0e:	2306      	movs	r3, #6
 8002c10:	e025      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c12:	2305      	movs	r3, #5
 8002c14:	e023      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e021      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e01f      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e01d      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e01b      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c26:	bf00      	nop
 8002c28:	58000080 	.word	0x58000080
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	58000400 	.word	0x58000400
 8002c34:	58020000 	.word	0x58020000
 8002c38:	58020400 	.word	0x58020400
 8002c3c:	58020800 	.word	0x58020800
 8002c40:	58020c00 	.word	0x58020c00
 8002c44:	58021000 	.word	0x58021000
 8002c48:	58021400 	.word	0x58021400
 8002c4c:	58021800 	.word	0x58021800
 8002c50:	58021c00 	.word	0x58021c00
 8002c54:	58022000 	.word	0x58022000
 8002c58:	58022400 	.word	0x58022400
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	4093      	lsls	r3, r2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6e:	4938      	ldr	r1, [pc, #224]	; (8002d50 <HAL_GPIO_Init+0x35c>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f ae63 	bne.w	8002a08 <HAL_GPIO_Init+0x14>
  }
}
 8002d42:	bf00      	nop
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	58000400 	.word	0x58000400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d88:	b08f      	sub	sp, #60	; 0x3c
 8002d8a:	af0a      	add	r7, sp, #40	; 0x28
 8002d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e116      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fe10 	bl	80019d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2203      	movs	r2, #3
 8002dbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f006 fb58 	bl	800948c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	687e      	ldr	r6, [r7, #4]
 8002de4:	466d      	mov	r5, sp
 8002de6:	f106 0410 	add.w	r4, r6, #16
 8002dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002df6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dfa:	1d33      	adds	r3, r6, #4
 8002dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dfe:	6838      	ldr	r0, [r7, #0]
 8002e00:	f006 fae2 	bl	80093c8 <USB_CoreInit>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e0d7      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f006 fb46 	bl	80094ae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	73fb      	strb	r3, [r7, #15]
 8002e26:	e04a      	b.n	8002ebe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	333d      	adds	r3, #61	; 0x3d
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	333c      	adds	r3, #60	; 0x3c
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	b298      	uxth	r0, r3
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3342      	adds	r3, #66	; 0x42
 8002e64:	4602      	mov	r2, r0
 8002e66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	333f      	adds	r3, #63	; 0x3f
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3344      	adds	r3, #68	; 0x44
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3348      	adds	r3, #72	; 0x48
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea4:	7bfa      	ldrb	r2, [r7, #15]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3350      	adds	r3, #80	; 0x50
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3af      	bcc.n	8002e28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	73fb      	strb	r3, [r7, #15]
 8002ecc:	e044      	b.n	8002f58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	3301      	adds	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3b5      	bcc.n	8002ece <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	687e      	ldr	r6, [r7, #4]
 8002f6a:	466d      	mov	r5, sp
 8002f6c:	f106 0410 	add.w	r4, r6, #16
 8002f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f80:	1d33      	adds	r3, r6, #4
 8002f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f84:	6838      	ldr	r0, [r7, #0]
 8002f86:	f006 fabd 	bl	8009504 <USB_DevInit>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e014      	b.n	8002fc6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f80b 	bl	8002fd0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f006 fc6d 	bl	800989e <USB_DevDisconnect>

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_PCDEx_ActivateLPM+0x44>)
 8003000:	4313      	orrs	r3, r2
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	10000003 	.word	0x10000003

08003018 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003020:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_PWREx_ConfigSupply+0x6c>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d008      	beq.n	800303e <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_PWREx_ConfigSupply+0x6c>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	429a      	cmp	r2, r3
 8003038:	d001      	beq.n	800303e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e01d      	b.n	800307a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <HAL_PWREx_ConfigSupply+0x6c>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	490f      	ldr	r1, [pc, #60]	; (8003084 <HAL_PWREx_ConfigSupply+0x6c>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4313      	orrs	r3, r2
 800304c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800304e:	f7fe fdc7 	bl	8001be0 <HAL_GetTick>
 8003052:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003054:	e009      	b.n	800306a <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8003056:	f7fe fdc3 	bl	8001be0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003064:	d901      	bls.n	800306a <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e007      	b.n	800307a <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_PWREx_ConfigSupply+0x6c>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003076:	d1ee      	bne.n	8003056 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	58024800 	.word	0x58024800

08003088 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003096:	60d3      	str	r3, [r2, #12]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	58024800 	.word	0x58024800

080030a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e3a4      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8087 	beq.w	80031d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c8:	4b9a      	ldr	r3, [pc, #616]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030d2:	4b98      	ldr	r3, [pc, #608]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d007      	beq.n	80030ee <HAL_RCC_OscConfig+0x46>
 80030de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e0:	2b18      	cmp	r3, #24
 80030e2:	d110      	bne.n	8003106 <HAL_RCC_OscConfig+0x5e>
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d10b      	bne.n	8003106 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ee:	4b91      	ldr	r3, [pc, #580]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d06c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x12c>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d168      	bne.n	80031d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e37e      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x76>
 8003110:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	e02e      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x98>
 8003126:	4b83      	ldr	r3, [pc, #524]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a82      	ldr	r2, [pc, #520]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800312c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	4b80      	ldr	r3, [pc, #512]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7f      	ldr	r2, [pc, #508]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0xbc>
 800314a:	4b7a      	ldr	r3, [pc, #488]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a79      	ldr	r2, [pc, #484]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b77      	ldr	r3, [pc, #476]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a76      	ldr	r2, [pc, #472]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xd4>
 8003164:	4b73      	ldr	r3, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a72      	ldr	r2, [pc, #456]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6f      	ldr	r2, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fd2c 	bl	8001be0 <HAL_GetTick>
 8003188:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fd28 	bl	8001be0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e332      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800319e:	4b65      	ldr	r3, [pc, #404]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xe4>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fd18 	bl	8001be0 <HAL_GetTick>
 80031b0:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b4:	f7fe fd14 	bl	8001be0 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e31e      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x10c>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 80b0 	beq.w	8003344 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031ee:	4b51      	ldr	r3, [pc, #324]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <HAL_RCC_OscConfig+0x162>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b18      	cmp	r3, #24
 80031fe:	d149      	bne.n	8003294 <HAL_RCC_OscConfig+0x1ec>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d144      	bne.n	8003294 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320a:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_RCC_OscConfig+0x17a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e2f0      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003222:	4b44      	ldr	r3, [pc, #272]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f023 0219 	bic.w	r2, r3, #25
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4941      	ldr	r1, [pc, #260]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe fcd4 	bl	8001be0 <HAL_GetTick>
 8003238:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800323c:	f7fe fcd0 	bl	8001be0 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e2da      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800324e:	4b39      	ldr	r3, [pc, #228]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325a:	f7fe fcef 	bl	8001c3c <HAL_GetREVID>
 800325e:	4602      	mov	r2, r0
 8003260:	f241 0303 	movw	r3, #4099	; 0x1003
 8003264:	429a      	cmp	r2, r3
 8003266:	d80a      	bhi.n	800327e <HAL_RCC_OscConfig+0x1d6>
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	031b      	lsls	r3, r3, #12
 8003276:	492f      	ldr	r1, [pc, #188]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800327c:	e062      	b.n	8003344 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	061b      	lsls	r3, r3, #24
 800328c:	4929      	ldr	r1, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003292:	e057      	b.n	8003344 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d038      	beq.n	800330e <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800329c:	4b25      	ldr	r3, [pc, #148]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 0219 	bic.w	r2, r3, #25
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4922      	ldr	r1, [pc, #136]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fe fc97 	bl	8001be0 <HAL_GetTick>
 80032b2:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b6:	f7fe fc93 	bl	8001be0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e29d      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	f7fe fcb2 	bl	8001c3c <HAL_GetREVID>
 80032d8:	4602      	mov	r2, r0
 80032da:	f241 0303 	movw	r3, #4099	; 0x1003
 80032de:	429a      	cmp	r2, r3
 80032e0:	d80a      	bhi.n	80032f8 <HAL_RCC_OscConfig+0x250>
 80032e2:	4b14      	ldr	r3, [pc, #80]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	031b      	lsls	r3, r3, #12
 80032f0:	4910      	ldr	r1, [pc, #64]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
 80032f6:	e025      	b.n	8003344 <HAL_RCC_OscConfig+0x29c>
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	490b      	ldr	r1, [pc, #44]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]
 800330c:	e01a      	b.n	8003344 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a08      	ldr	r2, [pc, #32]	; (8003334 <HAL_RCC_OscConfig+0x28c>)
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe fc61 	bl	8001be0 <HAL_GetTick>
 800331e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003322:	f7fe fc5d 	bl	8001be0 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d903      	bls.n	8003338 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e267      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
 8003334:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003338:	4ba0      	ldr	r3, [pc, #640]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1ee      	bne.n	8003322 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 808f 	beq.w	8003470 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003352:	4b9a      	ldr	r3, [pc, #616]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800335a:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800335c:	4b97      	ldr	r3, [pc, #604]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d007      	beq.n	8003378 <HAL_RCC_OscConfig+0x2d0>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b18      	cmp	r3, #24
 800336c:	d12d      	bne.n	80033ca <HAL_RCC_OscConfig+0x322>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b01      	cmp	r3, #1
 8003376:	d128      	bne.n	80033ca <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003378:	4b90      	ldr	r3, [pc, #576]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_OscConfig+0x2e8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d001      	beq.n	8003390 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e239      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003390:	f7fe fc54 	bl	8001c3c <HAL_GetREVID>
 8003394:	4602      	mov	r2, r0
 8003396:	f241 0303 	movw	r3, #4099	; 0x1003
 800339a:	429a      	cmp	r2, r3
 800339c:	d80a      	bhi.n	80033b4 <HAL_RCC_OscConfig+0x30c>
 800339e:	4b87      	ldr	r3, [pc, #540]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	4983      	ldr	r1, [pc, #524]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033b2:	e05d      	b.n	8003470 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	061b      	lsls	r3, r3, #24
 80033c2:	497e      	ldr	r1, [pc, #504]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033c8:	e052      	b.n	8003470 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d035      	beq.n	800343e <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033d2:	4b7a      	ldr	r3, [pc, #488]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a79      	ldr	r2, [pc, #484]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80033d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033de:	f7fe fbff 	bl	8001be0 <HAL_GetTick>
 80033e2:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033e6:	f7fe fbfb 	bl	8001be0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e205      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033f8:	4b70      	ldr	r3, [pc, #448]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003404:	f7fe fc1a 	bl	8001c3c <HAL_GetREVID>
 8003408:	4602      	mov	r2, r0
 800340a:	f241 0303 	movw	r3, #4099	; 0x1003
 800340e:	429a      	cmp	r2, r3
 8003410:	d80a      	bhi.n	8003428 <HAL_RCC_OscConfig+0x380>
 8003412:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	069b      	lsls	r3, r3, #26
 8003420:	4966      	ldr	r1, [pc, #408]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003422:	4313      	orrs	r3, r2
 8003424:	604b      	str	r3, [r1, #4]
 8003426:	e023      	b.n	8003470 <HAL_RCC_OscConfig+0x3c8>
 8003428:	4b64      	ldr	r3, [pc, #400]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	4961      	ldr	r1, [pc, #388]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003438:	4313      	orrs	r3, r2
 800343a:	60cb      	str	r3, [r1, #12]
 800343c:	e018      	b.n	8003470 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800343e:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5e      	ldr	r2, [pc, #376]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7fe fbc9 	bl	8001be0 <HAL_GetTick>
 800344e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003452:	f7fe fbc5 	bl	8001be0 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1cf      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003464:	4b55      	ldr	r3, [pc, #340]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1f0      	bne.n	8003452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	2b00      	cmp	r3, #0
 800347a:	d036      	beq.n	80034ea <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d019      	beq.n	80034b8 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003488:	4a4c      	ldr	r2, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003490:	f7fe fba6 	bl	8001be0 <HAL_GetTick>
 8003494:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003498:	f7fe fba2 	bl	8001be0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e1ac      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034aa:	4b44      	ldr	r3, [pc, #272]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80034ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f0      	beq.n	8003498 <HAL_RCC_OscConfig+0x3f0>
 80034b6:	e018      	b.n	80034ea <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b8:	4b40      	ldr	r3, [pc, #256]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	4a3f      	ldr	r2, [pc, #252]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c4:	f7fe fb8c 	bl	8001be0 <HAL_GetTick>
 80034c8:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034cc:	f7fe fb88 	bl	8001be0 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e192      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80034e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0320 	and.w	r3, r3, #32
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d036      	beq.n	8003564 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d019      	beq.n	8003532 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034fe:	4b2f      	ldr	r3, [pc, #188]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2e      	ldr	r2, [pc, #184]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003504:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003508:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800350a:	f7fe fb69 	bl	8001be0 <HAL_GetTick>
 800350e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003510:	e008      	b.n	8003524 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003512:	f7fe fb65 	bl	8001be0 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d901      	bls.n	8003524 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e16f      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d0f0      	beq.n	8003512 <HAL_RCC_OscConfig+0x46a>
 8003530:	e018      	b.n	8003564 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a21      	ldr	r2, [pc, #132]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 8003538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800353c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800353e:	f7fe fb4f 	bl	8001be0 <HAL_GetTick>
 8003542:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003546:	f7fe fb4b 	bl	8001be0 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e155      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003558:	4b18      	ldr	r3, [pc, #96]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 8086 	beq.w	800367e <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_RCC_OscConfig+0x518>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <HAL_RCC_OscConfig+0x518>)
 8003578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800357c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800357e:	f7fe fb2f 	bl	8001be0 <HAL_GetTick>
 8003582:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003586:	f7fe fb2b 	bl	8001be0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b64      	cmp	r3, #100	; 0x64
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e135      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_OscConfig+0x518>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0f0      	beq.n	8003586 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x51c>
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80035ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b0:	4a02      	ldr	r2, [pc, #8]	; (80035bc <HAL_RCC_OscConfig+0x514>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6713      	str	r3, [r2, #112]	; 0x70
 80035b8:	e032      	b.n	8003620 <HAL_RCC_OscConfig+0x578>
 80035ba:	bf00      	nop
 80035bc:	58024400 	.word	0x58024400
 80035c0:	58024800 	.word	0x58024800
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10c      	bne.n	80035e6 <HAL_RCC_OscConfig+0x53e>
 80035cc:	4b8f      	ldr	r3, [pc, #572]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a8e      	ldr	r2, [pc, #568]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	4b8c      	ldr	r3, [pc, #560]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a8b      	ldr	r2, [pc, #556]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x578>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x560>
 80035ee:	4b87      	ldr	r3, [pc, #540]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a86      	ldr	r2, [pc, #536]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
 80035fa:	4b84      	ldr	r3, [pc, #528]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a83      	ldr	r2, [pc, #524]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x578>
 8003608:	4b80      	ldr	r3, [pc, #512]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a7f      	ldr	r2, [pc, #508]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	4b7d      	ldr	r3, [pc, #500]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a7c      	ldr	r2, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800361a:	f023 0304 	bic.w	r3, r3, #4
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fada 	bl	8001be0 <HAL_GetTick>
 800362c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fad6 	bl	8001be0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0de      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003646:	4b71      	ldr	r3, [pc, #452]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ee      	beq.n	8003630 <HAL_RCC_OscConfig+0x588>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe fac4 	bl	8001be0 <HAL_GetTick>
 8003658:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fac0 	bl	8001be0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0c8      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003672:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ee      	bne.n	800365c <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80bd 	beq.w	8003802 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003688:	4b60      	ldr	r3, [pc, #384]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003690:	2b18      	cmp	r3, #24
 8003692:	f000 80b4 	beq.w	80037fe <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b02      	cmp	r3, #2
 800369c:	f040 8095 	bne.w	80037ca <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b5a      	ldr	r3, [pc, #360]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a59      	ldr	r2, [pc, #356]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80036a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7fe fa98 	bl	8001be0 <HAL_GetTick>
 80036b0:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b4:	f7fe fa94 	bl	8001be0 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e09e      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036c6:	4b51      	ldr	r3, [pc, #324]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d2:	4b4e      	ldr	r3, [pc, #312]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80036d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036d6:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <HAL_RCC_OscConfig+0x768>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	430a      	orrs	r2, r1
 80036e6:	4949      	ldr	r1, [pc, #292]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	628b      	str	r3, [r1, #40]	; 0x28
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	3b01      	subs	r3, #1
 80036f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fa:	3b01      	subs	r3, #1
 80036fc:	025b      	lsls	r3, r3, #9
 80036fe:	b29b      	uxth	r3, r3
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	3b01      	subs	r3, #1
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003714:	3b01      	subs	r3, #1
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800371c:	493b      	ldr	r1, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800371e:	4313      	orrs	r3, r2
 8003720:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003722:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	4a39      	ldr	r2, [pc, #228]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003732:	4b38      	ldr	r3, [pc, #224]	; (8003814 <HAL_RCC_OscConfig+0x76c>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800373a:	00d2      	lsls	r2, r2, #3
 800373c:	4933      	ldr	r1, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800373e:	4313      	orrs	r3, r2
 8003740:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003742:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	f023 020c 	bic.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	492f      	ldr	r1, [pc, #188]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003750:	4313      	orrs	r3, r2
 8003752:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003754:	4b2d      	ldr	r3, [pc, #180]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003758:	f023 0202 	bic.w	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003760:	492a      	ldr	r1, [pc, #168]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003762:	4313      	orrs	r3, r2
 8003764:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003766:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	4a28      	ldr	r2, [pc, #160]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003772:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	4a25      	ldr	r2, [pc, #148]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800377e:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	4a22      	ldr	r2, [pc, #136]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800378a:	4b20      	ldr	r3, [pc, #128]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003790:	f043 0301 	orr.w	r3, r3, #1
 8003794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003796:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_RCC_OscConfig+0x764>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1c      	ldr	r2, [pc, #112]	; (800380c <HAL_RCC_OscConfig+0x764>)
 800379c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a2:	f7fe fa1d 	bl	8001be0 <HAL_GetTick>
 80037a6:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fe fa19 	bl	8001be0 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e023      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x702>
 80037c8:	e01b      	b.n	8003802 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80037d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d6:	f7fe fa03 	bl	8001be0 <HAL_GetTick>
 80037da:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe f9ff 	bl	8001be0 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e009      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_OscConfig+0x764>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x736>
 80037fc:	e001      	b.n	8003802 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e000      	b.n	8003804 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	58024400 	.word	0x58024400
 8003810:	fffffc0c 	.word	0xfffffc0c
 8003814:	ffff0007 	.word	0xffff0007

08003818 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e18d      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b8a      	ldr	r3, [pc, #552]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 030f 	and.w	r3, r3, #15
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d910      	bls.n	800385c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b87      	ldr	r3, [pc, #540]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 020f 	bic.w	r2, r3, #15
 8003842:	4985      	ldr	r1, [pc, #532]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b83      	ldr	r3, [pc, #524]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e175      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	4b7b      	ldr	r3, [pc, #492]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003874:	429a      	cmp	r2, r3
 8003876:	d908      	bls.n	800388a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003878:	4b78      	ldr	r3, [pc, #480]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	4975      	ldr	r1, [pc, #468]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003886:	4313      	orrs	r3, r2
 8003888:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d010      	beq.n	80038b8 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d908      	bls.n	80038b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038a6:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	496a      	ldr	r1, [pc, #424]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0310 	and.w	r3, r3, #16
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	4b64      	ldr	r3, [pc, #400]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d908      	bls.n	80038e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d4:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	495e      	ldr	r1, [pc, #376]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d010      	beq.n	8003914 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038fe:	429a      	cmp	r2, r3
 8003900:	d908      	bls.n	8003914 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003902:	4b56      	ldr	r3, [pc, #344]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4953      	ldr	r1, [pc, #332]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003910:	4313      	orrs	r3, r2
 8003912:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d010      	beq.n	8003942 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	4b4d      	ldr	r3, [pc, #308]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	429a      	cmp	r2, r3
 800392e:	d908      	bls.n	8003942 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003930:	4b4a      	ldr	r3, [pc, #296]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f023 020f 	bic.w	r2, r3, #15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4947      	ldr	r1, [pc, #284]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800393e:	4313      	orrs	r3, r2
 8003940:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d055      	beq.n	80039fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800394e:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4940      	ldr	r1, [pc, #256]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800395c:	4313      	orrs	r3, r2
 800395e:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d107      	bne.n	8003978 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003968:	4b3c      	ldr	r3, [pc, #240]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d121      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0e7      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d107      	bne.n	8003990 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003980:	4b36      	ldr	r3, [pc, #216]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d115      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0db      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003998:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0cf      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0c7      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039b8:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f023 0207 	bic.w	r2, r3, #7
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4925      	ldr	r1, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fe f909 	bl	8001be0 <HAL_GetTick>
 80039ce:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d2:	f7fe f905 	bl	8001be0 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0af      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e8:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d1eb      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d010      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d208      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a16:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f023 020f 	bic.w	r2, r3, #15
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	490e      	ldr	r1, [pc, #56]	; (8003a5c <HAL_RCC_ClockConfig+0x244>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d214      	bcs.n	8003a60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	4906      	ldr	r1, [pc, #24]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RCC_ClockConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e077      	b.n	8003b48 <HAL_RCC_ClockConfig+0x330>
 8003a58:	52002000 	.word	0x52002000
 8003a5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d208      	bcs.n	8003a8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	4931      	ldr	r1, [pc, #196]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d208      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	4926      	ldr	r1, [pc, #152]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0310 	and.w	r3, r3, #16
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d010      	beq.n	8003aea <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	4b20      	ldr	r3, [pc, #128]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003ace:	69db      	ldr	r3, [r3, #28]
 8003ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d208      	bcs.n	8003aea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	491a      	ldr	r1, [pc, #104]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69da      	ldr	r2, [r3, #28]
 8003afa:	4b15      	ldr	r3, [pc, #84]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d208      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	490f      	ldr	r1, [pc, #60]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b18:	f000 f822 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8003b1c:	4601      	mov	r1, r0
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <HAL_RCC_ClockConfig+0x338>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_RCC_ClockConfig+0x33c>)
 8003b2a:	5cd3      	ldrb	r3, [r2, r3]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	fa21 f303 	lsr.w	r3, r1, r3
 8003b34:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <HAL_RCC_ClockConfig+0x340>)
 8003b36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_RCC_ClockConfig+0x344>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe f805 	bl	8001b4c <HAL_InitTick>
 8003b42:	4603      	mov	r3, r0
 8003b44:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003b46:	7afb      	ldrb	r3, [r7, #11]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	58024400 	.word	0x58024400
 8003b54:	080099b8 	.word	0x080099b8
 8003b58:	24000000 	.word	0x24000000
 8003b5c:	24000008 	.word	0x24000008

08003b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b089      	sub	sp, #36	; 0x24
 8003b64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b66:	4baf      	ldr	r3, [pc, #700]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b6e:	2b18      	cmp	r3, #24
 8003b70:	f200 814e 	bhi.w	8003e10 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003b74:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7a:	bf00      	nop
 8003b7c:	08003be1 	.word	0x08003be1
 8003b80:	08003e11 	.word	0x08003e11
 8003b84:	08003e11 	.word	0x08003e11
 8003b88:	08003e11 	.word	0x08003e11
 8003b8c:	08003e11 	.word	0x08003e11
 8003b90:	08003e11 	.word	0x08003e11
 8003b94:	08003e11 	.word	0x08003e11
 8003b98:	08003e11 	.word	0x08003e11
 8003b9c:	08003c07 	.word	0x08003c07
 8003ba0:	08003e11 	.word	0x08003e11
 8003ba4:	08003e11 	.word	0x08003e11
 8003ba8:	08003e11 	.word	0x08003e11
 8003bac:	08003e11 	.word	0x08003e11
 8003bb0:	08003e11 	.word	0x08003e11
 8003bb4:	08003e11 	.word	0x08003e11
 8003bb8:	08003e11 	.word	0x08003e11
 8003bbc:	08003c0d 	.word	0x08003c0d
 8003bc0:	08003e11 	.word	0x08003e11
 8003bc4:	08003e11 	.word	0x08003e11
 8003bc8:	08003e11 	.word	0x08003e11
 8003bcc:	08003e11 	.word	0x08003e11
 8003bd0:	08003e11 	.word	0x08003e11
 8003bd4:	08003e11 	.word	0x08003e11
 8003bd8:	08003e11 	.word	0x08003e11
 8003bdc:	08003c13 	.word	0x08003c13
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be0:	4b90      	ldr	r3, [pc, #576]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0320 	and.w	r3, r3, #32
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bec:	4b8d      	ldr	r3, [pc, #564]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	08db      	lsrs	r3, r3, #3
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	4a8c      	ldr	r2, [pc, #560]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003bfe:	e10a      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c00:	4b89      	ldr	r3, [pc, #548]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c02:	61bb      	str	r3, [r7, #24]
    break;
 8003c04:	e107      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c06:	4b89      	ldr	r3, [pc, #548]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c08:	61bb      	str	r3, [r7, #24]
    break;
 8003c0a:	e104      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c0c:	4b88      	ldr	r3, [pc, #544]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003c0e:	61bb      	str	r3, [r7, #24]
    break;
 8003c10:	e101      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c12:	4b84      	ldr	r3, [pc, #528]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c1c:	4b81      	ldr	r3, [pc, #516]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c26:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c28:	4b7e      	ldr	r3, [pc, #504]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c32:	4b7c      	ldr	r3, [pc, #496]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c36:	08db      	lsrs	r3, r3, #3
 8003c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80da 	beq.w	8003e0a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d05a      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d302      	bcc.n	8003c66 <HAL_RCC_GetSysClockFreq+0x106>
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d078      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003c64:	e099      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c66:	4b6f      	ldr	r3, [pc, #444]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0320 	and.w	r3, r3, #32
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d02d      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c72:	4b6c      	ldr	r3, [pc, #432]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	08db      	lsrs	r3, r3, #3
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	4a6a      	ldr	r2, [pc, #424]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c82:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	ee07 3a90 	vmov	s15, r3
 8003c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9c:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cac:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003ccc:	e087      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003e38 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce0:	4b50      	ldr	r3, [pc, #320]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce8:	ee07 3a90 	vmov	s15, r3
 8003cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d10:	e065      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d24:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2c:	ee07 3a90 	vmov	s15, r3
 8003d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d34:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d38:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d54:	e043      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	ee07 3a90 	vmov	s15, r3
 8003d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d60:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003e40 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d68:	4b2e      	ldr	r3, [pc, #184]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d7c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d98:	e021      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2dc>
 8003da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dac:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003e34 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ddc:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	0a5b      	lsrs	r3, r3, #9
 8003de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de8:	3301      	adds	r3, #1
 8003dea:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003df6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e02:	ee17 3a90 	vmov	r3, s15
 8003e06:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e08:	e005      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
    break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003e12:	61bb      	str	r3, [r7, #24]
    break;
 8003e14:	bf00      	nop
  }

  return sysclockfreq;
 8003e16:	69bb      	ldr	r3, [r7, #24]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3724      	adds	r7, #36	; 0x24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	58024400 	.word	0x58024400
 8003e28:	03d09000 	.word	0x03d09000
 8003e2c:	003d0900 	.word	0x003d0900
 8003e30:	007a1200 	.word	0x007a1200
 8003e34:	46000000 	.word	0x46000000
 8003e38:	4c742400 	.word	0x4c742400
 8003e3c:	4a742400 	.word	0x4a742400
 8003e40:	4af42400 	.word	0x4af42400

08003e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e48:	f001 f9e2 	bl	8005210 <HAL_RCCEx_GetD1SysClockFreq>
 8003e4c:	4601      	mov	r1, r0
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x30>)
 8003e58:	5cd3      	ldrb	r3, [r2, r3]
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e64:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003e66:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x34>)
 8003e68:	681b      	ldr	r3, [r3, #0]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	58024400 	.word	0x58024400
 8003e74:	080099b8 	.word	0x080099b8
 8003e78:	24000004 	.word	0x24000004

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e80:	f7ff ffe0 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003e84:	4601      	mov	r1, r0
 8003e86:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	58024400 	.word	0x58024400
 8003ea4:	080099b8 	.word	0x080099b8

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003eac:	f7ff ffca 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ebe:	5cd3      	ldrb	r3, [r2, r3]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	58024400 	.word	0x58024400
 8003ed0:	080099b8 	.word	0x080099b8

08003ed4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003edc:	2300      	movs	r3, #0
 8003ede:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d03d      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef8:	d013      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d802      	bhi.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d007      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003f04:	e01f      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003f0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f10:	d01c      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003f12:	e018      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f14:	4baf      	ldr	r3, [pc, #700]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4aae      	ldr	r2, [pc, #696]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f20:	e015      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3304      	adds	r3, #4
 8003f26:	2102      	movs	r1, #2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 f98d 	bl	8005248 <RCCEx_PLL2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f32:	e00c      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3324      	adds	r3, #36	; 0x24
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 fa36 	bl	80053ac <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d109      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f54:	4b9f      	ldr	r3, [pc, #636]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f60:	499c      	ldr	r1, [pc, #624]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	650b      	str	r3, [r1, #80]	; 0x50
 8003f66:	e001      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d03d      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d826      	bhi.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003f9d 	.word	0x08003f9d
 8003f8c:	08003fab 	.word	0x08003fab
 8003f90:	08003fbd 	.word	0x08003fbd
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	08003fd5 	.word	0x08003fd5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9c:	4b8d      	ldr	r3, [pc, #564]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa0:	4a8c      	ldr	r2, [pc, #560]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fa8:	e015      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 f949 	bl	8005248 <RCCEx_PLL2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fba:	e00c      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3324      	adds	r3, #36	; 0x24
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 f9f2 	bl	80053ac <RCCEx_PLL3_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fcc:	e003      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d109      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fdc:	4b7d      	ldr	r3, [pc, #500]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe0:	f023 0207 	bic.w	r2, r3, #7
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe8:	497a      	ldr	r1, [pc, #488]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	650b      	str	r3, [r1, #80]	; 0x50
 8003fee:	e001      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
 8003ff2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d03e      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d01c      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d804      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d00d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004014:	e01e      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004016:	2bc0      	cmp	r3, #192	; 0xc0
 8004018:	d01f      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800401a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800401e:	d01e      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004020:	e018      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004022:	4b6c      	ldr	r3, [pc, #432]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	4a6b      	ldr	r2, [pc, #428]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800402e:	e017      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3304      	adds	r3, #4
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f001 f906 	bl	8005248 <RCCEx_PLL2_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004040:	e00e      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3324      	adds	r3, #36	; 0x24
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f9af 	bl	80053ac <RCCEx_PLL3_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004052:	e005      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
      break;
 8004058:	e002      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800405e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004066:	4b5b      	ldr	r3, [pc, #364]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004072:	4958      	ldr	r1, [pc, #352]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004074:	4313      	orrs	r3, r2
 8004076:	650b      	str	r3, [r1, #80]	; 0x50
 8004078:	e001      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004086:	2b00      	cmp	r3, #0
 8004088:	d044      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004094:	d01f      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409a:	d805      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00a      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a4:	d00e      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80040a6:	e01f      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80040a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040ac:	d01f      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80040ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b2:	d01e      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040b4:	e018      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b6:	4b47      	ldr	r3, [pc, #284]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	4a46      	ldr	r2, [pc, #280]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040c2:	e017      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	3304      	adds	r3, #4
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 f8bc 	bl	8005248 <RCCEx_PLL2_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040d4:	e00e      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3324      	adds	r3, #36	; 0x24
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 f965 	bl	80053ac <RCCEx_PLL3_Config>
 80040e2:	4603      	mov	r3, r0
 80040e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040e6:	e005      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	75fb      	strb	r3, [r7, #23]
      break;
 80040ec:	e002      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80040f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80040fa:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004108:	4932      	ldr	r1, [pc, #200]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800410a:	4313      	orrs	r3, r2
 800410c:	658b      	str	r3, [r1, #88]	; 0x58
 800410e:	e001      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004110:	7dfb      	ldrb	r3, [r7, #23]
 8004112:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d044      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412a:	d01f      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800412c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004130:	d805      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004136:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800413a:	d00e      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800413c:	e01f      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800413e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004142:	d01f      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004144:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004148:	d01e      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800414a:	e018      	b.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800414c:	4b21      	ldr	r3, [pc, #132]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004156:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004158:	e017      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2100      	movs	r1, #0
 8004160:	4618      	mov	r0, r3
 8004162:	f001 f871 	bl	8005248 <RCCEx_PLL2_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800416a:	e00e      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3324      	adds	r3, #36	; 0x24
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f001 f91a 	bl	80053ac <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800417c:	e005      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	75fb      	strb	r3, [r7, #23]
      break;
 8004182:	e002      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004188:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418a:	7dfb      	ldrb	r3, [r7, #23]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004190:	4b10      	ldr	r3, [pc, #64]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800419e:	490d      	ldr	r1, [pc, #52]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	658b      	str	r3, [r1, #88]	; 0x58
 80041a4:	e001      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a6:	7dfb      	ldrb	r3, [r7, #23]
 80041a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d035      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ba:	2b10      	cmp	r3, #16
 80041bc:	d00c      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d802      	bhi.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01b      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80041c6:	e017      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d00c      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d018      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80041d0:	e012      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80041d2:	bf00      	nop
 80041d4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041d8:	4baf      	ldr	r3, [pc, #700]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4aae      	ldr	r2, [pc, #696]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041e4:	e00e      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2102      	movs	r1, #2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f001 f82b 	bl	8005248 <RCCEx_PLL2_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041f6:	e005      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	75fb      	strb	r3, [r7, #23]
      break;
 80041fc:	e002      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80041fe:	bf00      	nop
 8004200:	e000      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004204:	7dfb      	ldrb	r3, [r7, #23]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800420a:	4ba3      	ldr	r3, [pc, #652]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800420c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004216:	49a0      	ldr	r1, [pc, #640]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800421c:	e001      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421e:	7dfb      	ldrb	r3, [r7, #23]
 8004220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d042      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004236:	d01f      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423c:	d805      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004246:	d00e      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004248:	e01f      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800424a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800424e:	d01f      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d01e      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004256:	e018      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004258:	4b8f      	ldr	r3, [pc, #572]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a8e      	ldr	r2, [pc, #568]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800425e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004262:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004264:	e017      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3304      	adds	r3, #4
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f000 ffeb 	bl	8005248 <RCCEx_PLL2_Config>
 8004272:	4603      	mov	r3, r0
 8004274:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004276:	e00e      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3324      	adds	r3, #36	; 0x24
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f894 	bl	80053ac <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004288:	e005      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	75fb      	strb	r3, [r7, #23]
      break;
 800428e:	e002      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004294:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004296:	7dfb      	ldrb	r3, [r7, #23]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d109      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800429c:	4b7e      	ldr	r3, [pc, #504]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800429e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	497b      	ldr	r1, [pc, #492]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	650b      	str	r3, [r1, #80]	; 0x50
 80042ae:	e001      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d042      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042c8:	d01b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ce:	d805      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d022      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d8:	d00a      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042da:	e01b      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80042dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e0:	d01d      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80042e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e6:	d01c      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80042e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042ec:	d01b      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80042ee:	e011      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3304      	adds	r3, #4
 80042f4:	2101      	movs	r1, #1
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 ffa6 	bl	8005248 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004300:	e012      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	3324      	adds	r3, #36	; 0x24
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f001 f84f 	bl	80053ac <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004312:	e009      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	75fb      	strb	r3, [r7, #23]
      break;
 8004318:	e006      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800431a:	bf00      	nop
 800431c:	e004      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800431e:	bf00      	nop
 8004320:	e002      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004322:	bf00      	nop
 8004324:	e000      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004326:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800432e:	4b5a      	ldr	r3, [pc, #360]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004332:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	4957      	ldr	r1, [pc, #348]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800433c:	4313      	orrs	r3, r2
 800433e:	650b      	str	r3, [r1, #80]	; 0x50
 8004340:	e001      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d044      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800435c:	d01b      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800435e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004362:	d805      	bhi.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004364:	2b00      	cmp	r3, #0
 8004366:	d022      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800436c:	d00a      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800436e:	e01b      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d01d      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437a:	d01c      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800437c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004380:	d01b      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004382:	e011      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f000 ff5c 	bl	8005248 <RCCEx_PLL2_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004394:	e012      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3324      	adds	r3, #36	; 0x24
 800439a:	2101      	movs	r1, #1
 800439c:	4618      	mov	r0, r3
 800439e:	f001 f805 	bl	80053ac <RCCEx_PLL3_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043a6:	e009      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	75fb      	strb	r3, [r7, #23]
      break;
 80043ac:	e006      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043ae:	bf00      	nop
 80043b0:	e004      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043b2:	bf00      	nop
 80043b4:	e002      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043b6:	bf00      	nop
 80043b8:	e000      	b.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043c2:	4b35      	ldr	r3, [pc, #212]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043d0:	4931      	ldr	r1, [pc, #196]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	658b      	str	r3, [r1, #88]	; 0x58
 80043d6:	e001      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02d      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f0:	d005      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80043f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f6:	d009      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x538>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d013      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80043fc:	e00f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043fe:	4b26      	ldr	r3, [pc, #152]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a25      	ldr	r2, [pc, #148]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800440a:	e00c      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	2101      	movs	r1, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f000 ff18 	bl	8005248 <RCCEx_PLL2_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	75fb      	strb	r3, [r7, #23]
      break;
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d109      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800442c:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800442e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004430:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004438:	4917      	ldr	r1, [pc, #92]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800443a:	4313      	orrs	r3, r2
 800443c:	650b      	str	r3, [r1, #80]	; 0x50
 800443e:	e001      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
 8004442:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d035      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	2b03      	cmp	r3, #3
 8004456:	d81b      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	0800449d 	.word	0x0800449d
 8004464:	08004471 	.word	0x08004471
 8004468:	0800447f 	.word	0x0800447f
 800446c:	0800449d 	.word	0x0800449d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004474:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800447c:	e00f      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2102      	movs	r1, #2
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fedf 	bl	8005248 <RCCEx_PLL2_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800448e:	e006      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
      break;
 8004494:	e003      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004496:	bf00      	nop
 8004498:	58024400 	.word	0x58024400
      break;
 800449c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800449e:	7dfb      	ldrb	r3, [r7, #23]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d109      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044a4:	4bba      	ldr	r3, [pc, #744]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a8:	f023 0203 	bic.w	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b0:	49b7      	ldr	r1, [pc, #732]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044b6:	e001      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8086 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ca:	4bb2      	ldr	r3, [pc, #712]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4ab1      	ldr	r2, [pc, #708]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d6:	f7fd fb83 	bl	8001be0 <HAL_GetTick>
 80044da:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044dc:	e009      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044de:	f7fd fb7f 	bl	8001be0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b64      	cmp	r3, #100	; 0x64
 80044ea:	d902      	bls.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	75fb      	strb	r3, [r7, #23]
        break;
 80044f0:	e005      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f2:	4ba8      	ldr	r3, [pc, #672]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ef      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d166      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004504:	4ba2      	ldr	r3, [pc, #648]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800450e:	4053      	eors	r3, r2
 8004510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004514:	2b00      	cmp	r3, #0
 8004516:	d013      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004518:	4b9d      	ldr	r3, [pc, #628]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004520:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004522:	4b9b      	ldr	r3, [pc, #620]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a9a      	ldr	r2, [pc, #616]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800452e:	4b98      	ldr	r3, [pc, #608]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	4a97      	ldr	r2, [pc, #604]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800453a:	4a95      	ldr	r2, [pc, #596]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454a:	d115      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fb48 	bl	8001be0 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004552:	e00b      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004554:	f7fd fb44 	bl	8001be0 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004562:	4293      	cmp	r3, r2
 8004564:	d902      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	75fb      	strb	r3, [r7, #23]
            break;
 800456a:	e005      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800456c:	4b88      	ldr	r3, [pc, #544]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ed      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004578:	7dfb      	ldrb	r3, [r7, #23]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d126      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004584:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800458c:	d10d      	bne.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800458e:	4b80      	ldr	r3, [pc, #512]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800459c:	0919      	lsrs	r1, r3, #4
 800459e:	4b7e      	ldr	r3, [pc, #504]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80045a0:	400b      	ands	r3, r1
 80045a2:	497b      	ldr	r1, [pc, #492]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80045aa:	4b79      	ldr	r3, [pc, #484]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	4a78      	ldr	r2, [pc, #480]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045b4:	6113      	str	r3, [r2, #16]
 80045b6:	4b76      	ldr	r3, [pc, #472]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c4:	4972      	ldr	r1, [pc, #456]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	670b      	str	r3, [r1, #112]	; 0x70
 80045ca:	e004      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	75bb      	strb	r3, [r7, #22]
 80045d0:	e001      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d07d      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e6:	2b28      	cmp	r3, #40	; 0x28
 80045e8:	d866      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	080046bf 	.word	0x080046bf
 80045f4:	080046b9 	.word	0x080046b9
 80045f8:	080046b9 	.word	0x080046b9
 80045fc:	080046b9 	.word	0x080046b9
 8004600:	080046b9 	.word	0x080046b9
 8004604:	080046b9 	.word	0x080046b9
 8004608:	080046b9 	.word	0x080046b9
 800460c:	080046b9 	.word	0x080046b9
 8004610:	08004695 	.word	0x08004695
 8004614:	080046b9 	.word	0x080046b9
 8004618:	080046b9 	.word	0x080046b9
 800461c:	080046b9 	.word	0x080046b9
 8004620:	080046b9 	.word	0x080046b9
 8004624:	080046b9 	.word	0x080046b9
 8004628:	080046b9 	.word	0x080046b9
 800462c:	080046b9 	.word	0x080046b9
 8004630:	080046a7 	.word	0x080046a7
 8004634:	080046b9 	.word	0x080046b9
 8004638:	080046b9 	.word	0x080046b9
 800463c:	080046b9 	.word	0x080046b9
 8004640:	080046b9 	.word	0x080046b9
 8004644:	080046b9 	.word	0x080046b9
 8004648:	080046b9 	.word	0x080046b9
 800464c:	080046b9 	.word	0x080046b9
 8004650:	080046bf 	.word	0x080046bf
 8004654:	080046b9 	.word	0x080046b9
 8004658:	080046b9 	.word	0x080046b9
 800465c:	080046b9 	.word	0x080046b9
 8004660:	080046b9 	.word	0x080046b9
 8004664:	080046b9 	.word	0x080046b9
 8004668:	080046b9 	.word	0x080046b9
 800466c:	080046b9 	.word	0x080046b9
 8004670:	080046bf 	.word	0x080046bf
 8004674:	080046b9 	.word	0x080046b9
 8004678:	080046b9 	.word	0x080046b9
 800467c:	080046b9 	.word	0x080046b9
 8004680:	080046b9 	.word	0x080046b9
 8004684:	080046b9 	.word	0x080046b9
 8004688:	080046b9 	.word	0x080046b9
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046bf 	.word	0x080046bf
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	2101      	movs	r1, #1
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fdd4 	bl	8005248 <RCCEx_PLL2_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046a4:	e00c      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3324      	adds	r3, #36	; 0x24
 80046aa:	2101      	movs	r1, #1
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fe7d 	bl	80053ac <RCCEx_PLL3_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046b6:	e003      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	75fb      	strb	r3, [r7, #23]
      break;
 80046bc:	e000      	b.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80046be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c0:	7dfb      	ldrb	r3, [r7, #23]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046c6:	4b32      	ldr	r3, [pc, #200]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d2:	492f      	ldr	r1, [pc, #188]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	654b      	str	r3, [r1, #84]	; 0x54
 80046d8:	e001      	b.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d037      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d820      	bhi.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800473b 	.word	0x0800473b
 80046fc:	08004711 	.word	0x08004711
 8004700:	08004723 	.word	0x08004723
 8004704:	0800473b 	.word	0x0800473b
 8004708:	0800473b 	.word	0x0800473b
 800470c:	0800473b 	.word	0x0800473b
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	2101      	movs	r1, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fd96 	bl	8005248 <RCCEx_PLL2_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004720:	e00c      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	2101      	movs	r1, #1
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fe3f 	bl	80053ac <RCCEx_PLL3_Config>
 800472e:	4603      	mov	r3, r0
 8004730:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004732:	e003      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	75fb      	strb	r3, [r7, #23]
      break;
 8004738:	e000      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800473a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800473c:	7dfb      	ldrb	r3, [r7, #23]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d109      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004746:	f023 0207 	bic.w	r2, r3, #7
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	4910      	ldr	r1, [pc, #64]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004750:	4313      	orrs	r3, r2
 8004752:	654b      	str	r3, [r1, #84]	; 0x54
 8004754:	e001      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004756:	7dfb      	ldrb	r3, [r7, #23]
 8004758:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d040      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	2b05      	cmp	r3, #5
 800476e:	d827      	bhi.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047c7 	.word	0x080047c7
 800477c:	0800479d 	.word	0x0800479d
 8004780:	080047af 	.word	0x080047af
 8004784:	080047c7 	.word	0x080047c7
 8004788:	080047c7 	.word	0x080047c7
 800478c:	080047c7 	.word	0x080047c7
 8004790:	58024400 	.word	0x58024400
 8004794:	58024800 	.word	0x58024800
 8004798:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3304      	adds	r3, #4
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fd50 	bl	8005248 <RCCEx_PLL2_Config>
 80047a8:	4603      	mov	r3, r0
 80047aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047ac:	e00c      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3324      	adds	r3, #36	; 0x24
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fdf9 	bl	80053ac <RCCEx_PLL3_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047be:	e003      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	75fb      	strb	r3, [r7, #23]
      break;
 80047c4:	e000      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80047c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10a      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047ce:	4bb3      	ldr	r3, [pc, #716]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	49af      	ldr	r1, [pc, #700]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	658b      	str	r3, [r1, #88]	; 0x58
 80047e2:	e001      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d044      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047fe:	d01b      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004804:	d805      	bhi.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d022      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800480a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004810:	e01b      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d01d      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800481c:	d01c      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800481e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004822:	d01b      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004824:	e011      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fd0b 	bl	8005248 <RCCEx_PLL2_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004836:	e012      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	2102      	movs	r1, #2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fdb4 	bl	80053ac <RCCEx_PLL3_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004848:	e009      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
      break;
 800484e:	e006      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004850:	bf00      	nop
 8004852:	e004      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004854:	bf00      	nop
 8004856:	e002      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800485c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800485e:	7dfb      	ldrb	r3, [r7, #23]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10a      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004864:	4b8d      	ldr	r3, [pc, #564]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004872:	498a      	ldr	r1, [pc, #552]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004874:	4313      	orrs	r3, r2
 8004876:	654b      	str	r3, [r1, #84]	; 0x54
 8004878:	e001      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
 800487c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b00      	cmp	r3, #0
 8004888:	d044      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004894:	d01b      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489a:	d805      	bhi.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d022      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80048a6:	e01b      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ac:	d01d      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80048ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048b2:	d01c      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80048b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048b8:	d01b      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80048ba:	e011      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fcc0 	bl	8005248 <RCCEx_PLL2_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048cc:	e012      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3324      	adds	r3, #36	; 0x24
 80048d2:	2102      	movs	r1, #2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fd69 	bl	80053ac <RCCEx_PLL3_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048de:	e009      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048e6:	bf00      	nop
 80048e8:	e004      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048ea:	bf00      	nop
 80048ec:	e002      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048ee:	bf00      	nop
 80048f0:	e000      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f4:	7dfb      	ldrb	r3, [r7, #23]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048fa:	4b68      	ldr	r3, [pc, #416]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004908:	4964      	ldr	r1, [pc, #400]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	658b      	str	r3, [r1, #88]	; 0x58
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7dfb      	ldrb	r3, [r7, #23]
 8004912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b00      	cmp	r3, #0
 800491e:	d044      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492a:	d01b      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800492c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004930:	d805      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d022      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493a:	d00a      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800493c:	e01b      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800493e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004942:	d01d      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004944:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004948:	d01c      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800494a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800494e:	d01b      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004950:	e011      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	3304      	adds	r3, #4
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f000 fc75 	bl	8005248 <RCCEx_PLL2_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004962:	e012      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3324      	adds	r3, #36	; 0x24
 8004968:	2102      	movs	r1, #2
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fd1e 	bl	80053ac <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004974:	e009      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	75fb      	strb	r3, [r7, #23]
      break;
 800497a:	e006      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800497c:	bf00      	nop
 800497e:	e004      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004980:	bf00      	nop
 8004982:	e002      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004984:	bf00      	nop
 8004986:	e000      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004988:	bf00      	nop
    }

    if(ret == HAL_OK)
 800498a:	7dfb      	ldrb	r3, [r7, #23]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004990:	4b42      	ldr	r3, [pc, #264]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800499e:	493f      	ldr	r1, [pc, #252]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	658b      	str	r3, [r1, #88]	; 0x58
 80049a4:	e001      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a6:	7dfb      	ldrb	r3, [r7, #23]
 80049a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c0:	d10b      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3324      	adds	r3, #36	; 0x24
 80049c6:	2102      	movs	r1, #2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fcef 	bl	80053ac <RCCEx_PLL3_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00c      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	75bb      	strb	r3, [r7, #22]
 80049d8:	e009      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049da:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e8:	492c      	ldr	r1, [pc, #176]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d01b      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a04:	d10b      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3324      	adds	r3, #36	; 0x24
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fccd 	bl	80053ac <RCCEx_PLL3_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00c      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75bb      	strb	r3, [r7, #22]
 8004a1c:	e009      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a1e:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2c:	491b      	ldr	r1, [pc, #108]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d032      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d00d      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4e:	d016      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d111      	bne.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fbf4 	bl	8005248 <RCCEx_PLL2_Config>
 8004a60:	4603      	mov	r3, r0
 8004a62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a64:	e00c      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3324      	adds	r3, #36	; 0x24
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fc9d 	bl	80053ac <RCCEx_PLL3_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a76:	e003      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a7c:	e000      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8004a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a86:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a94:	4901      	ldr	r1, [pc, #4]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	658b      	str	r3, [r1, #88]	; 0x58
 8004a9a:	e003      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d02f      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aba:	d00c      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004abc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ac0:	d015      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ac8:	4b79      	ldr	r3, [pc, #484]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	4a78      	ldr	r2, [pc, #480]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ad4:	e00c      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3324      	adds	r3, #36	; 0x24
 8004ada:	2101      	movs	r1, #1
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fc65 	bl	80053ac <RCCEx_PLL3_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ae6:	e003      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	75fb      	strb	r3, [r7, #23]
      break;
 8004aec:	e000      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8004aee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004af6:	4b6e      	ldr	r3, [pc, #440]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b04:	496a      	ldr	r1, [pc, #424]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	654b      	str	r3, [r1, #84]	; 0x54
 8004b0a:	e001      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d029      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d007      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004b2a:	e00f      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b2c:	4b60      	ldr	r3, [pc, #384]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	4a5f      	ldr	r2, [pc, #380]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b38:	e00b      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fb81 	bl	8005248 <RCCEx_PLL2_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b58:	4b55      	ldr	r3, [pc, #340]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b64:	4952      	ldr	r1, [pc, #328]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b6a:	e001      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b6c:	7dfb      	ldrb	r3, [r7, #23]
 8004b6e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3324      	adds	r3, #36	; 0x24
 8004b80:	2102      	movs	r1, #2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fc12 	bl	80053ac <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d02f      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba6:	d00c      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bac:	d802      	bhi.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d011      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004bb2:	e00d      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb8:	d00f      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bbe:	d00e      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8004bc0:	e006      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc2:	4b3b      	ldr	r3, [pc, #236]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a3a      	ldr	r2, [pc, #232]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004bce:	e007      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd4:	e004      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004bd6:	bf00      	nop
 8004bd8:	e002      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004be6:	4b32      	ldr	r3, [pc, #200]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf2:	492f      	ldr	r1, [pc, #188]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	654b      	str	r3, [r1, #84]	; 0x54
 8004bf8:	e001      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
 8004bfc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c0a:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	4926      	ldr	r1, [pc, #152]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c28:	4b21      	ldr	r3, [pc, #132]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c36:	491e      	ldr	r1, [pc, #120]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c54:	4916      	ldr	r1, [pc, #88]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	4a11      	ldr	r2, [pc, #68]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c70:	6113      	str	r3, [r2, #16]
 8004c72:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c7c:	490c      	ldr	r1, [pc, #48]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	da08      	bge.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	4906      	ldr	r1, [pc, #24]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004c9c:	7dbb      	ldrb	r3, [r7, #22]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	58024400 	.word	0x58024400

08004cb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cb8:	f7ff f8c4 	bl	8003e44 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4601      	mov	r1, r0
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	091b      	lsrs	r3, r3, #4
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4a04      	ldr	r2, [pc, #16]	; (8004cdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cca:	5cd3      	ldrb	r3, [r2, r3]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	080099b8 	.word	0x080099b8

08004ce0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ce8:	4b9d      	ldr	r3, [pc, #628]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004cf2:	4b9b      	ldr	r3, [pc, #620]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	0b1b      	lsrs	r3, r3, #12
 8004cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cfc:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004cfe:	4b98      	ldr	r3, [pc, #608]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	f003 0310 	and.w	r3, r3, #16
 8004d06:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d08:	4b95      	ldr	r3, [pc, #596]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	08db      	lsrs	r3, r3, #3
 8004d0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	fb02 f303 	mul.w	r3, r2, r3
 8004d18:	ee07 3a90 	vmov	s15, r3
 8004d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d20:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f000 810a 	beq.w	8004f40 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d05a      	beq.n	8004de8 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d302      	bcc.n	8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d078      	beq.n	8004e2c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004d3a:	e099      	b.n	8004e70 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d3c:	4b88      	ldr	r3, [pc, #544]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02d      	beq.n	8004da4 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d48:	4b85      	ldr	r3, [pc, #532]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	08db      	lsrs	r3, r3, #3
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	4a84      	ldr	r2, [pc, #528]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004d54:	fa22 f303 	lsr.w	r3, r2, r3
 8004d58:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d72:	4b7b      	ldr	r3, [pc, #492]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7a:	ee07 3a90 	vmov	s15, r3
 8004d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004da2:	e087      	b.n	8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	ee07 3a90 	vmov	s15, r3
 8004daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004db6:	4b6a      	ldr	r3, [pc, #424]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dbe:	ee07 3a90 	vmov	s15, r3
 8004dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004de6:	e065      	b.n	8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfa:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e2a:	e043      	b.n	8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3e:	4b48      	ldr	r3, [pc, #288]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e6e:	e021      	b.n	8004eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eb2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004eb4:	4b2a      	ldr	r3, [pc, #168]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	0a5b      	lsrs	r3, r3, #9
 8004eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004eca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ece:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ed6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004eda:	ee17 2a90 	vmov	r2, s15
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004ee2:	4b1f      	ldr	r3, [pc, #124]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	0c1b      	lsrs	r3, r3, #16
 8004ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004eec:	ee07 3a90 	vmov	s15, r3
 8004ef0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ef8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004efc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f08:	ee17 2a90 	vmov	r2, s15
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f10:	4b13      	ldr	r3, [pc, #76]	; (8004f60 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	0e1b      	lsrs	r3, r3, #24
 8004f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f36:	ee17 2a90 	vmov	r2, s15
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f3e:	e008      	b.n	8004f52 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	609a      	str	r2, [r3, #8]
}
 8004f52:	bf00      	nop
 8004f54:	3724      	adds	r7, #36	; 0x24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	58024400 	.word	0x58024400
 8004f64:	03d09000 	.word	0x03d09000
 8004f68:	46000000 	.word	0x46000000
 8004f6c:	4c742400 	.word	0x4c742400
 8004f70:	4a742400 	.word	0x4a742400
 8004f74:	4af42400 	.word	0x4af42400

08004f78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b089      	sub	sp, #36	; 0x24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f80:	4b9d      	ldr	r3, [pc, #628]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004f8a:	4b9b      	ldr	r3, [pc, #620]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	0d1b      	lsrs	r3, r3, #20
 8004f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f94:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004f96:	4b98      	ldr	r3, [pc, #608]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004fa0:	4b95      	ldr	r3, [pc, #596]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	08db      	lsrs	r3, r3, #3
 8004fa6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	ee07 3a90 	vmov	s15, r3
 8004fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 810a 	beq.w	80051d8 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d05a      	beq.n	8005080 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d302      	bcc.n	8004fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d078      	beq.n	80050c4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004fd2:	e099      	b.n	8005108 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd4:	4b88      	ldr	r3, [pc, #544]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d02d      	beq.n	800503c <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fe0:	4b85      	ldr	r3, [pc, #532]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	08db      	lsrs	r3, r3, #3
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	4a84      	ldr	r2, [pc, #528]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004fec:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	ee07 3a90 	vmov	s15, r3
 8004ff8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500a:	4b7b      	ldr	r3, [pc, #492]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501a:	ed97 6a03 	vldr	s12, [r7, #12]
 800501e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800502e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005036:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800503a:	e087      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	ee07 3a90 	vmov	s15, r3
 8005042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005046:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800504a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800504e:	4b6a      	ldr	r3, [pc, #424]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800505e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005062:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800506e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800507e:	e065      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050c2:	e043      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800520c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b48      	ldr	r3, [pc, #288]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005106:	e021      	b.n	800514c <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b37      	ldr	r3, [pc, #220]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800514a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800514c:	4b2a      	ldr	r3, [pc, #168]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	0a5b      	lsrs	r3, r3, #9
 8005152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005156:	ee07 3a90 	vmov	s15, r3
 800515a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800515e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005162:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005166:	edd7 6a07 	vldr	s13, [r7, #28]
 800516a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800516e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005172:	ee17 2a90 	vmov	r2, s15
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800517a:	4b1f      	ldr	r3, [pc, #124]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	0c1b      	lsrs	r3, r3, #16
 8005180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005194:	edd7 6a07 	vldr	s13, [r7, #28]
 8005198:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800519c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a0:	ee17 2a90 	vmov	r2, s15
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80051a8:	4b13      	ldr	r3, [pc, #76]	; (80051f8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	0e1b      	lsrs	r3, r3, #24
 80051ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ce:	ee17 2a90 	vmov	r2, s15
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051d6:	e008      	b.n	80051ea <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	609a      	str	r2, [r3, #8]
}
 80051ea:	bf00      	nop
 80051ec:	3724      	adds	r7, #36	; 0x24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	58024400 	.word	0x58024400
 80051fc:	03d09000 	.word	0x03d09000
 8005200:	46000000 	.word	0x46000000
 8005204:	4c742400 	.word	0x4c742400
 8005208:	4a742400 	.word	0x4a742400
 800520c:	4af42400 	.word	0x4af42400

08005210 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005214:	f7fe fca4 	bl	8003b60 <HAL_RCC_GetSysClockFreq>
 8005218:	4601      	mov	r1, r0
 800521a:	4b08      	ldr	r3, [pc, #32]	; (800523c <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	4a06      	ldr	r2, [pc, #24]	; (8005240 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005226:	5cd3      	ldrb	r3, [r2, r3]
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	fa21 f303 	lsr.w	r3, r1, r3
 8005230:	4a04      	ldr	r2, [pc, #16]	; (8005244 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005232:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	bd80      	pop	{r7, pc}
 800523c:	58024400 	.word	0x58024400
 8005240:	080099b8 	.word	0x080099b8
 8005244:	24000000 	.word	0x24000000

08005248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005256:	4b53      	ldr	r3, [pc, #332]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b03      	cmp	r3, #3
 8005260:	d101      	bne.n	8005266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e099      	b.n	800539a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005266:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a4e      	ldr	r2, [pc, #312]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800526c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005272:	f7fc fcb5 	bl	8001be0 <HAL_GetTick>
 8005276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005278:	e008      	b.n	800528c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800527a:	f7fc fcb1 	bl	8001be0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e086      	b.n	800539a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800528c:	4b45      	ldr	r3, [pc, #276]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f0      	bne.n	800527a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005298:	4b42      	ldr	r3, [pc, #264]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	031b      	lsls	r3, r3, #12
 80052a6:	493f      	ldr	r1, [pc, #252]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	628b      	str	r3, [r1, #40]	; 0x28
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	025b      	lsls	r3, r3, #9
 80052be:	b29b      	uxth	r3, r3
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	061b      	lsls	r3, r3, #24
 80052d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052dc:	4931      	ldr	r1, [pc, #196]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052e2:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	492d      	ldr	r1, [pc, #180]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	f023 0220 	bic.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	699b      	ldr	r3, [r3, #24]
 8005300:	4928      	ldr	r1, [pc, #160]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005302:	4313      	orrs	r3, r2
 8005304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800530c:	f023 0310 	bic.w	r3, r3, #16
 8005310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005312:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <RCCEx_PLL2_Config+0x160>)
 8005318:	4013      	ands	r3, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	69d2      	ldr	r2, [r2, #28]
 800531e:	00d2      	lsls	r2, r2, #3
 8005320:	4920      	ldr	r1, [pc, #128]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005322:	4313      	orrs	r3, r2
 8005324:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005326:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	4a1e      	ldr	r2, [pc, #120]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800532c:	f043 0310 	orr.w	r3, r3, #16
 8005330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d106      	bne.n	8005346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005338:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800533a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533c:	4a19      	ldr	r2, [pc, #100]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800533e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005344:	e00f      	b.n	8005366 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d106      	bne.n	800535a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800534c:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	4a14      	ldr	r2, [pc, #80]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005358:	e005      	b.n	8005366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4a11      	ldr	r2, [pc, #68]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005366:	4b0f      	ldr	r3, [pc, #60]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a0e      	ldr	r2, [pc, #56]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800536c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005372:	f7fc fc35 	bl	8001be0 <HAL_GetTick>
 8005376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005378:	e008      	b.n	800538c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800537a:	f7fc fc31 	bl	8001be0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e006      	b.n	800539a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <RCCEx_PLL2_Config+0x15c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f0      	beq.n	800537a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	58024400 	.word	0x58024400
 80053a8:	ffff0007 	.word	0xffff0007

080053ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053ba:	4b53      	ldr	r3, [pc, #332]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d101      	bne.n	80053ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e099      	b.n	80054fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053ca:	4b4f      	ldr	r3, [pc, #316]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a4e      	ldr	r2, [pc, #312]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fc fc03 	bl	8001be0 <HAL_GetTick>
 80053da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053dc:	e008      	b.n	80053f0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053de:	f7fc fbff 	bl	8001be0 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e086      	b.n	80054fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053f0:	4b45      	ldr	r3, [pc, #276]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80053fc:	4b42      	ldr	r3, [pc, #264]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80053fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005400:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	051b      	lsls	r3, r3, #20
 800540a:	493f      	ldr	r1, [pc, #252]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800540c:	4313      	orrs	r3, r2
 800540e:	628b      	str	r3, [r1, #40]	; 0x28
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	3b01      	subs	r3, #1
 8005416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	3b01      	subs	r3, #1
 8005420:	025b      	lsls	r3, r3, #9
 8005422:	b29b      	uxth	r3, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	3b01      	subs	r3, #1
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	3b01      	subs	r3, #1
 800543a:	061b      	lsls	r3, r3, #24
 800543c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005440:	4931      	ldr	r1, [pc, #196]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005446:	4b30      	ldr	r3, [pc, #192]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	492d      	ldr	r1, [pc, #180]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005454:	4313      	orrs	r3, r2
 8005456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005458:	4b2b      	ldr	r3, [pc, #172]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	4928      	ldr	r1, [pc, #160]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005466:	4313      	orrs	r3, r2
 8005468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800546a:	4b27      	ldr	r3, [pc, #156]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	4a26      	ldr	r2, [pc, #152]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005476:	4b24      	ldr	r3, [pc, #144]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <RCCEx_PLL3_Config+0x160>)
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	69d2      	ldr	r2, [r2, #28]
 8005482:	00d2      	lsls	r2, r2, #3
 8005484:	4920      	ldr	r1, [pc, #128]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005486:	4313      	orrs	r3, r2
 8005488:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800548a:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d106      	bne.n	80054aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800549c:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054a8:	e00f      	b.n	80054ca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d106      	bne.n	80054be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054b0:	4b15      	ldr	r3, [pc, #84]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	4a14      	ldr	r2, [pc, #80]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054bc:	e005      	b.n	80054ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054be:	4b12      	ldr	r3, [pc, #72]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c2:	4a11      	ldr	r2, [pc, #68]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054ca:	4b0f      	ldr	r3, [pc, #60]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a0e      	ldr	r2, [pc, #56]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d6:	f7fc fb83 	bl	8001be0 <HAL_GetTick>
 80054da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054de:	f7fc fb7f 	bl	8001be0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e006      	b.n	80054fe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054f0:	4b05      	ldr	r3, [pc, #20]	; (8005508 <RCCEx_PLL3_Config+0x15c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0f0      	beq.n	80054de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	58024400 	.word	0x58024400
 800550c:	ffff0007 	.word	0xffff0007

08005510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e01d      	b.n	800555e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fc f87e 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3304      	adds	r3, #4
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f000 fc38 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <HAL_TIM_Base_Start_IT+0x50>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b06      	cmp	r3, #6
 8005590:	d00b      	beq.n	80055aa <HAL_TIM_Base_Start_IT+0x42>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005598:	d007      	beq.n	80055aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0201 	orr.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	00010007 	.word	0x00010007

080055bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e01d      	b.n	800560a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f815 	bl	8005612 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f000 fbe2 	bl	8005dc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b0c      	cmp	r3, #12
 8005636:	d841      	bhi.n	80056bc <HAL_TIM_PWM_Start_IT+0x94>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <HAL_TIM_PWM_Start_IT+0x18>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005675 	.word	0x08005675
 8005644:	080056bd 	.word	0x080056bd
 8005648:	080056bd 	.word	0x080056bd
 800564c:	080056bd 	.word	0x080056bd
 8005650:	08005687 	.word	0x08005687
 8005654:	080056bd 	.word	0x080056bd
 8005658:	080056bd 	.word	0x080056bd
 800565c:	080056bd 	.word	0x080056bd
 8005660:	08005699 	.word	0x08005699
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056bd 	.word	0x080056bd
 800566c:	080056bd 	.word	0x080056bd
 8005670:	080056ab 	.word	0x080056ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0202 	orr.w	r2, r2, #2
 8005682:	60da      	str	r2, [r3, #12]
      break;
 8005684:	e01b      	b.n	80056be <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0204 	orr.w	r2, r2, #4
 8005694:	60da      	str	r2, [r3, #12]
      break;
 8005696:	e012      	b.n	80056be <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	60da      	str	r2, [r3, #12]
      break;
 80056a8:	e009      	b.n	80056be <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f042 0210 	orr.w	r2, r2, #16
 80056b8:	60da      	str	r2, [r3, #12]
      break;
 80056ba:	e000      	b.n	80056be <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80056bc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2201      	movs	r2, #1
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 ff82 	bl	80065d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1e      	ldr	r2, [pc, #120]	; (800574c <HAL_TIM_PWM_Start_IT+0x124>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_TIM_PWM_Start_IT+0xd6>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <HAL_TIM_PWM_Start_IT+0x128>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00e      	beq.n	80056fe <HAL_TIM_PWM_Start_IT+0xd6>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <HAL_TIM_PWM_Start_IT+0x12c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d009      	beq.n	80056fe <HAL_TIM_PWM_Start_IT+0xd6>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1a      	ldr	r2, [pc, #104]	; (8005758 <HAL_TIM_PWM_Start_IT+0x130>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d004      	beq.n	80056fe <HAL_TIM_PWM_Start_IT+0xd6>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_TIM_PWM_Start_IT+0x134>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d101      	bne.n	8005702 <HAL_TIM_PWM_Start_IT+0xda>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_TIM_PWM_Start_IT+0xdc>
 8005702:	2300      	movs	r3, #0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005716:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	4b10      	ldr	r3, [pc, #64]	; (8005760 <HAL_TIM_PWM_Start_IT+0x138>)
 8005720:	4013      	ands	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b06      	cmp	r3, #6
 8005728:	d00b      	beq.n	8005742 <HAL_TIM_PWM_Start_IT+0x11a>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005730:	d007      	beq.n	8005742 <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800
 8005760:	00010007 	.word	0x00010007

08005764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d122      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b02      	cmp	r3, #2
 8005786:	d11b      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0202 	mvn.w	r2, #2
 8005790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 faee 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fae0 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 faf1 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0204 	mvn.w	r2, #4
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fac4 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fab6 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fac7 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b08      	cmp	r3, #8
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0208 	mvn.w	r2, #8
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2204      	movs	r2, #4
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa9a 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa8c 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa9d 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0210 	mvn.w	r2, #16
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2208      	movs	r2, #8
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa70 	bl	8005d88 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa62 	bl	8005d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fa73 	bl	8005d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10e      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d107      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0201 	mvn.w	r2, #1
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fb ff96 	bl	8001814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d10e      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b80      	cmp	r3, #128	; 0x80
 8005902:	d107      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800590c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 feea 	bl	80066e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005922:	d10e      	bne.n	8005942 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d107      	bne.n	8005942 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800593a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fedd 	bl	80066fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d10e      	bne.n	800596e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d107      	bne.n	800596e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa21 	bl	8005db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b20      	cmp	r3, #32
 800597a:	d10e      	bne.n	800599a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b20      	cmp	r3, #32
 8005988:	d107      	bne.n	800599a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0220 	mvn.w	r2, #32
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fe9d 	bl	80066d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e105      	b.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x226>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2202      	movs	r2, #2
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b14      	cmp	r3, #20
 80059d2:	f200 80f0 	bhi.w	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	08005bb7 	.word	0x08005bb7
 80059e4:	08005bb7 	.word	0x08005bb7
 80059e8:	08005bb7 	.word	0x08005bb7
 80059ec:	08005a71 	.word	0x08005a71
 80059f0:	08005bb7 	.word	0x08005bb7
 80059f4:	08005bb7 	.word	0x08005bb7
 80059f8:	08005bb7 	.word	0x08005bb7
 80059fc:	08005ab3 	.word	0x08005ab3
 8005a00:	08005bb7 	.word	0x08005bb7
 8005a04:	08005bb7 	.word	0x08005bb7
 8005a08:	08005bb7 	.word	0x08005bb7
 8005a0c:	08005af3 	.word	0x08005af3
 8005a10:	08005bb7 	.word	0x08005bb7
 8005a14:	08005bb7 	.word	0x08005bb7
 8005a18:	08005bb7 	.word	0x08005bb7
 8005a1c:	08005b35 	.word	0x08005b35
 8005a20:	08005bb7 	.word	0x08005bb7
 8005a24:	08005bb7 	.word	0x08005bb7
 8005a28:	08005bb7 	.word	0x08005bb7
 8005a2c:	08005b75 	.word	0x08005b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fa5e 	bl	8005ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0208 	orr.w	r2, r2, #8
 8005a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0204 	bic.w	r2, r2, #4
 8005a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6999      	ldr	r1, [r3, #24]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	619a      	str	r2, [r3, #24]
      break;
 8005a6e:	e0a3      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 face 	bl	8006018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	619a      	str	r2, [r3, #24]
      break;
 8005ab0:	e082      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fb37 	bl	800612c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0208 	orr.w	r2, r2, #8
 8005acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0204 	bic.w	r2, r2, #4
 8005adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69d9      	ldr	r1, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	61da      	str	r2, [r3, #28]
      break;
 8005af0:	e062      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fb9d 	bl	8006238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	021a      	lsls	r2, r3, #8
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	61da      	str	r2, [r3, #28]
      break;
 8005b32:	e041      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fbe4 	bl	8006308 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0208 	orr.w	r2, r2, #8
 8005b4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b72:	e021      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fc26 	bl	80063cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bb4:	e000      	b.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005bb6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop

08005bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_ConfigClockSource+0x18>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0b7      	b.n	8005d5c <HAL_TIM_ConfigClockSource+0x188>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4b57      	ldr	r3, [pc, #348]	; (8005d64 <HAL_TIM_ConfigClockSource+0x190>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b70      	cmp	r3, #112	; 0x70
 8005c22:	d02e      	beq.n	8005c82 <HAL_TIM_ConfigClockSource+0xae>
 8005c24:	2b70      	cmp	r3, #112	; 0x70
 8005c26:	d812      	bhi.n	8005c4e <HAL_TIM_ConfigClockSource+0x7a>
 8005c28:	2b30      	cmp	r3, #48	; 0x30
 8005c2a:	f000 8084 	beq.w	8005d36 <HAL_TIM_ConfigClockSource+0x162>
 8005c2e:	2b30      	cmp	r3, #48	; 0x30
 8005c30:	d806      	bhi.n	8005c40 <HAL_TIM_ConfigClockSource+0x6c>
 8005c32:	2b10      	cmp	r3, #16
 8005c34:	d07f      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d07d      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d07b      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c3e:	e084      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c40:	2b50      	cmp	r3, #80	; 0x50
 8005c42:	d048      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0x102>
 8005c44:	2b60      	cmp	r3, #96	; 0x60
 8005c46:	d056      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x122>
 8005c48:	2b40      	cmp	r3, #64	; 0x40
 8005c4a:	d064      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005c4c:	e07d      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c4e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c52:	d070      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
 8005c54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c58:	d809      	bhi.n	8005c6e <HAL_TIM_ConfigClockSource+0x9a>
 8005c5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c5e:	d027      	beq.n	8005cb0 <HAL_TIM_ConfigClockSource+0xdc>
 8005c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c64:	d067      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	d06d      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c6c:	e06d      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c6e:	4a3e      	ldr	r2, [pc, #248]	; (8005d68 <HAL_TIM_ConfigClockSource+0x194>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d060      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
 8005c74:	4a3d      	ldr	r2, [pc, #244]	; (8005d6c <HAL_TIM_ConfigClockSource+0x198>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d05d      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
 8005c7a:	4a3d      	ldr	r2, [pc, #244]	; (8005d70 <HAL_TIM_ConfigClockSource+0x19c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d05a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005c80:	e063      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6818      	ldr	r0, [r3, #0]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f000 fc7d 	bl	8006590 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	609a      	str	r2, [r3, #8]
      break;
 8005cae:	e04c      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6818      	ldr	r0, [r3, #0]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f000 fc66 	bl	8006590 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd2:	609a      	str	r2, [r3, #8]
      break;
 8005cd4:	e039      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 fbd6 	bl	8006494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2150      	movs	r1, #80	; 0x50
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fc30 	bl	8006554 <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e029      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fbf5 	bl	80064f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2160      	movs	r1, #96	; 0x60
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 fc20 	bl	8006554 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e019      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	6859      	ldr	r1, [r3, #4]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	461a      	mov	r2, r3
 8005d24:	f000 fbb6 	bl	8006494 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fc10 	bl	8006554 <TIM_ITRx_SetConfig>
      break;
 8005d34:	e009      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	4610      	mov	r0, r2
 8005d42:	f000 fc07 	bl	8006554 <TIM_ITRx_SetConfig>
      break;
 8005d46:	e000      	b.n	8005d4a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005d48:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	ffceff88 	.word	0xffceff88
 8005d68:	00100030 	.word	0x00100030
 8005d6c:	00100040 	.word	0x00100040
 8005d70:	00100020 	.word	0x00100020

08005d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a40      	ldr	r2, [pc, #256]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de2:	d00f      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a3d      	ldr	r2, [pc, #244]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00b      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3c      	ldr	r2, [pc, #240]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d007      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3b      	ldr	r2, [pc, #236]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d003      	beq.n	8005e04 <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3a      	ldr	r2, [pc, #232]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d108      	bne.n	8005e16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a2f      	ldr	r2, [pc, #188]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d01f      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d01b      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a2c      	ldr	r2, [pc, #176]	; (8005edc <TIM_Base_SetConfig+0x118>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d017      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2b      	ldr	r2, [pc, #172]	; (8005ee0 <TIM_Base_SetConfig+0x11c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d013      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2a      	ldr	r2, [pc, #168]	; (8005ee4 <TIM_Base_SetConfig+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00f      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a28      	ldr	r2, [pc, #160]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d007      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a27      	ldr	r2, [pc, #156]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a26      	ldr	r2, [pc, #152]	; (8005ef4 <TIM_Base_SetConfig+0x130>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d108      	bne.n	8005e70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a10      	ldr	r2, [pc, #64]	; (8005ed8 <TIM_Base_SetConfig+0x114>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00f      	beq.n	8005ebc <TIM_Base_SetConfig+0xf8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a12      	ldr	r2, [pc, #72]	; (8005ee8 <TIM_Base_SetConfig+0x124>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00b      	beq.n	8005ebc <TIM_Base_SetConfig+0xf8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a11      	ldr	r2, [pc, #68]	; (8005eec <TIM_Base_SetConfig+0x128>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d007      	beq.n	8005ebc <TIM_Base_SetConfig+0xf8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a10      	ldr	r2, [pc, #64]	; (8005ef0 <TIM_Base_SetConfig+0x12c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_Base_SetConfig+0xf8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a0f      	ldr	r2, [pc, #60]	; (8005ef4 <TIM_Base_SetConfig+0x130>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d103      	bne.n	8005ec4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	691a      	ldr	r2, [r3, #16]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	615a      	str	r2, [r3, #20]
}
 8005eca:	bf00      	nop
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800

08005ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	f023 0201 	bic.w	r2, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4b37      	ldr	r3, [pc, #220]	; (8006000 <TIM_OC1_SetConfig+0x108>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f023 0302 	bic.w	r3, r3, #2
 8005f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a2d      	ldr	r2, [pc, #180]	; (8006004 <TIM_OC1_SetConfig+0x10c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00f      	beq.n	8005f74 <TIM_OC1_SetConfig+0x7c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a2c      	ldr	r2, [pc, #176]	; (8006008 <TIM_OC1_SetConfig+0x110>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_OC1_SetConfig+0x7c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a2b      	ldr	r2, [pc, #172]	; (800600c <TIM_OC1_SetConfig+0x114>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_OC1_SetConfig+0x7c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a2a      	ldr	r2, [pc, #168]	; (8006010 <TIM_OC1_SetConfig+0x118>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC1_SetConfig+0x7c>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a29      	ldr	r2, [pc, #164]	; (8006014 <TIM_OC1_SetConfig+0x11c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d10c      	bne.n	8005f8e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f023 0308 	bic.w	r3, r3, #8
 8005f7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f023 0304 	bic.w	r3, r3, #4
 8005f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a1c      	ldr	r2, [pc, #112]	; (8006004 <TIM_OC1_SetConfig+0x10c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00f      	beq.n	8005fb6 <TIM_OC1_SetConfig+0xbe>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a1b      	ldr	r2, [pc, #108]	; (8006008 <TIM_OC1_SetConfig+0x110>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00b      	beq.n	8005fb6 <TIM_OC1_SetConfig+0xbe>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a1a      	ldr	r2, [pc, #104]	; (800600c <TIM_OC1_SetConfig+0x114>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d007      	beq.n	8005fb6 <TIM_OC1_SetConfig+0xbe>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	; (8006010 <TIM_OC1_SetConfig+0x118>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d003      	beq.n	8005fb6 <TIM_OC1_SetConfig+0xbe>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	; (8006014 <TIM_OC1_SetConfig+0x11c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d111      	bne.n	8005fda <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	fffeff8f 	.word	0xfffeff8f
 8006004:	40010000 	.word	0x40010000
 8006008:	40010400 	.word	0x40010400
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f023 0210 	bic.w	r2, r3, #16
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4b34      	ldr	r3, [pc, #208]	; (8006114 <TIM_OC2_SetConfig+0xfc>)
 8006044:	4013      	ands	r3, r2
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4313      	orrs	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f023 0320 	bic.w	r3, r3, #32
 8006062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	697a      	ldr	r2, [r7, #20]
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a29      	ldr	r2, [pc, #164]	; (8006118 <TIM_OC2_SetConfig+0x100>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_OC2_SetConfig+0x68>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_OC2_SetConfig+0x104>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10d      	bne.n	800609c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a1e      	ldr	r2, [pc, #120]	; (8006118 <TIM_OC2_SetConfig+0x100>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d00f      	beq.n	80060c4 <TIM_OC2_SetConfig+0xac>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a1d      	ldr	r2, [pc, #116]	; (800611c <TIM_OC2_SetConfig+0x104>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00b      	beq.n	80060c4 <TIM_OC2_SetConfig+0xac>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <TIM_OC2_SetConfig+0x108>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <TIM_OC2_SetConfig+0xac>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <TIM_OC2_SetConfig+0x10c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d003      	beq.n	80060c4 <TIM_OC2_SetConfig+0xac>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <TIM_OC2_SetConfig+0x110>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d113      	bne.n	80060ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	4313      	orrs	r3, r2
 80060de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	621a      	str	r2, [r3, #32]
}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	feff8fff 	.word	0xfeff8fff
 8006118:	40010000 	.word	0x40010000
 800611c:	40010400 	.word	0x40010400
 8006120:	40014000 	.word	0x40014000
 8006124:	40014400 	.word	0x40014400
 8006128:	40014800 	.word	0x40014800

0800612c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a27      	ldr	r2, [pc, #156]	; (8006224 <TIM_OC3_SetConfig+0xf8>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_OC3_SetConfig+0x66>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a26      	ldr	r2, [pc, #152]	; (8006228 <TIM_OC3_SetConfig+0xfc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d10d      	bne.n	80061ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <TIM_OC3_SetConfig+0xf8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d00f      	beq.n	80061d6 <TIM_OC3_SetConfig+0xaa>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a1b      	ldr	r2, [pc, #108]	; (8006228 <TIM_OC3_SetConfig+0xfc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d00b      	beq.n	80061d6 <TIM_OC3_SetConfig+0xaa>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a1a      	ldr	r2, [pc, #104]	; (800622c <TIM_OC3_SetConfig+0x100>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d007      	beq.n	80061d6 <TIM_OC3_SetConfig+0xaa>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <TIM_OC3_SetConfig+0x104>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC3_SetConfig+0xaa>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a18      	ldr	r2, [pc, #96]	; (8006234 <TIM_OC3_SetConfig+0x108>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d113      	bne.n	80061fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	697a      	ldr	r2, [r7, #20]
 8006216:	621a      	str	r2, [r3, #32]
}
 8006218:	bf00      	nop
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	40010000 	.word	0x40010000
 8006228:	40010400 	.word	0x40010400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	021b      	lsls	r3, r3, #8
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4313      	orrs	r3, r2
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	031b      	lsls	r3, r3, #12
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <TIM_OC4_SetConfig+0xbc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d00f      	beq.n	80062b8 <TIM_OC4_SetConfig+0x80>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a17      	ldr	r2, [pc, #92]	; (80062f8 <TIM_OC4_SetConfig+0xc0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00b      	beq.n	80062b8 <TIM_OC4_SetConfig+0x80>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <TIM_OC4_SetConfig+0xc4>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d007      	beq.n	80062b8 <TIM_OC4_SetConfig+0x80>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a15      	ldr	r2, [pc, #84]	; (8006300 <TIM_OC4_SetConfig+0xc8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d003      	beq.n	80062b8 <TIM_OC4_SetConfig+0x80>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a14      	ldr	r2, [pc, #80]	; (8006304 <TIM_OC4_SetConfig+0xcc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d109      	bne.n	80062cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	019b      	lsls	r3, r3, #6
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	621a      	str	r2, [r3, #32]
}
 80062e6:	bf00      	nop
 80062e8:	371c      	adds	r7, #28
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010400 	.word	0x40010400
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800

08006308 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006348:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	041b      	lsls	r3, r3, #16
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <TIM_OC5_SetConfig+0xb0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00f      	beq.n	800637e <TIM_OC5_SetConfig+0x76>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a16      	ldr	r2, [pc, #88]	; (80063bc <TIM_OC5_SetConfig+0xb4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <TIM_OC5_SetConfig+0x76>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <TIM_OC5_SetConfig+0xb8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <TIM_OC5_SetConfig+0x76>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <TIM_OC5_SetConfig+0xbc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_OC5_SetConfig+0x76>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <TIM_OC5_SetConfig+0xc0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d109      	bne.n	8006392 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006384:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	021b      	lsls	r3, r3, #8
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	40010000 	.word	0x40010000
 80063bc:	40010400 	.word	0x40010400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800

080063cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	051b      	lsls	r3, r3, #20
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a18      	ldr	r2, [pc, #96]	; (8006480 <TIM_OC6_SetConfig+0xb4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d00f      	beq.n	8006444 <TIM_OC6_SetConfig+0x78>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a17      	ldr	r2, [pc, #92]	; (8006484 <TIM_OC6_SetConfig+0xb8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00b      	beq.n	8006444 <TIM_OC6_SetConfig+0x78>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <TIM_OC6_SetConfig+0xbc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d007      	beq.n	8006444 <TIM_OC6_SetConfig+0x78>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a15      	ldr	r2, [pc, #84]	; (800648c <TIM_OC6_SetConfig+0xc0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_OC6_SetConfig+0x78>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a14      	ldr	r2, [pc, #80]	; (8006490 <TIM_OC6_SetConfig+0xc4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d109      	bne.n	8006458 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800644a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40010000 	.word	0x40010000
 8006484:	40010400 	.word	0x40010400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	011b      	lsls	r3, r3, #4
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f023 030a 	bic.w	r3, r3, #10
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b087      	sub	sp, #28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
 80064fa:	60b9      	str	r1, [r7, #8]
 80064fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	f023 0210 	bic.w	r2, r3, #16
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800651c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	031b      	lsls	r3, r3, #12
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4313      	orrs	r3, r2
 8006526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800652e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	4313      	orrs	r3, r2
 8006538:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4b09      	ldr	r3, [pc, #36]	; (800658c <TIM_ITRx_SetConfig+0x38>)
 8006568:	4013      	ands	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	f043 0307 	orr.w	r3, r3, #7
 8006576:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	609a      	str	r2, [r3, #8]
}
 800657e:	bf00      	nop
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	ffcfff8f 	.word	0xffcfff8f

08006590 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	021a      	lsls	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	431a      	orrs	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2201      	movs	r2, #1
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6a1a      	ldr	r2, [r3, #32]
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	43db      	mvns	r3, r3
 80065f2:	401a      	ands	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a1a      	ldr	r2, [r3, #32]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	431a      	orrs	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006630:	2302      	movs	r3, #2
 8006632:	e045      	b.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d108      	bne.n	800667a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800666e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006692:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	4313      	orrs	r3, r2
 800669c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40010400 	.word	0x40010400

080066d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e042      	b.n	80067a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006728:	2b00      	cmp	r3, #0
 800672a:	d106      	bne.n	800673a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fb f8cb 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2224      	movs	r2, #36	; 0x24
 800673e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0201 	bic.w	r2, r2, #1
 8006750:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f9c0 	bl	8006ad8 <UART_SetConfig>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e022      	b.n	80067a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f002 fb32 	bl	8008dd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800677e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800678e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0201 	orr.w	r2, r2, #1
 800679e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f002 fbb9 	bl	8008f18 <UART_CheckIdleState>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69db      	ldr	r3, [r3, #28]
 80067be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80067d6:	4013      	ands	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d118      	bne.n	8006812 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d013      	beq.n	8006812 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d009      	beq.n	8006812 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8145 	beq.w	8006a92 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	4798      	blx	r3
      }
      return;
 8006810:	e13f      	b.n	8006a92 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80e8 	beq.w	80069ea <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4ba1      	ldr	r3, [pc, #644]	; (8006aa4 <HAL_UART_IRQHandler+0x2f4>)
 800681e:	4013      	ands	r3, r2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	4ba0      	ldr	r3, [pc, #640]	; (8006aa8 <HAL_UART_IRQHandler+0x2f8>)
 8006828:	4013      	ands	r3, r2
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80dd 	beq.w	80069ea <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d010      	beq.n	800685c <HAL_UART_IRQHandler+0xac>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00b      	beq.n	800685c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2201      	movs	r2, #1
 800684a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f043 0201 	orr.w	r2, r3, #1
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d010      	beq.n	8006888 <HAL_UART_IRQHandler+0xd8>
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2202      	movs	r2, #2
 8006876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687e:	f043 0204 	orr.w	r2, r3, #4
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d010      	beq.n	80068b4 <HAL_UART_IRQHandler+0x104>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00b      	beq.n	80068b4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2204      	movs	r2, #4
 80068a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f043 0202 	orr.w	r2, r3, #2
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f003 0308 	and.w	r3, r3, #8
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d015      	beq.n	80068ea <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4b76      	ldr	r3, [pc, #472]	; (8006aa4 <HAL_UART_IRQHandler+0x2f4>)
 80068cc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2208      	movs	r2, #8
 80068d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e0:	f043 0208 	orr.w	r2, r3, #8
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d011      	beq.n	8006918 <HAL_UART_IRQHandler+0x168>
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800690e:	f043 0220 	orr.w	r2, r3, #32
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 80b9 	beq.w	8006a96 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d011      	beq.n	8006952 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d104      	bne.n	8006942 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d004      	beq.n	8006972 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800696e:	2b00      	cmp	r3, #0
 8006970:	d031      	beq.n	80069d6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f002 fb98 	bl	80090a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d123      	bne.n	80069ce <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006994:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699a:	2b00      	cmp	r3, #0
 800699c:	d013      	beq.n	80069c6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a2:	4a42      	ldr	r2, [pc, #264]	; (8006aac <HAL_UART_IRQHandler+0x2fc>)
 80069a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fb fa76 	bl	8001e9c <HAL_DMA_Abort_IT>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d017      	beq.n	80069e6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c4:	e00f      	b.n	80069e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f87c 	bl	8006ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069cc:	e00b      	b.n	80069e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f878 	bl	8006ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d4:	e007      	b.n	80069e6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f874 	bl	8006ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80069e4:	e057      	b.n	8006a96 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e6:	bf00      	nop
    return;
 80069e8:	e055      	b.n	8006a96 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00d      	beq.n	8006a10 <HAL_UART_IRQHandler+0x260>
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d008      	beq.n	8006a10 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f002 fba1 	bl	8009150 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a0e:	e045      	b.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d031      	beq.n	8006a9a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	4798      	blx	r3
    }
    return;
 8006a3e:	e02c      	b.n	8006a9a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <HAL_UART_IRQHandler+0x2ac>
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f002 fb61 	bl	800911c <UART_EndTransmit_IT>
    return;
 8006a5a:	e01f      	b.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d008      	beq.n	8006a78 <HAL_UART_IRQHandler+0x2c8>
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f002 fb81 	bl	8009178 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a76:	e011      	b.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00c      	beq.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	da09      	bge.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f002 fb6b 	bl	8009164 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a8e:	bf00      	nop
 8006a90:	e004      	b.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
      return;
 8006a92:	bf00      	nop
 8006a94:	e002      	b.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
    return;
 8006a96:	bf00      	nop
 8006a98:	e000      	b.n	8006a9c <HAL_UART_IRQHandler+0x2ec>
    return;
 8006a9a:	bf00      	nop
  }
}
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	10000001 	.word	0x10000001
 8006aa8:	04000120 	.word	0x04000120
 8006aac:	080090f1 	.word	0x080090f1

08006ab0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006adc:	b090      	sub	sp, #64	; 0x40
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689a      	ldr	r2, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	431a      	orrs	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	69db      	ldr	r3, [r3, #28]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4bc1      	ldr	r3, [pc, #772]	; (8006e20 <UART_SetConfig+0x348>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6812      	ldr	r2, [r2, #0]
 8006b20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b22:	430b      	orrs	r3, r1
 8006b24:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68da      	ldr	r2, [r3, #12]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4ab7      	ldr	r2, [pc, #732]	; (8006e24 <UART_SetConfig+0x34c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b52:	4313      	orrs	r3, r2
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	4bb2      	ldr	r3, [pc, #712]	; (8006e28 <UART_SetConfig+0x350>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6812      	ldr	r2, [r2, #0]
 8006b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	f023 010f 	bic.w	r1, r3, #15
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4aa9      	ldr	r2, [pc, #676]	; (8006e2c <UART_SetConfig+0x354>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d177      	bne.n	8006c7a <UART_SetConfig+0x1a2>
 8006b8a:	4ba9      	ldr	r3, [pc, #676]	; (8006e30 <UART_SetConfig+0x358>)
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b92:	2b28      	cmp	r3, #40	; 0x28
 8006b94:	d86c      	bhi.n	8006c70 <UART_SetConfig+0x198>
 8006b96:	a201      	add	r2, pc, #4	; (adr r2, 8006b9c <UART_SetConfig+0xc4>)
 8006b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9c:	08006c41 	.word	0x08006c41
 8006ba0:	08006c71 	.word	0x08006c71
 8006ba4:	08006c71 	.word	0x08006c71
 8006ba8:	08006c71 	.word	0x08006c71
 8006bac:	08006c71 	.word	0x08006c71
 8006bb0:	08006c71 	.word	0x08006c71
 8006bb4:	08006c71 	.word	0x08006c71
 8006bb8:	08006c71 	.word	0x08006c71
 8006bbc:	08006c49 	.word	0x08006c49
 8006bc0:	08006c71 	.word	0x08006c71
 8006bc4:	08006c71 	.word	0x08006c71
 8006bc8:	08006c71 	.word	0x08006c71
 8006bcc:	08006c71 	.word	0x08006c71
 8006bd0:	08006c71 	.word	0x08006c71
 8006bd4:	08006c71 	.word	0x08006c71
 8006bd8:	08006c71 	.word	0x08006c71
 8006bdc:	08006c51 	.word	0x08006c51
 8006be0:	08006c71 	.word	0x08006c71
 8006be4:	08006c71 	.word	0x08006c71
 8006be8:	08006c71 	.word	0x08006c71
 8006bec:	08006c71 	.word	0x08006c71
 8006bf0:	08006c71 	.word	0x08006c71
 8006bf4:	08006c71 	.word	0x08006c71
 8006bf8:	08006c71 	.word	0x08006c71
 8006bfc:	08006c59 	.word	0x08006c59
 8006c00:	08006c71 	.word	0x08006c71
 8006c04:	08006c71 	.word	0x08006c71
 8006c08:	08006c71 	.word	0x08006c71
 8006c0c:	08006c71 	.word	0x08006c71
 8006c10:	08006c71 	.word	0x08006c71
 8006c14:	08006c71 	.word	0x08006c71
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	08006c61 	.word	0x08006c61
 8006c20:	08006c71 	.word	0x08006c71
 8006c24:	08006c71 	.word	0x08006c71
 8006c28:	08006c71 	.word	0x08006c71
 8006c2c:	08006c71 	.word	0x08006c71
 8006c30:	08006c71 	.word	0x08006c71
 8006c34:	08006c71 	.word	0x08006c71
 8006c38:	08006c71 	.word	0x08006c71
 8006c3c:	08006c69 	.word	0x08006c69
 8006c40:	2301      	movs	r3, #1
 8006c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c46:	e233      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c4e:	e22f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006c50:	2308      	movs	r3, #8
 8006c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c56:	e22b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c5e:	e227      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006c60:	2320      	movs	r3, #32
 8006c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c66:	e223      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c6e:	e21f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006c70:	2380      	movs	r3, #128	; 0x80
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	bf00      	nop
 8006c78:	e21a      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6d      	ldr	r2, [pc, #436]	; (8006e34 <UART_SetConfig+0x35c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d132      	bne.n	8006cea <UART_SetConfig+0x212>
 8006c84:	4b6a      	ldr	r3, [pc, #424]	; (8006e30 <UART_SetConfig+0x358>)
 8006c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	2b05      	cmp	r3, #5
 8006c8e:	d827      	bhi.n	8006ce0 <UART_SetConfig+0x208>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0x1c0>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006cb1 	.word	0x08006cb1
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cc1 	.word	0x08006cc1
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cb6:	e1fb      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cbe:	e1f7      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cc6:	e1f3      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cce:	e1ef      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cd6:	e1eb      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006cd8:	2340      	movs	r3, #64	; 0x40
 8006cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cde:	e1e7      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ce6:	bf00      	nop
 8006ce8:	e1e2      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a52      	ldr	r2, [pc, #328]	; (8006e38 <UART_SetConfig+0x360>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d132      	bne.n	8006d5a <UART_SetConfig+0x282>
 8006cf4:	4b4e      	ldr	r3, [pc, #312]	; (8006e30 <UART_SetConfig+0x358>)
 8006cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf8:	f003 0307 	and.w	r3, r3, #7
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	d827      	bhi.n	8006d50 <UART_SetConfig+0x278>
 8006d00:	a201      	add	r2, pc, #4	; (adr r2, 8006d08 <UART_SetConfig+0x230>)
 8006d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d06:	bf00      	nop
 8006d08:	08006d21 	.word	0x08006d21
 8006d0c:	08006d29 	.word	0x08006d29
 8006d10:	08006d31 	.word	0x08006d31
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d41 	.word	0x08006d41
 8006d1c:	08006d49 	.word	0x08006d49
 8006d20:	2300      	movs	r3, #0
 8006d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d26:	e1c3      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d2e:	e1bf      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d30:	2308      	movs	r3, #8
 8006d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d36:	e1bb      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d38:	2310      	movs	r3, #16
 8006d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d3e:	e1b7      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d40:	2320      	movs	r3, #32
 8006d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d46:	e1b3      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d48:	2340      	movs	r3, #64	; 0x40
 8006d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d4e:	e1af      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d50:	2380      	movs	r3, #128	; 0x80
 8006d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d56:	bf00      	nop
 8006d58:	e1aa      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a37      	ldr	r2, [pc, #220]	; (8006e3c <UART_SetConfig+0x364>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d132      	bne.n	8006dca <UART_SetConfig+0x2f2>
 8006d64:	4b32      	ldr	r3, [pc, #200]	; (8006e30 <UART_SetConfig+0x358>)
 8006d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d68:	f003 0307 	and.w	r3, r3, #7
 8006d6c:	2b05      	cmp	r3, #5
 8006d6e:	d827      	bhi.n	8006dc0 <UART_SetConfig+0x2e8>
 8006d70:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0x2a0>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006d91 	.word	0x08006d91
 8006d7c:	08006d99 	.word	0x08006d99
 8006d80:	08006da1 	.word	0x08006da1
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d96:	e18b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006d98:	2304      	movs	r3, #4
 8006d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d9e:	e187      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006da0:	2308      	movs	r3, #8
 8006da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006da6:	e183      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006da8:	2310      	movs	r3, #16
 8006daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dae:	e17f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006db0:	2320      	movs	r3, #32
 8006db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006db6:	e17b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006db8:	2340      	movs	r3, #64	; 0x40
 8006dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dbe:	e177      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006dc0:	2380      	movs	r3, #128	; 0x80
 8006dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dc6:	bf00      	nop
 8006dc8:	e172      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <UART_SetConfig+0x368>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d144      	bne.n	8006e5e <UART_SetConfig+0x386>
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <UART_SetConfig+0x358>)
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	2b05      	cmp	r3, #5
 8006dde:	d839      	bhi.n	8006e54 <UART_SetConfig+0x37c>
 8006de0:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <UART_SetConfig+0x310>)
 8006de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de6:	bf00      	nop
 8006de8:	08006e01 	.word	0x08006e01
 8006dec:	08006e09 	.word	0x08006e09
 8006df0:	08006e11 	.word	0x08006e11
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e45 	.word	0x08006e45
 8006dfc:	08006e4d 	.word	0x08006e4d
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e06:	e153      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006e08:	2304      	movs	r3, #4
 8006e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e0e:	e14f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006e10:	2308      	movs	r3, #8
 8006e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e16:	e14b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e1e:	e147      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006e20:	cfff69f3 	.word	0xcfff69f3
 8006e24:	58000c00 	.word	0x58000c00
 8006e28:	11fff4ff 	.word	0x11fff4ff
 8006e2c:	40011000 	.word	0x40011000
 8006e30:	58024400 	.word	0x58024400
 8006e34:	40004400 	.word	0x40004400
 8006e38:	40004800 	.word	0x40004800
 8006e3c:	40004c00 	.word	0x40004c00
 8006e40:	40005000 	.word	0x40005000
 8006e44:	2320      	movs	r3, #32
 8006e46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e4a:	e131      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e52:	e12d      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006e54:	2380      	movs	r3, #128	; 0x80
 8006e56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e5a:	bf00      	nop
 8006e5c:	e128      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4ac3      	ldr	r2, [pc, #780]	; (8007170 <UART_SetConfig+0x698>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d178      	bne.n	8006f5a <UART_SetConfig+0x482>
 8006e68:	4bc2      	ldr	r3, [pc, #776]	; (8007174 <UART_SetConfig+0x69c>)
 8006e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e70:	2b28      	cmp	r3, #40	; 0x28
 8006e72:	d86d      	bhi.n	8006f50 <UART_SetConfig+0x478>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <UART_SetConfig+0x3a4>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006f21 	.word	0x08006f21
 8006e80:	08006f51 	.word	0x08006f51
 8006e84:	08006f51 	.word	0x08006f51
 8006e88:	08006f51 	.word	0x08006f51
 8006e8c:	08006f51 	.word	0x08006f51
 8006e90:	08006f51 	.word	0x08006f51
 8006e94:	08006f51 	.word	0x08006f51
 8006e98:	08006f51 	.word	0x08006f51
 8006e9c:	08006f29 	.word	0x08006f29
 8006ea0:	08006f51 	.word	0x08006f51
 8006ea4:	08006f51 	.word	0x08006f51
 8006ea8:	08006f51 	.word	0x08006f51
 8006eac:	08006f51 	.word	0x08006f51
 8006eb0:	08006f51 	.word	0x08006f51
 8006eb4:	08006f51 	.word	0x08006f51
 8006eb8:	08006f51 	.word	0x08006f51
 8006ebc:	08006f31 	.word	0x08006f31
 8006ec0:	08006f51 	.word	0x08006f51
 8006ec4:	08006f51 	.word	0x08006f51
 8006ec8:	08006f51 	.word	0x08006f51
 8006ecc:	08006f51 	.word	0x08006f51
 8006ed0:	08006f51 	.word	0x08006f51
 8006ed4:	08006f51 	.word	0x08006f51
 8006ed8:	08006f51 	.word	0x08006f51
 8006edc:	08006f39 	.word	0x08006f39
 8006ee0:	08006f51 	.word	0x08006f51
 8006ee4:	08006f51 	.word	0x08006f51
 8006ee8:	08006f51 	.word	0x08006f51
 8006eec:	08006f51 	.word	0x08006f51
 8006ef0:	08006f51 	.word	0x08006f51
 8006ef4:	08006f51 	.word	0x08006f51
 8006ef8:	08006f51 	.word	0x08006f51
 8006efc:	08006f41 	.word	0x08006f41
 8006f00:	08006f51 	.word	0x08006f51
 8006f04:	08006f51 	.word	0x08006f51
 8006f08:	08006f51 	.word	0x08006f51
 8006f0c:	08006f51 	.word	0x08006f51
 8006f10:	08006f51 	.word	0x08006f51
 8006f14:	08006f51 	.word	0x08006f51
 8006f18:	08006f51 	.word	0x08006f51
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	2301      	movs	r3, #1
 8006f22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f26:	e0c3      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f2e:	e0bf      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f30:	2308      	movs	r3, #8
 8006f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f36:	e0bb      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f3e:	e0b7      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f40:	2320      	movs	r3, #32
 8006f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f46:	e0b3      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f48:	2340      	movs	r3, #64	; 0x40
 8006f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f4e:	e0af      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f50:	2380      	movs	r3, #128	; 0x80
 8006f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f56:	bf00      	nop
 8006f58:	e0aa      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a86      	ldr	r2, [pc, #536]	; (8007178 <UART_SetConfig+0x6a0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d132      	bne.n	8006fca <UART_SetConfig+0x4f2>
 8006f64:	4b83      	ldr	r3, [pc, #524]	; (8007174 <UART_SetConfig+0x69c>)
 8006f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f68:	f003 0307 	and.w	r3, r3, #7
 8006f6c:	2b05      	cmp	r3, #5
 8006f6e:	d827      	bhi.n	8006fc0 <UART_SetConfig+0x4e8>
 8006f70:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0x4a0>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006f91 	.word	0x08006f91
 8006f7c:	08006f99 	.word	0x08006f99
 8006f80:	08006fa1 	.word	0x08006fa1
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f96:	e08b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006f98:	2304      	movs	r3, #4
 8006f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f9e:	e087      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006fa0:	2308      	movs	r3, #8
 8006fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fa6:	e083      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006fa8:	2310      	movs	r3, #16
 8006faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fae:	e07f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fb6:	e07b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006fb8:	2340      	movs	r3, #64	; 0x40
 8006fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fbe:	e077      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006fc0:	2380      	movs	r3, #128	; 0x80
 8006fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fc6:	bf00      	nop
 8006fc8:	e072      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a6b      	ldr	r2, [pc, #428]	; (800717c <UART_SetConfig+0x6a4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d132      	bne.n	800703a <UART_SetConfig+0x562>
 8006fd4:	4b67      	ldr	r3, [pc, #412]	; (8007174 <UART_SetConfig+0x69c>)
 8006fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	2b05      	cmp	r3, #5
 8006fde:	d827      	bhi.n	8007030 <UART_SetConfig+0x558>
 8006fe0:	a201      	add	r2, pc, #4	; (adr r2, 8006fe8 <UART_SetConfig+0x510>)
 8006fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe6:	bf00      	nop
 8006fe8:	08007001 	.word	0x08007001
 8006fec:	08007009 	.word	0x08007009
 8006ff0:	08007011 	.word	0x08007011
 8006ff4:	08007019 	.word	0x08007019
 8006ff8:	08007021 	.word	0x08007021
 8006ffc:	08007029 	.word	0x08007029
 8007000:	2300      	movs	r3, #0
 8007002:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007006:	e053      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007008:	2304      	movs	r3, #4
 800700a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800700e:	e04f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007010:	2308      	movs	r3, #8
 8007012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007016:	e04b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007018:	2310      	movs	r3, #16
 800701a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800701e:	e047      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007020:	2320      	movs	r3, #32
 8007022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007026:	e043      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007028:	2340      	movs	r3, #64	; 0x40
 800702a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800702e:	e03f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007030:	2380      	movs	r3, #128	; 0x80
 8007032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007036:	bf00      	nop
 8007038:	e03a      	b.n	80070b0 <UART_SetConfig+0x5d8>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a50      	ldr	r2, [pc, #320]	; (8007180 <UART_SetConfig+0x6a8>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d132      	bne.n	80070aa <UART_SetConfig+0x5d2>
 8007044:	4b4b      	ldr	r3, [pc, #300]	; (8007174 <UART_SetConfig+0x69c>)
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	f003 0307 	and.w	r3, r3, #7
 800704c:	2b05      	cmp	r3, #5
 800704e:	d827      	bhi.n	80070a0 <UART_SetConfig+0x5c8>
 8007050:	a201      	add	r2, pc, #4	; (adr r2, 8007058 <UART_SetConfig+0x580>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	08007071 	.word	0x08007071
 800705c:	08007079 	.word	0x08007079
 8007060:	08007081 	.word	0x08007081
 8007064:	08007089 	.word	0x08007089
 8007068:	08007091 	.word	0x08007091
 800706c:	08007099 	.word	0x08007099
 8007070:	2302      	movs	r3, #2
 8007072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007076:	e01b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007078:	2304      	movs	r3, #4
 800707a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800707e:	e017      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007080:	2308      	movs	r3, #8
 8007082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007086:	e013      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007088:	2310      	movs	r3, #16
 800708a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800708e:	e00f      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007090:	2320      	movs	r3, #32
 8007092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007096:	e00b      	b.n	80070b0 <UART_SetConfig+0x5d8>
 8007098:	2340      	movs	r3, #64	; 0x40
 800709a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800709e:	e007      	b.n	80070b0 <UART_SetConfig+0x5d8>
 80070a0:	2380      	movs	r3, #128	; 0x80
 80070a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070a6:	bf00      	nop
 80070a8:	e002      	b.n	80070b0 <UART_SetConfig+0x5d8>
 80070aa:	2380      	movs	r3, #128	; 0x80
 80070ac:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a32      	ldr	r2, [pc, #200]	; (8007180 <UART_SetConfig+0x6a8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f040 86f7 	bne.w	8007eaa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070bc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	f000 80c0 	beq.w	8007246 <UART_SetConfig+0x76e>
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	dc04      	bgt.n	80070d4 <UART_SetConfig+0x5fc>
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d00c      	beq.n	80070e8 <UART_SetConfig+0x610>
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d065      	beq.n	800719e <UART_SetConfig+0x6c6>
 80070d2:	e27a      	b.n	80075ca <UART_SetConfig+0xaf2>
 80070d4:	2b20      	cmp	r3, #32
 80070d6:	f000 81b0 	beq.w	800743a <UART_SetConfig+0x962>
 80070da:	2b40      	cmp	r3, #64	; 0x40
 80070dc:	f000 821e 	beq.w	800751c <UART_SetConfig+0xa44>
 80070e0:	2b10      	cmp	r3, #16
 80070e2:	f000 8104 	beq.w	80072ee <UART_SetConfig+0x816>
 80070e6:	e270      	b.n	80075ca <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80070e8:	f7fd fde4 	bl	8004cb4 <HAL_RCCEx_GetD3PCLK1Freq>
 80070ec:	4602      	mov	r2, r0
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d04e      	beq.n	8007194 <UART_SetConfig+0x6bc>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d048      	beq.n	8007190 <UART_SetConfig+0x6b8>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b02      	cmp	r3, #2
 8007104:	d042      	beq.n	800718c <UART_SetConfig+0x6b4>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b03      	cmp	r3, #3
 800710c:	d03c      	beq.n	8007188 <UART_SetConfig+0x6b0>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b04      	cmp	r3, #4
 8007114:	d036      	beq.n	8007184 <UART_SetConfig+0x6ac>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b05      	cmp	r3, #5
 800711c:	d026      	beq.n	800716c <UART_SetConfig+0x694>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b06      	cmp	r3, #6
 8007124:	d020      	beq.n	8007168 <UART_SetConfig+0x690>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b07      	cmp	r3, #7
 800712c:	d01a      	beq.n	8007164 <UART_SetConfig+0x68c>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b08      	cmp	r3, #8
 8007134:	d014      	beq.n	8007160 <UART_SetConfig+0x688>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	2b09      	cmp	r3, #9
 800713c:	d00e      	beq.n	800715c <UART_SetConfig+0x684>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2b0a      	cmp	r3, #10
 8007144:	d008      	beq.n	8007158 <UART_SetConfig+0x680>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b0b      	cmp	r3, #11
 800714c:	d102      	bne.n	8007154 <UART_SetConfig+0x67c>
 800714e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007152:	e020      	b.n	8007196 <UART_SetConfig+0x6be>
 8007154:	2301      	movs	r3, #1
 8007156:	e01e      	b.n	8007196 <UART_SetConfig+0x6be>
 8007158:	2380      	movs	r3, #128	; 0x80
 800715a:	e01c      	b.n	8007196 <UART_SetConfig+0x6be>
 800715c:	2340      	movs	r3, #64	; 0x40
 800715e:	e01a      	b.n	8007196 <UART_SetConfig+0x6be>
 8007160:	2320      	movs	r3, #32
 8007162:	e018      	b.n	8007196 <UART_SetConfig+0x6be>
 8007164:	2310      	movs	r3, #16
 8007166:	e016      	b.n	8007196 <UART_SetConfig+0x6be>
 8007168:	230c      	movs	r3, #12
 800716a:	e014      	b.n	8007196 <UART_SetConfig+0x6be>
 800716c:	230a      	movs	r3, #10
 800716e:	e012      	b.n	8007196 <UART_SetConfig+0x6be>
 8007170:	40011400 	.word	0x40011400
 8007174:	58024400 	.word	0x58024400
 8007178:	40007800 	.word	0x40007800
 800717c:	40007c00 	.word	0x40007c00
 8007180:	58000c00 	.word	0x58000c00
 8007184:	2308      	movs	r3, #8
 8007186:	e006      	b.n	8007196 <UART_SetConfig+0x6be>
 8007188:	2306      	movs	r3, #6
 800718a:	e004      	b.n	8007196 <UART_SetConfig+0x6be>
 800718c:	2304      	movs	r3, #4
 800718e:	e002      	b.n	8007196 <UART_SetConfig+0x6be>
 8007190:	2302      	movs	r3, #2
 8007192:	e000      	b.n	8007196 <UART_SetConfig+0x6be>
 8007194:	2301      	movs	r3, #1
 8007196:	fbb2 f3f3 	udiv	r3, r2, r3
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800719c:	e219      	b.n	80075d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800719e:	f107 0318 	add.w	r3, r7, #24
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fd fd9c 	bl	8004ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d044      	beq.n	800723c <UART_SetConfig+0x764>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d03e      	beq.n	8007238 <UART_SetConfig+0x760>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d038      	beq.n	8007234 <UART_SetConfig+0x75c>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d032      	beq.n	8007230 <UART_SetConfig+0x758>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d02c      	beq.n	800722c <UART_SetConfig+0x754>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d026      	beq.n	8007228 <UART_SetConfig+0x750>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b06      	cmp	r3, #6
 80071e0:	d020      	beq.n	8007224 <UART_SetConfig+0x74c>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b07      	cmp	r3, #7
 80071e8:	d01a      	beq.n	8007220 <UART_SetConfig+0x748>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b08      	cmp	r3, #8
 80071f0:	d014      	beq.n	800721c <UART_SetConfig+0x744>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b09      	cmp	r3, #9
 80071f8:	d00e      	beq.n	8007218 <UART_SetConfig+0x740>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b0a      	cmp	r3, #10
 8007200:	d008      	beq.n	8007214 <UART_SetConfig+0x73c>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b0b      	cmp	r3, #11
 8007208:	d102      	bne.n	8007210 <UART_SetConfig+0x738>
 800720a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800720e:	e016      	b.n	800723e <UART_SetConfig+0x766>
 8007210:	2301      	movs	r3, #1
 8007212:	e014      	b.n	800723e <UART_SetConfig+0x766>
 8007214:	2380      	movs	r3, #128	; 0x80
 8007216:	e012      	b.n	800723e <UART_SetConfig+0x766>
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	e010      	b.n	800723e <UART_SetConfig+0x766>
 800721c:	2320      	movs	r3, #32
 800721e:	e00e      	b.n	800723e <UART_SetConfig+0x766>
 8007220:	2310      	movs	r3, #16
 8007222:	e00c      	b.n	800723e <UART_SetConfig+0x766>
 8007224:	230c      	movs	r3, #12
 8007226:	e00a      	b.n	800723e <UART_SetConfig+0x766>
 8007228:	230a      	movs	r3, #10
 800722a:	e008      	b.n	800723e <UART_SetConfig+0x766>
 800722c:	2308      	movs	r3, #8
 800722e:	e006      	b.n	800723e <UART_SetConfig+0x766>
 8007230:	2306      	movs	r3, #6
 8007232:	e004      	b.n	800723e <UART_SetConfig+0x766>
 8007234:	2304      	movs	r3, #4
 8007236:	e002      	b.n	800723e <UART_SetConfig+0x766>
 8007238:	2302      	movs	r3, #2
 800723a:	e000      	b.n	800723e <UART_SetConfig+0x766>
 800723c:	2301      	movs	r3, #1
 800723e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007244:	e1c5      	b.n	80075d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4618      	mov	r0, r3
 800724c:	f7fd fe94 	bl	8004f78 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	2b00      	cmp	r3, #0
 8007258:	d044      	beq.n	80072e4 <UART_SetConfig+0x80c>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b01      	cmp	r3, #1
 8007260:	d03e      	beq.n	80072e0 <UART_SetConfig+0x808>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b02      	cmp	r3, #2
 8007268:	d038      	beq.n	80072dc <UART_SetConfig+0x804>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b03      	cmp	r3, #3
 8007270:	d032      	beq.n	80072d8 <UART_SetConfig+0x800>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b04      	cmp	r3, #4
 8007278:	d02c      	beq.n	80072d4 <UART_SetConfig+0x7fc>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b05      	cmp	r3, #5
 8007280:	d026      	beq.n	80072d0 <UART_SetConfig+0x7f8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b06      	cmp	r3, #6
 8007288:	d020      	beq.n	80072cc <UART_SetConfig+0x7f4>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b07      	cmp	r3, #7
 8007290:	d01a      	beq.n	80072c8 <UART_SetConfig+0x7f0>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b08      	cmp	r3, #8
 8007298:	d014      	beq.n	80072c4 <UART_SetConfig+0x7ec>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b09      	cmp	r3, #9
 80072a0:	d00e      	beq.n	80072c0 <UART_SetConfig+0x7e8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b0a      	cmp	r3, #10
 80072a8:	d008      	beq.n	80072bc <UART_SetConfig+0x7e4>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b0b      	cmp	r3, #11
 80072b0:	d102      	bne.n	80072b8 <UART_SetConfig+0x7e0>
 80072b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072b6:	e016      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072b8:	2301      	movs	r3, #1
 80072ba:	e014      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072bc:	2380      	movs	r3, #128	; 0x80
 80072be:	e012      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072c0:	2340      	movs	r3, #64	; 0x40
 80072c2:	e010      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072c4:	2320      	movs	r3, #32
 80072c6:	e00e      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072c8:	2310      	movs	r3, #16
 80072ca:	e00c      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072cc:	230c      	movs	r3, #12
 80072ce:	e00a      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072d0:	230a      	movs	r3, #10
 80072d2:	e008      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072d4:	2308      	movs	r3, #8
 80072d6:	e006      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072d8:	2306      	movs	r3, #6
 80072da:	e004      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072dc:	2304      	movs	r3, #4
 80072de:	e002      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e000      	b.n	80072e6 <UART_SetConfig+0x80e>
 80072e4:	2301      	movs	r3, #1
 80072e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072ec:	e171      	b.n	80075d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ee:	4b7a      	ldr	r3, [pc, #488]	; (80074d8 <UART_SetConfig+0xa00>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d054      	beq.n	80073a4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80072fa:	4b77      	ldr	r3, [pc, #476]	; (80074d8 <UART_SetConfig+0xa00>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	f003 0303 	and.w	r3, r3, #3
 8007304:	4a75      	ldr	r2, [pc, #468]	; (80074dc <UART_SetConfig+0xa04>)
 8007306:	40da      	lsrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	d044      	beq.n	800739a <UART_SetConfig+0x8c2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2b01      	cmp	r3, #1
 8007316:	d03e      	beq.n	8007396 <UART_SetConfig+0x8be>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b02      	cmp	r3, #2
 800731e:	d038      	beq.n	8007392 <UART_SetConfig+0x8ba>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	2b03      	cmp	r3, #3
 8007326:	d032      	beq.n	800738e <UART_SetConfig+0x8b6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	2b04      	cmp	r3, #4
 800732e:	d02c      	beq.n	800738a <UART_SetConfig+0x8b2>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	2b05      	cmp	r3, #5
 8007336:	d026      	beq.n	8007386 <UART_SetConfig+0x8ae>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	2b06      	cmp	r3, #6
 800733e:	d020      	beq.n	8007382 <UART_SetConfig+0x8aa>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b07      	cmp	r3, #7
 8007346:	d01a      	beq.n	800737e <UART_SetConfig+0x8a6>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	2b08      	cmp	r3, #8
 800734e:	d014      	beq.n	800737a <UART_SetConfig+0x8a2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b09      	cmp	r3, #9
 8007356:	d00e      	beq.n	8007376 <UART_SetConfig+0x89e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b0a      	cmp	r3, #10
 800735e:	d008      	beq.n	8007372 <UART_SetConfig+0x89a>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b0b      	cmp	r3, #11
 8007366:	d102      	bne.n	800736e <UART_SetConfig+0x896>
 8007368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800736c:	e016      	b.n	800739c <UART_SetConfig+0x8c4>
 800736e:	2301      	movs	r3, #1
 8007370:	e014      	b.n	800739c <UART_SetConfig+0x8c4>
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	e012      	b.n	800739c <UART_SetConfig+0x8c4>
 8007376:	2340      	movs	r3, #64	; 0x40
 8007378:	e010      	b.n	800739c <UART_SetConfig+0x8c4>
 800737a:	2320      	movs	r3, #32
 800737c:	e00e      	b.n	800739c <UART_SetConfig+0x8c4>
 800737e:	2310      	movs	r3, #16
 8007380:	e00c      	b.n	800739c <UART_SetConfig+0x8c4>
 8007382:	230c      	movs	r3, #12
 8007384:	e00a      	b.n	800739c <UART_SetConfig+0x8c4>
 8007386:	230a      	movs	r3, #10
 8007388:	e008      	b.n	800739c <UART_SetConfig+0x8c4>
 800738a:	2308      	movs	r3, #8
 800738c:	e006      	b.n	800739c <UART_SetConfig+0x8c4>
 800738e:	2306      	movs	r3, #6
 8007390:	e004      	b.n	800739c <UART_SetConfig+0x8c4>
 8007392:	2304      	movs	r3, #4
 8007394:	e002      	b.n	800739c <UART_SetConfig+0x8c4>
 8007396:	2302      	movs	r3, #2
 8007398:	e000      	b.n	800739c <UART_SetConfig+0x8c4>
 800739a:	2301      	movs	r3, #1
 800739c:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80073a2:	e116      	b.n	80075d2 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d043      	beq.n	8007434 <UART_SetConfig+0x95c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d03d      	beq.n	8007430 <UART_SetConfig+0x958>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d037      	beq.n	800742c <UART_SetConfig+0x954>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2b03      	cmp	r3, #3
 80073c2:	d031      	beq.n	8007428 <UART_SetConfig+0x950>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b04      	cmp	r3, #4
 80073ca:	d02b      	beq.n	8007424 <UART_SetConfig+0x94c>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	d025      	beq.n	8007420 <UART_SetConfig+0x948>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b06      	cmp	r3, #6
 80073da:	d01f      	beq.n	800741c <UART_SetConfig+0x944>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b07      	cmp	r3, #7
 80073e2:	d019      	beq.n	8007418 <UART_SetConfig+0x940>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d013      	beq.n	8007414 <UART_SetConfig+0x93c>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b09      	cmp	r3, #9
 80073f2:	d00d      	beq.n	8007410 <UART_SetConfig+0x938>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b0a      	cmp	r3, #10
 80073fa:	d007      	beq.n	800740c <UART_SetConfig+0x934>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b0b      	cmp	r3, #11
 8007402:	d101      	bne.n	8007408 <UART_SetConfig+0x930>
 8007404:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <UART_SetConfig+0xa08>)
 8007406:	e016      	b.n	8007436 <UART_SetConfig+0x95e>
 8007408:	4b34      	ldr	r3, [pc, #208]	; (80074dc <UART_SetConfig+0xa04>)
 800740a:	e014      	b.n	8007436 <UART_SetConfig+0x95e>
 800740c:	4b35      	ldr	r3, [pc, #212]	; (80074e4 <UART_SetConfig+0xa0c>)
 800740e:	e012      	b.n	8007436 <UART_SetConfig+0x95e>
 8007410:	4b35      	ldr	r3, [pc, #212]	; (80074e8 <UART_SetConfig+0xa10>)
 8007412:	e010      	b.n	8007436 <UART_SetConfig+0x95e>
 8007414:	4b35      	ldr	r3, [pc, #212]	; (80074ec <UART_SetConfig+0xa14>)
 8007416:	e00e      	b.n	8007436 <UART_SetConfig+0x95e>
 8007418:	4b35      	ldr	r3, [pc, #212]	; (80074f0 <UART_SetConfig+0xa18>)
 800741a:	e00c      	b.n	8007436 <UART_SetConfig+0x95e>
 800741c:	4b35      	ldr	r3, [pc, #212]	; (80074f4 <UART_SetConfig+0xa1c>)
 800741e:	e00a      	b.n	8007436 <UART_SetConfig+0x95e>
 8007420:	4b35      	ldr	r3, [pc, #212]	; (80074f8 <UART_SetConfig+0xa20>)
 8007422:	e008      	b.n	8007436 <UART_SetConfig+0x95e>
 8007424:	4b35      	ldr	r3, [pc, #212]	; (80074fc <UART_SetConfig+0xa24>)
 8007426:	e006      	b.n	8007436 <UART_SetConfig+0x95e>
 8007428:	4b35      	ldr	r3, [pc, #212]	; (8007500 <UART_SetConfig+0xa28>)
 800742a:	e004      	b.n	8007436 <UART_SetConfig+0x95e>
 800742c:	4b35      	ldr	r3, [pc, #212]	; (8007504 <UART_SetConfig+0xa2c>)
 800742e:	e002      	b.n	8007436 <UART_SetConfig+0x95e>
 8007430:	4b35      	ldr	r3, [pc, #212]	; (8007508 <UART_SetConfig+0xa30>)
 8007432:	e000      	b.n	8007436 <UART_SetConfig+0x95e>
 8007434:	4b29      	ldr	r3, [pc, #164]	; (80074dc <UART_SetConfig+0xa04>)
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007438:	e0cb      	b.n	80075d2 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	d046      	beq.n	80074d0 <UART_SetConfig+0x9f8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b01      	cmp	r3, #1
 8007448:	d040      	beq.n	80074cc <UART_SetConfig+0x9f4>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b02      	cmp	r3, #2
 8007450:	d03a      	beq.n	80074c8 <UART_SetConfig+0x9f0>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b03      	cmp	r3, #3
 8007458:	d034      	beq.n	80074c4 <UART_SetConfig+0x9ec>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b04      	cmp	r3, #4
 8007460:	d02e      	beq.n	80074c0 <UART_SetConfig+0x9e8>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b05      	cmp	r3, #5
 8007468:	d028      	beq.n	80074bc <UART_SetConfig+0x9e4>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b06      	cmp	r3, #6
 8007470:	d022      	beq.n	80074b8 <UART_SetConfig+0x9e0>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b07      	cmp	r3, #7
 8007478:	d01c      	beq.n	80074b4 <UART_SetConfig+0x9dc>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b08      	cmp	r3, #8
 8007480:	d016      	beq.n	80074b0 <UART_SetConfig+0x9d8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b09      	cmp	r3, #9
 8007488:	d00f      	beq.n	80074aa <UART_SetConfig+0x9d2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b0a      	cmp	r3, #10
 8007490:	d008      	beq.n	80074a4 <UART_SetConfig+0x9cc>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b0b      	cmp	r3, #11
 8007498:	d102      	bne.n	80074a0 <UART_SetConfig+0x9c8>
 800749a:	f643 5309 	movw	r3, #15625	; 0x3d09
 800749e:	e018      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <UART_SetConfig+0xa18>)
 80074a2:	e016      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074a4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80074a8:	e013      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074aa:	f24f 4324 	movw	r3, #62500	; 0xf424
 80074ae:	e010      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074b0:	4b16      	ldr	r3, [pc, #88]	; (800750c <UART_SetConfig+0xa34>)
 80074b2:	e00e      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <UART_SetConfig+0xa08>)
 80074b6:	e00c      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074b8:	4b15      	ldr	r3, [pc, #84]	; (8007510 <UART_SetConfig+0xa38>)
 80074ba:	e00a      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074bc:	4b15      	ldr	r3, [pc, #84]	; (8007514 <UART_SetConfig+0xa3c>)
 80074be:	e008      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <UART_SetConfig+0xa0c>)
 80074c2:	e006      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074c4:	4b14      	ldr	r3, [pc, #80]	; (8007518 <UART_SetConfig+0xa40>)
 80074c6:	e004      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <UART_SetConfig+0xa10>)
 80074ca:	e002      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074cc:	4b07      	ldr	r3, [pc, #28]	; (80074ec <UART_SetConfig+0xa14>)
 80074ce:	e000      	b.n	80074d2 <UART_SetConfig+0x9fa>
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <UART_SetConfig+0xa18>)
 80074d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074d4:	e07d      	b.n	80075d2 <UART_SetConfig+0xafa>
 80074d6:	bf00      	nop
 80074d8:	58024400 	.word	0x58024400
 80074dc:	03d09000 	.word	0x03d09000
 80074e0:	0003d090 	.word	0x0003d090
 80074e4:	0007a120 	.word	0x0007a120
 80074e8:	000f4240 	.word	0x000f4240
 80074ec:	001e8480 	.word	0x001e8480
 80074f0:	003d0900 	.word	0x003d0900
 80074f4:	00516155 	.word	0x00516155
 80074f8:	0061a800 	.word	0x0061a800
 80074fc:	007a1200 	.word	0x007a1200
 8007500:	00a2c2aa 	.word	0x00a2c2aa
 8007504:	00f42400 	.word	0x00f42400
 8007508:	01e84800 	.word	0x01e84800
 800750c:	0001e848 	.word	0x0001e848
 8007510:	00051615 	.word	0x00051615
 8007514:	00061a80 	.word	0x00061a80
 8007518:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d04e      	beq.n	80075c2 <UART_SetConfig+0xaea>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	2b01      	cmp	r3, #1
 800752a:	d047      	beq.n	80075bc <UART_SetConfig+0xae4>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	2b02      	cmp	r3, #2
 8007532:	d040      	beq.n	80075b6 <UART_SetConfig+0xade>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	2b03      	cmp	r3, #3
 800753a:	d039      	beq.n	80075b0 <UART_SetConfig+0xad8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	2b04      	cmp	r3, #4
 8007542:	d032      	beq.n	80075aa <UART_SetConfig+0xad2>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	2b05      	cmp	r3, #5
 800754a:	d02b      	beq.n	80075a4 <UART_SetConfig+0xacc>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b06      	cmp	r3, #6
 8007552:	d024      	beq.n	800759e <UART_SetConfig+0xac6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b07      	cmp	r3, #7
 800755a:	d01d      	beq.n	8007598 <UART_SetConfig+0xac0>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2b08      	cmp	r3, #8
 8007562:	d016      	beq.n	8007592 <UART_SetConfig+0xaba>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	2b09      	cmp	r3, #9
 800756a:	d00f      	beq.n	800758c <UART_SetConfig+0xab4>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2b0a      	cmp	r3, #10
 8007572:	d008      	beq.n	8007586 <UART_SetConfig+0xaae>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2b0b      	cmp	r3, #11
 800757a:	d101      	bne.n	8007580 <UART_SetConfig+0xaa8>
 800757c:	2380      	movs	r3, #128	; 0x80
 800757e:	e022      	b.n	80075c6 <UART_SetConfig+0xaee>
 8007580:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007584:	e01f      	b.n	80075c6 <UART_SetConfig+0xaee>
 8007586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800758a:	e01c      	b.n	80075c6 <UART_SetConfig+0xaee>
 800758c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007590:	e019      	b.n	80075c6 <UART_SetConfig+0xaee>
 8007592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007596:	e016      	b.n	80075c6 <UART_SetConfig+0xaee>
 8007598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800759c:	e013      	b.n	80075c6 <UART_SetConfig+0xaee>
 800759e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80075a2:	e010      	b.n	80075c6 <UART_SetConfig+0xaee>
 80075a4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80075a8:	e00d      	b.n	80075c6 <UART_SetConfig+0xaee>
 80075aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075ae:	e00a      	b.n	80075c6 <UART_SetConfig+0xaee>
 80075b0:	f241 5355 	movw	r3, #5461	; 0x1555
 80075b4:	e007      	b.n	80075c6 <UART_SetConfig+0xaee>
 80075b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075ba:	e004      	b.n	80075c6 <UART_SetConfig+0xaee>
 80075bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075c0:	e001      	b.n	80075c6 <UART_SetConfig+0xaee>
 80075c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075c8:	e003      	b.n	80075d2 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80075d0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80075d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f001 83e8 	beq.w	8008daa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	4613      	mov	r3, r2
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	4413      	add	r3, r2
 80075e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d305      	bcc.n	80075f6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d904      	bls.n	8007600 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075fc:	f001 bbd5 	b.w	8008daa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007600:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007604:	2b08      	cmp	r3, #8
 8007606:	f000 8154 	beq.w	80078b2 <UART_SetConfig+0xdda>
 800760a:	2b08      	cmp	r3, #8
 800760c:	dc06      	bgt.n	800761c <UART_SetConfig+0xb44>
 800760e:	2b02      	cmp	r3, #2
 8007610:	d00f      	beq.n	8007632 <UART_SetConfig+0xb5a>
 8007612:	2b04      	cmp	r3, #4
 8007614:	f000 80ac 	beq.w	8007770 <UART_SetConfig+0xc98>
 8007618:	f000 bc30 	b.w	8007e7c <UART_SetConfig+0x13a4>
 800761c:	2b20      	cmp	r3, #32
 800761e:	f000 832d 	beq.w	8007c7c <UART_SetConfig+0x11a4>
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	f000 83a5 	beq.w	8007d72 <UART_SetConfig+0x129a>
 8007628:	2b10      	cmp	r3, #16
 800762a:	f000 81e3 	beq.w	80079f4 <UART_SetConfig+0xf1c>
 800762e:	f000 bc25 	b.w	8007e7c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007632:	f7fd fb3f 	bl	8004cb4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007636:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	4618      	mov	r0, r3
 800763c:	f04f 0100 	mov.w	r1, #0
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2b00      	cmp	r3, #0
 8007646:	d067      	beq.n	8007718 <UART_SetConfig+0xc40>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b01      	cmp	r3, #1
 800764e:	d05e      	beq.n	800770e <UART_SetConfig+0xc36>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b02      	cmp	r3, #2
 8007656:	d055      	beq.n	8007704 <UART_SetConfig+0xc2c>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b03      	cmp	r3, #3
 800765e:	d04c      	beq.n	80076fa <UART_SetConfig+0xc22>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b04      	cmp	r3, #4
 8007666:	d043      	beq.n	80076f0 <UART_SetConfig+0xc18>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b05      	cmp	r3, #5
 800766e:	d03a      	beq.n	80076e6 <UART_SetConfig+0xc0e>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b06      	cmp	r3, #6
 8007676:	d031      	beq.n	80076dc <UART_SetConfig+0xc04>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b07      	cmp	r3, #7
 800767e:	d028      	beq.n	80076d2 <UART_SetConfig+0xbfa>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b08      	cmp	r3, #8
 8007686:	d01f      	beq.n	80076c8 <UART_SetConfig+0xbf0>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b09      	cmp	r3, #9
 800768e:	d016      	beq.n	80076be <UART_SetConfig+0xbe6>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	2b0a      	cmp	r3, #10
 8007696:	d00d      	beq.n	80076b4 <UART_SetConfig+0xbdc>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b0b      	cmp	r3, #11
 800769e:	d104      	bne.n	80076aa <UART_SetConfig+0xbd2>
 80076a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076a4:	f04f 0400 	mov.w	r4, #0
 80076a8:	e03a      	b.n	8007720 <UART_SetConfig+0xc48>
 80076aa:	f04f 0301 	mov.w	r3, #1
 80076ae:	f04f 0400 	mov.w	r4, #0
 80076b2:	e035      	b.n	8007720 <UART_SetConfig+0xc48>
 80076b4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076b8:	f04f 0400 	mov.w	r4, #0
 80076bc:	e030      	b.n	8007720 <UART_SetConfig+0xc48>
 80076be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80076c2:	f04f 0400 	mov.w	r4, #0
 80076c6:	e02b      	b.n	8007720 <UART_SetConfig+0xc48>
 80076c8:	f04f 0320 	mov.w	r3, #32
 80076cc:	f04f 0400 	mov.w	r4, #0
 80076d0:	e026      	b.n	8007720 <UART_SetConfig+0xc48>
 80076d2:	f04f 0310 	mov.w	r3, #16
 80076d6:	f04f 0400 	mov.w	r4, #0
 80076da:	e021      	b.n	8007720 <UART_SetConfig+0xc48>
 80076dc:	f04f 030c 	mov.w	r3, #12
 80076e0:	f04f 0400 	mov.w	r4, #0
 80076e4:	e01c      	b.n	8007720 <UART_SetConfig+0xc48>
 80076e6:	f04f 030a 	mov.w	r3, #10
 80076ea:	f04f 0400 	mov.w	r4, #0
 80076ee:	e017      	b.n	8007720 <UART_SetConfig+0xc48>
 80076f0:	f04f 0308 	mov.w	r3, #8
 80076f4:	f04f 0400 	mov.w	r4, #0
 80076f8:	e012      	b.n	8007720 <UART_SetConfig+0xc48>
 80076fa:	f04f 0306 	mov.w	r3, #6
 80076fe:	f04f 0400 	mov.w	r4, #0
 8007702:	e00d      	b.n	8007720 <UART_SetConfig+0xc48>
 8007704:	f04f 0304 	mov.w	r3, #4
 8007708:	f04f 0400 	mov.w	r4, #0
 800770c:	e008      	b.n	8007720 <UART_SetConfig+0xc48>
 800770e:	f04f 0302 	mov.w	r3, #2
 8007712:	f04f 0400 	mov.w	r4, #0
 8007716:	e003      	b.n	8007720 <UART_SetConfig+0xc48>
 8007718:	f04f 0301 	mov.w	r3, #1
 800771c:	f04f 0400 	mov.w	r4, #0
 8007720:	461a      	mov	r2, r3
 8007722:	4623      	mov	r3, r4
 8007724:	f7f8 fdd8 	bl	80002d8 <__aeabi_uldivmod>
 8007728:	4603      	mov	r3, r0
 800772a:	460c      	mov	r4, r1
 800772c:	4619      	mov	r1, r3
 800772e:	4622      	mov	r2, r4
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	f04f 0400 	mov.w	r4, #0
 8007738:	0214      	lsls	r4, r2, #8
 800773a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800773e:	020b      	lsls	r3, r1, #8
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	6852      	ldr	r2, [r2, #4]
 8007744:	0852      	lsrs	r2, r2, #1
 8007746:	4611      	mov	r1, r2
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	eb13 0b01 	adds.w	fp, r3, r1
 8007750:	eb44 0c02 	adc.w	ip, r4, r2
 8007754:	4658      	mov	r0, fp
 8007756:	4661      	mov	r1, ip
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f04f 0400 	mov.w	r4, #0
 8007760:	461a      	mov	r2, r3
 8007762:	4623      	mov	r3, r4
 8007764:	f7f8 fdb8 	bl	80002d8 <__aeabi_uldivmod>
 8007768:	4603      	mov	r3, r0
 800776a:	460c      	mov	r4, r1
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800776e:	e389      	b.n	8007e84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007770:	f107 0318 	add.w	r3, r7, #24
 8007774:	4618      	mov	r0, r3
 8007776:	f7fd fab3 	bl	8004ce0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4618      	mov	r0, r3
 800777e:	f04f 0100 	mov.w	r1, #0
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d067      	beq.n	800785a <UART_SetConfig+0xd82>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b01      	cmp	r3, #1
 8007790:	d05e      	beq.n	8007850 <UART_SetConfig+0xd78>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b02      	cmp	r3, #2
 8007798:	d055      	beq.n	8007846 <UART_SetConfig+0xd6e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d04c      	beq.n	800783c <UART_SetConfig+0xd64>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d043      	beq.n	8007832 <UART_SetConfig+0xd5a>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d03a      	beq.n	8007828 <UART_SetConfig+0xd50>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	2b06      	cmp	r3, #6
 80077b8:	d031      	beq.n	800781e <UART_SetConfig+0xd46>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b07      	cmp	r3, #7
 80077c0:	d028      	beq.n	8007814 <UART_SetConfig+0xd3c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d01f      	beq.n	800780a <UART_SetConfig+0xd32>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b09      	cmp	r3, #9
 80077d0:	d016      	beq.n	8007800 <UART_SetConfig+0xd28>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b0a      	cmp	r3, #10
 80077d8:	d00d      	beq.n	80077f6 <UART_SetConfig+0xd1e>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b0b      	cmp	r3, #11
 80077e0:	d104      	bne.n	80077ec <UART_SetConfig+0xd14>
 80077e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	e03a      	b.n	8007862 <UART_SetConfig+0xd8a>
 80077ec:	f04f 0301 	mov.w	r3, #1
 80077f0:	f04f 0400 	mov.w	r4, #0
 80077f4:	e035      	b.n	8007862 <UART_SetConfig+0xd8a>
 80077f6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80077fa:	f04f 0400 	mov.w	r4, #0
 80077fe:	e030      	b.n	8007862 <UART_SetConfig+0xd8a>
 8007800:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007804:	f04f 0400 	mov.w	r4, #0
 8007808:	e02b      	b.n	8007862 <UART_SetConfig+0xd8a>
 800780a:	f04f 0320 	mov.w	r3, #32
 800780e:	f04f 0400 	mov.w	r4, #0
 8007812:	e026      	b.n	8007862 <UART_SetConfig+0xd8a>
 8007814:	f04f 0310 	mov.w	r3, #16
 8007818:	f04f 0400 	mov.w	r4, #0
 800781c:	e021      	b.n	8007862 <UART_SetConfig+0xd8a>
 800781e:	f04f 030c 	mov.w	r3, #12
 8007822:	f04f 0400 	mov.w	r4, #0
 8007826:	e01c      	b.n	8007862 <UART_SetConfig+0xd8a>
 8007828:	f04f 030a 	mov.w	r3, #10
 800782c:	f04f 0400 	mov.w	r4, #0
 8007830:	e017      	b.n	8007862 <UART_SetConfig+0xd8a>
 8007832:	f04f 0308 	mov.w	r3, #8
 8007836:	f04f 0400 	mov.w	r4, #0
 800783a:	e012      	b.n	8007862 <UART_SetConfig+0xd8a>
 800783c:	f04f 0306 	mov.w	r3, #6
 8007840:	f04f 0400 	mov.w	r4, #0
 8007844:	e00d      	b.n	8007862 <UART_SetConfig+0xd8a>
 8007846:	f04f 0304 	mov.w	r3, #4
 800784a:	f04f 0400 	mov.w	r4, #0
 800784e:	e008      	b.n	8007862 <UART_SetConfig+0xd8a>
 8007850:	f04f 0302 	mov.w	r3, #2
 8007854:	f04f 0400 	mov.w	r4, #0
 8007858:	e003      	b.n	8007862 <UART_SetConfig+0xd8a>
 800785a:	f04f 0301 	mov.w	r3, #1
 800785e:	f04f 0400 	mov.w	r4, #0
 8007862:	461a      	mov	r2, r3
 8007864:	4623      	mov	r3, r4
 8007866:	f7f8 fd37 	bl	80002d8 <__aeabi_uldivmod>
 800786a:	4603      	mov	r3, r0
 800786c:	460c      	mov	r4, r1
 800786e:	4619      	mov	r1, r3
 8007870:	4622      	mov	r2, r4
 8007872:	f04f 0300 	mov.w	r3, #0
 8007876:	f04f 0400 	mov.w	r4, #0
 800787a:	0214      	lsls	r4, r2, #8
 800787c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007880:	020b      	lsls	r3, r1, #8
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	6852      	ldr	r2, [r2, #4]
 8007886:	0852      	lsrs	r2, r2, #1
 8007888:	4611      	mov	r1, r2
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	eb13 0b01 	adds.w	fp, r3, r1
 8007892:	eb44 0c02 	adc.w	ip, r4, r2
 8007896:	4658      	mov	r0, fp
 8007898:	4661      	mov	r1, ip
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f04f 0400 	mov.w	r4, #0
 80078a2:	461a      	mov	r2, r3
 80078a4:	4623      	mov	r3, r4
 80078a6:	f7f8 fd17 	bl	80002d8 <__aeabi_uldivmod>
 80078aa:	4603      	mov	r3, r0
 80078ac:	460c      	mov	r4, r1
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078b0:	e2e8      	b.n	8007e84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078b2:	f107 030c 	add.w	r3, r7, #12
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fd fb5e 	bl	8004f78 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	4618      	mov	r0, r3
 80078c0:	f04f 0100 	mov.w	r1, #0
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d067      	beq.n	800799c <UART_SetConfig+0xec4>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d05e      	beq.n	8007992 <UART_SetConfig+0xeba>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d055      	beq.n	8007988 <UART_SetConfig+0xeb0>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d04c      	beq.n	800797e <UART_SetConfig+0xea6>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b04      	cmp	r3, #4
 80078ea:	d043      	beq.n	8007974 <UART_SetConfig+0xe9c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b05      	cmp	r3, #5
 80078f2:	d03a      	beq.n	800796a <UART_SetConfig+0xe92>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b06      	cmp	r3, #6
 80078fa:	d031      	beq.n	8007960 <UART_SetConfig+0xe88>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b07      	cmp	r3, #7
 8007902:	d028      	beq.n	8007956 <UART_SetConfig+0xe7e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b08      	cmp	r3, #8
 800790a:	d01f      	beq.n	800794c <UART_SetConfig+0xe74>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b09      	cmp	r3, #9
 8007912:	d016      	beq.n	8007942 <UART_SetConfig+0xe6a>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b0a      	cmp	r3, #10
 800791a:	d00d      	beq.n	8007938 <UART_SetConfig+0xe60>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b0b      	cmp	r3, #11
 8007922:	d104      	bne.n	800792e <UART_SetConfig+0xe56>
 8007924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007928:	f04f 0400 	mov.w	r4, #0
 800792c:	e03a      	b.n	80079a4 <UART_SetConfig+0xecc>
 800792e:	f04f 0301 	mov.w	r3, #1
 8007932:	f04f 0400 	mov.w	r4, #0
 8007936:	e035      	b.n	80079a4 <UART_SetConfig+0xecc>
 8007938:	f04f 0380 	mov.w	r3, #128	; 0x80
 800793c:	f04f 0400 	mov.w	r4, #0
 8007940:	e030      	b.n	80079a4 <UART_SetConfig+0xecc>
 8007942:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007946:	f04f 0400 	mov.w	r4, #0
 800794a:	e02b      	b.n	80079a4 <UART_SetConfig+0xecc>
 800794c:	f04f 0320 	mov.w	r3, #32
 8007950:	f04f 0400 	mov.w	r4, #0
 8007954:	e026      	b.n	80079a4 <UART_SetConfig+0xecc>
 8007956:	f04f 0310 	mov.w	r3, #16
 800795a:	f04f 0400 	mov.w	r4, #0
 800795e:	e021      	b.n	80079a4 <UART_SetConfig+0xecc>
 8007960:	f04f 030c 	mov.w	r3, #12
 8007964:	f04f 0400 	mov.w	r4, #0
 8007968:	e01c      	b.n	80079a4 <UART_SetConfig+0xecc>
 800796a:	f04f 030a 	mov.w	r3, #10
 800796e:	f04f 0400 	mov.w	r4, #0
 8007972:	e017      	b.n	80079a4 <UART_SetConfig+0xecc>
 8007974:	f04f 0308 	mov.w	r3, #8
 8007978:	f04f 0400 	mov.w	r4, #0
 800797c:	e012      	b.n	80079a4 <UART_SetConfig+0xecc>
 800797e:	f04f 0306 	mov.w	r3, #6
 8007982:	f04f 0400 	mov.w	r4, #0
 8007986:	e00d      	b.n	80079a4 <UART_SetConfig+0xecc>
 8007988:	f04f 0304 	mov.w	r3, #4
 800798c:	f04f 0400 	mov.w	r4, #0
 8007990:	e008      	b.n	80079a4 <UART_SetConfig+0xecc>
 8007992:	f04f 0302 	mov.w	r3, #2
 8007996:	f04f 0400 	mov.w	r4, #0
 800799a:	e003      	b.n	80079a4 <UART_SetConfig+0xecc>
 800799c:	f04f 0301 	mov.w	r3, #1
 80079a0:	f04f 0400 	mov.w	r4, #0
 80079a4:	461a      	mov	r2, r3
 80079a6:	4623      	mov	r3, r4
 80079a8:	f7f8 fc96 	bl	80002d8 <__aeabi_uldivmod>
 80079ac:	4603      	mov	r3, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	4619      	mov	r1, r3
 80079b2:	4622      	mov	r2, r4
 80079b4:	f04f 0300 	mov.w	r3, #0
 80079b8:	f04f 0400 	mov.w	r4, #0
 80079bc:	0214      	lsls	r4, r2, #8
 80079be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079c2:	020b      	lsls	r3, r1, #8
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6852      	ldr	r2, [r2, #4]
 80079c8:	0852      	lsrs	r2, r2, #1
 80079ca:	4611      	mov	r1, r2
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	eb13 0b01 	adds.w	fp, r3, r1
 80079d4:	eb44 0c02 	adc.w	ip, r4, r2
 80079d8:	4658      	mov	r0, fp
 80079da:	4661      	mov	r1, ip
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f04f 0400 	mov.w	r4, #0
 80079e4:	461a      	mov	r2, r3
 80079e6:	4623      	mov	r3, r4
 80079e8:	f7f8 fc76 	bl	80002d8 <__aeabi_uldivmod>
 80079ec:	4603      	mov	r3, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079f2:	e247      	b.n	8007e84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079f4:	4b96      	ldr	r3, [pc, #600]	; (8007c50 <UART_SetConfig+0x1178>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 80a3 	beq.w	8007b48 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a02:	4b93      	ldr	r3, [pc, #588]	; (8007c50 <UART_SetConfig+0x1178>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	08db      	lsrs	r3, r3, #3
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	4a91      	ldr	r2, [pc, #580]	; (8007c54 <UART_SetConfig+0x117c>)
 8007a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a12:	4618      	mov	r0, r3
 8007a14:	f04f 0100 	mov.w	r1, #0
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d067      	beq.n	8007af0 <UART_SetConfig+0x1018>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d05e      	beq.n	8007ae6 <UART_SetConfig+0x100e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d055      	beq.n	8007adc <UART_SetConfig+0x1004>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	2b03      	cmp	r3, #3
 8007a36:	d04c      	beq.n	8007ad2 <UART_SetConfig+0xffa>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d043      	beq.n	8007ac8 <UART_SetConfig+0xff0>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	d03a      	beq.n	8007abe <UART_SetConfig+0xfe6>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	2b06      	cmp	r3, #6
 8007a4e:	d031      	beq.n	8007ab4 <UART_SetConfig+0xfdc>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b07      	cmp	r3, #7
 8007a56:	d028      	beq.n	8007aaa <UART_SetConfig+0xfd2>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d01f      	beq.n	8007aa0 <UART_SetConfig+0xfc8>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d016      	beq.n	8007a96 <UART_SetConfig+0xfbe>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b0a      	cmp	r3, #10
 8007a6e:	d00d      	beq.n	8007a8c <UART_SetConfig+0xfb4>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2b0b      	cmp	r3, #11
 8007a76:	d104      	bne.n	8007a82 <UART_SetConfig+0xfaa>
 8007a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a7c:	f04f 0400 	mov.w	r4, #0
 8007a80:	e03a      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007a82:	f04f 0301 	mov.w	r3, #1
 8007a86:	f04f 0400 	mov.w	r4, #0
 8007a8a:	e035      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007a8c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007a90:	f04f 0400 	mov.w	r4, #0
 8007a94:	e030      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007a96:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007a9a:	f04f 0400 	mov.w	r4, #0
 8007a9e:	e02b      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007aa0:	f04f 0320 	mov.w	r3, #32
 8007aa4:	f04f 0400 	mov.w	r4, #0
 8007aa8:	e026      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007aaa:	f04f 0310 	mov.w	r3, #16
 8007aae:	f04f 0400 	mov.w	r4, #0
 8007ab2:	e021      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007ab4:	f04f 030c 	mov.w	r3, #12
 8007ab8:	f04f 0400 	mov.w	r4, #0
 8007abc:	e01c      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007abe:	f04f 030a 	mov.w	r3, #10
 8007ac2:	f04f 0400 	mov.w	r4, #0
 8007ac6:	e017      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007ac8:	f04f 0308 	mov.w	r3, #8
 8007acc:	f04f 0400 	mov.w	r4, #0
 8007ad0:	e012      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007ad2:	f04f 0306 	mov.w	r3, #6
 8007ad6:	f04f 0400 	mov.w	r4, #0
 8007ada:	e00d      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007adc:	f04f 0304 	mov.w	r3, #4
 8007ae0:	f04f 0400 	mov.w	r4, #0
 8007ae4:	e008      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007ae6:	f04f 0302 	mov.w	r3, #2
 8007aea:	f04f 0400 	mov.w	r4, #0
 8007aee:	e003      	b.n	8007af8 <UART_SetConfig+0x1020>
 8007af0:	f04f 0301 	mov.w	r3, #1
 8007af4:	f04f 0400 	mov.w	r4, #0
 8007af8:	461a      	mov	r2, r3
 8007afa:	4623      	mov	r3, r4
 8007afc:	f7f8 fbec 	bl	80002d8 <__aeabi_uldivmod>
 8007b00:	4603      	mov	r3, r0
 8007b02:	460c      	mov	r4, r1
 8007b04:	4619      	mov	r1, r3
 8007b06:	4622      	mov	r2, r4
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	f04f 0400 	mov.w	r4, #0
 8007b10:	0214      	lsls	r4, r2, #8
 8007b12:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007b16:	020b      	lsls	r3, r1, #8
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6852      	ldr	r2, [r2, #4]
 8007b1c:	0852      	lsrs	r2, r2, #1
 8007b1e:	4611      	mov	r1, r2
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	eb13 0b01 	adds.w	fp, r3, r1
 8007b28:	eb44 0c02 	adc.w	ip, r4, r2
 8007b2c:	4658      	mov	r0, fp
 8007b2e:	4661      	mov	r1, ip
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	f04f 0400 	mov.w	r4, #0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4623      	mov	r3, r4
 8007b3c:	f7f8 fbcc 	bl	80002d8 <__aeabi_uldivmod>
 8007b40:	4603      	mov	r3, r0
 8007b42:	460c      	mov	r4, r1
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007b46:	e19d      	b.n	8007e84 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d05b      	beq.n	8007c08 <UART_SetConfig+0x1130>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d053      	beq.n	8007c00 <UART_SetConfig+0x1128>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d04b      	beq.n	8007bf8 <UART_SetConfig+0x1120>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d043      	beq.n	8007bf0 <UART_SetConfig+0x1118>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d03b      	beq.n	8007be8 <UART_SetConfig+0x1110>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	2b05      	cmp	r3, #5
 8007b76:	d033      	beq.n	8007be0 <UART_SetConfig+0x1108>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b06      	cmp	r3, #6
 8007b7e:	d02b      	beq.n	8007bd8 <UART_SetConfig+0x1100>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2b07      	cmp	r3, #7
 8007b86:	d023      	beq.n	8007bd0 <UART_SetConfig+0x10f8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d01b      	beq.n	8007bc8 <UART_SetConfig+0x10f0>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b09      	cmp	r3, #9
 8007b96:	d013      	beq.n	8007bc0 <UART_SetConfig+0x10e8>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b0a      	cmp	r3, #10
 8007b9e:	d00b      	beq.n	8007bb8 <UART_SetConfig+0x10e0>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	2b0b      	cmp	r3, #11
 8007ba6:	d103      	bne.n	8007bb0 <UART_SetConfig+0x10d8>
 8007ba8:	4b2a      	ldr	r3, [pc, #168]	; (8007c54 <UART_SetConfig+0x117c>)
 8007baa:	f04f 0400 	mov.w	r4, #0
 8007bae:	e02e      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bb0:	4b29      	ldr	r3, [pc, #164]	; (8007c58 <UART_SetConfig+0x1180>)
 8007bb2:	f04f 0403 	mov.w	r4, #3
 8007bb6:	e02a      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bb8:	4b28      	ldr	r3, [pc, #160]	; (8007c5c <UART_SetConfig+0x1184>)
 8007bba:	f04f 0400 	mov.w	r4, #0
 8007bbe:	e026      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bc0:	4b27      	ldr	r3, [pc, #156]	; (8007c60 <UART_SetConfig+0x1188>)
 8007bc2:	f04f 0400 	mov.w	r4, #0
 8007bc6:	e022      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bc8:	4b26      	ldr	r3, [pc, #152]	; (8007c64 <UART_SetConfig+0x118c>)
 8007bca:	f04f 0400 	mov.w	r4, #0
 8007bce:	e01e      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bd0:	4b25      	ldr	r3, [pc, #148]	; (8007c68 <UART_SetConfig+0x1190>)
 8007bd2:	f04f 0400 	mov.w	r4, #0
 8007bd6:	e01a      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bd8:	a419      	add	r4, pc, #100	; (adr r4, 8007c40 <UART_SetConfig+0x1168>)
 8007bda:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007bde:	e016      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007be0:	4b22      	ldr	r3, [pc, #136]	; (8007c6c <UART_SetConfig+0x1194>)
 8007be2:	f04f 0400 	mov.w	r4, #0
 8007be6:	e012      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007be8:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <UART_SetConfig+0x1198>)
 8007bea:	f04f 0400 	mov.w	r4, #0
 8007bee:	e00e      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bf0:	a415      	add	r4, pc, #84	; (adr r4, 8007c48 <UART_SetConfig+0x1170>)
 8007bf2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007bf6:	e00a      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007bf8:	4b1e      	ldr	r3, [pc, #120]	; (8007c74 <UART_SetConfig+0x119c>)
 8007bfa:	f04f 0400 	mov.w	r4, #0
 8007bfe:	e006      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007c00:	4b1d      	ldr	r3, [pc, #116]	; (8007c78 <UART_SetConfig+0x11a0>)
 8007c02:	f04f 0401 	mov.w	r4, #1
 8007c06:	e002      	b.n	8007c0e <UART_SetConfig+0x1136>
 8007c08:	4b13      	ldr	r3, [pc, #76]	; (8007c58 <UART_SetConfig+0x1180>)
 8007c0a:	f04f 0403 	mov.w	r4, #3
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6852      	ldr	r2, [r2, #4]
 8007c12:	0852      	lsrs	r2, r2, #1
 8007c14:	4611      	mov	r1, r2
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	eb13 0b01 	adds.w	fp, r3, r1
 8007c1e:	eb44 0c02 	adc.w	ip, r4, r2
 8007c22:	4658      	mov	r0, fp
 8007c24:	4661      	mov	r1, ip
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f04f 0400 	mov.w	r4, #0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4623      	mov	r3, r4
 8007c32:	f7f8 fb51 	bl	80002d8 <__aeabi_uldivmod>
 8007c36:	4603      	mov	r3, r0
 8007c38:	460c      	mov	r4, r1
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c3c:	e122      	b.n	8007e84 <UART_SetConfig+0x13ac>
 8007c3e:	bf00      	nop
 8007c40:	51615500 	.word	0x51615500
 8007c44:	00000000 	.word	0x00000000
 8007c48:	a2c2aa00 	.word	0xa2c2aa00
 8007c4c:	00000000 	.word	0x00000000
 8007c50:	58024400 	.word	0x58024400
 8007c54:	03d09000 	.word	0x03d09000
 8007c58:	d0900000 	.word	0xd0900000
 8007c5c:	07a12000 	.word	0x07a12000
 8007c60:	0f424000 	.word	0x0f424000
 8007c64:	1e848000 	.word	0x1e848000
 8007c68:	3d090000 	.word	0x3d090000
 8007c6c:	61a80000 	.word	0x61a80000
 8007c70:	7a120000 	.word	0x7a120000
 8007c74:	f4240000 	.word	0xf4240000
 8007c78:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d05b      	beq.n	8007d3c <UART_SetConfig+0x1264>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d053      	beq.n	8007d34 <UART_SetConfig+0x125c>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d04b      	beq.n	8007d2c <UART_SetConfig+0x1254>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d043      	beq.n	8007d24 <UART_SetConfig+0x124c>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d03b      	beq.n	8007d1c <UART_SetConfig+0x1244>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	2b05      	cmp	r3, #5
 8007caa:	d033      	beq.n	8007d14 <UART_SetConfig+0x123c>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	2b06      	cmp	r3, #6
 8007cb2:	d02b      	beq.n	8007d0c <UART_SetConfig+0x1234>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b07      	cmp	r3, #7
 8007cba:	d023      	beq.n	8007d04 <UART_SetConfig+0x122c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d01b      	beq.n	8007cfc <UART_SetConfig+0x1224>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2b09      	cmp	r3, #9
 8007cca:	d013      	beq.n	8007cf4 <UART_SetConfig+0x121c>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	2b0a      	cmp	r3, #10
 8007cd2:	d00b      	beq.n	8007cec <UART_SetConfig+0x1214>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b0b      	cmp	r3, #11
 8007cda:	d103      	bne.n	8007ce4 <UART_SetConfig+0x120c>
 8007cdc:	4bc0      	ldr	r3, [pc, #768]	; (8007fe0 <UART_SetConfig+0x1508>)
 8007cde:	f04f 0400 	mov.w	r4, #0
 8007ce2:	e02e      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007ce4:	4bbf      	ldr	r3, [pc, #764]	; (8007fe4 <UART_SetConfig+0x150c>)
 8007ce6:	f04f 0400 	mov.w	r4, #0
 8007cea:	e02a      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007cec:	4bbe      	ldr	r3, [pc, #760]	; (8007fe8 <UART_SetConfig+0x1510>)
 8007cee:	f04f 0400 	mov.w	r4, #0
 8007cf2:	e026      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007cf4:	4bbd      	ldr	r3, [pc, #756]	; (8007fec <UART_SetConfig+0x1514>)
 8007cf6:	f04f 0400 	mov.w	r4, #0
 8007cfa:	e022      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007cfc:	4bbc      	ldr	r3, [pc, #752]	; (8007ff0 <UART_SetConfig+0x1518>)
 8007cfe:	f04f 0400 	mov.w	r4, #0
 8007d02:	e01e      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d04:	4bbb      	ldr	r3, [pc, #748]	; (8007ff4 <UART_SetConfig+0x151c>)
 8007d06:	f04f 0400 	mov.w	r4, #0
 8007d0a:	e01a      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d0c:	a4b0      	add	r4, pc, #704	; (adr r4, 8007fd0 <UART_SetConfig+0x14f8>)
 8007d0e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d12:	e016      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d14:	4bb8      	ldr	r3, [pc, #736]	; (8007ff8 <UART_SetConfig+0x1520>)
 8007d16:	f04f 0400 	mov.w	r4, #0
 8007d1a:	e012      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d1c:	4bb7      	ldr	r3, [pc, #732]	; (8007ffc <UART_SetConfig+0x1524>)
 8007d1e:	f04f 0400 	mov.w	r4, #0
 8007d22:	e00e      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d24:	a4ac      	add	r4, pc, #688	; (adr r4, 8007fd8 <UART_SetConfig+0x1500>)
 8007d26:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d2a:	e00a      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d2c:	4bb4      	ldr	r3, [pc, #720]	; (8008000 <UART_SetConfig+0x1528>)
 8007d2e:	f04f 0400 	mov.w	r4, #0
 8007d32:	e006      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d34:	4bb3      	ldr	r3, [pc, #716]	; (8008004 <UART_SetConfig+0x152c>)
 8007d36:	f04f 0400 	mov.w	r4, #0
 8007d3a:	e002      	b.n	8007d42 <UART_SetConfig+0x126a>
 8007d3c:	4ba9      	ldr	r3, [pc, #676]	; (8007fe4 <UART_SetConfig+0x150c>)
 8007d3e:	f04f 0400 	mov.w	r4, #0
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6852      	ldr	r2, [r2, #4]
 8007d46:	0852      	lsrs	r2, r2, #1
 8007d48:	4611      	mov	r1, r2
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	eb13 0b01 	adds.w	fp, r3, r1
 8007d52:	eb44 0c02 	adc.w	ip, r4, r2
 8007d56:	4658      	mov	r0, fp
 8007d58:	4661      	mov	r1, ip
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f04f 0400 	mov.w	r4, #0
 8007d62:	461a      	mov	r2, r3
 8007d64:	4623      	mov	r3, r4
 8007d66:	f7f8 fab7 	bl	80002d8 <__aeabi_uldivmod>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d70:	e088      	b.n	8007e84 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d064      	beq.n	8007e44 <UART_SetConfig+0x136c>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d05b      	beq.n	8007e3a <UART_SetConfig+0x1362>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d052      	beq.n	8007e30 <UART_SetConfig+0x1358>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d04a      	beq.n	8007e28 <UART_SetConfig+0x1350>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d041      	beq.n	8007e1e <UART_SetConfig+0x1346>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d039      	beq.n	8007e16 <UART_SetConfig+0x133e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b06      	cmp	r3, #6
 8007da8:	d031      	beq.n	8007e0e <UART_SetConfig+0x1336>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b07      	cmp	r3, #7
 8007db0:	d028      	beq.n	8007e04 <UART_SetConfig+0x132c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	2b08      	cmp	r3, #8
 8007db8:	d01f      	beq.n	8007dfa <UART_SetConfig+0x1322>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	2b09      	cmp	r3, #9
 8007dc0:	d016      	beq.n	8007df0 <UART_SetConfig+0x1318>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	2b0a      	cmp	r3, #10
 8007dc8:	d00d      	beq.n	8007de6 <UART_SetConfig+0x130e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	2b0b      	cmp	r3, #11
 8007dd0:	d104      	bne.n	8007ddc <UART_SetConfig+0x1304>
 8007dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dd6:	f04f 0400 	mov.w	r4, #0
 8007dda:	e037      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007ddc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007de0:	f04f 0400 	mov.w	r4, #0
 8007de4:	e032      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dea:	f04f 0400 	mov.w	r4, #0
 8007dee:	e02d      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007df4:	f04f 0400 	mov.w	r4, #0
 8007df8:	e028      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007dfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007dfe:	f04f 0400 	mov.w	r4, #0
 8007e02:	e023      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e08:	f04f 0400 	mov.w	r4, #0
 8007e0c:	e01e      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e0e:	4b7e      	ldr	r3, [pc, #504]	; (8008008 <UART_SetConfig+0x1530>)
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	e01a      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e16:	4b7d      	ldr	r3, [pc, #500]	; (800800c <UART_SetConfig+0x1534>)
 8007e18:	f04f 0400 	mov.w	r4, #0
 8007e1c:	e016      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e22:	f04f 0400 	mov.w	r4, #0
 8007e26:	e011      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e28:	4b79      	ldr	r3, [pc, #484]	; (8008010 <UART_SetConfig+0x1538>)
 8007e2a:	f04f 0400 	mov.w	r4, #0
 8007e2e:	e00d      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e34:	f04f 0400 	mov.w	r4, #0
 8007e38:	e008      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e3e:	f04f 0400 	mov.w	r4, #0
 8007e42:	e003      	b.n	8007e4c <UART_SetConfig+0x1374>
 8007e44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e48:	f04f 0400 	mov.w	r4, #0
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6852      	ldr	r2, [r2, #4]
 8007e50:	0852      	lsrs	r2, r2, #1
 8007e52:	4611      	mov	r1, r2
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	eb13 0b01 	adds.w	fp, r3, r1
 8007e5c:	eb44 0c02 	adc.w	ip, r4, r2
 8007e60:	4658      	mov	r0, fp
 8007e62:	4661      	mov	r1, ip
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f04f 0400 	mov.w	r4, #0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4623      	mov	r3, r4
 8007e70:	f7f8 fa32 	bl	80002d8 <__aeabi_uldivmod>
 8007e74:	4603      	mov	r3, r0
 8007e76:	460c      	mov	r4, r1
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e7a:	e003      	b.n	8007e84 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007e82:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e8a:	d309      	bcc.n	8007ea0 <UART_SetConfig+0x13c8>
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e92:	d205      	bcs.n	8007ea0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e9a:	60da      	str	r2, [r3, #12]
 8007e9c:	f000 bf85 	b.w	8008daa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007ea6:	f000 bf80 	b.w	8008daa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eb2:	f040 83da 	bne.w	800866a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007eb6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	f200 83b3 	bhi.w	8008626 <UART_SetConfig+0x1b4e>
 8007ec0:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <UART_SetConfig+0x13f0>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08008015 	.word	0x08008015
 8007ecc:	080080cd 	.word	0x080080cd
 8007ed0:	08008627 	.word	0x08008627
 8007ed4:	08008627 	.word	0x08008627
 8007ed8:	08008185 	.word	0x08008185
 8007edc:	08008627 	.word	0x08008627
 8007ee0:	08008627 	.word	0x08008627
 8007ee4:	08008627 	.word	0x08008627
 8007ee8:	08008241 	.word	0x08008241
 8007eec:	08008627 	.word	0x08008627
 8007ef0:	08008627 	.word	0x08008627
 8007ef4:	08008627 	.word	0x08008627
 8007ef8:	08008627 	.word	0x08008627
 8007efc:	08008627 	.word	0x08008627
 8007f00:	08008627 	.word	0x08008627
 8007f04:	08008627 	.word	0x08008627
 8007f08:	080082fd 	.word	0x080082fd
 8007f0c:	08008627 	.word	0x08008627
 8007f10:	08008627 	.word	0x08008627
 8007f14:	08008627 	.word	0x08008627
 8007f18:	08008627 	.word	0x08008627
 8007f1c:	08008627 	.word	0x08008627
 8007f20:	08008627 	.word	0x08008627
 8007f24:	08008627 	.word	0x08008627
 8007f28:	08008627 	.word	0x08008627
 8007f2c:	08008627 	.word	0x08008627
 8007f30:	08008627 	.word	0x08008627
 8007f34:	08008627 	.word	0x08008627
 8007f38:	08008627 	.word	0x08008627
 8007f3c:	08008627 	.word	0x08008627
 8007f40:	08008627 	.word	0x08008627
 8007f44:	08008627 	.word	0x08008627
 8007f48:	0800846f 	.word	0x0800846f
 8007f4c:	08008627 	.word	0x08008627
 8007f50:	08008627 	.word	0x08008627
 8007f54:	08008627 	.word	0x08008627
 8007f58:	08008627 	.word	0x08008627
 8007f5c:	08008627 	.word	0x08008627
 8007f60:	08008627 	.word	0x08008627
 8007f64:	08008627 	.word	0x08008627
 8007f68:	08008627 	.word	0x08008627
 8007f6c:	08008627 	.word	0x08008627
 8007f70:	08008627 	.word	0x08008627
 8007f74:	08008627 	.word	0x08008627
 8007f78:	08008627 	.word	0x08008627
 8007f7c:	08008627 	.word	0x08008627
 8007f80:	08008627 	.word	0x08008627
 8007f84:	08008627 	.word	0x08008627
 8007f88:	08008627 	.word	0x08008627
 8007f8c:	08008627 	.word	0x08008627
 8007f90:	08008627 	.word	0x08008627
 8007f94:	08008627 	.word	0x08008627
 8007f98:	08008627 	.word	0x08008627
 8007f9c:	08008627 	.word	0x08008627
 8007fa0:	08008627 	.word	0x08008627
 8007fa4:	08008627 	.word	0x08008627
 8007fa8:	08008627 	.word	0x08008627
 8007fac:	08008627 	.word	0x08008627
 8007fb0:	08008627 	.word	0x08008627
 8007fb4:	08008627 	.word	0x08008627
 8007fb8:	08008627 	.word	0x08008627
 8007fbc:	08008627 	.word	0x08008627
 8007fc0:	08008627 	.word	0x08008627
 8007fc4:	08008627 	.word	0x08008627
 8007fc8:	08008565 	.word	0x08008565
 8007fcc:	f3af 8000 	nop.w
 8007fd0:	05161500 	.word	0x05161500
 8007fd4:	00000000 	.word	0x00000000
 8007fd8:	0a2c2a00 	.word	0x0a2c2a00
 8007fdc:	00000000 	.word	0x00000000
 8007fe0:	003d0900 	.word	0x003d0900
 8007fe4:	3d090000 	.word	0x3d090000
 8007fe8:	007a1200 	.word	0x007a1200
 8007fec:	00f42400 	.word	0x00f42400
 8007ff0:	01e84800 	.word	0x01e84800
 8007ff4:	03d09000 	.word	0x03d09000
 8007ff8:	061a8000 	.word	0x061a8000
 8007ffc:	07a12000 	.word	0x07a12000
 8008000:	0f424000 	.word	0x0f424000
 8008004:	1e848000 	.word	0x1e848000
 8008008:	000aaa00 	.word	0x000aaa00
 800800c:	000ccc00 	.word	0x000ccc00
 8008010:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008014:	f7fb ff32 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8008018:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801e:	2b00      	cmp	r3, #0
 8008020:	d044      	beq.n	80080ac <UART_SetConfig+0x15d4>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	2b01      	cmp	r3, #1
 8008028:	d03e      	beq.n	80080a8 <UART_SetConfig+0x15d0>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	2b02      	cmp	r3, #2
 8008030:	d038      	beq.n	80080a4 <UART_SetConfig+0x15cc>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b03      	cmp	r3, #3
 8008038:	d032      	beq.n	80080a0 <UART_SetConfig+0x15c8>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	2b04      	cmp	r3, #4
 8008040:	d02c      	beq.n	800809c <UART_SetConfig+0x15c4>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b05      	cmp	r3, #5
 8008048:	d026      	beq.n	8008098 <UART_SetConfig+0x15c0>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b06      	cmp	r3, #6
 8008050:	d020      	beq.n	8008094 <UART_SetConfig+0x15bc>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b07      	cmp	r3, #7
 8008058:	d01a      	beq.n	8008090 <UART_SetConfig+0x15b8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b08      	cmp	r3, #8
 8008060:	d014      	beq.n	800808c <UART_SetConfig+0x15b4>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b09      	cmp	r3, #9
 8008068:	d00e      	beq.n	8008088 <UART_SetConfig+0x15b0>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b0a      	cmp	r3, #10
 8008070:	d008      	beq.n	8008084 <UART_SetConfig+0x15ac>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b0b      	cmp	r3, #11
 8008078:	d102      	bne.n	8008080 <UART_SetConfig+0x15a8>
 800807a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800807e:	e016      	b.n	80080ae <UART_SetConfig+0x15d6>
 8008080:	2301      	movs	r3, #1
 8008082:	e014      	b.n	80080ae <UART_SetConfig+0x15d6>
 8008084:	2380      	movs	r3, #128	; 0x80
 8008086:	e012      	b.n	80080ae <UART_SetConfig+0x15d6>
 8008088:	2340      	movs	r3, #64	; 0x40
 800808a:	e010      	b.n	80080ae <UART_SetConfig+0x15d6>
 800808c:	2320      	movs	r3, #32
 800808e:	e00e      	b.n	80080ae <UART_SetConfig+0x15d6>
 8008090:	2310      	movs	r3, #16
 8008092:	e00c      	b.n	80080ae <UART_SetConfig+0x15d6>
 8008094:	230c      	movs	r3, #12
 8008096:	e00a      	b.n	80080ae <UART_SetConfig+0x15d6>
 8008098:	230a      	movs	r3, #10
 800809a:	e008      	b.n	80080ae <UART_SetConfig+0x15d6>
 800809c:	2308      	movs	r3, #8
 800809e:	e006      	b.n	80080ae <UART_SetConfig+0x15d6>
 80080a0:	2306      	movs	r3, #6
 80080a2:	e004      	b.n	80080ae <UART_SetConfig+0x15d6>
 80080a4:	2304      	movs	r3, #4
 80080a6:	e002      	b.n	80080ae <UART_SetConfig+0x15d6>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e000      	b.n	80080ae <UART_SetConfig+0x15d6>
 80080ac:	2301      	movs	r3, #1
 80080ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b4:	005a      	lsls	r2, r3, #1
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	441a      	add	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ca:	e2b0      	b.n	800862e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080cc:	f7fb feec 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 80080d0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d044      	beq.n	8008164 <UART_SetConfig+0x168c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d03e      	beq.n	8008160 <UART_SetConfig+0x1688>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d038      	beq.n	800815c <UART_SetConfig+0x1684>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d032      	beq.n	8008158 <UART_SetConfig+0x1680>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d02c      	beq.n	8008154 <UART_SetConfig+0x167c>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b05      	cmp	r3, #5
 8008100:	d026      	beq.n	8008150 <UART_SetConfig+0x1678>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b06      	cmp	r3, #6
 8008108:	d020      	beq.n	800814c <UART_SetConfig+0x1674>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b07      	cmp	r3, #7
 8008110:	d01a      	beq.n	8008148 <UART_SetConfig+0x1670>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b08      	cmp	r3, #8
 8008118:	d014      	beq.n	8008144 <UART_SetConfig+0x166c>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b09      	cmp	r3, #9
 8008120:	d00e      	beq.n	8008140 <UART_SetConfig+0x1668>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2b0a      	cmp	r3, #10
 8008128:	d008      	beq.n	800813c <UART_SetConfig+0x1664>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	2b0b      	cmp	r3, #11
 8008130:	d102      	bne.n	8008138 <UART_SetConfig+0x1660>
 8008132:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008136:	e016      	b.n	8008166 <UART_SetConfig+0x168e>
 8008138:	2301      	movs	r3, #1
 800813a:	e014      	b.n	8008166 <UART_SetConfig+0x168e>
 800813c:	2380      	movs	r3, #128	; 0x80
 800813e:	e012      	b.n	8008166 <UART_SetConfig+0x168e>
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	e010      	b.n	8008166 <UART_SetConfig+0x168e>
 8008144:	2320      	movs	r3, #32
 8008146:	e00e      	b.n	8008166 <UART_SetConfig+0x168e>
 8008148:	2310      	movs	r3, #16
 800814a:	e00c      	b.n	8008166 <UART_SetConfig+0x168e>
 800814c:	230c      	movs	r3, #12
 800814e:	e00a      	b.n	8008166 <UART_SetConfig+0x168e>
 8008150:	230a      	movs	r3, #10
 8008152:	e008      	b.n	8008166 <UART_SetConfig+0x168e>
 8008154:	2308      	movs	r3, #8
 8008156:	e006      	b.n	8008166 <UART_SetConfig+0x168e>
 8008158:	2306      	movs	r3, #6
 800815a:	e004      	b.n	8008166 <UART_SetConfig+0x168e>
 800815c:	2304      	movs	r3, #4
 800815e:	e002      	b.n	8008166 <UART_SetConfig+0x168e>
 8008160:	2302      	movs	r3, #2
 8008162:	e000      	b.n	8008166 <UART_SetConfig+0x168e>
 8008164:	2301      	movs	r3, #1
 8008166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008168:	fbb2 f3f3 	udiv	r3, r2, r3
 800816c:	005a      	lsls	r2, r3, #1
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	085b      	lsrs	r3, r3, #1
 8008174:	441a      	add	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	fbb2 f3f3 	udiv	r3, r2, r3
 800817e:	b29b      	uxth	r3, r3
 8008180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008182:	e254      	b.n	800862e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008184:	f107 0318 	add.w	r3, r7, #24
 8008188:	4618      	mov	r0, r3
 800818a:	f7fc fda9 	bl	8004ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d044      	beq.n	8008222 <UART_SetConfig+0x174a>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b01      	cmp	r3, #1
 800819e:	d03e      	beq.n	800821e <UART_SetConfig+0x1746>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d038      	beq.n	800821a <UART_SetConfig+0x1742>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d032      	beq.n	8008216 <UART_SetConfig+0x173e>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d02c      	beq.n	8008212 <UART_SetConfig+0x173a>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	2b05      	cmp	r3, #5
 80081be:	d026      	beq.n	800820e <UART_SetConfig+0x1736>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b06      	cmp	r3, #6
 80081c6:	d020      	beq.n	800820a <UART_SetConfig+0x1732>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d01a      	beq.n	8008206 <UART_SetConfig+0x172e>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d014      	beq.n	8008202 <UART_SetConfig+0x172a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b09      	cmp	r3, #9
 80081de:	d00e      	beq.n	80081fe <UART_SetConfig+0x1726>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b0a      	cmp	r3, #10
 80081e6:	d008      	beq.n	80081fa <UART_SetConfig+0x1722>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b0b      	cmp	r3, #11
 80081ee:	d102      	bne.n	80081f6 <UART_SetConfig+0x171e>
 80081f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f4:	e016      	b.n	8008224 <UART_SetConfig+0x174c>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e014      	b.n	8008224 <UART_SetConfig+0x174c>
 80081fa:	2380      	movs	r3, #128	; 0x80
 80081fc:	e012      	b.n	8008224 <UART_SetConfig+0x174c>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	e010      	b.n	8008224 <UART_SetConfig+0x174c>
 8008202:	2320      	movs	r3, #32
 8008204:	e00e      	b.n	8008224 <UART_SetConfig+0x174c>
 8008206:	2310      	movs	r3, #16
 8008208:	e00c      	b.n	8008224 <UART_SetConfig+0x174c>
 800820a:	230c      	movs	r3, #12
 800820c:	e00a      	b.n	8008224 <UART_SetConfig+0x174c>
 800820e:	230a      	movs	r3, #10
 8008210:	e008      	b.n	8008224 <UART_SetConfig+0x174c>
 8008212:	2308      	movs	r3, #8
 8008214:	e006      	b.n	8008224 <UART_SetConfig+0x174c>
 8008216:	2306      	movs	r3, #6
 8008218:	e004      	b.n	8008224 <UART_SetConfig+0x174c>
 800821a:	2304      	movs	r3, #4
 800821c:	e002      	b.n	8008224 <UART_SetConfig+0x174c>
 800821e:	2302      	movs	r3, #2
 8008220:	e000      	b.n	8008224 <UART_SetConfig+0x174c>
 8008222:	2301      	movs	r3, #1
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	005a      	lsls	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	085b      	lsrs	r3, r3, #1
 8008230:	441a      	add	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	fbb2 f3f3 	udiv	r3, r2, r3
 800823a:	b29b      	uxth	r3, r3
 800823c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800823e:	e1f6      	b.n	800862e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008240:	f107 030c 	add.w	r3, r7, #12
 8008244:	4618      	mov	r0, r3
 8008246:	f7fc fe97 	bl	8004f78 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008250:	2b00      	cmp	r3, #0
 8008252:	d044      	beq.n	80082de <UART_SetConfig+0x1806>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b01      	cmp	r3, #1
 800825a:	d03e      	beq.n	80082da <UART_SetConfig+0x1802>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b02      	cmp	r3, #2
 8008262:	d038      	beq.n	80082d6 <UART_SetConfig+0x17fe>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b03      	cmp	r3, #3
 800826a:	d032      	beq.n	80082d2 <UART_SetConfig+0x17fa>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b04      	cmp	r3, #4
 8008272:	d02c      	beq.n	80082ce <UART_SetConfig+0x17f6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2b05      	cmp	r3, #5
 800827a:	d026      	beq.n	80082ca <UART_SetConfig+0x17f2>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b06      	cmp	r3, #6
 8008282:	d020      	beq.n	80082c6 <UART_SetConfig+0x17ee>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b07      	cmp	r3, #7
 800828a:	d01a      	beq.n	80082c2 <UART_SetConfig+0x17ea>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b08      	cmp	r3, #8
 8008292:	d014      	beq.n	80082be <UART_SetConfig+0x17e6>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b09      	cmp	r3, #9
 800829a:	d00e      	beq.n	80082ba <UART_SetConfig+0x17e2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b0a      	cmp	r3, #10
 80082a2:	d008      	beq.n	80082b6 <UART_SetConfig+0x17de>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b0b      	cmp	r3, #11
 80082aa:	d102      	bne.n	80082b2 <UART_SetConfig+0x17da>
 80082ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082b0:	e016      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082b2:	2301      	movs	r3, #1
 80082b4:	e014      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082b6:	2380      	movs	r3, #128	; 0x80
 80082b8:	e012      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	e010      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082be:	2320      	movs	r3, #32
 80082c0:	e00e      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082c2:	2310      	movs	r3, #16
 80082c4:	e00c      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082c6:	230c      	movs	r3, #12
 80082c8:	e00a      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082ca:	230a      	movs	r3, #10
 80082cc:	e008      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082ce:	2308      	movs	r3, #8
 80082d0:	e006      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082d2:	2306      	movs	r3, #6
 80082d4:	e004      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082d6:	2304      	movs	r3, #4
 80082d8:	e002      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082da:	2302      	movs	r3, #2
 80082dc:	e000      	b.n	80082e0 <UART_SetConfig+0x1808>
 80082de:	2301      	movs	r3, #1
 80082e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e4:	005a      	lsls	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	085b      	lsrs	r3, r3, #1
 80082ec:	441a      	add	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082fa:	e198      	b.n	800862e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082fc:	4b87      	ldr	r3, [pc, #540]	; (800851c <UART_SetConfig+0x1a44>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 0320 	and.w	r3, r3, #32
 8008304:	2b00      	cmp	r3, #0
 8008306:	d05e      	beq.n	80083c6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008308:	4b84      	ldr	r3, [pc, #528]	; (800851c <UART_SetConfig+0x1a44>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	08db      	lsrs	r3, r3, #3
 800830e:	f003 0303 	and.w	r3, r3, #3
 8008312:	4a83      	ldr	r2, [pc, #524]	; (8008520 <UART_SetConfig+0x1a48>)
 8008314:	40da      	lsrs	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831a:	2b00      	cmp	r3, #0
 800831c:	d044      	beq.n	80083a8 <UART_SetConfig+0x18d0>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b01      	cmp	r3, #1
 8008324:	d03e      	beq.n	80083a4 <UART_SetConfig+0x18cc>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b02      	cmp	r3, #2
 800832c:	d038      	beq.n	80083a0 <UART_SetConfig+0x18c8>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b03      	cmp	r3, #3
 8008334:	d032      	beq.n	800839c <UART_SetConfig+0x18c4>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b04      	cmp	r3, #4
 800833c:	d02c      	beq.n	8008398 <UART_SetConfig+0x18c0>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b05      	cmp	r3, #5
 8008344:	d026      	beq.n	8008394 <UART_SetConfig+0x18bc>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b06      	cmp	r3, #6
 800834c:	d020      	beq.n	8008390 <UART_SetConfig+0x18b8>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b07      	cmp	r3, #7
 8008354:	d01a      	beq.n	800838c <UART_SetConfig+0x18b4>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b08      	cmp	r3, #8
 800835c:	d014      	beq.n	8008388 <UART_SetConfig+0x18b0>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b09      	cmp	r3, #9
 8008364:	d00e      	beq.n	8008384 <UART_SetConfig+0x18ac>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b0a      	cmp	r3, #10
 800836c:	d008      	beq.n	8008380 <UART_SetConfig+0x18a8>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	2b0b      	cmp	r3, #11
 8008374:	d102      	bne.n	800837c <UART_SetConfig+0x18a4>
 8008376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800837a:	e016      	b.n	80083aa <UART_SetConfig+0x18d2>
 800837c:	2301      	movs	r3, #1
 800837e:	e014      	b.n	80083aa <UART_SetConfig+0x18d2>
 8008380:	2380      	movs	r3, #128	; 0x80
 8008382:	e012      	b.n	80083aa <UART_SetConfig+0x18d2>
 8008384:	2340      	movs	r3, #64	; 0x40
 8008386:	e010      	b.n	80083aa <UART_SetConfig+0x18d2>
 8008388:	2320      	movs	r3, #32
 800838a:	e00e      	b.n	80083aa <UART_SetConfig+0x18d2>
 800838c:	2310      	movs	r3, #16
 800838e:	e00c      	b.n	80083aa <UART_SetConfig+0x18d2>
 8008390:	230c      	movs	r3, #12
 8008392:	e00a      	b.n	80083aa <UART_SetConfig+0x18d2>
 8008394:	230a      	movs	r3, #10
 8008396:	e008      	b.n	80083aa <UART_SetConfig+0x18d2>
 8008398:	2308      	movs	r3, #8
 800839a:	e006      	b.n	80083aa <UART_SetConfig+0x18d2>
 800839c:	2306      	movs	r3, #6
 800839e:	e004      	b.n	80083aa <UART_SetConfig+0x18d2>
 80083a0:	2304      	movs	r3, #4
 80083a2:	e002      	b.n	80083aa <UART_SetConfig+0x18d2>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e000      	b.n	80083aa <UART_SetConfig+0x18d2>
 80083a8:	2301      	movs	r3, #1
 80083aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ae:	005a      	lsls	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	441a      	add	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80083c4:	e133      	b.n	800862e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d043      	beq.n	8008456 <UART_SetConfig+0x197e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d03d      	beq.n	8008452 <UART_SetConfig+0x197a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b02      	cmp	r3, #2
 80083dc:	d037      	beq.n	800844e <UART_SetConfig+0x1976>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d031      	beq.n	800844a <UART_SetConfig+0x1972>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d02b      	beq.n	8008446 <UART_SetConfig+0x196e>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	2b05      	cmp	r3, #5
 80083f4:	d025      	beq.n	8008442 <UART_SetConfig+0x196a>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b06      	cmp	r3, #6
 80083fc:	d01f      	beq.n	800843e <UART_SetConfig+0x1966>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b07      	cmp	r3, #7
 8008404:	d019      	beq.n	800843a <UART_SetConfig+0x1962>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b08      	cmp	r3, #8
 800840c:	d013      	beq.n	8008436 <UART_SetConfig+0x195e>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b09      	cmp	r3, #9
 8008414:	d00d      	beq.n	8008432 <UART_SetConfig+0x195a>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2b0a      	cmp	r3, #10
 800841c:	d007      	beq.n	800842e <UART_SetConfig+0x1956>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b0b      	cmp	r3, #11
 8008424:	d101      	bne.n	800842a <UART_SetConfig+0x1952>
 8008426:	4b3f      	ldr	r3, [pc, #252]	; (8008524 <UART_SetConfig+0x1a4c>)
 8008428:	e016      	b.n	8008458 <UART_SetConfig+0x1980>
 800842a:	4b3f      	ldr	r3, [pc, #252]	; (8008528 <UART_SetConfig+0x1a50>)
 800842c:	e014      	b.n	8008458 <UART_SetConfig+0x1980>
 800842e:	4b3f      	ldr	r3, [pc, #252]	; (800852c <UART_SetConfig+0x1a54>)
 8008430:	e012      	b.n	8008458 <UART_SetConfig+0x1980>
 8008432:	4b3f      	ldr	r3, [pc, #252]	; (8008530 <UART_SetConfig+0x1a58>)
 8008434:	e010      	b.n	8008458 <UART_SetConfig+0x1980>
 8008436:	4b3f      	ldr	r3, [pc, #252]	; (8008534 <UART_SetConfig+0x1a5c>)
 8008438:	e00e      	b.n	8008458 <UART_SetConfig+0x1980>
 800843a:	4b3f      	ldr	r3, [pc, #252]	; (8008538 <UART_SetConfig+0x1a60>)
 800843c:	e00c      	b.n	8008458 <UART_SetConfig+0x1980>
 800843e:	4b3f      	ldr	r3, [pc, #252]	; (800853c <UART_SetConfig+0x1a64>)
 8008440:	e00a      	b.n	8008458 <UART_SetConfig+0x1980>
 8008442:	4b3f      	ldr	r3, [pc, #252]	; (8008540 <UART_SetConfig+0x1a68>)
 8008444:	e008      	b.n	8008458 <UART_SetConfig+0x1980>
 8008446:	4b3f      	ldr	r3, [pc, #252]	; (8008544 <UART_SetConfig+0x1a6c>)
 8008448:	e006      	b.n	8008458 <UART_SetConfig+0x1980>
 800844a:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <UART_SetConfig+0x1a70>)
 800844c:	e004      	b.n	8008458 <UART_SetConfig+0x1980>
 800844e:	4b3f      	ldr	r3, [pc, #252]	; (800854c <UART_SetConfig+0x1a74>)
 8008450:	e002      	b.n	8008458 <UART_SetConfig+0x1980>
 8008452:	4b33      	ldr	r3, [pc, #204]	; (8008520 <UART_SetConfig+0x1a48>)
 8008454:	e000      	b.n	8008458 <UART_SetConfig+0x1980>
 8008456:	4b34      	ldr	r3, [pc, #208]	; (8008528 <UART_SetConfig+0x1a50>)
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	6852      	ldr	r2, [r2, #4]
 800845c:	0852      	lsrs	r2, r2, #1
 800845e:	441a      	add	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	fbb2 f3f3 	udiv	r3, r2, r3
 8008468:	b29b      	uxth	r3, r3
 800846a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800846c:	e0df      	b.n	800862e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008472:	2b00      	cmp	r3, #0
 8008474:	d045      	beq.n	8008502 <UART_SetConfig+0x1a2a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	2b01      	cmp	r3, #1
 800847c:	d03f      	beq.n	80084fe <UART_SetConfig+0x1a26>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	2b02      	cmp	r3, #2
 8008484:	d039      	beq.n	80084fa <UART_SetConfig+0x1a22>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	2b03      	cmp	r3, #3
 800848c:	d033      	beq.n	80084f6 <UART_SetConfig+0x1a1e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	2b04      	cmp	r3, #4
 8008494:	d02d      	beq.n	80084f2 <UART_SetConfig+0x1a1a>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	2b05      	cmp	r3, #5
 800849c:	d027      	beq.n	80084ee <UART_SetConfig+0x1a16>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	2b06      	cmp	r3, #6
 80084a4:	d021      	beq.n	80084ea <UART_SetConfig+0x1a12>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	2b07      	cmp	r3, #7
 80084ac:	d01b      	beq.n	80084e6 <UART_SetConfig+0x1a0e>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d015      	beq.n	80084e2 <UART_SetConfig+0x1a0a>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	2b09      	cmp	r3, #9
 80084bc:	d00f      	beq.n	80084de <UART_SetConfig+0x1a06>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b0a      	cmp	r3, #10
 80084c4:	d008      	beq.n	80084d8 <UART_SetConfig+0x1a00>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	2b0b      	cmp	r3, #11
 80084cc:	d102      	bne.n	80084d4 <UART_SetConfig+0x19fc>
 80084ce:	f647 2312 	movw	r3, #31250	; 0x7a12
 80084d2:	e017      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084d4:	4b18      	ldr	r3, [pc, #96]	; (8008538 <UART_SetConfig+0x1a60>)
 80084d6:	e015      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084d8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80084dc:	e012      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084de:	4b1c      	ldr	r3, [pc, #112]	; (8008550 <UART_SetConfig+0x1a78>)
 80084e0:	e010      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084e2:	4b1c      	ldr	r3, [pc, #112]	; (8008554 <UART_SetConfig+0x1a7c>)
 80084e4:	e00e      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084e6:	4b0f      	ldr	r3, [pc, #60]	; (8008524 <UART_SetConfig+0x1a4c>)
 80084e8:	e00c      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084ea:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <UART_SetConfig+0x1a80>)
 80084ec:	e00a      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084ee:	4b1b      	ldr	r3, [pc, #108]	; (800855c <UART_SetConfig+0x1a84>)
 80084f0:	e008      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084f2:	4b0e      	ldr	r3, [pc, #56]	; (800852c <UART_SetConfig+0x1a54>)
 80084f4:	e006      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084f6:	4b1a      	ldr	r3, [pc, #104]	; (8008560 <UART_SetConfig+0x1a88>)
 80084f8:	e004      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <UART_SetConfig+0x1a58>)
 80084fc:	e002      	b.n	8008504 <UART_SetConfig+0x1a2c>
 80084fe:	4b0d      	ldr	r3, [pc, #52]	; (8008534 <UART_SetConfig+0x1a5c>)
 8008500:	e000      	b.n	8008504 <UART_SetConfig+0x1a2c>
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <UART_SetConfig+0x1a60>)
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6852      	ldr	r2, [r2, #4]
 8008508:	0852      	lsrs	r2, r2, #1
 800850a:	441a      	add	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	fbb2 f3f3 	udiv	r3, r2, r3
 8008514:	b29b      	uxth	r3, r3
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008518:	e089      	b.n	800862e <UART_SetConfig+0x1b56>
 800851a:	bf00      	nop
 800851c:	58024400 	.word	0x58024400
 8008520:	03d09000 	.word	0x03d09000
 8008524:	0007a120 	.word	0x0007a120
 8008528:	07a12000 	.word	0x07a12000
 800852c:	000f4240 	.word	0x000f4240
 8008530:	001e8480 	.word	0x001e8480
 8008534:	003d0900 	.word	0x003d0900
 8008538:	007a1200 	.word	0x007a1200
 800853c:	00a2c2aa 	.word	0x00a2c2aa
 8008540:	00c35000 	.word	0x00c35000
 8008544:	00f42400 	.word	0x00f42400
 8008548:	01458554 	.word	0x01458554
 800854c:	01e84800 	.word	0x01e84800
 8008550:	0001e848 	.word	0x0001e848
 8008554:	0003d090 	.word	0x0003d090
 8008558:	000a2c2a 	.word	0x000a2c2a
 800855c:	000c3500 	.word	0x000c3500
 8008560:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	2b00      	cmp	r3, #0
 800856a:	d04f      	beq.n	800860c <UART_SetConfig+0x1b34>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b01      	cmp	r3, #1
 8008572:	d048      	beq.n	8008606 <UART_SetConfig+0x1b2e>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b02      	cmp	r3, #2
 800857a:	d041      	beq.n	8008600 <UART_SetConfig+0x1b28>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b03      	cmp	r3, #3
 8008582:	d03a      	beq.n	80085fa <UART_SetConfig+0x1b22>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b04      	cmp	r3, #4
 800858a:	d033      	beq.n	80085f4 <UART_SetConfig+0x1b1c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b05      	cmp	r3, #5
 8008592:	d02c      	beq.n	80085ee <UART_SetConfig+0x1b16>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b06      	cmp	r3, #6
 800859a:	d025      	beq.n	80085e8 <UART_SetConfig+0x1b10>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b07      	cmp	r3, #7
 80085a2:	d01e      	beq.n	80085e2 <UART_SetConfig+0x1b0a>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d017      	beq.n	80085dc <UART_SetConfig+0x1b04>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b09      	cmp	r3, #9
 80085b2:	d010      	beq.n	80085d6 <UART_SetConfig+0x1afe>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b0a      	cmp	r3, #10
 80085ba:	d009      	beq.n	80085d0 <UART_SetConfig+0x1af8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b0b      	cmp	r3, #11
 80085c2:	d102      	bne.n	80085ca <UART_SetConfig+0x1af2>
 80085c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085c8:	e022      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085ce:	e01f      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085d4:	e01c      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085da:	e019      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085e0:	e016      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085e6:	e013      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085e8:	f241 5354 	movw	r3, #5460	; 0x1554
 80085ec:	e010      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085ee:	f641 1398 	movw	r3, #6552	; 0x1998
 80085f2:	e00d      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085f8:	e00a      	b.n	8008610 <UART_SetConfig+0x1b38>
 80085fa:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80085fe:	e007      	b.n	8008610 <UART_SetConfig+0x1b38>
 8008600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008604:	e004      	b.n	8008610 <UART_SetConfig+0x1b38>
 8008606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800860a:	e001      	b.n	8008610 <UART_SetConfig+0x1b38>
 800860c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	6852      	ldr	r2, [r2, #4]
 8008614:	0852      	lsrs	r2, r2, #1
 8008616:	441a      	add	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008620:	b29b      	uxth	r3, r3
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008624:	e003      	b.n	800862e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800862c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008630:	2b0f      	cmp	r3, #15
 8008632:	d916      	bls.n	8008662 <UART_SetConfig+0x1b8a>
 8008634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863a:	d212      	bcs.n	8008662 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863e:	b29b      	uxth	r3, r3
 8008640:	f023 030f 	bic.w	r3, r3, #15
 8008644:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	b29b      	uxth	r3, r3
 800864c:	f003 0307 	and.w	r3, r3, #7
 8008650:	b29a      	uxth	r2, r3
 8008652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008654:	4313      	orrs	r3, r2
 8008656:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800865e:	60da      	str	r2, [r3, #12]
 8008660:	e3a3      	b.n	8008daa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008668:	e39f      	b.n	8008daa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800866a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	f200 8388 	bhi.w	8008d84 <UART_SetConfig+0x22ac>
 8008674:	a201      	add	r2, pc, #4	; (adr r2, 800867c <UART_SetConfig+0x1ba4>)
 8008676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867a:	bf00      	nop
 800867c:	08008781 	.word	0x08008781
 8008680:	08008837 	.word	0x08008837
 8008684:	08008d85 	.word	0x08008d85
 8008688:	08008d85 	.word	0x08008d85
 800868c:	080088ed 	.word	0x080088ed
 8008690:	08008d85 	.word	0x08008d85
 8008694:	08008d85 	.word	0x08008d85
 8008698:	08008d85 	.word	0x08008d85
 800869c:	080089a7 	.word	0x080089a7
 80086a0:	08008d85 	.word	0x08008d85
 80086a4:	08008d85 	.word	0x08008d85
 80086a8:	08008d85 	.word	0x08008d85
 80086ac:	08008d85 	.word	0x08008d85
 80086b0:	08008d85 	.word	0x08008d85
 80086b4:	08008d85 	.word	0x08008d85
 80086b8:	08008d85 	.word	0x08008d85
 80086bc:	08008a61 	.word	0x08008a61
 80086c0:	08008d85 	.word	0x08008d85
 80086c4:	08008d85 	.word	0x08008d85
 80086c8:	08008d85 	.word	0x08008d85
 80086cc:	08008d85 	.word	0x08008d85
 80086d0:	08008d85 	.word	0x08008d85
 80086d4:	08008d85 	.word	0x08008d85
 80086d8:	08008d85 	.word	0x08008d85
 80086dc:	08008d85 	.word	0x08008d85
 80086e0:	08008d85 	.word	0x08008d85
 80086e4:	08008d85 	.word	0x08008d85
 80086e8:	08008d85 	.word	0x08008d85
 80086ec:	08008d85 	.word	0x08008d85
 80086f0:	08008d85 	.word	0x08008d85
 80086f4:	08008d85 	.word	0x08008d85
 80086f8:	08008d85 	.word	0x08008d85
 80086fc:	08008bd1 	.word	0x08008bd1
 8008700:	08008d85 	.word	0x08008d85
 8008704:	08008d85 	.word	0x08008d85
 8008708:	08008d85 	.word	0x08008d85
 800870c:	08008d85 	.word	0x08008d85
 8008710:	08008d85 	.word	0x08008d85
 8008714:	08008d85 	.word	0x08008d85
 8008718:	08008d85 	.word	0x08008d85
 800871c:	08008d85 	.word	0x08008d85
 8008720:	08008d85 	.word	0x08008d85
 8008724:	08008d85 	.word	0x08008d85
 8008728:	08008d85 	.word	0x08008d85
 800872c:	08008d85 	.word	0x08008d85
 8008730:	08008d85 	.word	0x08008d85
 8008734:	08008d85 	.word	0x08008d85
 8008738:	08008d85 	.word	0x08008d85
 800873c:	08008d85 	.word	0x08008d85
 8008740:	08008d85 	.word	0x08008d85
 8008744:	08008d85 	.word	0x08008d85
 8008748:	08008d85 	.word	0x08008d85
 800874c:	08008d85 	.word	0x08008d85
 8008750:	08008d85 	.word	0x08008d85
 8008754:	08008d85 	.word	0x08008d85
 8008758:	08008d85 	.word	0x08008d85
 800875c:	08008d85 	.word	0x08008d85
 8008760:	08008d85 	.word	0x08008d85
 8008764:	08008d85 	.word	0x08008d85
 8008768:	08008d85 	.word	0x08008d85
 800876c:	08008d85 	.word	0x08008d85
 8008770:	08008d85 	.word	0x08008d85
 8008774:	08008d85 	.word	0x08008d85
 8008778:	08008d85 	.word	0x08008d85
 800877c:	08008cc5 	.word	0x08008cc5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008780:	f7fb fb7c 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8008784:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d044      	beq.n	8008818 <UART_SetConfig+0x1d40>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	2b01      	cmp	r3, #1
 8008794:	d03e      	beq.n	8008814 <UART_SetConfig+0x1d3c>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	2b02      	cmp	r3, #2
 800879c:	d038      	beq.n	8008810 <UART_SetConfig+0x1d38>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d032      	beq.n	800880c <UART_SetConfig+0x1d34>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087aa:	2b04      	cmp	r3, #4
 80087ac:	d02c      	beq.n	8008808 <UART_SetConfig+0x1d30>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d026      	beq.n	8008804 <UART_SetConfig+0x1d2c>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b06      	cmp	r3, #6
 80087bc:	d020      	beq.n	8008800 <UART_SetConfig+0x1d28>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	2b07      	cmp	r3, #7
 80087c4:	d01a      	beq.n	80087fc <UART_SetConfig+0x1d24>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d014      	beq.n	80087f8 <UART_SetConfig+0x1d20>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	d00e      	beq.n	80087f4 <UART_SetConfig+0x1d1c>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	2b0a      	cmp	r3, #10
 80087dc:	d008      	beq.n	80087f0 <UART_SetConfig+0x1d18>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	2b0b      	cmp	r3, #11
 80087e4:	d102      	bne.n	80087ec <UART_SetConfig+0x1d14>
 80087e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ea:	e016      	b.n	800881a <UART_SetConfig+0x1d42>
 80087ec:	2301      	movs	r3, #1
 80087ee:	e014      	b.n	800881a <UART_SetConfig+0x1d42>
 80087f0:	2380      	movs	r3, #128	; 0x80
 80087f2:	e012      	b.n	800881a <UART_SetConfig+0x1d42>
 80087f4:	2340      	movs	r3, #64	; 0x40
 80087f6:	e010      	b.n	800881a <UART_SetConfig+0x1d42>
 80087f8:	2320      	movs	r3, #32
 80087fa:	e00e      	b.n	800881a <UART_SetConfig+0x1d42>
 80087fc:	2310      	movs	r3, #16
 80087fe:	e00c      	b.n	800881a <UART_SetConfig+0x1d42>
 8008800:	230c      	movs	r3, #12
 8008802:	e00a      	b.n	800881a <UART_SetConfig+0x1d42>
 8008804:	230a      	movs	r3, #10
 8008806:	e008      	b.n	800881a <UART_SetConfig+0x1d42>
 8008808:	2308      	movs	r3, #8
 800880a:	e006      	b.n	800881a <UART_SetConfig+0x1d42>
 800880c:	2306      	movs	r3, #6
 800880e:	e004      	b.n	800881a <UART_SetConfig+0x1d42>
 8008810:	2304      	movs	r3, #4
 8008812:	e002      	b.n	800881a <UART_SetConfig+0x1d42>
 8008814:	2302      	movs	r3, #2
 8008816:	e000      	b.n	800881a <UART_SetConfig+0x1d42>
 8008818:	2301      	movs	r3, #1
 800881a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	085b      	lsrs	r3, r3, #1
 8008826:	441a      	add	r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008830:	b29b      	uxth	r3, r3
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008834:	e2aa      	b.n	8008d8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008836:	f7fb fb37 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 800883a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d044      	beq.n	80088ce <UART_SetConfig+0x1df6>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b01      	cmp	r3, #1
 800884a:	d03e      	beq.n	80088ca <UART_SetConfig+0x1df2>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b02      	cmp	r3, #2
 8008852:	d038      	beq.n	80088c6 <UART_SetConfig+0x1dee>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b03      	cmp	r3, #3
 800885a:	d032      	beq.n	80088c2 <UART_SetConfig+0x1dea>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b04      	cmp	r3, #4
 8008862:	d02c      	beq.n	80088be <UART_SetConfig+0x1de6>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b05      	cmp	r3, #5
 800886a:	d026      	beq.n	80088ba <UART_SetConfig+0x1de2>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b06      	cmp	r3, #6
 8008872:	d020      	beq.n	80088b6 <UART_SetConfig+0x1dde>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b07      	cmp	r3, #7
 800887a:	d01a      	beq.n	80088b2 <UART_SetConfig+0x1dda>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b08      	cmp	r3, #8
 8008882:	d014      	beq.n	80088ae <UART_SetConfig+0x1dd6>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b09      	cmp	r3, #9
 800888a:	d00e      	beq.n	80088aa <UART_SetConfig+0x1dd2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b0a      	cmp	r3, #10
 8008892:	d008      	beq.n	80088a6 <UART_SetConfig+0x1dce>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b0b      	cmp	r3, #11
 800889a:	d102      	bne.n	80088a2 <UART_SetConfig+0x1dca>
 800889c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a0:	e016      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e014      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088a6:	2380      	movs	r3, #128	; 0x80
 80088a8:	e012      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	e010      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088ae:	2320      	movs	r3, #32
 80088b0:	e00e      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088b2:	2310      	movs	r3, #16
 80088b4:	e00c      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088b6:	230c      	movs	r3, #12
 80088b8:	e00a      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088ba:	230a      	movs	r3, #10
 80088bc:	e008      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088be:	2308      	movs	r3, #8
 80088c0:	e006      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088c2:	2306      	movs	r3, #6
 80088c4:	e004      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088c6:	2304      	movs	r3, #4
 80088c8:	e002      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e000      	b.n	80088d0 <UART_SetConfig+0x1df8>
 80088ce:	2301      	movs	r3, #1
 80088d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	085b      	lsrs	r3, r3, #1
 80088dc:	441a      	add	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088ea:	e24f      	b.n	8008d8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088ec:	f107 0318 	add.w	r3, r7, #24
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fc f9f5 	bl	8004ce0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d044      	beq.n	800898a <UART_SetConfig+0x1eb2>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b01      	cmp	r3, #1
 8008906:	d03e      	beq.n	8008986 <UART_SetConfig+0x1eae>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b02      	cmp	r3, #2
 800890e:	d038      	beq.n	8008982 <UART_SetConfig+0x1eaa>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b03      	cmp	r3, #3
 8008916:	d032      	beq.n	800897e <UART_SetConfig+0x1ea6>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b04      	cmp	r3, #4
 800891e:	d02c      	beq.n	800897a <UART_SetConfig+0x1ea2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b05      	cmp	r3, #5
 8008926:	d026      	beq.n	8008976 <UART_SetConfig+0x1e9e>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b06      	cmp	r3, #6
 800892e:	d020      	beq.n	8008972 <UART_SetConfig+0x1e9a>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b07      	cmp	r3, #7
 8008936:	d01a      	beq.n	800896e <UART_SetConfig+0x1e96>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2b08      	cmp	r3, #8
 800893e:	d014      	beq.n	800896a <UART_SetConfig+0x1e92>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	2b09      	cmp	r3, #9
 8008946:	d00e      	beq.n	8008966 <UART_SetConfig+0x1e8e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b0a      	cmp	r3, #10
 800894e:	d008      	beq.n	8008962 <UART_SetConfig+0x1e8a>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	2b0b      	cmp	r3, #11
 8008956:	d102      	bne.n	800895e <UART_SetConfig+0x1e86>
 8008958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800895c:	e016      	b.n	800898c <UART_SetConfig+0x1eb4>
 800895e:	2301      	movs	r3, #1
 8008960:	e014      	b.n	800898c <UART_SetConfig+0x1eb4>
 8008962:	2380      	movs	r3, #128	; 0x80
 8008964:	e012      	b.n	800898c <UART_SetConfig+0x1eb4>
 8008966:	2340      	movs	r3, #64	; 0x40
 8008968:	e010      	b.n	800898c <UART_SetConfig+0x1eb4>
 800896a:	2320      	movs	r3, #32
 800896c:	e00e      	b.n	800898c <UART_SetConfig+0x1eb4>
 800896e:	2310      	movs	r3, #16
 8008970:	e00c      	b.n	800898c <UART_SetConfig+0x1eb4>
 8008972:	230c      	movs	r3, #12
 8008974:	e00a      	b.n	800898c <UART_SetConfig+0x1eb4>
 8008976:	230a      	movs	r3, #10
 8008978:	e008      	b.n	800898c <UART_SetConfig+0x1eb4>
 800897a:	2308      	movs	r3, #8
 800897c:	e006      	b.n	800898c <UART_SetConfig+0x1eb4>
 800897e:	2306      	movs	r3, #6
 8008980:	e004      	b.n	800898c <UART_SetConfig+0x1eb4>
 8008982:	2304      	movs	r3, #4
 8008984:	e002      	b.n	800898c <UART_SetConfig+0x1eb4>
 8008986:	2302      	movs	r3, #2
 8008988:	e000      	b.n	800898c <UART_SetConfig+0x1eb4>
 800898a:	2301      	movs	r3, #1
 800898c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	085b      	lsrs	r3, r3, #1
 8008996:	441a      	add	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089a4:	e1f2      	b.n	8008d8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a6:	f107 030c 	add.w	r3, r7, #12
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fc fae4 	bl	8004f78 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d044      	beq.n	8008a44 <UART_SetConfig+0x1f6c>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d03e      	beq.n	8008a40 <UART_SetConfig+0x1f68>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d038      	beq.n	8008a3c <UART_SetConfig+0x1f64>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d032      	beq.n	8008a38 <UART_SetConfig+0x1f60>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d02c      	beq.n	8008a34 <UART_SetConfig+0x1f5c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b05      	cmp	r3, #5
 80089e0:	d026      	beq.n	8008a30 <UART_SetConfig+0x1f58>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b06      	cmp	r3, #6
 80089e8:	d020      	beq.n	8008a2c <UART_SetConfig+0x1f54>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b07      	cmp	r3, #7
 80089f0:	d01a      	beq.n	8008a28 <UART_SetConfig+0x1f50>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	d014      	beq.n	8008a24 <UART_SetConfig+0x1f4c>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b09      	cmp	r3, #9
 8008a00:	d00e      	beq.n	8008a20 <UART_SetConfig+0x1f48>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b0a      	cmp	r3, #10
 8008a08:	d008      	beq.n	8008a1c <UART_SetConfig+0x1f44>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b0b      	cmp	r3, #11
 8008a10:	d102      	bne.n	8008a18 <UART_SetConfig+0x1f40>
 8008a12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a16:	e016      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e014      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a1c:	2380      	movs	r3, #128	; 0x80
 8008a1e:	e012      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a20:	2340      	movs	r3, #64	; 0x40
 8008a22:	e010      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a24:	2320      	movs	r3, #32
 8008a26:	e00e      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a28:	2310      	movs	r3, #16
 8008a2a:	e00c      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a2c:	230c      	movs	r3, #12
 8008a2e:	e00a      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a30:	230a      	movs	r3, #10
 8008a32:	e008      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a34:	2308      	movs	r3, #8
 8008a36:	e006      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a38:	2306      	movs	r3, #6
 8008a3a:	e004      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a3c:	2304      	movs	r3, #4
 8008a3e:	e002      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e000      	b.n	8008a46 <UART_SetConfig+0x1f6e>
 8008a44:	2301      	movs	r3, #1
 8008a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	085b      	lsrs	r3, r3, #1
 8008a50:	441a      	add	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a5e:	e195      	b.n	8008d8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a60:	4b87      	ldr	r3, [pc, #540]	; (8008c80 <UART_SetConfig+0x21a8>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0320 	and.w	r3, r3, #32
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d05d      	beq.n	8008b28 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a6c:	4b84      	ldr	r3, [pc, #528]	; (8008c80 <UART_SetConfig+0x21a8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	08db      	lsrs	r3, r3, #3
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	4a83      	ldr	r2, [pc, #524]	; (8008c84 <UART_SetConfig+0x21ac>)
 8008a78:	40da      	lsrs	r2, r3
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d044      	beq.n	8008b0c <UART_SetConfig+0x2034>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d03e      	beq.n	8008b08 <UART_SetConfig+0x2030>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d038      	beq.n	8008b04 <UART_SetConfig+0x202c>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d032      	beq.n	8008b00 <UART_SetConfig+0x2028>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d02c      	beq.n	8008afc <UART_SetConfig+0x2024>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	2b05      	cmp	r3, #5
 8008aa8:	d026      	beq.n	8008af8 <UART_SetConfig+0x2020>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	2b06      	cmp	r3, #6
 8008ab0:	d020      	beq.n	8008af4 <UART_SetConfig+0x201c>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	2b07      	cmp	r3, #7
 8008ab8:	d01a      	beq.n	8008af0 <UART_SetConfig+0x2018>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d014      	beq.n	8008aec <UART_SetConfig+0x2014>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b09      	cmp	r3, #9
 8008ac8:	d00e      	beq.n	8008ae8 <UART_SetConfig+0x2010>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b0a      	cmp	r3, #10
 8008ad0:	d008      	beq.n	8008ae4 <UART_SetConfig+0x200c>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b0b      	cmp	r3, #11
 8008ad8:	d102      	bne.n	8008ae0 <UART_SetConfig+0x2008>
 8008ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ade:	e016      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e014      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008ae4:	2380      	movs	r3, #128	; 0x80
 8008ae6:	e012      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008ae8:	2340      	movs	r3, #64	; 0x40
 8008aea:	e010      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008aec:	2320      	movs	r3, #32
 8008aee:	e00e      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008af0:	2310      	movs	r3, #16
 8008af2:	e00c      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008af4:	230c      	movs	r3, #12
 8008af6:	e00a      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008af8:	230a      	movs	r3, #10
 8008afa:	e008      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008afc:	2308      	movs	r3, #8
 8008afe:	e006      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008b00:	2306      	movs	r3, #6
 8008b02:	e004      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008b04:	2304      	movs	r3, #4
 8008b06:	e002      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008b08:	2302      	movs	r3, #2
 8008b0a:	e000      	b.n	8008b0e <UART_SetConfig+0x2036>
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	441a      	add	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008b26:	e131      	b.n	8008d8c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d043      	beq.n	8008bb8 <UART_SetConfig+0x20e0>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d03d      	beq.n	8008bb4 <UART_SetConfig+0x20dc>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d037      	beq.n	8008bb0 <UART_SetConfig+0x20d8>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d031      	beq.n	8008bac <UART_SetConfig+0x20d4>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d02b      	beq.n	8008ba8 <UART_SetConfig+0x20d0>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b05      	cmp	r3, #5
 8008b56:	d025      	beq.n	8008ba4 <UART_SetConfig+0x20cc>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b06      	cmp	r3, #6
 8008b5e:	d01f      	beq.n	8008ba0 <UART_SetConfig+0x20c8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b07      	cmp	r3, #7
 8008b66:	d019      	beq.n	8008b9c <UART_SetConfig+0x20c4>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d013      	beq.n	8008b98 <UART_SetConfig+0x20c0>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b09      	cmp	r3, #9
 8008b76:	d00d      	beq.n	8008b94 <UART_SetConfig+0x20bc>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	2b0a      	cmp	r3, #10
 8008b7e:	d007      	beq.n	8008b90 <UART_SetConfig+0x20b8>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2b0b      	cmp	r3, #11
 8008b86:	d101      	bne.n	8008b8c <UART_SetConfig+0x20b4>
 8008b88:	4b3f      	ldr	r3, [pc, #252]	; (8008c88 <UART_SetConfig+0x21b0>)
 8008b8a:	e016      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008b8c:	4b3d      	ldr	r3, [pc, #244]	; (8008c84 <UART_SetConfig+0x21ac>)
 8008b8e:	e014      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008b90:	4b3e      	ldr	r3, [pc, #248]	; (8008c8c <UART_SetConfig+0x21b4>)
 8008b92:	e012      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008b94:	4b3e      	ldr	r3, [pc, #248]	; (8008c90 <UART_SetConfig+0x21b8>)
 8008b96:	e010      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008b98:	4b3e      	ldr	r3, [pc, #248]	; (8008c94 <UART_SetConfig+0x21bc>)
 8008b9a:	e00e      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008b9c:	4b3e      	ldr	r3, [pc, #248]	; (8008c98 <UART_SetConfig+0x21c0>)
 8008b9e:	e00c      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008ba0:	4b3e      	ldr	r3, [pc, #248]	; (8008c9c <UART_SetConfig+0x21c4>)
 8008ba2:	e00a      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008ba4:	4b3e      	ldr	r3, [pc, #248]	; (8008ca0 <UART_SetConfig+0x21c8>)
 8008ba6:	e008      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	; (8008ca4 <UART_SetConfig+0x21cc>)
 8008baa:	e006      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008bac:	4b3e      	ldr	r3, [pc, #248]	; (8008ca8 <UART_SetConfig+0x21d0>)
 8008bae:	e004      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008bb0:	4b3e      	ldr	r3, [pc, #248]	; (8008cac <UART_SetConfig+0x21d4>)
 8008bb2:	e002      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008bb4:	4b3e      	ldr	r3, [pc, #248]	; (8008cb0 <UART_SetConfig+0x21d8>)
 8008bb6:	e000      	b.n	8008bba <UART_SetConfig+0x20e2>
 8008bb8:	4b32      	ldr	r3, [pc, #200]	; (8008c84 <UART_SetConfig+0x21ac>)
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6852      	ldr	r2, [r2, #4]
 8008bbe:	0852      	lsrs	r2, r2, #1
 8008bc0:	441a      	add	r2, r3
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bce:	e0dd      	b.n	8008d8c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d046      	beq.n	8008c66 <UART_SetConfig+0x218e>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d040      	beq.n	8008c62 <UART_SetConfig+0x218a>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b02      	cmp	r3, #2
 8008be6:	d03a      	beq.n	8008c5e <UART_SetConfig+0x2186>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d034      	beq.n	8008c5a <UART_SetConfig+0x2182>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d02e      	beq.n	8008c56 <UART_SetConfig+0x217e>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b05      	cmp	r3, #5
 8008bfe:	d028      	beq.n	8008c52 <UART_SetConfig+0x217a>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	2b06      	cmp	r3, #6
 8008c06:	d022      	beq.n	8008c4e <UART_SetConfig+0x2176>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	2b07      	cmp	r3, #7
 8008c0e:	d01c      	beq.n	8008c4a <UART_SetConfig+0x2172>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	2b08      	cmp	r3, #8
 8008c16:	d016      	beq.n	8008c46 <UART_SetConfig+0x216e>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d00f      	beq.n	8008c40 <UART_SetConfig+0x2168>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	2b0a      	cmp	r3, #10
 8008c26:	d008      	beq.n	8008c3a <UART_SetConfig+0x2162>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	2b0b      	cmp	r3, #11
 8008c2e:	d102      	bne.n	8008c36 <UART_SetConfig+0x215e>
 8008c30:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008c34:	e018      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c36:	4b18      	ldr	r3, [pc, #96]	; (8008c98 <UART_SetConfig+0x21c0>)
 8008c38:	e016      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c3a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008c3e:	e013      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c40:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008c44:	e010      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c46:	4b1b      	ldr	r3, [pc, #108]	; (8008cb4 <UART_SetConfig+0x21dc>)
 8008c48:	e00e      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c4a:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <UART_SetConfig+0x21b0>)
 8008c4c:	e00c      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c4e:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <UART_SetConfig+0x21e0>)
 8008c50:	e00a      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c52:	4b1a      	ldr	r3, [pc, #104]	; (8008cbc <UART_SetConfig+0x21e4>)
 8008c54:	e008      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c56:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <UART_SetConfig+0x21b4>)
 8008c58:	e006      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c5a:	4b19      	ldr	r3, [pc, #100]	; (8008cc0 <UART_SetConfig+0x21e8>)
 8008c5c:	e004      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <UART_SetConfig+0x21b8>)
 8008c60:	e002      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c62:	4b0c      	ldr	r3, [pc, #48]	; (8008c94 <UART_SetConfig+0x21bc>)
 8008c64:	e000      	b.n	8008c68 <UART_SetConfig+0x2190>
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <UART_SetConfig+0x21c0>)
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6852      	ldr	r2, [r2, #4]
 8008c6c:	0852      	lsrs	r2, r2, #1
 8008c6e:	441a      	add	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c7c:	e086      	b.n	8008d8c <UART_SetConfig+0x22b4>
 8008c7e:	bf00      	nop
 8008c80:	58024400 	.word	0x58024400
 8008c84:	03d09000 	.word	0x03d09000
 8008c88:	0003d090 	.word	0x0003d090
 8008c8c:	0007a120 	.word	0x0007a120
 8008c90:	000f4240 	.word	0x000f4240
 8008c94:	001e8480 	.word	0x001e8480
 8008c98:	003d0900 	.word	0x003d0900
 8008c9c:	00516155 	.word	0x00516155
 8008ca0:	0061a800 	.word	0x0061a800
 8008ca4:	007a1200 	.word	0x007a1200
 8008ca8:	00a2c2aa 	.word	0x00a2c2aa
 8008cac:	00f42400 	.word	0x00f42400
 8008cb0:	01e84800 	.word	0x01e84800
 8008cb4:	0001e848 	.word	0x0001e848
 8008cb8:	00051615 	.word	0x00051615
 8008cbc:	00061a80 	.word	0x00061a80
 8008cc0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d04e      	beq.n	8008d6a <UART_SetConfig+0x2292>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d047      	beq.n	8008d64 <UART_SetConfig+0x228c>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d040      	beq.n	8008d5e <UART_SetConfig+0x2286>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b03      	cmp	r3, #3
 8008ce2:	d039      	beq.n	8008d58 <UART_SetConfig+0x2280>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d032      	beq.n	8008d52 <UART_SetConfig+0x227a>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2b05      	cmp	r3, #5
 8008cf2:	d02b      	beq.n	8008d4c <UART_SetConfig+0x2274>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b06      	cmp	r3, #6
 8008cfa:	d024      	beq.n	8008d46 <UART_SetConfig+0x226e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b07      	cmp	r3, #7
 8008d02:	d01d      	beq.n	8008d40 <UART_SetConfig+0x2268>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d016      	beq.n	8008d3a <UART_SetConfig+0x2262>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b09      	cmp	r3, #9
 8008d12:	d00f      	beq.n	8008d34 <UART_SetConfig+0x225c>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b0a      	cmp	r3, #10
 8008d1a:	d008      	beq.n	8008d2e <UART_SetConfig+0x2256>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b0b      	cmp	r3, #11
 8008d22:	d101      	bne.n	8008d28 <UART_SetConfig+0x2250>
 8008d24:	2380      	movs	r3, #128	; 0x80
 8008d26:	e022      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2c:	e01f      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d32:	e01c      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d38:	e019      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d3e:	e016      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d44:	e013      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d46:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008d4a:	e010      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d4c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008d50:	e00d      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d56:	e00a      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d58:	f241 5355 	movw	r3, #5461	; 0x1555
 8008d5c:	e007      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d62:	e004      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d68:	e001      	b.n	8008d6e <UART_SetConfig+0x2296>
 8008d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6852      	ldr	r2, [r2, #4]
 8008d72:	0852      	lsrs	r2, r2, #1
 8008d74:	441a      	add	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d82:	e003      	b.n	8008d8c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008d8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	2b0f      	cmp	r3, #15
 8008d90:	d908      	bls.n	8008da4 <UART_SetConfig+0x22cc>
 8008d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d98:	d204      	bcs.n	8008da4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008da0:	60da      	str	r2, [r3, #12]
 8008da2:	e002      	b.n	8008daa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2201      	movs	r2, #1
 8008dae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3740      	adds	r7, #64	; 0x40
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008dd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d00a      	beq.n	8008dfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	f003 0302 	and.w	r3, r3, #2
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00a      	beq.n	8008e20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00a      	beq.n	8008e42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e68:	f003 0310 	and.w	r3, r3, #16
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00a      	beq.n	8008ea8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01a      	beq.n	8008eea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed2:	d10a      	bne.n	8008eea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f28:	f7f8 fe5a 	bl	8001be0 <HAL_GetTick>
 8008f2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d10e      	bne.n	8008f5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f82c 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e022      	b.n	8008fa0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d10e      	bne.n	8008f86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f816 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e00c      	b.n	8008fa0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2220      	movs	r2, #32
 8008f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb8:	e062      	b.n	8009080 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d05e      	beq.n	8009080 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fc2:	f7f8 fe0d 	bl	8001be0 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d302      	bcc.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d11d      	bne.n	8009014 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fe6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0201 	bic.w	r2, r2, #1
 8008ff6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	e045      	b.n	80090a0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0304 	and.w	r3, r3, #4
 800901e:	2b00      	cmp	r3, #0
 8009020:	d02e      	beq.n	8009080 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800902c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009030:	d126      	bne.n	8009080 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800903a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800904a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689a      	ldr	r2, [r3, #8]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0201 	bic.w	r2, r2, #1
 800905a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e00f      	b.n	80090a0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	69da      	ldr	r2, [r3, #28]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	4013      	ands	r3, r2
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	429a      	cmp	r2, r3
 800908e:	bf0c      	ite	eq
 8009090:	2301      	moveq	r3, #1
 8009092:	2300      	movne	r3, #0
 8009094:	b2db      	uxtb	r3, r3
 8009096:	461a      	mov	r2, r3
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	429a      	cmp	r2, r3
 800909c:	d08d      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6899      	ldr	r1, [r3, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b08      	ldr	r3, [pc, #32]	; (80090ec <UART_EndRxTransfer+0x44>)
 80090cc:	400b      	ands	r3, r1
 80090ce:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80090de:	bf00      	nop
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	effffffe 	.word	0xeffffffe

080090f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7fd fcd8 	bl	8006ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009114:	bf00      	nop
 8009116:	3710      	adds	r7, #16
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}

0800911c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009132:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7fd fcb4 	bl	8006ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800919e:	2302      	movs	r3, #2
 80091a0:	e027      	b.n	80091f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2224      	movs	r2, #36	; 0x24
 80091ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0201 	bic.w	r2, r2, #1
 80091c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800920e:	2b01      	cmp	r3, #1
 8009210:	d101      	bne.n	8009216 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009212:	2302      	movs	r3, #2
 8009214:	e02d      	b.n	8009272 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2201      	movs	r2, #1
 800921a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2224      	movs	r2, #36	; 0x24
 8009222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0201 	bic.w	r2, r2, #1
 800923c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f850 	bl	80092f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2220      	movs	r2, #32
 8009264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}

0800927a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
 8009282:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800928a:	2b01      	cmp	r3, #1
 800928c:	d101      	bne.n	8009292 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800928e:	2302      	movs	r3, #2
 8009290:	e02d      	b.n	80092ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2224      	movs	r2, #36	; 0x24
 800929e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f022 0201 	bic.w	r2, r2, #1
 80092b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f812 	bl	80092f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2220      	movs	r2, #32
 80092e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092ec:	2300      	movs	r3, #0
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
	...

080092f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b089      	sub	sp, #36	; 0x24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009300:	4a2f      	ldr	r2, [pc, #188]	; (80093c0 <UARTEx_SetNbDataToProcess+0xc8>)
 8009302:	f107 0314 	add.w	r3, r7, #20
 8009306:	e892 0003 	ldmia.w	r2, {r0, r1}
 800930a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800930e:	4a2d      	ldr	r2, [pc, #180]	; (80093c4 <UARTEx_SetNbDataToProcess+0xcc>)
 8009310:	f107 030c 	add.w	r3, r7, #12
 8009314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009318:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009320:	2b00      	cmp	r3, #0
 8009322:	d108      	bne.n	8009336 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009334:	e03d      	b.n	80093b2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009336:	2308      	movs	r3, #8
 8009338:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800933a:	2308      	movs	r3, #8
 800933c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	0e5b      	lsrs	r3, r3, #25
 8009346:	b2db      	uxtb	r3, r3
 8009348:	f003 0307 	and.w	r3, r3, #7
 800934c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	0f5b      	lsrs	r3, r3, #29
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0307 	and.w	r3, r3, #7
 800935c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800935e:	7fbb      	ldrb	r3, [r7, #30]
 8009360:	7f3a      	ldrb	r2, [r7, #28]
 8009362:	f107 0120 	add.w	r1, r7, #32
 8009366:	440a      	add	r2, r1
 8009368:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800936c:	fb02 f303 	mul.w	r3, r2, r3
 8009370:	7f3a      	ldrb	r2, [r7, #28]
 8009372:	f107 0120 	add.w	r1, r7, #32
 8009376:	440a      	add	r2, r1
 8009378:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800937c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009380:	b29a      	uxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009388:	7ffb      	ldrb	r3, [r7, #31]
 800938a:	7f7a      	ldrb	r2, [r7, #29]
 800938c:	f107 0120 	add.w	r1, r7, #32
 8009390:	440a      	add	r2, r1
 8009392:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009396:	fb02 f303 	mul.w	r3, r2, r3
 800939a:	7f7a      	ldrb	r2, [r7, #29]
 800939c:	f107 0120 	add.w	r1, r7, #32
 80093a0:	440a      	add	r2, r1
 80093a2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80093a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093b2:	bf00      	nop
 80093b4:	3724      	adds	r7, #36	; 0x24
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	080099a8 	.word	0x080099a8
 80093c4:	080099b0 	.word	0x080099b0

080093c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093c8:	b084      	sub	sp, #16
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	f107 001c 	add.w	r0, r7, #28
 80093d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d120      	bne.n	8009422 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	4b25      	ldr	r3, [pc, #148]	; (8009488 <USB_CoreInit+0xc0>)
 80093f2:	4013      	ands	r3, r2
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009406:	2b01      	cmp	r3, #1
 8009408:	d105      	bne.n	8009416 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa5a 	bl	80098d0 <USB_CoreReset>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]
 8009420:	e01a      	b.n	8009458 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa4e 	bl	80098d0 <USB_CoreReset>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009442:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	639a      	str	r2, [r3, #56]	; 0x38
 800944a:	e005      	b.n	8009458 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009450:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800945a:	2b01      	cmp	r3, #1
 800945c:	d10b      	bne.n	8009476 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f043 0208 	orr.w	r2, r3, #8
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f043 0220 	orr.w	r2, r3, #32
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009476:	7bfb      	ldrb	r3, [r7, #15]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009482:	b004      	add	sp, #16
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	ffbdffbf 	.word	0xffbdffbf

0800948c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f023 0201 	bic.w	r2, r3, #1
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr

080094ae <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b082      	sub	sp, #8
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094c6:	78fb      	ldrb	r3, [r7, #3]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d106      	bne.n	80094da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60da      	str	r2, [r3, #12]
 80094d8:	e00b      	b.n	80094f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80094da:	78fb      	ldrb	r3, [r7, #3]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d106      	bne.n	80094ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60da      	str	r2, [r3, #12]
 80094ec:	e001      	b.n	80094f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e003      	b.n	80094fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80094f2:	2032      	movs	r0, #50	; 0x32
 80094f4:	f7f8 fb80 	bl	8001bf8 <HAL_Delay>

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009504:	b084      	sub	sp, #16
 8009506:	b580      	push	{r7, lr}
 8009508:	b086      	sub	sp, #24
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	e009      	b.n	8009538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3340      	adds	r3, #64	; 0x40
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	2200      	movs	r2, #0
 8009530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3301      	adds	r3, #1
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2b0e      	cmp	r3, #14
 800953c:	d9f2      	bls.n	8009524 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800953e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009540:	2b00      	cmp	r3, #0
 8009542:	d112      	bne.n	800956a <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009548:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	601a      	str	r2, [r3, #0]
 8009568:	e005      	b.n	8009576 <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800957c:	461a      	mov	r2, r3
 800957e:	2300      	movs	r3, #0
 8009580:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009588:	4619      	mov	r1, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009590:	461a      	mov	r2, r3
 8009592:	680b      	ldr	r3, [r1, #0]
 8009594:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	2b01      	cmp	r3, #1
 800959a:	d10c      	bne.n	80095b6 <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d104      	bne.n	80095ac <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095a2:	2100      	movs	r1, #0
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f961 	bl	800986c <USB_SetDevSpeed>
 80095aa:	e008      	b.n	80095be <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095ac:	2101      	movs	r1, #1
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f95c 	bl	800986c <USB_SetDevSpeed>
 80095b4:	e003      	b.n	80095be <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095b6:	2103      	movs	r1, #3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f957 	bl	800986c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095be:	2110      	movs	r1, #16
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f90b 	bl	80097dc <USB_FlushTxFifo>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f929 	bl	8009828 <USB_FlushRxFifo>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d001      	beq.n	80095e0 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e6:	461a      	mov	r2, r3
 80095e8:	2300      	movs	r3, #0
 80095ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095f2:	461a      	mov	r2, r3
 80095f4:	2300      	movs	r3, #0
 80095f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fe:	461a      	mov	r2, r3
 8009600:	2300      	movs	r3, #0
 8009602:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009604:	2300      	movs	r3, #0
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	e043      	b.n	8009692 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	015a      	lsls	r2, r3, #5
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800961c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009620:	d118      	bne.n	8009654 <USB_DevInit+0x150>
    {
      if (i == 0U)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	461a      	mov	r2, r3
 8009636:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	e013      	b.n	8009666 <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	015a      	lsls	r2, r3, #5
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4413      	add	r3, r2
 8009646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800964a:	461a      	mov	r2, r3
 800964c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	e008      	b.n	8009666 <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	015a      	lsls	r2, r3, #5
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	4413      	add	r3, r2
 800965c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009660:	461a      	mov	r2, r3
 8009662:	2300      	movs	r3, #0
 8009664:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009672:	461a      	mov	r2, r3
 8009674:	2300      	movs	r3, #0
 8009676:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009684:	461a      	mov	r2, r3
 8009686:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800968a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	3301      	adds	r3, #1
 8009690:	613b      	str	r3, [r7, #16]
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	429a      	cmp	r2, r3
 8009698:	d3b7      	bcc.n	800960a <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800969a:	2300      	movs	r3, #0
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	e043      	b.n	8009728 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096b6:	d118      	bne.n	80096ea <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ca:	461a      	mov	r2, r3
 80096cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096d0:	6013      	str	r3, [r2, #0]
 80096d2:	e013      	b.n	80096fc <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e0:	461a      	mov	r2, r3
 80096e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	e008      	b.n	80096fc <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	461a      	mov	r2, r3
 80096f8:	2300      	movs	r3, #0
 80096fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009708:	461a      	mov	r2, r3
 800970a:	2300      	movs	r3, #0
 800970c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971a:	461a      	mov	r2, r3
 800971c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009720:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	3301      	adds	r3, #1
 8009726:	613b      	str	r3, [r7, #16]
 8009728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	429a      	cmp	r2, r3
 800972e:	d3b7      	bcc.n	80096a0 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009736:	691b      	ldr	r3, [r3, #16]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800973e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009742:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8009744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009746:	2b01      	cmp	r3, #1
 8009748:	d110      	bne.n	800976c <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009750:	461a      	mov	r2, r3
 8009752:	4b1e      	ldr	r3, [pc, #120]	; (80097cc <USB_DevInit+0x2c8>)
 8009754:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009764:	4619      	mov	r1, r3
 8009766:	4b1a      	ldr	r3, [pc, #104]	; (80097d0 <USB_DevInit+0x2cc>)
 8009768:	4313      	orrs	r3, r2
 800976a:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009778:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2b00      	cmp	r3, #0
 800977e:	d105      	bne.n	800978c <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699b      	ldr	r3, [r3, #24]
 8009784:	f043 0210 	orr.w	r2, r3, #16
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	699a      	ldr	r2, [r3, #24]
 8009790:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <USB_DevInit+0x2d0>)
 8009792:	4313      	orrs	r3, r2
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800979a:	2b00      	cmp	r3, #0
 800979c:	d005      	beq.n	80097aa <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	f043 0208 	orr.w	r2, r3, #8
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d105      	bne.n	80097bc <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	4b08      	ldr	r3, [pc, #32]	; (80097d8 <USB_DevInit+0x2d4>)
 80097b6:	4313      	orrs	r3, r2
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3718      	adds	r7, #24
 80097c2:	46bd      	mov	sp, r7
 80097c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097c8:	b004      	add	sp, #16
 80097ca:	4770      	bx	lr
 80097cc:	00800100 	.word	0x00800100
 80097d0:	00010003 	.word	0x00010003
 80097d4:	803c3800 	.word	0x803c3800
 80097d8:	40000004 	.word	0x40000004

080097dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80097e6:	2300      	movs	r3, #0
 80097e8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	019b      	lsls	r3, r3, #6
 80097ee:	f043 0220 	orr.w	r2, r3, #32
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	3301      	adds	r3, #1
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	4a09      	ldr	r2, [pc, #36]	; (8009824 <USB_FlushTxFifo+0x48>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d901      	bls.n	8009808 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e006      	b.n	8009816 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	691b      	ldr	r3, [r3, #16]
 800980c:	f003 0320 	and.w	r3, r3, #32
 8009810:	2b20      	cmp	r3, #32
 8009812:	d0f0      	beq.n	80097f6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3714      	adds	r7, #20
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	00030d40 	.word	0x00030d40

08009828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2210      	movs	r2, #16
 8009838:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4a09      	ldr	r2, [pc, #36]	; (8009868 <USB_FlushRxFifo+0x40>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d901      	bls.n	800984c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009848:	2303      	movs	r3, #3
 800984a:	e006      	b.n	800985a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	691b      	ldr	r3, [r3, #16]
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b10      	cmp	r3, #16
 8009856:	d0f0      	beq.n	800983a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3714      	adds	r7, #20
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	00030d40 	.word	0x00030d40

0800986c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800986c:	b480      	push	{r7}
 800986e:	b085      	sub	sp, #20
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	78fb      	ldrb	r3, [r7, #3]
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800988c:	4313      	orrs	r3, r2
 800988e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3714      	adds	r7, #20
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr

0800989e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098b8:	f043 0302 	orr.w	r3, r3, #2
 80098bc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80098be:	2003      	movs	r0, #3
 80098c0:	f7f8 f99a 	bl	8001bf8 <HAL_Delay>

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80098d8:	2300      	movs	r3, #0
 80098da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3301      	adds	r3, #1
 80098e0:	60fb      	str	r3, [r7, #12]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	4a13      	ldr	r2, [pc, #76]	; (8009934 <USB_CoreReset+0x64>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d901      	bls.n	80098ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098ea:	2303      	movs	r3, #3
 80098ec:	e01b      	b.n	8009926 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	691b      	ldr	r3, [r3, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	daf2      	bge.n	80098dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f043 0201 	orr.w	r2, r3, #1
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	3301      	adds	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	4a09      	ldr	r2, [pc, #36]	; (8009934 <USB_CoreReset+0x64>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d901      	bls.n	8009918 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009914:	2303      	movs	r3, #3
 8009916:	e006      	b.n	8009926 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b01      	cmp	r3, #1
 8009922:	d0f0      	beq.n	8009906 <USB_CoreReset+0x36>

  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	00030d40 	.word	0x00030d40

08009938 <__libc_init_array>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	4e0d      	ldr	r6, [pc, #52]	; (8009970 <__libc_init_array+0x38>)
 800993c:	4c0d      	ldr	r4, [pc, #52]	; (8009974 <__libc_init_array+0x3c>)
 800993e:	1ba4      	subs	r4, r4, r6
 8009940:	10a4      	asrs	r4, r4, #2
 8009942:	2500      	movs	r5, #0
 8009944:	42a5      	cmp	r5, r4
 8009946:	d109      	bne.n	800995c <__libc_init_array+0x24>
 8009948:	4e0b      	ldr	r6, [pc, #44]	; (8009978 <__libc_init_array+0x40>)
 800994a:	4c0c      	ldr	r4, [pc, #48]	; (800997c <__libc_init_array+0x44>)
 800994c:	f000 f820 	bl	8009990 <_init>
 8009950:	1ba4      	subs	r4, r4, r6
 8009952:	10a4      	asrs	r4, r4, #2
 8009954:	2500      	movs	r5, #0
 8009956:	42a5      	cmp	r5, r4
 8009958:	d105      	bne.n	8009966 <__libc_init_array+0x2e>
 800995a:	bd70      	pop	{r4, r5, r6, pc}
 800995c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009960:	4798      	blx	r3
 8009962:	3501      	adds	r5, #1
 8009964:	e7ee      	b.n	8009944 <__libc_init_array+0xc>
 8009966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800996a:	4798      	blx	r3
 800996c:	3501      	adds	r5, #1
 800996e:	e7f2      	b.n	8009956 <__libc_init_array+0x1e>
 8009970:	080099d0 	.word	0x080099d0
 8009974:	080099d0 	.word	0x080099d0
 8009978:	080099d0 	.word	0x080099d0
 800997c:	080099d4 	.word	0x080099d4

08009980 <memset>:
 8009980:	4402      	add	r2, r0
 8009982:	4603      	mov	r3, r0
 8009984:	4293      	cmp	r3, r2
 8009986:	d100      	bne.n	800998a <memset+0xa>
 8009988:	4770      	bx	lr
 800998a:	f803 1b01 	strb.w	r1, [r3], #1
 800998e:	e7f9      	b.n	8009984 <memset+0x4>

08009990 <_init>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr

0800999c <_fini>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr

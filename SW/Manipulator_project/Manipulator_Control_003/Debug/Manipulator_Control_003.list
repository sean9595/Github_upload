
Manipulator_Control_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009718  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080099b0  080099b0  000199b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d0  080099d0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080099d0  080099d0  000199d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099d8  080099d8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099dc  080099dc  000199dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080099e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080099f0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08009a50  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000678  240000d0  08009ab0  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000748  08009ab0  00020748  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029bed  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000040ac  00000000  00000000  00049ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000015d8  00000000  00000000  0004dd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001440  00000000  00000000  0004f370  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038b79  00000000  00000000  000507b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001583c  00000000  00000000  00089329  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001655b7  00000000  00000000  0009eb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0020411c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005c3c  00000000  00000000  00204198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009998 	.word	0x08009998

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009998 	.word	0x08009998

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_ETH_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_ETH_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ETH_Init+0x90>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x90>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x90>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	3302      	adds	r3, #2
 80005fa:	22e1      	movs	r2, #225	; 0xe1
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x90>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x90>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3304      	adds	r3, #4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x90>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	3305      	adds	r3, #5
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_ETH_Init+0x90>)
 800061e:	2201      	movs	r2, #1
 8000620:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x90>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_ETH_Init+0x98>)
 8000626:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_ETH_Init+0x90>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_ETH_Init+0x9c>)
 800062c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x90>)
 8000630:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x90>)
 8000638:	f001 fdc8 	bl	80021cc <HAL_ETH_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa87 	bl	8000b54 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ETH_Init+0xa0>)
 800064c:	f009 f99c 	bl	8009988 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0xa0>)
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_ETH_Init+0xa0>)
 8000658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_ETH_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	240000ec 	.word	0x240000ec
 800066c:	40028000 	.word	0x40028000
 8000670:	24000070 	.word	0x24000070
 8000674:	24000010 	.word	0x24000010
 8000678:	2400015c 	.word	0x2400015c

0800067c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <HAL_ETH_MspInit+0x184>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f040 80ab 	bne.w	80007f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a6:	4a57      	ldr	r2, [pc, #348]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006be:	4b51      	ldr	r3, [pc, #324]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <HAL_ETH_MspInit+0x18c>)
 800078e:	f002 f933 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000792:	2386      	movs	r3, #134	; 0x86
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a2:	230b      	movs	r3, #11
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <HAL_ETH_MspInit+0x190>)
 80007ae:	f002 f923 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <HAL_ETH_MspInit+0x194>)
 80007d0:	f002 f912 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_ETH_MspInit+0x198>)
 80007f2:	f002 f901 	bl	80029f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40028000 	.word	0x40028000
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58021800 	.word	0x58021800

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x154>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <MX_GPIO_Init+0x154>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x154>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x154>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <MX_GPIO_Init+0x154>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x154>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x154>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x154>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x154>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x154>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x154>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x154>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ea:	f002 fa35 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008f4:	f002 fa30 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x160>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x164>)
 800090e:	f002 f873 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000912:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x158>)
 800092c:	f002 f864 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000948:	f002 f856 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000960:	f002 f84a 	bl	80029f8 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58021800 	.word	0x58021800
 8000978:	11110000 	.word	0x11110000
 800097c:	58020800 	.word	0x58020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f001 f8ac 	bl	8001ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f82c 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff44 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 8000990:	f7ff fe22 	bl	80005d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000994:	f000 ff52 	bl	800183c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f000 ffee 	bl	8001978 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800099c:	f000 fd4a 	bl	8001434 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fdd6 	bl	8001550 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  servo_initialize(0); //
 80009a4:	2000      	movs	r0, #0
 80009a6:	f000 f8dd 	bl	8000b64 <servo_initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  servo_goto(0, 0, 70);
 80009aa:	2246      	movs	r2, #70	; 0x46
 80009ac:	2100      	movs	r1, #0
 80009ae:	2000      	movs	r0, #0
 80009b0:	f000 fc4c 	bl	800124c <servo_goto>
				  if (!servo_is_running(0))
				  {
					  break;
				  }
			  }*/
			  HAL_Delay(3000);
 80009b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009b8:	f001 f920 	bl	8001bfc <HAL_Delay>
			  servo_goto(0, 1800, 30);
 80009bc:	221e      	movs	r2, #30
 80009be:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 fc42 	bl	800124c <servo_goto>
			  //servo_goto(1, 1800, 70);
			  while(1)
			  {
				  if (!servo_is_running(0))
 80009c8:	2000      	movs	r0, #0
 80009ca:	f000 fc57 	bl	800127c <servo_is_running>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d000      	beq.n	80009d6 <main+0x56>
 80009d4:	e7f8      	b.n	80009c8 <main+0x48>
				  {
					  break;
 80009d6:	bf00      	nop
				  }
			  }
			  HAL_Delay(3000);
 80009d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80009dc:	f001 f90e 	bl	8001bfc <HAL_Delay>
	  servo_goto(0, 0, 70);
 80009e0:	e7e3      	b.n	80009aa <main+0x2a>
	...

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0cc      	sub	sp, #304	; 0x130
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009ee:	224c      	movs	r2, #76	; 0x4c
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f008 ffc8 	bl	8009988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009fc:	2220      	movs	r2, #32
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f008 ffc1 	bl	8009988 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	23bc      	movs	r3, #188	; 0xbc
 8000a0e:	461a      	mov	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f008 ffb9 	bl	8009988 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f002 fb00 	bl	800301c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <SystemClock_Config+0x164>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	4a48      	ldr	r2, [pc, #288]	; (8000b48 <SystemClock_Config+0x164>)
 8000a28:	f023 0301 	bic.w	r3, r3, #1
 8000a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a2e:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <SystemClock_Config+0x164>)
 8000a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a32:	f003 0201 	and.w	r2, r3, #1
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <SystemClock_Config+0x168>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	4a43      	ldr	r2, [pc, #268]	; (8000b4c <SystemClock_Config+0x168>)
 8000a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a44:	6193      	str	r3, [r2, #24]
 8000a46:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <SystemClock_Config+0x168>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a56:	bf00      	nop
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <SystemClock_Config+0x168>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a64:	d1f8      	bne.n	8000a58 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a66:	2301      	movs	r3, #1
 8000a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a74:	2302      	movs	r3, #2
 8000a76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a86:	2318      	movs	r3, #24
 8000a88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 faf9 	bl	80030ac <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ac0:	f000 f848 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	233f      	movs	r3, #63	; 0x3f
 8000ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000af8:	2101      	movs	r1, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fe8e 	bl	800381c <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000b06:	f000 f825 	bl	8000b54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <SystemClock_Config+0x16c>)
 8000b10:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2200      	movs	r2, #0
 8000b18:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f9d4 	bl	8003ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8000b36:	f000 f80d 	bl	8000b54 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b3a:	f002 faa7 	bl	800308c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b3e:	bf00      	nop
 8000b40:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58000400 	.word	0x58000400
 8000b4c:	58024800 	.word	0x58024800
 8000b50:	00040002 	.word	0x00040002

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <servo_initialize>:

Servo servo[3];


void servo_initialize(int _servo_num)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if (!servo[0].enable && !servo[1].enable && !servo[2].enable)
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <servo_initialize+0x74>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10f      	bne.n	8000b94 <servo_initialize+0x30>
 8000b74:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <servo_initialize+0x74>)
 8000b76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d10b      	bne.n	8000b94 <servo_initialize+0x30>
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <servo_initialize+0x74>)
 8000b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d106      	bne.n	8000b94 <servo_initialize+0x30>
	{
		HAL_TIM_Base_Start_IT(&htim3);
 8000b86:	4815      	ldr	r0, [pc, #84]	; (8000bdc <servo_initialize+0x78>)
 8000b88:	f004 fcf0 	bl	800556c <HAL_TIM_Base_Start_IT>
		tim_reg = htim3.Instance;
 8000b8c:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <servo_initialize+0x78>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a13      	ldr	r2, [pc, #76]	; (8000be0 <servo_initialize+0x7c>)
 8000b92:	6013      	str	r3, [r2, #0]
	}

	switch (_servo_num)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d008      	beq.n	8000bac <servo_initialize+0x48>
 8000b9a:	2b02      	cmp	r3, #2
 8000b9c:	d00b      	beq.n	8000bb6 <servo_initialize+0x52>
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10e      	bne.n	8000bc0 <servo_initialize+0x5c>
	{
	case 0:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	480d      	ldr	r0, [pc, #52]	; (8000bdc <servo_initialize+0x78>)
 8000ba6:	f004 fd41 	bl	800562c <HAL_TIM_PWM_Start_IT>
		break;
 8000baa:	e009      	b.n	8000bc0 <servo_initialize+0x5c>
	case 1:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);
 8000bac:	2104      	movs	r1, #4
 8000bae:	480b      	ldr	r0, [pc, #44]	; (8000bdc <servo_initialize+0x78>)
 8000bb0:	f004 fd3c 	bl	800562c <HAL_TIM_PWM_Start_IT>
		break;
 8000bb4:	e004      	b.n	8000bc0 <servo_initialize+0x5c>
	case 2:
		HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_3);
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <servo_initialize+0x78>)
 8000bba:	f004 fd37 	bl	800562c <HAL_TIM_PWM_Start_IT>
		break;
 8000bbe:	bf00      	nop
	}

	servo[_servo_num].cur_angle = 0;
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <servo_initialize+0x74>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2134      	movs	r1, #52	; 0x34
 8000bc6:	fb01 f303 	mul.w	r3, r1, r3
 8000bca:	4413      	add	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	24000194 	.word	0x24000194
 8000bdc:	24000270 	.word	0x24000270
 8000be0:	24000190 	.word	0x24000190

08000be4 <servo_run>:

void servo_run(int _servo_num)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if (servo[_servo_num].delta != 0)
 8000bec:	4a11      	ldr	r2, [pc, #68]	; (8000c34 <servo_run+0x50>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2134      	movs	r1, #52	; 0x34
 8000bf2:	fb01 f303 	mul.w	r3, r1, r3
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3324      	adds	r3, #36	; 0x24
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d009      	beq.n	8000c14 <servo_run+0x30>
	{
		servo[_servo_num].run = 1;
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <servo_run+0x50>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2134      	movs	r1, #52	; 0x34
 8000c06:	fb01 f303 	mul.w	r3, r1, r3
 8000c0a:	4413      	add	r3, r2
 8000c0c:	332c      	adds	r3, #44	; 0x2c
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		servo[_servo_num].run = 0;
	}
}
 8000c12:	e008      	b.n	8000c26 <servo_run+0x42>
		servo[_servo_num].run = 0;
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <servo_run+0x50>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2134      	movs	r1, #52	; 0x34
 8000c1a:	fb01 f303 	mul.w	r3, r1, r3
 8000c1e:	4413      	add	r3, r2
 8000c20:	332c      	adds	r3, #44	; 0x2c
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	24000194 	.word	0x24000194

08000c38 <servo_update>:
	servo[_servo_num].delta = 0;
	servo[_servo_num].run = 0;
}

void servo_update()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
	int pulse = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]

	for (i = 0; i < 3; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	e0d2      	b.n	8000df2 <servo_update+0x1ba>
	{
		if (servo[i].run == 1 && servo[i].delta != 0)
 8000c4c:	4a6d      	ldr	r2, [pc, #436]	; (8000e04 <servo_update+0x1cc>)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	2134      	movs	r1, #52	; 0x34
 8000c52:	fb01 f303 	mul.w	r3, r1, r3
 8000c56:	4413      	add	r3, r2
 8000c58:	332c      	adds	r3, #44	; 0x2c
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	f040 80b3 	bne.w	8000dc8 <servo_update+0x190>
 8000c62:	4a68      	ldr	r2, [pc, #416]	; (8000e04 <servo_update+0x1cc>)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2134      	movs	r1, #52	; 0x34
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3324      	adds	r3, #36	; 0x24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 80a8 	beq.w	8000dc8 <servo_update+0x190>
		{
			servo_speed_update(i);
 8000c78:	6838      	ldr	r0, [r7, #0]
 8000c7a:	f000 f8c7 	bl	8000e0c <servo_speed_update>

			if (servo[i].delta > servo[i].cur_speed)
 8000c7e:	4a61      	ldr	r2, [pc, #388]	; (8000e04 <servo_update+0x1cc>)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2134      	movs	r1, #52	; 0x34
 8000c84:	fb01 f303 	mul.w	r3, r1, r3
 8000c88:	4413      	add	r3, r2
 8000c8a:	3324      	adds	r3, #36	; 0x24
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	495d      	ldr	r1, [pc, #372]	; (8000e04 <servo_update+0x1cc>)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2034      	movs	r0, #52	; 0x34
 8000c94:	fb00 f303 	mul.w	r3, r0, r3
 8000c98:	440b      	add	r3, r1
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	dd13      	ble.n	8000cca <servo_update+0x92>
			{
				pulse = servo[i].cur_speed * servo[i].direction;
 8000ca2:	4a58      	ldr	r2, [pc, #352]	; (8000e04 <servo_update+0x1cc>)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	2134      	movs	r1, #52	; 0x34
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	3308      	adds	r3, #8
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4954      	ldr	r1, [pc, #336]	; (8000e04 <servo_update+0x1cc>)
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	2034      	movs	r0, #52	; 0x34
 8000cb8:	fb00 f202 	mul.w	r2, r0, r2
 8000cbc:	440a      	add	r2, r1
 8000cbe:	3228      	adds	r2, #40	; 0x28
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	fb02 f303 	mul.w	r3, r2, r3
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	e012      	b.n	8000cf0 <servo_update+0xb8>
			}
			else
			{
				pulse = servo[i].delta * servo[i].direction;
 8000cca:	4a4e      	ldr	r2, [pc, #312]	; (8000e04 <servo_update+0x1cc>)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	2134      	movs	r1, #52	; 0x34
 8000cd0:	fb01 f303 	mul.w	r3, r1, r3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3324      	adds	r3, #36	; 0x24
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	494a      	ldr	r1, [pc, #296]	; (8000e04 <servo_update+0x1cc>)
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	2034      	movs	r0, #52	; 0x34
 8000ce0:	fb00 f202 	mul.w	r2, r0, r2
 8000ce4:	440a      	add	r2, r1
 8000ce6:	3228      	adds	r2, #40	; 0x28
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	fb02 f303 	mul.w	r3, r2, r3
 8000cee:	607b      	str	r3, [r7, #4]
			}

			servo[i].cur_angle += pulse;
 8000cf0:	4a44      	ldr	r2, [pc, #272]	; (8000e04 <servo_update+0x1cc>)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	2134      	movs	r1, #52	; 0x34
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	441a      	add	r2, r3
 8000d02:	4940      	ldr	r1, [pc, #256]	; (8000e04 <servo_update+0x1cc>)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	2034      	movs	r0, #52	; 0x34
 8000d08:	fb00 f303 	mul.w	r3, r0, r3
 8000d0c:	440b      	add	r3, r1
 8000d0e:	601a      	str	r2, [r3, #0]

			switch(i)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d010      	beq.n	8000d38 <servo_update+0x100>
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d01b      	beq.n	8000d52 <servo_update+0x11a>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d126      	bne.n	8000d6c <servo_update+0x134>
			{
			case 0:
				tim_reg->CCR1 = PULSE_L + servo[i].cur_angle;
 8000d1e:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <servo_update+0x1cc>)
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2134      	movs	r1, #52	; 0x34
 8000d24:	fb01 f303 	mul.w	r3, r1, r3
 8000d28:	4413      	add	r3, r2
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d30:	4b35      	ldr	r3, [pc, #212]	; (8000e08 <servo_update+0x1d0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000d36:	e019      	b.n	8000d6c <servo_update+0x134>
			case 1:
				tim_reg->CCR2 = PULSE_L + servo[i].cur_angle;
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <servo_update+0x1cc>)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2134      	movs	r1, #52	; 0x34
 8000d3e:	fb01 f303 	mul.w	r3, r1, r3
 8000d42:	4413      	add	r3, r2
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d4a:	4b2f      	ldr	r3, [pc, #188]	; (8000e08 <servo_update+0x1d0>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000d50:	e00c      	b.n	8000d6c <servo_update+0x134>
			case 2:
				tim_reg->CCR3 = PULSE_L + servo[i].cur_angle;
 8000d52:	4a2c      	ldr	r2, [pc, #176]	; (8000e04 <servo_update+0x1cc>)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2134      	movs	r1, #52	; 0x34
 8000d58:	fb01 f303 	mul.w	r3, r1, r3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <servo_update+0x1d0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000d6a:	bf00      	nop
			}

			servo[i].delta -= pulse * servo[i].direction;
 8000d6c:	4a25      	ldr	r2, [pc, #148]	; (8000e04 <servo_update+0x1cc>)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2134      	movs	r1, #52	; 0x34
 8000d72:	fb01 f303 	mul.w	r3, r1, r3
 8000d76:	4413      	add	r3, r2
 8000d78:	3324      	adds	r3, #36	; 0x24
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4921      	ldr	r1, [pc, #132]	; (8000e04 <servo_update+0x1cc>)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	2034      	movs	r0, #52	; 0x34
 8000d82:	fb00 f303 	mul.w	r3, r0, r3
 8000d86:	440b      	add	r3, r1
 8000d88:	3328      	adds	r3, #40	; 0x28
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	fb01 f303 	mul.w	r3, r1, r3
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	491b      	ldr	r1, [pc, #108]	; (8000e04 <servo_update+0x1cc>)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2034      	movs	r0, #52	; 0x34
 8000d9a:	fb00 f303 	mul.w	r3, r0, r3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3324      	adds	r3, #36	; 0x24
 8000da2:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps += 1;
 8000da4:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <servo_update+0x1cc>)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2134      	movs	r1, #52	; 0x34
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	331c      	adds	r3, #28
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	4913      	ldr	r1, [pc, #76]	; (8000e04 <servo_update+0x1cc>)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2034      	movs	r0, #52	; 0x34
 8000dbc:	fb00 f303 	mul.w	r3, r0, r3
 8000dc0:	440b      	add	r3, r1
 8000dc2:	331c      	adds	r3, #28
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	e011      	b.n	8000dec <servo_update+0x1b4>
		}
		else
		{
			servo[i].run = 0;
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <servo_update+0x1cc>)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	2134      	movs	r1, #52	; 0x34
 8000dce:	fb01 f303 	mul.w	r3, r1, r3
 8000dd2:	4413      	add	r3, r2
 8000dd4:	332c      	adds	r3, #44	; 0x2c
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps = 0;
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <servo_update+0x1cc>)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2134      	movs	r1, #52	; 0x34
 8000de0:	fb01 f303 	mul.w	r3, r1, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	331c      	adds	r3, #28
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	f77f af29 	ble.w	8000c4c <servo_update+0x14>
		}
	}
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000194 	.word	0x24000194
 8000e08:	24000190 	.word	0x24000190

08000e0c <servo_speed_update>:

void servo_speed_update(int _servo_num)
{
 8000e0c:	b490      	push	{r4, r7}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	int i = _servo_num;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60fb      	str	r3, [r7, #12]

	if ((servo[i].cur_steps > servo[i].acc_steps - 1) && (servo[i].cur_steps <= servo[i].acc_steps + servo[i].fixed_speed_steps - 1))
 8000e18:	4a6c      	ldr	r2, [pc, #432]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2134      	movs	r1, #52	; 0x34
 8000e1e:	fb01 f303 	mul.w	r3, r1, r3
 8000e22:	4413      	add	r3, r2
 8000e24:	331c      	adds	r3, #28
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4968      	ldr	r1, [pc, #416]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2034      	movs	r0, #52	; 0x34
 8000e2e:	fb00 f303 	mul.w	r3, r0, r3
 8000e32:	440b      	add	r3, r1
 8000e34:	3314      	adds	r3, #20
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	dd2c      	ble.n	8000e98 <servo_speed_update+0x8c>
 8000e3e:	4a63      	ldr	r2, [pc, #396]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2134      	movs	r1, #52	; 0x34
 8000e44:	fb01 f303 	mul.w	r3, r1, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	331c      	adds	r3, #28
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	495f      	ldr	r1, [pc, #380]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2034      	movs	r0, #52	; 0x34
 8000e54:	fb00 f303 	mul.w	r3, r0, r3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3314      	adds	r3, #20
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	485b      	ldr	r0, [pc, #364]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2434      	movs	r4, #52	; 0x34
 8000e64:	fb04 f303 	mul.w	r3, r4, r3
 8000e68:	4403      	add	r3, r0
 8000e6a:	3318      	adds	r3, #24
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	440b      	add	r3, r1
 8000e70:	3b01      	subs	r3, #1
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dc10      	bgt.n	8000e98 <servo_speed_update+0x8c>
	{
		servo[i].cur_speed = servo[i].dst_speed;
 8000e76:	4a55      	ldr	r2, [pc, #340]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2134      	movs	r1, #52	; 0x34
 8000e7c:	fb01 f303 	mul.w	r3, r1, r3
 8000e80:	4413      	add	r3, r2
 8000e82:	330c      	adds	r3, #12
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4951      	ldr	r1, [pc, #324]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2034      	movs	r0, #52	; 0x34
 8000e8c:	fb00 f303 	mul.w	r3, r0, r3
 8000e90:	440b      	add	r3, r1
 8000e92:	3308      	adds	r3, #8
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	e093      	b.n	8000fc0 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > 0) && (servo[i].cur_steps <= servo[i].acc_steps - 1))
 8000e98:	4a4c      	ldr	r2, [pc, #304]	; (8000fcc <servo_speed_update+0x1c0>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	2134      	movs	r1, #52	; 0x34
 8000e9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	331c      	adds	r3, #28
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dd2c      	ble.n	8000f06 <servo_speed_update+0xfa>
 8000eac:	4a47      	ldr	r2, [pc, #284]	; (8000fcc <servo_speed_update+0x1c0>)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2134      	movs	r1, #52	; 0x34
 8000eb2:	fb01 f303 	mul.w	r3, r1, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	331c      	adds	r3, #28
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4943      	ldr	r1, [pc, #268]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2034      	movs	r0, #52	; 0x34
 8000ec2:	fb00 f303 	mul.w	r3, r0, r3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3314      	adds	r3, #20
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dc19      	bgt.n	8000f06 <servo_speed_update+0xfa>
	{
		servo[i].cur_speed += servo[i].acc;
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2134      	movs	r1, #52	; 0x34
 8000ed8:	fb01 f303 	mul.w	r3, r1, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	3308      	adds	r3, #8
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	493a      	ldr	r1, [pc, #232]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2034      	movs	r0, #52	; 0x34
 8000ee8:	fb00 f303 	mul.w	r3, r0, r3
 8000eec:	440b      	add	r3, r1
 8000eee:	3320      	adds	r3, #32
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	441a      	add	r2, r3
 8000ef4:	4935      	ldr	r1, [pc, #212]	; (8000fcc <servo_speed_update+0x1c0>)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2034      	movs	r0, #52	; 0x34
 8000efa:	fb00 f303 	mul.w	r3, r0, r3
 8000efe:	440b      	add	r3, r1
 8000f00:	3308      	adds	r3, #8
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e05c      	b.n	8000fc0 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > servo[i].acc_steps + servo[i].fixed_speed_steps - 1) && (servo[i].cur_steps <= servo[i].total_steps - 1))
 8000f06:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2134      	movs	r1, #52	; 0x34
 8000f0c:	fb01 f303 	mul.w	r3, r1, r3
 8000f10:	4413      	add	r3, r2
 8000f12:	331c      	adds	r3, #28
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	492d      	ldr	r1, [pc, #180]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	2034      	movs	r0, #52	; 0x34
 8000f1c:	fb00 f303 	mul.w	r3, r0, r3
 8000f20:	440b      	add	r3, r1
 8000f22:	3314      	adds	r3, #20
 8000f24:	6819      	ldr	r1, [r3, #0]
 8000f26:	4829      	ldr	r0, [pc, #164]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2434      	movs	r4, #52	; 0x34
 8000f2c:	fb04 f303 	mul.w	r3, r4, r3
 8000f30:	4403      	add	r3, r0
 8000f32:	3318      	adds	r3, #24
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	440b      	add	r3, r1
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dd2c      	ble.n	8000f98 <servo_speed_update+0x18c>
 8000f3e:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2134      	movs	r1, #52	; 0x34
 8000f44:	fb01 f303 	mul.w	r3, r1, r3
 8000f48:	4413      	add	r3, r2
 8000f4a:	331c      	adds	r3, #28
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	491f      	ldr	r1, [pc, #124]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2034      	movs	r0, #52	; 0x34
 8000f54:	fb00 f303 	mul.w	r3, r0, r3
 8000f58:	440b      	add	r3, r1
 8000f5a:	3310      	adds	r3, #16
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dc19      	bgt.n	8000f98 <servo_speed_update+0x18c>
	{
		servo[i].cur_speed -= servo[i].acc;
 8000f64:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	2134      	movs	r1, #52	; 0x34
 8000f6a:	fb01 f303 	mul.w	r3, r1, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	3308      	adds	r3, #8
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4915      	ldr	r1, [pc, #84]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2034      	movs	r0, #52	; 0x34
 8000f7a:	fb00 f303 	mul.w	r3, r0, r3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3320      	adds	r3, #32
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	1ad2      	subs	r2, r2, r3
 8000f86:	4911      	ldr	r1, [pc, #68]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2034      	movs	r0, #52	; 0x34
 8000f8c:	fb00 f303 	mul.w	r3, r0, r3
 8000f90:	440b      	add	r3, r1
 8000f92:	3308      	adds	r3, #8
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e013      	b.n	8000fc0 <servo_speed_update+0x1b4>
	}
	else if (servo[i].cur_steps == 0)
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <servo_speed_update+0x1c0>)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2134      	movs	r1, #52	; 0x34
 8000f9e:	fb01 f303 	mul.w	r3, r1, r3
 8000fa2:	4413      	add	r3, r2
 8000fa4:	331c      	adds	r3, #28
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <servo_speed_update+0x1b4>
	{
		servo[i].cur_speed = BASE_SPEED;
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <servo_speed_update+0x1c0>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2134      	movs	r1, #52	; 0x34
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3308      	adds	r3, #8
 8000fba:	2205      	movs	r2, #5
 8000fbc:	601a      	str	r2, [r3, #0]
	}
}
 8000fbe:	e7ff      	b.n	8000fc0 <servo_speed_update+0x1b4>
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc90      	pop	{r4, r7}
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	24000194 	.word	0x24000194

08000fd0 <servo_set_angle>:

void servo_set_angle(int _servo_num, int _angle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

	if (_angle > 1800)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000fe4:	dd03      	ble.n	8000fee <servo_set_angle+0x1e>
	{
		_angle = 1800;
 8000fe6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	e004      	b.n	8000ff8 <servo_set_angle+0x28>
	}
	else if (_angle < 0)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da01      	bge.n	8000ff8 <servo_set_angle+0x28>
	{
		_angle = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	603b      	str	r3, [r7, #0]
	}

	servo[i].dst_angle = _angle;
 8000ff8:	4a6f      	ldr	r2, [pc, #444]	; (80011b8 <servo_set_angle+0x1e8>)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2134      	movs	r1, #52	; 0x34
 8000ffe:	fb01 f303 	mul.w	r3, r1, r3
 8001002:	4413      	add	r3, r2
 8001004:	3304      	adds	r3, #4
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	601a      	str	r2, [r3, #0]
	servo[i].delta = servo[i].dst_angle - servo[i].cur_angle;
 800100a:	4a6b      	ldr	r2, [pc, #428]	; (80011b8 <servo_set_angle+0x1e8>)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2134      	movs	r1, #52	; 0x34
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	4413      	add	r3, r2
 8001016:	3304      	adds	r3, #4
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4967      	ldr	r1, [pc, #412]	; (80011b8 <servo_set_angle+0x1e8>)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2034      	movs	r0, #52	; 0x34
 8001020:	fb00 f303 	mul.w	r3, r0, r3
 8001024:	440b      	add	r3, r1
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	1ad2      	subs	r2, r2, r3
 800102a:	4963      	ldr	r1, [pc, #396]	; (80011b8 <servo_set_angle+0x1e8>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2034      	movs	r0, #52	; 0x34
 8001030:	fb00 f303 	mul.w	r3, r0, r3
 8001034:	440b      	add	r3, r1
 8001036:	3324      	adds	r3, #36	; 0x24
 8001038:	601a      	str	r2, [r3, #0]

	if (servo[i].delta < 0)
 800103a:	4a5f      	ldr	r2, [pc, #380]	; (80011b8 <servo_set_angle+0x1e8>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2134      	movs	r1, #52	; 0x34
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	3324      	adds	r3, #36	; 0x24
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	da16      	bge.n	800107c <servo_set_angle+0xac>
	{
		servo_set_direction(i, CW);
 800104e:	f04f 31ff 	mov.w	r1, #4294967295
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f8e4 	bl	8001220 <servo_set_direction>
		servo[i].delta *= -1;
 8001058:	4a57      	ldr	r2, [pc, #348]	; (80011b8 <servo_set_angle+0x1e8>)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2134      	movs	r1, #52	; 0x34
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4413      	add	r3, r2
 8001064:	3324      	adds	r3, #36	; 0x24
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	425a      	negs	r2, r3
 800106a:	4953      	ldr	r1, [pc, #332]	; (80011b8 <servo_set_angle+0x1e8>)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2034      	movs	r0, #52	; 0x34
 8001070:	fb00 f303 	mul.w	r3, r0, r3
 8001074:	440b      	add	r3, r1
 8001076:	3324      	adds	r3, #36	; 0x24
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	e00e      	b.n	800109a <servo_set_angle+0xca>
	}
	else if(servo[i].delta > 0)
 800107c:	4a4e      	ldr	r2, [pc, #312]	; (80011b8 <servo_set_angle+0x1e8>)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2134      	movs	r1, #52	; 0x34
 8001082:	fb01 f303 	mul.w	r3, r1, r3
 8001086:	4413      	add	r3, r2
 8001088:	3324      	adds	r3, #36	; 0x24
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	f340 808f 	ble.w	80011b0 <servo_set_angle+0x1e0>
	{
		servo_set_direction(i, CCW);
 8001092:	2101      	movs	r1, #1
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f8c3 	bl	8001220 <servo_set_direction>
	else
	{
		return; //Hard fault issue occurs when the value of .delta is equal to zero.
	}

	servo[i].total_steps = servo[i].delta / (servo[i].dst_speed - ACC_RATIO * (servo[i].dst_speed - BASE_SPEED));
 800109a:	4a47      	ldr	r2, [pc, #284]	; (80011b8 <servo_set_angle+0x1e8>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2134      	movs	r1, #52	; 0x34
 80010a0:	fb01 f303 	mul.w	r3, r1, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	3324      	adds	r3, #36	; 0x24
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80010b2:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <servo_set_angle+0x1e8>)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2134      	movs	r1, #52	; 0x34
 80010b8:	fb01 f303 	mul.w	r3, r1, r3
 80010bc:	4413      	add	r3, r2
 80010be:	330c      	adds	r3, #12
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80010ca:	4a3b      	ldr	r2, [pc, #236]	; (80011b8 <servo_set_angle+0x1e8>)
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2134      	movs	r1, #52	; 0x34
 80010d0:	fb01 f303 	mul.w	r3, r1, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	330c      	adds	r3, #12
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3b05      	subs	r3, #5
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010e4:	eeb4 4b00 	vmov.f64	d4, #64	; 0x3e000000  0.125
 80010e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80010ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80010f0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80010f8:	ee17 0a90 	vmov	r0, s15
 80010fc:	4a2e      	ldr	r2, [pc, #184]	; (80011b8 <servo_set_angle+0x1e8>)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2134      	movs	r1, #52	; 0x34
 8001102:	fb01 f303 	mul.w	r3, r1, r3
 8001106:	4413      	add	r3, r2
 8001108:	3310      	adds	r3, #16
 800110a:	6018      	str	r0, [r3, #0]
	servo[i].acc_steps = ACC_RATIO * servo[i].total_steps;
 800110c:	4a2a      	ldr	r2, [pc, #168]	; (80011b8 <servo_set_angle+0x1e8>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2134      	movs	r1, #52	; 0x34
 8001112:	fb01 f303 	mul.w	r3, r1, r3
 8001116:	4413      	add	r3, r2
 8001118:	3310      	adds	r3, #16
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001124:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 8001128:	ee27 7b06 	vmul.f64	d7, d7, d6
 800112c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001130:	ee17 0a90 	vmov	r0, s15
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <servo_set_angle+0x1e8>)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2134      	movs	r1, #52	; 0x34
 800113a:	fb01 f303 	mul.w	r3, r1, r3
 800113e:	4413      	add	r3, r2
 8001140:	3314      	adds	r3, #20
 8001142:	6018      	str	r0, [r3, #0]
	servo[i].fixed_speed_steps = servo[i].total_steps - 2 * servo[i].acc_steps;
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <servo_set_angle+0x1e8>)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2134      	movs	r1, #52	; 0x34
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	4413      	add	r3, r2
 8001150:	3310      	adds	r3, #16
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4918      	ldr	r1, [pc, #96]	; (80011b8 <servo_set_angle+0x1e8>)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2034      	movs	r0, #52	; 0x34
 800115a:	fb00 f303 	mul.w	r3, r0, r3
 800115e:	440b      	add	r3, r1
 8001160:	3314      	adds	r3, #20
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	4913      	ldr	r1, [pc, #76]	; (80011b8 <servo_set_angle+0x1e8>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2034      	movs	r0, #52	; 0x34
 800116e:	fb00 f303 	mul.w	r3, r0, r3
 8001172:	440b      	add	r3, r1
 8001174:	3318      	adds	r3, #24
 8001176:	601a      	str	r2, [r3, #0]
	servo[i].acc = (servo[i].dst_speed - BASE_SPEED) / servo[i].acc_steps;
 8001178:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <servo_set_angle+0x1e8>)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2134      	movs	r1, #52	; 0x34
 800117e:	fb01 f303 	mul.w	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	330c      	adds	r3, #12
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	1f5a      	subs	r2, r3, #5
 800118a:	490b      	ldr	r1, [pc, #44]	; (80011b8 <servo_set_angle+0x1e8>)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2034      	movs	r0, #52	; 0x34
 8001190:	fb00 f303 	mul.w	r3, r0, r3
 8001194:	440b      	add	r3, r1
 8001196:	3314      	adds	r3, #20
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	fb92 f2f3 	sdiv	r2, r2, r3
 800119e:	4906      	ldr	r1, [pc, #24]	; (80011b8 <servo_set_angle+0x1e8>)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2034      	movs	r0, #52	; 0x34
 80011a4:	fb00 f303 	mul.w	r3, r0, r3
 80011a8:	440b      	add	r3, r1
 80011aa:	3320      	adds	r3, #32
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	e000      	b.n	80011b2 <servo_set_angle+0x1e2>
		return; //Hard fault issue occurs when the value of .delta is equal to zero.
 80011b0:	bf00      	nop
}
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	24000194 	.word	0x24000194

080011bc <servo_set_speed>:

void servo_set_speed(int _servo_num, int _speed)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
	int i = _servo_num;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

	if (_speed > MAX_SPEED)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b32      	cmp	r3, #50	; 0x32
 80011ce:	dd09      	ble.n	80011e4 <servo_set_speed+0x28>
	{
		servo[i].dst_speed = MAX_SPEED;
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <servo_set_speed+0x60>)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2134      	movs	r1, #52	; 0x34
 80011d6:	fb01 f303 	mul.w	r3, r1, r3
 80011da:	4413      	add	r3, r2
 80011dc:	330c      	adds	r3, #12
 80011de:	2232      	movs	r2, #50	; 0x32
 80011e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		servo[i].dst_speed = _speed;
	}
}
 80011e2:	e015      	b.n	8001210 <servo_set_speed+0x54>
	else if (_speed < MIN_SPEED)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2b09      	cmp	r3, #9
 80011e8:	dc09      	bgt.n	80011fe <servo_set_speed+0x42>
		servo[i].dst_speed = MIN_SPEED;
 80011ea:	4a0c      	ldr	r2, [pc, #48]	; (800121c <servo_set_speed+0x60>)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2134      	movs	r1, #52	; 0x34
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	330c      	adds	r3, #12
 80011f8:	220a      	movs	r2, #10
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	e008      	b.n	8001210 <servo_set_speed+0x54>
		servo[i].dst_speed = _speed;
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <servo_set_speed+0x60>)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2134      	movs	r1, #52	; 0x34
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	330c      	adds	r3, #12
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	24000194 	.word	0x24000194

08001220 <servo_set_direction>:

void servo_set_direction(int _servo_num, int _direction)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	servo[_servo_num].direction = _direction;
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <servo_set_direction+0x28>)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2134      	movs	r1, #52	; 0x34
 8001230:	fb01 f303 	mul.w	r3, r1, r3
 8001234:	4413      	add	r3, r2
 8001236:	3328      	adds	r3, #40	; 0x28
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	24000194 	.word	0x24000194

0800124c <servo_goto>:

void servo_goto(int _servo_num, int _val, int _speed)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
	if (_speed != 0)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <servo_goto+0x1a>
	{
		servo_set_speed(_servo_num, _speed);
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff ffab 	bl	80011bc <servo_set_speed>
	}

	servo_set_angle(_servo_num, _val);
 8001266:	68b9      	ldr	r1, [r7, #8]
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f7ff feb1 	bl	8000fd0 <servo_set_angle>
	servo_run(_servo_num);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f7ff fcb8 	bl	8000be4 <servo_run>
}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <servo_is_running>:
	servo_set_angle(_servo_num, servo[_servo_num].cur_angle + _val * _direction);
	servo_run(_servo_num);
}

int servo_is_running(int _servo_num)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	return servo[_servo_num].run;
 8001284:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <servo_is_running+0x24>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2134      	movs	r1, #52	; 0x34
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	4413      	add	r3, r2
 8001290:	332c      	adds	r3, #44	; 0x2c
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	24000194 	.word	0x24000194

080012a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x30>)
 80012ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <HAL_MspInit+0x30>)
 80012b2:	f043 0302 	orr.w	r3, r3, #2
 80012b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_MspInit+0x30>)
 80012bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	58024400 	.word	0x58024400

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <MemManage_Handler+0x4>

080012f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <UsageFault_Handler+0x4>

080012fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132c:	f000 fc46 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}

08001334 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001338:	4802      	ldr	r0, [pc, #8]	; (8001344 <TIM3_IRQHandler+0x10>)
 800133a:	f004 fa15 	bl	8005768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	24000270 	.word	0x24000270

08001348 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800134c:	4802      	ldr	r0, [pc, #8]	; (8001358 <TIM4_IRQHandler+0x10>)
 800134e:	f004 fa0b 	bl	8005768 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	24000230 	.word	0x24000230

0800135c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001360:	4802      	ldr	r0, [pc, #8]	; (800136c <USART3_IRQHandler+0x10>)
 8001362:	f005 fa27 	bl	80067b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	240002b0 	.word	0x240002b0

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <SystemInit+0xac>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <SystemInit+0xac>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <SystemInit+0xb0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <SystemInit+0xb0>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <SystemInit+0xb0>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <SystemInit+0xb0>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4921      	ldr	r1, [pc, #132]	; (8001420 <SystemInit+0xb0>)
 800139c:	4b21      	ldr	r3, [pc, #132]	; (8001424 <SystemInit+0xb4>)
 800139e:	4013      	ands	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <SystemInit+0xb0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <SystemInit+0xb0>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <SystemInit+0xb0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <SystemInit+0xb0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <SystemInit+0xb0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <SystemInit+0xb0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <SystemInit+0xb0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80013cc:	4b14      	ldr	r3, [pc, #80]	; (8001420 <SystemInit+0xb0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <SystemInit+0xb0>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <SystemInit+0xb0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <SystemInit+0xb0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <SystemInit+0xb0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <SystemInit+0xb0>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <SystemInit+0xb0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <SystemInit+0xb8>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <SystemInit+0xbc>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001402:	d202      	bcs.n	800140a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <SystemInit+0xc0>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SystemInit+0xac>)
 800140c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001410:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00
 8001420:	58024400 	.word	0x58024400
 8001424:	eaf6ed7f 	.word	0xeaf6ed7f
 8001428:	5c001000 	.word	0x5c001000
 800142c:	ffff0000 	.word	0xffff0000
 8001430:	51008108 	.word	0x51008108

08001434 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001454:	463b      	mov	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
 8001462:	615a      	str	r2, [r3, #20]
 8001464:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001466:	4b38      	ldr	r3, [pc, #224]	; (8001548 <MX_TIM3_Init+0x114>)
 8001468:	4a38      	ldr	r2, [pc, #224]	; (800154c <MX_TIM3_Init+0x118>)
 800146a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <MX_TIM3_Init+0x114>)
 800146e:	225f      	movs	r2, #95	; 0x5f
 8001470:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b35      	ldr	r3, [pc, #212]	; (8001548 <MX_TIM3_Init+0x114>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001478:	4b33      	ldr	r3, [pc, #204]	; (8001548 <MX_TIM3_Init+0x114>)
 800147a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800147e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001480:	4b31      	ldr	r3, [pc, #196]	; (8001548 <MX_TIM3_Init+0x114>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <MX_TIM3_Init+0x114>)
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800148c:	482e      	ldr	r0, [pc, #184]	; (8001548 <MX_TIM3_Init+0x114>)
 800148e:	f004 f841 	bl	8005514 <HAL_TIM_Base_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001498:	f7ff fb5c 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4827      	ldr	r0, [pc, #156]	; (8001548 <MX_TIM3_Init+0x114>)
 80014aa:	f004 fb95 	bl	8005bd8 <HAL_TIM_ConfigClockSource>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80014b4:	f7ff fb4e 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014b8:	4823      	ldr	r0, [pc, #140]	; (8001548 <MX_TIM3_Init+0x114>)
 80014ba:	f004 f881 	bl	80055c0 <HAL_TIM_PWM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80014c4:	f7ff fb46 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4619      	mov	r1, r3
 80014d6:	481c      	ldr	r0, [pc, #112]	; (8001548 <MX_TIM3_Init+0x114>)
 80014d8:	f005 f8a2 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014e2:	f7ff fb37 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e6:	2360      	movs	r3, #96	; 0x60
 80014e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2200      	movs	r2, #0
 80014fa:	4619      	mov	r1, r3
 80014fc:	4812      	ldr	r0, [pc, #72]	; (8001548 <MX_TIM3_Init+0x114>)
 80014fe:	f004 fa53 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001508:	f7ff fb24 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	2204      	movs	r2, #4
 8001510:	4619      	mov	r1, r3
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <MX_TIM3_Init+0x114>)
 8001514:	f004 fa48 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800151e:	f7ff fb19 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2208      	movs	r2, #8
 8001526:	4619      	mov	r1, r3
 8001528:	4807      	ldr	r0, [pc, #28]	; (8001548 <MX_TIM3_Init+0x114>)
 800152a:	f004 fa3d 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001534:	f7ff fb0e 	bl	8000b54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <MX_TIM3_Init+0x114>)
 800153a:	f000 f8c7 	bl	80016cc <HAL_TIM_MspPostInit>

}
 800153e:	bf00      	nop
 8001540:	3738      	adds	r7, #56	; 0x38
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	24000270 	.word	0x24000270
 800154c:	40000400 	.word	0x40000400

08001550 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08e      	sub	sp, #56	; 0x38
 8001554:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001570:	463b      	mov	r3, r7
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	611a      	str	r2, [r3, #16]
 800157e:	615a      	str	r2, [r3, #20]
 8001580:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <MX_TIM4_Init+0xe4>)
 8001584:	4a2c      	ldr	r2, [pc, #176]	; (8001638 <MX_TIM4_Init+0xe8>)
 8001586:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <MX_TIM4_Init+0xe4>)
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <MX_TIM4_Init+0xe4>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <MX_TIM4_Init+0xe4>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <MX_TIM4_Init+0xe4>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MX_TIM4_Init+0xe4>)
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015a6:	4823      	ldr	r0, [pc, #140]	; (8001634 <MX_TIM4_Init+0xe4>)
 80015a8:	f003 ffb4 	bl	8005514 <HAL_TIM_Base_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80015b2:	f7ff facf 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c0:	4619      	mov	r1, r3
 80015c2:	481c      	ldr	r0, [pc, #112]	; (8001634 <MX_TIM4_Init+0xe4>)
 80015c4:	f004 fb08 	bl	8005bd8 <HAL_TIM_ConfigClockSource>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80015ce:	f7ff fac1 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015d2:	4818      	ldr	r0, [pc, #96]	; (8001634 <MX_TIM4_Init+0xe4>)
 80015d4:	f003 fff4 	bl	80055c0 <HAL_TIM_PWM_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80015de:	f7ff fab9 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	4619      	mov	r1, r3
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <MX_TIM4_Init+0xe4>)
 80015f2:	f005 f815 	bl	8006620 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80015fc:	f7ff faaa 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001600:	2360      	movs	r3, #96	; 0x60
 8001602:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001608:	2300      	movs	r3, #0
 800160a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	4619      	mov	r1, r3
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <MX_TIM4_Init+0xe4>)
 8001618:	f004 f9c6 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001622:	f7ff fa97 	bl	8000b54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001626:	4803      	ldr	r0, [pc, #12]	; (8001634 <MX_TIM4_Init+0xe4>)
 8001628:	f000 f850 	bl	80016cc <HAL_TIM_MspPostInit>

}
 800162c:	bf00      	nop
 800162e:	3738      	adds	r7, #56	; 0x38
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24000230 	.word	0x24000230
 8001638:	40000800 	.word	0x40000800

0800163c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_TIM_Base_MspInit+0x84>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d117      	bne.n	800167e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800164e:	4b1d      	ldr	r3, [pc, #116]	; (80016c4 <HAL_TIM_Base_MspInit+0x88>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_TIM_Base_MspInit+0x88>)
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800165e:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_TIM_Base_MspInit+0x88>)
 8001660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	201d      	movs	r0, #29
 8001672:	f000 fbe0 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001676:	201d      	movs	r0, #29
 8001678:	f000 fbf7 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800167c:	e01b      	b.n	80016b6 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_TIM_Base_MspInit+0x8c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d116      	bne.n	80016b6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_TIM_Base_MspInit+0x88>)
 800168a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800168e:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_TIM_Base_MspInit+0x88>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001698:	4b0a      	ldr	r3, [pc, #40]	; (80016c4 <HAL_TIM_Base_MspInit+0x88>)
 800169a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	201e      	movs	r0, #30
 80016ac:	f000 fbc3 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016b0:	201e      	movs	r0, #30
 80016b2:	f000 fbda 	bl	8001e6a <HAL_NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40000400 	.word	0x40000400
 80016c4:	58024400 	.word	0x58024400
 80016c8:	40000800 	.word	0x40000800

080016cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08c      	sub	sp, #48	; 0x30
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a44      	ldr	r2, [pc, #272]	; (80017fc <HAL_TIM_MspPostInit+0x130>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d15d      	bne.n	80017aa <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	4b44      	ldr	r3, [pc, #272]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 80016f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f4:	4a42      	ldr	r2, [pc, #264]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 8001700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 800170e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001712:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800171c:	4b38      	ldr	r3, [pc, #224]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 800171e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a33      	ldr	r2, [pc, #204]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001748:	2340      	movs	r3, #64	; 0x40
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001758:	2302      	movs	r3, #2
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4828      	ldr	r0, [pc, #160]	; (8001804 <HAL_TIM_MspPostInit+0x138>)
 8001764:	f001 f948 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176c:	2302      	movs	r3, #2
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001778:	2302      	movs	r3, #2
 800177a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	4619      	mov	r1, r3
 8001782:	4821      	ldr	r0, [pc, #132]	; (8001808 <HAL_TIM_MspPostInit+0x13c>)
 8001784:	f001 f938 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001798:	2302      	movs	r3, #2
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179c:	f107 031c 	add.w	r3, r7, #28
 80017a0:	4619      	mov	r1, r3
 80017a2:	481a      	ldr	r0, [pc, #104]	; (800180c <HAL_TIM_MspPostInit+0x140>)
 80017a4:	f001 f928 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017a8:	e024      	b.n	80017f4 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_TIM_MspPostInit+0x144>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d11f      	bne.n	80017f4 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ba:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_TIM_MspPostInit+0x134>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017e4:	2302      	movs	r3, #2
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4809      	ldr	r0, [pc, #36]	; (8001814 <HAL_TIM_MspPostInit+0x148>)
 80017f0:	f001 f902 	bl	80029f8 <HAL_GPIO_Init>
}
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	; 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40000400 	.word	0x40000400
 8001800:	58024400 	.word	0x58024400
 8001804:	58020000 	.word	0x58020000
 8001808:	58020400 	.word	0x58020400
 800180c:	58020800 	.word	0x58020800
 8001810:	40000800 	.word	0x40000800
 8001814:	58020c00 	.word	0x58020c00

08001818 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b04      	ldr	r3, [pc, #16]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d101      	bne.n	8001830 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		servo_update();
 800182c:	f7ff fa04 	bl	8000c38 <servo_update>
	}
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	24000270 	.word	0x24000270

0800183c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <MX_USART3_UART_Init+0x94>)
 8001844:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800184c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001854:	4b1d      	ldr	r3, [pc, #116]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001856:	2200      	movs	r2, #0
 8001858:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_USART3_UART_Init+0x90>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001862:	220c      	movs	r2, #12
 8001864:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <MX_USART3_UART_Init+0x90>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_USART3_UART_Init+0x90>)
 800187a:	2200      	movs	r2, #0
 800187c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001886:	f004 ff45 	bl	8006714 <HAL_UART_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001890:	f7ff f960 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	480d      	ldr	r0, [pc, #52]	; (80018cc <MX_USART3_UART_Init+0x90>)
 8001898:	f007 fcb5 	bl	8009206 <HAL_UARTEx_SetTxFifoThreshold>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018a2:	f7ff f957 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4808      	ldr	r0, [pc, #32]	; (80018cc <MX_USART3_UART_Init+0x90>)
 80018aa:	f007 fcea 	bl	8009282 <HAL_UARTEx_SetRxFifoThreshold>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018b4:	f7ff f94e 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_USART3_UART_Init+0x90>)
 80018ba:	f007 fc6b 	bl	8009194 <HAL_UARTEx_DisableFifoMode>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018c4:	f7ff f946 	bl	8000b54 <Error_Handler>
  }

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	240002b0 	.word	0x240002b0
 80018d0:	40004800 	.word	0x40004800

080018d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_UART_MspInit+0x98>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d136      	bne.n	8001964 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f6:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_UART_MspInit+0x9c>)
 80018f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018fc:	4a1c      	ldr	r2, [pc, #112]	; (8001970 <HAL_UART_MspInit+0x9c>)
 80018fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001902:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_UART_MspInit+0x9c>)
 8001908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800190c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_UART_MspInit+0x9c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	4a15      	ldr	r2, [pc, #84]	; (8001970 <HAL_UART_MspInit+0x9c>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_UART_MspInit+0x9c>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001944:	2307      	movs	r3, #7
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <HAL_UART_MspInit+0xa0>)
 8001950:	f001 f852 	bl	80029f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	2100      	movs	r1, #0
 8001958:	2027      	movs	r0, #39	; 0x27
 800195a:	f000 fa6c 	bl	8001e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800195e:	2027      	movs	r0, #39	; 0x27
 8001960:	f000 fa83 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40004800 	.word	0x40004800
 8001970:	58024400 	.word	0x58024400
 8001974:	58020c00 	.word	0x58020c00

08001978 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800197e:	4a16      	ldr	r2, [pc, #88]	; (80019d8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001980:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001982:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001984:	2209      	movs	r2, #9
 8001986:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800198a:	2202      	movs	r2, #2
 800198c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001996:	2202      	movs	r2, #2
 8001998:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800199c:	2201      	movs	r2, #1
 800199e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c0:	f001 f9e3 	bl	8002d8a <HAL_PCD_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80019ca:	f7ff f8c3 	bl	8000b54 <Error_Handler>
  }

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	2400033c 	.word	0x2400033c
 80019d8:	40080000 	.word	0x40080000

080019dc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_PCD_MspInit+0xa4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d13b      	bne.n	8001a76 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <HAL_PCD_MspInit+0xa8>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <HAL_PCD_MspInit+0xa8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0e:	4b1d      	ldr	r3, [pc, #116]	; (8001a84 <HAL_PCD_MspInit+0xa8>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a1c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a2e:	230a      	movs	r3, #10
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	4813      	ldr	r0, [pc, #76]	; (8001a88 <HAL_PCD_MspInit+0xac>)
 8001a3a:	f000 ffdd 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <HAL_PCD_MspInit+0xac>)
 8001a54:	f000 ffd0 	bl	80029f8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_PCD_MspInit+0xa8>)
 8001a5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_PCD_MspInit+0xa8>)
 8001a60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_PCD_MspInit+0xa8>)
 8001a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40080000 	.word	0x40080000
 8001a84:	58024400 	.word	0x58024400
 8001a88:	58020000 	.word	0x58020000

08001a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a92:	e003      	b.n	8001a9c <LoopCopyDataInit>

08001a94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a9a:	3104      	adds	r1, #4

08001a9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a9c:	480b      	ldr	r0, [pc, #44]	; (8001acc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001aa0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001aa2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001aa4:	d3f6      	bcc.n	8001a94 <CopyDataInit>
  ldr  r2, =_sbss
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001aa8:	e002      	b.n	8001ab0 <LoopFillZerobss>

08001aaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aac:	f842 3b04 	str.w	r3, [r2], #4

08001ab0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ab2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ab4:	d3f9      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ab6:	f7ff fc5b 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aba:	f007 ff41 	bl	8009940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001abe:	f7fe ff5f 	bl	8000980 <main>
  bx  lr    
 8001ac2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001ac8:	080099e0 	.word	0x080099e0
  ldr  r0, =_sdata
 8001acc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001ad0:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001ad4:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001ad8:	24000748 	.word	0x24000748

08001adc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001adc:	e7fe      	b.n	8001adc <ADC3_IRQHandler>
	...

08001ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f000 f99b 	bl	8001e20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001aea:	f002 f83b 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8001aee:	4601      	mov	r1, r0
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_Init+0x60>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_Init+0x64>)
 8001afc:	5cd3      	ldrb	r3, [r2, r3]
 8001afe:	f003 031f 	and.w	r3, r3, #31
 8001b02:	fa21 f303 	lsr.w	r3, r1, r3
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <HAL_Init+0x68>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_Init+0x68>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_Init+0x60>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	490b      	ldr	r1, [pc, #44]	; (8001b44 <HAL_Init+0x64>)
 8001b18:	5ccb      	ldrb	r3, [r1, r3]
 8001b1a:	f003 031f 	and.w	r3, r3, #31
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_Init+0x6c>)
 8001b24:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b26:	2000      	movs	r0, #0
 8001b28:	f000 f812 	bl	8001b50 <HAL_InitTick>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e002      	b.n	8001b3c <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b36:	f7ff fbb5 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	58024400 	.word	0x58024400
 8001b44:	080099c0 	.word	0x080099c0
 8001b48:	24000000 	.word	0x24000000
 8001b4c:	24000004 	.word	0x24000004

08001b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b58:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_InitTick+0x60>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e021      	b.n	8001ba8 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_InitTick+0x64>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_InitTick+0x60>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f983 	bl	8001e86 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 f94d 	bl	8001e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x68>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	2400000c 	.word	0x2400000c
 8001bb4:	24000000 	.word	0x24000000
 8001bb8:	24000008 	.word	0x24000008

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	2400000c 	.word	0x2400000c
 8001be0:	24000744 	.word	0x24000744

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	24000744 	.word	0x24000744

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_Delay+0x40>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	2400000c 	.word	0x2400000c

08001c40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <HAL_GetREVID+0x14>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0c1b      	lsrs	r3, r3, #16
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	5c001000 	.word	0x5c001000

08001c58 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c68:	4904      	ldr	r1, [pc, #16]	; (8001c7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	58000400 	.word	0x58000400

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00
 8001cc4:	05fa0000 	.word	0x05fa0000

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4907      	ldr	r1, [pc, #28]	; (8001d1c <__NVIC_EnableIRQ+0x38>)
 8001cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000e100 	.word	0xe000e100

08001d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	db0a      	blt.n	8001d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	490c      	ldr	r1, [pc, #48]	; (8001d6c <__NVIC_SetPriority+0x4c>)
 8001d3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d3e:	0112      	lsls	r2, r2, #4
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	440b      	add	r3, r1
 8001d44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d48:	e00a      	b.n	8001d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4908      	ldr	r1, [pc, #32]	; (8001d70 <__NVIC_SetPriority+0x50>)
 8001d50:	88fb      	ldrh	r3, [r7, #6]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	3b04      	subs	r3, #4
 8001d58:	0112      	lsls	r2, r2, #4
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	761a      	strb	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000e100 	.word	0xe000e100
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f1c3 0307 	rsb	r3, r3, #7
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	bf28      	it	cs
 8001d92:	2304      	movcs	r3, #4
 8001d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d902      	bls.n	8001da4 <NVIC_EncodePriority+0x30>
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3b03      	subs	r3, #3
 8001da2:	e000      	b.n	8001da6 <NVIC_EncodePriority+0x32>
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	401a      	ands	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc6:	43d9      	mvns	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	4313      	orrs	r3, r2
         );
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3724      	adds	r7, #36	; 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3b01      	subs	r3, #1
 8001de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dec:	d301      	bcc.n	8001df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00f      	b.n	8001e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <SysTick_Config+0x40>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dfa:	210f      	movs	r1, #15
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f7ff ff8e 	bl	8001d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x40>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x40>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff29 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff40 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff90 	bl	8001d74 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5f 	bl	8001d20 <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff33 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa4 	bl	8001ddc <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e188      	b.n	80021c4 <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d004      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e17d      	b.n	80021c4 <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a8c      	ldr	r2, [pc, #560]	; (8002100 <HAL_DMA_Abort_IT+0x260>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d04a      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8b      	ldr	r2, [pc, #556]	; (8002104 <HAL_DMA_Abort_IT+0x264>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d045      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a89      	ldr	r2, [pc, #548]	; (8002108 <HAL_DMA_Abort_IT+0x268>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d040      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a88      	ldr	r2, [pc, #544]	; (800210c <HAL_DMA_Abort_IT+0x26c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d03b      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a86      	ldr	r2, [pc, #536]	; (8002110 <HAL_DMA_Abort_IT+0x270>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d036      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a85      	ldr	r2, [pc, #532]	; (8002114 <HAL_DMA_Abort_IT+0x274>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d031      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a83      	ldr	r2, [pc, #524]	; (8002118 <HAL_DMA_Abort_IT+0x278>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d02c      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a82      	ldr	r2, [pc, #520]	; (800211c <HAL_DMA_Abort_IT+0x27c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d027      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a80      	ldr	r2, [pc, #512]	; (8002120 <HAL_DMA_Abort_IT+0x280>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d022      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7f      	ldr	r2, [pc, #508]	; (8002124 <HAL_DMA_Abort_IT+0x284>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01d      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a7d      	ldr	r2, [pc, #500]	; (8002128 <HAL_DMA_Abort_IT+0x288>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d018      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7c      	ldr	r2, [pc, #496]	; (800212c <HAL_DMA_Abort_IT+0x28c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a7a      	ldr	r2, [pc, #488]	; (8002130 <HAL_DMA_Abort_IT+0x290>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00e      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a79      	ldr	r2, [pc, #484]	; (8002134 <HAL_DMA_Abort_IT+0x294>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a77      	ldr	r2, [pc, #476]	; (8002138 <HAL_DMA_Abort_IT+0x298>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d004      	beq.n	8001f68 <HAL_DMA_Abort_IT+0xc8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a76      	ldr	r2, [pc, #472]	; (800213c <HAL_DMA_Abort_IT+0x29c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d101      	bne.n	8001f6c <HAL_DMA_Abort_IT+0xcc>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_Abort_IT+0xce>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d065      	beq.n	800203e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a60      	ldr	r2, [pc, #384]	; (8002100 <HAL_DMA_Abort_IT+0x260>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d04a      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5e      	ldr	r2, [pc, #376]	; (8002104 <HAL_DMA_Abort_IT+0x264>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d045      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_DMA_Abort_IT+0x268>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d040      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5b      	ldr	r2, [pc, #364]	; (800210c <HAL_DMA_Abort_IT+0x26c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d03b      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5a      	ldr	r2, [pc, #360]	; (8002110 <HAL_DMA_Abort_IT+0x270>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d036      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_DMA_Abort_IT+0x274>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d031      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a57      	ldr	r2, [pc, #348]	; (8002118 <HAL_DMA_Abort_IT+0x278>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d02c      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a55      	ldr	r2, [pc, #340]	; (800211c <HAL_DMA_Abort_IT+0x27c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d027      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_DMA_Abort_IT+0x280>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d022      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a52      	ldr	r2, [pc, #328]	; (8002124 <HAL_DMA_Abort_IT+0x284>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01d      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_DMA_Abort_IT+0x288>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_DMA_Abort_IT+0x28c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4e      	ldr	r2, [pc, #312]	; (8002130 <HAL_DMA_Abort_IT+0x290>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00e      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a4c      	ldr	r2, [pc, #304]	; (8002134 <HAL_DMA_Abort_IT+0x294>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_DMA_Abort_IT+0x298>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_DMA_Abort_IT+0x17a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a49      	ldr	r2, [pc, #292]	; (800213c <HAL_DMA_Abort_IT+0x29c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d108      	bne.n	800202c <HAL_DMA_Abort_IT+0x18c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0201 	bic.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e0ca      	b.n	80021c2 <HAL_DMA_Abort_IT+0x322>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e0c1      	b.n	80021c2 <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 020e 	bic.w	r2, r2, #14
 800204c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a2b      	ldr	r2, [pc, #172]	; (8002100 <HAL_DMA_Abort_IT+0x260>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d04a      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a29      	ldr	r2, [pc, #164]	; (8002104 <HAL_DMA_Abort_IT+0x264>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d045      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a28      	ldr	r2, [pc, #160]	; (8002108 <HAL_DMA_Abort_IT+0x268>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d040      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a26      	ldr	r2, [pc, #152]	; (800210c <HAL_DMA_Abort_IT+0x26c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d03b      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a25      	ldr	r2, [pc, #148]	; (8002110 <HAL_DMA_Abort_IT+0x270>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d036      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <HAL_DMA_Abort_IT+0x274>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d031      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a22      	ldr	r2, [pc, #136]	; (8002118 <HAL_DMA_Abort_IT+0x278>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d02c      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a20      	ldr	r2, [pc, #128]	; (800211c <HAL_DMA_Abort_IT+0x27c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d027      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <HAL_DMA_Abort_IT+0x280>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d022      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_DMA_Abort_IT+0x284>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01d      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <HAL_DMA_Abort_IT+0x288>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d018      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1a      	ldr	r2, [pc, #104]	; (800212c <HAL_DMA_Abort_IT+0x28c>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a19      	ldr	r2, [pc, #100]	; (8002130 <HAL_DMA_Abort_IT+0x290>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00e      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a17      	ldr	r2, [pc, #92]	; (8002134 <HAL_DMA_Abort_IT+0x294>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d009      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <HAL_DMA_Abort_IT+0x298>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d004      	beq.n	80020ee <HAL_DMA_Abort_IT+0x24e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_DMA_Abort_IT+0x29c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d128      	bne.n	8002140 <HAL_DMA_Abort_IT+0x2a0>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e027      	b.n	8002150 <HAL_DMA_Abort_IT+0x2b0>
 8002100:	40020010 	.word	0x40020010
 8002104:	40020028 	.word	0x40020028
 8002108:	40020040 	.word	0x40020040
 800210c:	40020058 	.word	0x40020058
 8002110:	40020070 	.word	0x40020070
 8002114:	40020088 	.word	0x40020088
 8002118:	400200a0 	.word	0x400200a0
 800211c:	400200b8 	.word	0x400200b8
 8002120:	40020410 	.word	0x40020410
 8002124:	40020428 	.word	0x40020428
 8002128:	40020440 	.word	0x40020440
 800212c:	40020458 	.word	0x40020458
 8002130:	40020470 	.word	0x40020470
 8002134:	40020488 	.word	0x40020488
 8002138:	400204a0 	.word	0x400204a0
 800213c:	400204b8 	.word	0x400204b8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800215e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2201      	movs	r2, #1
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800217e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00c      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002196:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021a0:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0c6      	b.n	800236c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7fe fa48 	bl	800067c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2223      	movs	r2, #35	; 0x23
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f2:	4b60      	ldr	r3, [pc, #384]	; (8002374 <HAL_ETH_Init+0x1a8>)
 80021f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021f8:	4a5e      	ldr	r2, [pc, #376]	; (8002374 <HAL_ETH_Init+0x1a8>)
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002202:	4b5c      	ldr	r3, [pc, #368]	; (8002374 <HAL_ETH_Init+0x1a8>)
 8002204:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	7a1b      	ldrb	r3, [r3, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002218:	2000      	movs	r0, #0
 800221a:	f7ff fd1d 	bl	8001c58 <HAL_SYSCFG_ETHInterfaceSelect>
 800221e:	e003      	b.n	8002228 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002220:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002224:	f7ff fd18 	bl	8001c58 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002240:	f7ff fcd0 	bl	8001be4 <HAL_GetTick>
 8002244:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002246:	e00f      	b.n	8002268 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002248:	f7ff fccc 	bl	8001be4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002256:	d907      	bls.n	8002268 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2204      	movs	r2, #4
 800225c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	22e0      	movs	r2, #224	; 0xe0
 8002262:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e081      	b.n	800236c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e6      	bne.n	8002248 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fac0 	bl	8002800 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002280:	f001 fde2 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8002284:	4602      	mov	r2, r0
 8002286:	4b3c      	ldr	r3, [pc, #240]	; (8002378 <HAL_ETH_Init+0x1ac>)
 8002288:	fba3 2302 	umull	r2, r3, r3, r2
 800228c:	0c9a      	lsrs	r2, r3, #18
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3a01      	subs	r2, #1
 8002294:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fa13 	bl	80026c4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022b4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022b8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	22e0      	movs	r2, #224	; 0xe0
 80022d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e04a      	b.n	800236c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	f241 1308 	movw	r3, #4360	; 0x1108
 80022de:	4413      	add	r3, r2
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_ETH_Init+0x1b0>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6952      	ldr	r2, [r2, #20]
 80022ea:	0052      	lsls	r2, r2, #1
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	6809      	ldr	r1, [r1, #0]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80022f6:	440b      	add	r3, r1
 80022f8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fad8 	bl	80028b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 fb1c 	bl	800293e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	3305      	adds	r3, #5
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	021a      	lsls	r2, r3, #8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	3303      	adds	r3, #3
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	061a      	lsls	r2, r3, #24
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	3302      	adds	r3, #2
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	041b      	lsls	r3, r3, #16
 8002338:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	3301      	adds	r3, #1
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002344:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002352:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002354:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2210      	movs	r2, #16
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2210      	movs	r2, #16
 8002368:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	58024400 	.word	0x58024400
 8002378:	431bde83 	.word	0x431bde83
 800237c:	ffff8001 	.word	0xffff8001

08002380 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002392:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	791b      	ldrb	r3, [r3, #4]
 8002398:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800239a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	7b1b      	ldrb	r3, [r3, #12]
 80023a0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80023a2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	7b5b      	ldrb	r3, [r3, #13]
 80023a8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80023aa:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	7b9b      	ldrb	r3, [r3, #14]
 80023b0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80023b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	7bdb      	ldrb	r3, [r3, #15]
 80023b8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80023ba:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	7c12      	ldrb	r2, [r2, #16]
 80023c0:	2a00      	cmp	r2, #0
 80023c2:	d102      	bne.n	80023ca <ETH_SetMACConfig+0x4a>
 80023c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023c8:	e000      	b.n	80023cc <ETH_SetMACConfig+0x4c>
 80023ca:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80023cc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	7c52      	ldrb	r2, [r2, #17]
 80023d2:	2a00      	cmp	r2, #0
 80023d4:	d102      	bne.n	80023dc <ETH_SetMACConfig+0x5c>
 80023d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023da:	e000      	b.n	80023de <ETH_SetMACConfig+0x5e>
 80023dc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80023de:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	7c9b      	ldrb	r3, [r3, #18]
 80023e4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80023e6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80023ec:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80023f2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	7f1b      	ldrb	r3, [r3, #28]
 80023f8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80023fa:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	7f5b      	ldrb	r3, [r3, #29]
 8002400:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002402:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	7f92      	ldrb	r2, [r2, #30]
 8002408:	2a00      	cmp	r2, #0
 800240a:	d102      	bne.n	8002412 <ETH_SetMACConfig+0x92>
 800240c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002410:	e000      	b.n	8002414 <ETH_SetMACConfig+0x94>
 8002412:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002414:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	7fdb      	ldrb	r3, [r3, #31]
 800241a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800241c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002424:	2a00      	cmp	r2, #0
 8002426:	d102      	bne.n	800242e <ETH_SetMACConfig+0xae>
 8002428:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242c:	e000      	b.n	8002430 <ETH_SetMACConfig+0xb0>
 800242e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002430:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002436:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800243e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002440:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b56      	ldr	r3, [pc, #344]	; (80025ac <ETH_SetMACConfig+0x22c>)
 8002452:	4013      	ands	r3, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6812      	ldr	r2, [r2, #0]
 8002458:	68f9      	ldr	r1, [r7, #12]
 800245a:	430b      	orrs	r3, r1
 800245c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002462:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800246a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800246c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002474:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002476:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800247e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002480:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002488:	2a00      	cmp	r2, #0
 800248a:	d102      	bne.n	8002492 <ETH_SetMACConfig+0x112>
 800248c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002490:	e000      	b.n	8002494 <ETH_SetMACConfig+0x114>
 8002492:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002494:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	4b42      	ldr	r3, [pc, #264]	; (80025b0 <ETH_SetMACConfig+0x230>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	68f9      	ldr	r1, [r7, #12]
 80024ae:	430b      	orrs	r3, r1
 80024b0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024b8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <ETH_SetMACConfig+0x234>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	68f9      	ldr	r1, [r7, #12]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024dc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024e2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d101      	bne.n	80024f2 <ETH_SetMACConfig+0x172>
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	e000      	b.n	80024f4 <ETH_SetMACConfig+0x174>
 80024f2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80024f4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024fa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002506:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800250a:	4013      	ands	r3, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	68f9      	ldr	r1, [r7, #12]
 8002512:	430b      	orrs	r3, r1
 8002514:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800251c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002524:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002526:	4313      	orrs	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002532:	f023 0103 	bic.w	r1, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	430a      	orrs	r2, r1
 800253e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800254a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002566:	2a00      	cmp	r2, #0
 8002568:	d101      	bne.n	800256e <ETH_SetMACConfig+0x1ee>
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	e000      	b.n	8002570 <ETH_SetMACConfig+0x1f0>
 800256e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002570:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002578:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800257a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002582:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002590:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	430a      	orrs	r2, r1
 800259c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	00048083 	.word	0x00048083
 80025b0:	c0f88000 	.word	0xc0f88000
 80025b4:	fffffef0 	.word	0xfffffef0

080025b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b38      	ldr	r3, [pc, #224]	; (80026b0 <ETH_SetDMAConfig+0xf8>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	6809      	ldr	r1, [r1, #0]
 80025d8:	431a      	orrs	r2, r3
 80025da:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80025de:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	791b      	ldrb	r3, [r3, #4]
 80025e4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025ea:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	7b1b      	ldrb	r3, [r3, #12]
 80025f0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80025fe:	4413      	add	r3, r2
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <ETH_SetDMAConfig+0xfc>)
 8002604:	4013      	ands	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6811      	ldr	r1, [r2, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	431a      	orrs	r2, r3
 800260e:	f241 0304 	movw	r3, #4100	; 0x1004
 8002612:	440b      	add	r3, r1
 8002614:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	7b5b      	ldrb	r3, [r3, #13]
 800261a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b22      	ldr	r3, [pc, #136]	; (80026b8 <ETH_SetDMAConfig+0x100>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6811      	ldr	r1, [r2, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	431a      	orrs	r2, r3
 800263a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800263e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	7d1b      	ldrb	r3, [r3, #20]
 8002648:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800264a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	7f5b      	ldrb	r3, [r3, #29]
 8002650:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	f241 1304 	movw	r3, #4356	; 0x1104
 800265e:	4413      	add	r3, r2
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b16      	ldr	r3, [pc, #88]	; (80026bc <ETH_SetDMAConfig+0x104>)
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6811      	ldr	r1, [r2, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	431a      	orrs	r2, r3
 800266e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002672:	440b      	add	r3, r1
 8002674:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7f1b      	ldrb	r3, [r3, #28]
 800267a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f241 1308 	movw	r3, #4360	; 0x1108
 800268c:	4413      	add	r3, r2
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <ETH_SetDMAConfig+0x108>)
 8002692:	4013      	ands	r3, r2
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6811      	ldr	r1, [r2, #0]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	431a      	orrs	r2, r3
 800269c:	f241 1308 	movw	r3, #4360	; 0x1108
 80026a0:	440b      	add	r3, r1
 80026a2:	601a      	str	r2, [r3, #0]
}
 80026a4:	bf00      	nop
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	ffff87fd 	.word	0xffff87fd
 80026b4:	ffff2ffe 	.word	0xffff2ffe
 80026b8:	fffec000 	.word	0xfffec000
 80026bc:	ffc0efef 	.word	0xffc0efef
 80026c0:	7fc0ffff 	.word	0x7fc0ffff

080026c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0a4      	sub	sp, #144	; 0x90
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026d2:	2300      	movs	r3, #0
 80026d4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80026fa:	2301      	movs	r3, #1
 80026fc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002704:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800270c:	2300      	movs	r3, #0
 800270e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800271c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002720:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002728:	2300      	movs	r3, #0
 800272a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800272c:	2301      	movs	r3, #1
 800272e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800273e:	2300      	movs	r3, #0
 8002740:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002742:	2300      	movs	r3, #0
 8002744:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002746:	2300      	movs	r3, #0
 8002748:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002756:	2301      	movs	r3, #1
 8002758:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800275c:	2320      	movs	r3, #32
 800275e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800276e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002774:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002778:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002780:	2302      	movs	r3, #2
 8002782:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800278c:	2300      	movs	r3, #0
 800278e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002798:	2301      	movs	r3, #1
 800279a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800279e:	2300      	movs	r3, #0
 80027a0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80027a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ac:	4619      	mov	r1, r3
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff fde6 	bl	8002380 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80027b8:	2301      	movs	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80027ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027dc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80027e4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff fee1 	bl	80025b8 <ETH_SetDMAConfig>
}
 80027f6:	bf00      	nop
 80027f8:	3790      	adds	r7, #144	; 0x90
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002810:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002818:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800281a:	f001 fb15 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 800281e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d908      	bls.n	800283a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d804      	bhi.n	800283a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e027      	b.n	800288a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4a18      	ldr	r2, [pc, #96]	; (80028a0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d908      	bls.n	8002854 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	4a17      	ldr	r2, [pc, #92]	; (80028a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d804      	bhi.n	8002854 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e01a      	b.n	800288a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d903      	bls.n	8002864 <ETH_MAC_MDIO_ClkConfig+0x64>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d911      	bls.n	8002888 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d908      	bls.n	800287e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d804      	bhi.n	800287e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e005      	b.n	800288a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	e000      	b.n	800288a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002888:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	01312cff 	.word	0x01312cff
 80028a0:	02160ebf 	.word	0x02160ebf
 80028a4:	039386ff 	.word	0x039386ff
 80028a8:	05f5e0ff 	.word	0x05f5e0ff
 80028ac:	08f0d17f 	.word	0x08f0d17f

080028b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e01d      	b.n	80028fa <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2200      	movs	r2, #0
 80028da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	3206      	adds	r2, #6
 80028f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d9de      	bls.n	80028be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	f241 132c 	movw	r3, #4396	; 0x112c
 800290e:	4413      	add	r3, r2
 8002910:	2203      	movs	r2, #3
 8002912:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68d9      	ldr	r1, [r3, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	f241 1314 	movw	r3, #4372	; 0x1114
 8002920:	4413      	add	r3, r2
 8002922:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002930:	601a      	str	r2, [r3, #0]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800293e:	b480      	push	{r7}
 8002940:	b085      	sub	sp, #20
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	e024      	b.n	8002996 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6919      	ldr	r1, [r3, #16]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	330a      	adds	r3, #10
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d9d7      	bls.n	800294c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f241 1330 	movw	r3, #4400	; 0x1130
 80029c2:	4413      	add	r3, r2
 80029c4:	2203      	movs	r2, #3
 80029c6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6919      	ldr	r1, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f241 131c 	movw	r3, #4380	; 0x111c
 80029d4:	4413      	add	r3, r2
 80029d6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	f241 1328 	movw	r3, #4392	; 0x1128
 80029e8:	4413      	add	r3, r2
 80029ea:	6019      	str	r1, [r3, #0]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	; 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a06:	4b89      	ldr	r3, [pc, #548]	; (8002c2c <HAL_GPIO_Init+0x234>)
 8002a08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a0a:	e194      	b.n	8002d36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2101      	movs	r1, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8186 	beq.w	8002d30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d003      	beq.n	8002a34 <HAL_GPIO_Init+0x3c>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b12      	cmp	r3, #18
 8002a32:	d123      	bne.n	8002a7c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	08da      	lsrs	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	220f      	movs	r2, #15
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	08da      	lsrs	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3208      	adds	r2, #8
 8002a76:	69b9      	ldr	r1, [r7, #24]
 8002a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0203 	and.w	r2, r3, #3
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_GPIO_Init+0xd8>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d007      	beq.n	8002ad0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac4:	2b11      	cmp	r3, #17
 8002ac6:	d003      	beq.n	8002ad0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	d130      	bne.n	8002b32 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	2203      	movs	r2, #3
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b06:	2201      	movs	r2, #1
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4013      	ands	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	f003 0201 	and.w	r2, r3, #1
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 80e0 	beq.w	8002d30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b70:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_GPIO_Init+0x238>)
 8002b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b76:	4a2e      	ldr	r2, [pc, #184]	; (8002c30 <HAL_GPIO_Init+0x238>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_GPIO_Init+0x238>)
 8002b82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8e:	4a29      	ldr	r2, [pc, #164]	; (8002c34 <HAL_GPIO_Init+0x23c>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a20      	ldr	r2, [pc, #128]	; (8002c38 <HAL_GPIO_Init+0x240>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d052      	beq.n	8002c60 <HAL_GPIO_Init+0x268>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_GPIO_Init+0x244>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_GPIO_Init+0x22e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <HAL_GPIO_Init+0x248>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d02b      	beq.n	8002c22 <HAL_GPIO_Init+0x22a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <HAL_GPIO_Init+0x24c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d025      	beq.n	8002c1e <HAL_GPIO_Init+0x226>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <HAL_GPIO_Init+0x250>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <HAL_GPIO_Init+0x222>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a1b      	ldr	r2, [pc, #108]	; (8002c4c <HAL_GPIO_Init+0x254>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x21e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_GPIO_Init+0x258>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x21a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_GPIO_Init+0x25c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x216>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_GPIO_Init+0x260>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x212>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a17      	ldr	r2, [pc, #92]	; (8002c5c <HAL_GPIO_Init+0x264>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x20e>
 8002c02:	2309      	movs	r3, #9
 8002c04:	e02d      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c06:	230a      	movs	r3, #10
 8002c08:	e02b      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	e029      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e027      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c12:	2306      	movs	r3, #6
 8002c14:	e025      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c16:	2305      	movs	r3, #5
 8002c18:	e023      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	e021      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e01f      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e01d      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e01b      	b.n	8002c62 <HAL_GPIO_Init+0x26a>
 8002c2a:	bf00      	nop
 8002c2c:	58000080 	.word	0x58000080
 8002c30:	58024400 	.word	0x58024400
 8002c34:	58000400 	.word	0x58000400
 8002c38:	58020000 	.word	0x58020000
 8002c3c:	58020400 	.word	0x58020400
 8002c40:	58020800 	.word	0x58020800
 8002c44:	58020c00 	.word	0x58020c00
 8002c48:	58021000 	.word	0x58021000
 8002c4c:	58021400 	.word	0x58021400
 8002c50:	58021800 	.word	0x58021800
 8002c54:	58021c00 	.word	0x58021c00
 8002c58:	58022000 	.word	0x58022000
 8002c5c:	58022400 	.word	0x58022400
 8002c60:	2300      	movs	r3, #0
 8002c62:	69fa      	ldr	r2, [r7, #28]
 8002c64:	f002 0203 	and.w	r2, r2, #3
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	4093      	lsls	r3, r2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c72:	4938      	ldr	r1, [pc, #224]	; (8002d54 <HAL_GPIO_Init+0x35c>)
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	089b      	lsrs	r3, r3, #2
 8002c78:	3302      	adds	r3, #2
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	f47f ae63 	bne.w	8002a0c <HAL_GPIO_Init+0x14>
  }
}
 8002d46:	bf00      	nop
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	58000400 	.word	0x58000400

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8c:	b08f      	sub	sp, #60	; 0x3c
 8002d8e:	af0a      	add	r7, sp, #40	; 0x28
 8002d90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e116      	b.n	8002fca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7fe fe10 	bl	80019dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f006 fb5a 	bl	8009494 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	687e      	ldr	r6, [r7, #4]
 8002de8:	466d      	mov	r5, sp
 8002dea:	f106 0410 	add.w	r4, r6, #16
 8002dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dfe:	1d33      	adds	r3, r6, #4
 8002e00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e02:	6838      	ldr	r0, [r7, #0]
 8002e04:	f006 fae4 	bl	80093d0 <USB_CoreInit>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0d7      	b.n	8002fca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f006 fb48 	bl	80094b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e04a      	b.n	8002ec2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	1a9b      	subs	r3, r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	333d      	adds	r3, #61	; 0x3d
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	333c      	adds	r3, #60	; 0x3c
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	b298      	uxth	r0, r3
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3342      	adds	r3, #66	; 0x42
 8002e68:	4602      	mov	r2, r0
 8002e6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e6c:	7bfa      	ldrb	r2, [r7, #15]
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	1a9b      	subs	r3, r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	333f      	adds	r3, #63	; 0x3f
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	3344      	adds	r3, #68	; 0x44
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3348      	adds	r3, #72	; 0x48
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3350      	adds	r3, #80	; 0x50
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
 8002ec2:	7bfa      	ldrb	r2, [r7, #15]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d3af      	bcc.n	8002e2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e044      	b.n	8002f5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f2a:	7bfa      	ldrb	r2, [r7, #15]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3b5      	bcc.n	8002ed2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	687e      	ldr	r6, [r7, #4]
 8002f6e:	466d      	mov	r5, sp
 8002f70:	f106 0410 	add.w	r4, r6, #16
 8002f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f84:	1d33      	adds	r3, r6, #4
 8002f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f88:	6838      	ldr	r0, [r7, #0]
 8002f8a:	f006 fabf 	bl	800950c <USB_DevInit>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e014      	b.n	8002fca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d102      	bne.n	8002fbe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f80b 	bl	8002fd4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f006 fc6f 	bl	80098a6 <USB_DevDisconnect>

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <HAL_PCDEx_ActivateLPM+0x44>)
 8003004:	4313      	orrs	r3, r2
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	10000003 	.word	0x10000003

0800301c <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8003024:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_PWREx_ConfigSupply+0x6c>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d008      	beq.n	8003042 <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_PWREx_ConfigSupply+0x6c>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	429a      	cmp	r2, r3
 800303c:	d001      	beq.n	8003042 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e01d      	b.n	800307e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003042:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_PWREx_ConfigSupply+0x6c>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	490f      	ldr	r1, [pc, #60]	; (8003088 <HAL_PWREx_ConfigSupply+0x6c>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4313      	orrs	r3, r2
 8003050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003052:	f7fe fdc7 	bl	8001be4 <HAL_GetTick>
 8003056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8003058:	e009      	b.n	800306e <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 800305a:	f7fe fdc3 	bl	8001be4 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003068:	d901      	bls.n	800306e <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e007      	b.n	800307e <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_PWREx_ConfigSupply+0x6c>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d1ee      	bne.n	800305a <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	58024800 	.word	0x58024800

0800308c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a04      	ldr	r2, [pc, #16]	; (80030a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	58024800 	.word	0x58024800

080030ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	; 0x28
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e3a4      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8087 	beq.w	80031da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030cc:	4b9a      	ldr	r3, [pc, #616]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030d6:	4b98      	ldr	r3, [pc, #608]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d007      	beq.n	80030f2 <HAL_RCC_OscConfig+0x46>
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	2b18      	cmp	r3, #24
 80030e6:	d110      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d10b      	bne.n	800310a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f2:	4b91      	ldr	r3, [pc, #580]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d06c      	beq.n	80031d8 <HAL_RCC_OscConfig+0x12c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d168      	bne.n	80031d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e37e      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003112:	d106      	bne.n	8003122 <HAL_RCC_OscConfig+0x76>
 8003114:	4b88      	ldr	r3, [pc, #544]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a87      	ldr	r2, [pc, #540]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800311a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	e02e      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0x98>
 800312a:	4b83      	ldr	r3, [pc, #524]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a82      	ldr	r2, [pc, #520]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b80      	ldr	r3, [pc, #512]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7f      	ldr	r2, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800313c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e01d      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0xbc>
 800314e:	4b7a      	ldr	r3, [pc, #488]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a79      	ldr	r2, [pc, #484]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	4b77      	ldr	r3, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a76      	ldr	r2, [pc, #472]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0xd4>
 8003168:	4b73      	ldr	r3, [pc, #460]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a72      	ldr	r2, [pc, #456]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800316e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b70      	ldr	r3, [pc, #448]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a6f      	ldr	r2, [pc, #444]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800317a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d013      	beq.n	80031b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003188:	f7fe fd2c 	bl	8001be4 <HAL_GetTick>
 800318c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003190:	f7fe fd28 	bl	8001be4 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b64      	cmp	r3, #100	; 0x64
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e332      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031a2:	4b65      	ldr	r3, [pc, #404]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0f0      	beq.n	8003190 <HAL_RCC_OscConfig+0xe4>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fd18 	bl	8001be4 <HAL_GetTick>
 80031b4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b8:	f7fe fd14 	bl	8001be4 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b64      	cmp	r3, #100	; 0x64
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e31e      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031ca:	4b5b      	ldr	r3, [pc, #364]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x10c>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80b0 	beq.w	8003348 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031e8:	4b53      	ldr	r3, [pc, #332]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031f2:	4b51      	ldr	r3, [pc, #324]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_RCC_OscConfig+0x162>
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	2b18      	cmp	r3, #24
 8003202:	d149      	bne.n	8003298 <HAL_RCC_OscConfig+0x1ec>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d144      	bne.n	8003298 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800320e:	4b4a      	ldr	r3, [pc, #296]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCC_OscConfig+0x17a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e2f0      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003226:	4b44      	ldr	r3, [pc, #272]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 0219 	bic.w	r2, r3, #25
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	4941      	ldr	r1, [pc, #260]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fe fcd4 	bl	8001be4 <HAL_GetTick>
 800323c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003240:	f7fe fcd0 	bl	8001be4 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e2da      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003252:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	f7fe fcef 	bl	8001c40 <HAL_GetREVID>
 8003262:	4602      	mov	r2, r0
 8003264:	f241 0303 	movw	r3, #4099	; 0x1003
 8003268:	429a      	cmp	r2, r3
 800326a:	d80a      	bhi.n	8003282 <HAL_RCC_OscConfig+0x1d6>
 800326c:	4b32      	ldr	r3, [pc, #200]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	031b      	lsls	r3, r3, #12
 800327a:	492f      	ldr	r1, [pc, #188]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003280:	e062      	b.n	8003348 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	4929      	ldr	r1, [pc, #164]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003296:	e057      	b.n	8003348 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d038      	beq.n	8003312 <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 0219 	bic.w	r2, r3, #25
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4922      	ldr	r1, [pc, #136]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe fc97 	bl	8001be4 <HAL_GetTick>
 80032b6:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032b8:	e008      	b.n	80032cc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe fc93 	bl	8001be4 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d901      	bls.n	80032cc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e29d      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032cc:	4b1a      	ldr	r3, [pc, #104]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f0      	beq.n	80032ba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d8:	f7fe fcb2 	bl	8001c40 <HAL_GetREVID>
 80032dc:	4602      	mov	r2, r0
 80032de:	f241 0303 	movw	r3, #4099	; 0x1003
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d80a      	bhi.n	80032fc <HAL_RCC_OscConfig+0x250>
 80032e6:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	031b      	lsls	r3, r3, #12
 80032f4:	4910      	ldr	r1, [pc, #64]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
 80032fa:	e025      	b.n	8003348 <HAL_RCC_OscConfig+0x29c>
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	490b      	ldr	r1, [pc, #44]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
 8003310:	e01a      	b.n	8003348 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a08      	ldr	r2, [pc, #32]	; (8003338 <HAL_RCC_OscConfig+0x28c>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fe fc61 	bl	8001be4 <HAL_GetTick>
 8003322:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003324:	e00a      	b.n	800333c <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003326:	f7fe fc5d 	bl	8001be4 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d903      	bls.n	800333c <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e267      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
 8003338:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800333c:	4ba0      	ldr	r3, [pc, #640]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ee      	bne.n	8003326 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 808f 	beq.w	8003474 <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003356:	4b9a      	ldr	r3, [pc, #616]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800335e:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003360:	4b97      	ldr	r3, [pc, #604]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d007      	beq.n	800337c <HAL_RCC_OscConfig+0x2d0>
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b18      	cmp	r3, #24
 8003370:	d12d      	bne.n	80033ce <HAL_RCC_OscConfig+0x322>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0303 	and.w	r3, r3, #3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d128      	bne.n	80033ce <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800337c:	4b90      	ldr	r3, [pc, #576]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_RCC_OscConfig+0x2e8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b80      	cmp	r3, #128	; 0x80
 800338e:	d001      	beq.n	8003394 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e239      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003394:	f7fe fc54 	bl	8001c40 <HAL_GetREVID>
 8003398:	4602      	mov	r2, r0
 800339a:	f241 0303 	movw	r3, #4099	; 0x1003
 800339e:	429a      	cmp	r2, r3
 80033a0:	d80a      	bhi.n	80033b8 <HAL_RCC_OscConfig+0x30c>
 80033a2:	4b87      	ldr	r3, [pc, #540]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	4983      	ldr	r1, [pc, #524]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033b6:	e05d      	b.n	8003474 <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80033b8:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	061b      	lsls	r3, r3, #24
 80033c6:	497e      	ldr	r1, [pc, #504]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80033cc:	e052      	b.n	8003474 <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d035      	beq.n	8003442 <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80033d6:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a79      	ldr	r2, [pc, #484]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe fbff 	bl	8001be4 <HAL_GetTick>
 80033e6:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80033ea:	f7fe fbfb 	bl	8001be4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e205      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033fc:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003408:	f7fe fc1a 	bl	8001c40 <HAL_GetREVID>
 800340c:	4602      	mov	r2, r0
 800340e:	f241 0303 	movw	r3, #4099	; 0x1003
 8003412:	429a      	cmp	r2, r3
 8003414:	d80a      	bhi.n	800342c <HAL_RCC_OscConfig+0x380>
 8003416:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	069b      	lsls	r3, r3, #26
 8003424:	4966      	ldr	r1, [pc, #408]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003426:	4313      	orrs	r3, r2
 8003428:	604b      	str	r3, [r1, #4]
 800342a:	e023      	b.n	8003474 <HAL_RCC_OscConfig+0x3c8>
 800342c:	4b64      	ldr	r3, [pc, #400]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	4961      	ldr	r1, [pc, #388]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800343c:	4313      	orrs	r3, r2
 800343e:	60cb      	str	r3, [r1, #12]
 8003440:	e018      	b.n	8003474 <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003442:	4b5f      	ldr	r3, [pc, #380]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a5e      	ldr	r2, [pc, #376]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800344c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344e:	f7fe fbc9 	bl	8001be4 <HAL_GetTick>
 8003452:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003456:	f7fe fbc5 	bl	8001be4 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e1cf      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003468:	4b55      	ldr	r3, [pc, #340]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f0      	bne.n	8003456 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b00      	cmp	r3, #0
 800347e:	d036      	beq.n	80034ee <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d019      	beq.n	80034bc <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003488:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800348a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348c:	4a4c      	ldr	r2, [pc, #304]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fba6 	bl	8001be4 <HAL_GetTick>
 8003498:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fba2 	bl	8001be4 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1ac      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80034ae:	4b44      	ldr	r3, [pc, #272]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x3f0>
 80034ba:	e018      	b.n	80034ee <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b40      	ldr	r3, [pc, #256]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80034be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c0:	4a3f      	ldr	r2, [pc, #252]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fb8c 	bl	8001be4 <HAL_GetTick>
 80034cc:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d0:	f7fe fb88 	bl	8001be4 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e192      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80034e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d036      	beq.n	8003568 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d019      	beq.n	8003536 <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003502:	4b2f      	ldr	r3, [pc, #188]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a2e      	ldr	r2, [pc, #184]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800350c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800350e:	f7fe fb69 	bl	8001be4 <HAL_GetTick>
 8003512:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003516:	f7fe fb65 	bl	8001be4 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e16f      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x46a>
 8003534:	e018      	b.n	8003568 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003536:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a21      	ldr	r2, [pc, #132]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800353c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003540:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003542:	f7fe fb4f 	bl	8001be4 <HAL_GetTick>
 8003546:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800354a:	f7fe fb4b 	bl	8001be4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e155      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800355c:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8086 	beq.w	8003682 <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003576:	4b13      	ldr	r3, [pc, #76]	; (80035c4 <HAL_RCC_OscConfig+0x518>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a12      	ldr	r2, [pc, #72]	; (80035c4 <HAL_RCC_OscConfig+0x518>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003582:	f7fe fb2f 	bl	8001be4 <HAL_GetTick>
 8003586:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7fe fb2b 	bl	8001be4 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b64      	cmp	r3, #100	; 0x64
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e135      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x518>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10b      	bne.n	80035c8 <HAL_RCC_OscConfig+0x51c>
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a02      	ldr	r2, [pc, #8]	; (80035c0 <HAL_RCC_OscConfig+0x514>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
 80035bc:	e032      	b.n	8003624 <HAL_RCC_OscConfig+0x578>
 80035be:	bf00      	nop
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58024800 	.word	0x58024800
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10c      	bne.n	80035ea <HAL_RCC_OscConfig+0x53e>
 80035d0:	4b8f      	ldr	r3, [pc, #572]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	4a8e      	ldr	r2, [pc, #568]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6713      	str	r3, [r2, #112]	; 0x70
 80035dc:	4b8c      	ldr	r3, [pc, #560]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80035de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e0:	4a8b      	ldr	r2, [pc, #556]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	6713      	str	r3, [r2, #112]	; 0x70
 80035e8:	e01c      	b.n	8003624 <HAL_RCC_OscConfig+0x578>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b05      	cmp	r3, #5
 80035f0:	d10c      	bne.n	800360c <HAL_RCC_OscConfig+0x560>
 80035f2:	4b87      	ldr	r3, [pc, #540]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	4a86      	ldr	r2, [pc, #536]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80035f8:	f043 0304 	orr.w	r3, r3, #4
 80035fc:	6713      	str	r3, [r2, #112]	; 0x70
 80035fe:	4b84      	ldr	r3, [pc, #528]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a83      	ldr	r2, [pc, #524]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	e00b      	b.n	8003624 <HAL_RCC_OscConfig+0x578>
 800360c:	4b80      	ldr	r3, [pc, #512]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a7f      	ldr	r2, [pc, #508]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	4b7d      	ldr	r3, [pc, #500]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a7c      	ldr	r2, [pc, #496]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800361e:	f023 0304 	bic.w	r3, r3, #4
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d015      	beq.n	8003658 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362c:	f7fe fada 	bl	8001be4 <HAL_GetTick>
 8003630:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7fe fad6 	bl	8001be4 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0de      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800364a:	4b71      	ldr	r3, [pc, #452]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ee      	beq.n	8003634 <HAL_RCC_OscConfig+0x588>
 8003656:	e014      	b.n	8003682 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003658:	f7fe fac4 	bl	8001be4 <HAL_GetTick>
 800365c:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800365e:	e00a      	b.n	8003676 <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fe fac0 	bl	8001be4 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	; 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0c8      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003676:	4b66      	ldr	r3, [pc, #408]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1ee      	bne.n	8003660 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80bd 	beq.w	8003806 <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800368c:	4b60      	ldr	r3, [pc, #384]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003694:	2b18      	cmp	r3, #24
 8003696:	f000 80b4 	beq.w	8003802 <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	2b02      	cmp	r3, #2
 80036a0:	f040 8095 	bne.w	80037ce <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a4:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a59      	ldr	r2, [pc, #356]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80036aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fa98 	bl	8001be4 <HAL_GetTick>
 80036b4:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe fa94 	bl	8001be4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e09e      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d6:	4b4e      	ldr	r3, [pc, #312]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80036d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036da:	4b4e      	ldr	r3, [pc, #312]	; (8003814 <HAL_RCC_OscConfig+0x768>)
 80036dc:	4013      	ands	r3, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036e6:	0112      	lsls	r2, r2, #4
 80036e8:	430a      	orrs	r2, r1
 80036ea:	4949      	ldr	r1, [pc, #292]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	628b      	str	r3, [r1, #40]	; 0x28
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	3b01      	subs	r3, #1
 80036f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fe:	3b01      	subs	r3, #1
 8003700:	025b      	lsls	r3, r3, #9
 8003702:	b29b      	uxth	r3, r3
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	3b01      	subs	r3, #1
 800370c:	041b      	lsls	r3, r3, #16
 800370e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	3b01      	subs	r3, #1
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003720:	493b      	ldr	r1, [pc, #236]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003722:	4313      	orrs	r3, r2
 8003724:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003726:	4b3a      	ldr	r3, [pc, #232]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	4a39      	ldr	r2, [pc, #228]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003732:	4b37      	ldr	r3, [pc, #220]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003736:	4b38      	ldr	r3, [pc, #224]	; (8003818 <HAL_RCC_OscConfig+0x76c>)
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800373e:	00d2      	lsls	r2, r2, #3
 8003740:	4933      	ldr	r1, [pc, #204]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003742:	4313      	orrs	r3, r2
 8003744:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003746:	4b32      	ldr	r3, [pc, #200]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	f023 020c 	bic.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	492f      	ldr	r1, [pc, #188]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003754:	4313      	orrs	r3, r2
 8003756:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003758:	4b2d      	ldr	r3, [pc, #180]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	f023 0202 	bic.w	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003764:	492a      	ldr	r1, [pc, #168]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003766:	4313      	orrs	r3, r2
 8003768:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800376a:	4b29      	ldr	r3, [pc, #164]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	4a28      	ldr	r2, [pc, #160]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003776:	4b26      	ldr	r3, [pc, #152]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	4a25      	ldr	r2, [pc, #148]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	4a22      	ldr	r2, [pc, #136]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a1c      	ldr	r2, [pc, #112]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80037a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe fa1d 	bl	8001be4 <HAL_GetTick>
 80037aa:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe fa19 	bl	8001be4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e023      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037c0:	4b13      	ldr	r3, [pc, #76]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x702>
 80037cc:	e01b      	b.n	8003806 <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80037d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fe fa03 	bl	8001be4 <HAL_GetTick>
 80037de:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe f9ff 	bl	8001be4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e009      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_OscConfig+0x764>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x736>
 8003800:	e001      	b.n	8003806 <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3728      	adds	r7, #40	; 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	58024400 	.word	0x58024400
 8003814:	fffffc0c 	.word	0xfffffc0c
 8003818:	ffff0007 	.word	0xffff0007

0800381c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e18d      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b8a      	ldr	r3, [pc, #552]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 030f 	and.w	r3, r3, #15
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d910      	bls.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b87      	ldr	r3, [pc, #540]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 020f 	bic.w	r2, r3, #15
 8003846:	4985      	ldr	r1, [pc, #532]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b83      	ldr	r3, [pc, #524]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e175      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d010      	beq.n	800388e <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003878:	429a      	cmp	r2, r3
 800387a:	d908      	bls.n	800388e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800387c:	4b78      	ldr	r3, [pc, #480]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	4975      	ldr	r1, [pc, #468]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 800388a:	4313      	orrs	r3, r2
 800388c:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d010      	beq.n	80038bc <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	4b70      	ldr	r3, [pc, #448]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d908      	bls.n	80038bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038aa:	4b6d      	ldr	r3, [pc, #436]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	496a      	ldr	r1, [pc, #424]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	4b64      	ldr	r3, [pc, #400]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d908      	bls.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038d8:	4b61      	ldr	r3, [pc, #388]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	495e      	ldr	r1, [pc, #376]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d010      	beq.n	8003918 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69da      	ldr	r2, [r3, #28]
 80038fa:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003902:	429a      	cmp	r2, r3
 8003904:	d908      	bls.n	8003918 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003906:	4b56      	ldr	r3, [pc, #344]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	4953      	ldr	r1, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003914:	4313      	orrs	r3, r2
 8003916:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	4b4d      	ldr	r3, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	429a      	cmp	r2, r3
 8003932:	d908      	bls.n	8003946 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b4a      	ldr	r3, [pc, #296]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f023 020f 	bic.w	r2, r3, #15
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4947      	ldr	r1, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003942:	4313      	orrs	r3, r2
 8003944:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d055      	beq.n	80039fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003952:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	4940      	ldr	r1, [pc, #256]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003960:	4313      	orrs	r3, r2
 8003962:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b02      	cmp	r3, #2
 800396a:	d107      	bne.n	800397c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800396c:	4b3c      	ldr	r3, [pc, #240]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d121      	bne.n	80039bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0e7      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d107      	bne.n	8003994 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003984:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d115      	bne.n	80039bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0db      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d107      	bne.n	80039ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800399c:	4b30      	ldr	r3, [pc, #192]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0cf      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039ac:	4b2c      	ldr	r3, [pc, #176]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0c7      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f023 0207 	bic.w	r2, r3, #7
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4925      	ldr	r1, [pc, #148]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ce:	f7fe f909 	bl	8001be4 <HAL_GetTick>
 80039d2:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d4:	e00a      	b.n	80039ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d6:	f7fe f905 	bl	8001be4 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e0af      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d1eb      	bne.n	80039d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d010      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d208      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a1a:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	f023 020f 	bic.w	r2, r3, #15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x244>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d214      	bcs.n	8003a64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 020f 	bic.w	r2, r3, #15
 8003a42:	4906      	ldr	r1, [pc, #24]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b04      	ldr	r3, [pc, #16]	; (8003a5c <HAL_RCC_ClockConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e077      	b.n	8003b4c <HAL_RCC_ClockConfig+0x330>
 8003a5c:	52002000 	.word	0x52002000
 8003a60:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d010      	beq.n	8003a92 <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d208      	bcs.n	8003a92 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a80:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	4931      	ldr	r1, [pc, #196]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d010      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	4b2c      	ldr	r3, [pc, #176]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d208      	bcs.n	8003ac0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003aae:	4b29      	ldr	r3, [pc, #164]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4926      	ldr	r1, [pc, #152]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699a      	ldr	r2, [r3, #24]
 8003ad0:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d208      	bcs.n	8003aee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	491a      	ldr	r1, [pc, #104]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d010      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69da      	ldr	r2, [r3, #28]
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d208      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	490f      	ldr	r1, [pc, #60]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b1c:	f000 f822 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b20:	4601      	mov	r1, r0
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_RCC_ClockConfig+0x338>)
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	4a0a      	ldr	r2, [pc, #40]	; (8003b58 <HAL_RCC_ClockConfig+0x33c>)
 8003b2e:	5cd3      	ldrb	r3, [r2, r3]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa21 f303 	lsr.w	r3, r1, r3
 8003b38:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <HAL_RCC_ClockConfig+0x340>)
 8003b3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <HAL_RCC_ClockConfig+0x344>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe f805 	bl	8001b50 <HAL_InitTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	58024400 	.word	0x58024400
 8003b58:	080099c0 	.word	0x080099c0
 8003b5c:	24000000 	.word	0x24000000
 8003b60:	24000008 	.word	0x24000008

08003b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b089      	sub	sp, #36	; 0x24
 8003b68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b6a:	4baf      	ldr	r3, [pc, #700]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b72:	2b18      	cmp	r3, #24
 8003b74:	f200 814e 	bhi.w	8003e14 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003be5 	.word	0x08003be5
 8003b84:	08003e15 	.word	0x08003e15
 8003b88:	08003e15 	.word	0x08003e15
 8003b8c:	08003e15 	.word	0x08003e15
 8003b90:	08003e15 	.word	0x08003e15
 8003b94:	08003e15 	.word	0x08003e15
 8003b98:	08003e15 	.word	0x08003e15
 8003b9c:	08003e15 	.word	0x08003e15
 8003ba0:	08003c0b 	.word	0x08003c0b
 8003ba4:	08003e15 	.word	0x08003e15
 8003ba8:	08003e15 	.word	0x08003e15
 8003bac:	08003e15 	.word	0x08003e15
 8003bb0:	08003e15 	.word	0x08003e15
 8003bb4:	08003e15 	.word	0x08003e15
 8003bb8:	08003e15 	.word	0x08003e15
 8003bbc:	08003e15 	.word	0x08003e15
 8003bc0:	08003c11 	.word	0x08003c11
 8003bc4:	08003e15 	.word	0x08003e15
 8003bc8:	08003e15 	.word	0x08003e15
 8003bcc:	08003e15 	.word	0x08003e15
 8003bd0:	08003e15 	.word	0x08003e15
 8003bd4:	08003e15 	.word	0x08003e15
 8003bd8:	08003e15 	.word	0x08003e15
 8003bdc:	08003e15 	.word	0x08003e15
 8003be0:	08003c17 	.word	0x08003c17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be4:	4b90      	ldr	r3, [pc, #576]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0320 	and.w	r3, r3, #32
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bf0:	4b8d      	ldr	r3, [pc, #564]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	08db      	lsrs	r3, r3, #3
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	4a8c      	ldr	r2, [pc, #560]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003c00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003c02:	e10a      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c04:	4b89      	ldr	r3, [pc, #548]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c06:	61bb      	str	r3, [r7, #24]
    break;
 8003c08:	e107      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003c0a:	4b89      	ldr	r3, [pc, #548]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c0c:	61bb      	str	r3, [r7, #24]
    break;
 8003c0e:	e104      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003c10:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003c12:	61bb      	str	r3, [r7, #24]
    break;
 8003c14:	e101      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c16:	4b84      	ldr	r3, [pc, #528]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003c20:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c2c:	4b7e      	ldr	r3, [pc, #504]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003c36:	4b7c      	ldr	r3, [pc, #496]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 80da 	beq.w	8003e0e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d05a      	beq.n	8003d16 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d302      	bcc.n	8003c6a <HAL_RCC_GetSysClockFreq+0x106>
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d078      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003c68:	e099      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c6a:	4b6f      	ldr	r3, [pc, #444]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d02d      	beq.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c76:	4b6c      	ldr	r3, [pc, #432]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	4a6a      	ldr	r2, [pc, #424]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	ee07 3a90 	vmov	s15, r3
 8003c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cb4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003cd0:	e087      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cdc:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003e3c <HAL_RCC_GetSysClockFreq+0x2d8>
 8003ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce4:	4b50      	ldr	r3, [pc, #320]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cf8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d14:	e065      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	ee07 3a90 	vmov	s15, r3
 8003d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d20:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003e40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d28:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d30:	ee07 3a90 	vmov	s15, r3
 8003d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d38:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d3c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d58:	e043      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d64:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003e44 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6c:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d80:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9c:	e021      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	ee07 3a90 	vmov	s15, r3
 8003da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003e40 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db8:	ee07 3a90 	vmov	s15, r3
 8003dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dc4:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003e38 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ddc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	0a5b      	lsrs	r3, r3, #9
 8003de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dec:	3301      	adds	r3, #1
 8003dee:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e06:	ee17 3a90 	vmov	r3, s15
 8003e0a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003e0c:	e005      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
    break;
 8003e12:	e002      	b.n	8003e1a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003e16:	61bb      	str	r3, [r7, #24]
    break;
 8003e18:	bf00      	nop
  }

  return sysclockfreq;
 8003e1a:	69bb      	ldr	r3, [r7, #24]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3724      	adds	r7, #36	; 0x24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	58024400 	.word	0x58024400
 8003e2c:	03d09000 	.word	0x03d09000
 8003e30:	003d0900 	.word	0x003d0900
 8003e34:	007a1200 	.word	0x007a1200
 8003e38:	46000000 	.word	0x46000000
 8003e3c:	4c742400 	.word	0x4c742400
 8003e40:	4a742400 	.word	0x4a742400
 8003e44:	4af42400 	.word	0x4af42400

08003e48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e4c:	f001 f9e2 	bl	8005214 <HAL_RCCEx_GetD1SysClockFreq>
 8003e50:	4601      	mov	r1, r0
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	4a07      	ldr	r2, [pc, #28]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x30>)
 8003e5c:	5cd3      	ldrb	r3, [r2, r3]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	fa21 f303 	lsr.w	r3, r1, r3
 8003e66:	4a05      	ldr	r2, [pc, #20]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x34>)
 8003e68:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003e6a:	4b04      	ldr	r3, [pc, #16]	; (8003e7c <HAL_RCC_GetHCLKFreq+0x34>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	58024400 	.word	0x58024400
 8003e78:	080099c0 	.word	0x080099c0
 8003e7c:	24000004 	.word	0x24000004

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e84:	f7ff ffe0 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003e88:	4601      	mov	r1, r0
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	080099c0 	.word	0x080099c0

08003eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003eb0:	f7ff ffca 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4601      	mov	r1, r0
 8003eb6:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ec2:	5cd3      	ldrb	r3, [r2, r3]
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	58024400 	.word	0x58024400
 8003ed4:	080099c0 	.word	0x080099c0

08003ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d03d      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efc:	d013      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f02:	d802      	bhi.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003f08:	e01f      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f0e:	d013      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003f10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f14:	d01c      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003f16:	e018      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f18:	4baf      	ldr	r3, [pc, #700]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	4aae      	ldr	r2, [pc, #696]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f24:	e015      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f98d 	bl	800524c <RCCEx_PLL2_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f36:	e00c      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3324      	adds	r3, #36	; 0x24
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 fa36 	bl	80053b0 <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f48:	e003      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003f50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f58:	4b9f      	ldr	r3, [pc, #636]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f64:	499c      	ldr	r1, [pc, #624]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	650b      	str	r3, [r1, #80]	; 0x50
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d03d      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d826      	bhi.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	08003fa1 	.word	0x08003fa1
 8003f90:	08003faf 	.word	0x08003faf
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fd9 	.word	0x08003fd9
 8003f9c:	08003fd9 	.word	0x08003fd9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa0:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	4a8c      	ldr	r2, [pc, #560]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003faa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fac:	e015      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f949 	bl	800524c <RCCEx_PLL2_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fbe:	e00c      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 f9f2 	bl	80053b0 <RCCEx_PLL3_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
      break;
 8003fd6:	e000      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fda:	7dfb      	ldrb	r3, [r7, #23]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe0:	4b7d      	ldr	r3, [pc, #500]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	f023 0207 	bic.w	r2, r3, #7
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	497a      	ldr	r1, [pc, #488]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	650b      	str	r3, [r1, #80]	; 0x50
 8003ff2:	e001      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004000:	2b00      	cmp	r3, #0
 8004002:	d03e      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d01c      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800400c:	2b80      	cmp	r3, #128	; 0x80
 800400e:	d804      	bhi.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004014:	2b40      	cmp	r3, #64	; 0x40
 8004016:	d00d      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004018:	e01e      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800401a:	2bc0      	cmp	r3, #192	; 0xc0
 800401c:	d01f      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800401e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004022:	d01e      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004024:	e018      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004026:	4b6c      	ldr	r3, [pc, #432]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	4a6b      	ldr	r2, [pc, #428]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004032:	e017      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f906 	bl	800524c <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004044:	e00e      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f9af 	bl	80053b0 <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800406a:	4b5b      	ldr	r3, [pc, #364]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	4958      	ldr	r1, [pc, #352]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004078:	4313      	orrs	r3, r2
 800407a:	650b      	str	r3, [r1, #80]	; 0x50
 800407c:	e001      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	2b00      	cmp	r3, #0
 800408c:	d044      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004098:	d01f      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x202>
 800409a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409e:	d805      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d00e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80040aa:	e01f      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x214>
 80040ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040b0:	d01f      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80040b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040b6:	d01e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040b8:	e018      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ba:	4b47      	ldr	r3, [pc, #284]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	4a46      	ldr	r2, [pc, #280]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80040c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040c6:	e017      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3304      	adds	r3, #4
 80040cc:	2100      	movs	r1, #0
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f8bc 	bl	800524c <RCCEx_PLL2_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040d8:	e00e      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3324      	adds	r3, #36	; 0x24
 80040de:	2100      	movs	r1, #0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 f965 	bl	80053b0 <RCCEx_PLL3_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040ea:	e005      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	75fb      	strb	r3, [r7, #23]
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80040f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10a      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80040fe:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800410c:	4932      	ldr	r1, [pc, #200]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800410e:	4313      	orrs	r3, r2
 8004110:	658b      	str	r3, [r1, #88]	; 0x58
 8004112:	e001      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d044      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800412a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412e:	d01f      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004134:	d805      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800413a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800413e:	d00e      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004140:	e01f      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004142:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004146:	d01f      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800414c:	d01e      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800414e:	e018      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004150:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800415c:	e017      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3304      	adds	r3, #4
 8004162:	2100      	movs	r1, #0
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f871 	bl	800524c <RCCEx_PLL2_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800416e:	e00e      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3324      	adds	r3, #36	; 0x24
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f001 f91a 	bl	80053b0 <RCCEx_PLL3_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004180:	e005      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
      break;
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800418c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004194:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004198:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041a2:	490d      	ldr	r1, [pc, #52]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	658b      	str	r3, [r1, #88]	; 0x58
 80041a8:	e001      	b.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	7dfb      	ldrb	r3, [r7, #23]
 80041ac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d035      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	2b10      	cmp	r3, #16
 80041c0:	d00c      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x304>
 80041c2:	2b10      	cmp	r3, #16
 80041c4:	d802      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01b      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80041ca:	e017      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d00c      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x312>
 80041d0:	2b30      	cmp	r3, #48	; 0x30
 80041d2:	d018      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80041d4:	e012      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x324>
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041dc:	4baf      	ldr	r3, [pc, #700]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	4aae      	ldr	r2, [pc, #696]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041e8:	e00e      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3304      	adds	r3, #4
 80041ee:	2102      	movs	r1, #2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f001 f82b 	bl	800524c <RCCEx_PLL2_Config>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041fa:	e005      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004200:	e002      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800420e:	4ba3      	ldr	r3, [pc, #652]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004212:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800421a:	49a0      	ldr	r1, [pc, #640]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800421c:	4313      	orrs	r3, r2
 800421e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004220:	e001      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d042      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423a:	d01f      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004240:	d805      	bhi.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424a:	d00e      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800424c:	e01f      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800424e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004252:	d01f      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004258:	d01e      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800425a:	e018      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b8f      	ldr	r3, [pc, #572]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a8e      	ldr	r2, [pc, #568]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004268:	e017      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3304      	adds	r3, #4
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 ffeb 	bl	800524c <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800427a:	e00e      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	2100      	movs	r1, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f001 f894 	bl	80053b0 <RCCEx_PLL3_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800428c:	e005      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
      break;
 8004292:	e002      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d109      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042a0:	4b7e      	ldr	r3, [pc, #504]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	497b      	ldr	r1, [pc, #492]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	650b      	str	r3, [r1, #80]	; 0x50
 80042b2:	e001      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	7dfb      	ldrb	r3, [r7, #23]
 80042b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d042      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042cc:	d01b      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80042ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042d2:	d805      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d022      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x446>
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80042de:	e01b      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80042e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e4:	d01d      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80042e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ea:	d01c      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80042ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042f0:	d01b      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x452>
 80042f2:	e011      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 ffa6 	bl	800524c <RCCEx_PLL2_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004304:	e012      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3324      	adds	r3, #36	; 0x24
 800430a:	2101      	movs	r1, #1
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f84f 	bl	80053b0 <RCCEx_PLL3_Config>
 8004312:	4603      	mov	r3, r0
 8004314:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004316:	e009      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	75fb      	strb	r3, [r7, #23]
      break;
 800431c:	e006      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800431e:	bf00      	nop
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800432a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004332:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004336:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433e:	4957      	ldr	r1, [pc, #348]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004340:	4313      	orrs	r3, r2
 8004342:	650b      	str	r3, [r1, #80]	; 0x50
 8004344:	e001      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
 8004348:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d044      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800435c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004360:	d01b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004362:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004366:	d805      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d022      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800436c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004372:	e01b      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d01d      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800437a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437e:	d01c      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004384:	d01b      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004386:	e011      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	2101      	movs	r1, #1
 800438e:	4618      	mov	r0, r3
 8004390:	f000 ff5c 	bl	800524c <RCCEx_PLL2_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004398:	e012      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3324      	adds	r3, #36	; 0x24
 800439e:	2101      	movs	r1, #1
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 f805 	bl	80053b0 <RCCEx_PLL3_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043aa:	e009      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75fb      	strb	r3, [r7, #23]
      break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043b2:	bf00      	nop
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80043be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10a      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043c6:	4b35      	ldr	r3, [pc, #212]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80043d4:	4931      	ldr	r1, [pc, #196]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	658b      	str	r3, [r1, #88]	; 0x58
 80043da:	e001      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02d      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043f4:	d005      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80043f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043fa:	d009      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d013      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a25      	ldr	r2, [pc, #148]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800440e:	e00c      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 ff18 	bl	800524c <RCCEx_PLL2_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
      break;
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004428:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442a:	7dfb      	ldrb	r3, [r7, #23]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004434:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443c:	4917      	ldr	r1, [pc, #92]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800443e:	4313      	orrs	r3, r2
 8004440:	650b      	str	r3, [r1, #80]	; 0x50
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d035      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	2b03      	cmp	r3, #3
 800445a:	d81b      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	080044a1 	.word	0x080044a1
 8004468:	08004475 	.word	0x08004475
 800446c:	08004483 	.word	0x08004483
 8004470:	080044a1 	.word	0x080044a1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800447a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004480:	e00f      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fedf 	bl	800524c <RCCEx_PLL2_Config>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004492:	e006      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
      break;
 8004498:	e003      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800449a:	bf00      	nop
 800449c:	58024400 	.word	0x58024400
      break;
 80044a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044a8:	4bba      	ldr	r3, [pc, #744]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	f023 0203 	bic.w	r2, r3, #3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	49b7      	ldr	r1, [pc, #732]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044ba:	e001      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044bc:	7dfb      	ldrb	r3, [r7, #23]
 80044be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8086 	beq.w	80045da <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ce:	4bb2      	ldr	r3, [pc, #712]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4ab1      	ldr	r2, [pc, #708]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044da:	f7fd fb83 	bl	8001be4 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044e0:	e009      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fd fb7f 	bl	8001be4 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	; 0x64
 80044ee:	d902      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	75fb      	strb	r3, [r7, #23]
        break;
 80044f4:	e005      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f6:	4ba8      	ldr	r3, [pc, #672]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ef      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d166      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004508:	4ba2      	ldr	r3, [pc, #648]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800450a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004512:	4053      	eors	r3, r2
 8004514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004518:	2b00      	cmp	r3, #0
 800451a:	d013      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451c:	4b9d      	ldr	r3, [pc, #628]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004524:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004526:	4b9b      	ldr	r3, [pc, #620]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a9a      	ldr	r2, [pc, #616]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004530:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004532:	4b98      	ldr	r3, [pc, #608]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a97      	ldr	r2, [pc, #604]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800453e:	4a95      	ldr	r2, [pc, #596]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800454e:	d115      	bne.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fd fb48 	bl	8001be4 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004556:	e00b      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004558:	f7fd fb44 	bl	8001be4 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d902      	bls.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	75fb      	strb	r3, [r7, #23]
            break;
 800456e:	e005      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004570:	4b88      	ldr	r3, [pc, #544]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ed      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800457c:	7dfb      	ldrb	r3, [r7, #23]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d126      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800458c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004590:	d10d      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8004592:	4b80      	ldr	r3, [pc, #512]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045a0:	0919      	lsrs	r1, r3, #4
 80045a2:	4b7e      	ldr	r3, [pc, #504]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80045a4:	400b      	ands	r3, r1
 80045a6:	497b      	ldr	r1, [pc, #492]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	610b      	str	r3, [r1, #16]
 80045ac:	e005      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80045ae:	4b79      	ldr	r3, [pc, #484]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	4a78      	ldr	r2, [pc, #480]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045b8:	6113      	str	r3, [r2, #16]
 80045ba:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c8:	4972      	ldr	r1, [pc, #456]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	670b      	str	r3, [r1, #112]	; 0x70
 80045ce:	e004      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	75bb      	strb	r3, [r7, #22]
 80045d4:	e001      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	7dfb      	ldrb	r3, [r7, #23]
 80045d8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d07d      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ea:	2b28      	cmp	r3, #40	; 0x28
 80045ec:	d866      	bhi.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	080046c3 	.word	0x080046c3
 80045f8:	080046bd 	.word	0x080046bd
 80045fc:	080046bd 	.word	0x080046bd
 8004600:	080046bd 	.word	0x080046bd
 8004604:	080046bd 	.word	0x080046bd
 8004608:	080046bd 	.word	0x080046bd
 800460c:	080046bd 	.word	0x080046bd
 8004610:	080046bd 	.word	0x080046bd
 8004614:	08004699 	.word	0x08004699
 8004618:	080046bd 	.word	0x080046bd
 800461c:	080046bd 	.word	0x080046bd
 8004620:	080046bd 	.word	0x080046bd
 8004624:	080046bd 	.word	0x080046bd
 8004628:	080046bd 	.word	0x080046bd
 800462c:	080046bd 	.word	0x080046bd
 8004630:	080046bd 	.word	0x080046bd
 8004634:	080046ab 	.word	0x080046ab
 8004638:	080046bd 	.word	0x080046bd
 800463c:	080046bd 	.word	0x080046bd
 8004640:	080046bd 	.word	0x080046bd
 8004644:	080046bd 	.word	0x080046bd
 8004648:	080046bd 	.word	0x080046bd
 800464c:	080046bd 	.word	0x080046bd
 8004650:	080046bd 	.word	0x080046bd
 8004654:	080046c3 	.word	0x080046c3
 8004658:	080046bd 	.word	0x080046bd
 800465c:	080046bd 	.word	0x080046bd
 8004660:	080046bd 	.word	0x080046bd
 8004664:	080046bd 	.word	0x080046bd
 8004668:	080046bd 	.word	0x080046bd
 800466c:	080046bd 	.word	0x080046bd
 8004670:	080046bd 	.word	0x080046bd
 8004674:	080046c3 	.word	0x080046c3
 8004678:	080046bd 	.word	0x080046bd
 800467c:	080046bd 	.word	0x080046bd
 8004680:	080046bd 	.word	0x080046bd
 8004684:	080046bd 	.word	0x080046bd
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046bd 	.word	0x080046bd
 8004690:	080046bd 	.word	0x080046bd
 8004694:	080046c3 	.word	0x080046c3
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	2101      	movs	r1, #1
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fdd4 	bl	800524c <RCCEx_PLL2_Config>
 80046a4:	4603      	mov	r3, r0
 80046a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046a8:	e00c      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3324      	adds	r3, #36	; 0x24
 80046ae:	2101      	movs	r1, #1
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 fe7d 	bl	80053b0 <RCCEx_PLL3_Config>
 80046b6:	4603      	mov	r3, r0
 80046b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046ba:	e003      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	75fb      	strb	r3, [r7, #23]
      break;
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80046c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046c4:	7dfb      	ldrb	r3, [r7, #23]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80046ca:	4b32      	ldr	r3, [pc, #200]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046d6:	492f      	ldr	r1, [pc, #188]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	654b      	str	r3, [r1, #84]	; 0x54
 80046dc:	e001      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046de:	7dfb      	ldrb	r3, [r7, #23]
 80046e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d037      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	2b05      	cmp	r3, #5
 80046f4:	d820      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80046f6:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80046f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fc:	0800473f 	.word	0x0800473f
 8004700:	08004715 	.word	0x08004715
 8004704:	08004727 	.word	0x08004727
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800473f 	.word	0x0800473f
 8004710:	0800473f 	.word	0x0800473f
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3304      	adds	r3, #4
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f000 fd96 	bl	800524c <RCCEx_PLL2_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004724:	e00c      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3324      	adds	r3, #36	; 0x24
 800472a:	2101      	movs	r1, #1
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fe3f 	bl	80053b0 <RCCEx_PLL3_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	75fb      	strb	r3, [r7, #23]
      break;
 800473c:	e000      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800473e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004740:	7dfb      	ldrb	r3, [r7, #23]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d109      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	f023 0207 	bic.w	r2, r3, #7
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004752:	4910      	ldr	r1, [pc, #64]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004754:	4313      	orrs	r3, r2
 8004756:	654b      	str	r3, [r1, #84]	; 0x54
 8004758:	e001      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
 800475c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d040      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	2b05      	cmp	r3, #5
 8004772:	d827      	bhi.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004774:	a201      	add	r2, pc, #4	; (adr r2, 800477c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8004776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477a:	bf00      	nop
 800477c:	080047cb 	.word	0x080047cb
 8004780:	080047a1 	.word	0x080047a1
 8004784:	080047b3 	.word	0x080047b3
 8004788:	080047cb 	.word	0x080047cb
 800478c:	080047cb 	.word	0x080047cb
 8004790:	080047cb 	.word	0x080047cb
 8004794:	58024400 	.word	0x58024400
 8004798:	58024800 	.word	0x58024800
 800479c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3304      	adds	r3, #4
 80047a4:	2101      	movs	r1, #1
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fd50 	bl	800524c <RCCEx_PLL2_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047b0:	e00c      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3324      	adds	r3, #36	; 0x24
 80047b6:	2101      	movs	r1, #1
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 fdf9 	bl	80053b0 <RCCEx_PLL3_Config>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047c2:	e003      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	75fb      	strb	r3, [r7, #23]
      break;
 80047c8:	e000      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80047ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d10a      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047d2:	4bb3      	ldr	r3, [pc, #716]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	f023 0207 	bic.w	r2, r3, #7
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e0:	49af      	ldr	r1, [pc, #700]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	658b      	str	r3, [r1, #88]	; 0x58
 80047e6:	e001      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e8:	7dfb      	ldrb	r3, [r7, #23]
 80047ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d044      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004802:	d01b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004808:	d805      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d022      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800480e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004814:	e01b      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d01d      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800481c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004820:	d01c      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004822:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004826:	d01b      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004828:	e011      	b.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fd0b 	bl	800524c <RCCEx_PLL2_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800483a:	e012      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3324      	adds	r3, #36	; 0x24
 8004840:	2102      	movs	r1, #2
 8004842:	4618      	mov	r0, r3
 8004844:	f000 fdb4 	bl	80053b0 <RCCEx_PLL3_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800484c:	e009      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	75fb      	strb	r3, [r7, #23]
      break;
 8004852:	e006      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004854:	bf00      	nop
 8004856:	e004      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004858:	bf00      	nop
 800485a:	e002      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8004860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004868:	4b8d      	ldr	r3, [pc, #564]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800486a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004876:	498a      	ldr	r1, [pc, #552]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	654b      	str	r3, [r1, #84]	; 0x54
 800487c:	e001      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
 8004880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d044      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004898:	d01b      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800489a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489e:	d805      	bhi.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d022      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80048aa:	e01b      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b0:	d01d      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80048b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048b6:	d01c      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80048b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048bc:	d01b      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80048be:	e011      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3304      	adds	r3, #4
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fcc0 	bl	800524c <RCCEx_PLL2_Config>
 80048cc:	4603      	mov	r3, r0
 80048ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048d0:	e012      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3324      	adds	r3, #36	; 0x24
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fd69 	bl	80053b0 <RCCEx_PLL3_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80048e2:	e009      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	75fb      	strb	r3, [r7, #23]
      break;
 80048e8:	e006      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048ea:	bf00      	nop
 80048ec:	e004      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048ee:	bf00      	nop
 80048f0:	e002      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048f2:	bf00      	nop
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80048f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f8:	7dfb      	ldrb	r3, [r7, #23]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10a      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048fe:	4b68      	ldr	r3, [pc, #416]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004902:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800490c:	4964      	ldr	r1, [pc, #400]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800490e:	4313      	orrs	r3, r2
 8004910:	658b      	str	r3, [r1, #88]	; 0x58
 8004912:	e001      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004914:	7dfb      	ldrb	r3, [r7, #23]
 8004916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004920:	2b00      	cmp	r3, #0
 8004922:	d044      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800492a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800492e:	d01b      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004934:	d805      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d022      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800493a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800493e:	d00a      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004940:	e01b      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8004942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004946:	d01d      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004948:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800494c:	d01c      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800494e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004952:	d01b      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004954:	e011      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	2100      	movs	r1, #0
 800495c:	4618      	mov	r0, r3
 800495e:	f000 fc75 	bl	800524c <RCCEx_PLL2_Config>
 8004962:	4603      	mov	r3, r0
 8004964:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004966:	e012      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3324      	adds	r3, #36	; 0x24
 800496c:	2102      	movs	r1, #2
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fd1e 	bl	80053b0 <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004978:	e009      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	75fb      	strb	r3, [r7, #23]
      break;
 800497e:	e006      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004980:	bf00      	nop
 8004982:	e004      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004984:	bf00      	nop
 8004986:	e002      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004988:	bf00      	nop
 800498a:	e000      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800498c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004998:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049a2:	493f      	ldr	r1, [pc, #252]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	658b      	str	r3, [r1, #88]	; 0x58
 80049a8:	e001      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01b      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c4:	d10b      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	3324      	adds	r3, #36	; 0x24
 80049ca:	2102      	movs	r1, #2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fcef 	bl	80053b0 <RCCEx_PLL3_Config>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	75bb      	strb	r3, [r7, #22]
 80049dc:	e009      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049de:	4b30      	ldr	r3, [pc, #192]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ec:	492c      	ldr	r1, [pc, #176]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01b      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a08:	d10b      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3324      	adds	r3, #36	; 0x24
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fccd 	bl	80053b0 <RCCEx_PLL3_Config>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	75bb      	strb	r3, [r7, #22]
 8004a20:	e009      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a22:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a30:	491b      	ldr	r1, [pc, #108]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d032      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d00d      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8004a4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a52:	d016      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d111      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fbf4 	bl	800524c <RCCEx_PLL2_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a68:	e00c      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3324      	adds	r3, #36	; 0x24
 8004a6e:	2102      	movs	r1, #2
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fc9d 	bl	80053b0 <RCCEx_PLL3_Config>
 8004a76:	4603      	mov	r3, r0
 8004a78:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004a7a:	e003      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a80:	e000      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 8004a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a84:	7dfb      	ldrb	r3, [r7, #23]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10c      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a98:	4901      	ldr	r1, [pc, #4]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a9e:	e003      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8004aa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	7dfb      	ldrb	r3, [r7, #23]
 8004aa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d02f      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004abe:	d00c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004ac0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ac4:	d015      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aca:	d10f      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004acc:	4b79      	ldr	r3, [pc, #484]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4a78      	ldr	r2, [pc, #480]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004ad8:	e00c      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3324      	adds	r3, #36	; 0x24
 8004ade:	2101      	movs	r1, #1
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fc65 	bl	80053b0 <RCCEx_PLL3_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004aea:	e003      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	e000      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 8004af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af4:	7dfb      	ldrb	r3, [r7, #23]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004afa:	4b6e      	ldr	r3, [pc, #440]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b08:	496a      	ldr	r1, [pc, #424]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	654b      	str	r3, [r1, #84]	; 0x54
 8004b0e:	e001      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d029      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2c:	d007      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004b2e:	e00f      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b30:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	4a5f      	ldr	r2, [pc, #380]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b3c:	e00b      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3304      	adds	r3, #4
 8004b42:	2102      	movs	r1, #2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fb81 	bl	800524c <RCCEx_PLL2_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	75fb      	strb	r3, [r7, #23]
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004b5c:	4b55      	ldr	r3, [pc, #340]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b68:	4952      	ldr	r1, [pc, #328]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004b6e:	e001      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b70:	7dfb      	ldrb	r3, [r7, #23]
 8004b72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3324      	adds	r3, #36	; 0x24
 8004b84:	2102      	movs	r1, #2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fc12 	bl	80053b0 <RCCEx_PLL3_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d02f      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	d00c      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb0:	d802      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d011      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004bb6:	e00d      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bbc:	d00f      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc2:	d00e      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8004bc4:	e006      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004bd2:	e007      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	e004      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e002      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004bde:	bf00      	nop
 8004be0:	e000      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be4:	7dfb      	ldrb	r3, [r7, #23]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d109      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bea:	4b32      	ldr	r3, [pc, #200]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	492f      	ldr	r1, [pc, #188]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	654b      	str	r3, [r1, #84]	; 0x54
 8004bfc:	e001      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c0e:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1a:	4926      	ldr	r1, [pc, #152]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004c2c:	4b21      	ldr	r3, [pc, #132]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c3a:	491e      	ldr	r1, [pc, #120]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c4c:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c58:	4916      	ldr	r1, [pc, #88]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	4a11      	ldr	r2, [pc, #68]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c74:	6113      	str	r3, [r2, #16]
 8004c76:	4b0f      	ldr	r3, [pc, #60]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c80:	490c      	ldr	r1, [pc, #48]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	da08      	bge.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c9a:	4906      	ldr	r1, [pc, #24]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004ca0:	7dbb      	ldrb	r3, [r7, #22]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	58024400 	.word	0x58024400

08004cb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004cbc:	f7ff f8c4 	bl	8003e48 <HAL_RCC_GetHCLKFreq>
 8004cc0:	4601      	mov	r1, r0
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	4a04      	ldr	r2, [pc, #16]	; (8004ce0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004cce:	5cd3      	ldrb	r3, [r2, r3]
 8004cd0:	f003 031f 	and.w	r3, r3, #31
 8004cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	58024400 	.word	0x58024400
 8004ce0:	080099c0 	.word	0x080099c0

08004ce4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b089      	sub	sp, #36	; 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004cec:	4b9d      	ldr	r3, [pc, #628]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004cf6:	4b9b      	ldr	r3, [pc, #620]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	0b1b      	lsrs	r3, r3, #12
 8004cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d00:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004d02:	4b98      	ldr	r3, [pc, #608]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004d0c:	4b95      	ldr	r3, [pc, #596]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d10:	08db      	lsrs	r3, r3, #3
 8004d12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	fb02 f303 	mul.w	r3, r2, r3
 8004d1c:	ee07 3a90 	vmov	s15, r3
 8004d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 810a 	beq.w	8004f44 <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d05a      	beq.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d302      	bcc.n	8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d078      	beq.n	8004e30 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004d3e:	e099      	b.n	8004e74 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d40:	4b88      	ldr	r3, [pc, #544]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d02d      	beq.n	8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d4c:	4b85      	ldr	r3, [pc, #532]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	08db      	lsrs	r3, r3, #3
 8004d52:	f003 0303 	and.w	r3, r3, #3
 8004d56:	4a84      	ldr	r2, [pc, #528]	; (8004f68 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	ee07 3a90 	vmov	s15, r3
 8004d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b7b      	ldr	r3, [pc, #492]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004da6:	e087      	b.n	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004f70 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	4b6a      	ldr	r3, [pc, #424]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004dea:	e065      	b.n	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	ee07 3a90 	vmov	s15, r3
 8004df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dfe:	4b59      	ldr	r3, [pc, #356]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e2e:	e043      	b.n	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	ee07 3a90 	vmov	s15, r3
 8004e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004f78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e42:	4b48      	ldr	r3, [pc, #288]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e72:	e021      	b.n	8004eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	ee07 3a90 	vmov	s15, r3
 8004e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e86:	4b37      	ldr	r3, [pc, #220]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004f6c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eb6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	0a5b      	lsrs	r3, r3, #9
 8004ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ede:	ee17 2a90 	vmov	r2, s15
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004efc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f0c:	ee17 2a90 	vmov	r2, s15
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f18:	0e1b      	lsrs	r3, r3, #24
 8004f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f3a:	ee17 2a90 	vmov	r2, s15
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004f42:	e008      	b.n	8004f56 <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	609a      	str	r2, [r3, #8]
}
 8004f56:	bf00      	nop
 8004f58:	3724      	adds	r7, #36	; 0x24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
 8004f68:	03d09000 	.word	0x03d09000
 8004f6c:	46000000 	.word	0x46000000
 8004f70:	4c742400 	.word	0x4c742400
 8004f74:	4a742400 	.word	0x4a742400
 8004f78:	4af42400 	.word	0x4af42400

08004f7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f84:	4b9d      	ldr	r3, [pc, #628]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004f8e:	4b9b      	ldr	r3, [pc, #620]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	0d1b      	lsrs	r3, r3, #20
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004f9a:	4b98      	ldr	r3, [pc, #608]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004fa4:	4b95      	ldr	r3, [pc, #596]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	08db      	lsrs	r3, r3, #3
 8004faa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 810a 	beq.w	80051dc <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d05a      	beq.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d302      	bcc.n	8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d078      	beq.n	80050c8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004fd6:	e099      	b.n	800510c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fd8:	4b88      	ldr	r3, [pc, #544]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0320 	and.w	r3, r3, #32
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02d      	beq.n	8005040 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fe4:	4b85      	ldr	r3, [pc, #532]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	08db      	lsrs	r3, r3, #3
 8004fea:	f003 0303 	and.w	r3, r3, #3
 8004fee:	4a84      	ldr	r2, [pc, #528]	; (8005200 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	ee07 3a90 	vmov	s15, r3
 8004ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	ee07 3a90 	vmov	s15, r3
 8005006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800500e:	4b7b      	ldr	r3, [pc, #492]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005022:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800503e:	e087      	b.n	8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	ee07 3a90 	vmov	s15, r3
 8005046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005208 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800504e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005052:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005062:	ed97 6a03 	vldr	s12, [r7, #12]
 8005066:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800506a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800506e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800507a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800507e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005082:	e065      	b.n	8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800520c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005096:	4b59      	ldr	r3, [pc, #356]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050c6:	e043      	b.n	8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005210 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	4b48      	ldr	r3, [pc, #288]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e2:	ee07 3a90 	vmov	s15, r3
 80050e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80050f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800510a:	e021      	b.n	8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800520c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800511a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511e:	4b37      	ldr	r3, [pc, #220]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005132:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800513a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800514a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800514e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005150:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	0a5b      	lsrs	r3, r3, #9
 8005156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800516a:	edd7 6a07 	vldr	s13, [r7, #28]
 800516e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005176:	ee17 2a90 	vmov	r2, s15
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800517e:	4b1f      	ldr	r3, [pc, #124]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	0c1b      	lsrs	r3, r3, #16
 8005184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005188:	ee07 3a90 	vmov	s15, r3
 800518c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005194:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005198:	edd7 6a07 	vldr	s13, [r7, #28]
 800519c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051a4:	ee17 2a90 	vmov	r2, s15
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80051ac:	4b13      	ldr	r3, [pc, #76]	; (80051fc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	0e1b      	lsrs	r3, r3, #24
 80051b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051d2:	ee17 2a90 	vmov	r2, s15
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80051da:	e008      	b.n	80051ee <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	609a      	str	r2, [r3, #8]
}
 80051ee:	bf00      	nop
 80051f0:	3724      	adds	r7, #36	; 0x24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	58024400 	.word	0x58024400
 8005200:	03d09000 	.word	0x03d09000
 8005204:	46000000 	.word	0x46000000
 8005208:	4c742400 	.word	0x4c742400
 800520c:	4a742400 	.word	0x4a742400
 8005210:	4af42400 	.word	0x4af42400

08005214 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005218:	f7fe fca4 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 800521c:	4601      	mov	r1, r0
 800521e:	4b08      	ldr	r3, [pc, #32]	; (8005240 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	4a06      	ldr	r2, [pc, #24]	; (8005244 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800522a:	5cd3      	ldrb	r3, [r2, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa21 f303 	lsr.w	r3, r1, r3
 8005234:	4a04      	ldr	r2, [pc, #16]	; (8005248 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005236:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005238:	4b03      	ldr	r3, [pc, #12]	; (8005248 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800523a:	681b      	ldr	r3, [r3, #0]
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd80      	pop	{r7, pc}
 8005240:	58024400 	.word	0x58024400
 8005244:	080099c0 	.word	0x080099c0
 8005248:	24000000 	.word	0x24000000

0800524c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800525a:	4b53      	ldr	r3, [pc, #332]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b03      	cmp	r3, #3
 8005264:	d101      	bne.n	800526a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e099      	b.n	800539e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800526a:	4b4f      	ldr	r3, [pc, #316]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a4e      	ldr	r2, [pc, #312]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005270:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005276:	f7fc fcb5 	bl	8001be4 <HAL_GetTick>
 800527a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800527c:	e008      	b.n	8005290 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800527e:	f7fc fcb1 	bl	8001be4 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e086      	b.n	800539e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005290:	4b45      	ldr	r3, [pc, #276]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f0      	bne.n	800527e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800529c:	4b42      	ldr	r3, [pc, #264]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	031b      	lsls	r3, r3, #12
 80052aa:	493f      	ldr	r1, [pc, #252]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	628b      	str	r3, [r1, #40]	; 0x28
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	3b01      	subs	r3, #1
 80052c0:	025b      	lsls	r3, r3, #9
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	3b01      	subs	r3, #1
 80052da:	061b      	lsls	r3, r3, #24
 80052dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052e0:	4931      	ldr	r1, [pc, #196]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80052e6:	4b30      	ldr	r3, [pc, #192]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	492d      	ldr	r1, [pc, #180]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80052f8:	4b2b      	ldr	r3, [pc, #172]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	f023 0220 	bic.w	r2, r3, #32
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	4928      	ldr	r1, [pc, #160]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005306:	4313      	orrs	r3, r2
 8005308:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800531a:	4b24      	ldr	r3, [pc, #144]	; (80053ac <RCCEx_PLL2_Config+0x160>)
 800531c:	4013      	ands	r3, r2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	69d2      	ldr	r2, [r2, #28]
 8005322:	00d2      	lsls	r2, r2, #3
 8005324:	4920      	ldr	r1, [pc, #128]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800532a:	4b1f      	ldr	r3, [pc, #124]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005330:	f043 0310 	orr.w	r3, r3, #16
 8005334:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800533c:	4b1a      	ldr	r3, [pc, #104]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005342:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005348:	e00f      	b.n	800536a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005350:	4b15      	ldr	r3, [pc, #84]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005354:	4a14      	ldr	r2, [pc, #80]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800535a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800535c:	e005      	b.n	800536a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800535e:	4b12      	ldr	r3, [pc, #72]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	4a11      	ldr	r2, [pc, #68]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005364:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005368:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800536a:	4b0f      	ldr	r3, [pc, #60]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a0e      	ldr	r2, [pc, #56]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005370:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005376:	f7fc fc35 	bl	8001be4 <HAL_GetTick>
 800537a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800537c:	e008      	b.n	8005390 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800537e:	f7fc fc31 	bl	8001be4 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e006      	b.n	800539e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <RCCEx_PLL2_Config+0x15c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	58024400 	.word	0x58024400
 80053ac:	ffff0007 	.word	0xffff0007

080053b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80053be:	4b53      	ldr	r3, [pc, #332]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d101      	bne.n	80053ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e099      	b.n	8005502 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80053ce:	4b4f      	ldr	r3, [pc, #316]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a4e      	ldr	r2, [pc, #312]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80053d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053da:	f7fc fc03 	bl	8001be4 <HAL_GetTick>
 80053de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80053e2:	f7fc fbff 	bl	8001be4 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e086      	b.n	8005502 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80053f4:	4b45      	ldr	r3, [pc, #276]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005400:	4b42      	ldr	r3, [pc, #264]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	051b      	lsls	r3, r3, #20
 800540e:	493f      	ldr	r1, [pc, #252]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005410:	4313      	orrs	r3, r2
 8005412:	628b      	str	r3, [r1, #40]	; 0x28
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	3b01      	subs	r3, #1
 800541a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	3b01      	subs	r3, #1
 8005424:	025b      	lsls	r3, r3, #9
 8005426:	b29b      	uxth	r3, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	3b01      	subs	r3, #1
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	3b01      	subs	r3, #1
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005444:	4931      	ldr	r1, [pc, #196]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800544a:	4b30      	ldr	r3, [pc, #192]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 800544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	492d      	ldr	r1, [pc, #180]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800545c:	4b2b      	ldr	r3, [pc, #172]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	4928      	ldr	r1, [pc, #160]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800546e:	4b27      	ldr	r3, [pc, #156]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	4a26      	ldr	r2, [pc, #152]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800547a:	4b24      	ldr	r3, [pc, #144]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 800547c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800547e:	4b24      	ldr	r3, [pc, #144]	; (8005510 <RCCEx_PLL3_Config+0x160>)
 8005480:	4013      	ands	r3, r2
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	69d2      	ldr	r2, [r2, #28]
 8005486:	00d2      	lsls	r2, r2, #3
 8005488:	4920      	ldr	r1, [pc, #128]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 800548a:	4313      	orrs	r3, r2
 800548c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800548e:	4b1f      	ldr	r3, [pc, #124]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005492:	4a1e      	ldr	r2, [pc, #120]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80054a0:	4b1a      	ldr	r3, [pc, #104]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	4a19      	ldr	r2, [pc, #100]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054ac:	e00f      	b.n	80054ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d106      	bne.n	80054c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80054b4:	4b15      	ldr	r3, [pc, #84]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	4a14      	ldr	r2, [pc, #80]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80054c0:	e005      	b.n	80054ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c6:	4a11      	ldr	r2, [pc, #68]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80054ce:	4b0f      	ldr	r3, [pc, #60]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a0e      	ldr	r2, [pc, #56]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054da:	f7fc fb83 	bl	8001be4 <HAL_GetTick>
 80054de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054e0:	e008      	b.n	80054f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80054e2:	f7fc fb7f 	bl	8001be4 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e006      	b.n	8005502 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <RCCEx_PLL3_Config+0x15c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	58024400 	.word	0x58024400
 8005510:	ffff0007 	.word	0xffff0007

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e01d      	b.n	8005562 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fc f87e 	bl	800163c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3304      	adds	r3, #4
 8005550:	4619      	mov	r1, r3
 8005552:	4610      	mov	r0, r2
 8005554:	f000 fc38 	bl	8005dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <HAL_TIM_Base_Start_IT+0x50>)
 800558c:	4013      	ands	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b06      	cmp	r3, #6
 8005594:	d00b      	beq.n	80055ae <HAL_TIM_Base_Start_IT+0x42>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d007      	beq.n	80055ae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	00010007 	.word	0x00010007

080055c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e01d      	b.n	800560e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f815 	bl	8005616 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 fbe2 	bl	8005dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d841      	bhi.n	80056c0 <HAL_TIM_PWM_Start_IT+0x94>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <HAL_TIM_PWM_Start_IT+0x18>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005679 	.word	0x08005679
 8005648:	080056c1 	.word	0x080056c1
 800564c:	080056c1 	.word	0x080056c1
 8005650:	080056c1 	.word	0x080056c1
 8005654:	0800568b 	.word	0x0800568b
 8005658:	080056c1 	.word	0x080056c1
 800565c:	080056c1 	.word	0x080056c1
 8005660:	080056c1 	.word	0x080056c1
 8005664:	0800569d 	.word	0x0800569d
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056c1 	.word	0x080056c1
 8005670:	080056c1 	.word	0x080056c1
 8005674:	080056af 	.word	0x080056af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0202 	orr.w	r2, r2, #2
 8005686:	60da      	str	r2, [r3, #12]
      break;
 8005688:	e01b      	b.n	80056c2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0204 	orr.w	r2, r2, #4
 8005698:	60da      	str	r2, [r3, #12]
      break;
 800569a:	e012      	b.n	80056c2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	60da      	str	r2, [r3, #12]
      break;
 80056ac:	e009      	b.n	80056c2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0210 	orr.w	r2, r2, #16
 80056bc:	60da      	str	r2, [r3, #12]
      break;
 80056be:	e000      	b.n	80056c2 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80056c0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 ff82 	bl	80065d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1e      	ldr	r2, [pc, #120]	; (8005750 <HAL_TIM_PWM_Start_IT+0x124>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_TIM_PWM_Start_IT+0xd6>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1d      	ldr	r2, [pc, #116]	; (8005754 <HAL_TIM_PWM_Start_IT+0x128>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_TIM_PWM_Start_IT+0xd6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1b      	ldr	r2, [pc, #108]	; (8005758 <HAL_TIM_PWM_Start_IT+0x12c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_TIM_PWM_Start_IT+0xd6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1a      	ldr	r2, [pc, #104]	; (800575c <HAL_TIM_PWM_Start_IT+0x130>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_TIM_PWM_Start_IT+0xd6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_TIM_PWM_Start_IT+0x134>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d101      	bne.n	8005706 <HAL_TIM_PWM_Start_IT+0xda>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_TIM_PWM_Start_IT+0xdc>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800571a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <HAL_TIM_PWM_Start_IT+0x138>)
 8005724:	4013      	ands	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b06      	cmp	r3, #6
 800572c:	d00b      	beq.n	8005746 <HAL_TIM_PWM_Start_IT+0x11a>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005734:	d007      	beq.n	8005746 <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400
 8005758:	40014000 	.word	0x40014000
 800575c:	40014400 	.word	0x40014400
 8005760:	40014800 	.word	0x40014800
 8005764:	00010007 	.word	0x00010007

08005768 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d122      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b02      	cmp	r3, #2
 800578a:	d11b      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0202 	mvn.w	r2, #2
 8005794:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	699b      	ldr	r3, [r3, #24]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 faee 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fae0 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 faf1 	bl	8005da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b04      	cmp	r3, #4
 80057d0:	d122      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d11b      	bne.n	8005818 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0204 	mvn.w	r2, #4
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fac4 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
 8005804:	e005      	b.n	8005812 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fab6 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fac7 	bl	8005da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b08      	cmp	r3, #8
 8005824:	d122      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b08      	cmp	r3, #8
 8005832:	d11b      	bne.n	800586c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0208 	mvn.w	r2, #8
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2204      	movs	r2, #4
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fa9a 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa8c 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa9d 	bl	8005da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b10      	cmp	r3, #16
 8005878:	d122      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f003 0310 	and.w	r3, r3, #16
 8005884:	2b10      	cmp	r3, #16
 8005886:	d11b      	bne.n	80058c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f06f 0210 	mvn.w	r2, #16
 8005890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2208      	movs	r2, #8
 8005896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fa70 	bl	8005d8c <HAL_TIM_IC_CaptureCallback>
 80058ac:	e005      	b.n	80058ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa62 	bl	8005d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 fa73 	bl	8005da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d10e      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d107      	bne.n	80058ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f06f 0201 	mvn.w	r2, #1
 80058e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fb ff96 	bl	8001818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f6:	2b80      	cmp	r3, #128	; 0x80
 80058f8:	d10e      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005904:	2b80      	cmp	r3, #128	; 0x80
 8005906:	d107      	bne.n	8005918 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 feea 	bl	80066ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d10e      	bne.n	8005946 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d107      	bne.n	8005946 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800593e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fedd 	bl	8006700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d10e      	bne.n	8005972 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d107      	bne.n	8005972 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fa21 	bl	8005db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b20      	cmp	r3, #32
 800597e:	d10e      	bne.n	800599e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b20      	cmp	r3, #32
 800598c:	d107      	bne.n	800599e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f06f 0220 	mvn.w	r2, #32
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fe9d 	bl	80066d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599e:	bf00      	nop
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d101      	bne.n	80059c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059be:	2302      	movs	r3, #2
 80059c0:	e105      	b.n	8005bce <HAL_TIM_PWM_ConfigChannel+0x226>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2202      	movs	r2, #2
 80059ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b14      	cmp	r3, #20
 80059d6:	f200 80f0 	bhi.w	8005bba <HAL_TIM_PWM_ConfigChannel+0x212>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a35 	.word	0x08005a35
 80059e4:	08005bbb 	.word	0x08005bbb
 80059e8:	08005bbb 	.word	0x08005bbb
 80059ec:	08005bbb 	.word	0x08005bbb
 80059f0:	08005a75 	.word	0x08005a75
 80059f4:	08005bbb 	.word	0x08005bbb
 80059f8:	08005bbb 	.word	0x08005bbb
 80059fc:	08005bbb 	.word	0x08005bbb
 8005a00:	08005ab7 	.word	0x08005ab7
 8005a04:	08005bbb 	.word	0x08005bbb
 8005a08:	08005bbb 	.word	0x08005bbb
 8005a0c:	08005bbb 	.word	0x08005bbb
 8005a10:	08005af7 	.word	0x08005af7
 8005a14:	08005bbb 	.word	0x08005bbb
 8005a18:	08005bbb 	.word	0x08005bbb
 8005a1c:	08005bbb 	.word	0x08005bbb
 8005a20:	08005b39 	.word	0x08005b39
 8005a24:	08005bbb 	.word	0x08005bbb
 8005a28:	08005bbb 	.word	0x08005bbb
 8005a2c:	08005bbb 	.word	0x08005bbb
 8005a30:	08005b79 	.word	0x08005b79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fa5e 	bl	8005efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0208 	orr.w	r2, r2, #8
 8005a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0204 	bic.w	r2, r2, #4
 8005a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6999      	ldr	r1, [r3, #24]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691a      	ldr	r2, [r3, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	619a      	str	r2, [r3, #24]
      break;
 8005a72:	e0a3      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68b9      	ldr	r1, [r7, #8]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 face 	bl	800601c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	021a      	lsls	r2, r3, #8
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	619a      	str	r2, [r3, #24]
      break;
 8005ab4:	e082      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fb37 	bl	8006130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0208 	orr.w	r2, r2, #8
 8005ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0204 	bic.w	r2, r2, #4
 8005ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69d9      	ldr	r1, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	61da      	str	r2, [r3, #28]
      break;
 8005af4:	e062      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fb9d 	bl	800623c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69d9      	ldr	r1, [r3, #28]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	021a      	lsls	r2, r3, #8
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	61da      	str	r2, [r3, #28]
      break;
 8005b36:	e041      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fbe4 	bl	800630c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f022 0204 	bic.w	r2, r2, #4
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b76:	e021      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fc26 	bl	80063d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	021a      	lsls	r2, r3, #8
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bb8:	e000      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005bba:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop

08005bd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_TIM_ConfigClockSource+0x18>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0b7      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x188>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4b57      	ldr	r3, [pc, #348]	; (8005d68 <HAL_TIM_ConfigClockSource+0x190>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b70      	cmp	r3, #112	; 0x70
 8005c26:	d02e      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0xae>
 8005c28:	2b70      	cmp	r3, #112	; 0x70
 8005c2a:	d812      	bhi.n	8005c52 <HAL_TIM_ConfigClockSource+0x7a>
 8005c2c:	2b30      	cmp	r3, #48	; 0x30
 8005c2e:	f000 8084 	beq.w	8005d3a <HAL_TIM_ConfigClockSource+0x162>
 8005c32:	2b30      	cmp	r3, #48	; 0x30
 8005c34:	d806      	bhi.n	8005c44 <HAL_TIM_ConfigClockSource+0x6c>
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d07f      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d07d      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d07b      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005c42:	e084      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c44:	2b50      	cmp	r3, #80	; 0x50
 8005c46:	d048      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x102>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d056      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x122>
 8005c4c:	2b40      	cmp	r3, #64	; 0x40
 8005c4e:	d064      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005c50:	e07d      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c56:	d070      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
 8005c58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c5c:	d809      	bhi.n	8005c72 <HAL_TIM_ConfigClockSource+0x9a>
 8005c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c62:	d027      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0xdc>
 8005c64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c68:	d067      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
 8005c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6e:	d06d      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c70:	e06d      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005c72:	4a3e      	ldr	r2, [pc, #248]	; (8005d6c <HAL_TIM_ConfigClockSource+0x194>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d060      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
 8005c78:	4a3d      	ldr	r2, [pc, #244]	; (8005d70 <HAL_TIM_ConfigClockSource+0x198>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d05d      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
 8005c7e:	4a3d      	ldr	r2, [pc, #244]	; (8005d74 <HAL_TIM_ConfigClockSource+0x19c>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d05a      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005c84:	e063      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6899      	ldr	r1, [r3, #8]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f000 fc7d 	bl	8006594 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	609a      	str	r2, [r3, #8]
      break;
 8005cb2:	e04c      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	6899      	ldr	r1, [r3, #8]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f000 fc66 	bl	8006594 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689a      	ldr	r2, [r3, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd6:	609a      	str	r2, [r3, #8]
      break;
 8005cd8:	e039      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 fbd6 	bl	8006498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2150      	movs	r1, #80	; 0x50
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fc30 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e029      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 fbf5 	bl	80064f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2160      	movs	r1, #96	; 0x60
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fc20 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e019      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 fbb6 	bl	8006498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2140      	movs	r1, #64	; 0x40
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fc10 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 8005d38:	e009      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	4610      	mov	r0, r2
 8005d46:	f000 fc07 	bl	8006558 <TIM_ITRx_SetConfig>
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005d4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	ffceff88 	.word	0xffceff88
 8005d6c:	00100030 	.word	0x00100030
 8005d70:	00100040 	.word	0x00100040
 8005d74:	00100020 	.word	0x00100020

08005d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d94:	bf00      	nop
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a40      	ldr	r2, [pc, #256]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de6:	d00f      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a3d      	ldr	r2, [pc, #244]	; (8005ee0 <TIM_Base_SetConfig+0x118>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <TIM_Base_SetConfig+0x11c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3b      	ldr	r2, [pc, #236]	; (8005ee8 <TIM_Base_SetConfig+0x120>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3a      	ldr	r2, [pc, #232]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d108      	bne.n	8005e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2f      	ldr	r2, [pc, #188]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e28:	d01b      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ee0 <TIM_Base_SetConfig+0x118>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d017      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <TIM_Base_SetConfig+0x11c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ee8 <TIM_Base_SetConfig+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00f      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00b      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <TIM_Base_SetConfig+0x128>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d007      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a27      	ldr	r2, [pc, #156]	; (8005ef4 <TIM_Base_SetConfig+0x12c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d003      	beq.n	8005e62 <TIM_Base_SetConfig+0x9a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <TIM_Base_SetConfig+0x130>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d108      	bne.n	8005e74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a10      	ldr	r2, [pc, #64]	; (8005edc <TIM_Base_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a12      	ldr	r2, [pc, #72]	; (8005eec <TIM_Base_SetConfig+0x124>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a11      	ldr	r2, [pc, #68]	; (8005ef0 <TIM_Base_SetConfig+0x128>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <TIM_Base_SetConfig+0x12c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0xf8>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a0f      	ldr	r2, [pc, #60]	; (8005ef8 <TIM_Base_SetConfig+0x130>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d103      	bne.n	8005ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	615a      	str	r2, [r3, #20]
}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40010400 	.word	0x40010400
 8005ef0:	40014000 	.word	0x40014000
 8005ef4:	40014400 	.word	0x40014400
 8005ef8:	40014800 	.word	0x40014800

08005efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	f023 0201 	bic.w	r2, r3, #1
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4b37      	ldr	r3, [pc, #220]	; (8006004 <TIM_OC1_SetConfig+0x108>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0303 	bic.w	r3, r3, #3
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f023 0302 	bic.w	r3, r3, #2
 8005f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a2d      	ldr	r2, [pc, #180]	; (8006008 <TIM_OC1_SetConfig+0x10c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00f      	beq.n	8005f78 <TIM_OC1_SetConfig+0x7c>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a2c      	ldr	r2, [pc, #176]	; (800600c <TIM_OC1_SetConfig+0x110>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_OC1_SetConfig+0x7c>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a2b      	ldr	r2, [pc, #172]	; (8006010 <TIM_OC1_SetConfig+0x114>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_OC1_SetConfig+0x7c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <TIM_OC1_SetConfig+0x118>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_OC1_SetConfig+0x7c>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a29      	ldr	r2, [pc, #164]	; (8006018 <TIM_OC1_SetConfig+0x11c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d10c      	bne.n	8005f92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0308 	bic.w	r3, r3, #8
 8005f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f023 0304 	bic.w	r3, r3, #4
 8005f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a1c      	ldr	r2, [pc, #112]	; (8006008 <TIM_OC1_SetConfig+0x10c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00f      	beq.n	8005fba <TIM_OC1_SetConfig+0xbe>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a1b      	ldr	r2, [pc, #108]	; (800600c <TIM_OC1_SetConfig+0x110>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00b      	beq.n	8005fba <TIM_OC1_SetConfig+0xbe>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	; (8006010 <TIM_OC1_SetConfig+0x114>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d007      	beq.n	8005fba <TIM_OC1_SetConfig+0xbe>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a19      	ldr	r2, [pc, #100]	; (8006014 <TIM_OC1_SetConfig+0x118>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC1_SetConfig+0xbe>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a18      	ldr	r2, [pc, #96]	; (8006018 <TIM_OC1_SetConfig+0x11c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d111      	bne.n	8005fde <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	621a      	str	r2, [r3, #32]
}
 8005ff8:	bf00      	nop
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	fffeff8f 	.word	0xfffeff8f
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400
 8006010:	40014000 	.word	0x40014000
 8006014:	40014400 	.word	0x40014400
 8006018:	40014800 	.word	0x40014800

0800601c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4b34      	ldr	r3, [pc, #208]	; (8006118 <TIM_OC2_SetConfig+0xfc>)
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0320 	bic.w	r3, r3, #32
 8006066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <TIM_OC2_SetConfig+0x100>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_OC2_SetConfig+0x68>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a28      	ldr	r2, [pc, #160]	; (8006120 <TIM_OC2_SetConfig+0x104>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d10d      	bne.n	80060a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <TIM_OC2_SetConfig+0x100>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00f      	beq.n	80060c8 <TIM_OC2_SetConfig+0xac>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <TIM_OC2_SetConfig+0x104>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00b      	beq.n	80060c8 <TIM_OC2_SetConfig+0xac>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <TIM_OC2_SetConfig+0x108>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d007      	beq.n	80060c8 <TIM_OC2_SetConfig+0xac>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <TIM_OC2_SetConfig+0x10c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d003      	beq.n	80060c8 <TIM_OC2_SetConfig+0xac>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a1a      	ldr	r2, [pc, #104]	; (800612c <TIM_OC2_SetConfig+0x110>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d113      	bne.n	80060f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	621a      	str	r2, [r3, #32]
}
 800610a:	bf00      	nop
 800610c:	371c      	adds	r7, #28
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	feff8fff 	.word	0xfeff8fff
 800611c:	40010000 	.word	0x40010000
 8006120:	40010400 	.word	0x40010400
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a27      	ldr	r2, [pc, #156]	; (8006228 <TIM_OC3_SetConfig+0xf8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_OC3_SetConfig+0x66>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a26      	ldr	r2, [pc, #152]	; (800622c <TIM_OC3_SetConfig+0xfc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10d      	bne.n	80061b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800619c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <TIM_OC3_SetConfig+0xf8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00f      	beq.n	80061da <TIM_OC3_SetConfig+0xaa>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <TIM_OC3_SetConfig+0xfc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00b      	beq.n	80061da <TIM_OC3_SetConfig+0xaa>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <TIM_OC3_SetConfig+0x100>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d007      	beq.n	80061da <TIM_OC3_SetConfig+0xaa>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a19      	ldr	r2, [pc, #100]	; (8006234 <TIM_OC3_SetConfig+0x104>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d003      	beq.n	80061da <TIM_OC3_SetConfig+0xaa>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <TIM_OC3_SetConfig+0x108>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d113      	bne.n	8006202 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	621a      	str	r2, [r3, #32]
}
 800621c:	bf00      	nop
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	40010000 	.word	0x40010000
 800622c:	40010400 	.word	0x40010400
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800

0800623c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4313      	orrs	r3, r2
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	031b      	lsls	r3, r3, #12
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <TIM_OC4_SetConfig+0xbc>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00f      	beq.n	80062bc <TIM_OC4_SetConfig+0x80>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <TIM_OC4_SetConfig+0xc0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_OC4_SetConfig+0x80>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a16      	ldr	r2, [pc, #88]	; (8006300 <TIM_OC4_SetConfig+0xc4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_OC4_SetConfig+0x80>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a15      	ldr	r2, [pc, #84]	; (8006304 <TIM_OC4_SetConfig+0xc8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_OC4_SetConfig+0x80>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a14      	ldr	r2, [pc, #80]	; (8006308 <TIM_OC4_SetConfig+0xcc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d109      	bne.n	80062d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	019b      	lsls	r3, r3, #6
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400
 8006308:	40014800 	.word	0x40014800

0800630c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800634c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	041b      	lsls	r3, r3, #16
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC5_SetConfig+0xb0>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00f      	beq.n	8006382 <TIM_OC5_SetConfig+0x76>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC5_SetConfig+0xb4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00b      	beq.n	8006382 <TIM_OC5_SetConfig+0x76>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <TIM_OC5_SetConfig+0xb8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d007      	beq.n	8006382 <TIM_OC5_SetConfig+0x76>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <TIM_OC5_SetConfig+0xbc>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d003      	beq.n	8006382 <TIM_OC5_SetConfig+0x76>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a13      	ldr	r2, [pc, #76]	; (80063cc <TIM_OC5_SetConfig+0xc0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d109      	bne.n	8006396 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006388:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	021b      	lsls	r3, r3, #8
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800

080063d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	051b      	lsls	r3, r3, #20
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a18      	ldr	r2, [pc, #96]	; (8006484 <TIM_OC6_SetConfig+0xb4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d00f      	beq.n	8006448 <TIM_OC6_SetConfig+0x78>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a17      	ldr	r2, [pc, #92]	; (8006488 <TIM_OC6_SetConfig+0xb8>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00b      	beq.n	8006448 <TIM_OC6_SetConfig+0x78>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a16      	ldr	r2, [pc, #88]	; (800648c <TIM_OC6_SetConfig+0xbc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d007      	beq.n	8006448 <TIM_OC6_SetConfig+0x78>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a15      	ldr	r2, [pc, #84]	; (8006490 <TIM_OC6_SetConfig+0xc0>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_OC6_SetConfig+0x78>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a14      	ldr	r2, [pc, #80]	; (8006494 <TIM_OC6_SetConfig+0xc4>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d109      	bne.n	800645c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800644e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	695b      	ldr	r3, [r3, #20]
 8006454:	029b      	lsls	r3, r3, #10
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40010400 	.word	0x40010400
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	f023 0201 	bic.w	r2, r3, #1
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f023 030a 	bic.w	r3, r3, #10
 80064d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	621a      	str	r2, [r3, #32]
}
 80064ea:	bf00      	nop
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b087      	sub	sp, #28
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0210 	bic.w	r2, r3, #16
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	031b      	lsls	r3, r3, #12
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <TIM_ITRx_SetConfig+0x38>)
 800656c:	4013      	ands	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	f043 0307 	orr.w	r3, r3, #7
 800657a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	609a      	str	r2, [r3, #8]
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	ffcfff8f 	.word	0xffcfff8f

08006594 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	021a      	lsls	r2, r3, #8
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	609a      	str	r2, [r3, #8]
}
 80065c8:	bf00      	nop
 80065ca:	371c      	adds	r7, #28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	2201      	movs	r2, #1
 80065e8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6a1a      	ldr	r2, [r3, #32]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	43db      	mvns	r3, r3
 80065f6:	401a      	ands	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f003 031f 	and.w	r3, r3, #31
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	fa01 f303 	lsl.w	r3, r1, r3
 800660c:	431a      	orrs	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006630:	2b01      	cmp	r3, #1
 8006632:	d101      	bne.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006634:	2302      	movs	r3, #2
 8006636:	e045      	b.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d108      	bne.n	800667e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006672:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006684:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006696:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	4313      	orrs	r3, r2
 80066a0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40010400 	.word	0x40010400

080066d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e042      	b.n	80067ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d106      	bne.n	800673e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7fb f8cb 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2224      	movs	r2, #36	; 0x24
 8006742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9c2 	bl	8006ae0 <UART_SetConfig>
 800675c:	4603      	mov	r3, r0
 800675e:	2b01      	cmp	r3, #1
 8006760:	d101      	bne.n	8006766 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e022      	b.n	80067ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f002 fb34 	bl	8008ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f042 0201 	orr.w	r2, r2, #1
 80067a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f002 fbbb 	bl	8008f20 <UART_CheckIdleState>
 80067aa:	4603      	mov	r3, r0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80067da:	4013      	ands	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d118      	bne.n	8006816 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8145 	beq.w	8006a96 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	4798      	blx	r3
      }
      return;
 8006814:	e13f      	b.n	8006a96 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 80e8 	beq.w	80069ee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4ba1      	ldr	r3, [pc, #644]	; (8006aa8 <HAL_UART_IRQHandler+0x2f4>)
 8006822:	4013      	ands	r3, r2
 8006824:	2b00      	cmp	r3, #0
 8006826:	d105      	bne.n	8006834 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4ba0      	ldr	r3, [pc, #640]	; (8006aac <HAL_UART_IRQHandler+0x2f8>)
 800682c:	4013      	ands	r3, r2
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80dd 	beq.w	80069ee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d010      	beq.n	8006860 <HAL_UART_IRQHandler+0xac>
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2201      	movs	r2, #1
 800684e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	f043 0201 	orr.w	r2, r3, #1
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	f003 0302 	and.w	r3, r3, #2
 8006866:	2b00      	cmp	r3, #0
 8006868:	d010      	beq.n	800688c <HAL_UART_IRQHandler+0xd8>
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2202      	movs	r2, #2
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f043 0204 	orr.w	r2, r3, #4
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	f003 0304 	and.w	r3, r3, #4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d010      	beq.n	80068b8 <HAL_UART_IRQHandler+0x104>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d00b      	beq.n	80068b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2204      	movs	r2, #4
 80068a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ae:	f043 0202 	orr.w	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d015      	beq.n	80068ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d104      	bne.n	80068d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	4b76      	ldr	r3, [pc, #472]	; (8006aa8 <HAL_UART_IRQHandler+0x2f4>)
 80068d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2208      	movs	r2, #8
 80068dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f043 0208 	orr.w	r2, r3, #8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d011      	beq.n	800691c <HAL_UART_IRQHandler+0x168>
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00c      	beq.n	800691c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800690a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80b9 	beq.w	8006a9a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d011      	beq.n	8006956 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d104      	bne.n	8006946 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d004      	beq.n	8006976 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006972:	2b00      	cmp	r3, #0
 8006974:	d031      	beq.n	80069da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f002 fb9a 	bl	80090b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d123      	bne.n	80069d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006998:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d013      	beq.n	80069ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a6:	4a42      	ldr	r2, [pc, #264]	; (8006ab0 <HAL_UART_IRQHandler+0x2fc>)
 80069a8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fb fa76 	bl	8001ea0 <HAL_DMA_Abort_IT>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d017      	beq.n	80069ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	e00f      	b.n	80069ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f87c 	bl	8006ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d0:	e00b      	b.n	80069ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f878 	bl	8006ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	e007      	b.n	80069ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f874 	bl	8006ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80069e8:	e057      	b.n	8006a9a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ea:	bf00      	nop
    return;
 80069ec:	e055      	b.n	8006a9a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00d      	beq.n	8006a14 <HAL_UART_IRQHandler+0x260>
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f002 fba3 	bl	8009158 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a12:	e045      	b.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d012      	beq.n	8006a44 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d031      	beq.n	8006a9e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
    }
    return;
 8006a42:	e02c      	b.n	8006a9e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <HAL_UART_IRQHandler+0x2ac>
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f002 fb63 	bl	8009124 <UART_EndTransmit_IT>
    return;
 8006a5e:	e01f      	b.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <HAL_UART_IRQHandler+0x2c8>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 fb83 	bl	8009180 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a7a:	e011      	b.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00c      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da09      	bge.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f002 fb6d 	bl	800916c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a92:	bf00      	nop
 8006a94:	e004      	b.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8006a96:	bf00      	nop
 8006a98:	e002      	b.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006a9a:	bf00      	nop
 8006a9c:	e000      	b.n	8006aa0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006a9e:	bf00      	nop
  }
}
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	10000001 	.word	0x10000001
 8006aac:	04000120 	.word	0x04000120
 8006ab0:	080090f9 	.word	0x080090f9

08006ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr
 8006adc:	0000      	movs	r0, r0
	...

08006ae0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006ae4:	b090      	sub	sp, #64	; 0x40
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b16:	4313      	orrs	r3, r2
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	4bc1      	ldr	r3, [pc, #772]	; (8006e28 <UART_SetConfig+0x348>)
 8006b22:	4013      	ands	r3, r2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4ab7      	ldr	r2, [pc, #732]	; (8006e2c <UART_SetConfig+0x34c>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d004      	beq.n	8006b5e <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	4bb2      	ldr	r3, [pc, #712]	; (8006e30 <UART_SetConfig+0x350>)
 8006b66:	4013      	ands	r3, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6812      	ldr	r2, [r2, #0]
 8006b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b6e:	430b      	orrs	r3, r1
 8006b70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b78:	f023 010f 	bic.w	r1, r3, #15
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4aa9      	ldr	r2, [pc, #676]	; (8006e34 <UART_SetConfig+0x354>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d177      	bne.n	8006c82 <UART_SetConfig+0x1a2>
 8006b92:	4ba9      	ldr	r3, [pc, #676]	; (8006e38 <UART_SetConfig+0x358>)
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b9a:	2b28      	cmp	r3, #40	; 0x28
 8006b9c:	d86c      	bhi.n	8006c78 <UART_SetConfig+0x198>
 8006b9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ba4 <UART_SetConfig+0xc4>)
 8006ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba4:	08006c49 	.word	0x08006c49
 8006ba8:	08006c79 	.word	0x08006c79
 8006bac:	08006c79 	.word	0x08006c79
 8006bb0:	08006c79 	.word	0x08006c79
 8006bb4:	08006c79 	.word	0x08006c79
 8006bb8:	08006c79 	.word	0x08006c79
 8006bbc:	08006c79 	.word	0x08006c79
 8006bc0:	08006c79 	.word	0x08006c79
 8006bc4:	08006c51 	.word	0x08006c51
 8006bc8:	08006c79 	.word	0x08006c79
 8006bcc:	08006c79 	.word	0x08006c79
 8006bd0:	08006c79 	.word	0x08006c79
 8006bd4:	08006c79 	.word	0x08006c79
 8006bd8:	08006c79 	.word	0x08006c79
 8006bdc:	08006c79 	.word	0x08006c79
 8006be0:	08006c79 	.word	0x08006c79
 8006be4:	08006c59 	.word	0x08006c59
 8006be8:	08006c79 	.word	0x08006c79
 8006bec:	08006c79 	.word	0x08006c79
 8006bf0:	08006c79 	.word	0x08006c79
 8006bf4:	08006c79 	.word	0x08006c79
 8006bf8:	08006c79 	.word	0x08006c79
 8006bfc:	08006c79 	.word	0x08006c79
 8006c00:	08006c79 	.word	0x08006c79
 8006c04:	08006c61 	.word	0x08006c61
 8006c08:	08006c79 	.word	0x08006c79
 8006c0c:	08006c79 	.word	0x08006c79
 8006c10:	08006c79 	.word	0x08006c79
 8006c14:	08006c79 	.word	0x08006c79
 8006c18:	08006c79 	.word	0x08006c79
 8006c1c:	08006c79 	.word	0x08006c79
 8006c20:	08006c79 	.word	0x08006c79
 8006c24:	08006c69 	.word	0x08006c69
 8006c28:	08006c79 	.word	0x08006c79
 8006c2c:	08006c79 	.word	0x08006c79
 8006c30:	08006c79 	.word	0x08006c79
 8006c34:	08006c79 	.word	0x08006c79
 8006c38:	08006c79 	.word	0x08006c79
 8006c3c:	08006c79 	.word	0x08006c79
 8006c40:	08006c79 	.word	0x08006c79
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c4e:	e233      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006c50:	2304      	movs	r3, #4
 8006c52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c56:	e22f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006c58:	2308      	movs	r3, #8
 8006c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c5e:	e22b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006c60:	2310      	movs	r3, #16
 8006c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c66:	e227      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006c68:	2320      	movs	r3, #32
 8006c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c6e:	e223      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006c70:	2340      	movs	r3, #64	; 0x40
 8006c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c76:	e21f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006c78:	2380      	movs	r3, #128	; 0x80
 8006c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c7e:	bf00      	nop
 8006c80:	e21a      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a6d      	ldr	r2, [pc, #436]	; (8006e3c <UART_SetConfig+0x35c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d132      	bne.n	8006cf2 <UART_SetConfig+0x212>
 8006c8c:	4b6a      	ldr	r3, [pc, #424]	; (8006e38 <UART_SetConfig+0x358>)
 8006c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	2b05      	cmp	r3, #5
 8006c96:	d827      	bhi.n	8006ce8 <UART_SetConfig+0x208>
 8006c98:	a201      	add	r2, pc, #4	; (adr r2, 8006ca0 <UART_SetConfig+0x1c0>)
 8006c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9e:	bf00      	nop
 8006ca0:	08006cb9 	.word	0x08006cb9
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	08006cc9 	.word	0x08006cc9
 8006cac:	08006cd1 	.word	0x08006cd1
 8006cb0:	08006cd9 	.word	0x08006cd9
 8006cb4:	08006ce1 	.word	0x08006ce1
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cbe:	e1fb      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cc6:	e1f7      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cce:	e1f3      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cd6:	e1ef      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006cd8:	2320      	movs	r3, #32
 8006cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cde:	e1eb      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006ce0:	2340      	movs	r3, #64	; 0x40
 8006ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ce6:	e1e7      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006cee:	bf00      	nop
 8006cf0:	e1e2      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a52      	ldr	r2, [pc, #328]	; (8006e40 <UART_SetConfig+0x360>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d132      	bne.n	8006d62 <UART_SetConfig+0x282>
 8006cfc:	4b4e      	ldr	r3, [pc, #312]	; (8006e38 <UART_SetConfig+0x358>)
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	f003 0307 	and.w	r3, r3, #7
 8006d04:	2b05      	cmp	r3, #5
 8006d06:	d827      	bhi.n	8006d58 <UART_SetConfig+0x278>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <UART_SetConfig+0x230>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d29 	.word	0x08006d29
 8006d14:	08006d31 	.word	0x08006d31
 8006d18:	08006d39 	.word	0x08006d39
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d2e:	e1c3      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006d30:	2304      	movs	r3, #4
 8006d32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d36:	e1bf      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006d38:	2308      	movs	r3, #8
 8006d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d3e:	e1bb      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006d40:	2310      	movs	r3, #16
 8006d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d46:	e1b7      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006d48:	2320      	movs	r3, #32
 8006d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d4e:	e1b3      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d56:	e1af      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006d58:	2380      	movs	r3, #128	; 0x80
 8006d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d5e:	bf00      	nop
 8006d60:	e1aa      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a37      	ldr	r2, [pc, #220]	; (8006e44 <UART_SetConfig+0x364>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d132      	bne.n	8006dd2 <UART_SetConfig+0x2f2>
 8006d6c:	4b32      	ldr	r3, [pc, #200]	; (8006e38 <UART_SetConfig+0x358>)
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	2b05      	cmp	r3, #5
 8006d76:	d827      	bhi.n	8006dc8 <UART_SetConfig+0x2e8>
 8006d78:	a201      	add	r2, pc, #4	; (adr r2, 8006d80 <UART_SetConfig+0x2a0>)
 8006d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7e:	bf00      	nop
 8006d80:	08006d99 	.word	0x08006d99
 8006d84:	08006da1 	.word	0x08006da1
 8006d88:	08006da9 	.word	0x08006da9
 8006d8c:	08006db1 	.word	0x08006db1
 8006d90:	08006db9 	.word	0x08006db9
 8006d94:	08006dc1 	.word	0x08006dc1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d9e:	e18b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006da0:	2304      	movs	r3, #4
 8006da2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006da6:	e187      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dae:	e183      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006db0:	2310      	movs	r3, #16
 8006db2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006db6:	e17f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006db8:	2320      	movs	r3, #32
 8006dba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dbe:	e17b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006dc0:	2340      	movs	r3, #64	; 0x40
 8006dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dc6:	e177      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006dc8:	2380      	movs	r3, #128	; 0x80
 8006dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dce:	bf00      	nop
 8006dd0:	e172      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <UART_SetConfig+0x368>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d144      	bne.n	8006e66 <UART_SetConfig+0x386>
 8006ddc:	4b16      	ldr	r3, [pc, #88]	; (8006e38 <UART_SetConfig+0x358>)
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	2b05      	cmp	r3, #5
 8006de6:	d839      	bhi.n	8006e5c <UART_SetConfig+0x37c>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <UART_SetConfig+0x310>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e09 	.word	0x08006e09
 8006df4:	08006e11 	.word	0x08006e11
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	08006e21 	.word	0x08006e21
 8006e00:	08006e4d 	.word	0x08006e4d
 8006e04:	08006e55 	.word	0x08006e55
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e0e:	e153      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e16:	e14f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e1e:	e14b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e26:	e147      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006e28:	cfff69f3 	.word	0xcfff69f3
 8006e2c:	58000c00 	.word	0x58000c00
 8006e30:	11fff4ff 	.word	0x11fff4ff
 8006e34:	40011000 	.word	0x40011000
 8006e38:	58024400 	.word	0x58024400
 8006e3c:	40004400 	.word	0x40004400
 8006e40:	40004800 	.word	0x40004800
 8006e44:	40004c00 	.word	0x40004c00
 8006e48:	40005000 	.word	0x40005000
 8006e4c:	2320      	movs	r3, #32
 8006e4e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e52:	e131      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006e54:	2340      	movs	r3, #64	; 0x40
 8006e56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e5a:	e12d      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006e5c:	2380      	movs	r3, #128	; 0x80
 8006e5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e62:	bf00      	nop
 8006e64:	e128      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4ac3      	ldr	r2, [pc, #780]	; (8007178 <UART_SetConfig+0x698>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d178      	bne.n	8006f62 <UART_SetConfig+0x482>
 8006e70:	4bc2      	ldr	r3, [pc, #776]	; (800717c <UART_SetConfig+0x69c>)
 8006e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e78:	2b28      	cmp	r3, #40	; 0x28
 8006e7a:	d86d      	bhi.n	8006f58 <UART_SetConfig+0x478>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x3a4>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006f29 	.word	0x08006f29
 8006e88:	08006f59 	.word	0x08006f59
 8006e8c:	08006f59 	.word	0x08006f59
 8006e90:	08006f59 	.word	0x08006f59
 8006e94:	08006f59 	.word	0x08006f59
 8006e98:	08006f59 	.word	0x08006f59
 8006e9c:	08006f59 	.word	0x08006f59
 8006ea0:	08006f59 	.word	0x08006f59
 8006ea4:	08006f31 	.word	0x08006f31
 8006ea8:	08006f59 	.word	0x08006f59
 8006eac:	08006f59 	.word	0x08006f59
 8006eb0:	08006f59 	.word	0x08006f59
 8006eb4:	08006f59 	.word	0x08006f59
 8006eb8:	08006f59 	.word	0x08006f59
 8006ebc:	08006f59 	.word	0x08006f59
 8006ec0:	08006f59 	.word	0x08006f59
 8006ec4:	08006f39 	.word	0x08006f39
 8006ec8:	08006f59 	.word	0x08006f59
 8006ecc:	08006f59 	.word	0x08006f59
 8006ed0:	08006f59 	.word	0x08006f59
 8006ed4:	08006f59 	.word	0x08006f59
 8006ed8:	08006f59 	.word	0x08006f59
 8006edc:	08006f59 	.word	0x08006f59
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f41 	.word	0x08006f41
 8006ee8:	08006f59 	.word	0x08006f59
 8006eec:	08006f59 	.word	0x08006f59
 8006ef0:	08006f59 	.word	0x08006f59
 8006ef4:	08006f59 	.word	0x08006f59
 8006ef8:	08006f59 	.word	0x08006f59
 8006efc:	08006f59 	.word	0x08006f59
 8006f00:	08006f59 	.word	0x08006f59
 8006f04:	08006f49 	.word	0x08006f49
 8006f08:	08006f59 	.word	0x08006f59
 8006f0c:	08006f59 	.word	0x08006f59
 8006f10:	08006f59 	.word	0x08006f59
 8006f14:	08006f59 	.word	0x08006f59
 8006f18:	08006f59 	.word	0x08006f59
 8006f1c:	08006f59 	.word	0x08006f59
 8006f20:	08006f59 	.word	0x08006f59
 8006f24:	08006f51 	.word	0x08006f51
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f2e:	e0c3      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006f30:	2304      	movs	r3, #4
 8006f32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f36:	e0bf      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006f38:	2308      	movs	r3, #8
 8006f3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f3e:	e0bb      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006f40:	2310      	movs	r3, #16
 8006f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f46:	e0b7      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006f48:	2320      	movs	r3, #32
 8006f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f4e:	e0b3      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006f50:	2340      	movs	r3, #64	; 0x40
 8006f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f56:	e0af      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006f58:	2380      	movs	r3, #128	; 0x80
 8006f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f5e:	bf00      	nop
 8006f60:	e0aa      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a86      	ldr	r2, [pc, #536]	; (8007180 <UART_SetConfig+0x6a0>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d132      	bne.n	8006fd2 <UART_SetConfig+0x4f2>
 8006f6c:	4b83      	ldr	r3, [pc, #524]	; (800717c <UART_SetConfig+0x69c>)
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	2b05      	cmp	r3, #5
 8006f76:	d827      	bhi.n	8006fc8 <UART_SetConfig+0x4e8>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <UART_SetConfig+0x4a0>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006f99 	.word	0x08006f99
 8006f84:	08006fa1 	.word	0x08006fa1
 8006f88:	08006fa9 	.word	0x08006fa9
 8006f8c:	08006fb1 	.word	0x08006fb1
 8006f90:	08006fb9 	.word	0x08006fb9
 8006f94:	08006fc1 	.word	0x08006fc1
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006f9e:	e08b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fa6:	e087      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fae:	e083      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fb6:	e07f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006fb8:	2320      	movs	r3, #32
 8006fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fbe:	e07b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006fc0:	2340      	movs	r3, #64	; 0x40
 8006fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fc6:	e077      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006fc8:	2380      	movs	r3, #128	; 0x80
 8006fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006fce:	bf00      	nop
 8006fd0:	e072      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a6b      	ldr	r2, [pc, #428]	; (8007184 <UART_SetConfig+0x6a4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d132      	bne.n	8007042 <UART_SetConfig+0x562>
 8006fdc:	4b67      	ldr	r3, [pc, #412]	; (800717c <UART_SetConfig+0x69c>)
 8006fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	2b05      	cmp	r3, #5
 8006fe6:	d827      	bhi.n	8007038 <UART_SetConfig+0x558>
 8006fe8:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <UART_SetConfig+0x510>)
 8006fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fee:	bf00      	nop
 8006ff0:	08007009 	.word	0x08007009
 8006ff4:	08007011 	.word	0x08007011
 8006ff8:	08007019 	.word	0x08007019
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	2300      	movs	r3, #0
 800700a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800700e:	e053      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007010:	2304      	movs	r3, #4
 8007012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007016:	e04f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007018:	2308      	movs	r3, #8
 800701a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800701e:	e04b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007020:	2310      	movs	r3, #16
 8007022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007026:	e047      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007028:	2320      	movs	r3, #32
 800702a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800702e:	e043      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007036:	e03f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800703e:	bf00      	nop
 8007040:	e03a      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a50      	ldr	r2, [pc, #320]	; (8007188 <UART_SetConfig+0x6a8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d132      	bne.n	80070b2 <UART_SetConfig+0x5d2>
 800704c:	4b4b      	ldr	r3, [pc, #300]	; (800717c <UART_SetConfig+0x69c>)
 800704e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	2b05      	cmp	r3, #5
 8007056:	d827      	bhi.n	80070a8 <UART_SetConfig+0x5c8>
 8007058:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <UART_SetConfig+0x580>)
 800705a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705e:	bf00      	nop
 8007060:	08007079 	.word	0x08007079
 8007064:	08007081 	.word	0x08007081
 8007068:	08007089 	.word	0x08007089
 800706c:	08007091 	.word	0x08007091
 8007070:	08007099 	.word	0x08007099
 8007074:	080070a1 	.word	0x080070a1
 8007078:	2302      	movs	r3, #2
 800707a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800707e:	e01b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007086:	e017      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800708e:	e013      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007096:	e00f      	b.n	80070b8 <UART_SetConfig+0x5d8>
 8007098:	2320      	movs	r3, #32
 800709a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800709e:	e00b      	b.n	80070b8 <UART_SetConfig+0x5d8>
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070a6:	e007      	b.n	80070b8 <UART_SetConfig+0x5d8>
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80070ae:	bf00      	nop
 80070b0:	e002      	b.n	80070b8 <UART_SetConfig+0x5d8>
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a32      	ldr	r2, [pc, #200]	; (8007188 <UART_SetConfig+0x6a8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	f040 86f7 	bne.w	8007eb2 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	f000 80c0 	beq.w	800724e <UART_SetConfig+0x76e>
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	dc04      	bgt.n	80070dc <UART_SetConfig+0x5fc>
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d00c      	beq.n	80070f0 <UART_SetConfig+0x610>
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d065      	beq.n	80071a6 <UART_SetConfig+0x6c6>
 80070da:	e27a      	b.n	80075d2 <UART_SetConfig+0xaf2>
 80070dc:	2b20      	cmp	r3, #32
 80070de:	f000 81b0 	beq.w	8007442 <UART_SetConfig+0x962>
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	f000 821e 	beq.w	8007524 <UART_SetConfig+0xa44>
 80070e8:	2b10      	cmp	r3, #16
 80070ea:	f000 8104 	beq.w	80072f6 <UART_SetConfig+0x816>
 80070ee:	e270      	b.n	80075d2 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80070f0:	f7fd fde2 	bl	8004cb8 <HAL_RCCEx_GetD3PCLK1Freq>
 80070f4:	4602      	mov	r2, r0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d04e      	beq.n	800719c <UART_SetConfig+0x6bc>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007102:	2b01      	cmp	r3, #1
 8007104:	d048      	beq.n	8007198 <UART_SetConfig+0x6b8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	2b02      	cmp	r3, #2
 800710c:	d042      	beq.n	8007194 <UART_SetConfig+0x6b4>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	2b03      	cmp	r3, #3
 8007114:	d03c      	beq.n	8007190 <UART_SetConfig+0x6b0>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	2b04      	cmp	r3, #4
 800711c:	d036      	beq.n	800718c <UART_SetConfig+0x6ac>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b05      	cmp	r3, #5
 8007124:	d026      	beq.n	8007174 <UART_SetConfig+0x694>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b06      	cmp	r3, #6
 800712c:	d020      	beq.n	8007170 <UART_SetConfig+0x690>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007132:	2b07      	cmp	r3, #7
 8007134:	d01a      	beq.n	800716c <UART_SetConfig+0x68c>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	2b08      	cmp	r3, #8
 800713c:	d014      	beq.n	8007168 <UART_SetConfig+0x688>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	2b09      	cmp	r3, #9
 8007144:	d00e      	beq.n	8007164 <UART_SetConfig+0x684>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	2b0a      	cmp	r3, #10
 800714c:	d008      	beq.n	8007160 <UART_SetConfig+0x680>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007152:	2b0b      	cmp	r3, #11
 8007154:	d102      	bne.n	800715c <UART_SetConfig+0x67c>
 8007156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800715a:	e020      	b.n	800719e <UART_SetConfig+0x6be>
 800715c:	2301      	movs	r3, #1
 800715e:	e01e      	b.n	800719e <UART_SetConfig+0x6be>
 8007160:	2380      	movs	r3, #128	; 0x80
 8007162:	e01c      	b.n	800719e <UART_SetConfig+0x6be>
 8007164:	2340      	movs	r3, #64	; 0x40
 8007166:	e01a      	b.n	800719e <UART_SetConfig+0x6be>
 8007168:	2320      	movs	r3, #32
 800716a:	e018      	b.n	800719e <UART_SetConfig+0x6be>
 800716c:	2310      	movs	r3, #16
 800716e:	e016      	b.n	800719e <UART_SetConfig+0x6be>
 8007170:	230c      	movs	r3, #12
 8007172:	e014      	b.n	800719e <UART_SetConfig+0x6be>
 8007174:	230a      	movs	r3, #10
 8007176:	e012      	b.n	800719e <UART_SetConfig+0x6be>
 8007178:	40011400 	.word	0x40011400
 800717c:	58024400 	.word	0x58024400
 8007180:	40007800 	.word	0x40007800
 8007184:	40007c00 	.word	0x40007c00
 8007188:	58000c00 	.word	0x58000c00
 800718c:	2308      	movs	r3, #8
 800718e:	e006      	b.n	800719e <UART_SetConfig+0x6be>
 8007190:	2306      	movs	r3, #6
 8007192:	e004      	b.n	800719e <UART_SetConfig+0x6be>
 8007194:	2304      	movs	r3, #4
 8007196:	e002      	b.n	800719e <UART_SetConfig+0x6be>
 8007198:	2302      	movs	r3, #2
 800719a:	e000      	b.n	800719e <UART_SetConfig+0x6be>
 800719c:	2301      	movs	r3, #1
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80071a4:	e219      	b.n	80075da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071a6:	f107 0318 	add.w	r3, r7, #24
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fd fd9a 	bl	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d044      	beq.n	8007244 <UART_SetConfig+0x764>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d03e      	beq.n	8007240 <UART_SetConfig+0x760>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d038      	beq.n	800723c <UART_SetConfig+0x75c>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d032      	beq.n	8007238 <UART_SetConfig+0x758>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d02c      	beq.n	8007234 <UART_SetConfig+0x754>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	2b05      	cmp	r3, #5
 80071e0:	d026      	beq.n	8007230 <UART_SetConfig+0x750>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e6:	2b06      	cmp	r3, #6
 80071e8:	d020      	beq.n	800722c <UART_SetConfig+0x74c>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ee:	2b07      	cmp	r3, #7
 80071f0:	d01a      	beq.n	8007228 <UART_SetConfig+0x748>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	2b08      	cmp	r3, #8
 80071f8:	d014      	beq.n	8007224 <UART_SetConfig+0x744>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fe:	2b09      	cmp	r3, #9
 8007200:	d00e      	beq.n	8007220 <UART_SetConfig+0x740>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007206:	2b0a      	cmp	r3, #10
 8007208:	d008      	beq.n	800721c <UART_SetConfig+0x73c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	2b0b      	cmp	r3, #11
 8007210:	d102      	bne.n	8007218 <UART_SetConfig+0x738>
 8007212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007216:	e016      	b.n	8007246 <UART_SetConfig+0x766>
 8007218:	2301      	movs	r3, #1
 800721a:	e014      	b.n	8007246 <UART_SetConfig+0x766>
 800721c:	2380      	movs	r3, #128	; 0x80
 800721e:	e012      	b.n	8007246 <UART_SetConfig+0x766>
 8007220:	2340      	movs	r3, #64	; 0x40
 8007222:	e010      	b.n	8007246 <UART_SetConfig+0x766>
 8007224:	2320      	movs	r3, #32
 8007226:	e00e      	b.n	8007246 <UART_SetConfig+0x766>
 8007228:	2310      	movs	r3, #16
 800722a:	e00c      	b.n	8007246 <UART_SetConfig+0x766>
 800722c:	230c      	movs	r3, #12
 800722e:	e00a      	b.n	8007246 <UART_SetConfig+0x766>
 8007230:	230a      	movs	r3, #10
 8007232:	e008      	b.n	8007246 <UART_SetConfig+0x766>
 8007234:	2308      	movs	r3, #8
 8007236:	e006      	b.n	8007246 <UART_SetConfig+0x766>
 8007238:	2306      	movs	r3, #6
 800723a:	e004      	b.n	8007246 <UART_SetConfig+0x766>
 800723c:	2304      	movs	r3, #4
 800723e:	e002      	b.n	8007246 <UART_SetConfig+0x766>
 8007240:	2302      	movs	r3, #2
 8007242:	e000      	b.n	8007246 <UART_SetConfig+0x766>
 8007244:	2301      	movs	r3, #1
 8007246:	fbb2 f3f3 	udiv	r3, r2, r3
 800724a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800724c:	e1c5      	b.n	80075da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800724e:	f107 030c 	add.w	r3, r7, #12
 8007252:	4618      	mov	r0, r3
 8007254:	f7fd fe92 	bl	8004f7c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725e:	2b00      	cmp	r3, #0
 8007260:	d044      	beq.n	80072ec <UART_SetConfig+0x80c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b01      	cmp	r3, #1
 8007268:	d03e      	beq.n	80072e8 <UART_SetConfig+0x808>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b02      	cmp	r3, #2
 8007270:	d038      	beq.n	80072e4 <UART_SetConfig+0x804>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b03      	cmp	r3, #3
 8007278:	d032      	beq.n	80072e0 <UART_SetConfig+0x800>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b04      	cmp	r3, #4
 8007280:	d02c      	beq.n	80072dc <UART_SetConfig+0x7fc>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b05      	cmp	r3, #5
 8007288:	d026      	beq.n	80072d8 <UART_SetConfig+0x7f8>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b06      	cmp	r3, #6
 8007290:	d020      	beq.n	80072d4 <UART_SetConfig+0x7f4>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b07      	cmp	r3, #7
 8007298:	d01a      	beq.n	80072d0 <UART_SetConfig+0x7f0>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d014      	beq.n	80072cc <UART_SetConfig+0x7ec>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b09      	cmp	r3, #9
 80072a8:	d00e      	beq.n	80072c8 <UART_SetConfig+0x7e8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b0a      	cmp	r3, #10
 80072b0:	d008      	beq.n	80072c4 <UART_SetConfig+0x7e4>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b0b      	cmp	r3, #11
 80072b8:	d102      	bne.n	80072c0 <UART_SetConfig+0x7e0>
 80072ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072be:	e016      	b.n	80072ee <UART_SetConfig+0x80e>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e014      	b.n	80072ee <UART_SetConfig+0x80e>
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	e012      	b.n	80072ee <UART_SetConfig+0x80e>
 80072c8:	2340      	movs	r3, #64	; 0x40
 80072ca:	e010      	b.n	80072ee <UART_SetConfig+0x80e>
 80072cc:	2320      	movs	r3, #32
 80072ce:	e00e      	b.n	80072ee <UART_SetConfig+0x80e>
 80072d0:	2310      	movs	r3, #16
 80072d2:	e00c      	b.n	80072ee <UART_SetConfig+0x80e>
 80072d4:	230c      	movs	r3, #12
 80072d6:	e00a      	b.n	80072ee <UART_SetConfig+0x80e>
 80072d8:	230a      	movs	r3, #10
 80072da:	e008      	b.n	80072ee <UART_SetConfig+0x80e>
 80072dc:	2308      	movs	r3, #8
 80072de:	e006      	b.n	80072ee <UART_SetConfig+0x80e>
 80072e0:	2306      	movs	r3, #6
 80072e2:	e004      	b.n	80072ee <UART_SetConfig+0x80e>
 80072e4:	2304      	movs	r3, #4
 80072e6:	e002      	b.n	80072ee <UART_SetConfig+0x80e>
 80072e8:	2302      	movs	r3, #2
 80072ea:	e000      	b.n	80072ee <UART_SetConfig+0x80e>
 80072ec:	2301      	movs	r3, #1
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80072f4:	e171      	b.n	80075da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072f6:	4b7a      	ldr	r3, [pc, #488]	; (80074e0 <UART_SetConfig+0xa00>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d054      	beq.n	80073ac <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007302:	4b77      	ldr	r3, [pc, #476]	; (80074e0 <UART_SetConfig+0xa00>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	08db      	lsrs	r3, r3, #3
 8007308:	f003 0303 	and.w	r3, r3, #3
 800730c:	4a75      	ldr	r2, [pc, #468]	; (80074e4 <UART_SetConfig+0xa04>)
 800730e:	40da      	lsrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d044      	beq.n	80073a2 <UART_SetConfig+0x8c2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b01      	cmp	r3, #1
 800731e:	d03e      	beq.n	800739e <UART_SetConfig+0x8be>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	2b02      	cmp	r3, #2
 8007326:	d038      	beq.n	800739a <UART_SetConfig+0x8ba>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	2b03      	cmp	r3, #3
 800732e:	d032      	beq.n	8007396 <UART_SetConfig+0x8b6>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	2b04      	cmp	r3, #4
 8007336:	d02c      	beq.n	8007392 <UART_SetConfig+0x8b2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733c:	2b05      	cmp	r3, #5
 800733e:	d026      	beq.n	800738e <UART_SetConfig+0x8ae>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b06      	cmp	r3, #6
 8007346:	d020      	beq.n	800738a <UART_SetConfig+0x8aa>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	2b07      	cmp	r3, #7
 800734e:	d01a      	beq.n	8007386 <UART_SetConfig+0x8a6>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	2b08      	cmp	r3, #8
 8007356:	d014      	beq.n	8007382 <UART_SetConfig+0x8a2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735c:	2b09      	cmp	r3, #9
 800735e:	d00e      	beq.n	800737e <UART_SetConfig+0x89e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b0a      	cmp	r3, #10
 8007366:	d008      	beq.n	800737a <UART_SetConfig+0x89a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736c:	2b0b      	cmp	r3, #11
 800736e:	d102      	bne.n	8007376 <UART_SetConfig+0x896>
 8007370:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007374:	e016      	b.n	80073a4 <UART_SetConfig+0x8c4>
 8007376:	2301      	movs	r3, #1
 8007378:	e014      	b.n	80073a4 <UART_SetConfig+0x8c4>
 800737a:	2380      	movs	r3, #128	; 0x80
 800737c:	e012      	b.n	80073a4 <UART_SetConfig+0x8c4>
 800737e:	2340      	movs	r3, #64	; 0x40
 8007380:	e010      	b.n	80073a4 <UART_SetConfig+0x8c4>
 8007382:	2320      	movs	r3, #32
 8007384:	e00e      	b.n	80073a4 <UART_SetConfig+0x8c4>
 8007386:	2310      	movs	r3, #16
 8007388:	e00c      	b.n	80073a4 <UART_SetConfig+0x8c4>
 800738a:	230c      	movs	r3, #12
 800738c:	e00a      	b.n	80073a4 <UART_SetConfig+0x8c4>
 800738e:	230a      	movs	r3, #10
 8007390:	e008      	b.n	80073a4 <UART_SetConfig+0x8c4>
 8007392:	2308      	movs	r3, #8
 8007394:	e006      	b.n	80073a4 <UART_SetConfig+0x8c4>
 8007396:	2306      	movs	r3, #6
 8007398:	e004      	b.n	80073a4 <UART_SetConfig+0x8c4>
 800739a:	2304      	movs	r3, #4
 800739c:	e002      	b.n	80073a4 <UART_SetConfig+0x8c4>
 800739e:	2302      	movs	r3, #2
 80073a0:	e000      	b.n	80073a4 <UART_SetConfig+0x8c4>
 80073a2:	2301      	movs	r3, #1
 80073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80073aa:	e116      	b.n	80075da <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d043      	beq.n	800743c <UART_SetConfig+0x95c>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d03d      	beq.n	8007438 <UART_SetConfig+0x958>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d037      	beq.n	8007434 <UART_SetConfig+0x954>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d031      	beq.n	8007430 <UART_SetConfig+0x950>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d02b      	beq.n	800742c <UART_SetConfig+0x94c>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d025      	beq.n	8007428 <UART_SetConfig+0x948>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	2b06      	cmp	r3, #6
 80073e2:	d01f      	beq.n	8007424 <UART_SetConfig+0x944>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	2b07      	cmp	r3, #7
 80073ea:	d019      	beq.n	8007420 <UART_SetConfig+0x940>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d013      	beq.n	800741c <UART_SetConfig+0x93c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2b09      	cmp	r3, #9
 80073fa:	d00d      	beq.n	8007418 <UART_SetConfig+0x938>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b0a      	cmp	r3, #10
 8007402:	d007      	beq.n	8007414 <UART_SetConfig+0x934>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007408:	2b0b      	cmp	r3, #11
 800740a:	d101      	bne.n	8007410 <UART_SetConfig+0x930>
 800740c:	4b36      	ldr	r3, [pc, #216]	; (80074e8 <UART_SetConfig+0xa08>)
 800740e:	e016      	b.n	800743e <UART_SetConfig+0x95e>
 8007410:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <UART_SetConfig+0xa04>)
 8007412:	e014      	b.n	800743e <UART_SetConfig+0x95e>
 8007414:	4b35      	ldr	r3, [pc, #212]	; (80074ec <UART_SetConfig+0xa0c>)
 8007416:	e012      	b.n	800743e <UART_SetConfig+0x95e>
 8007418:	4b35      	ldr	r3, [pc, #212]	; (80074f0 <UART_SetConfig+0xa10>)
 800741a:	e010      	b.n	800743e <UART_SetConfig+0x95e>
 800741c:	4b35      	ldr	r3, [pc, #212]	; (80074f4 <UART_SetConfig+0xa14>)
 800741e:	e00e      	b.n	800743e <UART_SetConfig+0x95e>
 8007420:	4b35      	ldr	r3, [pc, #212]	; (80074f8 <UART_SetConfig+0xa18>)
 8007422:	e00c      	b.n	800743e <UART_SetConfig+0x95e>
 8007424:	4b35      	ldr	r3, [pc, #212]	; (80074fc <UART_SetConfig+0xa1c>)
 8007426:	e00a      	b.n	800743e <UART_SetConfig+0x95e>
 8007428:	4b35      	ldr	r3, [pc, #212]	; (8007500 <UART_SetConfig+0xa20>)
 800742a:	e008      	b.n	800743e <UART_SetConfig+0x95e>
 800742c:	4b35      	ldr	r3, [pc, #212]	; (8007504 <UART_SetConfig+0xa24>)
 800742e:	e006      	b.n	800743e <UART_SetConfig+0x95e>
 8007430:	4b35      	ldr	r3, [pc, #212]	; (8007508 <UART_SetConfig+0xa28>)
 8007432:	e004      	b.n	800743e <UART_SetConfig+0x95e>
 8007434:	4b35      	ldr	r3, [pc, #212]	; (800750c <UART_SetConfig+0xa2c>)
 8007436:	e002      	b.n	800743e <UART_SetConfig+0x95e>
 8007438:	4b35      	ldr	r3, [pc, #212]	; (8007510 <UART_SetConfig+0xa30>)
 800743a:	e000      	b.n	800743e <UART_SetConfig+0x95e>
 800743c:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <UART_SetConfig+0xa04>)
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007440:	e0cb      	b.n	80075da <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007446:	2b00      	cmp	r3, #0
 8007448:	d046      	beq.n	80074d8 <UART_SetConfig+0x9f8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	2b01      	cmp	r3, #1
 8007450:	d040      	beq.n	80074d4 <UART_SetConfig+0x9f4>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b02      	cmp	r3, #2
 8007458:	d03a      	beq.n	80074d0 <UART_SetConfig+0x9f0>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	2b03      	cmp	r3, #3
 8007460:	d034      	beq.n	80074cc <UART_SetConfig+0x9ec>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007466:	2b04      	cmp	r3, #4
 8007468:	d02e      	beq.n	80074c8 <UART_SetConfig+0x9e8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	2b05      	cmp	r3, #5
 8007470:	d028      	beq.n	80074c4 <UART_SetConfig+0x9e4>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b06      	cmp	r3, #6
 8007478:	d022      	beq.n	80074c0 <UART_SetConfig+0x9e0>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	2b07      	cmp	r3, #7
 8007480:	d01c      	beq.n	80074bc <UART_SetConfig+0x9dc>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	2b08      	cmp	r3, #8
 8007488:	d016      	beq.n	80074b8 <UART_SetConfig+0x9d8>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	2b09      	cmp	r3, #9
 8007490:	d00f      	beq.n	80074b2 <UART_SetConfig+0x9d2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	2b0a      	cmp	r3, #10
 8007498:	d008      	beq.n	80074ac <UART_SetConfig+0x9cc>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749e:	2b0b      	cmp	r3, #11
 80074a0:	d102      	bne.n	80074a8 <UART_SetConfig+0x9c8>
 80074a2:	f643 5309 	movw	r3, #15625	; 0x3d09
 80074a6:	e018      	b.n	80074da <UART_SetConfig+0x9fa>
 80074a8:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <UART_SetConfig+0xa18>)
 80074aa:	e016      	b.n	80074da <UART_SetConfig+0x9fa>
 80074ac:	f647 2312 	movw	r3, #31250	; 0x7a12
 80074b0:	e013      	b.n	80074da <UART_SetConfig+0x9fa>
 80074b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80074b6:	e010      	b.n	80074da <UART_SetConfig+0x9fa>
 80074b8:	4b16      	ldr	r3, [pc, #88]	; (8007514 <UART_SetConfig+0xa34>)
 80074ba:	e00e      	b.n	80074da <UART_SetConfig+0x9fa>
 80074bc:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <UART_SetConfig+0xa08>)
 80074be:	e00c      	b.n	80074da <UART_SetConfig+0x9fa>
 80074c0:	4b15      	ldr	r3, [pc, #84]	; (8007518 <UART_SetConfig+0xa38>)
 80074c2:	e00a      	b.n	80074da <UART_SetConfig+0x9fa>
 80074c4:	4b15      	ldr	r3, [pc, #84]	; (800751c <UART_SetConfig+0xa3c>)
 80074c6:	e008      	b.n	80074da <UART_SetConfig+0x9fa>
 80074c8:	4b08      	ldr	r3, [pc, #32]	; (80074ec <UART_SetConfig+0xa0c>)
 80074ca:	e006      	b.n	80074da <UART_SetConfig+0x9fa>
 80074cc:	4b14      	ldr	r3, [pc, #80]	; (8007520 <UART_SetConfig+0xa40>)
 80074ce:	e004      	b.n	80074da <UART_SetConfig+0x9fa>
 80074d0:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <UART_SetConfig+0xa10>)
 80074d2:	e002      	b.n	80074da <UART_SetConfig+0x9fa>
 80074d4:	4b07      	ldr	r3, [pc, #28]	; (80074f4 <UART_SetConfig+0xa14>)
 80074d6:	e000      	b.n	80074da <UART_SetConfig+0x9fa>
 80074d8:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <UART_SetConfig+0xa18>)
 80074da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80074dc:	e07d      	b.n	80075da <UART_SetConfig+0xafa>
 80074de:	bf00      	nop
 80074e0:	58024400 	.word	0x58024400
 80074e4:	03d09000 	.word	0x03d09000
 80074e8:	0003d090 	.word	0x0003d090
 80074ec:	0007a120 	.word	0x0007a120
 80074f0:	000f4240 	.word	0x000f4240
 80074f4:	001e8480 	.word	0x001e8480
 80074f8:	003d0900 	.word	0x003d0900
 80074fc:	00516155 	.word	0x00516155
 8007500:	0061a800 	.word	0x0061a800
 8007504:	007a1200 	.word	0x007a1200
 8007508:	00a2c2aa 	.word	0x00a2c2aa
 800750c:	00f42400 	.word	0x00f42400
 8007510:	01e84800 	.word	0x01e84800
 8007514:	0001e848 	.word	0x0001e848
 8007518:	00051615 	.word	0x00051615
 800751c:	00061a80 	.word	0x00061a80
 8007520:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d04e      	beq.n	80075ca <UART_SetConfig+0xaea>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	2b01      	cmp	r3, #1
 8007532:	d047      	beq.n	80075c4 <UART_SetConfig+0xae4>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007538:	2b02      	cmp	r3, #2
 800753a:	d040      	beq.n	80075be <UART_SetConfig+0xade>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007540:	2b03      	cmp	r3, #3
 8007542:	d039      	beq.n	80075b8 <UART_SetConfig+0xad8>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	2b04      	cmp	r3, #4
 800754a:	d032      	beq.n	80075b2 <UART_SetConfig+0xad2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007550:	2b05      	cmp	r3, #5
 8007552:	d02b      	beq.n	80075ac <UART_SetConfig+0xacc>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	2b06      	cmp	r3, #6
 800755a:	d024      	beq.n	80075a6 <UART_SetConfig+0xac6>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	2b07      	cmp	r3, #7
 8007562:	d01d      	beq.n	80075a0 <UART_SetConfig+0xac0>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	2b08      	cmp	r3, #8
 800756a:	d016      	beq.n	800759a <UART_SetConfig+0xaba>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007570:	2b09      	cmp	r3, #9
 8007572:	d00f      	beq.n	8007594 <UART_SetConfig+0xab4>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2b0a      	cmp	r3, #10
 800757a:	d008      	beq.n	800758e <UART_SetConfig+0xaae>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	2b0b      	cmp	r3, #11
 8007582:	d101      	bne.n	8007588 <UART_SetConfig+0xaa8>
 8007584:	2380      	movs	r3, #128	; 0x80
 8007586:	e022      	b.n	80075ce <UART_SetConfig+0xaee>
 8007588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800758c:	e01f      	b.n	80075ce <UART_SetConfig+0xaee>
 800758e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007592:	e01c      	b.n	80075ce <UART_SetConfig+0xaee>
 8007594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007598:	e019      	b.n	80075ce <UART_SetConfig+0xaee>
 800759a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800759e:	e016      	b.n	80075ce <UART_SetConfig+0xaee>
 80075a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80075a4:	e013      	b.n	80075ce <UART_SetConfig+0xaee>
 80075a6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80075aa:	e010      	b.n	80075ce <UART_SetConfig+0xaee>
 80075ac:	f640 43cc 	movw	r3, #3276	; 0xccc
 80075b0:	e00d      	b.n	80075ce <UART_SetConfig+0xaee>
 80075b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075b6:	e00a      	b.n	80075ce <UART_SetConfig+0xaee>
 80075b8:	f241 5355 	movw	r3, #5461	; 0x1555
 80075bc:	e007      	b.n	80075ce <UART_SetConfig+0xaee>
 80075be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075c2:	e004      	b.n	80075ce <UART_SetConfig+0xaee>
 80075c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075c8:	e001      	b.n	80075ce <UART_SetConfig+0xaee>
 80075ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075d0:	e003      	b.n	80075da <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80075d8:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f001 83e8 	beq.w	8008db2 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	005b      	lsls	r3, r3, #1
 80075ea:	4413      	add	r3, r2
 80075ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d305      	bcc.n	80075fe <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d904      	bls.n	8007608 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007604:	f001 bbd5 	b.w	8008db2 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007608:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800760c:	2b08      	cmp	r3, #8
 800760e:	f000 8154 	beq.w	80078ba <UART_SetConfig+0xdda>
 8007612:	2b08      	cmp	r3, #8
 8007614:	dc06      	bgt.n	8007624 <UART_SetConfig+0xb44>
 8007616:	2b02      	cmp	r3, #2
 8007618:	d00f      	beq.n	800763a <UART_SetConfig+0xb5a>
 800761a:	2b04      	cmp	r3, #4
 800761c:	f000 80ac 	beq.w	8007778 <UART_SetConfig+0xc98>
 8007620:	f000 bc30 	b.w	8007e84 <UART_SetConfig+0x13a4>
 8007624:	2b20      	cmp	r3, #32
 8007626:	f000 832d 	beq.w	8007c84 <UART_SetConfig+0x11a4>
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	f000 83a5 	beq.w	8007d7a <UART_SetConfig+0x129a>
 8007630:	2b10      	cmp	r3, #16
 8007632:	f000 81e3 	beq.w	80079fc <UART_SetConfig+0xf1c>
 8007636:	f000 bc25 	b.w	8007e84 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800763a:	f7fd fb3d 	bl	8004cb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800763e:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	4618      	mov	r0, r3
 8007644:	f04f 0100 	mov.w	r1, #0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	2b00      	cmp	r3, #0
 800764e:	d067      	beq.n	8007720 <UART_SetConfig+0xc40>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	2b01      	cmp	r3, #1
 8007656:	d05e      	beq.n	8007716 <UART_SetConfig+0xc36>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	2b02      	cmp	r3, #2
 800765e:	d055      	beq.n	800770c <UART_SetConfig+0xc2c>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	2b03      	cmp	r3, #3
 8007666:	d04c      	beq.n	8007702 <UART_SetConfig+0xc22>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766c:	2b04      	cmp	r3, #4
 800766e:	d043      	beq.n	80076f8 <UART_SetConfig+0xc18>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	2b05      	cmp	r3, #5
 8007676:	d03a      	beq.n	80076ee <UART_SetConfig+0xc0e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	2b06      	cmp	r3, #6
 800767e:	d031      	beq.n	80076e4 <UART_SetConfig+0xc04>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007684:	2b07      	cmp	r3, #7
 8007686:	d028      	beq.n	80076da <UART_SetConfig+0xbfa>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	2b08      	cmp	r3, #8
 800768e:	d01f      	beq.n	80076d0 <UART_SetConfig+0xbf0>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	2b09      	cmp	r3, #9
 8007696:	d016      	beq.n	80076c6 <UART_SetConfig+0xbe6>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b0a      	cmp	r3, #10
 800769e:	d00d      	beq.n	80076bc <UART_SetConfig+0xbdc>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	2b0b      	cmp	r3, #11
 80076a6:	d104      	bne.n	80076b2 <UART_SetConfig+0xbd2>
 80076a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076ac:	f04f 0400 	mov.w	r4, #0
 80076b0:	e03a      	b.n	8007728 <UART_SetConfig+0xc48>
 80076b2:	f04f 0301 	mov.w	r3, #1
 80076b6:	f04f 0400 	mov.w	r4, #0
 80076ba:	e035      	b.n	8007728 <UART_SetConfig+0xc48>
 80076bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80076c0:	f04f 0400 	mov.w	r4, #0
 80076c4:	e030      	b.n	8007728 <UART_SetConfig+0xc48>
 80076c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80076ca:	f04f 0400 	mov.w	r4, #0
 80076ce:	e02b      	b.n	8007728 <UART_SetConfig+0xc48>
 80076d0:	f04f 0320 	mov.w	r3, #32
 80076d4:	f04f 0400 	mov.w	r4, #0
 80076d8:	e026      	b.n	8007728 <UART_SetConfig+0xc48>
 80076da:	f04f 0310 	mov.w	r3, #16
 80076de:	f04f 0400 	mov.w	r4, #0
 80076e2:	e021      	b.n	8007728 <UART_SetConfig+0xc48>
 80076e4:	f04f 030c 	mov.w	r3, #12
 80076e8:	f04f 0400 	mov.w	r4, #0
 80076ec:	e01c      	b.n	8007728 <UART_SetConfig+0xc48>
 80076ee:	f04f 030a 	mov.w	r3, #10
 80076f2:	f04f 0400 	mov.w	r4, #0
 80076f6:	e017      	b.n	8007728 <UART_SetConfig+0xc48>
 80076f8:	f04f 0308 	mov.w	r3, #8
 80076fc:	f04f 0400 	mov.w	r4, #0
 8007700:	e012      	b.n	8007728 <UART_SetConfig+0xc48>
 8007702:	f04f 0306 	mov.w	r3, #6
 8007706:	f04f 0400 	mov.w	r4, #0
 800770a:	e00d      	b.n	8007728 <UART_SetConfig+0xc48>
 800770c:	f04f 0304 	mov.w	r3, #4
 8007710:	f04f 0400 	mov.w	r4, #0
 8007714:	e008      	b.n	8007728 <UART_SetConfig+0xc48>
 8007716:	f04f 0302 	mov.w	r3, #2
 800771a:	f04f 0400 	mov.w	r4, #0
 800771e:	e003      	b.n	8007728 <UART_SetConfig+0xc48>
 8007720:	f04f 0301 	mov.w	r3, #1
 8007724:	f04f 0400 	mov.w	r4, #0
 8007728:	461a      	mov	r2, r3
 800772a:	4623      	mov	r3, r4
 800772c:	f7f8 fdd4 	bl	80002d8 <__aeabi_uldivmod>
 8007730:	4603      	mov	r3, r0
 8007732:	460c      	mov	r4, r1
 8007734:	4619      	mov	r1, r3
 8007736:	4622      	mov	r2, r4
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	f04f 0400 	mov.w	r4, #0
 8007740:	0214      	lsls	r4, r2, #8
 8007742:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007746:	020b      	lsls	r3, r1, #8
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	6852      	ldr	r2, [r2, #4]
 800774c:	0852      	lsrs	r2, r2, #1
 800774e:	4611      	mov	r1, r2
 8007750:	f04f 0200 	mov.w	r2, #0
 8007754:	eb13 0b01 	adds.w	fp, r3, r1
 8007758:	eb44 0c02 	adc.w	ip, r4, r2
 800775c:	4658      	mov	r0, fp
 800775e:	4661      	mov	r1, ip
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f04f 0400 	mov.w	r4, #0
 8007768:	461a      	mov	r2, r3
 800776a:	4623      	mov	r3, r4
 800776c:	f7f8 fdb4 	bl	80002d8 <__aeabi_uldivmod>
 8007770:	4603      	mov	r3, r0
 8007772:	460c      	mov	r4, r1
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007776:	e389      	b.n	8007e8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007778:	f107 0318 	add.w	r3, r7, #24
 800777c:	4618      	mov	r0, r3
 800777e:	f7fd fab1 	bl	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4618      	mov	r0, r3
 8007786:	f04f 0100 	mov.w	r1, #0
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778e:	2b00      	cmp	r3, #0
 8007790:	d067      	beq.n	8007862 <UART_SetConfig+0xd82>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	2b01      	cmp	r3, #1
 8007798:	d05e      	beq.n	8007858 <UART_SetConfig+0xd78>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d055      	beq.n	800784e <UART_SetConfig+0xd6e>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d04c      	beq.n	8007844 <UART_SetConfig+0xd64>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d043      	beq.n	800783a <UART_SetConfig+0xd5a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	2b05      	cmp	r3, #5
 80077b8:	d03a      	beq.n	8007830 <UART_SetConfig+0xd50>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077be:	2b06      	cmp	r3, #6
 80077c0:	d031      	beq.n	8007826 <UART_SetConfig+0xd46>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c6:	2b07      	cmp	r3, #7
 80077c8:	d028      	beq.n	800781c <UART_SetConfig+0xd3c>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d01f      	beq.n	8007812 <UART_SetConfig+0xd32>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b09      	cmp	r3, #9
 80077d8:	d016      	beq.n	8007808 <UART_SetConfig+0xd28>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b0a      	cmp	r3, #10
 80077e0:	d00d      	beq.n	80077fe <UART_SetConfig+0xd1e>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	2b0b      	cmp	r3, #11
 80077e8:	d104      	bne.n	80077f4 <UART_SetConfig+0xd14>
 80077ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077ee:	f04f 0400 	mov.w	r4, #0
 80077f2:	e03a      	b.n	800786a <UART_SetConfig+0xd8a>
 80077f4:	f04f 0301 	mov.w	r3, #1
 80077f8:	f04f 0400 	mov.w	r4, #0
 80077fc:	e035      	b.n	800786a <UART_SetConfig+0xd8a>
 80077fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007802:	f04f 0400 	mov.w	r4, #0
 8007806:	e030      	b.n	800786a <UART_SetConfig+0xd8a>
 8007808:	f04f 0340 	mov.w	r3, #64	; 0x40
 800780c:	f04f 0400 	mov.w	r4, #0
 8007810:	e02b      	b.n	800786a <UART_SetConfig+0xd8a>
 8007812:	f04f 0320 	mov.w	r3, #32
 8007816:	f04f 0400 	mov.w	r4, #0
 800781a:	e026      	b.n	800786a <UART_SetConfig+0xd8a>
 800781c:	f04f 0310 	mov.w	r3, #16
 8007820:	f04f 0400 	mov.w	r4, #0
 8007824:	e021      	b.n	800786a <UART_SetConfig+0xd8a>
 8007826:	f04f 030c 	mov.w	r3, #12
 800782a:	f04f 0400 	mov.w	r4, #0
 800782e:	e01c      	b.n	800786a <UART_SetConfig+0xd8a>
 8007830:	f04f 030a 	mov.w	r3, #10
 8007834:	f04f 0400 	mov.w	r4, #0
 8007838:	e017      	b.n	800786a <UART_SetConfig+0xd8a>
 800783a:	f04f 0308 	mov.w	r3, #8
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	e012      	b.n	800786a <UART_SetConfig+0xd8a>
 8007844:	f04f 0306 	mov.w	r3, #6
 8007848:	f04f 0400 	mov.w	r4, #0
 800784c:	e00d      	b.n	800786a <UART_SetConfig+0xd8a>
 800784e:	f04f 0304 	mov.w	r3, #4
 8007852:	f04f 0400 	mov.w	r4, #0
 8007856:	e008      	b.n	800786a <UART_SetConfig+0xd8a>
 8007858:	f04f 0302 	mov.w	r3, #2
 800785c:	f04f 0400 	mov.w	r4, #0
 8007860:	e003      	b.n	800786a <UART_SetConfig+0xd8a>
 8007862:	f04f 0301 	mov.w	r3, #1
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	461a      	mov	r2, r3
 800786c:	4623      	mov	r3, r4
 800786e:	f7f8 fd33 	bl	80002d8 <__aeabi_uldivmod>
 8007872:	4603      	mov	r3, r0
 8007874:	460c      	mov	r4, r1
 8007876:	4619      	mov	r1, r3
 8007878:	4622      	mov	r2, r4
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	f04f 0400 	mov.w	r4, #0
 8007882:	0214      	lsls	r4, r2, #8
 8007884:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007888:	020b      	lsls	r3, r1, #8
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	6852      	ldr	r2, [r2, #4]
 800788e:	0852      	lsrs	r2, r2, #1
 8007890:	4611      	mov	r1, r2
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	eb13 0b01 	adds.w	fp, r3, r1
 800789a:	eb44 0c02 	adc.w	ip, r4, r2
 800789e:	4658      	mov	r0, fp
 80078a0:	4661      	mov	r1, ip
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f04f 0400 	mov.w	r4, #0
 80078aa:	461a      	mov	r2, r3
 80078ac:	4623      	mov	r3, r4
 80078ae:	f7f8 fd13 	bl	80002d8 <__aeabi_uldivmod>
 80078b2:	4603      	mov	r3, r0
 80078b4:	460c      	mov	r4, r1
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078b8:	e2e8      	b.n	8007e8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fd fb5c 	bl	8004f7c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f04f 0100 	mov.w	r1, #0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d067      	beq.n	80079a4 <UART_SetConfig+0xec4>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d05e      	beq.n	800799a <UART_SetConfig+0xeba>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d055      	beq.n	8007990 <UART_SetConfig+0xeb0>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d04c      	beq.n	8007986 <UART_SetConfig+0xea6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b04      	cmp	r3, #4
 80078f2:	d043      	beq.n	800797c <UART_SetConfig+0xe9c>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d03a      	beq.n	8007972 <UART_SetConfig+0xe92>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	2b06      	cmp	r3, #6
 8007902:	d031      	beq.n	8007968 <UART_SetConfig+0xe88>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b07      	cmp	r3, #7
 800790a:	d028      	beq.n	800795e <UART_SetConfig+0xe7e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b08      	cmp	r3, #8
 8007912:	d01f      	beq.n	8007954 <UART_SetConfig+0xe74>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	2b09      	cmp	r3, #9
 800791a:	d016      	beq.n	800794a <UART_SetConfig+0xe6a>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	2b0a      	cmp	r3, #10
 8007922:	d00d      	beq.n	8007940 <UART_SetConfig+0xe60>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	2b0b      	cmp	r3, #11
 800792a:	d104      	bne.n	8007936 <UART_SetConfig+0xe56>
 800792c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007930:	f04f 0400 	mov.w	r4, #0
 8007934:	e03a      	b.n	80079ac <UART_SetConfig+0xecc>
 8007936:	f04f 0301 	mov.w	r3, #1
 800793a:	f04f 0400 	mov.w	r4, #0
 800793e:	e035      	b.n	80079ac <UART_SetConfig+0xecc>
 8007940:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007944:	f04f 0400 	mov.w	r4, #0
 8007948:	e030      	b.n	80079ac <UART_SetConfig+0xecc>
 800794a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800794e:	f04f 0400 	mov.w	r4, #0
 8007952:	e02b      	b.n	80079ac <UART_SetConfig+0xecc>
 8007954:	f04f 0320 	mov.w	r3, #32
 8007958:	f04f 0400 	mov.w	r4, #0
 800795c:	e026      	b.n	80079ac <UART_SetConfig+0xecc>
 800795e:	f04f 0310 	mov.w	r3, #16
 8007962:	f04f 0400 	mov.w	r4, #0
 8007966:	e021      	b.n	80079ac <UART_SetConfig+0xecc>
 8007968:	f04f 030c 	mov.w	r3, #12
 800796c:	f04f 0400 	mov.w	r4, #0
 8007970:	e01c      	b.n	80079ac <UART_SetConfig+0xecc>
 8007972:	f04f 030a 	mov.w	r3, #10
 8007976:	f04f 0400 	mov.w	r4, #0
 800797a:	e017      	b.n	80079ac <UART_SetConfig+0xecc>
 800797c:	f04f 0308 	mov.w	r3, #8
 8007980:	f04f 0400 	mov.w	r4, #0
 8007984:	e012      	b.n	80079ac <UART_SetConfig+0xecc>
 8007986:	f04f 0306 	mov.w	r3, #6
 800798a:	f04f 0400 	mov.w	r4, #0
 800798e:	e00d      	b.n	80079ac <UART_SetConfig+0xecc>
 8007990:	f04f 0304 	mov.w	r3, #4
 8007994:	f04f 0400 	mov.w	r4, #0
 8007998:	e008      	b.n	80079ac <UART_SetConfig+0xecc>
 800799a:	f04f 0302 	mov.w	r3, #2
 800799e:	f04f 0400 	mov.w	r4, #0
 80079a2:	e003      	b.n	80079ac <UART_SetConfig+0xecc>
 80079a4:	f04f 0301 	mov.w	r3, #1
 80079a8:	f04f 0400 	mov.w	r4, #0
 80079ac:	461a      	mov	r2, r3
 80079ae:	4623      	mov	r3, r4
 80079b0:	f7f8 fc92 	bl	80002d8 <__aeabi_uldivmod>
 80079b4:	4603      	mov	r3, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	4619      	mov	r1, r3
 80079ba:	4622      	mov	r2, r4
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	f04f 0400 	mov.w	r4, #0
 80079c4:	0214      	lsls	r4, r2, #8
 80079c6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079ca:	020b      	lsls	r3, r1, #8
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6852      	ldr	r2, [r2, #4]
 80079d0:	0852      	lsrs	r2, r2, #1
 80079d2:	4611      	mov	r1, r2
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	eb13 0b01 	adds.w	fp, r3, r1
 80079dc:	eb44 0c02 	adc.w	ip, r4, r2
 80079e0:	4658      	mov	r0, fp
 80079e2:	4661      	mov	r1, ip
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f04f 0400 	mov.w	r4, #0
 80079ec:	461a      	mov	r2, r3
 80079ee:	4623      	mov	r3, r4
 80079f0:	f7f8 fc72 	bl	80002d8 <__aeabi_uldivmod>
 80079f4:	4603      	mov	r3, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079fa:	e247      	b.n	8007e8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079fc:	4b96      	ldr	r3, [pc, #600]	; (8007c58 <UART_SetConfig+0x1178>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 80a3 	beq.w	8007b50 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a0a:	4b93      	ldr	r3, [pc, #588]	; (8007c58 <UART_SetConfig+0x1178>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	08db      	lsrs	r3, r3, #3
 8007a10:	f003 0303 	and.w	r3, r3, #3
 8007a14:	4a91      	ldr	r2, [pc, #580]	; (8007c5c <UART_SetConfig+0x117c>)
 8007a16:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f04f 0100 	mov.w	r1, #0
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d067      	beq.n	8007af8 <UART_SetConfig+0x1018>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d05e      	beq.n	8007aee <UART_SetConfig+0x100e>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d055      	beq.n	8007ae4 <UART_SetConfig+0x1004>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d04c      	beq.n	8007ada <UART_SetConfig+0xffa>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d043      	beq.n	8007ad0 <UART_SetConfig+0xff0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	2b05      	cmp	r3, #5
 8007a4e:	d03a      	beq.n	8007ac6 <UART_SetConfig+0xfe6>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b06      	cmp	r3, #6
 8007a56:	d031      	beq.n	8007abc <UART_SetConfig+0xfdc>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	2b07      	cmp	r3, #7
 8007a5e:	d028      	beq.n	8007ab2 <UART_SetConfig+0xfd2>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d01f      	beq.n	8007aa8 <UART_SetConfig+0xfc8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b09      	cmp	r3, #9
 8007a6e:	d016      	beq.n	8007a9e <UART_SetConfig+0xfbe>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2b0a      	cmp	r3, #10
 8007a76:	d00d      	beq.n	8007a94 <UART_SetConfig+0xfb4>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	2b0b      	cmp	r3, #11
 8007a7e:	d104      	bne.n	8007a8a <UART_SetConfig+0xfaa>
 8007a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a84:	f04f 0400 	mov.w	r4, #0
 8007a88:	e03a      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007a8a:	f04f 0301 	mov.w	r3, #1
 8007a8e:	f04f 0400 	mov.w	r4, #0
 8007a92:	e035      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007a94:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007a98:	f04f 0400 	mov.w	r4, #0
 8007a9c:	e030      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007a9e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007aa2:	f04f 0400 	mov.w	r4, #0
 8007aa6:	e02b      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007aa8:	f04f 0320 	mov.w	r3, #32
 8007aac:	f04f 0400 	mov.w	r4, #0
 8007ab0:	e026      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007ab2:	f04f 0310 	mov.w	r3, #16
 8007ab6:	f04f 0400 	mov.w	r4, #0
 8007aba:	e021      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007abc:	f04f 030c 	mov.w	r3, #12
 8007ac0:	f04f 0400 	mov.w	r4, #0
 8007ac4:	e01c      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007ac6:	f04f 030a 	mov.w	r3, #10
 8007aca:	f04f 0400 	mov.w	r4, #0
 8007ace:	e017      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007ad0:	f04f 0308 	mov.w	r3, #8
 8007ad4:	f04f 0400 	mov.w	r4, #0
 8007ad8:	e012      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007ada:	f04f 0306 	mov.w	r3, #6
 8007ade:	f04f 0400 	mov.w	r4, #0
 8007ae2:	e00d      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007ae4:	f04f 0304 	mov.w	r3, #4
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	e008      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007aee:	f04f 0302 	mov.w	r3, #2
 8007af2:	f04f 0400 	mov.w	r4, #0
 8007af6:	e003      	b.n	8007b00 <UART_SetConfig+0x1020>
 8007af8:	f04f 0301 	mov.w	r3, #1
 8007afc:	f04f 0400 	mov.w	r4, #0
 8007b00:	461a      	mov	r2, r3
 8007b02:	4623      	mov	r3, r4
 8007b04:	f7f8 fbe8 	bl	80002d8 <__aeabi_uldivmod>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	460c      	mov	r4, r1
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4622      	mov	r2, r4
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	f04f 0400 	mov.w	r4, #0
 8007b18:	0214      	lsls	r4, r2, #8
 8007b1a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007b1e:	020b      	lsls	r3, r1, #8
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6852      	ldr	r2, [r2, #4]
 8007b24:	0852      	lsrs	r2, r2, #1
 8007b26:	4611      	mov	r1, r2
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	eb13 0b01 	adds.w	fp, r3, r1
 8007b30:	eb44 0c02 	adc.w	ip, r4, r2
 8007b34:	4658      	mov	r0, fp
 8007b36:	4661      	mov	r1, ip
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f04f 0400 	mov.w	r4, #0
 8007b40:	461a      	mov	r2, r3
 8007b42:	4623      	mov	r3, r4
 8007b44:	f7f8 fbc8 	bl	80002d8 <__aeabi_uldivmod>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007b4e:	e19d      	b.n	8007e8c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d05b      	beq.n	8007c10 <UART_SetConfig+0x1130>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d053      	beq.n	8007c08 <UART_SetConfig+0x1128>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d04b      	beq.n	8007c00 <UART_SetConfig+0x1120>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d043      	beq.n	8007bf8 <UART_SetConfig+0x1118>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d03b      	beq.n	8007bf0 <UART_SetConfig+0x1110>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	2b05      	cmp	r3, #5
 8007b7e:	d033      	beq.n	8007be8 <UART_SetConfig+0x1108>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	2b06      	cmp	r3, #6
 8007b86:	d02b      	beq.n	8007be0 <UART_SetConfig+0x1100>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8c:	2b07      	cmp	r3, #7
 8007b8e:	d023      	beq.n	8007bd8 <UART_SetConfig+0x10f8>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d01b      	beq.n	8007bd0 <UART_SetConfig+0x10f0>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	2b09      	cmp	r3, #9
 8007b9e:	d013      	beq.n	8007bc8 <UART_SetConfig+0x10e8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba4:	2b0a      	cmp	r3, #10
 8007ba6:	d00b      	beq.n	8007bc0 <UART_SetConfig+0x10e0>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	2b0b      	cmp	r3, #11
 8007bae:	d103      	bne.n	8007bb8 <UART_SetConfig+0x10d8>
 8007bb0:	4b2a      	ldr	r3, [pc, #168]	; (8007c5c <UART_SetConfig+0x117c>)
 8007bb2:	f04f 0400 	mov.w	r4, #0
 8007bb6:	e02e      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007bb8:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <UART_SetConfig+0x1180>)
 8007bba:	f04f 0403 	mov.w	r4, #3
 8007bbe:	e02a      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007bc0:	4b28      	ldr	r3, [pc, #160]	; (8007c64 <UART_SetConfig+0x1184>)
 8007bc2:	f04f 0400 	mov.w	r4, #0
 8007bc6:	e026      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007bc8:	4b27      	ldr	r3, [pc, #156]	; (8007c68 <UART_SetConfig+0x1188>)
 8007bca:	f04f 0400 	mov.w	r4, #0
 8007bce:	e022      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007bd0:	4b26      	ldr	r3, [pc, #152]	; (8007c6c <UART_SetConfig+0x118c>)
 8007bd2:	f04f 0400 	mov.w	r4, #0
 8007bd6:	e01e      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007bd8:	4b25      	ldr	r3, [pc, #148]	; (8007c70 <UART_SetConfig+0x1190>)
 8007bda:	f04f 0400 	mov.w	r4, #0
 8007bde:	e01a      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007be0:	a419      	add	r4, pc, #100	; (adr r4, 8007c48 <UART_SetConfig+0x1168>)
 8007be2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007be6:	e016      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007be8:	4b22      	ldr	r3, [pc, #136]	; (8007c74 <UART_SetConfig+0x1194>)
 8007bea:	f04f 0400 	mov.w	r4, #0
 8007bee:	e012      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007bf0:	4b21      	ldr	r3, [pc, #132]	; (8007c78 <UART_SetConfig+0x1198>)
 8007bf2:	f04f 0400 	mov.w	r4, #0
 8007bf6:	e00e      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007bf8:	a415      	add	r4, pc, #84	; (adr r4, 8007c50 <UART_SetConfig+0x1170>)
 8007bfa:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007bfe:	e00a      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007c00:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <UART_SetConfig+0x119c>)
 8007c02:	f04f 0400 	mov.w	r4, #0
 8007c06:	e006      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007c08:	4b1d      	ldr	r3, [pc, #116]	; (8007c80 <UART_SetConfig+0x11a0>)
 8007c0a:	f04f 0401 	mov.w	r4, #1
 8007c0e:	e002      	b.n	8007c16 <UART_SetConfig+0x1136>
 8007c10:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <UART_SetConfig+0x1180>)
 8007c12:	f04f 0403 	mov.w	r4, #3
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	6852      	ldr	r2, [r2, #4]
 8007c1a:	0852      	lsrs	r2, r2, #1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	f04f 0200 	mov.w	r2, #0
 8007c22:	eb13 0b01 	adds.w	fp, r3, r1
 8007c26:	eb44 0c02 	adc.w	ip, r4, r2
 8007c2a:	4658      	mov	r0, fp
 8007c2c:	4661      	mov	r1, ip
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	f04f 0400 	mov.w	r4, #0
 8007c36:	461a      	mov	r2, r3
 8007c38:	4623      	mov	r3, r4
 8007c3a:	f7f8 fb4d 	bl	80002d8 <__aeabi_uldivmod>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	460c      	mov	r4, r1
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c44:	e122      	b.n	8007e8c <UART_SetConfig+0x13ac>
 8007c46:	bf00      	nop
 8007c48:	51615500 	.word	0x51615500
 8007c4c:	00000000 	.word	0x00000000
 8007c50:	a2c2aa00 	.word	0xa2c2aa00
 8007c54:	00000000 	.word	0x00000000
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	03d09000 	.word	0x03d09000
 8007c60:	d0900000 	.word	0xd0900000
 8007c64:	07a12000 	.word	0x07a12000
 8007c68:	0f424000 	.word	0x0f424000
 8007c6c:	1e848000 	.word	0x1e848000
 8007c70:	3d090000 	.word	0x3d090000
 8007c74:	61a80000 	.word	0x61a80000
 8007c78:	7a120000 	.word	0x7a120000
 8007c7c:	f4240000 	.word	0xf4240000
 8007c80:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d05b      	beq.n	8007d44 <UART_SetConfig+0x1264>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d053      	beq.n	8007d3c <UART_SetConfig+0x125c>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d04b      	beq.n	8007d34 <UART_SetConfig+0x1254>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d043      	beq.n	8007d2c <UART_SetConfig+0x124c>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d03b      	beq.n	8007d24 <UART_SetConfig+0x1244>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb0:	2b05      	cmp	r3, #5
 8007cb2:	d033      	beq.n	8007d1c <UART_SetConfig+0x123c>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b06      	cmp	r3, #6
 8007cba:	d02b      	beq.n	8007d14 <UART_SetConfig+0x1234>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	2b07      	cmp	r3, #7
 8007cc2:	d023      	beq.n	8007d0c <UART_SetConfig+0x122c>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d01b      	beq.n	8007d04 <UART_SetConfig+0x1224>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	2b09      	cmp	r3, #9
 8007cd2:	d013      	beq.n	8007cfc <UART_SetConfig+0x121c>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	2b0a      	cmp	r3, #10
 8007cda:	d00b      	beq.n	8007cf4 <UART_SetConfig+0x1214>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b0b      	cmp	r3, #11
 8007ce2:	d103      	bne.n	8007cec <UART_SetConfig+0x120c>
 8007ce4:	4bc0      	ldr	r3, [pc, #768]	; (8007fe8 <UART_SetConfig+0x1508>)
 8007ce6:	f04f 0400 	mov.w	r4, #0
 8007cea:	e02e      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007cec:	4bbf      	ldr	r3, [pc, #764]	; (8007fec <UART_SetConfig+0x150c>)
 8007cee:	f04f 0400 	mov.w	r4, #0
 8007cf2:	e02a      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007cf4:	4bbe      	ldr	r3, [pc, #760]	; (8007ff0 <UART_SetConfig+0x1510>)
 8007cf6:	f04f 0400 	mov.w	r4, #0
 8007cfa:	e026      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007cfc:	4bbd      	ldr	r3, [pc, #756]	; (8007ff4 <UART_SetConfig+0x1514>)
 8007cfe:	f04f 0400 	mov.w	r4, #0
 8007d02:	e022      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d04:	4bbc      	ldr	r3, [pc, #752]	; (8007ff8 <UART_SetConfig+0x1518>)
 8007d06:	f04f 0400 	mov.w	r4, #0
 8007d0a:	e01e      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d0c:	4bbb      	ldr	r3, [pc, #748]	; (8007ffc <UART_SetConfig+0x151c>)
 8007d0e:	f04f 0400 	mov.w	r4, #0
 8007d12:	e01a      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d14:	a4b0      	add	r4, pc, #704	; (adr r4, 8007fd8 <UART_SetConfig+0x14f8>)
 8007d16:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d1a:	e016      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d1c:	4bb8      	ldr	r3, [pc, #736]	; (8008000 <UART_SetConfig+0x1520>)
 8007d1e:	f04f 0400 	mov.w	r4, #0
 8007d22:	e012      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d24:	4bb7      	ldr	r3, [pc, #732]	; (8008004 <UART_SetConfig+0x1524>)
 8007d26:	f04f 0400 	mov.w	r4, #0
 8007d2a:	e00e      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d2c:	a4ac      	add	r4, pc, #688	; (adr r4, 8007fe0 <UART_SetConfig+0x1500>)
 8007d2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007d32:	e00a      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d34:	4bb4      	ldr	r3, [pc, #720]	; (8008008 <UART_SetConfig+0x1528>)
 8007d36:	f04f 0400 	mov.w	r4, #0
 8007d3a:	e006      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d3c:	4bb3      	ldr	r3, [pc, #716]	; (800800c <UART_SetConfig+0x152c>)
 8007d3e:	f04f 0400 	mov.w	r4, #0
 8007d42:	e002      	b.n	8007d4a <UART_SetConfig+0x126a>
 8007d44:	4ba9      	ldr	r3, [pc, #676]	; (8007fec <UART_SetConfig+0x150c>)
 8007d46:	f04f 0400 	mov.w	r4, #0
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6852      	ldr	r2, [r2, #4]
 8007d4e:	0852      	lsrs	r2, r2, #1
 8007d50:	4611      	mov	r1, r2
 8007d52:	f04f 0200 	mov.w	r2, #0
 8007d56:	eb13 0b01 	adds.w	fp, r3, r1
 8007d5a:	eb44 0c02 	adc.w	ip, r4, r2
 8007d5e:	4658      	mov	r0, fp
 8007d60:	4661      	mov	r1, ip
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f04f 0400 	mov.w	r4, #0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	f7f8 fab3 	bl	80002d8 <__aeabi_uldivmod>
 8007d72:	4603      	mov	r3, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d78:	e088      	b.n	8007e8c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d064      	beq.n	8007e4c <UART_SetConfig+0x136c>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d05b      	beq.n	8007e42 <UART_SetConfig+0x1362>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d052      	beq.n	8007e38 <UART_SetConfig+0x1358>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d04a      	beq.n	8007e30 <UART_SetConfig+0x1350>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d041      	beq.n	8007e26 <UART_SetConfig+0x1346>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	2b05      	cmp	r3, #5
 8007da8:	d039      	beq.n	8007e1e <UART_SetConfig+0x133e>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b06      	cmp	r3, #6
 8007db0:	d031      	beq.n	8007e16 <UART_SetConfig+0x1336>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db6:	2b07      	cmp	r3, #7
 8007db8:	d028      	beq.n	8007e0c <UART_SetConfig+0x132c>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d01f      	beq.n	8007e02 <UART_SetConfig+0x1322>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d016      	beq.n	8007df8 <UART_SetConfig+0x1318>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	2b0a      	cmp	r3, #10
 8007dd0:	d00d      	beq.n	8007dee <UART_SetConfig+0x130e>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	2b0b      	cmp	r3, #11
 8007dd8:	d104      	bne.n	8007de4 <UART_SetConfig+0x1304>
 8007dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dde:	f04f 0400 	mov.w	r4, #0
 8007de2:	e037      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007de4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007de8:	f04f 0400 	mov.w	r4, #0
 8007dec:	e032      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007dee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007df2:	f04f 0400 	mov.w	r4, #0
 8007df6:	e02d      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007dfc:	f04f 0400 	mov.w	r4, #0
 8007e00:	e028      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e02:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e06:	f04f 0400 	mov.w	r4, #0
 8007e0a:	e023      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e10:	f04f 0400 	mov.w	r4, #0
 8007e14:	e01e      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e16:	4b7e      	ldr	r3, [pc, #504]	; (8008010 <UART_SetConfig+0x1530>)
 8007e18:	f04f 0400 	mov.w	r4, #0
 8007e1c:	e01a      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e1e:	4b7d      	ldr	r3, [pc, #500]	; (8008014 <UART_SetConfig+0x1534>)
 8007e20:	f04f 0400 	mov.w	r4, #0
 8007e24:	e016      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e2a:	f04f 0400 	mov.w	r4, #0
 8007e2e:	e011      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e30:	4b79      	ldr	r3, [pc, #484]	; (8008018 <UART_SetConfig+0x1538>)
 8007e32:	f04f 0400 	mov.w	r4, #0
 8007e36:	e00d      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e3c:	f04f 0400 	mov.w	r4, #0
 8007e40:	e008      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e46:	f04f 0400 	mov.w	r4, #0
 8007e4a:	e003      	b.n	8007e54 <UART_SetConfig+0x1374>
 8007e4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e50:	f04f 0400 	mov.w	r4, #0
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6852      	ldr	r2, [r2, #4]
 8007e58:	0852      	lsrs	r2, r2, #1
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	eb13 0b01 	adds.w	fp, r3, r1
 8007e64:	eb44 0c02 	adc.w	ip, r4, r2
 8007e68:	4658      	mov	r0, fp
 8007e6a:	4661      	mov	r1, ip
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f04f 0400 	mov.w	r4, #0
 8007e74:	461a      	mov	r2, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	f7f8 fa2e 	bl	80002d8 <__aeabi_uldivmod>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e82:	e003      	b.n	8007e8c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007e8a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e92:	d309      	bcc.n	8007ea8 <UART_SetConfig+0x13c8>
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9a:	d205      	bcs.n	8007ea8 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea2:	60da      	str	r2, [r3, #12]
 8007ea4:	f000 bf85 	b.w	8008db2 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007eae:	f000 bf80 	b.w	8008db2 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eba:	f040 83da 	bne.w	8008672 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007ebe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007ec2:	2b40      	cmp	r3, #64	; 0x40
 8007ec4:	f200 83b3 	bhi.w	800862e <UART_SetConfig+0x1b4e>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0x13f0>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	0800801d 	.word	0x0800801d
 8007ed4:	080080d5 	.word	0x080080d5
 8007ed8:	0800862f 	.word	0x0800862f
 8007edc:	0800862f 	.word	0x0800862f
 8007ee0:	0800818d 	.word	0x0800818d
 8007ee4:	0800862f 	.word	0x0800862f
 8007ee8:	0800862f 	.word	0x0800862f
 8007eec:	0800862f 	.word	0x0800862f
 8007ef0:	08008249 	.word	0x08008249
 8007ef4:	0800862f 	.word	0x0800862f
 8007ef8:	0800862f 	.word	0x0800862f
 8007efc:	0800862f 	.word	0x0800862f
 8007f00:	0800862f 	.word	0x0800862f
 8007f04:	0800862f 	.word	0x0800862f
 8007f08:	0800862f 	.word	0x0800862f
 8007f0c:	0800862f 	.word	0x0800862f
 8007f10:	08008305 	.word	0x08008305
 8007f14:	0800862f 	.word	0x0800862f
 8007f18:	0800862f 	.word	0x0800862f
 8007f1c:	0800862f 	.word	0x0800862f
 8007f20:	0800862f 	.word	0x0800862f
 8007f24:	0800862f 	.word	0x0800862f
 8007f28:	0800862f 	.word	0x0800862f
 8007f2c:	0800862f 	.word	0x0800862f
 8007f30:	0800862f 	.word	0x0800862f
 8007f34:	0800862f 	.word	0x0800862f
 8007f38:	0800862f 	.word	0x0800862f
 8007f3c:	0800862f 	.word	0x0800862f
 8007f40:	0800862f 	.word	0x0800862f
 8007f44:	0800862f 	.word	0x0800862f
 8007f48:	0800862f 	.word	0x0800862f
 8007f4c:	0800862f 	.word	0x0800862f
 8007f50:	08008477 	.word	0x08008477
 8007f54:	0800862f 	.word	0x0800862f
 8007f58:	0800862f 	.word	0x0800862f
 8007f5c:	0800862f 	.word	0x0800862f
 8007f60:	0800862f 	.word	0x0800862f
 8007f64:	0800862f 	.word	0x0800862f
 8007f68:	0800862f 	.word	0x0800862f
 8007f6c:	0800862f 	.word	0x0800862f
 8007f70:	0800862f 	.word	0x0800862f
 8007f74:	0800862f 	.word	0x0800862f
 8007f78:	0800862f 	.word	0x0800862f
 8007f7c:	0800862f 	.word	0x0800862f
 8007f80:	0800862f 	.word	0x0800862f
 8007f84:	0800862f 	.word	0x0800862f
 8007f88:	0800862f 	.word	0x0800862f
 8007f8c:	0800862f 	.word	0x0800862f
 8007f90:	0800862f 	.word	0x0800862f
 8007f94:	0800862f 	.word	0x0800862f
 8007f98:	0800862f 	.word	0x0800862f
 8007f9c:	0800862f 	.word	0x0800862f
 8007fa0:	0800862f 	.word	0x0800862f
 8007fa4:	0800862f 	.word	0x0800862f
 8007fa8:	0800862f 	.word	0x0800862f
 8007fac:	0800862f 	.word	0x0800862f
 8007fb0:	0800862f 	.word	0x0800862f
 8007fb4:	0800862f 	.word	0x0800862f
 8007fb8:	0800862f 	.word	0x0800862f
 8007fbc:	0800862f 	.word	0x0800862f
 8007fc0:	0800862f 	.word	0x0800862f
 8007fc4:	0800862f 	.word	0x0800862f
 8007fc8:	0800862f 	.word	0x0800862f
 8007fcc:	0800862f 	.word	0x0800862f
 8007fd0:	0800856d 	.word	0x0800856d
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	05161500 	.word	0x05161500
 8007fdc:	00000000 	.word	0x00000000
 8007fe0:	0a2c2a00 	.word	0x0a2c2a00
 8007fe4:	00000000 	.word	0x00000000
 8007fe8:	003d0900 	.word	0x003d0900
 8007fec:	3d090000 	.word	0x3d090000
 8007ff0:	007a1200 	.word	0x007a1200
 8007ff4:	00f42400 	.word	0x00f42400
 8007ff8:	01e84800 	.word	0x01e84800
 8007ffc:	03d09000 	.word	0x03d09000
 8008000:	061a8000 	.word	0x061a8000
 8008004:	07a12000 	.word	0x07a12000
 8008008:	0f424000 	.word	0x0f424000
 800800c:	1e848000 	.word	0x1e848000
 8008010:	000aaa00 	.word	0x000aaa00
 8008014:	000ccc00 	.word	0x000ccc00
 8008018:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800801c:	f7fb ff30 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8008020:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	2b00      	cmp	r3, #0
 8008028:	d044      	beq.n	80080b4 <UART_SetConfig+0x15d4>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802e:	2b01      	cmp	r3, #1
 8008030:	d03e      	beq.n	80080b0 <UART_SetConfig+0x15d0>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b02      	cmp	r3, #2
 8008038:	d038      	beq.n	80080ac <UART_SetConfig+0x15cc>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	2b03      	cmp	r3, #3
 8008040:	d032      	beq.n	80080a8 <UART_SetConfig+0x15c8>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008046:	2b04      	cmp	r3, #4
 8008048:	d02c      	beq.n	80080a4 <UART_SetConfig+0x15c4>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	2b05      	cmp	r3, #5
 8008050:	d026      	beq.n	80080a0 <UART_SetConfig+0x15c0>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008056:	2b06      	cmp	r3, #6
 8008058:	d020      	beq.n	800809c <UART_SetConfig+0x15bc>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	2b07      	cmp	r3, #7
 8008060:	d01a      	beq.n	8008098 <UART_SetConfig+0x15b8>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	2b08      	cmp	r3, #8
 8008068:	d014      	beq.n	8008094 <UART_SetConfig+0x15b4>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	2b09      	cmp	r3, #9
 8008070:	d00e      	beq.n	8008090 <UART_SetConfig+0x15b0>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	2b0a      	cmp	r3, #10
 8008078:	d008      	beq.n	800808c <UART_SetConfig+0x15ac>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807e:	2b0b      	cmp	r3, #11
 8008080:	d102      	bne.n	8008088 <UART_SetConfig+0x15a8>
 8008082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008086:	e016      	b.n	80080b6 <UART_SetConfig+0x15d6>
 8008088:	2301      	movs	r3, #1
 800808a:	e014      	b.n	80080b6 <UART_SetConfig+0x15d6>
 800808c:	2380      	movs	r3, #128	; 0x80
 800808e:	e012      	b.n	80080b6 <UART_SetConfig+0x15d6>
 8008090:	2340      	movs	r3, #64	; 0x40
 8008092:	e010      	b.n	80080b6 <UART_SetConfig+0x15d6>
 8008094:	2320      	movs	r3, #32
 8008096:	e00e      	b.n	80080b6 <UART_SetConfig+0x15d6>
 8008098:	2310      	movs	r3, #16
 800809a:	e00c      	b.n	80080b6 <UART_SetConfig+0x15d6>
 800809c:	230c      	movs	r3, #12
 800809e:	e00a      	b.n	80080b6 <UART_SetConfig+0x15d6>
 80080a0:	230a      	movs	r3, #10
 80080a2:	e008      	b.n	80080b6 <UART_SetConfig+0x15d6>
 80080a4:	2308      	movs	r3, #8
 80080a6:	e006      	b.n	80080b6 <UART_SetConfig+0x15d6>
 80080a8:	2306      	movs	r3, #6
 80080aa:	e004      	b.n	80080b6 <UART_SetConfig+0x15d6>
 80080ac:	2304      	movs	r3, #4
 80080ae:	e002      	b.n	80080b6 <UART_SetConfig+0x15d6>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e000      	b.n	80080b6 <UART_SetConfig+0x15d6>
 80080b4:	2301      	movs	r3, #1
 80080b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080bc:	005a      	lsls	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	085b      	lsrs	r3, r3, #1
 80080c4:	441a      	add	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080d2:	e2b0      	b.n	8008636 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d4:	f7fb feea 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 80080d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d044      	beq.n	800816c <UART_SetConfig+0x168c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d03e      	beq.n	8008168 <UART_SetConfig+0x1688>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d038      	beq.n	8008164 <UART_SetConfig+0x1684>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	2b03      	cmp	r3, #3
 80080f8:	d032      	beq.n	8008160 <UART_SetConfig+0x1680>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d02c      	beq.n	800815c <UART_SetConfig+0x167c>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b05      	cmp	r3, #5
 8008108:	d026      	beq.n	8008158 <UART_SetConfig+0x1678>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b06      	cmp	r3, #6
 8008110:	d020      	beq.n	8008154 <UART_SetConfig+0x1674>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b07      	cmp	r3, #7
 8008118:	d01a      	beq.n	8008150 <UART_SetConfig+0x1670>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b08      	cmp	r3, #8
 8008120:	d014      	beq.n	800814c <UART_SetConfig+0x166c>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	2b09      	cmp	r3, #9
 8008128:	d00e      	beq.n	8008148 <UART_SetConfig+0x1668>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	2b0a      	cmp	r3, #10
 8008130:	d008      	beq.n	8008144 <UART_SetConfig+0x1664>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	2b0b      	cmp	r3, #11
 8008138:	d102      	bne.n	8008140 <UART_SetConfig+0x1660>
 800813a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800813e:	e016      	b.n	800816e <UART_SetConfig+0x168e>
 8008140:	2301      	movs	r3, #1
 8008142:	e014      	b.n	800816e <UART_SetConfig+0x168e>
 8008144:	2380      	movs	r3, #128	; 0x80
 8008146:	e012      	b.n	800816e <UART_SetConfig+0x168e>
 8008148:	2340      	movs	r3, #64	; 0x40
 800814a:	e010      	b.n	800816e <UART_SetConfig+0x168e>
 800814c:	2320      	movs	r3, #32
 800814e:	e00e      	b.n	800816e <UART_SetConfig+0x168e>
 8008150:	2310      	movs	r3, #16
 8008152:	e00c      	b.n	800816e <UART_SetConfig+0x168e>
 8008154:	230c      	movs	r3, #12
 8008156:	e00a      	b.n	800816e <UART_SetConfig+0x168e>
 8008158:	230a      	movs	r3, #10
 800815a:	e008      	b.n	800816e <UART_SetConfig+0x168e>
 800815c:	2308      	movs	r3, #8
 800815e:	e006      	b.n	800816e <UART_SetConfig+0x168e>
 8008160:	2306      	movs	r3, #6
 8008162:	e004      	b.n	800816e <UART_SetConfig+0x168e>
 8008164:	2304      	movs	r3, #4
 8008166:	e002      	b.n	800816e <UART_SetConfig+0x168e>
 8008168:	2302      	movs	r3, #2
 800816a:	e000      	b.n	800816e <UART_SetConfig+0x168e>
 800816c:	2301      	movs	r3, #1
 800816e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008170:	fbb2 f3f3 	udiv	r3, r2, r3
 8008174:	005a      	lsls	r2, r3, #1
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	441a      	add	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	fbb2 f3f3 	udiv	r3, r2, r3
 8008186:	b29b      	uxth	r3, r3
 8008188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800818a:	e254      	b.n	8008636 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818c:	f107 0318 	add.w	r3, r7, #24
 8008190:	4618      	mov	r0, r3
 8008192:	f7fc fda7 	bl	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	2b00      	cmp	r3, #0
 800819e:	d044      	beq.n	800822a <UART_SetConfig+0x174a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d03e      	beq.n	8008226 <UART_SetConfig+0x1746>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d038      	beq.n	8008222 <UART_SetConfig+0x1742>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b4:	2b03      	cmp	r3, #3
 80081b6:	d032      	beq.n	800821e <UART_SetConfig+0x173e>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081bc:	2b04      	cmp	r3, #4
 80081be:	d02c      	beq.n	800821a <UART_SetConfig+0x173a>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b05      	cmp	r3, #5
 80081c6:	d026      	beq.n	8008216 <UART_SetConfig+0x1736>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	2b06      	cmp	r3, #6
 80081ce:	d020      	beq.n	8008212 <UART_SetConfig+0x1732>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	2b07      	cmp	r3, #7
 80081d6:	d01a      	beq.n	800820e <UART_SetConfig+0x172e>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081dc:	2b08      	cmp	r3, #8
 80081de:	d014      	beq.n	800820a <UART_SetConfig+0x172a>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b09      	cmp	r3, #9
 80081e6:	d00e      	beq.n	8008206 <UART_SetConfig+0x1726>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b0a      	cmp	r3, #10
 80081ee:	d008      	beq.n	8008202 <UART_SetConfig+0x1722>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	2b0b      	cmp	r3, #11
 80081f6:	d102      	bne.n	80081fe <UART_SetConfig+0x171e>
 80081f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081fc:	e016      	b.n	800822c <UART_SetConfig+0x174c>
 80081fe:	2301      	movs	r3, #1
 8008200:	e014      	b.n	800822c <UART_SetConfig+0x174c>
 8008202:	2380      	movs	r3, #128	; 0x80
 8008204:	e012      	b.n	800822c <UART_SetConfig+0x174c>
 8008206:	2340      	movs	r3, #64	; 0x40
 8008208:	e010      	b.n	800822c <UART_SetConfig+0x174c>
 800820a:	2320      	movs	r3, #32
 800820c:	e00e      	b.n	800822c <UART_SetConfig+0x174c>
 800820e:	2310      	movs	r3, #16
 8008210:	e00c      	b.n	800822c <UART_SetConfig+0x174c>
 8008212:	230c      	movs	r3, #12
 8008214:	e00a      	b.n	800822c <UART_SetConfig+0x174c>
 8008216:	230a      	movs	r3, #10
 8008218:	e008      	b.n	800822c <UART_SetConfig+0x174c>
 800821a:	2308      	movs	r3, #8
 800821c:	e006      	b.n	800822c <UART_SetConfig+0x174c>
 800821e:	2306      	movs	r3, #6
 8008220:	e004      	b.n	800822c <UART_SetConfig+0x174c>
 8008222:	2304      	movs	r3, #4
 8008224:	e002      	b.n	800822c <UART_SetConfig+0x174c>
 8008226:	2302      	movs	r3, #2
 8008228:	e000      	b.n	800822c <UART_SetConfig+0x174c>
 800822a:	2301      	movs	r3, #1
 800822c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008230:	005a      	lsls	r2, r3, #1
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	085b      	lsrs	r3, r3, #1
 8008238:	441a      	add	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008242:	b29b      	uxth	r3, r3
 8008244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008246:	e1f6      	b.n	8008636 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008248:	f107 030c 	add.w	r3, r7, #12
 800824c:	4618      	mov	r0, r3
 800824e:	f7fc fe95 	bl	8004f7c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008252:	693a      	ldr	r2, [r7, #16]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008258:	2b00      	cmp	r3, #0
 800825a:	d044      	beq.n	80082e6 <UART_SetConfig+0x1806>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b01      	cmp	r3, #1
 8008262:	d03e      	beq.n	80082e2 <UART_SetConfig+0x1802>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b02      	cmp	r3, #2
 800826a:	d038      	beq.n	80082de <UART_SetConfig+0x17fe>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008270:	2b03      	cmp	r3, #3
 8008272:	d032      	beq.n	80082da <UART_SetConfig+0x17fa>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008278:	2b04      	cmp	r3, #4
 800827a:	d02c      	beq.n	80082d6 <UART_SetConfig+0x17f6>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b05      	cmp	r3, #5
 8008282:	d026      	beq.n	80082d2 <UART_SetConfig+0x17f2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008288:	2b06      	cmp	r3, #6
 800828a:	d020      	beq.n	80082ce <UART_SetConfig+0x17ee>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008290:	2b07      	cmp	r3, #7
 8008292:	d01a      	beq.n	80082ca <UART_SetConfig+0x17ea>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008298:	2b08      	cmp	r3, #8
 800829a:	d014      	beq.n	80082c6 <UART_SetConfig+0x17e6>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b09      	cmp	r3, #9
 80082a2:	d00e      	beq.n	80082c2 <UART_SetConfig+0x17e2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	2b0a      	cmp	r3, #10
 80082aa:	d008      	beq.n	80082be <UART_SetConfig+0x17de>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	2b0b      	cmp	r3, #11
 80082b2:	d102      	bne.n	80082ba <UART_SetConfig+0x17da>
 80082b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082b8:	e016      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e014      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082be:	2380      	movs	r3, #128	; 0x80
 80082c0:	e012      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082c2:	2340      	movs	r3, #64	; 0x40
 80082c4:	e010      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082c6:	2320      	movs	r3, #32
 80082c8:	e00e      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082ca:	2310      	movs	r3, #16
 80082cc:	e00c      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082ce:	230c      	movs	r3, #12
 80082d0:	e00a      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082d2:	230a      	movs	r3, #10
 80082d4:	e008      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082d6:	2308      	movs	r3, #8
 80082d8:	e006      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082da:	2306      	movs	r3, #6
 80082dc:	e004      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082de:	2304      	movs	r3, #4
 80082e0:	e002      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082e2:	2302      	movs	r3, #2
 80082e4:	e000      	b.n	80082e8 <UART_SetConfig+0x1808>
 80082e6:	2301      	movs	r3, #1
 80082e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ec:	005a      	lsls	r2, r3, #1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	441a      	add	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fe:	b29b      	uxth	r3, r3
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008302:	e198      	b.n	8008636 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008304:	4b87      	ldr	r3, [pc, #540]	; (8008524 <UART_SetConfig+0x1a44>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0320 	and.w	r3, r3, #32
 800830c:	2b00      	cmp	r3, #0
 800830e:	d05e      	beq.n	80083ce <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008310:	4b84      	ldr	r3, [pc, #528]	; (8008524 <UART_SetConfig+0x1a44>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	08db      	lsrs	r3, r3, #3
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	4a83      	ldr	r2, [pc, #524]	; (8008528 <UART_SetConfig+0x1a48>)
 800831c:	40da      	lsrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008322:	2b00      	cmp	r3, #0
 8008324:	d044      	beq.n	80083b0 <UART_SetConfig+0x18d0>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	2b01      	cmp	r3, #1
 800832c:	d03e      	beq.n	80083ac <UART_SetConfig+0x18cc>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	2b02      	cmp	r3, #2
 8008334:	d038      	beq.n	80083a8 <UART_SetConfig+0x18c8>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	2b03      	cmp	r3, #3
 800833c:	d032      	beq.n	80083a4 <UART_SetConfig+0x18c4>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	2b04      	cmp	r3, #4
 8008344:	d02c      	beq.n	80083a0 <UART_SetConfig+0x18c0>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	2b05      	cmp	r3, #5
 800834c:	d026      	beq.n	800839c <UART_SetConfig+0x18bc>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008352:	2b06      	cmp	r3, #6
 8008354:	d020      	beq.n	8008398 <UART_SetConfig+0x18b8>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b07      	cmp	r3, #7
 800835c:	d01a      	beq.n	8008394 <UART_SetConfig+0x18b4>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	2b08      	cmp	r3, #8
 8008364:	d014      	beq.n	8008390 <UART_SetConfig+0x18b0>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836a:	2b09      	cmp	r3, #9
 800836c:	d00e      	beq.n	800838c <UART_SetConfig+0x18ac>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	2b0a      	cmp	r3, #10
 8008374:	d008      	beq.n	8008388 <UART_SetConfig+0x18a8>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	2b0b      	cmp	r3, #11
 800837c:	d102      	bne.n	8008384 <UART_SetConfig+0x18a4>
 800837e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008382:	e016      	b.n	80083b2 <UART_SetConfig+0x18d2>
 8008384:	2301      	movs	r3, #1
 8008386:	e014      	b.n	80083b2 <UART_SetConfig+0x18d2>
 8008388:	2380      	movs	r3, #128	; 0x80
 800838a:	e012      	b.n	80083b2 <UART_SetConfig+0x18d2>
 800838c:	2340      	movs	r3, #64	; 0x40
 800838e:	e010      	b.n	80083b2 <UART_SetConfig+0x18d2>
 8008390:	2320      	movs	r3, #32
 8008392:	e00e      	b.n	80083b2 <UART_SetConfig+0x18d2>
 8008394:	2310      	movs	r3, #16
 8008396:	e00c      	b.n	80083b2 <UART_SetConfig+0x18d2>
 8008398:	230c      	movs	r3, #12
 800839a:	e00a      	b.n	80083b2 <UART_SetConfig+0x18d2>
 800839c:	230a      	movs	r3, #10
 800839e:	e008      	b.n	80083b2 <UART_SetConfig+0x18d2>
 80083a0:	2308      	movs	r3, #8
 80083a2:	e006      	b.n	80083b2 <UART_SetConfig+0x18d2>
 80083a4:	2306      	movs	r3, #6
 80083a6:	e004      	b.n	80083b2 <UART_SetConfig+0x18d2>
 80083a8:	2304      	movs	r3, #4
 80083aa:	e002      	b.n	80083b2 <UART_SetConfig+0x18d2>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e000      	b.n	80083b2 <UART_SetConfig+0x18d2>
 80083b0:	2301      	movs	r3, #1
 80083b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b6:	005a      	lsls	r2, r3, #1
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	441a      	add	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80083cc:	e133      	b.n	8008636 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d043      	beq.n	800845e <UART_SetConfig+0x197e>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d03d      	beq.n	800845a <UART_SetConfig+0x197a>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d037      	beq.n	8008456 <UART_SetConfig+0x1976>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d031      	beq.n	8008452 <UART_SetConfig+0x1972>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d02b      	beq.n	800844e <UART_SetConfig+0x196e>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	2b05      	cmp	r3, #5
 80083fc:	d025      	beq.n	800844a <UART_SetConfig+0x196a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008402:	2b06      	cmp	r3, #6
 8008404:	d01f      	beq.n	8008446 <UART_SetConfig+0x1966>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	2b07      	cmp	r3, #7
 800840c:	d019      	beq.n	8008442 <UART_SetConfig+0x1962>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008412:	2b08      	cmp	r3, #8
 8008414:	d013      	beq.n	800843e <UART_SetConfig+0x195e>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841a:	2b09      	cmp	r3, #9
 800841c:	d00d      	beq.n	800843a <UART_SetConfig+0x195a>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	2b0a      	cmp	r3, #10
 8008424:	d007      	beq.n	8008436 <UART_SetConfig+0x1956>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b0b      	cmp	r3, #11
 800842c:	d101      	bne.n	8008432 <UART_SetConfig+0x1952>
 800842e:	4b3f      	ldr	r3, [pc, #252]	; (800852c <UART_SetConfig+0x1a4c>)
 8008430:	e016      	b.n	8008460 <UART_SetConfig+0x1980>
 8008432:	4b3f      	ldr	r3, [pc, #252]	; (8008530 <UART_SetConfig+0x1a50>)
 8008434:	e014      	b.n	8008460 <UART_SetConfig+0x1980>
 8008436:	4b3f      	ldr	r3, [pc, #252]	; (8008534 <UART_SetConfig+0x1a54>)
 8008438:	e012      	b.n	8008460 <UART_SetConfig+0x1980>
 800843a:	4b3f      	ldr	r3, [pc, #252]	; (8008538 <UART_SetConfig+0x1a58>)
 800843c:	e010      	b.n	8008460 <UART_SetConfig+0x1980>
 800843e:	4b3f      	ldr	r3, [pc, #252]	; (800853c <UART_SetConfig+0x1a5c>)
 8008440:	e00e      	b.n	8008460 <UART_SetConfig+0x1980>
 8008442:	4b3f      	ldr	r3, [pc, #252]	; (8008540 <UART_SetConfig+0x1a60>)
 8008444:	e00c      	b.n	8008460 <UART_SetConfig+0x1980>
 8008446:	4b3f      	ldr	r3, [pc, #252]	; (8008544 <UART_SetConfig+0x1a64>)
 8008448:	e00a      	b.n	8008460 <UART_SetConfig+0x1980>
 800844a:	4b3f      	ldr	r3, [pc, #252]	; (8008548 <UART_SetConfig+0x1a68>)
 800844c:	e008      	b.n	8008460 <UART_SetConfig+0x1980>
 800844e:	4b3f      	ldr	r3, [pc, #252]	; (800854c <UART_SetConfig+0x1a6c>)
 8008450:	e006      	b.n	8008460 <UART_SetConfig+0x1980>
 8008452:	4b3f      	ldr	r3, [pc, #252]	; (8008550 <UART_SetConfig+0x1a70>)
 8008454:	e004      	b.n	8008460 <UART_SetConfig+0x1980>
 8008456:	4b3f      	ldr	r3, [pc, #252]	; (8008554 <UART_SetConfig+0x1a74>)
 8008458:	e002      	b.n	8008460 <UART_SetConfig+0x1980>
 800845a:	4b33      	ldr	r3, [pc, #204]	; (8008528 <UART_SetConfig+0x1a48>)
 800845c:	e000      	b.n	8008460 <UART_SetConfig+0x1980>
 800845e:	4b34      	ldr	r3, [pc, #208]	; (8008530 <UART_SetConfig+0x1a50>)
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6852      	ldr	r2, [r2, #4]
 8008464:	0852      	lsrs	r2, r2, #1
 8008466:	441a      	add	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008470:	b29b      	uxth	r3, r3
 8008472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008474:	e0df      	b.n	8008636 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d045      	beq.n	800850a <UART_SetConfig+0x1a2a>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	2b01      	cmp	r3, #1
 8008484:	d03f      	beq.n	8008506 <UART_SetConfig+0x1a26>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848a:	2b02      	cmp	r3, #2
 800848c:	d039      	beq.n	8008502 <UART_SetConfig+0x1a22>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	2b03      	cmp	r3, #3
 8008494:	d033      	beq.n	80084fe <UART_SetConfig+0x1a1e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	2b04      	cmp	r3, #4
 800849c:	d02d      	beq.n	80084fa <UART_SetConfig+0x1a1a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	d027      	beq.n	80084f6 <UART_SetConfig+0x1a16>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	2b06      	cmp	r3, #6
 80084ac:	d021      	beq.n	80084f2 <UART_SetConfig+0x1a12>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	2b07      	cmp	r3, #7
 80084b4:	d01b      	beq.n	80084ee <UART_SetConfig+0x1a0e>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d015      	beq.n	80084ea <UART_SetConfig+0x1a0a>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b09      	cmp	r3, #9
 80084c4:	d00f      	beq.n	80084e6 <UART_SetConfig+0x1a06>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	2b0a      	cmp	r3, #10
 80084cc:	d008      	beq.n	80084e0 <UART_SetConfig+0x1a00>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	2b0b      	cmp	r3, #11
 80084d4:	d102      	bne.n	80084dc <UART_SetConfig+0x19fc>
 80084d6:	f647 2312 	movw	r3, #31250	; 0x7a12
 80084da:	e017      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084dc:	4b18      	ldr	r3, [pc, #96]	; (8008540 <UART_SetConfig+0x1a60>)
 80084de:	e015      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80084e4:	e012      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084e6:	4b1c      	ldr	r3, [pc, #112]	; (8008558 <UART_SetConfig+0x1a78>)
 80084e8:	e010      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084ea:	4b1c      	ldr	r3, [pc, #112]	; (800855c <UART_SetConfig+0x1a7c>)
 80084ec:	e00e      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <UART_SetConfig+0x1a4c>)
 80084f0:	e00c      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084f2:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <UART_SetConfig+0x1a80>)
 80084f4:	e00a      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084f6:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <UART_SetConfig+0x1a84>)
 80084f8:	e008      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084fa:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <UART_SetConfig+0x1a54>)
 80084fc:	e006      	b.n	800850c <UART_SetConfig+0x1a2c>
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <UART_SetConfig+0x1a88>)
 8008500:	e004      	b.n	800850c <UART_SetConfig+0x1a2c>
 8008502:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <UART_SetConfig+0x1a58>)
 8008504:	e002      	b.n	800850c <UART_SetConfig+0x1a2c>
 8008506:	4b0d      	ldr	r3, [pc, #52]	; (800853c <UART_SetConfig+0x1a5c>)
 8008508:	e000      	b.n	800850c <UART_SetConfig+0x1a2c>
 800850a:	4b0d      	ldr	r3, [pc, #52]	; (8008540 <UART_SetConfig+0x1a60>)
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	6852      	ldr	r2, [r2, #4]
 8008510:	0852      	lsrs	r2, r2, #1
 8008512:	441a      	add	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	fbb2 f3f3 	udiv	r3, r2, r3
 800851c:	b29b      	uxth	r3, r3
 800851e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008520:	e089      	b.n	8008636 <UART_SetConfig+0x1b56>
 8008522:	bf00      	nop
 8008524:	58024400 	.word	0x58024400
 8008528:	03d09000 	.word	0x03d09000
 800852c:	0007a120 	.word	0x0007a120
 8008530:	07a12000 	.word	0x07a12000
 8008534:	000f4240 	.word	0x000f4240
 8008538:	001e8480 	.word	0x001e8480
 800853c:	003d0900 	.word	0x003d0900
 8008540:	007a1200 	.word	0x007a1200
 8008544:	00a2c2aa 	.word	0x00a2c2aa
 8008548:	00c35000 	.word	0x00c35000
 800854c:	00f42400 	.word	0x00f42400
 8008550:	01458554 	.word	0x01458554
 8008554:	01e84800 	.word	0x01e84800
 8008558:	0001e848 	.word	0x0001e848
 800855c:	0003d090 	.word	0x0003d090
 8008560:	000a2c2a 	.word	0x000a2c2a
 8008564:	000c3500 	.word	0x000c3500
 8008568:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	d04f      	beq.n	8008614 <UART_SetConfig+0x1b34>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b01      	cmp	r3, #1
 800857a:	d048      	beq.n	800860e <UART_SetConfig+0x1b2e>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b02      	cmp	r3, #2
 8008582:	d041      	beq.n	8008608 <UART_SetConfig+0x1b28>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b03      	cmp	r3, #3
 800858a:	d03a      	beq.n	8008602 <UART_SetConfig+0x1b22>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b04      	cmp	r3, #4
 8008592:	d033      	beq.n	80085fc <UART_SetConfig+0x1b1c>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b05      	cmp	r3, #5
 800859a:	d02c      	beq.n	80085f6 <UART_SetConfig+0x1b16>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b06      	cmp	r3, #6
 80085a2:	d025      	beq.n	80085f0 <UART_SetConfig+0x1b10>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	d01e      	beq.n	80085ea <UART_SetConfig+0x1b0a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d017      	beq.n	80085e4 <UART_SetConfig+0x1b04>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	d010      	beq.n	80085de <UART_SetConfig+0x1afe>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c0:	2b0a      	cmp	r3, #10
 80085c2:	d009      	beq.n	80085d8 <UART_SetConfig+0x1af8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2b0b      	cmp	r3, #11
 80085ca:	d102      	bne.n	80085d2 <UART_SetConfig+0x1af2>
 80085cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085d0:	e022      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085d6:	e01f      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085dc:	e01c      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085e2:	e019      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085e8:	e016      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085ee:	e013      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085f0:	f241 5354 	movw	r3, #5460	; 0x1554
 80085f4:	e010      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085f6:	f641 1398 	movw	r3, #6552	; 0x1998
 80085fa:	e00d      	b.n	8008618 <UART_SetConfig+0x1b38>
 80085fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008600:	e00a      	b.n	8008618 <UART_SetConfig+0x1b38>
 8008602:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8008606:	e007      	b.n	8008618 <UART_SetConfig+0x1b38>
 8008608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800860c:	e004      	b.n	8008618 <UART_SetConfig+0x1b38>
 800860e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008612:	e001      	b.n	8008618 <UART_SetConfig+0x1b38>
 8008614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6852      	ldr	r2, [r2, #4]
 800861c:	0852      	lsrs	r2, r2, #1
 800861e:	441a      	add	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	fbb2 f3f3 	udiv	r3, r2, r3
 8008628:	b29b      	uxth	r3, r3
 800862a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800862c:	e003      	b.n	8008636 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008634:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008638:	2b0f      	cmp	r3, #15
 800863a:	d916      	bls.n	800866a <UART_SetConfig+0x1b8a>
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008642:	d212      	bcs.n	800866a <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	b29b      	uxth	r3, r3
 8008648:	f023 030f 	bic.w	r3, r3, #15
 800864c:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008650:	085b      	lsrs	r3, r3, #1
 8008652:	b29b      	uxth	r3, r3
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	b29a      	uxth	r2, r3
 800865a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800865c:	4313      	orrs	r3, r2
 800865e:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008666:	60da      	str	r2, [r3, #12]
 8008668:	e3a3      	b.n	8008db2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008670:	e39f      	b.n	8008db2 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8008672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	f200 8388 	bhi.w	8008d8c <UART_SetConfig+0x22ac>
 800867c:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <UART_SetConfig+0x1ba4>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	08008789 	.word	0x08008789
 8008688:	0800883f 	.word	0x0800883f
 800868c:	08008d8d 	.word	0x08008d8d
 8008690:	08008d8d 	.word	0x08008d8d
 8008694:	080088f5 	.word	0x080088f5
 8008698:	08008d8d 	.word	0x08008d8d
 800869c:	08008d8d 	.word	0x08008d8d
 80086a0:	08008d8d 	.word	0x08008d8d
 80086a4:	080089af 	.word	0x080089af
 80086a8:	08008d8d 	.word	0x08008d8d
 80086ac:	08008d8d 	.word	0x08008d8d
 80086b0:	08008d8d 	.word	0x08008d8d
 80086b4:	08008d8d 	.word	0x08008d8d
 80086b8:	08008d8d 	.word	0x08008d8d
 80086bc:	08008d8d 	.word	0x08008d8d
 80086c0:	08008d8d 	.word	0x08008d8d
 80086c4:	08008a69 	.word	0x08008a69
 80086c8:	08008d8d 	.word	0x08008d8d
 80086cc:	08008d8d 	.word	0x08008d8d
 80086d0:	08008d8d 	.word	0x08008d8d
 80086d4:	08008d8d 	.word	0x08008d8d
 80086d8:	08008d8d 	.word	0x08008d8d
 80086dc:	08008d8d 	.word	0x08008d8d
 80086e0:	08008d8d 	.word	0x08008d8d
 80086e4:	08008d8d 	.word	0x08008d8d
 80086e8:	08008d8d 	.word	0x08008d8d
 80086ec:	08008d8d 	.word	0x08008d8d
 80086f0:	08008d8d 	.word	0x08008d8d
 80086f4:	08008d8d 	.word	0x08008d8d
 80086f8:	08008d8d 	.word	0x08008d8d
 80086fc:	08008d8d 	.word	0x08008d8d
 8008700:	08008d8d 	.word	0x08008d8d
 8008704:	08008bd9 	.word	0x08008bd9
 8008708:	08008d8d 	.word	0x08008d8d
 800870c:	08008d8d 	.word	0x08008d8d
 8008710:	08008d8d 	.word	0x08008d8d
 8008714:	08008d8d 	.word	0x08008d8d
 8008718:	08008d8d 	.word	0x08008d8d
 800871c:	08008d8d 	.word	0x08008d8d
 8008720:	08008d8d 	.word	0x08008d8d
 8008724:	08008d8d 	.word	0x08008d8d
 8008728:	08008d8d 	.word	0x08008d8d
 800872c:	08008d8d 	.word	0x08008d8d
 8008730:	08008d8d 	.word	0x08008d8d
 8008734:	08008d8d 	.word	0x08008d8d
 8008738:	08008d8d 	.word	0x08008d8d
 800873c:	08008d8d 	.word	0x08008d8d
 8008740:	08008d8d 	.word	0x08008d8d
 8008744:	08008d8d 	.word	0x08008d8d
 8008748:	08008d8d 	.word	0x08008d8d
 800874c:	08008d8d 	.word	0x08008d8d
 8008750:	08008d8d 	.word	0x08008d8d
 8008754:	08008d8d 	.word	0x08008d8d
 8008758:	08008d8d 	.word	0x08008d8d
 800875c:	08008d8d 	.word	0x08008d8d
 8008760:	08008d8d 	.word	0x08008d8d
 8008764:	08008d8d 	.word	0x08008d8d
 8008768:	08008d8d 	.word	0x08008d8d
 800876c:	08008d8d 	.word	0x08008d8d
 8008770:	08008d8d 	.word	0x08008d8d
 8008774:	08008d8d 	.word	0x08008d8d
 8008778:	08008d8d 	.word	0x08008d8d
 800877c:	08008d8d 	.word	0x08008d8d
 8008780:	08008d8d 	.word	0x08008d8d
 8008784:	08008ccd 	.word	0x08008ccd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008788:	f7fb fb7a 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 800878c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	2b00      	cmp	r3, #0
 8008794:	d044      	beq.n	8008820 <UART_SetConfig+0x1d40>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	2b01      	cmp	r3, #1
 800879c:	d03e      	beq.n	800881c <UART_SetConfig+0x1d3c>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d038      	beq.n	8008818 <UART_SetConfig+0x1d38>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d032      	beq.n	8008814 <UART_SetConfig+0x1d34>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d02c      	beq.n	8008810 <UART_SetConfig+0x1d30>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	d026      	beq.n	800880c <UART_SetConfig+0x1d2c>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	2b06      	cmp	r3, #6
 80087c4:	d020      	beq.n	8008808 <UART_SetConfig+0x1d28>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	2b07      	cmp	r3, #7
 80087cc:	d01a      	beq.n	8008804 <UART_SetConfig+0x1d24>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	2b08      	cmp	r3, #8
 80087d4:	d014      	beq.n	8008800 <UART_SetConfig+0x1d20>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087da:	2b09      	cmp	r3, #9
 80087dc:	d00e      	beq.n	80087fc <UART_SetConfig+0x1d1c>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	2b0a      	cmp	r3, #10
 80087e4:	d008      	beq.n	80087f8 <UART_SetConfig+0x1d18>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ea:	2b0b      	cmp	r3, #11
 80087ec:	d102      	bne.n	80087f4 <UART_SetConfig+0x1d14>
 80087ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087f2:	e016      	b.n	8008822 <UART_SetConfig+0x1d42>
 80087f4:	2301      	movs	r3, #1
 80087f6:	e014      	b.n	8008822 <UART_SetConfig+0x1d42>
 80087f8:	2380      	movs	r3, #128	; 0x80
 80087fa:	e012      	b.n	8008822 <UART_SetConfig+0x1d42>
 80087fc:	2340      	movs	r3, #64	; 0x40
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0x1d42>
 8008800:	2320      	movs	r3, #32
 8008802:	e00e      	b.n	8008822 <UART_SetConfig+0x1d42>
 8008804:	2310      	movs	r3, #16
 8008806:	e00c      	b.n	8008822 <UART_SetConfig+0x1d42>
 8008808:	230c      	movs	r3, #12
 800880a:	e00a      	b.n	8008822 <UART_SetConfig+0x1d42>
 800880c:	230a      	movs	r3, #10
 800880e:	e008      	b.n	8008822 <UART_SetConfig+0x1d42>
 8008810:	2308      	movs	r3, #8
 8008812:	e006      	b.n	8008822 <UART_SetConfig+0x1d42>
 8008814:	2306      	movs	r3, #6
 8008816:	e004      	b.n	8008822 <UART_SetConfig+0x1d42>
 8008818:	2304      	movs	r3, #4
 800881a:	e002      	b.n	8008822 <UART_SetConfig+0x1d42>
 800881c:	2302      	movs	r3, #2
 800881e:	e000      	b.n	8008822 <UART_SetConfig+0x1d42>
 8008820:	2301      	movs	r3, #1
 8008822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008824:	fbb2 f2f3 	udiv	r2, r2, r3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	441a      	add	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	fbb2 f3f3 	udiv	r3, r2, r3
 8008838:	b29b      	uxth	r3, r3
 800883a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800883c:	e2aa      	b.n	8008d94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800883e:	f7fb fb35 	bl	8003eac <HAL_RCC_GetPCLK2Freq>
 8008842:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	2b00      	cmp	r3, #0
 800884a:	d044      	beq.n	80088d6 <UART_SetConfig+0x1df6>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	2b01      	cmp	r3, #1
 8008852:	d03e      	beq.n	80088d2 <UART_SetConfig+0x1df2>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b02      	cmp	r3, #2
 800885a:	d038      	beq.n	80088ce <UART_SetConfig+0x1dee>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008860:	2b03      	cmp	r3, #3
 8008862:	d032      	beq.n	80088ca <UART_SetConfig+0x1dea>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b04      	cmp	r3, #4
 800886a:	d02c      	beq.n	80088c6 <UART_SetConfig+0x1de6>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	2b05      	cmp	r3, #5
 8008872:	d026      	beq.n	80088c2 <UART_SetConfig+0x1de2>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	2b06      	cmp	r3, #6
 800887a:	d020      	beq.n	80088be <UART_SetConfig+0x1dde>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	2b07      	cmp	r3, #7
 8008882:	d01a      	beq.n	80088ba <UART_SetConfig+0x1dda>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b08      	cmp	r3, #8
 800888a:	d014      	beq.n	80088b6 <UART_SetConfig+0x1dd6>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	2b09      	cmp	r3, #9
 8008892:	d00e      	beq.n	80088b2 <UART_SetConfig+0x1dd2>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008898:	2b0a      	cmp	r3, #10
 800889a:	d008      	beq.n	80088ae <UART_SetConfig+0x1dce>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a0:	2b0b      	cmp	r3, #11
 80088a2:	d102      	bne.n	80088aa <UART_SetConfig+0x1dca>
 80088a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a8:	e016      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e014      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088ae:	2380      	movs	r3, #128	; 0x80
 80088b0:	e012      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088b2:	2340      	movs	r3, #64	; 0x40
 80088b4:	e010      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088b6:	2320      	movs	r3, #32
 80088b8:	e00e      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088ba:	2310      	movs	r3, #16
 80088bc:	e00c      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088be:	230c      	movs	r3, #12
 80088c0:	e00a      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088c2:	230a      	movs	r3, #10
 80088c4:	e008      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088c6:	2308      	movs	r3, #8
 80088c8:	e006      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088ca:	2306      	movs	r3, #6
 80088cc:	e004      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088ce:	2304      	movs	r3, #4
 80088d0:	e002      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088d2:	2302      	movs	r3, #2
 80088d4:	e000      	b.n	80088d8 <UART_SetConfig+0x1df8>
 80088d6:	2301      	movs	r3, #1
 80088d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088da:	fbb2 f2f3 	udiv	r2, r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	085b      	lsrs	r3, r3, #1
 80088e4:	441a      	add	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088f2:	e24f      	b.n	8008d94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f4:	f107 0318 	add.w	r3, r7, #24
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fc f9f3 	bl	8004ce4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d044      	beq.n	8008992 <UART_SetConfig+0x1eb2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	2b01      	cmp	r3, #1
 800890e:	d03e      	beq.n	800898e <UART_SetConfig+0x1eae>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008914:	2b02      	cmp	r3, #2
 8008916:	d038      	beq.n	800898a <UART_SetConfig+0x1eaa>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891c:	2b03      	cmp	r3, #3
 800891e:	d032      	beq.n	8008986 <UART_SetConfig+0x1ea6>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	2b04      	cmp	r3, #4
 8008926:	d02c      	beq.n	8008982 <UART_SetConfig+0x1ea2>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	2b05      	cmp	r3, #5
 800892e:	d026      	beq.n	800897e <UART_SetConfig+0x1e9e>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	2b06      	cmp	r3, #6
 8008936:	d020      	beq.n	800897a <UART_SetConfig+0x1e9a>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2b07      	cmp	r3, #7
 800893e:	d01a      	beq.n	8008976 <UART_SetConfig+0x1e96>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008944:	2b08      	cmp	r3, #8
 8008946:	d014      	beq.n	8008972 <UART_SetConfig+0x1e92>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2b09      	cmp	r3, #9
 800894e:	d00e      	beq.n	800896e <UART_SetConfig+0x1e8e>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008954:	2b0a      	cmp	r3, #10
 8008956:	d008      	beq.n	800896a <UART_SetConfig+0x1e8a>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b0b      	cmp	r3, #11
 800895e:	d102      	bne.n	8008966 <UART_SetConfig+0x1e86>
 8008960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008964:	e016      	b.n	8008994 <UART_SetConfig+0x1eb4>
 8008966:	2301      	movs	r3, #1
 8008968:	e014      	b.n	8008994 <UART_SetConfig+0x1eb4>
 800896a:	2380      	movs	r3, #128	; 0x80
 800896c:	e012      	b.n	8008994 <UART_SetConfig+0x1eb4>
 800896e:	2340      	movs	r3, #64	; 0x40
 8008970:	e010      	b.n	8008994 <UART_SetConfig+0x1eb4>
 8008972:	2320      	movs	r3, #32
 8008974:	e00e      	b.n	8008994 <UART_SetConfig+0x1eb4>
 8008976:	2310      	movs	r3, #16
 8008978:	e00c      	b.n	8008994 <UART_SetConfig+0x1eb4>
 800897a:	230c      	movs	r3, #12
 800897c:	e00a      	b.n	8008994 <UART_SetConfig+0x1eb4>
 800897e:	230a      	movs	r3, #10
 8008980:	e008      	b.n	8008994 <UART_SetConfig+0x1eb4>
 8008982:	2308      	movs	r3, #8
 8008984:	e006      	b.n	8008994 <UART_SetConfig+0x1eb4>
 8008986:	2306      	movs	r3, #6
 8008988:	e004      	b.n	8008994 <UART_SetConfig+0x1eb4>
 800898a:	2304      	movs	r3, #4
 800898c:	e002      	b.n	8008994 <UART_SetConfig+0x1eb4>
 800898e:	2302      	movs	r3, #2
 8008990:	e000      	b.n	8008994 <UART_SetConfig+0x1eb4>
 8008992:	2301      	movs	r3, #1
 8008994:	fbb2 f2f3 	udiv	r2, r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	441a      	add	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089ac:	e1f2      	b.n	8008d94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ae:	f107 030c 	add.w	r3, r7, #12
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fc fae2 	bl	8004f7c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d044      	beq.n	8008a4c <UART_SetConfig+0x1f6c>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d03e      	beq.n	8008a48 <UART_SetConfig+0x1f68>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d038      	beq.n	8008a44 <UART_SetConfig+0x1f64>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d032      	beq.n	8008a40 <UART_SetConfig+0x1f60>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d02c      	beq.n	8008a3c <UART_SetConfig+0x1f5c>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b05      	cmp	r3, #5
 80089e8:	d026      	beq.n	8008a38 <UART_SetConfig+0x1f58>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ee:	2b06      	cmp	r3, #6
 80089f0:	d020      	beq.n	8008a34 <UART_SetConfig+0x1f54>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2b07      	cmp	r3, #7
 80089f8:	d01a      	beq.n	8008a30 <UART_SetConfig+0x1f50>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	d014      	beq.n	8008a2c <UART_SetConfig+0x1f4c>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b09      	cmp	r3, #9
 8008a08:	d00e      	beq.n	8008a28 <UART_SetConfig+0x1f48>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b0a      	cmp	r3, #10
 8008a10:	d008      	beq.n	8008a24 <UART_SetConfig+0x1f44>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b0b      	cmp	r3, #11
 8008a18:	d102      	bne.n	8008a20 <UART_SetConfig+0x1f40>
 8008a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a1e:	e016      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a20:	2301      	movs	r3, #1
 8008a22:	e014      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a24:	2380      	movs	r3, #128	; 0x80
 8008a26:	e012      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a28:	2340      	movs	r3, #64	; 0x40
 8008a2a:	e010      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a2c:	2320      	movs	r3, #32
 8008a2e:	e00e      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a30:	2310      	movs	r3, #16
 8008a32:	e00c      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a34:	230c      	movs	r3, #12
 8008a36:	e00a      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a38:	230a      	movs	r3, #10
 8008a3a:	e008      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a3c:	2308      	movs	r3, #8
 8008a3e:	e006      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a40:	2306      	movs	r3, #6
 8008a42:	e004      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a44:	2304      	movs	r3, #4
 8008a46:	e002      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e000      	b.n	8008a4e <UART_SetConfig+0x1f6e>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	441a      	add	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a66:	e195      	b.n	8008d94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a68:	4b87      	ldr	r3, [pc, #540]	; (8008c88 <UART_SetConfig+0x21a8>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d05d      	beq.n	8008b30 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a74:	4b84      	ldr	r3, [pc, #528]	; (8008c88 <UART_SetConfig+0x21a8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	08db      	lsrs	r3, r3, #3
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	4a83      	ldr	r2, [pc, #524]	; (8008c8c <UART_SetConfig+0x21ac>)
 8008a80:	40da      	lsrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d044      	beq.n	8008b14 <UART_SetConfig+0x2034>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d03e      	beq.n	8008b10 <UART_SetConfig+0x2030>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d038      	beq.n	8008b0c <UART_SetConfig+0x202c>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d032      	beq.n	8008b08 <UART_SetConfig+0x2028>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d02c      	beq.n	8008b04 <UART_SetConfig+0x2024>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	d026      	beq.n	8008b00 <UART_SetConfig+0x2020>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	2b06      	cmp	r3, #6
 8008ab8:	d020      	beq.n	8008afc <UART_SetConfig+0x201c>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abe:	2b07      	cmp	r3, #7
 8008ac0:	d01a      	beq.n	8008af8 <UART_SetConfig+0x2018>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d014      	beq.n	8008af4 <UART_SetConfig+0x2014>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	2b09      	cmp	r3, #9
 8008ad0:	d00e      	beq.n	8008af0 <UART_SetConfig+0x2010>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad6:	2b0a      	cmp	r3, #10
 8008ad8:	d008      	beq.n	8008aec <UART_SetConfig+0x200c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	2b0b      	cmp	r3, #11
 8008ae0:	d102      	bne.n	8008ae8 <UART_SetConfig+0x2008>
 8008ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ae6:	e016      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e014      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008aec:	2380      	movs	r3, #128	; 0x80
 8008aee:	e012      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008af0:	2340      	movs	r3, #64	; 0x40
 8008af2:	e010      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008af4:	2320      	movs	r3, #32
 8008af6:	e00e      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008af8:	2310      	movs	r3, #16
 8008afa:	e00c      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008afc:	230c      	movs	r3, #12
 8008afe:	e00a      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008b00:	230a      	movs	r3, #10
 8008b02:	e008      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008b04:	2308      	movs	r3, #8
 8008b06:	e006      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008b08:	2306      	movs	r3, #6
 8008b0a:	e004      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	e002      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e000      	b.n	8008b16 <UART_SetConfig+0x2036>
 8008b14:	2301      	movs	r3, #1
 8008b16:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	085b      	lsrs	r3, r3, #1
 8008b20:	441a      	add	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008b2e:	e131      	b.n	8008d94 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d043      	beq.n	8008bc0 <UART_SetConfig+0x20e0>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d03d      	beq.n	8008bbc <UART_SetConfig+0x20dc>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d037      	beq.n	8008bb8 <UART_SetConfig+0x20d8>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d031      	beq.n	8008bb4 <UART_SetConfig+0x20d4>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	d02b      	beq.n	8008bb0 <UART_SetConfig+0x20d0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5c:	2b05      	cmp	r3, #5
 8008b5e:	d025      	beq.n	8008bac <UART_SetConfig+0x20cc>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	2b06      	cmp	r3, #6
 8008b66:	d01f      	beq.n	8008ba8 <UART_SetConfig+0x20c8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	2b07      	cmp	r3, #7
 8008b6e:	d019      	beq.n	8008ba4 <UART_SetConfig+0x20c4>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d013      	beq.n	8008ba0 <UART_SetConfig+0x20c0>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	d00d      	beq.n	8008b9c <UART_SetConfig+0x20bc>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	2b0a      	cmp	r3, #10
 8008b86:	d007      	beq.n	8008b98 <UART_SetConfig+0x20b8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8c:	2b0b      	cmp	r3, #11
 8008b8e:	d101      	bne.n	8008b94 <UART_SetConfig+0x20b4>
 8008b90:	4b3f      	ldr	r3, [pc, #252]	; (8008c90 <UART_SetConfig+0x21b0>)
 8008b92:	e016      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008b94:	4b3d      	ldr	r3, [pc, #244]	; (8008c8c <UART_SetConfig+0x21ac>)
 8008b96:	e014      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008b98:	4b3e      	ldr	r3, [pc, #248]	; (8008c94 <UART_SetConfig+0x21b4>)
 8008b9a:	e012      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008b9c:	4b3e      	ldr	r3, [pc, #248]	; (8008c98 <UART_SetConfig+0x21b8>)
 8008b9e:	e010      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008ba0:	4b3e      	ldr	r3, [pc, #248]	; (8008c9c <UART_SetConfig+0x21bc>)
 8008ba2:	e00e      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008ba4:	4b3e      	ldr	r3, [pc, #248]	; (8008ca0 <UART_SetConfig+0x21c0>)
 8008ba6:	e00c      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	; (8008ca4 <UART_SetConfig+0x21c4>)
 8008baa:	e00a      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008bac:	4b3e      	ldr	r3, [pc, #248]	; (8008ca8 <UART_SetConfig+0x21c8>)
 8008bae:	e008      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008bb0:	4b3e      	ldr	r3, [pc, #248]	; (8008cac <UART_SetConfig+0x21cc>)
 8008bb2:	e006      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008bb4:	4b3e      	ldr	r3, [pc, #248]	; (8008cb0 <UART_SetConfig+0x21d0>)
 8008bb6:	e004      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008bb8:	4b3e      	ldr	r3, [pc, #248]	; (8008cb4 <UART_SetConfig+0x21d4>)
 8008bba:	e002      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008bbc:	4b3e      	ldr	r3, [pc, #248]	; (8008cb8 <UART_SetConfig+0x21d8>)
 8008bbe:	e000      	b.n	8008bc2 <UART_SetConfig+0x20e2>
 8008bc0:	4b32      	ldr	r3, [pc, #200]	; (8008c8c <UART_SetConfig+0x21ac>)
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6852      	ldr	r2, [r2, #4]
 8008bc6:	0852      	lsrs	r2, r2, #1
 8008bc8:	441a      	add	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bd6:	e0dd      	b.n	8008d94 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d046      	beq.n	8008c6e <UART_SetConfig+0x218e>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d040      	beq.n	8008c6a <UART_SetConfig+0x218a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d03a      	beq.n	8008c66 <UART_SetConfig+0x2186>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d034      	beq.n	8008c62 <UART_SetConfig+0x2182>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d02e      	beq.n	8008c5e <UART_SetConfig+0x217e>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c04:	2b05      	cmp	r3, #5
 8008c06:	d028      	beq.n	8008c5a <UART_SetConfig+0x217a>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	2b06      	cmp	r3, #6
 8008c0e:	d022      	beq.n	8008c56 <UART_SetConfig+0x2176>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	2b07      	cmp	r3, #7
 8008c16:	d01c      	beq.n	8008c52 <UART_SetConfig+0x2172>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d016      	beq.n	8008c4e <UART_SetConfig+0x216e>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	2b09      	cmp	r3, #9
 8008c26:	d00f      	beq.n	8008c48 <UART_SetConfig+0x2168>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	2b0a      	cmp	r3, #10
 8008c2e:	d008      	beq.n	8008c42 <UART_SetConfig+0x2162>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	2b0b      	cmp	r3, #11
 8008c36:	d102      	bne.n	8008c3e <UART_SetConfig+0x215e>
 8008c38:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008c3c:	e018      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c3e:	4b18      	ldr	r3, [pc, #96]	; (8008ca0 <UART_SetConfig+0x21c0>)
 8008c40:	e016      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c42:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008c46:	e013      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c48:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008c4c:	e010      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c4e:	4b1b      	ldr	r3, [pc, #108]	; (8008cbc <UART_SetConfig+0x21dc>)
 8008c50:	e00e      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c52:	4b0f      	ldr	r3, [pc, #60]	; (8008c90 <UART_SetConfig+0x21b0>)
 8008c54:	e00c      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c56:	4b1a      	ldr	r3, [pc, #104]	; (8008cc0 <UART_SetConfig+0x21e0>)
 8008c58:	e00a      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c5a:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <UART_SetConfig+0x21e4>)
 8008c5c:	e008      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c5e:	4b0d      	ldr	r3, [pc, #52]	; (8008c94 <UART_SetConfig+0x21b4>)
 8008c60:	e006      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c62:	4b19      	ldr	r3, [pc, #100]	; (8008cc8 <UART_SetConfig+0x21e8>)
 8008c64:	e004      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <UART_SetConfig+0x21b8>)
 8008c68:	e002      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c6a:	4b0c      	ldr	r3, [pc, #48]	; (8008c9c <UART_SetConfig+0x21bc>)
 8008c6c:	e000      	b.n	8008c70 <UART_SetConfig+0x2190>
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <UART_SetConfig+0x21c0>)
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	6852      	ldr	r2, [r2, #4]
 8008c74:	0852      	lsrs	r2, r2, #1
 8008c76:	441a      	add	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008c84:	e086      	b.n	8008d94 <UART_SetConfig+0x22b4>
 8008c86:	bf00      	nop
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	03d09000 	.word	0x03d09000
 8008c90:	0003d090 	.word	0x0003d090
 8008c94:	0007a120 	.word	0x0007a120
 8008c98:	000f4240 	.word	0x000f4240
 8008c9c:	001e8480 	.word	0x001e8480
 8008ca0:	003d0900 	.word	0x003d0900
 8008ca4:	00516155 	.word	0x00516155
 8008ca8:	0061a800 	.word	0x0061a800
 8008cac:	007a1200 	.word	0x007a1200
 8008cb0:	00a2c2aa 	.word	0x00a2c2aa
 8008cb4:	00f42400 	.word	0x00f42400
 8008cb8:	01e84800 	.word	0x01e84800
 8008cbc:	0001e848 	.word	0x0001e848
 8008cc0:	00051615 	.word	0x00051615
 8008cc4:	00061a80 	.word	0x00061a80
 8008cc8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d04e      	beq.n	8008d72 <UART_SetConfig+0x2292>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d047      	beq.n	8008d6c <UART_SetConfig+0x228c>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d040      	beq.n	8008d66 <UART_SetConfig+0x2286>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d039      	beq.n	8008d60 <UART_SetConfig+0x2280>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d032      	beq.n	8008d5a <UART_SetConfig+0x227a>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf8:	2b05      	cmp	r3, #5
 8008cfa:	d02b      	beq.n	8008d54 <UART_SetConfig+0x2274>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2b06      	cmp	r3, #6
 8008d02:	d024      	beq.n	8008d4e <UART_SetConfig+0x226e>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	2b07      	cmp	r3, #7
 8008d0a:	d01d      	beq.n	8008d48 <UART_SetConfig+0x2268>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d016      	beq.n	8008d42 <UART_SetConfig+0x2262>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d18:	2b09      	cmp	r3, #9
 8008d1a:	d00f      	beq.n	8008d3c <UART_SetConfig+0x225c>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b0a      	cmp	r3, #10
 8008d22:	d008      	beq.n	8008d36 <UART_SetConfig+0x2256>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	2b0b      	cmp	r3, #11
 8008d2a:	d101      	bne.n	8008d30 <UART_SetConfig+0x2250>
 8008d2c:	2380      	movs	r3, #128	; 0x80
 8008d2e:	e022      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d34:	e01f      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d3a:	e01c      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d40:	e019      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d46:	e016      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d4c:	e013      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d4e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008d52:	e010      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d54:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008d58:	e00d      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d5e:	e00a      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d60:	f241 5355 	movw	r3, #5461	; 0x1555
 8008d64:	e007      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d6a:	e004      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d70:	e001      	b.n	8008d76 <UART_SetConfig+0x2296>
 8008d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6852      	ldr	r2, [r2, #4]
 8008d7a:	0852      	lsrs	r2, r2, #1
 8008d7c:	441a      	add	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d8a:	e003      	b.n	8008d94 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008d92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d908      	bls.n	8008dac <UART_SetConfig+0x22cc>
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da0:	d204      	bcs.n	8008dac <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008da8:	60da      	str	r2, [r3, #12]
 8008daa:	e002      	b.n	8008db2 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3740      	adds	r7, #64	; 0x40
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01a      	beq.n	8008ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eda:	d10a      	bne.n	8008ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	605a      	str	r2, [r3, #4]
  }
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008f30:	f7f8 fe58 	bl	8001be4 <HAL_GetTick>
 8008f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0308 	and.w	r3, r3, #8
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d10e      	bne.n	8008f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f82c 	bl	8008fb0 <UART_WaitOnFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e022      	b.n	8008fa8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d10e      	bne.n	8008f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f816 	bl	8008fb0 <UART_WaitOnFlagUntilTimeout>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e00c      	b.n	8008fa8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc0:	e062      	b.n	8009088 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc8:	d05e      	beq.n	8009088 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fca:	f7f8 fe0b 	bl	8001be4 <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d302      	bcc.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d11d      	bne.n	800901c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008fee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	689a      	ldr	r2, [r3, #8]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0201 	bic.w	r2, r2, #1
 8008ffe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2220      	movs	r2, #32
 8009004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2220      	movs	r2, #32
 800900c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e045      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d02e      	beq.n	8009088 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009038:	d126      	bne.n	8009088 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009042:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009052:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 0201 	bic.w	r2, r2, #1
 8009062:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2220      	movs	r2, #32
 8009068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2220      	movs	r2, #32
 8009070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2220      	movs	r2, #32
 8009078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e00f      	b.n	80090a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	69da      	ldr	r2, [r3, #28]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	4013      	ands	r3, r2
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	429a      	cmp	r2, r3
 8009096:	bf0c      	ite	eq
 8009098:	2301      	moveq	r3, #1
 800909a:	2300      	movne	r3, #0
 800909c:	b2db      	uxtb	r3, r3
 800909e:	461a      	mov	r2, r3
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d08d      	beq.n	8008fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80090c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6899      	ldr	r1, [r3, #8]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <UART_EndRxTransfer+0x44>)
 80090d4:	400b      	ands	r3, r1
 80090d6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	effffffe 	.word	0xeffffffe

080090f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7fd fcd6 	bl	8006ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800913a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7fd fcb2 	bl	8006ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d101      	bne.n	80091aa <HAL_UARTEx_DisableFifoMode+0x16>
 80091a6:	2302      	movs	r3, #2
 80091a8:	e027      	b.n	80091fa <HAL_UARTEx_DisableFifoMode+0x66>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2224      	movs	r2, #36	; 0x24
 80091b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0201 	bic.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2220      	movs	r2, #32
 80091ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800921a:	2302      	movs	r3, #2
 800921c:	e02d      	b.n	800927a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2224      	movs	r2, #36	; 0x24
 800922a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0201 	bic.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f850 	bl	8009300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b084      	sub	sp, #16
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009292:	2b01      	cmp	r3, #1
 8009294:	d101      	bne.n	800929a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009296:	2302      	movs	r3, #2
 8009298:	e02d      	b.n	80092f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2224      	movs	r2, #36	; 0x24
 80092a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0201 	bic.w	r2, r2, #1
 80092c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f812 	bl	8009300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68fa      	ldr	r2, [r7, #12]
 80092e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2220      	movs	r2, #32
 80092e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009300:	b480      	push	{r7}
 8009302:	b089      	sub	sp, #36	; 0x24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009308:	4a2f      	ldr	r2, [pc, #188]	; (80093c8 <UARTEx_SetNbDataToProcess+0xc8>)
 800930a:	f107 0314 	add.w	r3, r7, #20
 800930e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009312:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009316:	4a2d      	ldr	r2, [pc, #180]	; (80093cc <UARTEx_SetNbDataToProcess+0xcc>)
 8009318:	f107 030c 	add.w	r3, r7, #12
 800931c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009320:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009328:	2b00      	cmp	r3, #0
 800932a:	d108      	bne.n	800933e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2201      	movs	r2, #1
 8009330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800933c:	e03d      	b.n	80093ba <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800933e:	2308      	movs	r3, #8
 8009340:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009342:	2308      	movs	r3, #8
 8009344:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	0e5b      	lsrs	r3, r3, #25
 800934e:	b2db      	uxtb	r3, r3
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	0f5b      	lsrs	r3, r3, #29
 800935e:	b2db      	uxtb	r3, r3
 8009360:	f003 0307 	and.w	r3, r3, #7
 8009364:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009366:	7fbb      	ldrb	r3, [r7, #30]
 8009368:	7f3a      	ldrb	r2, [r7, #28]
 800936a:	f107 0120 	add.w	r1, r7, #32
 800936e:	440a      	add	r2, r1
 8009370:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009374:	fb02 f303 	mul.w	r3, r2, r3
 8009378:	7f3a      	ldrb	r2, [r7, #28]
 800937a:	f107 0120 	add.w	r1, r7, #32
 800937e:	440a      	add	r2, r1
 8009380:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009384:	fb93 f3f2 	sdiv	r3, r3, r2
 8009388:	b29a      	uxth	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009390:	7ffb      	ldrb	r3, [r7, #31]
 8009392:	7f7a      	ldrb	r2, [r7, #29]
 8009394:	f107 0120 	add.w	r1, r7, #32
 8009398:	440a      	add	r2, r1
 800939a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	7f7a      	ldrb	r2, [r7, #29]
 80093a4:	f107 0120 	add.w	r1, r7, #32
 80093a8:	440a      	add	r2, r1
 80093aa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80093ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80093ba:	bf00      	nop
 80093bc:	3724      	adds	r7, #36	; 0x24
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	080099b0 	.word	0x080099b0
 80093cc:	080099b8 	.word	0x080099b8

080093d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093d0:	b084      	sub	sp, #16
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
 80093da:	f107 001c 	add.w	r0, r7, #28
 80093de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d120      	bne.n	800942a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68da      	ldr	r2, [r3, #12]
 80093f8:	4b25      	ldr	r3, [pc, #148]	; (8009490 <USB_CoreInit+0xc0>)
 80093fa:	4013      	ands	r3, r2
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800940c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800940e:	2b01      	cmp	r3, #1
 8009410:	d105      	bne.n	800941e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa5a 	bl	80098d8 <USB_CoreReset>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]
 8009428:	e01a      	b.n	8009460 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa4e 	bl	80098d8 <USB_CoreReset>
 800943c:	4603      	mov	r3, r0
 800943e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	639a      	str	r2, [r3, #56]	; 0x38
 8009452:	e005      	b.n	8009460 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	2b01      	cmp	r3, #1
 8009464:	d10b      	bne.n	800947e <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f043 0208 	orr.w	r2, r3, #8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f043 0220 	orr.w	r2, r3, #32
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800947e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800948a:	b004      	add	sp, #16
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	ffbdffbf 	.word	0xffbdffbf

08009494 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f023 0201 	bic.w	r2, r3, #1
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d106      	bne.n	80094e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	60da      	str	r2, [r3, #12]
 80094e0:	e00b      	b.n	80094fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	60da      	str	r2, [r3, #12]
 80094f4:	e001      	b.n	80094fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	e003      	b.n	8009502 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80094fa:	2032      	movs	r0, #50	; 0x32
 80094fc:	f7f8 fb7e 	bl	8001bfc <HAL_Delay>

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800950c:	b084      	sub	sp, #16
 800950e:	b580      	push	{r7, lr}
 8009510:	b086      	sub	sp, #24
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800951a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009526:	2300      	movs	r3, #0
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	e009      	b.n	8009540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	3340      	adds	r3, #64	; 0x40
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4413      	add	r3, r2
 8009536:	2200      	movs	r2, #0
 8009538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	3301      	adds	r3, #1
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b0e      	cmp	r3, #14
 8009544:	d9f2      	bls.n	800952c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009548:	2b00      	cmp	r3, #0
 800954a:	d112      	bne.n	8009572 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009550:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	601a      	str	r2, [r3, #0]
 8009570:	e005      	b.n	800957e <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009576:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009584:	461a      	mov	r2, r3
 8009586:	2300      	movs	r3, #0
 8009588:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009590:	4619      	mov	r1, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009598:	461a      	mov	r2, r3
 800959a:	680b      	ldr	r3, [r1, #0]
 800959c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d10c      	bne.n	80095be <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d104      	bne.n	80095b4 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095aa:	2100      	movs	r1, #0
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 f961 	bl	8009874 <USB_SetDevSpeed>
 80095b2:	e008      	b.n	80095c6 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095b4:	2101      	movs	r1, #1
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f95c 	bl	8009874 <USB_SetDevSpeed>
 80095bc:	e003      	b.n	80095c6 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095be:	2103      	movs	r1, #3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f957 	bl	8009874 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095c6:	2110      	movs	r1, #16
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f90b 	bl	80097e4 <USB_FlushTxFifo>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f929 	bl	8009830 <USB_FlushRxFifo>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ee:	461a      	mov	r2, r3
 80095f0:	2300      	movs	r3, #0
 80095f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fa:	461a      	mov	r2, r3
 80095fc:	2300      	movs	r3, #0
 80095fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009606:	461a      	mov	r2, r3
 8009608:	2300      	movs	r3, #0
 800960a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800960c:	2300      	movs	r3, #0
 800960e:	613b      	str	r3, [r7, #16]
 8009610:	e043      	b.n	800969a <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	015a      	lsls	r2, r3, #5
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4413      	add	r3, r2
 800961a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009628:	d118      	bne.n	800965c <USB_DevInit+0x150>
    {
      if (i == 0U)
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d10a      	bne.n	8009646 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4413      	add	r3, r2
 8009638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800963c:	461a      	mov	r2, r3
 800963e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	e013      	b.n	800966e <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009652:	461a      	mov	r2, r3
 8009654:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009658:	6013      	str	r3, [r2, #0]
 800965a:	e008      	b.n	800966e <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	015a      	lsls	r2, r3, #5
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	4413      	add	r3, r2
 8009664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009668:	461a      	mov	r2, r3
 800966a:	2300      	movs	r3, #0
 800966c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967a:	461a      	mov	r2, r3
 800967c:	2300      	movs	r3, #0
 800967e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	015a      	lsls	r2, r3, #5
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968c:	461a      	mov	r2, r3
 800968e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	3301      	adds	r3, #1
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d3b7      	bcc.n	8009612 <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096a2:	2300      	movs	r3, #0
 80096a4:	613b      	str	r3, [r7, #16]
 80096a6:	e043      	b.n	8009730 <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096be:	d118      	bne.n	80096f2 <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	461a      	mov	r2, r3
 80096d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80096d8:	6013      	str	r3, [r2, #0]
 80096da:	e013      	b.n	8009704 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e8:	461a      	mov	r2, r3
 80096ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80096ee:	6013      	str	r3, [r2, #0]
 80096f0:	e008      	b.n	8009704 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	015a      	lsls	r2, r3, #5
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4413      	add	r3, r2
 80096fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096fe:	461a      	mov	r2, r3
 8009700:	2300      	movs	r3, #0
 8009702:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009710:	461a      	mov	r2, r3
 8009712:	2300      	movs	r3, #0
 8009714:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4413      	add	r3, r2
 800971e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009722:	461a      	mov	r2, r3
 8009724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009728:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	3301      	adds	r3, #1
 800972e:	613b      	str	r3, [r7, #16]
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	429a      	cmp	r2, r3
 8009736:	d3b7      	bcc.n	80096a8 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800974a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	2b01      	cmp	r3, #1
 8009750:	d110      	bne.n	8009774 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009758:	461a      	mov	r2, r3
 800975a:	4b1e      	ldr	r3, [pc, #120]	; (80097d4 <USB_DevInit+0x2c8>)
 800975c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976c:	4619      	mov	r1, r3
 800976e:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <USB_DevInit+0x2cc>)
 8009770:	4313      	orrs	r3, r2
 8009772:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009780:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009784:	2b00      	cmp	r3, #0
 8009786:	d105      	bne.n	8009794 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f043 0210 	orr.w	r2, r3, #16
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699a      	ldr	r2, [r3, #24]
 8009798:	4b10      	ldr	r3, [pc, #64]	; (80097dc <USB_DevInit+0x2d0>)
 800979a:	4313      	orrs	r3, r2
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80097a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d005      	beq.n	80097b2 <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	699b      	ldr	r3, [r3, #24]
 80097aa:	f043 0208 	orr.w	r2, r3, #8
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d105      	bne.n	80097c4 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699a      	ldr	r2, [r3, #24]
 80097bc:	4b08      	ldr	r3, [pc, #32]	; (80097e0 <USB_DevInit+0x2d4>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097d0:	b004      	add	sp, #16
 80097d2:	4770      	bx	lr
 80097d4:	00800100 	.word	0x00800100
 80097d8:	00010003 	.word	0x00010003
 80097dc:	803c3800 	.word	0x803c3800
 80097e0:	40000004 	.word	0x40000004

080097e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	019b      	lsls	r3, r3, #6
 80097f6:	f043 0220 	orr.w	r2, r3, #32
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4a09      	ldr	r2, [pc, #36]	; (800982c <USB_FlushTxFifo+0x48>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d901      	bls.n	8009810 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	e006      	b.n	800981e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0320 	and.w	r3, r3, #32
 8009818:	2b20      	cmp	r3, #32
 800981a:	d0f0      	beq.n	80097fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	00030d40 	.word	0x00030d40

08009830 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2210      	movs	r2, #16
 8009840:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4a09      	ldr	r2, [pc, #36]	; (8009870 <USB_FlushRxFifo+0x40>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d901      	bls.n	8009854 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009850:	2303      	movs	r3, #3
 8009852:	e006      	b.n	8009862 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f003 0310 	and.w	r3, r3, #16
 800985c:	2b10      	cmp	r3, #16
 800985e:	d0f0      	beq.n	8009842 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
 800986e:	bf00      	nop
 8009870:	00030d40 	.word	0x00030d40

08009874 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	68f9      	ldr	r1, [r7, #12]
 8009890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009894:	4313      	orrs	r3, r2
 8009896:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr

080098a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098c0:	f043 0302 	orr.w	r3, r3, #2
 80098c4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80098c6:	2003      	movs	r0, #3
 80098c8:	f7f8 f998 	bl	8001bfc <HAL_Delay>

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	3301      	adds	r3, #1
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a13      	ldr	r2, [pc, #76]	; (800993c <USB_CoreReset+0x64>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d901      	bls.n	80098f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e01b      	b.n	800992e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	daf2      	bge.n	80098e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f043 0201 	orr.w	r2, r3, #1
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3301      	adds	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	4a09      	ldr	r2, [pc, #36]	; (800993c <USB_CoreReset+0x64>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d901      	bls.n	8009920 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e006      	b.n	800992e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	2b01      	cmp	r3, #1
 800992a:	d0f0      	beq.n	800990e <USB_CoreReset+0x36>

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	00030d40 	.word	0x00030d40

08009940 <__libc_init_array>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	4e0d      	ldr	r6, [pc, #52]	; (8009978 <__libc_init_array+0x38>)
 8009944:	4c0d      	ldr	r4, [pc, #52]	; (800997c <__libc_init_array+0x3c>)
 8009946:	1ba4      	subs	r4, r4, r6
 8009948:	10a4      	asrs	r4, r4, #2
 800994a:	2500      	movs	r5, #0
 800994c:	42a5      	cmp	r5, r4
 800994e:	d109      	bne.n	8009964 <__libc_init_array+0x24>
 8009950:	4e0b      	ldr	r6, [pc, #44]	; (8009980 <__libc_init_array+0x40>)
 8009952:	4c0c      	ldr	r4, [pc, #48]	; (8009984 <__libc_init_array+0x44>)
 8009954:	f000 f820 	bl	8009998 <_init>
 8009958:	1ba4      	subs	r4, r4, r6
 800995a:	10a4      	asrs	r4, r4, #2
 800995c:	2500      	movs	r5, #0
 800995e:	42a5      	cmp	r5, r4
 8009960:	d105      	bne.n	800996e <__libc_init_array+0x2e>
 8009962:	bd70      	pop	{r4, r5, r6, pc}
 8009964:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009968:	4798      	blx	r3
 800996a:	3501      	adds	r5, #1
 800996c:	e7ee      	b.n	800994c <__libc_init_array+0xc>
 800996e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009972:	4798      	blx	r3
 8009974:	3501      	adds	r5, #1
 8009976:	e7f2      	b.n	800995e <__libc_init_array+0x1e>
 8009978:	080099d8 	.word	0x080099d8
 800997c:	080099d8 	.word	0x080099d8
 8009980:	080099d8 	.word	0x080099d8
 8009984:	080099dc 	.word	0x080099dc

08009988 <memset>:
 8009988:	4402      	add	r2, r0
 800998a:	4603      	mov	r3, r0
 800998c:	4293      	cmp	r3, r2
 800998e:	d100      	bne.n	8009992 <memset+0xa>
 8009990:	4770      	bx	lr
 8009992:	f803 1b01 	strb.w	r1, [r3], #1
 8009996:	e7f9      	b.n	800998c <memset+0x4>

08009998 <_init>:
 8009998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999a:	bf00      	nop
 800999c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800999e:	bc08      	pop	{r3}
 80099a0:	469e      	mov	lr, r3
 80099a2:	4770      	bx	lr

080099a4 <_fini>:
 80099a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a6:	bf00      	nop
 80099a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099aa:	bc08      	pop	{r3}
 80099ac:	469e      	mov	lr, r3
 80099ae:	4770      	bx	lr

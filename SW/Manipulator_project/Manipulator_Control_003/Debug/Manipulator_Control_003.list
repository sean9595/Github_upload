
Manipulator_Control_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b5c  08009b5c  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b5c  08009b5c  00019b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b64  08009b64  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b64  08009b64  00019b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b68  08009b68  00019b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08009b6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  08009b80  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  08009be0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000e84  240000d4  08009c40  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000f58  08009c40  00020f58  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ae6f  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000042f3  00000000  00000000  0004af71  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001638  00000000  00000000  0004f268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001490  00000000  00000000  000508a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038f30  00000000  00000000  00051d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00016207  00000000  00000000  0008ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001657ee  00000000  00000000  000a0e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00206655  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005d68  00000000  00000000  002066d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009b24 	.word	0x08009b24

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	08009b24 	.word	0x08009b24

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_ETH_Init+0x90>)
 80005de:	4a23      	ldr	r2, [pc, #140]	; (800066c <MX_ETH_Init+0x94>)
 80005e0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <MX_ETH_Init+0x90>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80005ea:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x90>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <MX_ETH_Init+0x90>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	3302      	adds	r3, #2
 80005fa:	22e1      	movs	r2, #225	; 0xe1
 80005fc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <MX_ETH_Init+0x90>)
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	3303      	adds	r3, #3
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000608:	4b17      	ldr	r3, [pc, #92]	; (8000668 <MX_ETH_Init+0x90>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	3304      	adds	r3, #4
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x90>)
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	3305      	adds	r3, #5
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_ETH_Init+0x90>)
 800061e:	2201      	movs	r2, #1
 8000620:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x90>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_ETH_Init+0x98>)
 8000626:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_ETH_Init+0x90>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_ETH_Init+0x9c>)
 800062c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x90>)
 8000630:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000634:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000636:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x90>)
 8000638:	f001 fcf4 	bl	8002024 <HAL_ETH_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 fa6f 	bl	8000b24 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000646:	2234      	movs	r2, #52	; 0x34
 8000648:	2100      	movs	r1, #0
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <MX_ETH_Init+0xa0>)
 800064c:	f009 fa62 	bl	8009b14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0xa0>)
 8000652:	2221      	movs	r2, #33	; 0x21
 8000654:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_ETH_Init+0xa0>)
 8000658:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800065c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_ETH_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	240000f0 	.word	0x240000f0
 800066c:	40028000 	.word	0x40028000
 8000670:	24000074 	.word	0x24000074
 8000674:	24000014 	.word	0x24000014
 8000678:	24000160 	.word	0x24000160

0800067c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08e      	sub	sp, #56	; 0x38
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <HAL_ETH_MspInit+0x184>)
 800069a:	4293      	cmp	r3, r2
 800069c:	f040 80ab 	bne.w	80007f6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006a6:	4a57      	ldr	r2, [pc, #348]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006b0:	4b54      	ldr	r3, [pc, #336]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ba:	623b      	str	r3, [r7, #32]
 80006bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006be:	4b51      	ldr	r3, [pc, #324]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c4:	4a4f      	ldr	r2, [pc, #316]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ce:	4b4d      	ldr	r3, [pc, #308]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80006dc:	4b49      	ldr	r3, [pc, #292]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e2:	4a48      	ldr	r2, [pc, #288]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006ec:	4b45      	ldr	r3, [pc, #276]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	61bb      	str	r3, [r7, #24]
 80006f8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <HAL_ETH_MspInit+0x188>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a39      	ldr	r2, [pc, #228]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a31      	ldr	r2, [pc, #196]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <HAL_ETH_MspInit+0x188>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_ETH_MspInit+0x188>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000772:	2332      	movs	r3, #50	; 0x32
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4619      	mov	r1, r3
 800078c:	481e      	ldr	r0, [pc, #120]	; (8000808 <HAL_ETH_MspInit+0x18c>)
 800078e:	f002 f85f 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000792:	2386      	movs	r3, #134	; 0x86
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a2:	230b      	movs	r3, #11
 80007a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <HAL_ETH_MspInit+0x190>)
 80007ae:	f002 f84f 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c4:	230b      	movs	r3, #11
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <HAL_ETH_MspInit+0x194>)
 80007d0:	f002 f83e 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007e6:	230b      	movs	r3, #11
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4808      	ldr	r0, [pc, #32]	; (8000814 <HAL_ETH_MspInit+0x198>)
 80007f2:	f002 f82d 	bl	8002850 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007f6:	bf00      	nop
 80007f8:	3738      	adds	r7, #56	; 0x38
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40028000 	.word	0x40028000
 8000804:	58024400 	.word	0x58024400
 8000808:	58020800 	.word	0x58020800
 800080c:	58020000 	.word	0x58020000
 8000810:	58020400 	.word	0x58020400
 8000814:	58021800 	.word	0x58021800

08000818 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x154>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <MX_GPIO_Init+0x154>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <MX_GPIO_Init+0x154>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000844:	f003 0304 	and.w	r3, r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084c:	4b47      	ldr	r3, [pc, #284]	; (800096c <MX_GPIO_Init+0x154>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <MX_GPIO_Init+0x154>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x154>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x154>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a3e      	ldr	r2, [pc, #248]	; (800096c <MX_GPIO_Init+0x154>)
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3c      	ldr	r3, [pc, #240]	; (800096c <MX_GPIO_Init+0x154>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_GPIO_Init+0x154>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a37      	ldr	r2, [pc, #220]	; (800096c <MX_GPIO_Init+0x154>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x154>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x154>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a2f      	ldr	r2, [pc, #188]	; (800096c <MX_GPIO_Init+0x154>)
 80008ae:	f043 0308 	orr.w	r3, r3, #8
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_GPIO_Init+0x154>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0308 	and.w	r3, r3, #8
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_GPIO_Init+0x154>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <MX_GPIO_Init+0x154>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_GPIO_Init+0x154>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80008e8:	4821      	ldr	r0, [pc, #132]	; (8000970 <MX_GPIO_Init+0x158>)
 80008ea:	f002 f961 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	4820      	ldr	r0, [pc, #128]	; (8000974 <MX_GPIO_Init+0x15c>)
 80008f4:	f002 f95c 	bl	8002bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x160>)
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481b      	ldr	r0, [pc, #108]	; (800097c <MX_GPIO_Init+0x164>)
 800090e:	f001 ff9f 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000912:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_GPIO_Init+0x158>)
 800092c:	f001 ff90 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000930:	2340      	movs	r3, #64	; 0x40
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000948:	f001 ff82 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x15c>)
 8000960:	f001 ff76 	bl	8002850 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	58024400 	.word	0x58024400
 8000970:	58020400 	.word	0x58020400
 8000974:	58021800 	.word	0x58021800
 8000978:	11110000 	.word	0x11110000
 800097c:	58020800 	.word	0x58020800

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 ffd8 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f814 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f7ff ff44 	bl	8000818 <MX_GPIO_Init>
  MX_ETH_Init();
 8000990:	f7ff fe22 	bl	80005d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000994:	f000 fe72 	bl	800167c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000998:	f000 ff1a 	bl	80017d0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800099c:	f000 fc6a 	bl	8001274 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fcf6 	bl	8001390 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  uart_serial_rx_buffer_init(); //UART 수신 링버퍼 초기화
 80009a4:	f000 f8c6 	bl	8000b34 <uart_serial_rx_buffer_init>
  uart_serial_Init(); //UART 수신 대기 상태로 설정.
 80009a8:	f000 f912 	bl	8000bd0 <uart_serial_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uart_serial_rx_monitor(); //UART 수신 처리 함수 호출. 이와 같이 함수를 이용하면 인터럽트를 루틴 밖에서 수신 처리를 하므로 다른 우선순위가 높은 인터럽트에 의해 수신 처리르 못하게 될 가능성을 없앨 수 있다.
 80009ac:	f000 f95a 	bl	8000c64 <uart_serial_rx_monitor>
 80009b0:	e7fc      	b.n	80009ac <main+0x2c>
	...

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0cc      	sub	sp, #304	; 0x130
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80009be:	224c      	movs	r2, #76	; 0x4c
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f009 f8a6 	bl	8009b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f009 f89f 	bl	8009b14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4618      	mov	r0, r3
 80009dc:	23bc      	movs	r3, #188	; 0xbc
 80009de:	461a      	mov	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f009 f897 	bl	8009b14 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009e6:	2002      	movs	r0, #2
 80009e8:	f002 fa44 	bl	8002e74 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	4b49      	ldr	r3, [pc, #292]	; (8000b18 <SystemClock_Config+0x164>)
 80009f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f6:	4a48      	ldr	r2, [pc, #288]	; (8000b18 <SystemClock_Config+0x164>)
 80009f8:	f023 0301 	bic.w	r3, r3, #1
 80009fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009fe:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <SystemClock_Config+0x164>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	f003 0201 	and.w	r2, r3, #1
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	4b44      	ldr	r3, [pc, #272]	; (8000b1c <SystemClock_Config+0x168>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a43      	ldr	r2, [pc, #268]	; (8000b1c <SystemClock_Config+0x168>)
 8000a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b41      	ldr	r3, [pc, #260]	; (8000b1c <SystemClock_Config+0x168>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a26:	bf00      	nop
 8000a28:	4b3c      	ldr	r3, [pc, #240]	; (8000b1c <SystemClock_Config+0x168>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	d1f8      	bne.n	8000a28 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a36:	2301      	movs	r3, #1
 8000a38:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a3c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a44:	2302      	movs	r3, #2
 8000a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a56:	2318      	movs	r3, #24
 8000a58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fa3d 	bl	8002f04 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000a90:	f000 f848 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	233f      	movs	r3, #63	; 0x3f
 8000a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ac4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f002 fdd2 	bl	8003674 <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x126>
  {
    Error_Handler();
 8000ad6:	f000 f825 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <SystemClock_Config+0x16c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000aea:	f107 0308 	add.w	r3, r7, #8
 8000aee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 f918 	bl	8003d30 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8000b06:	f000 f80d 	bl	8000b24 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000b0a:	f002 f9eb 	bl	8002ee4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000b0e:	bf00      	nop
 8000b10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	58000400 	.word	0x58000400
 8000b1c:	58024800 	.word	0x58024800
 8000b20:	00040002 	.word	0x00040002

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <uart_serial_rx_buffer_init>:

/*링버퍼수신변수 선언 및 초기화*/
uart_rx_type uart_rx;

void uart_serial_rx_buffer_init()
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
	uart_rx.str_p_01 = 0;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <uart_serial_rx_buffer_init+0x30>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
	uart_rx.scn_p_01 = 0;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <uart_serial_rx_buffer_init+0x30>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
	uart_rx.str_p_02 = 0;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <uart_serial_rx_buffer_init+0x30>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
	uart_rx.scn_p_02 = 0;
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <uart_serial_rx_buffer_init+0x30>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f8a3 280a 	strh.w	r2, [r3, #2058]	; 0x80a
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	24000194 	.word	0x24000194

08000b68 <uart_serial_packet_Receive>:
/* Ring buffer CODE END */



void uart_serial_packet_Receive(UART_HandleTypeDef* uartHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
if(uartHandle->Instance == USART3)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <uart_serial_packet_Receive+0x58>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d11e      	bne.n	8000bb8 <uart_serial_packet_Receive+0x50>
    {
	uart_rx.buffer_01[uart_rx.str_p_01++] = uart_rx.temp;
 8000b7a:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <uart_serial_packet_Receive+0x5c>)
 8000b7c:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	1c5a      	adds	r2, r3, #1
 8000b84:	b291      	uxth	r1, r2
 8000b86:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <uart_serial_packet_Receive+0x5c>)
 8000b88:	f8a2 1804 	strh.w	r1, [r2, #2052]	; 0x804
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <uart_serial_packet_Receive+0x5c>)
 8000b90:	f893 1800 	ldrb.w	r1, [r3, #2048]	; 0x800
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <uart_serial_packet_Receive+0x5c>)
 8000b96:	5499      	strb	r1, [r3, r2]

	    if (uart_rx.str_p_01 >= 1024)
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <uart_serial_packet_Receive+0x5c>)
 8000b9a:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba4:	d303      	bcc.n	8000bae <uart_serial_packet_Receive+0x46>
	    {
	    	uart_rx.str_p_01 = 0;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <uart_serial_packet_Receive+0x5c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f8a3 2804 	strh.w	r2, [r3, #2052]	; 0x804
	    }
	    HAL_UART_Receive_IT(&huart3, &uart_rx.temp, 1);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4905      	ldr	r1, [pc, #20]	; (8000bc8 <uart_serial_packet_Receive+0x60>)
 8000bb2:	4806      	ldr	r0, [pc, #24]	; (8000bcc <uart_serial_packet_Receive+0x64>)
 8000bb4:	f005 fc3a 	bl	800642c <HAL_UART_Receive_IT>
    }
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40004800 	.word	0x40004800
 8000bc4:	24000194 	.word	0x24000194
 8000bc8:	24000994 	.word	0x24000994
 8000bcc:	24000ac0 	.word	0x24000ac0

08000bd0 <uart_serial_Init>:

void uart_serial_Init()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &uart_rx.temp, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4903      	ldr	r1, [pc, #12]	; (8000be4 <uart_serial_Init+0x14>)
 8000bd8:	4803      	ldr	r0, [pc, #12]	; (8000be8 <uart_serial_Init+0x18>)
 8000bda:	f005 fc27 	bl	800642c <HAL_UART_Receive_IT>
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	24000994 	.word	0x24000994
 8000be8:	24000ac0 	.word	0x24000ac0

08000bec <uart_serial_rx_check_01>:

/**/
uint8_t uart_serial_rx_check_01()
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
	if(uart_rx.scn_p_01 >= uart_rx.str_p_01 -1)
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000bf2:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000bfc:	f8b3 3804 	ldrh.w	r3, [r3, #2052]	; 0x804
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	3b01      	subs	r3, #1
 8000c04:	429a      	cmp	r2, r3
 8000c06:	db01      	blt.n	8000c0c <uart_serial_rx_check_01+0x20>
	{
		return 0; //모니터링을 하지 않게 한다.
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e024      	b.n	8000c56 <uart_serial_rx_check_01+0x6a>
	}

	//uart_rx.pre_scnd = uart_rx.buffer_01[uart_rx.scn_p_01-1]; //이전의 데이터를 처리하기 위함

	uart_rx.rxd_01 = uart_rx.buffer_01[uart_rx.scn_p_01++]; //처리 이후에 포인터의 값이 1 상승(postfix).
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c0e:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	b291      	uxth	r1, r2
 8000c18:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c1a:	f8a2 1806 	strh.w	r1, [r2, #2054]	; 0x806
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c22:	5c9a      	ldrb	r2, [r3, r2]
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c26:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801

	uart_rx.nxt = uart_rx.buffer_01[uart_rx.scn_p_01]; //이후의 데이터
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c2c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c36:	5c9a      	ldrb	r2, [r3, r2]
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c3a:	f883 2803 	strb.w	r2, [r3, #2051]	; 0x803

	if(uart_rx.scn_p_01 >= UART_RX_BUFF_SIZE_01)
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c40:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c4a:	d303      	bcc.n	8000c54 <uart_serial_rx_check_01+0x68>
	{
		uart_rx.scn_p_01 = 0;
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <uart_serial_rx_check_01+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
	}

	return 1; //모니터링을 하게 한다.
 8000c54:	2301      	movs	r3, #1
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	24000194 	.word	0x24000194

08000c64 <uart_serial_rx_monitor>:

void uart_serial_rx_monitor() //수신받은 데이터를 가공하는 작업을 해주는 함수
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	while (uart_serial_rx_check_01() != 0)
 8000c68:	e044      	b.n	8000cf4 <uart_serial_rx_monitor+0x90>
	{
		if(uart_rx.rxd_01 == DLE)
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000c6c:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <uart_serial_rx_monitor+0xa4>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d13a      	bne.n	8000cf0 <uart_serial_rx_monitor+0x8c>
		{
         // break; //이렇게 하면 infinite loop를 탈출하게 되므로 안된다.
			if(uart_rx.nxt == STX)
 8000c7a:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000c7c:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <uart_serial_rx_monitor+0xa8>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d109      	bne.n	8000c9e <uart_serial_rx_monitor+0x3a>
			{
				//uart_serial_rx_save_Init();
				uart_rx.scn_p_01 += 1;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000c8c:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	3301      	adds	r3, #1
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000c98:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 8000c9c:	e02a      	b.n	8000cf4 <uart_serial_rx_monitor+0x90>
			}
			else if(uart_rx.nxt == ETX)
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000ca0:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b1a      	ldr	r3, [pc, #104]	; (8000d10 <uart_serial_rx_monitor+0xac>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d109      	bne.n	8000cc2 <uart_serial_rx_monitor+0x5e>
			{
				//uart_serial_rx_save_Term();
				uart_rx.scn_p_01 += 1;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000cb0:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000cbc:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 8000cc0:	e018      	b.n	8000cf4 <uart_serial_rx_monitor+0x90>

			}
			else if(uart_rx.nxt == DLE)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000cc4:	f893 3803 	ldrb.w	r3, [r3, #2051]	; 0x803
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <uart_serial_rx_monitor+0xa4>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d10b      	bne.n	8000cea <uart_serial_rx_monitor+0x86>
			{
				uart_serial_rx_save();
 8000cd2:	f000 f81f 	bl	8000d14 <uart_serial_rx_save>
				uart_rx.scn_p_01 += 1;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000cd8:	f8b3 3806 	ldrh.w	r3, [r3, #2054]	; 0x806
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <uart_serial_rx_monitor+0xa0>)
 8000ce4:	f8a3 2806 	strh.w	r2, [r3, #2054]	; 0x806
 8000ce8:	e004      	b.n	8000cf4 <uart_serial_rx_monitor+0x90>
			}
			else
			{
				uart_serial_rx_save(); //데이터 값이므로
 8000cea:	f000 f813 	bl	8000d14 <uart_serial_rx_save>
 8000cee:	e001      	b.n	8000cf4 <uart_serial_rx_monitor+0x90>
			}
		}

		else
		{
			uart_serial_rx_save();
 8000cf0:	f000 f810 	bl	8000d14 <uart_serial_rx_save>
	while (uart_serial_rx_check_01() != 0)
 8000cf4:	f7ff ff7a 	bl	8000bec <uart_serial_rx_check_01>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1b5      	bne.n	8000c6a <uart_serial_rx_monitor+0x6>


	}
	//uart_serial_rx_process(); //위에서 가공한 데이터를 처리

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24000194 	.word	0x24000194
 8000d08:	24000000 	.word	0x24000000
 8000d0c:	24000001 	.word	0x24000001
 8000d10:	24000002 	.word	0x24000002

08000d14 <uart_serial_rx_save>:

void uart_serial_rx_save()
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
	uart_rx.buffer_02[uart_rx.str_p_02++] = uart_rx.rxd_01;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <uart_serial_rx_save+0x34>)
 8000d1a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	b291      	uxth	r1, r2
 8000d24:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <uart_serial_rx_save+0x34>)
 8000d26:	f8a2 1808 	strh.w	r1, [r2, #2056]	; 0x808
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <uart_serial_rx_save+0x34>)
 8000d2e:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <uart_serial_rx_save+0x34>)
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	24000194 	.word	0x24000194

08000d4c <servo_update>:
	servo[_servo_num].delta = 0;
	servo[_servo_num].run = 0;
}

void servo_update()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	int pulse = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
	int i = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]

	for (i = 0; i < 3; i++)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	e0d2      	b.n	8000f06 <servo_update+0x1ba>
	{
		if (servo[i].run == 1 && servo[i].delta != 0)
 8000d60:	4a6d      	ldr	r2, [pc, #436]	; (8000f18 <servo_update+0x1cc>)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2134      	movs	r1, #52	; 0x34
 8000d66:	fb01 f303 	mul.w	r3, r1, r3
 8000d6a:	4413      	add	r3, r2
 8000d6c:	332c      	adds	r3, #44	; 0x2c
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	f040 80b3 	bne.w	8000edc <servo_update+0x190>
 8000d76:	4a68      	ldr	r2, [pc, #416]	; (8000f18 <servo_update+0x1cc>)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2134      	movs	r1, #52	; 0x34
 8000d7c:	fb01 f303 	mul.w	r3, r1, r3
 8000d80:	4413      	add	r3, r2
 8000d82:	3324      	adds	r3, #36	; 0x24
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 80a8 	beq.w	8000edc <servo_update+0x190>
		{
			servo_speed_update(i);
 8000d8c:	6838      	ldr	r0, [r7, #0]
 8000d8e:	f000 f8c7 	bl	8000f20 <servo_speed_update>

			if (servo[i].delta > servo[i].cur_speed)
 8000d92:	4a61      	ldr	r2, [pc, #388]	; (8000f18 <servo_update+0x1cc>)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2134      	movs	r1, #52	; 0x34
 8000d98:	fb01 f303 	mul.w	r3, r1, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3324      	adds	r3, #36	; 0x24
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	495d      	ldr	r1, [pc, #372]	; (8000f18 <servo_update+0x1cc>)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2034      	movs	r0, #52	; 0x34
 8000da8:	fb00 f303 	mul.w	r3, r0, r3
 8000dac:	440b      	add	r3, r1
 8000dae:	3308      	adds	r3, #8
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dd13      	ble.n	8000dde <servo_update+0x92>
			{
				pulse = servo[i].cur_speed * servo[i].direction;
 8000db6:	4a58      	ldr	r2, [pc, #352]	; (8000f18 <servo_update+0x1cc>)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	2134      	movs	r1, #52	; 0x34
 8000dbc:	fb01 f303 	mul.w	r3, r1, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4954      	ldr	r1, [pc, #336]	; (8000f18 <servo_update+0x1cc>)
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	2034      	movs	r0, #52	; 0x34
 8000dcc:	fb00 f202 	mul.w	r2, r0, r2
 8000dd0:	440a      	add	r2, r1
 8000dd2:	3228      	adds	r2, #40	; 0x28
 8000dd4:	6812      	ldr	r2, [r2, #0]
 8000dd6:	fb02 f303 	mul.w	r3, r2, r3
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	e012      	b.n	8000e04 <servo_update+0xb8>
			}
			else
			{
				pulse = servo[i].delta * servo[i].direction;
 8000dde:	4a4e      	ldr	r2, [pc, #312]	; (8000f18 <servo_update+0x1cc>)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	2134      	movs	r1, #52	; 0x34
 8000de4:	fb01 f303 	mul.w	r3, r1, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	3324      	adds	r3, #36	; 0x24
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	494a      	ldr	r1, [pc, #296]	; (8000f18 <servo_update+0x1cc>)
 8000df0:	683a      	ldr	r2, [r7, #0]
 8000df2:	2034      	movs	r0, #52	; 0x34
 8000df4:	fb00 f202 	mul.w	r2, r0, r2
 8000df8:	440a      	add	r2, r1
 8000dfa:	3228      	adds	r2, #40	; 0x28
 8000dfc:	6812      	ldr	r2, [r2, #0]
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	607b      	str	r3, [r7, #4]
			}

			servo[i].cur_angle += pulse;
 8000e04:	4a44      	ldr	r2, [pc, #272]	; (8000f18 <servo_update+0x1cc>)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2134      	movs	r1, #52	; 0x34
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	441a      	add	r2, r3
 8000e16:	4940      	ldr	r1, [pc, #256]	; (8000f18 <servo_update+0x1cc>)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2034      	movs	r0, #52	; 0x34
 8000e1c:	fb00 f303 	mul.w	r3, r0, r3
 8000e20:	440b      	add	r3, r1
 8000e22:	601a      	str	r2, [r3, #0]

			switch(i)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d010      	beq.n	8000e4c <servo_update+0x100>
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d01b      	beq.n	8000e66 <servo_update+0x11a>
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d126      	bne.n	8000e80 <servo_update+0x134>
			{
			case 0:
				tim_reg->CCR1 = PULSE_L + servo[i].cur_angle;
 8000e32:	4a39      	ldr	r2, [pc, #228]	; (8000f18 <servo_update+0x1cc>)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	2134      	movs	r1, #52	; 0x34
 8000e38:	fb01 f303 	mul.w	r3, r1, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000e44:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <servo_update+0x1d0>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8000e4a:	e019      	b.n	8000e80 <servo_update+0x134>
			case 1:
				tim_reg->CCR2 = PULSE_L + servo[i].cur_angle;
 8000e4c:	4a32      	ldr	r2, [pc, #200]	; (8000f18 <servo_update+0x1cc>)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	2134      	movs	r1, #52	; 0x34
 8000e52:	fb01 f303 	mul.w	r3, r1, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000e5e:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <servo_update+0x1d0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	639a      	str	r2, [r3, #56]	; 0x38
				break;
 8000e64:	e00c      	b.n	8000e80 <servo_update+0x134>
			case 2:
				tim_reg->CCR3 = PULSE_L + servo[i].cur_angle;
 8000e66:	4a2c      	ldr	r2, [pc, #176]	; (8000f18 <servo_update+0x1cc>)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2134      	movs	r1, #52	; 0x34
 8000e6c:	fb01 f303 	mul.w	r3, r1, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f203 2226 	addw	r2, r3, #550	; 0x226
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <servo_update+0x1d0>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	63da      	str	r2, [r3, #60]	; 0x3c
				break;
 8000e7e:	bf00      	nop
			}

			servo[i].delta -= pulse * servo[i].direction;
 8000e80:	4a25      	ldr	r2, [pc, #148]	; (8000f18 <servo_update+0x1cc>)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2134      	movs	r1, #52	; 0x34
 8000e86:	fb01 f303 	mul.w	r3, r1, r3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3324      	adds	r3, #36	; 0x24
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4921      	ldr	r1, [pc, #132]	; (8000f18 <servo_update+0x1cc>)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	2034      	movs	r0, #52	; 0x34
 8000e96:	fb00 f303 	mul.w	r3, r0, r3
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3328      	adds	r3, #40	; 0x28
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	fb01 f303 	mul.w	r3, r1, r3
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	491b      	ldr	r1, [pc, #108]	; (8000f18 <servo_update+0x1cc>)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2034      	movs	r0, #52	; 0x34
 8000eae:	fb00 f303 	mul.w	r3, r0, r3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3324      	adds	r3, #36	; 0x24
 8000eb6:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps += 1;
 8000eb8:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <servo_update+0x1cc>)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2134      	movs	r1, #52	; 0x34
 8000ebe:	fb01 f303 	mul.w	r3, r1, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	331c      	adds	r3, #28
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	4913      	ldr	r1, [pc, #76]	; (8000f18 <servo_update+0x1cc>)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2034      	movs	r0, #52	; 0x34
 8000ed0:	fb00 f303 	mul.w	r3, r0, r3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	331c      	adds	r3, #28
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e011      	b.n	8000f00 <servo_update+0x1b4>
		}
		else
		{
			servo[i].run = 0;
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <servo_update+0x1cc>)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2134      	movs	r1, #52	; 0x34
 8000ee2:	fb01 f303 	mul.w	r3, r1, r3
 8000ee6:	4413      	add	r3, r2
 8000ee8:	332c      	adds	r3, #44	; 0x2c
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
			servo[i].cur_steps = 0;
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <servo_update+0x1cc>)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2134      	movs	r1, #52	; 0x34
 8000ef4:	fb01 f303 	mul.w	r3, r1, r3
 8000ef8:	4413      	add	r3, r2
 8000efa:	331c      	adds	r3, #28
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 3; i++)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	f77f af29 	ble.w	8000d60 <servo_update+0x14>
		}
	}
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	240009a4 	.word	0x240009a4
 8000f1c:	240009a0 	.word	0x240009a0

08000f20 <servo_speed_update>:

void servo_speed_update(int _servo_num)
{
 8000f20:	b490      	push	{r4, r7}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	int i = _servo_num;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]

	if ((servo[i].cur_steps > servo[i].acc_steps - 1) && (servo[i].cur_steps <= servo[i].acc_steps + servo[i].fixed_speed_steps - 1))
 8000f2c:	4a6c      	ldr	r2, [pc, #432]	; (80010e0 <servo_speed_update+0x1c0>)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2134      	movs	r1, #52	; 0x34
 8000f32:	fb01 f303 	mul.w	r3, r1, r3
 8000f36:	4413      	add	r3, r2
 8000f38:	331c      	adds	r3, #28
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4968      	ldr	r1, [pc, #416]	; (80010e0 <servo_speed_update+0x1c0>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2034      	movs	r0, #52	; 0x34
 8000f42:	fb00 f303 	mul.w	r3, r0, r3
 8000f46:	440b      	add	r3, r1
 8000f48:	3314      	adds	r3, #20
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dd2c      	ble.n	8000fac <servo_speed_update+0x8c>
 8000f52:	4a63      	ldr	r2, [pc, #396]	; (80010e0 <servo_speed_update+0x1c0>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2134      	movs	r1, #52	; 0x34
 8000f58:	fb01 f303 	mul.w	r3, r1, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	331c      	adds	r3, #28
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	495f      	ldr	r1, [pc, #380]	; (80010e0 <servo_speed_update+0x1c0>)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2034      	movs	r0, #52	; 0x34
 8000f68:	fb00 f303 	mul.w	r3, r0, r3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	3314      	adds	r3, #20
 8000f70:	6819      	ldr	r1, [r3, #0]
 8000f72:	485b      	ldr	r0, [pc, #364]	; (80010e0 <servo_speed_update+0x1c0>)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2434      	movs	r4, #52	; 0x34
 8000f78:	fb04 f303 	mul.w	r3, r4, r3
 8000f7c:	4403      	add	r3, r0
 8000f7e:	3318      	adds	r3, #24
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	440b      	add	r3, r1
 8000f84:	3b01      	subs	r3, #1
 8000f86:	429a      	cmp	r2, r3
 8000f88:	dc10      	bgt.n	8000fac <servo_speed_update+0x8c>
	{
		servo[i].cur_speed = servo[i].dst_speed;
 8000f8a:	4a55      	ldr	r2, [pc, #340]	; (80010e0 <servo_speed_update+0x1c0>)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2134      	movs	r1, #52	; 0x34
 8000f90:	fb01 f303 	mul.w	r3, r1, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	330c      	adds	r3, #12
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4951      	ldr	r1, [pc, #324]	; (80010e0 <servo_speed_update+0x1c0>)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2034      	movs	r0, #52	; 0x34
 8000fa0:	fb00 f303 	mul.w	r3, r0, r3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e093      	b.n	80010d4 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > 0) && (servo[i].cur_steps <= servo[i].acc_steps - 1))
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <servo_speed_update+0x1c0>)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2134      	movs	r1, #52	; 0x34
 8000fb2:	fb01 f303 	mul.w	r3, r1, r3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	331c      	adds	r3, #28
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	dd2c      	ble.n	800101a <servo_speed_update+0xfa>
 8000fc0:	4a47      	ldr	r2, [pc, #284]	; (80010e0 <servo_speed_update+0x1c0>)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2134      	movs	r1, #52	; 0x34
 8000fc6:	fb01 f303 	mul.w	r3, r1, r3
 8000fca:	4413      	add	r3, r2
 8000fcc:	331c      	adds	r3, #28
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4943      	ldr	r1, [pc, #268]	; (80010e0 <servo_speed_update+0x1c0>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2034      	movs	r0, #52	; 0x34
 8000fd6:	fb00 f303 	mul.w	r3, r0, r3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3314      	adds	r3, #20
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dc19      	bgt.n	800101a <servo_speed_update+0xfa>
	{
		servo[i].cur_speed += servo[i].acc;
 8000fe6:	4a3e      	ldr	r2, [pc, #248]	; (80010e0 <servo_speed_update+0x1c0>)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2134      	movs	r1, #52	; 0x34
 8000fec:	fb01 f303 	mul.w	r3, r1, r3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	493a      	ldr	r1, [pc, #232]	; (80010e0 <servo_speed_update+0x1c0>)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2034      	movs	r0, #52	; 0x34
 8000ffc:	fb00 f303 	mul.w	r3, r0, r3
 8001000:	440b      	add	r3, r1
 8001002:	3320      	adds	r3, #32
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	441a      	add	r2, r3
 8001008:	4935      	ldr	r1, [pc, #212]	; (80010e0 <servo_speed_update+0x1c0>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2034      	movs	r0, #52	; 0x34
 800100e:	fb00 f303 	mul.w	r3, r0, r3
 8001012:	440b      	add	r3, r1
 8001014:	3308      	adds	r3, #8
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	e05c      	b.n	80010d4 <servo_speed_update+0x1b4>
	}
	else if ((servo[i].cur_steps > servo[i].acc_steps + servo[i].fixed_speed_steps - 1) && (servo[i].cur_steps <= servo[i].total_steps - 1))
 800101a:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <servo_speed_update+0x1c0>)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2134      	movs	r1, #52	; 0x34
 8001020:	fb01 f303 	mul.w	r3, r1, r3
 8001024:	4413      	add	r3, r2
 8001026:	331c      	adds	r3, #28
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <servo_speed_update+0x1c0>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2034      	movs	r0, #52	; 0x34
 8001030:	fb00 f303 	mul.w	r3, r0, r3
 8001034:	440b      	add	r3, r1
 8001036:	3314      	adds	r3, #20
 8001038:	6819      	ldr	r1, [r3, #0]
 800103a:	4829      	ldr	r0, [pc, #164]	; (80010e0 <servo_speed_update+0x1c0>)
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2434      	movs	r4, #52	; 0x34
 8001040:	fb04 f303 	mul.w	r3, r4, r3
 8001044:	4403      	add	r3, r0
 8001046:	3318      	adds	r3, #24
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	440b      	add	r3, r1
 800104c:	3b01      	subs	r3, #1
 800104e:	429a      	cmp	r2, r3
 8001050:	dd2c      	ble.n	80010ac <servo_speed_update+0x18c>
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <servo_speed_update+0x1c0>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2134      	movs	r1, #52	; 0x34
 8001058:	fb01 f303 	mul.w	r3, r1, r3
 800105c:	4413      	add	r3, r2
 800105e:	331c      	adds	r3, #28
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	491f      	ldr	r1, [pc, #124]	; (80010e0 <servo_speed_update+0x1c0>)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2034      	movs	r0, #52	; 0x34
 8001068:	fb00 f303 	mul.w	r3, r0, r3
 800106c:	440b      	add	r3, r1
 800106e:	3310      	adds	r3, #16
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	429a      	cmp	r2, r3
 8001076:	dc19      	bgt.n	80010ac <servo_speed_update+0x18c>
	{
		servo[i].cur_speed -= servo[i].acc;
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <servo_speed_update+0x1c0>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2134      	movs	r1, #52	; 0x34
 800107e:	fb01 f303 	mul.w	r3, r1, r3
 8001082:	4413      	add	r3, r2
 8001084:	3308      	adds	r3, #8
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4915      	ldr	r1, [pc, #84]	; (80010e0 <servo_speed_update+0x1c0>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2034      	movs	r0, #52	; 0x34
 800108e:	fb00 f303 	mul.w	r3, r0, r3
 8001092:	440b      	add	r3, r1
 8001094:	3320      	adds	r3, #32
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	1ad2      	subs	r2, r2, r3
 800109a:	4911      	ldr	r1, [pc, #68]	; (80010e0 <servo_speed_update+0x1c0>)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2034      	movs	r0, #52	; 0x34
 80010a0:	fb00 f303 	mul.w	r3, r0, r3
 80010a4:	440b      	add	r3, r1
 80010a6:	3308      	adds	r3, #8
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	e013      	b.n	80010d4 <servo_speed_update+0x1b4>
	}
	else if (servo[i].cur_steps == 0)
 80010ac:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <servo_speed_update+0x1c0>)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2134      	movs	r1, #52	; 0x34
 80010b2:	fb01 f303 	mul.w	r3, r1, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	331c      	adds	r3, #28
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d109      	bne.n	80010d4 <servo_speed_update+0x1b4>
	{
		servo[i].cur_speed = BASE_SPEED;
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <servo_speed_update+0x1c0>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2134      	movs	r1, #52	; 0x34
 80010c6:	fb01 f303 	mul.w	r3, r1, r3
 80010ca:	4413      	add	r3, r2
 80010cc:	3308      	adds	r3, #8
 80010ce:	2205      	movs	r2, #5
 80010d0:	601a      	str	r2, [r3, #0]
	}
}
 80010d2:	e7ff      	b.n	80010d4 <servo_speed_update+0x1b4>
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc90      	pop	{r4, r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	240009a4 	.word	0x240009a4

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_MspInit+0x30>)
 80010ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f0:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_MspInit+0x30>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_MspInit+0x30>)
 80010fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	58024400 	.word	0x58024400

08001118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 fc52 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM3_IRQHandler+0x10>)
 800117a:	f004 f957 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	24000a80 	.word	0x24000a80

08001188 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <TIM4_IRQHandler+0x10>)
 800118e:	f004 f94d 	bl	800542c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	24000a40 	.word	0x24000a40

0800119c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011a0:	4802      	ldr	r0, [pc, #8]	; (80011ac <USART3_IRQHandler+0x10>)
 80011a2:	f005 fa1b 	bl	80065dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	24000ac0 	.word	0x24000ac0

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <SystemInit+0xac>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ba:	4a28      	ldr	r2, [pc, #160]	; (800125c <SystemInit+0xac>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <SystemInit+0xb0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a25      	ldr	r2, [pc, #148]	; (8001260 <SystemInit+0xb0>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <SystemInit+0xb0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <SystemInit+0xb0>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4921      	ldr	r1, [pc, #132]	; (8001260 <SystemInit+0xb0>)
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <SystemInit+0xb4>)
 80011de:	4013      	ands	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <SystemInit+0xb0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <SystemInit+0xb0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <SystemInit+0xb0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <SystemInit+0xb0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <SystemInit+0xb0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <SystemInit+0xb0>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <SystemInit+0xb0>)
 8001208:	2200      	movs	r2, #0
 800120a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <SystemInit+0xb0>)
 800120e:	2200      	movs	r2, #0
 8001210:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <SystemInit+0xb0>)
 8001214:	2200      	movs	r2, #0
 8001216:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <SystemInit+0xb0>)
 800121a:	2200      	movs	r2, #0
 800121c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <SystemInit+0xb0>)
 8001220:	2200      	movs	r2, #0
 8001222:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <SystemInit+0xb0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <SystemInit+0xb0>)
 800122a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800122e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <SystemInit+0xb0>)
 8001232:	2200      	movs	r2, #0
 8001234:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <SystemInit+0xb8>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <SystemInit+0xbc>)
 800123c:	4013      	ands	r3, r2
 800123e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001242:	d202      	bcs.n	800124a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <SystemInit+0xc0>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SystemInit+0xac>)
 800124c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001250:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	58024400 	.word	0x58024400
 8001264:	eaf6ed7f 	.word	0xeaf6ed7f
 8001268:	5c001000 	.word	0x5c001000
 800126c:	ffff0000 	.word	0xffff0000
 8001270:	51008108 	.word	0x51008108

08001274 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001288:	f107 031c 	add.w	r3, r7, #28
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001294:	463b      	mov	r3, r7
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	615a      	str	r2, [r3, #20]
 80012a4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_TIM3_Init+0x114>)
 80012a8:	4a38      	ldr	r2, [pc, #224]	; (800138c <MX_TIM3_Init+0x118>)
 80012aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_TIM3_Init+0x114>)
 80012ae:	225f      	movs	r2, #95	; 0x5f
 80012b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_TIM3_Init+0x114>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <MX_TIM3_Init+0x114>)
 80012ba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80012be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <MX_TIM3_Init+0x114>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <MX_TIM3_Init+0x114>)
 80012c8:	2280      	movs	r2, #128	; 0x80
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012cc:	482e      	ldr	r0, [pc, #184]	; (8001388 <MX_TIM3_Init+0x114>)
 80012ce:	f004 f84d 	bl	800536c <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012d8:	f7ff fc24 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	4619      	mov	r1, r3
 80012e8:	4827      	ldr	r0, [pc, #156]	; (8001388 <MX_TIM3_Init+0x114>)
 80012ea:	f004 fad7 	bl	800589c <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80012f4:	f7ff fc16 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012f8:	4823      	ldr	r0, [pc, #140]	; (8001388 <MX_TIM3_Init+0x114>)
 80012fa:	f004 f862 	bl	80053c2 <HAL_TIM_PWM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001304:	f7ff fc0e 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	4619      	mov	r1, r3
 8001316:	481c      	ldr	r0, [pc, #112]	; (8001388 <MX_TIM3_Init+0x114>)
 8001318:	f004 ffbe 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001322:	f7ff fbff 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	; 0x60
 8001328:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	4619      	mov	r1, r3
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <MX_TIM3_Init+0x114>)
 800133e:	f004 f995 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001348:	f7ff fbec 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134c:	463b      	mov	r3, r7
 800134e:	2204      	movs	r2, #4
 8001350:	4619      	mov	r1, r3
 8001352:	480d      	ldr	r0, [pc, #52]	; (8001388 <MX_TIM3_Init+0x114>)
 8001354:	f004 f98a 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800135e:	f7ff fbe1 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	2208      	movs	r2, #8
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <MX_TIM3_Init+0x114>)
 800136a:	f004 f97f 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001374:	f7ff fbd6 	bl	8000b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_TIM3_Init+0x114>)
 800137a:	f000 f8c7 	bl	800150c <HAL_TIM_MspPostInit>

}
 800137e:	bf00      	nop
 8001380:	3738      	adds	r7, #56	; 0x38
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	24000a80 	.word	0x24000a80
 800138c:	40000400 	.word	0x40000400

08001390 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08e      	sub	sp, #56	; 0x38
 8001394:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80013c2:	4b2c      	ldr	r3, [pc, #176]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013c4:	4a2c      	ldr	r2, [pc, #176]	; (8001478 <MX_TIM4_Init+0xe8>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80013d4:	4b27      	ldr	r3, [pc, #156]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e0:	4b24      	ldr	r3, [pc, #144]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013e2:	2280      	movs	r2, #128	; 0x80
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013e6:	4823      	ldr	r0, [pc, #140]	; (8001474 <MX_TIM4_Init+0xe4>)
 80013e8:	f003 ffc0 	bl	800536c <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80013f2:	f7ff fb97 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001400:	4619      	mov	r1, r3
 8001402:	481c      	ldr	r0, [pc, #112]	; (8001474 <MX_TIM4_Init+0xe4>)
 8001404:	f004 fa4a 	bl	800589c <HAL_TIM_ConfigClockSource>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800140e:	f7ff fb89 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001412:	4818      	ldr	r0, [pc, #96]	; (8001474 <MX_TIM4_Init+0xe4>)
 8001414:	f003 ffd5 	bl	80053c2 <HAL_TIM_PWM_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800141e:	f7ff fb81 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <MX_TIM4_Init+0xe4>)
 8001432:	f004 ff31 	bl	8006298 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800143c:	f7ff fb72 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001440:	2360      	movs	r3, #96	; 0x60
 8001442:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <MX_TIM4_Init+0xe4>)
 8001458:	f004 f908 	bl	800566c <HAL_TIM_PWM_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001462:	f7ff fb5f 	bl	8000b24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <MX_TIM4_Init+0xe4>)
 8001468:	f000 f850 	bl	800150c <HAL_TIM_MspPostInit>

}
 800146c:	bf00      	nop
 800146e:	3738      	adds	r7, #56	; 0x38
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	24000a40 	.word	0x24000a40
 8001478:	40000800 	.word	0x40000800

0800147c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_TIM_Base_MspInit+0x84>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d117      	bne.n	80014be <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 8001490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 8001496:	f043 0302 	orr.w	r3, r3, #2
 800149a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	201d      	movs	r0, #29
 80014b2:	f000 fbec 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014b6:	201d      	movs	r0, #29
 80014b8:	f000 fc03 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014bc:	e01b      	b.n	80014f6 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a11      	ldr	r2, [pc, #68]	; (8001508 <HAL_TIM_Base_MspInit+0x8c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d116      	bne.n	80014f6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ce:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_TIM_Base_MspInit+0x88>)
 80014da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	201e      	movs	r0, #30
 80014ec:	f000 fbcf 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014f0:	201e      	movs	r0, #30
 80014f2:	f000 fbe6 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40000400 	.word	0x40000400
 8001504:	58024400 	.word	0x58024400
 8001508:	40000800 	.word	0x40000800

0800150c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <HAL_TIM_MspPostInit+0x130>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d15d      	bne.n	80015ea <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 8001530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001534:	4a42      	ldr	r2, [pc, #264]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153e:	4b40      	ldr	r3, [pc, #256]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	4b3c      	ldr	r3, [pc, #240]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	4a3b      	ldr	r2, [pc, #236]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155c:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b35      	ldr	r3, [pc, #212]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a33      	ldr	r2, [pc, #204]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001598:	2302      	movs	r3, #2
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4828      	ldr	r0, [pc, #160]	; (8001644 <HAL_TIM_MspPostInit+0x138>)
 80015a4:	f001 f954 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015b8:	2302      	movs	r3, #2
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4821      	ldr	r0, [pc, #132]	; (8001648 <HAL_TIM_MspPostInit+0x13c>)
 80015c4:	f001 f944 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d8:	2302      	movs	r3, #2
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <HAL_TIM_MspPostInit+0x140>)
 80015e4:	f001 f934 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80015e8:	e024      	b.n	8001634 <HAL_TIM_MspPostInit+0x128>
  else if(timHandle->Instance==TIM4)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_TIM_MspPostInit+0x144>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d11f      	bne.n	8001634 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 80015fc:	f043 0308 	orr.w	r3, r3, #8
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_TIM_MspPostInit+0x134>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001618:	2302      	movs	r3, #2
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001624:	2302      	movs	r3, #2
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	4619      	mov	r1, r3
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_TIM_MspPostInit+0x148>)
 8001630:	f001 f90e 	bl	8002850 <HAL_GPIO_Init>
}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	; 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40000400 	.word	0x40000400
 8001640:	58024400 	.word	0x58024400
 8001644:	58020000 	.word	0x58020000
 8001648:	58020400 	.word	0x58020400
 800164c:	58020800 	.word	0x58020800
 8001650:	40000800 	.word	0x40000800
 8001654:	58020c00 	.word	0x58020c00

08001658 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	429a      	cmp	r2, r3
 800166a:	d101      	bne.n	8001670 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		servo_update();
 800166c:	f7ff fb6e 	bl	8000d4c <servo_update>
	}
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	24000a80 	.word	0x24000a80

0800167c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <MX_USART3_UART_Init+0x90>)
 8001682:	4a23      	ldr	r2, [pc, #140]	; (8001710 <MX_USART3_UART_Init+0x94>)
 8001684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001686:	4b21      	ldr	r3, [pc, #132]	; (800170c <MX_USART3_UART_Init+0x90>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <MX_USART3_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <MX_USART3_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_USART3_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b1a      	ldr	r3, [pc, #104]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ac:	4b17      	ldr	r3, [pc, #92]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016be:	4b13      	ldr	r3, [pc, #76]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016c6:	f004 fe61 	bl	800638c <HAL_UART_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016d0:	f7ff fa28 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d4:	2100      	movs	r1, #0
 80016d6:	480d      	ldr	r0, [pc, #52]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016d8:	f007 fe5b 	bl	8009392 <HAL_UARTEx_SetTxFifoThreshold>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016e2:	f7ff fa1f 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4808      	ldr	r0, [pc, #32]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016ea:	f007 fe90 	bl	800940e <HAL_UARTEx_SetRxFifoThreshold>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016f4:	f7ff fa16 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_USART3_UART_Init+0x90>)
 80016fa:	f007 fe11 	bl	8009320 <HAL_UARTEx_DisableFifoMode>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001704:	f7ff fa0e 	bl	8000b24 <Error_Handler>
  }

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	24000ac0 	.word	0x24000ac0
 8001710:	40004800 	.word	0x40004800

08001714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_UART_MspInit+0x98>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d136      	bne.n	80017a4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_UART_MspInit+0x9c>)
 8001738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800173c:	4a1c      	ldr	r2, [pc, #112]	; (80017b0 <HAL_UART_MspInit+0x9c>)
 800173e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001742:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_UART_MspInit+0x9c>)
 8001748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800174c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HAL_UART_MspInit+0x9c>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <HAL_UART_MspInit+0x9c>)
 800175c:	f043 0308 	orr.w	r3, r3, #8
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_UART_MspInit+0x9c>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001784:	2307      	movs	r3, #7
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4809      	ldr	r0, [pc, #36]	; (80017b4 <HAL_UART_MspInit+0xa0>)
 8001790:	f001 f85e 	bl	8002850 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001794:	2200      	movs	r2, #0
 8001796:	2100      	movs	r1, #0
 8001798:	2027      	movs	r0, #39	; 0x27
 800179a:	f000 fa78 	bl	8001c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800179e:	2027      	movs	r0, #39	; 0x27
 80017a0:	f000 fa8f 	bl	8001cc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40004800 	.word	0x40004800
 80017b0:	58024400 	.word	0x58024400
 80017b4:	58020c00 	.word	0x58020c00

080017b8 <HAL_UART_RxCpltCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* uartHandle)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
    /*링버퍼패킷처리*/
	uart_serial_packet_Receive(uartHandle); //이렇게 해줘야 동일한 포인터 가 넣어진다.
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff f9d1 	bl	8000b68 <uart_serial_packet_Receive>

}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017d6:	4a16      	ldr	r2, [pc, #88]	; (8001830 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80017d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017dc:	2209      	movs	r2, #9
 80017de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017ee:	2202      	movs	r2, #2
 80017f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001800:	2200      	movs	r2, #0
 8001802:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001806:	2201      	movs	r2, #1
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800180c:	2201      	movs	r2, #1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001818:	f001 f9e3 	bl	8002be2 <HAL_PCD_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001822:	f7ff f97f 	bl	8000b24 <Error_Handler>
  }

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000b4c 	.word	0x24000b4c
 8001830:	40080000 	.word	0x40080000

08001834 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a21      	ldr	r2, [pc, #132]	; (80018d8 <HAL_PCD_MspInit+0xa4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d13b      	bne.n	80018ce <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_PCD_MspInit+0xa8>)
 8001858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <HAL_PCD_MspInit+0xa8>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_PCD_MspInit+0xa8>)
 8001868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001874:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001886:	230a      	movs	r3, #10
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4813      	ldr	r0, [pc, #76]	; (80018e0 <HAL_PCD_MspInit+0xac>)
 8001892:	f000 ffdd 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <HAL_PCD_MspInit+0xac>)
 80018ac:	f000 ffd0 	bl	8002850 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_PCD_MspInit+0xa8>)
 80018b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_PCD_MspInit+0xa8>)
 80018b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_PCD_MspInit+0xa8>)
 80018c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80018ce:	bf00      	nop
 80018d0:	3728      	adds	r7, #40	; 0x28
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40080000 	.word	0x40080000
 80018dc:	58024400 	.word	0x58024400
 80018e0:	58020000 	.word	0x58020000

080018e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800191c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ea:	e003      	b.n	80018f4 <LoopCopyDataInit>

080018ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018f2:	3104      	adds	r1, #4

080018f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018fc:	d3f6      	bcc.n	80018ec <CopyDataInit>
  ldr  r2, =_sbss
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001900:	e002      	b.n	8001908 <LoopFillZerobss>

08001902 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001902:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001904:	f842 3b04 	str.w	r3, [r2], #4

08001908 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800190a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800190c:	d3f9      	bcc.n	8001902 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800190e:	f7ff fc4f 	bl	80011b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001912:	f008 f8db 	bl	8009acc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001916:	f7ff f833 	bl	8000980 <main>
  bx  lr    
 800191a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800191c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001920:	08009b6c 	.word	0x08009b6c
  ldr  r0, =_sdata
 8001924:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001928:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 800192c:	240000d4 	.word	0x240000d4
  ldr  r3, = _ebss
 8001930:	24000f58 	.word	0x24000f58

08001934 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC3_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193c:	2003      	movs	r0, #3
 800193e:	f000 f99b 	bl	8001c78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001942:	f002 f83b 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8001946:	4601      	mov	r1, r0
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_Init+0x60>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <HAL_Init+0x64>)
 8001954:	5cd3      	ldrb	r3, [r2, r3]
 8001956:	f003 031f 	and.w	r3, r3, #31
 800195a:	fa21 f303 	lsr.w	r3, r1, r3
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_Init+0x68>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Update the SystemD2Clock global variable */
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <HAL_Init+0x68>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <HAL_Init+0x60>)
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490b      	ldr	r1, [pc, #44]	; (800199c <HAL_Init+0x64>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_Init+0x6c>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f812 	bl	80019a8 <HAL_InitTick>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_Init+0x56>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e002      	b.n	8001994 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800198e:	f7ff fba9 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	58024400 	.word	0x58024400
 800199c:	08009b4c 	.word	0x08009b4c
 80019a0:	24000004 	.word	0x24000004
 80019a4:	24000008 	.word	0x24000008

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019b0:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_InitTick+0x60>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e021      	b.n	8001a00 <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019bc:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <HAL_InitTick+0x64>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_InitTick+0x60>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	4619      	mov	r1, r3
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f983 	bl	8001cde <HAL_SYSTICK_Config>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e00e      	b.n	8001a00 <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b0f      	cmp	r3, #15
 80019e6:	d80a      	bhi.n	80019fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e8:	2200      	movs	r2, #0
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	f04f 30ff 	mov.w	r0, #4294967295
 80019f0:	f000 f94d 	bl	8001c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f4:	4a06      	ldr	r2, [pc, #24]	; (8001a10 <HAL_InitTick+0x68>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	e000      	b.n	8001a00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	24000010 	.word	0x24000010
 8001a0c:	24000004 	.word	0x24000004
 8001a10:	2400000c 	.word	0x2400000c

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	24000010 	.word	0x24000010
 8001a38:	24000f54 	.word	0x24000f54

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	24000f54 	.word	0x24000f54

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff ffee 	bl	8001a3c <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_Delay+0x40>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffde 	bl	8001a3c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	24000010 	.word	0x24000010

08001a98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <HAL_GetREVID+0x14>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	0c1b      	lsrs	r3, r3, #16
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	5c001000 	.word	0x5c001000

08001ab0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001ac0:	4904      	ldr	r1, [pc, #16]	; (8001ad4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	58000400 	.word	0x58000400

08001ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <__NVIC_SetPriorityGrouping+0x40>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af4:	4013      	ands	r3, r2
 8001af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x40>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00
 8001b1c:	05fa0000 	.word	0x05fa0000

08001b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <__NVIC_GetPriorityGrouping+0x18>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	0a1b      	lsrs	r3, r3, #8
 8001b2a:	f003 0307 	and.w	r3, r3, #7
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db0b      	blt.n	8001b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f003 021f 	and.w	r2, r3, #31
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <__NVIC_EnableIRQ+0x38>)
 8001b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000e100 	.word	0xe000e100

08001b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	db0a      	blt.n	8001ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	490c      	ldr	r1, [pc, #48]	; (8001bc4 <__NVIC_SetPriority+0x4c>)
 8001b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b96:	0112      	lsls	r2, r2, #4
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba0:	e00a      	b.n	8001bb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4908      	ldr	r1, [pc, #32]	; (8001bc8 <__NVIC_SetPriority+0x50>)
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	3b04      	subs	r3, #4
 8001bb0:	0112      	lsls	r2, r2, #4
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	761a      	strb	r2, [r3, #24]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f1c3 0307 	rsb	r3, r3, #7
 8001be6:	2b04      	cmp	r3, #4
 8001be8:	bf28      	it	cs
 8001bea:	2304      	movcs	r3, #4
 8001bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d902      	bls.n	8001bfc <NVIC_EncodePriority+0x30>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3b03      	subs	r3, #3
 8001bfa:	e000      	b.n	8001bfe <NVIC_EncodePriority+0x32>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	401a      	ands	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1e:	43d9      	mvns	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	4313      	orrs	r3, r2
         );
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c44:	d301      	bcc.n	8001c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00f      	b.n	8001c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <SysTick_Config+0x40>)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c52:	210f      	movs	r1, #15
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f7ff ff8e 	bl	8001b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <SysTick_Config+0x40>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <SysTick_Config+0x40>)
 8001c64:	2207      	movs	r2, #7
 8001c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	e000e010 	.word	0xe000e010

08001c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff ff29 	bl	8001ad8 <__NVIC_SetPriorityGrouping>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	4603      	mov	r3, r0
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff40 	bl	8001b20 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff90 	bl	8001bcc <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5f 	bl	8001b78 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff33 	bl	8001b3c <__NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffa4 	bl	8001c34 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e188      	b.n	800201c <HAL_DMA_Abort_IT+0x324>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2280      	movs	r2, #128	; 0x80
 8001d1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e17d      	b.n	800201c <HAL_DMA_Abort_IT+0x324>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a8c      	ldr	r2, [pc, #560]	; (8001f58 <HAL_DMA_Abort_IT+0x260>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04a      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a8b      	ldr	r2, [pc, #556]	; (8001f5c <HAL_DMA_Abort_IT+0x264>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d045      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a89      	ldr	r2, [pc, #548]	; (8001f60 <HAL_DMA_Abort_IT+0x268>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d040      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a88      	ldr	r2, [pc, #544]	; (8001f64 <HAL_DMA_Abort_IT+0x26c>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d03b      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a86      	ldr	r2, [pc, #536]	; (8001f68 <HAL_DMA_Abort_IT+0x270>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d036      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a85      	ldr	r2, [pc, #532]	; (8001f6c <HAL_DMA_Abort_IT+0x274>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d031      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a83      	ldr	r2, [pc, #524]	; (8001f70 <HAL_DMA_Abort_IT+0x278>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02c      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a82      	ldr	r2, [pc, #520]	; (8001f74 <HAL_DMA_Abort_IT+0x27c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d027      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a80      	ldr	r2, [pc, #512]	; (8001f78 <HAL_DMA_Abort_IT+0x280>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d022      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a7f      	ldr	r2, [pc, #508]	; (8001f7c <HAL_DMA_Abort_IT+0x284>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d01d      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a7d      	ldr	r2, [pc, #500]	; (8001f80 <HAL_DMA_Abort_IT+0x288>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d018      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7c      	ldr	r2, [pc, #496]	; (8001f84 <HAL_DMA_Abort_IT+0x28c>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7a      	ldr	r2, [pc, #488]	; (8001f88 <HAL_DMA_Abort_IT+0x290>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00e      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a79      	ldr	r2, [pc, #484]	; (8001f8c <HAL_DMA_Abort_IT+0x294>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a77      	ldr	r2, [pc, #476]	; (8001f90 <HAL_DMA_Abort_IT+0x298>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0xc8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a76      	ldr	r2, [pc, #472]	; (8001f94 <HAL_DMA_Abort_IT+0x29c>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DMA_Abort_IT+0xcc>
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_DMA_Abort_IT+0xce>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d065      	beq.n	8001e96 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a60      	ldr	r2, [pc, #384]	; (8001f58 <HAL_DMA_Abort_IT+0x260>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d04a      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5e      	ldr	r2, [pc, #376]	; (8001f5c <HAL_DMA_Abort_IT+0x264>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d045      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5d      	ldr	r2, [pc, #372]	; (8001f60 <HAL_DMA_Abort_IT+0x268>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d040      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <HAL_DMA_Abort_IT+0x26c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d03b      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5a      	ldr	r2, [pc, #360]	; (8001f68 <HAL_DMA_Abort_IT+0x270>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d036      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <HAL_DMA_Abort_IT+0x274>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d031      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a57      	ldr	r2, [pc, #348]	; (8001f70 <HAL_DMA_Abort_IT+0x278>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d02c      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <HAL_DMA_Abort_IT+0x27c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d027      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a54      	ldr	r2, [pc, #336]	; (8001f78 <HAL_DMA_Abort_IT+0x280>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d022      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_DMA_Abort_IT+0x284>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01d      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a51      	ldr	r2, [pc, #324]	; (8001f80 <HAL_DMA_Abort_IT+0x288>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d018      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_DMA_Abort_IT+0x28c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d013      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_DMA_Abort_IT+0x290>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00e      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4c      	ldr	r2, [pc, #304]	; (8001f8c <HAL_DMA_Abort_IT+0x294>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_DMA_Abort_IT+0x298>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d004      	beq.n	8001e72 <HAL_DMA_Abort_IT+0x17a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	; (8001f94 <HAL_DMA_Abort_IT+0x29c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d108      	bne.n	8001e84 <HAL_DMA_Abort_IT+0x18c>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e0ca      	b.n	800201a <HAL_DMA_Abort_IT+0x322>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0201 	bic.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e0c1      	b.n	800201a <HAL_DMA_Abort_IT+0x322>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 020e 	bic.w	r2, r2, #14
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <HAL_DMA_Abort_IT+0x260>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d04a      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <HAL_DMA_Abort_IT+0x264>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d045      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <HAL_DMA_Abort_IT+0x268>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d040      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a26      	ldr	r2, [pc, #152]	; (8001f64 <HAL_DMA_Abort_IT+0x26c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d03b      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <HAL_DMA_Abort_IT+0x270>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d036      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a23      	ldr	r2, [pc, #140]	; (8001f6c <HAL_DMA_Abort_IT+0x274>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d031      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <HAL_DMA_Abort_IT+0x278>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d02c      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_DMA_Abort_IT+0x27c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d027      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <HAL_DMA_Abort_IT+0x280>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d022      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	; (8001f7c <HAL_DMA_Abort_IT+0x284>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01d      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_DMA_Abort_IT+0x288>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d018      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_DMA_Abort_IT+0x28c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_DMA_Abort_IT+0x290>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00e      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_DMA_Abort_IT+0x294>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_DMA_Abort_IT+0x298>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d004      	beq.n	8001f46 <HAL_DMA_Abort_IT+0x24e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_DMA_Abort_IT+0x29c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d128      	bne.n	8001f98 <HAL_DMA_Abort_IT+0x2a0>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f022 0201 	bic.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	e027      	b.n	8001fa8 <HAL_DMA_Abort_IT+0x2b0>
 8001f58:	40020010 	.word	0x40020010
 8001f5c:	40020028 	.word	0x40020028
 8001f60:	40020040 	.word	0x40020040
 8001f64:	40020058 	.word	0x40020058
 8001f68:	40020070 	.word	0x40020070
 8001f6c:	40020088 	.word	0x40020088
 8001f70:	400200a0 	.word	0x400200a0
 8001f74:	400200b8 	.word	0x400200b8
 8001f78:	40020410 	.word	0x40020410
 8001f7c:	40020428 	.word	0x40020428
 8001f80:	40020440 	.word	0x40020440
 8001f84:	40020458 	.word	0x40020458
 8001f88:	40020470 	.word	0x40020470
 8001f8c:	40020488 	.word	0x40020488
 8001f90:	400204a0 	.word	0x400204a0
 8001f94:	400204b8 	.word	0x400204b8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	605a      	str	r2, [r3, #4]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fd6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00c      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x302>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fee:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ff8:	605a      	str	r2, [r3, #4]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_DMA_Abort_IT+0x322>
      {
        hdma->XferAbortCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0c6      	b.n	80021c4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fb1c 	bl	800067c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2223      	movs	r2, #35	; 0x23
 8002048:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b60      	ldr	r3, [pc, #384]	; (80021cc <HAL_ETH_Init+0x1a8>)
 800204c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002050:	4a5e      	ldr	r2, [pc, #376]	; (80021cc <HAL_ETH_Init+0x1a8>)
 8002052:	f043 0302 	orr.w	r3, r3, #2
 8002056:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800205a:	4b5c      	ldr	r3, [pc, #368]	; (80021cc <HAL_ETH_Init+0x1a8>)
 800205c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	7a1b      	ldrb	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fd1d 	bl	8001ab0 <HAL_SYSCFG_ETHInterfaceSelect>
 8002076:	e003      	b.n	8002080 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002078:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800207c:	f7ff fd18 	bl	8001ab0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002098:	f7ff fcd0 	bl	8001a3c <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800209e:	e00f      	b.n	80020c0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80020a0:	f7ff fccc 	bl	8001a3c <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020ae:	d907      	bls.n	80020c0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	22e0      	movs	r2, #224	; 0xe0
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e081      	b.n	80021c4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1e6      	bne.n	80020a0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fac0 	bl	8002658 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020d8:	f001 fde2 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b3c      	ldr	r3, [pc, #240]	; (80021d0 <HAL_ETH_Init+0x1ac>)
 80020e0:	fba3 2302 	umull	r2, r3, r3, r2
 80020e4:	0c9a      	lsrs	r2, r3, #18
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3a01      	subs	r2, #1
 80020ec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa13 	bl	800251c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800210c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002110:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	22e0      	movs	r2, #224	; 0xe0
 8002128:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e04a      	b.n	80021c4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	f241 1308 	movw	r3, #4360	; 0x1108
 8002136:	4413      	add	r3, r2
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_ETH_Init+0x1b0>)
 800213c:	4013      	ands	r3, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6952      	ldr	r2, [r2, #20]
 8002142:	0052      	lsls	r2, r2, #1
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	6809      	ldr	r1, [r1, #0]
 8002148:	431a      	orrs	r2, r3
 800214a:	f241 1308 	movw	r3, #4360	; 0x1108
 800214e:	440b      	add	r3, r1
 8002150:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fad8 	bl	8002708 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fb1c 	bl	8002796 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	3305      	adds	r3, #5
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021a      	lsls	r2, r3, #8
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	3303      	adds	r3, #3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	061a      	lsls	r2, r3, #24
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	3302      	adds	r3, #2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	041b      	lsls	r3, r3, #16
 8002190:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800219c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2210      	movs	r2, #16
 80021ba:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2210      	movs	r2, #16
 80021c0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	58024400 	.word	0x58024400
 80021d0:	431bde83 	.word	0x431bde83
 80021d4:	ffff8001 	.word	0xffff8001

080021d8 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80021ea:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	791b      	ldrb	r3, [r3, #4]
 80021f0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80021f2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	7b1b      	ldrb	r3, [r3, #12]
 80021f8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80021fa:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	7b5b      	ldrb	r3, [r3, #13]
 8002200:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002202:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	7b9b      	ldrb	r3, [r3, #14]
 8002208:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800220a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7bdb      	ldrb	r3, [r3, #15]
 8002210:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002212:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	7c12      	ldrb	r2, [r2, #16]
 8002218:	2a00      	cmp	r2, #0
 800221a:	d102      	bne.n	8002222 <ETH_SetMACConfig+0x4a>
 800221c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002220:	e000      	b.n	8002224 <ETH_SetMACConfig+0x4c>
 8002222:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002224:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	7c52      	ldrb	r2, [r2, #17]
 800222a:	2a00      	cmp	r2, #0
 800222c:	d102      	bne.n	8002234 <ETH_SetMACConfig+0x5c>
 800222e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002232:	e000      	b.n	8002236 <ETH_SetMACConfig+0x5e>
 8002234:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002236:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	7c9b      	ldrb	r3, [r3, #18]
 800223c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800223e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002244:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800224a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	7f1b      	ldrb	r3, [r3, #28]
 8002250:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002252:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	7f5b      	ldrb	r3, [r3, #29]
 8002258:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800225a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	7f92      	ldrb	r2, [r2, #30]
 8002260:	2a00      	cmp	r2, #0
 8002262:	d102      	bne.n	800226a <ETH_SetMACConfig+0x92>
 8002264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002268:	e000      	b.n	800226c <ETH_SetMACConfig+0x94>
 800226a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800226c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	7fdb      	ldrb	r3, [r3, #31]
 8002272:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002274:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	f892 2020 	ldrb.w	r2, [r2, #32]
 800227c:	2a00      	cmp	r2, #0
 800227e:	d102      	bne.n	8002286 <ETH_SetMACConfig+0xae>
 8002280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002284:	e000      	b.n	8002288 <ETH_SetMACConfig+0xb0>
 8002286:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002288:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800228e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002296:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002298:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800229e:	4313      	orrs	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b56      	ldr	r3, [pc, #344]	; (8002404 <ETH_SetMACConfig+0x22c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	68f9      	ldr	r1, [r7, #12]
 80022b2:	430b      	orrs	r3, r1
 80022b4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022c2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022c4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022cc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022ce:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022d6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022d8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d102      	bne.n	80022ea <ETH_SetMACConfig+0x112>
 80022e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022e8:	e000      	b.n	80022ec <ETH_SetMACConfig+0x114>
 80022ea:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022ec:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022f2:	4313      	orrs	r3, r2
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4b42      	ldr	r3, [pc, #264]	; (8002408 <ETH_SetMACConfig+0x230>)
 80022fe:	4013      	ands	r3, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	68f9      	ldr	r1, [r7, #12]
 8002306:	430b      	orrs	r3, r1
 8002308:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002310:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b3a      	ldr	r3, [pc, #232]	; (800240c <ETH_SetMACConfig+0x234>)
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	68f9      	ldr	r1, [r7, #12]
 800232a:	430b      	orrs	r3, r1
 800232c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002334:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800233a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002342:	2a00      	cmp	r2, #0
 8002344:	d101      	bne.n	800234a <ETH_SetMACConfig+0x172>
 8002346:	2280      	movs	r2, #128	; 0x80
 8002348:	e000      	b.n	800234c <ETH_SetMACConfig+0x174>
 800234a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800234c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002352:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800235e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	430b      	orrs	r3, r1
 800236c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002374:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800237c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800237e:	4313      	orrs	r3, r2
 8002380:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f023 0103 	bic.w	r1, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	430a      	orrs	r2, r1
 8002396:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023a2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023be:	2a00      	cmp	r2, #0
 80023c0:	d101      	bne.n	80023c6 <ETH_SetMACConfig+0x1ee>
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	e000      	b.n	80023c8 <ETH_SetMACConfig+0x1f0>
 80023c6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80023c8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80023d0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023d2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023da:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80023dc:	4313      	orrs	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80023e8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	00048083 	.word	0x00048083
 8002408:	c0f88000 	.word	0xc0f88000
 800240c:	fffffef0 	.word	0xfffffef0

08002410 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b38      	ldr	r3, [pc, #224]	; (8002508 <ETH_SetDMAConfig+0xf8>)
 8002426:	4013      	ands	r3, r2
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	6809      	ldr	r1, [r1, #0]
 8002430:	431a      	orrs	r2, r3
 8002432:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002436:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002442:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	7b1b      	ldrb	r3, [r3, #12]
 8002448:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	f241 0304 	movw	r3, #4100	; 0x1004
 8002456:	4413      	add	r3, r2
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b2c      	ldr	r3, [pc, #176]	; (800250c <ETH_SetDMAConfig+0xfc>)
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6811      	ldr	r1, [r2, #0]
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	431a      	orrs	r2, r3
 8002466:	f241 0304 	movw	r3, #4100	; 0x1004
 800246a:	440b      	add	r3, r1
 800246c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	7b5b      	ldrb	r3, [r3, #13]
 8002472:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <ETH_SetDMAConfig+0x100>)
 8002488:	4013      	ands	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	431a      	orrs	r2, r3
 8002492:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8002496:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	7d1b      	ldrb	r3, [r3, #20]
 80024a0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024a2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	7f5b      	ldrb	r3, [r3, #29]
 80024a8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f241 1304 	movw	r3, #4356	; 0x1104
 80024b6:	4413      	add	r3, r2
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	4b16      	ldr	r3, [pc, #88]	; (8002514 <ETH_SetDMAConfig+0x104>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6811      	ldr	r1, [r2, #0]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	431a      	orrs	r2, r3
 80024c6:	f241 1304 	movw	r3, #4356	; 0x1104
 80024ca:	440b      	add	r3, r1
 80024cc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	f241 1308 	movw	r3, #4360	; 0x1108
 80024e4:	4413      	add	r3, r2
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <ETH_SetDMAConfig+0x108>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6811      	ldr	r1, [r2, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	f241 1308 	movw	r3, #4360	; 0x1108
 80024f8:	440b      	add	r3, r1
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr
 8002508:	ffff87fd 	.word	0xffff87fd
 800250c:	ffff2ffe 	.word	0xffff2ffe
 8002510:	fffec000 	.word	0xfffec000
 8002514:	ffc0efef 	.word	0xffc0efef
 8002518:	7fc0ffff 	.word	0x7fc0ffff

0800251c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b0a4      	sub	sp, #144	; 0x90
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002524:	2301      	movs	r3, #1
 8002526:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800252a:	2300      	movs	r3, #0
 800252c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800253a:	2301      	movs	r3, #1
 800253c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002564:	2300      	movs	r3, #0
 8002566:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002574:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002578:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002584:	2301      	movs	r3, #1
 8002586:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002596:	2300      	movs	r3, #0
 8002598:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800259a:	2300      	movs	r3, #0
 800259c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800259e:	2300      	movs	r3, #0
 80025a0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025b4:	2320      	movs	r3, #32
 80025b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025c6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80025d8:	2302      	movs	r3, #2
 80025da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80025f6:	2300      	movs	r3, #0
 80025f8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002604:	4619      	mov	r1, r3
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fde6 	bl	80021d8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800260c:	2301      	movs	r3, #1
 800260e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002610:	2301      	movs	r3, #1
 8002612:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002626:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800262a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002634:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800263c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4619      	mov	r1, r3
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fee1 	bl	8002410 <ETH_SetDMAConfig>
}
 800264e:	bf00      	nop
 8002650:	3790      	adds	r7, #144	; 0x90
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002668:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002670:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002672:	f001 fb15 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8002676:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d908      	bls.n	8002692 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d804      	bhi.n	8002692 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e027      	b.n	80026e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d908      	bls.n	80026ac <ETH_MAC_MDIO_ClkConfig+0x54>
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4a17      	ldr	r2, [pc, #92]	; (80026fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d804      	bhi.n	80026ac <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e01a      	b.n	80026e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4a13      	ldr	r2, [pc, #76]	; (80026fc <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d903      	bls.n	80026bc <ETH_MAC_MDIO_ClkConfig+0x64>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4a12      	ldr	r2, [pc, #72]	; (8002700 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d911      	bls.n	80026e0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4a10      	ldr	r2, [pc, #64]	; (8002700 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d908      	bls.n	80026d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4a0f      	ldr	r2, [pc, #60]	; (8002704 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d804      	bhi.n	80026d6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e005      	b.n	80026e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	e000      	b.n	80026e2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80026e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80026ec:	bf00      	nop
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	01312cff 	.word	0x01312cff
 80026f8:	02160ebf 	.word	0x02160ebf
 80026fc:	039386ff 	.word	0x039386ff
 8002700:	05f5e0ff 	.word	0x05f5e0ff
 8002704:	08f0d17f 	.word	0x08f0d17f

08002708 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e01d      	b.n	8002752 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68d9      	ldr	r1, [r3, #12]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	2200      	movs	r2, #0
 800273e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	3206      	adds	r2, #6
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3301      	adds	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d9de      	bls.n	8002716 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f241 132c 	movw	r3, #4396	; 0x112c
 8002766:	4413      	add	r3, r2
 8002768:	2203      	movs	r2, #3
 800276a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68d9      	ldr	r1, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f241 1314 	movw	r3, #4372	; 0x1114
 8002778:	4413      	add	r3, r2
 800277a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e024      	b.n	80027ee <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6919      	ldr	r1, [r3, #16]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	440b      	add	r3, r1
 80027b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	330a      	adds	r3, #10
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d9d7      	bls.n	80027a4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	f241 1330 	movw	r3, #4400	; 0x1130
 800281a:	4413      	add	r3, r2
 800281c:	2203      	movs	r2, #3
 800281e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6919      	ldr	r1, [r3, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	f241 131c 	movw	r3, #4380	; 0x111c
 800282c:	4413      	add	r3, r2
 800282e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002840:	4413      	add	r3, r2
 8002842:	6019      	str	r1, [r3, #0]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800285e:	4b89      	ldr	r3, [pc, #548]	; (8002a84 <HAL_GPIO_Init+0x234>)
 8002860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002862:	e194      	b.n	8002b8e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	4013      	ands	r3, r2
 8002872:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8186 	beq.w	8002b88 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x3c>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b12      	cmp	r3, #18
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d00b      	beq.n	8002928 <HAL_GPIO_Init+0xd8>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d007      	beq.n	8002928 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800291c:	2b11      	cmp	r3, #17
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b12      	cmp	r3, #18
 8002926:	d130      	bne.n	800298a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800295e:	2201      	movs	r2, #1
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0201 	and.w	r2, r3, #1
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4313      	orrs	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	2203      	movs	r2, #3
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 80e0 	beq.w	8002b88 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <HAL_GPIO_Init+0x238>)
 80029ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029ce:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <HAL_GPIO_Init+0x238>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_GPIO_Init+0x238>)
 80029da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e6:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <HAL_GPIO_Init+0x23c>)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	3302      	adds	r3, #2
 80029ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a20      	ldr	r2, [pc, #128]	; (8002a90 <HAL_GPIO_Init+0x240>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d052      	beq.n	8002ab8 <HAL_GPIO_Init+0x268>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_GPIO_Init+0x244>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_GPIO_Init+0x22e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1e      	ldr	r2, [pc, #120]	; (8002a98 <HAL_GPIO_Init+0x248>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d02b      	beq.n	8002a7a <HAL_GPIO_Init+0x22a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_GPIO_Init+0x24c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d025      	beq.n	8002a76 <HAL_GPIO_Init+0x226>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_GPIO_Init+0x250>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <HAL_GPIO_Init+0x222>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_GPIO_Init+0x254>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d019      	beq.n	8002a6e <HAL_GPIO_Init+0x21e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <HAL_GPIO_Init+0x258>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_GPIO_Init+0x21a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a19      	ldr	r2, [pc, #100]	; (8002aac <HAL_GPIO_Init+0x25c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d00d      	beq.n	8002a66 <HAL_GPIO_Init+0x216>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <HAL_GPIO_Init+0x260>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d007      	beq.n	8002a62 <HAL_GPIO_Init+0x212>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <HAL_GPIO_Init+0x264>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d101      	bne.n	8002a5e <HAL_GPIO_Init+0x20e>
 8002a5a:	2309      	movs	r3, #9
 8002a5c:	e02d      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a5e:	230a      	movs	r3, #10
 8002a60:	e02b      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a62:	2308      	movs	r3, #8
 8002a64:	e029      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a66:	2307      	movs	r3, #7
 8002a68:	e027      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a6a:	2306      	movs	r3, #6
 8002a6c:	e025      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a6e:	2305      	movs	r3, #5
 8002a70:	e023      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a72:	2304      	movs	r3, #4
 8002a74:	e021      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a76:	2303      	movs	r3, #3
 8002a78:	e01f      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e01d      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e01b      	b.n	8002aba <HAL_GPIO_Init+0x26a>
 8002a82:	bf00      	nop
 8002a84:	58000080 	.word	0x58000080
 8002a88:	58024400 	.word	0x58024400
 8002a8c:	58000400 	.word	0x58000400
 8002a90:	58020000 	.word	0x58020000
 8002a94:	58020400 	.word	0x58020400
 8002a98:	58020800 	.word	0x58020800
 8002a9c:	58020c00 	.word	0x58020c00
 8002aa0:	58021000 	.word	0x58021000
 8002aa4:	58021400 	.word	0x58021400
 8002aa8:	58021800 	.word	0x58021800
 8002aac:	58021c00 	.word	0x58021c00
 8002ab0:	58022000 	.word	0x58022000
 8002ab4:	58022400 	.word	0x58022400
 8002ab8:	2300      	movs	r3, #0
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	f002 0203 	and.w	r2, r2, #3
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	4093      	lsls	r3, r2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aca:	4938      	ldr	r1, [pc, #224]	; (8002bac <HAL_GPIO_Init+0x35c>)
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f47f ae63 	bne.w	8002864 <HAL_GPIO_Init+0x14>
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3724      	adds	r7, #36	; 0x24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	58000400 	.word	0x58000400

08002bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc0:	787b      	ldrb	r3, [r7, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bc6:	887a      	ldrh	r2, [r7, #2]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002bcc:	e003      	b.n	8002bd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	041a      	lsls	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	619a      	str	r2, [r3, #24]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be4:	b08f      	sub	sp, #60	; 0x3c
 8002be6:	af0a      	add	r7, sp, #40	; 0x28
 8002be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e116      	b.n	8002e22 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe fe10 	bl	8001834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2203      	movs	r2, #3
 8002c18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d102      	bne.n	8002c2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f006 fcf4 	bl	8009620 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	687e      	ldr	r6, [r7, #4]
 8002c40:	466d      	mov	r5, sp
 8002c42:	f106 0410 	add.w	r4, r6, #16
 8002c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c52:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c56:	1d33      	adds	r3, r6, #4
 8002c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	f006 fc7e 	bl	800955c <USB_CoreInit>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0d7      	b.n	8002e22 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f006 fce2 	bl	8009642 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	73fb      	strb	r3, [r7, #15]
 8002c82:	e04a      	b.n	8002d1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c84:	7bfa      	ldrb	r2, [r7, #15]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	333d      	adds	r3, #61	; 0x3d
 8002c94:	2201      	movs	r2, #1
 8002c96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	333c      	adds	r3, #60	; 0x3c
 8002ca8:	7bfa      	ldrb	r2, [r7, #15]
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	7bfb      	ldrb	r3, [r7, #15]
 8002cb0:	b298      	uxth	r0, r3
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3342      	adds	r3, #66	; 0x42
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	333f      	adds	r3, #63	; 0x3f
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3344      	adds	r3, #68	; 0x44
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3348      	adds	r3, #72	; 0x48
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3350      	adds	r3, #80	; 0x50
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	3301      	adds	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	7bfa      	ldrb	r2, [r7, #15]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3af      	bcc.n	8002c84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e044      	b.n	8002db4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a9b      	subs	r3, r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	440b      	add	r3, r1
 8002d38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	3301      	adds	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3b5      	bcc.n	8002d2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	687e      	ldr	r6, [r7, #4]
 8002dc6:	466d      	mov	r5, sp
 8002dc8:	f106 0410 	add.w	r4, r6, #16
 8002dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ddc:	1d33      	adds	r3, r6, #4
 8002dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de0:	6838      	ldr	r0, [r7, #0]
 8002de2:	f006 fc59 	bl	8009698 <USB_DevInit>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d005      	beq.n	8002df8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e014      	b.n	8002e22 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d102      	bne.n	8002e16 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f80b 	bl	8002e2c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f006 fe09 	bl	8009a32 <USB_DevDisconnect>

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e5a:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_PCDEx_ActivateLPM+0x44>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	10000003 	.word	0x10000003

08002e74 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d008      	beq.n	8002e9a <HAL_PWREx_ConfigSupply+0x26>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new regulator config */
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e01d      	b.n	8002ed6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 0207 	bic.w	r2, r3, #7
 8002ea2:	490f      	ldr	r1, [pc, #60]	; (8002ee0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002eaa:	f7fe fdc7 	bl	8001a3c <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002eb0:	e009      	b.n	8002ec6 <HAL_PWREx_ConfigSupply+0x52>
  {
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 8002eb2:	f7fe fdc3 	bl	8001a3c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ec0:	d901      	bls.n	8002ec6 <HAL_PWREx_ConfigSupply+0x52>
    {
      return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e007      	b.n	8002ed6 <HAL_PWREx_ConfigSupply+0x62>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_PWREx_ConfigSupply+0x6c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed2:	d1ee      	bne.n	8002eb2 <HAL_PWREx_ConfigSupply+0x3e>
    }
  }

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	58024800 	.word	0x58024800

08002ee4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief  Enable the USB voltage level detector.
  * @retval None
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT(PWR->CR3, PWR_CR3_USB33DEN);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	58024800 	.word	0x58024800

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e3a4      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 8087 	beq.w	8003032 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f24:	4b9a      	ldr	r3, [pc, #616]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f2e:	4b98      	ldr	r3, [pc, #608]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	623b      	str	r3, [r7, #32]
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	2b10      	cmp	r3, #16
 8002f38:	d007      	beq.n	8002f4a <HAL_RCC_OscConfig+0x46>
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	2b18      	cmp	r3, #24
 8002f3e:	d110      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4a:	4b91      	ldr	r3, [pc, #580]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d06c      	beq.n	8003030 <HAL_RCC_OscConfig+0x12c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d168      	bne.n	8003030 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e37e      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCC_OscConfig+0x76>
 8002f6c:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a87      	ldr	r2, [pc, #540]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	e02e      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b83      	ldr	r3, [pc, #524]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a82      	ldr	r2, [pc, #520]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b80      	ldr	r3, [pc, #512]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7f      	ldr	r2, [pc, #508]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xbc>
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a79      	ldr	r2, [pc, #484]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b77      	ldr	r3, [pc, #476]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a76      	ldr	r2, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xd4>
 8002fc0:	4b73      	ldr	r3, [pc, #460]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a72      	ldr	r2, [pc, #456]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b70      	ldr	r3, [pc, #448]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6f      	ldr	r2, [pc, #444]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fd2c 	bl	8001a3c <HAL_GetTick>
 8002fe4:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fe fd28 	bl	8001a3c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e332      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ffa:	4b65      	ldr	r3, [pc, #404]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe4>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fd18 	bl	8001a3c <HAL_GetTick>
 800300c:	61f8      	str	r0, [r7, #28]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fd14 	bl	8001a3c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e31e      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003022:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x10c>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80b0 	beq.w	80031a0 <HAL_RCC_OscConfig+0x29c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003048:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800304a:	4b51      	ldr	r3, [pc, #324]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_RCC_OscConfig+0x162>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2b18      	cmp	r3, #24
 800305a:	d149      	bne.n	80030f0 <HAL_RCC_OscConfig+0x1ec>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d144      	bne.n	80030f0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003066:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_RCC_OscConfig+0x17a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e2f0      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
      /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800307e:	4b44      	ldr	r3, [pc, #272]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f023 0219 	bic.w	r2, r3, #25
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	4941      	ldr	r1, [pc, #260]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fe fcd4 	bl	8001a3c <HAL_GetTick>
 8003094:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe fcd0 	bl	8001a3c <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e2da      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030aa:	4b39      	ldr	r3, [pc, #228]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b6:	f7fe fcef 	bl	8001a98 <HAL_GetREVID>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f241 0303 	movw	r3, #4099	; 0x1003
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d80a      	bhi.n	80030da <HAL_RCC_OscConfig+0x1d6>
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	031b      	lsls	r3, r3, #12
 80030d2:	492f      	ldr	r1, [pc, #188]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030d8:	e062      	b.n	80031a0 <HAL_RCC_OscConfig+0x29c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	4929      	ldr	r1, [pc, #164]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ee:	e057      	b.n	80031a0 <HAL_RCC_OscConfig+0x29c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d038      	beq.n	800316a <HAL_RCC_OscConfig+0x266>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80030f8:	4b25      	ldr	r3, [pc, #148]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f023 0219 	bic.w	r2, r3, #25
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4922      	ldr	r1, [pc, #136]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310a:	f7fe fc97 	bl	8001a3c <HAL_GetTick>
 800310e:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003112:	f7fe fc93 	bl	8001a3c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e29d      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003124:	4b1a      	ldr	r3, [pc, #104]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	f7fe fcb2 	bl	8001a98 <HAL_GetREVID>
 8003134:	4602      	mov	r2, r0
 8003136:	f241 0303 	movw	r3, #4099	; 0x1003
 800313a:	429a      	cmp	r2, r3
 800313c:	d80a      	bhi.n	8003154 <HAL_RCC_OscConfig+0x250>
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	031b      	lsls	r3, r3, #12
 800314c:	4910      	ldr	r1, [pc, #64]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 800314e:	4313      	orrs	r3, r2
 8003150:	604b      	str	r3, [r1, #4]
 8003152:	e025      	b.n	80031a0 <HAL_RCC_OscConfig+0x29c>
 8003154:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	490b      	ldr	r1, [pc, #44]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
 8003168:	e01a      	b.n	80031a0 <HAL_RCC_OscConfig+0x29c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <HAL_RCC_OscConfig+0x28c>)
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe fc61 	bl	8001a3c <HAL_GetTick>
 800317a:	61f8      	str	r0, [r7, #28]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800317e:	f7fe fc5d 	bl	8001a3c <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d903      	bls.n	8003194 <HAL_RCC_OscConfig+0x290>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e267      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
 8003190:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003194:	4ba0      	ldr	r3, [pc, #640]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ee      	bne.n	800317e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 808f 	beq.w	80032cc <HAL_RCC_OscConfig+0x3c8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031ae:	4b9a      	ldr	r3, [pc, #616]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b6:	613b      	str	r3, [r7, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031b8:	4b97      	ldr	r3, [pc, #604]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	60fb      	str	r3, [r7, #12]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d007      	beq.n	80031d4 <HAL_RCC_OscConfig+0x2d0>
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b18      	cmp	r3, #24
 80031c8:	d12d      	bne.n	8003226 <HAL_RCC_OscConfig+0x322>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d128      	bne.n	8003226 <HAL_RCC_OscConfig+0x322>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031d4:	4b90      	ldr	r3, [pc, #576]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_OscConfig+0x2e8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e239      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ec:	f7fe fc54 	bl	8001a98 <HAL_GetREVID>
 80031f0:	4602      	mov	r2, r0
 80031f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d80a      	bhi.n	8003210 <HAL_RCC_OscConfig+0x30c>
 80031fa:	4b87      	ldr	r3, [pc, #540]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	4983      	ldr	r1, [pc, #524]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800320e:	e05d      	b.n	80032cc <HAL_RCC_OscConfig+0x3c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003210:	4b81      	ldr	r3, [pc, #516]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	497e      	ldr	r1, [pc, #504]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003220:	4313      	orrs	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003224:	e052      	b.n	80032cc <HAL_RCC_OscConfig+0x3c8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d035      	beq.n	800329a <HAL_RCC_OscConfig+0x396>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800322e:	4b7a      	ldr	r3, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a79      	ldr	r2, [pc, #484]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323a:	f7fe fbff 	bl	8001a3c <HAL_GetTick>
 800323e:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x350>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003242:	f7fe fbfb 	bl	8001a3c <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x350>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e205      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003254:	4b70      	ldr	r3, [pc, #448]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x33e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003260:	f7fe fc1a 	bl	8001a98 <HAL_GetREVID>
 8003264:	4602      	mov	r2, r0
 8003266:	f241 0303 	movw	r3, #4099	; 0x1003
 800326a:	429a      	cmp	r2, r3
 800326c:	d80a      	bhi.n	8003284 <HAL_RCC_OscConfig+0x380>
 800326e:	4b6a      	ldr	r3, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	069b      	lsls	r3, r3, #26
 800327c:	4966      	ldr	r1, [pc, #408]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
 8003282:	e023      	b.n	80032cc <HAL_RCC_OscConfig+0x3c8>
 8003284:	4b64      	ldr	r3, [pc, #400]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	061b      	lsls	r3, r3, #24
 8003292:	4961      	ldr	r1, [pc, #388]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003294:	4313      	orrs	r3, r2
 8003296:	60cb      	str	r3, [r1, #12]
 8003298:	e018      	b.n	80032cc <HAL_RCC_OscConfig+0x3c8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800329a:	4b5f      	ldr	r3, [pc, #380]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5e      	ldr	r2, [pc, #376]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80032a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe fbc9 	bl	8001a3c <HAL_GetTick>
 80032aa:	61f8      	str	r0, [r7, #28]

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x3bc>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032ae:	f7fe fbc5 	bl	8001a3c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1cf      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80032c0:	4b55      	ldr	r3, [pc, #340]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d036      	beq.n	8003346 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d019      	beq.n	8003314 <HAL_RCC_OscConfig+0x410>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e0:	4b4d      	ldr	r3, [pc, #308]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	4a4c      	ldr	r2, [pc, #304]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fba6 	bl	8001a3c <HAL_GetTick>
 80032f0:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x402>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032f4:	f7fe fba2 	bl	8001a3c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x402>
        {
          return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e1ac      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003306:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0x3f0>
 8003312:	e018      	b.n	8003346 <HAL_RCC_OscConfig+0x442>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003314:	4b40      	ldr	r3, [pc, #256]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003318:	4a3f      	ldr	r2, [pc, #252]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003320:	f7fe fb8c 	bl	8001a3c <HAL_GetTick>
 8003324:	61f8      	str	r0, [r7, #28]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x436>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003328:	f7fe fb88 	bl	8001a3c <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e192      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x424>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d036      	beq.n	80033c0 <HAL_RCC_OscConfig+0x4bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d019      	beq.n	800338e <HAL_RCC_OscConfig+0x48a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800335a:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a2e      	ldr	r2, [pc, #184]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003364:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003366:	f7fe fb69 	bl	8001a3c <HAL_GetTick>
 800336a:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800336e:	f7fe fb65 	bl	8001a3c <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e16f      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f0      	beq.n	800336e <HAL_RCC_OscConfig+0x46a>
 800338c:	e018      	b.n	80033c0 <HAL_RCC_OscConfig+0x4bc>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a21      	ldr	r2, [pc, #132]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 8003394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003398:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800339a:	f7fe fb4f 	bl	8001a3c <HAL_GetTick>
 800339e:	61f8      	str	r0, [r7, #28]

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x4b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80033a2:	f7fe fb4b 	bl	8001a3c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x4b0>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e155      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0304 	and.w	r3, r3, #4
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8086 	beq.w	80034da <HAL_RCC_OscConfig+0x5d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <HAL_RCC_OscConfig+0x518>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x518>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033da:	f7fe fb2f 	bl	8001a3c <HAL_GetTick>
 80033de:	61f8      	str	r0, [r7, #28]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fe fb2b 	bl	8001a3c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b64      	cmp	r3, #100	; 0x64
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x4f0>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e135      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_OscConfig+0x518>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x4de>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d10b      	bne.n	8003420 <HAL_RCC_OscConfig+0x51c>
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a02      	ldr	r2, [pc, #8]	; (8003418 <HAL_RCC_OscConfig+0x514>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	e032      	b.n	800347c <HAL_RCC_OscConfig+0x578>
 8003416:	bf00      	nop
 8003418:	58024400 	.word	0x58024400
 800341c:	58024800 	.word	0x58024800
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10c      	bne.n	8003442 <HAL_RCC_OscConfig+0x53e>
 8003428:	4b8f      	ldr	r3, [pc, #572]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	4a8e      	ldr	r2, [pc, #568]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800342e:	f023 0301 	bic.w	r3, r3, #1
 8003432:	6713      	str	r3, [r2, #112]	; 0x70
 8003434:	4b8c      	ldr	r3, [pc, #560]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	4a8b      	ldr	r2, [pc, #556]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	6713      	str	r3, [r2, #112]	; 0x70
 8003440:	e01c      	b.n	800347c <HAL_RCC_OscConfig+0x578>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b05      	cmp	r3, #5
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x560>
 800344a:	4b87      	ldr	r3, [pc, #540]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	4a86      	ldr	r2, [pc, #536]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6713      	str	r3, [r2, #112]	; 0x70
 8003456:	4b84      	ldr	r3, [pc, #528]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	4a83      	ldr	r2, [pc, #524]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6713      	str	r3, [r2, #112]	; 0x70
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0x578>
 8003464:	4b80      	ldr	r3, [pc, #512]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a7f      	ldr	r2, [pc, #508]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800346a:	f023 0301 	bic.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	4b7d      	ldr	r3, [pc, #500]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4a7c      	ldr	r2, [pc, #496]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003476:	f023 0304 	bic.w	r3, r3, #4
 800347a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <HAL_RCC_OscConfig+0x5ac>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fada 	bl	8001a3c <HAL_GetTick>
 8003488:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x59e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fe fad6 	bl	8001a3c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x59e>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0de      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a2:	4b71      	ldr	r3, [pc, #452]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0ee      	beq.n	800348c <HAL_RCC_OscConfig+0x588>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fe fac4 	bl	8001a3c <HAL_GetTick>
 80034b4:	61f8      	str	r0, [r7, #28]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034b6:	e00a      	b.n	80034ce <HAL_RCC_OscConfig+0x5ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fe fac0 	bl	8001a3c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x5ca>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e0c8      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80034ce:	4b66      	ldr	r3, [pc, #408]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ee      	bne.n	80034b8 <HAL_RCC_OscConfig+0x5b4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80bd 	beq.w	800365e <HAL_RCC_OscConfig+0x75a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80034e4:	4b60      	ldr	r3, [pc, #384]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	f000 80b4 	beq.w	800365a <HAL_RCC_OscConfig+0x756>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	f040 8095 	bne.w	8003626 <HAL_RCC_OscConfig+0x722>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fc:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a59      	ldr	r2, [pc, #356]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003508:	f7fe fa98 	bl	8001a3c <HAL_GetTick>
 800350c:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe fa94 	bl	8001a3c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e09e      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003522:	4b51      	ldr	r3, [pc, #324]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x60c>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800352e:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003532:	4b4e      	ldr	r3, [pc, #312]	; (800366c <HAL_RCC_OscConfig+0x768>)
 8003534:	4013      	ands	r3, r2
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800353e:	0112      	lsls	r2, r2, #4
 8003540:	430a      	orrs	r2, r1
 8003542:	4949      	ldr	r1, [pc, #292]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003544:	4313      	orrs	r3, r2
 8003546:	628b      	str	r3, [r1, #40]	; 0x28
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	3b01      	subs	r3, #1
 800354e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	3b01      	subs	r3, #1
 8003558:	025b      	lsls	r3, r3, #9
 800355a:	b29b      	uxth	r3, r3
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	3b01      	subs	r3, #1
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003570:	3b01      	subs	r3, #1
 8003572:	061b      	lsls	r3, r3, #24
 8003574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003578:	493b      	ldr	r1, [pc, #236]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800357a:	4313      	orrs	r3, r2
 800357c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800357e:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	4a39      	ldr	r2, [pc, #228]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL  PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800358c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800358e:	4b38      	ldr	r3, [pc, #224]	; (8003670 <HAL_RCC_OscConfig+0x76c>)
 8003590:	4013      	ands	r3, r2
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003596:	00d2      	lsls	r2, r2, #3
 8003598:	4933      	ldr	r1, [pc, #204]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800359a:	4313      	orrs	r3, r2
 800359c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	f023 020c 	bic.w	r2, r3, #12
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	492f      	ldr	r1, [pc, #188]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80035b0:	4b2d      	ldr	r3, [pc, #180]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	f023 0202 	bic.w	r2, r3, #2
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	492a      	ldr	r1, [pc, #168]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4a28      	ldr	r2, [pc, #160]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ce:	4b26      	ldr	r3, [pc, #152]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	4a22      	ldr	r2, [pc, #136]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 80035f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fa1d 	bl	8001a3c <HAL_GetTick>
 8003602:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003606:	f7fe fa19 	bl	8001a3c <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e023      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003618:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0f0      	beq.n	8003606 <HAL_RCC_OscConfig+0x702>
 8003624:	e01b      	b.n	800365e <HAL_RCC_OscConfig+0x75a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a0f      	ldr	r2, [pc, #60]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800362c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003632:	f7fe fa03 	bl	8001a3c <HAL_GetTick>
 8003636:	61f8      	str	r0, [r7, #28]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x748>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363a:	f7fe f9ff 	bl	8001a3c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e009      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_RCC_OscConfig+0x764>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x736>
 8003658:	e001      	b.n	800365e <HAL_RCC_OscConfig+0x75a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x75c>
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3728      	adds	r7, #40	; 0x28
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	58024400 	.word	0x58024400
 800366c:	fffffc0c 	.word	0xfffffc0c
 8003670:	ffff0007 	.word	0xffff0007

08003674 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e18d      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003688:	4b8a      	ldr	r3, [pc, #552]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d910      	bls.n	80036b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003696:	4b87      	ldr	r3, [pc, #540]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	4985      	ldr	r1, [pc, #532]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a6:	4b83      	ldr	r3, [pc, #524]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d001      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e175      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x72>
  {
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	4b7b      	ldr	r3, [pc, #492]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d908      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036d4:	4b78      	ldr	r3, [pc, #480]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4975      	ldr	r1, [pc, #468]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	618b      	str	r3, [r1, #24]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCC_ClockConfig+0xa0>
  {
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	4b70      	ldr	r3, [pc, #448]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036fe:	429a      	cmp	r2, r3
 8003700:	d908      	bls.n	8003714 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003702:	4b6d      	ldr	r3, [pc, #436]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	496a      	ldr	r1, [pc, #424]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003710:	4313      	orrs	r3, r2
 8003712:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d010      	beq.n	8003742 <HAL_RCC_ClockConfig+0xce>
  {
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699a      	ldr	r2, [r3, #24]
 8003724:	4b64      	ldr	r3, [pc, #400]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800372c:	429a      	cmp	r2, r3
 800372e:	d908      	bls.n	8003742 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003730:	4b61      	ldr	r3, [pc, #388]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	495e      	ldr	r1, [pc, #376]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800373e:	4313      	orrs	r3, r2
 8003740:	61cb      	str	r3, [r1, #28]
    }
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b00      	cmp	r3, #0
 800374c:	d010      	beq.n	8003770 <HAL_RCC_ClockConfig+0xfc>
  {
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69da      	ldr	r2, [r3, #28]
 8003752:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375a:	429a      	cmp	r2, r3
 800375c:	d908      	bls.n	8003770 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800375e:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	4953      	ldr	r1, [pc, #332]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800376c:	4313      	orrs	r3, r2
 800376e:	620b      	str	r3, [r1, #32]
    }
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d010      	beq.n	800379e <HAL_RCC_ClockConfig+0x12a>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	429a      	cmp	r2, r3
 800378a:	d908      	bls.n	800379e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800378c:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f023 020f 	bic.w	r2, r3, #15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4947      	ldr	r1, [pc, #284]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 800379a:	4313      	orrs	r3, r2
 800379c:	618b      	str	r3, [r1, #24]
    }
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d055      	beq.n	8003856 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037aa:	4b43      	ldr	r3, [pc, #268]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	4940      	ldr	r1, [pc, #256]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	618b      	str	r3, [r1, #24]
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037c4:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d121      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0e7      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d107      	bne.n	80037ec <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d115      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0db      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d107      	bne.n	8003804 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037f4:	4b30      	ldr	r3, [pc, #192]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0cf      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003804:	4b2c      	ldr	r3, [pc, #176]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0c7      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003814:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f023 0207 	bic.w	r2, r3, #7
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4925      	ldr	r1, [pc, #148]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003822:	4313      	orrs	r3, r2
 8003824:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fe f909 	bl	8001a3c <HAL_GetTick>
 800382a:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382c:	e00a      	b.n	8003844 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382e:	f7fe f905 	bl	8001a3c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0af      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003844:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	429a      	cmp	r2, r3
 8003854:	d1eb      	bne.n	800382e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d010      	beq.n	8003884 <HAL_RCC_ClockConfig+0x210>
  {
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68da      	ldr	r2, [r3, #12]
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	429a      	cmp	r2, r3
 8003870:	d208      	bcs.n	8003884 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f023 020f 	bic.w	r2, r3, #15
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	490e      	ldr	r1, [pc, #56]	; (80038b8 <HAL_RCC_ClockConfig+0x244>)
 8003880:	4313      	orrs	r3, r2
 8003882:	618b      	str	r3, [r1, #24]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d214      	bcs.n	80038bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 020f 	bic.w	r2, r3, #15
 800389a:	4906      	ldr	r1, [pc, #24]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_RCC_ClockConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e077      	b.n	80039a4 <HAL_RCC_ClockConfig+0x330>
 80038b4:	52002000 	.word	0x52002000
 80038b8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <HAL_RCC_ClockConfig+0x276>
 {
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	4b37      	ldr	r3, [pc, #220]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d208      	bcs.n	80038ea <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038d8:	4b34      	ldr	r3, [pc, #208]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	4931      	ldr	r1, [pc, #196]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	618b      	str	r3, [r1, #24]
   }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d010      	beq.n	8003918 <HAL_RCC_ClockConfig+0x2a4>
 {
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003902:	429a      	cmp	r2, r3
 8003904:	d208      	bcs.n	8003918 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003906:	4b29      	ldr	r3, [pc, #164]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4926      	ldr	r1, [pc, #152]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 8003914:	4313      	orrs	r3, r2
 8003916:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <HAL_RCC_ClockConfig+0x2d2>
 {
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699a      	ldr	r2, [r3, #24]
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003930:	429a      	cmp	r2, r3
 8003932:	d208      	bcs.n	8003946 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	491a      	ldr	r1, [pc, #104]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 8003942:	4313      	orrs	r3, r2
 8003944:	61cb      	str	r3, [r1, #28]
   }
 }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <HAL_RCC_ClockConfig+0x300>
 {
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800395e:	429a      	cmp	r2, r3
 8003960:	d208      	bcs.n	8003974 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	490f      	ldr	r1, [pc, #60]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 8003970:	4313      	orrs	r3, r2
 8003972:	620b      	str	r3, [r1, #32]
   }
 }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003974:	f000 f822 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8003978:	4601      	mov	r1, r0
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <HAL_RCC_ClockConfig+0x338>)
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_RCC_ClockConfig+0x33c>)
 8003986:	5cd3      	ldrb	r3, [r2, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa21 f303 	lsr.w	r3, r1, r3
 8003990:	4a08      	ldr	r2, [pc, #32]	; (80039b4 <HAL_RCC_ClockConfig+0x340>)
 8003992:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003994:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <HAL_RCC_ClockConfig+0x344>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe f805 	bl	80019a8 <HAL_InitTick>
 800399e:	4603      	mov	r3, r0
 80039a0:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80039a2:	7afb      	ldrb	r3, [r7, #11]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	58024400 	.word	0x58024400
 80039b0:	08009b4c 	.word	0x08009b4c
 80039b4:	24000004 	.word	0x24000004
 80039b8:	2400000c 	.word	0x2400000c

080039bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	; 0x24
 80039c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039c2:	4baf      	ldr	r3, [pc, #700]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ca:	2b18      	cmp	r3, #24
 80039cc:	f200 814e 	bhi.w	8003c6c <HAL_RCC_GetSysClockFreq+0x2b0>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a3d 	.word	0x08003a3d
 80039dc:	08003c6d 	.word	0x08003c6d
 80039e0:	08003c6d 	.word	0x08003c6d
 80039e4:	08003c6d 	.word	0x08003c6d
 80039e8:	08003c6d 	.word	0x08003c6d
 80039ec:	08003c6d 	.word	0x08003c6d
 80039f0:	08003c6d 	.word	0x08003c6d
 80039f4:	08003c6d 	.word	0x08003c6d
 80039f8:	08003a63 	.word	0x08003a63
 80039fc:	08003c6d 	.word	0x08003c6d
 8003a00:	08003c6d 	.word	0x08003c6d
 8003a04:	08003c6d 	.word	0x08003c6d
 8003a08:	08003c6d 	.word	0x08003c6d
 8003a0c:	08003c6d 	.word	0x08003c6d
 8003a10:	08003c6d 	.word	0x08003c6d
 8003a14:	08003c6d 	.word	0x08003c6d
 8003a18:	08003a69 	.word	0x08003a69
 8003a1c:	08003c6d 	.word	0x08003c6d
 8003a20:	08003c6d 	.word	0x08003c6d
 8003a24:	08003c6d 	.word	0x08003c6d
 8003a28:	08003c6d 	.word	0x08003c6d
 8003a2c:	08003c6d 	.word	0x08003c6d
 8003a30:	08003c6d 	.word	0x08003c6d
 8003a34:	08003c6d 	.word	0x08003c6d
 8003a38:	08003a6f 	.word	0x08003a6f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a3c:	4b90      	ldr	r3, [pc, #576]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a48:	4b8d      	ldr	r3, [pc, #564]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	4a8c      	ldr	r2, [pc, #560]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a5a:	e10a      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a5c:	4b89      	ldr	r3, [pc, #548]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a5e:	61bb      	str	r3, [r7, #24]
    break;
 8003a60:	e107      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a62:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a64:	61bb      	str	r3, [r7, #24]
    break;
 8003a66:	e104      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a68:	4b88      	ldr	r3, [pc, #544]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003a6a:	61bb      	str	r3, [r7, #24]
    break;
 8003a6c:	e101      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a6e:	4b84      	ldr	r3, [pc, #528]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a78:	4b81      	ldr	r3, [pc, #516]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a82:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a84:	4b7e      	ldr	r3, [pc, #504]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003a8e:	4b7c      	ldr	r3, [pc, #496]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	08db      	lsrs	r3, r3, #3
 8003a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 80da 	beq.w	8003c66 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d05a      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x1b2>
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d302      	bcc.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x106>
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d078      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x1f6>
 8003ac0:	e099      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ac2:	4b6f      	ldr	r3, [pc, #444]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0320 	and.w	r3, r3, #32
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d02d      	beq.n	8003b2a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ace:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	08db      	lsrs	r3, r3, #3
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	; (8003c84 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003ada:	fa22 f303 	lsr.w	r3, r2, r3
 8003ade:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	ee07 3a90 	vmov	s15, r3
 8003ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	ee07 3a90 	vmov	s15, r3
 8003af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003af8:	4b61      	ldr	r3, [pc, #388]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b00:	ee07 3a90 	vmov	s15, r3
 8003b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b08:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b0c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b24:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b28:	e087      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b34:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003c94 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3c:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b50:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b6c:	e065      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b78:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b80:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b90:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b94:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bb0:	e043      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	ee07 3a90 	vmov	s15, r3
 8003bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003c9c <HAL_RCC_GetSysClockFreq+0x2e0>
 8003bc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bd8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf4:	e021      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	ee07 3a90 	vmov	s15, r3
 8003bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c00:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003c98 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003c04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c18:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c1c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003c90 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c38:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	0a5b      	lsrs	r3, r3, #9
 8003c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c44:	3301      	adds	r3, #1
 8003c46:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c52:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c5e:	ee17 3a90 	vmov	r3, s15
 8003c62:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c64:	e005      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61bb      	str	r3, [r7, #24]
    break;
 8003c6a:	e002      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c6e:	61bb      	str	r3, [r7, #24]
    break;
 8003c70:	bf00      	nop
  }

  return sysclockfreq;
 8003c72:	69bb      	ldr	r3, [r7, #24]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3724      	adds	r7, #36	; 0x24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	58024400 	.word	0x58024400
 8003c84:	03d09000 	.word	0x03d09000
 8003c88:	003d0900 	.word	0x003d0900
 8003c8c:	007a1200 	.word	0x007a1200
 8003c90:	46000000 	.word	0x46000000
 8003c94:	4c742400 	.word	0x4c742400
 8003c98:	4a742400 	.word	0x4a742400
 8003c9c:	4af42400 	.word	0x4af42400

08003ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ca4:	f001 f9e2 	bl	800506c <HAL_RCCEx_GetD1SysClockFreq>
 8003ca8:	4601      	mov	r1, r0
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <HAL_RCC_GetHCLKFreq+0x2c>)
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x30>)
 8003cb4:	5cd3      	ldrb	r3, [r2, r3]
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	fa21 f303 	lsr.w	r3, r1, r3
 8003cbe:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003cc0:	6013      	str	r3, [r2, #0]
  return SystemD2Clock;
 8003cc2:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCC_GetHCLKFreq+0x34>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	58024400 	.word	0x58024400
 8003cd0:	08009b4c 	.word	0x08009b4c
 8003cd4:	24000008 	.word	0x24000008

08003cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003cdc:	f7ff ffe0 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4601      	mov	r1, r0
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	091b      	lsrs	r3, r3, #4
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cee:	5cd3      	ldrb	r3, [r2, r3]
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	08009b4c 	.word	0x08009b4c

08003d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d08:	f7ff ffca 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8003d0c:	4601      	mov	r1, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d1a:	5cd3      	ldrb	r3, [r2, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	08009b4c 	.word	0x08009b4c

08003d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d03d      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d54:	d013      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5a:	d802      	bhi.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d007      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003d60:	e01f      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d66:	d013      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003d68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d6c:	d01c      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003d6e:	e018      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d70:	4baf      	ldr	r3, [pc, #700]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	4aae      	ldr	r2, [pc, #696]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d7c:	e015      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3304      	adds	r3, #4
 8003d82:	2102      	movs	r1, #2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 f98d 	bl	80050a4 <RCCEx_PLL2_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003d8e:	e00c      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3324      	adds	r3, #36	; 0x24
 8003d94:	2102      	movs	r1, #2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 fa36 	bl	8005208 <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
      break;
 8003da6:	e000      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003daa:	7dfb      	ldrb	r3, [r7, #23]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003db0:	4b9f      	ldr	r3, [pc, #636]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dbc:	499c      	ldr	r1, [pc, #624]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	650b      	str	r3, [r1, #80]	; 0x50
 8003dc2:	e001      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc4:	7dfb      	ldrb	r3, [r7, #23]
 8003dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d03d      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d826      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df9 	.word	0x08003df9
 8003de8:	08003e07 	.word	0x08003e07
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	08003e31 	.word	0x08003e31
 8003df4:	08003e31 	.word	0x08003e31
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df8:	4b8d      	ldr	r3, [pc, #564]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	4a8c      	ldr	r2, [pc, #560]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e04:	e015      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 f949 	bl	80050a4 <RCCEx_PLL2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e16:	e00c      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3324      	adds	r3, #36	; 0x24
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 f9f2 	bl	8005208 <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003e30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e38:	4b7d      	ldr	r3, [pc, #500]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	f023 0207 	bic.w	r2, r3, #7
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e44:	497a      	ldr	r1, [pc, #488]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	650b      	str	r3, [r1, #80]	; 0x50
 8003e4a:	e001      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4c:	7dfb      	ldrb	r3, [r7, #23]
 8003e4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03e      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e60:	2b80      	cmp	r3, #128	; 0x80
 8003e62:	d01c      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d804      	bhi.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	d00d      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003e70:	e01e      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003e72:	2bc0      	cmp	r3, #192	; 0xc0
 8003e74:	d01f      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7a:	d01e      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e7e:	4b6c      	ldr	r3, [pc, #432]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	4a6b      	ldr	r2, [pc, #428]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e8a:	e017      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 f906 	bl	80050a4 <RCCEx_PLL2_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003e9c:	e00e      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3324      	adds	r3, #36	; 0x24
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f001 f9af 	bl	8005208 <RCCEx_PLL3_Config>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eae:	e005      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ece:	4958      	ldr	r1, [pc, #352]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	650b      	str	r3, [r1, #80]	; 0x50
 8003ed4:	e001      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed6:	7dfb      	ldrb	r3, [r7, #23]
 8003ed8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef0:	d01f      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef6:	d805      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00a      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f00:	d00e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003f02:	e01f      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003f04:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f08:	d01f      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003f0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f0e:	d01e      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f10:	e018      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f12:	4b47      	ldr	r3, [pc, #284]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	4a46      	ldr	r2, [pc, #280]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f1e:	e017      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3304      	adds	r3, #4
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 f8bc 	bl	80050a4 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f30:	e00e      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3324      	adds	r3, #36	; 0x24
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f965 	bl	8005208 <RCCEx_PLL3_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f42:	e005      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f64:	4932      	ldr	r1, [pc, #200]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d044      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f86:	d01f      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f8c:	d805      	bhi.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003f92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f96:	d00e      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003f98:	e01f      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003f9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f9e:	d01f      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa4:	d01e      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fa6:	e018      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	4a20      	ldr	r2, [pc, #128]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fb4:	e017      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2100      	movs	r1, #0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f001 f871 	bl	80050a4 <RCCEx_PLL2_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003fc6:	e00e      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3324      	adds	r3, #36	; 0x24
 8003fcc:	2100      	movs	r1, #0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f91a 	bl	8005208 <RCCEx_PLL3_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fd8:	e005      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10a      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ffa:	490d      	ldr	r1, [pc, #52]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	658b      	str	r3, [r1, #88]	; 0x58
 8004000:	e001      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d035      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004016:	2b10      	cmp	r3, #16
 8004018:	d00c      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800401a:	2b10      	cmp	r3, #16
 800401c:	d802      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01b      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004022:	e017      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004024:	2b20      	cmp	r3, #32
 8004026:	d00c      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004028:	2b30      	cmp	r3, #48	; 0x30
 800402a:	d018      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800402c:	e012      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004034:	4baf      	ldr	r3, [pc, #700]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4aae      	ldr	r2, [pc, #696]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800403a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004040:	e00e      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 f82b 	bl	80050a4 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004052:	e005      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	75fb      	strb	r3, [r7, #23]
      break;
 8004058:	e002      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800405e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004066:	4ba3      	ldr	r3, [pc, #652]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004072:	49a0      	ldr	r1, [pc, #640]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004074:	4313      	orrs	r3, r2
 8004076:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004078:	e001      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d042      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004092:	d01f      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d805      	bhi.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d00e      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80040a4:	e01f      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80040a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040aa:	d01f      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80040ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b0:	d01e      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040b2:	e018      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040b4:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	4a8e      	ldr	r2, [pc, #568]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040c0:	e017      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3304      	adds	r3, #4
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 ffeb 	bl	80050a4 <RCCEx_PLL2_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040d2:	e00e      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3324      	adds	r3, #36	; 0x24
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 f894 	bl	8005208 <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80040e4:	e005      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	75fb      	strb	r3, [r7, #23]
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80040f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f2:	7dfb      	ldrb	r3, [r7, #23]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80040f8:	4b7e      	ldr	r3, [pc, #504]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	497b      	ldr	r1, [pc, #492]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004106:	4313      	orrs	r3, r2
 8004108:	650b      	str	r3, [r1, #80]	; 0x50
 800410a:	e001      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d042      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004124:	d01b      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412a:	d805      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d022      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004136:	e01b      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800413c:	d01d      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800413e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004142:	d01c      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004148:	d01b      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800414a:	e011      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	2101      	movs	r1, #1
 8004152:	4618      	mov	r0, r3
 8004154:	f000 ffa6 	bl	80050a4 <RCCEx_PLL2_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800415c:	e012      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3324      	adds	r3, #36	; 0x24
 8004162:	2101      	movs	r1, #1
 8004164:	4618      	mov	r0, r3
 8004166:	f001 f84f 	bl	8005208 <RCCEx_PLL3_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800416e:	e009      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
      break;
 8004174:	e006      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004176:	bf00      	nop
 8004178:	e004      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800417a:	bf00      	nop
 800417c:	e002      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800417e:	bf00      	nop
 8004180:	e000      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800418a:	4b5a      	ldr	r3, [pc, #360]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004196:	4957      	ldr	r1, [pc, #348]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004198:	4313      	orrs	r3, r2
 800419a:	650b      	str	r3, [r1, #80]	; 0x50
 800419c:	e001      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d044      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b8:	d01b      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80041ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041be:	d805      	bhi.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d022      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80041ca:	e01b      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80041cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d0:	d01d      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d6:	d01c      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80041d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041dc:	d01b      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80041de:	e011      	b.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2101      	movs	r1, #1
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 ff5c 	bl	80050a4 <RCCEx_PLL2_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80041f0:	e012      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	3324      	adds	r3, #36	; 0x24
 80041f6:	2101      	movs	r1, #1
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 f805 	bl	8005208 <RCCEx_PLL3_Config>
 80041fe:	4603      	mov	r3, r0
 8004200:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004202:	e009      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* HSE,  oscillator is used as source of SPI6 clock */
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
      break;
 8004208:	e006      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800420a:	bf00      	nop
 800420c:	e004      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10a      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800421e:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800422c:	4931      	ldr	r1, [pc, #196]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800422e:	4313      	orrs	r3, r2
 8004230:	658b      	str	r3, [r1, #88]	; 0x58
 8004232:	e001      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d02d      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800424c:	d005      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800424e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004258:	e00f      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	4a25      	ldr	r2, [pc, #148]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004264:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004266:	e00c      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	2101      	movs	r1, #1
 800426e:	4618      	mov	r0, r3
 8004270:	f000 ff18 	bl	80050a4 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004278:	e003      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
      break;
 800427e:	e000      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8004280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004282:	7dfb      	ldrb	r3, [r7, #23]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004294:	4917      	ldr	r1, [pc, #92]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	650b      	str	r3, [r1, #80]	; 0x50
 800429a:	e001      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	75bb      	strb	r3, [r7, #22]
    }
  }

#endif /*FDCAN1 || FDCAN2*/
  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d035      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d81b      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042b4:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042f9 	.word	0x080042f9
 80042c0:	080042cd 	.word	0x080042cd
 80042c4:	080042db 	.word	0x080042db
 80042c8:	080042f9 	.word	0x080042f9
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042d8:	e00f      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3304      	adds	r3, #4
 80042de:	2102      	movs	r1, #2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fedf 	bl	80050a4 <RCCEx_PLL2_Config>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80042ea:	e006      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	75fb      	strb	r3, [r7, #23]
      break;
 80042f0:	e003      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80042f2:	bf00      	nop
 80042f4:	58024400 	.word	0x58024400
      break;
 80042f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004300:	4bba      	ldr	r3, [pc, #744]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004304:	f023 0203 	bic.w	r2, r3, #3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430c:	49b7      	ldr	r1, [pc, #732]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004312:	e001      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
 8004316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8086 	beq.w	8004432 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004326:	4bb2      	ldr	r3, [pc, #712]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4ab1      	ldr	r2, [pc, #708]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004332:	f7fd fb83 	bl	8001a3c <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004338:	e009      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fd fb7f 	bl	8001a3c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	; 0x64
 8004346:	d902      	bls.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	75fb      	strb	r3, [r7, #23]
        break;
 800434c:	e005      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800434e:	4ba8      	ldr	r3, [pc, #672]	; (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ef      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d166      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004360:	4ba2      	ldr	r3, [pc, #648]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800436a:	4053      	eors	r3, r2
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	2b00      	cmp	r3, #0
 8004372:	d013      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004374:	4b9d      	ldr	r3, [pc, #628]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800437c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800437e:	4b9b      	ldr	r3, [pc, #620]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a9a      	ldr	r2, [pc, #616]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800438a:	4b98      	ldr	r3, [pc, #608]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a97      	ldr	r2, [pc, #604]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004390:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004396:	4a95      	ldr	r2, [pc, #596]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a6:	d115      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fd fb48 	bl	8001a3c <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ae:	e00b      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fd fb44 	bl	8001a3c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80043be:	4293      	cmp	r3, r2
 80043c0:	d902      	bls.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	75fb      	strb	r3, [r7, #23]
            break;
 80043c6:	e005      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043c8:	4b88      	ldr	r3, [pc, #544]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ed      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80043d4:	7dfb      	ldrb	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d126      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043e8:	d10d      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80043ea:	4b80      	ldr	r3, [pc, #512]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043f8:	0919      	lsrs	r1, r3, #4
 80043fa:	4b7e      	ldr	r3, [pc, #504]	; (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80043fc:	400b      	ands	r3, r1
 80043fe:	497b      	ldr	r1, [pc, #492]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004400:	4313      	orrs	r3, r2
 8004402:	610b      	str	r3, [r1, #16]
 8004404:	e005      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004406:	4b79      	ldr	r3, [pc, #484]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	4a78      	ldr	r2, [pc, #480]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800440c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004410:	6113      	str	r3, [r2, #16]
 8004412:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	4972      	ldr	r1, [pc, #456]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	670b      	str	r3, [r1, #112]	; 0x70
 8004426:	e004      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	75bb      	strb	r3, [r7, #22]
 800442c:	e001      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d07d      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004442:	2b28      	cmp	r3, #40	; 0x28
 8004444:	d866      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	0800451b 	.word	0x0800451b
 8004450:	08004515 	.word	0x08004515
 8004454:	08004515 	.word	0x08004515
 8004458:	08004515 	.word	0x08004515
 800445c:	08004515 	.word	0x08004515
 8004460:	08004515 	.word	0x08004515
 8004464:	08004515 	.word	0x08004515
 8004468:	08004515 	.word	0x08004515
 800446c:	080044f1 	.word	0x080044f1
 8004470:	08004515 	.word	0x08004515
 8004474:	08004515 	.word	0x08004515
 8004478:	08004515 	.word	0x08004515
 800447c:	08004515 	.word	0x08004515
 8004480:	08004515 	.word	0x08004515
 8004484:	08004515 	.word	0x08004515
 8004488:	08004515 	.word	0x08004515
 800448c:	08004503 	.word	0x08004503
 8004490:	08004515 	.word	0x08004515
 8004494:	08004515 	.word	0x08004515
 8004498:	08004515 	.word	0x08004515
 800449c:	08004515 	.word	0x08004515
 80044a0:	08004515 	.word	0x08004515
 80044a4:	08004515 	.word	0x08004515
 80044a8:	08004515 	.word	0x08004515
 80044ac:	0800451b 	.word	0x0800451b
 80044b0:	08004515 	.word	0x08004515
 80044b4:	08004515 	.word	0x08004515
 80044b8:	08004515 	.word	0x08004515
 80044bc:	08004515 	.word	0x08004515
 80044c0:	08004515 	.word	0x08004515
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004515 	.word	0x08004515
 80044cc:	0800451b 	.word	0x0800451b
 80044d0:	08004515 	.word	0x08004515
 80044d4:	08004515 	.word	0x08004515
 80044d8:	08004515 	.word	0x08004515
 80044dc:	08004515 	.word	0x08004515
 80044e0:	08004515 	.word	0x08004515
 80044e4:	08004515 	.word	0x08004515
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800451b 	.word	0x0800451b
    case RCC_USART16CLKSOURCE_D2PCLK2: /* D2PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 fdd4 	bl	80050a4 <RCCEx_PLL2_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004500:	e00c      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3324      	adds	r3, #36	; 0x24
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fe7d 	bl	8005208 <RCCEx_PLL3_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004512:	e003      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	75fb      	strb	r3, [r7, #23]
      break;
 8004518:	e000      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800451a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004522:	4b32      	ldr	r3, [pc, #200]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004526:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452e:	492f      	ldr	r1, [pc, #188]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	654b      	str	r3, [r1, #84]	; 0x54
 8004534:	e001      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
 8004538:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d037      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	2b05      	cmp	r3, #5
 800454c:	d820      	bhi.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800454e:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	08004597 	.word	0x08004597
 8004558:	0800456d 	.word	0x0800456d
 800455c:	0800457f 	.word	0x0800457f
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
    case RCC_USART234578CLKSOURCE_D2PCLK1: /* D2PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fd96 	bl	80050a4 <RCCEx_PLL2_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800457c:	e00c      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	3324      	adds	r3, #36	; 0x24
 8004582:	2101      	movs	r1, #1
 8004584:	4618      	mov	r0, r3
 8004586:	f000 fe3f 	bl	8005208 <RCCEx_PLL3_Config>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800458e:	e003      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	75fb      	strb	r3, [r7, #23]
      break;
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8004596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800459e:	4b13      	ldr	r3, [pc, #76]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a2:	f023 0207 	bic.w	r2, r3, #7
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	4910      	ldr	r1, [pc, #64]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	654b      	str	r3, [r1, #84]	; 0x54
 80045b0:	e001      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	7dfb      	ldrb	r3, [r7, #23]
 80045b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d040      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d827      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	08004623 	.word	0x08004623
 80045d8:	080045f9 	.word	0x080045f9
 80045dc:	0800460b 	.word	0x0800460b
 80045e0:	08004623 	.word	0x08004623
 80045e4:	08004623 	.word	0x08004623
 80045e8:	08004623 	.word	0x08004623
 80045ec:	58024400 	.word	0x58024400
 80045f0:	58024800 	.word	0x58024800
 80045f4:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_D3PCLK1: /* D3PCLK1 as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd50 	bl	80050a4 <RCCEx_PLL2_Config>
 8004604:	4603      	mov	r3, r0
 8004606:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004608:	e00c      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3324      	adds	r3, #36	; 0x24
 800460e:	2101      	movs	r1, #1
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fdf9 	bl	8005208 <RCCEx_PLL3_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800461a:	e003      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
      break;
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004624:	7dfb      	ldrb	r3, [r7, #23]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10a      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800462a:	4bb3      	ldr	r3, [pc, #716]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f023 0207 	bic.w	r2, r3, #7
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004638:	49af      	ldr	r1, [pc, #700]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	658b      	str	r3, [r1, #88]	; 0x58
 800463e:	e001      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	7dfb      	ldrb	r3, [r7, #23]
 8004642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d044      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800465a:	d01b      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800465c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004660:	d805      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004662:	2b00      	cmp	r3, #0
 8004664:	d022      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8004666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800466c:	e01b      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d01d      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004674:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004678:	d01c      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800467a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800467e:	d01b      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004680:	e011      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	2100      	movs	r1, #0
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fd0b 	bl	80050a4 <RCCEx_PLL2_Config>
 800468e:	4603      	mov	r3, r0
 8004690:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004692:	e012      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3324      	adds	r3, #36	; 0x24
 8004698:	2102      	movs	r1, #2
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fdb4 	bl	8005208 <RCCEx_PLL3_Config>
 80046a0:	4603      	mov	r3, r0
 80046a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046a4:	e009      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	75fb      	strb	r3, [r7, #23]
      break;
 80046aa:	e006      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046ac:	bf00      	nop
 80046ae:	e004      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046b0:	bf00      	nop
 80046b2:	e002      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046b4:	bf00      	nop
 80046b6:	e000      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ba:	7dfb      	ldrb	r3, [r7, #23]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c0:	4b8d      	ldr	r3, [pc, #564]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ce:	498a      	ldr	r1, [pc, #552]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	654b      	str	r3, [r1, #84]	; 0x54
 80046d4:	e001      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	7dfb      	ldrb	r3, [r7, #23]
 80046d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d044      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f0:	d01b      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f6:	d805      	bhi.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d022      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80046fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004702:	e01b      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004708:	d01d      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800470a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800470e:	d01c      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004714:	d01b      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004716:	e011      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	2100      	movs	r1, #0
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fcc0 	bl	80050a4 <RCCEx_PLL2_Config>
 8004724:	4603      	mov	r3, r0
 8004726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004728:	e012      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	3324      	adds	r3, #36	; 0x24
 800472e:	2102      	movs	r1, #2
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fd69 	bl	8005208 <RCCEx_PLL3_Config>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800473a:	e009      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	75fb      	strb	r3, [r7, #23]
      break;
 8004740:	e006      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004742:	bf00      	nop
 8004744:	e004      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004746:	bf00      	nop
 8004748:	e002      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800474a:	bf00      	nop
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800474e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10a      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004756:	4b68      	ldr	r3, [pc, #416]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004764:	4964      	ldr	r1, [pc, #400]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004766:	4313      	orrs	r3, r2
 8004768:	658b      	str	r3, [r1, #88]	; 0x58
 800476a:	e001      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	7dfb      	ldrb	r3, [r7, #23]
 800476e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004778:	2b00      	cmp	r3, #0
 800477a:	d044      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004786:	d01b      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8004788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478c:	d805      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d022      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004798:	e01b      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800479a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479e:	d01d      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80047a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047a4:	d01c      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80047a6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047aa:	d01b      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80047ac:	e011      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_D3PCLK1:      /* D3PCLK1 as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	2100      	movs	r1, #0
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fc75 	bl	80050a4 <RCCEx_PLL2_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047be:	e012      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3324      	adds	r3, #36	; 0x24
 80047c4:	2102      	movs	r1, #2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fd1e 	bl	8005208 <RCCEx_PLL3_Config>
 80047cc:	4603      	mov	r3, r0
 80047ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047d0:	e009      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
      break;
 80047d6:	e006      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047d8:	bf00      	nop
 80047da:	e004      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047dc:	bf00      	nop
 80047de:	e002      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80047e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10a      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80047ec:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047fa:	493f      	ldr	r1, [pc, #252]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	658b      	str	r3, [r1, #88]	; 0x58
 8004800:	e001      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d01b      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800481c:	d10b      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3324      	adds	r3, #36	; 0x24
 8004822:	2102      	movs	r1, #2
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fcef 	bl	8005208 <RCCEx_PLL3_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        {
          status = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75bb      	strb	r3, [r7, #22]
 8004834:	e009      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
        }
    }

    else
    {
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004836:	4b30      	ldr	r3, [pc, #192]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004844:	492c      	ldr	r1, [pc, #176]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 8004846:	4313      	orrs	r3, r2
 8004848:	654b      	str	r3, [r1, #84]	; 0x54
    }

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01b      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004860:	d10b      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3324      	adds	r3, #36	; 0x24
 8004866:	2102      	movs	r1, #2
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fccd 	bl	8005208 <RCCEx_PLL3_Config>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      {
        status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	75bb      	strb	r3, [r7, #22]
 8004878:	e009      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xb5e>
      }
    }

    else
    {
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800487a:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004888:	491b      	ldr	r1, [pc, #108]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 800488a:	4313      	orrs	r3, r2
 800488c:	658b      	str	r3, [r1, #88]	; 0x58
    }
  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d032      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a4:	d00d      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80048a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048aa:	d016      	beq.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d111      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3304      	adds	r3, #4
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fbf4 	bl	80050a4 <RCCEx_PLL2_Config>
 80048bc:	4603      	mov	r3, r0
 80048be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048c0:	e00c      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xbac>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3324      	adds	r3, #36	; 0x24
 80048c6:	2102      	movs	r1, #2
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fc9d 	bl	8005208 <RCCEx_PLL3_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048d2:	e003      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	75fb      	strb	r3, [r7, #23]
      break;
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
      break;
 80048da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048dc:	7dfb      	ldrb	r3, [r7, #23]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048f0:	4901      	ldr	r1, [pc, #4]	; (80048f8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	658b      	str	r3, [r1, #88]	; 0x58
 80048f6:	e003      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80048f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
 80048fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d02f      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004916:	d00c      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 8004918:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800491c:	d015      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800491e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004922:	d10f      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xc14>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004924:	4b79      	ldr	r3, [pc, #484]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	4a78      	ldr	r2, [pc, #480]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800492a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004930:	e00c      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3324      	adds	r3, #36	; 0x24
 8004936:	2101      	movs	r1, #1
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fc65 	bl	8005208 <RCCEx_PLL3_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004942:	e003      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	75fb      	strb	r3, [r7, #23]
      break;
 8004948:	e000      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800494a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004952:	4b6e      	ldr	r3, [pc, #440]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004960:	496a      	ldr	r1, [pc, #424]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	654b      	str	r3, [r1, #84]	; 0x54
 8004966:	e001      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d029      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc58>
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d007      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xc66>
 8004986:	e00f      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004988:	4b60      	ldr	r3, [pc, #384]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	4a5f      	ldr	r2, [pc, #380]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 800498e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004992:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004994:	e00b      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	2102      	movs	r1, #2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fb81 	bl	80050a4 <RCCEx_PLL2_Config>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049a6:	e002      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0xc7e>

    default:
      ret = HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	75fb      	strb	r3, [r7, #23]
      break;
 80049ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ae:	7dfb      	ldrb	r3, [r7, #23]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d109      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049b4:	4b55      	ldr	r3, [pc, #340]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c0:	4952      	ldr	r1, [pc, #328]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049c6:	e001      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	7dfb      	ldrb	r3, [r7, #23]
 80049ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3324      	adds	r3, #36	; 0x24
 80049dc:	2102      	movs	r1, #2
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fc12 	bl	8005208 <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d001      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    {
      status=HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d02f      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
  {

    switch(PeriphClkInit->RngClockSelection)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a02:	d00c      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xcee>
 8004a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a08:	d802      	bhi.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xce0>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d011      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004a0e:	e00d      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
 8004a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a14:	d00f      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1a:	d00e      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8004a1c:	e006      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xcfc>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	4a3a      	ldr	r2, [pc, #232]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a2a:	e007      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a30:	e004      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
      break;
 8004a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a42:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4e:	492f      	ldr	r1, [pc, #188]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	654b      	str	r3, [r1, #84]	; 0x54
 8004a54:	e001      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a66:	4b29      	ldr	r3, [pc, #164]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a72:	4926      	ldr	r1, [pc, #152]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d009      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xd68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004a84:	4b21      	ldr	r3, [pc, #132]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004a92:	491e      	ldr	r1, [pc, #120]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ab0:	4916      	ldr	r1, [pc, #88]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	650b      	str	r3, [r1, #80]	; 0x50
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ac8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004acc:	6113      	str	r3, [r2, #16]
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ad8:	490c      	ldr	r1, [pc, #48]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da08      	bge.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	4906      	ldr	r1, [pc, #24]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0xddc>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004af8:	7dbb      	ldrb	r3, [r7, #22]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
  }
  return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	58024400 	.word	0x58024400

08004b10 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b14:	f7ff f8c4 	bl	8003ca0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4601      	mov	r1, r0
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b26:	5cd3      	ldrb	r3, [r2, r3]
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	58024400 	.word	0x58024400
 8004b38:	08009b4c 	.word	0x08009b4c

08004b3c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b089      	sub	sp, #36	; 0x24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b44:	4b9d      	ldr	r3, [pc, #628]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	f003 0303 	and.w	r3, r3, #3
 8004b4c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12)  ;
 8004b4e:	4b9b      	ldr	r3, [pc, #620]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	0b1b      	lsrs	r3, r3, #12
 8004b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b58:	617b      	str	r3, [r7, #20]
  pll2fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN;
 8004b5a:	4b98      	ldr	r3, [pc, #608]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004b64:	4b95      	ldr	r3, [pc, #596]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	08db      	lsrs	r3, r3, #3
 8004b6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	fb02 f303 	mul.w	r3, r2, r3
 8004b74:	ee07 3a90 	vmov	s15, r3
 8004b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 810a 	beq.w	8004d9c <HAL_RCCEx_GetPLL2ClockFreq+0x260>
  {
    switch (pllsource)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d05a      	beq.n	8004c44 <HAL_RCCEx_GetPLL2ClockFreq+0x108>
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d302      	bcc.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x5c>
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d078      	beq.n	8004c88 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8004b96:	e099      	b.n	8004ccc <HAL_RCCEx_GetPLL2ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b98:	4b88      	ldr	r3, [pc, #544]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d02d      	beq.n	8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ba4:	4b85      	ldr	r3, [pc, #532]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	08db      	lsrs	r3, r3, #3
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	4a84      	ldr	r2, [pc, #528]	; (8004dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b7b      	ldr	r3, [pc, #492]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004bfe:	e087      	b.n	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c12:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c1a:	ee07 3a90 	vmov	s15, r3
 8004c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c26:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c42:	e065      	b.n	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c56:	4b59      	ldr	r3, [pc, #356]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c86:	e043      	b.n	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	4b48      	ldr	r3, [pc, #288]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca2:	ee07 3a90 	vmov	s15, r3
 8004ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cae:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cca:	e021      	b.n	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1d4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	ee07 3a90 	vmov	s15, r3
 8004cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004dcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cde:	4b37      	ldr	r3, [pc, #220]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d0e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	0a5b      	lsrs	r3, r3, #9
 8004d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d36:	ee17 2a90 	vmov	r2, s15
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d3e:	4b1f      	ldr	r3, [pc, #124]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	0c1b      	lsrs	r3, r3, #16
 8004d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d48:	ee07 3a90 	vmov	s15, r3
 8004d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d64:	ee17 2a90 	vmov	r2, s15
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	0e1b      	lsrs	r3, r3, #24
 8004d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d92:	ee17 2a90 	vmov	r2, s15
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d9a:	e008      	b.n	8004dae <HAL_RCCEx_GetPLL2ClockFreq+0x272>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	609a      	str	r2, [r3, #8]
}
 8004dae:	bf00      	nop
 8004db0:	3724      	adds	r7, #36	; 0x24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	03d09000 	.word	0x03d09000
 8004dc4:	46000000 	.word	0x46000000
 8004dc8:	4c742400 	.word	0x4c742400
 8004dcc:	4a742400 	.word	0x4a742400
 8004dd0:	4af42400 	.word	0x4af42400

08004dd4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b089      	sub	sp, #36	; 0x24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ddc:	4b9d      	ldr	r3, [pc, #628]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004de6:	4b9b      	ldr	r3, [pc, #620]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dea:	0d1b      	lsrs	r3, r3, #20
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	617b      	str	r3, [r7, #20]
  pll3fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN;
 8004df2:	4b98      	ldr	r3, [pc, #608]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004dfc:	4b95      	ldr	r3, [pc, #596]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	08db      	lsrs	r3, r3, #3
 8004e02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	fb02 f303 	mul.w	r3, r2, r3
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e14:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 810a 	beq.w	8005034 <HAL_RCCEx_GetPLL3ClockFreq+0x260>
  {
    switch (pllsource)
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d05a      	beq.n	8004edc <HAL_RCCEx_GetPLL3ClockFreq+0x108>
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d302      	bcc.n	8004e30 <HAL_RCCEx_GetPLL3ClockFreq+0x5c>
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d078      	beq.n	8004f20 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8004e2e:	e099      	b.n	8004f64 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e30:	4b88      	ldr	r3, [pc, #544]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e3c:	4b85      	ldr	r3, [pc, #532]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	4a84      	ldr	r2, [pc, #528]	; (8005058 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b7b      	ldr	r3, [pc, #492]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e96:	e087      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005060 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b6a      	ldr	r3, [pc, #424]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004eda:	e065      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b59      	ldr	r3, [pc, #356]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f1e:	e043      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005068 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b48      	ldr	r3, [pc, #288]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f62:	e021      	b.n	8004fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005064 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b37      	ldr	r3, [pc, #220]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800505c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	0a5b      	lsrs	r3, r3, #9
 8004fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fce:	ee17 2a90 	vmov	r2, s15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffc:	ee17 2a90 	vmov	r2, s15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005004:	4b13      	ldr	r3, [pc, #76]	; (8005054 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800501a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800501e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502a:	ee17 2a90 	vmov	r2, s15
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005032:	e008      	b.n	8005046 <HAL_RCCEx_GetPLL3ClockFreq+0x272>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
}
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	; 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	03d09000 	.word	0x03d09000
 800505c:	46000000 	.word	0x46000000
 8005060:	4c742400 	.word	0x4c742400
 8005064:	4a742400 	.word	0x4a742400
 8005068:	4af42400 	.word	0x4af42400

0800506c <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005070:	f7fe fca4 	bl	80039bc <HAL_RCC_GetSysClockFreq>
 8005074:	4601      	mov	r1, r0
 8005076:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	0a1b      	lsrs	r3, r3, #8
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	4a06      	ldr	r2, [pc, #24]	; (800509c <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	fa21 f303 	lsr.w	r3, r1, r3
 800508c:	4a04      	ldr	r2, [pc, #16]	; (80050a0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800508e:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005090:	4b03      	ldr	r3, [pc, #12]	; (80050a0 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8005092:	681b      	ldr	r3, [r3, #0]
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	58024400 	.word	0x58024400
 800509c:	08009b4c 	.word	0x08009b4c
 80050a0:	24000004 	.word	0x24000004

080050a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b2:	4b53      	ldr	r3, [pc, #332]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d101      	bne.n	80050c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e099      	b.n	80051f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050c2:	4b4f      	ldr	r3, [pc, #316]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4e      	ldr	r2, [pc, #312]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ce:	f7fc fcb5 	bl	8001a3c <HAL_GetTick>
 80050d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050d4:	e008      	b.n	80050e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050d6:	f7fc fcb1 	bl	8001a3c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e086      	b.n	80051f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050e8:	4b45      	ldr	r3, [pc, #276]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050f4:	4b42      	ldr	r3, [pc, #264]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	493f      	ldr	r1, [pc, #252]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	628b      	str	r3, [r1, #40]	; 0x28
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	3b01      	subs	r3, #1
 800510e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	025b      	lsls	r3, r3, #9
 800511a:	b29b      	uxth	r3, r3
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	3b01      	subs	r3, #1
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005138:	4931      	ldr	r1, [pc, #196]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800513e:	4b30      	ldr	r3, [pc, #192]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	492d      	ldr	r1, [pc, #180]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005150:	4b2b      	ldr	r3, [pc, #172]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	f023 0220 	bic.w	r2, r3, #32
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4928      	ldr	r1, [pc, #160]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005162:	4b27      	ldr	r3, [pc, #156]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	4a26      	ldr	r2, [pc, #152]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005168:	f023 0310 	bic.w	r3, r3, #16
 800516c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <RCCEx_PLL2_Config+0x160>)
 8005174:	4013      	ands	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	69d2      	ldr	r2, [r2, #28]
 800517a:	00d2      	lsls	r2, r2, #3
 800517c:	4920      	ldr	r1, [pc, #128]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005182:	4b1f      	ldr	r3, [pc, #124]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005188:	f043 0310 	orr.w	r3, r3, #16
 800518c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005194:	4b1a      	ldr	r3, [pc, #104]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	4a19      	ldr	r2, [pc, #100]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 800519a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800519e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051a0:	e00f      	b.n	80051c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051a8:	4b15      	ldr	r3, [pc, #84]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	4a14      	ldr	r2, [pc, #80]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051b4:	e005      	b.n	80051c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051b6:	4b12      	ldr	r3, [pc, #72]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a11      	ldr	r2, [pc, #68]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a0e      	ldr	r2, [pc, #56]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ce:	f7fc fc35 	bl	8001a3c <HAL_GetTick>
 80051d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051d4:	e008      	b.n	80051e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051d6:	f7fc fc31 	bl	8001a3c <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e006      	b.n	80051f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051e8:	4b05      	ldr	r3, [pc, #20]	; (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	ffff0007 	.word	0xffff0007

08005208 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005216:	4b53      	ldr	r3, [pc, #332]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b03      	cmp	r3, #3
 8005220:	d101      	bne.n	8005226 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e099      	b.n	800535a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005226:	4b4f      	ldr	r3, [pc, #316]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4e      	ldr	r2, [pc, #312]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800522c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fc fc03 	bl	8001a3c <HAL_GetTick>
 8005236:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005238:	e008      	b.n	800524c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800523a:	f7fc fbff 	bl	8001a3c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e086      	b.n	800535a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800524c:	4b45      	ldr	r3, [pc, #276]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005258:	4b42      	ldr	r3, [pc, #264]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	051b      	lsls	r3, r3, #20
 8005266:	493f      	ldr	r1, [pc, #252]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005268:	4313      	orrs	r3, r2
 800526a:	628b      	str	r3, [r1, #40]	; 0x28
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	3b01      	subs	r3, #1
 8005272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	3b01      	subs	r3, #1
 800527c:	025b      	lsls	r3, r3, #9
 800527e:	b29b      	uxth	r3, r3
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	3b01      	subs	r3, #1
 8005296:	061b      	lsls	r3, r3, #24
 8005298:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800529c:	4931      	ldr	r1, [pc, #196]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052a2:	4b30      	ldr	r3, [pc, #192]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	492d      	ldr	r1, [pc, #180]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052b4:	4b2b      	ldr	r3, [pc, #172]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	4928      	ldr	r1, [pc, #160]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052c6:	4b27      	ldr	r3, [pc, #156]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	4a26      	ldr	r2, [pc, #152]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052d2:	4b24      	ldr	r3, [pc, #144]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <RCCEx_PLL3_Config+0x160>)
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	69d2      	ldr	r2, [r2, #28]
 80052de:	00d2      	lsls	r2, r2, #3
 80052e0:	4920      	ldr	r1, [pc, #128]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052e6:	4b1f      	ldr	r3, [pc, #124]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052f8:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	4a19      	ldr	r2, [pc, #100]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005302:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005304:	e00f      	b.n	8005326 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d106      	bne.n	800531a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800530c:	4b15      	ldr	r3, [pc, #84]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	4a14      	ldr	r2, [pc, #80]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005316:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005318:	e005      	b.n	8005326 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800531a:	4b12      	ldr	r3, [pc, #72]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	4a11      	ldr	r2, [pc, #68]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005324:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a0e      	ldr	r2, [pc, #56]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005332:	f7fc fb83 	bl	8001a3c <HAL_GetTick>
 8005336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005338:	e008      	b.n	800534c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800533a:	f7fc fb7f 	bl	8001a3c <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e006      	b.n	800535a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <RCCEx_PLL3_Config+0x15c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	58024400 	.word	0x58024400
 8005368:	ffff0007 	.word	0xffff0007

0800536c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e01d      	b.n	80053ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fc f872 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 fb6e 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e01d      	b.n	8005410 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f815 	bl	8005418 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f000 fb43 	bl	8005a8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 faee 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fae0 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 faf1 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b04      	cmp	r3, #4
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0204 	mvn.w	r2, #4
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2202      	movs	r2, #2
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fac4 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fab6 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fac7 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b08      	cmp	r3, #8
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fa9a 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fa8c 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa9d 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b10      	cmp	r3, #16
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b10      	cmp	r3, #16
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0210 	mvn.w	r2, #16
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2208      	movs	r2, #8
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fa70 	bl	8005a50 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fa62 	bl	8005a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fa73 	bl	8005a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b01      	cmp	r3, #1
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0201 	mvn.w	r2, #1
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc f854 	bl	8001658 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ba:	2b80      	cmp	r3, #128	; 0x80
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fec4 	bl	8006364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ea:	d10e      	bne.n	800560a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b80      	cmp	r3, #128	; 0x80
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 feb7 	bl	8006378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005614:	2b40      	cmp	r3, #64	; 0x40
 8005616:	d10e      	bne.n	8005636 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005622:	2b40      	cmp	r3, #64	; 0x40
 8005624:	d107      	bne.n	8005636 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800562e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 fa21 	bl	8005a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b20      	cmp	r3, #32
 8005642:	d10e      	bne.n	8005662 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b20      	cmp	r3, #32
 8005650:	d107      	bne.n	8005662 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0220 	mvn.w	r2, #32
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fe77 	bl	8006350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
	...

0800566c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005682:	2302      	movs	r3, #2
 8005684:	e105      	b.n	8005892 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2202      	movs	r2, #2
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b14      	cmp	r3, #20
 800569a:	f200 80f0 	bhi.w	800587e <HAL_TIM_PWM_ConfigChannel+0x212>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	0800587f 	.word	0x0800587f
 80056ac:	0800587f 	.word	0x0800587f
 80056b0:	0800587f 	.word	0x0800587f
 80056b4:	08005739 	.word	0x08005739
 80056b8:	0800587f 	.word	0x0800587f
 80056bc:	0800587f 	.word	0x0800587f
 80056c0:	0800587f 	.word	0x0800587f
 80056c4:	0800577b 	.word	0x0800577b
 80056c8:	0800587f 	.word	0x0800587f
 80056cc:	0800587f 	.word	0x0800587f
 80056d0:	0800587f 	.word	0x0800587f
 80056d4:	080057bb 	.word	0x080057bb
 80056d8:	0800587f 	.word	0x0800587f
 80056dc:	0800587f 	.word	0x0800587f
 80056e0:	0800587f 	.word	0x0800587f
 80056e4:	080057fd 	.word	0x080057fd
 80056e8:	0800587f 	.word	0x0800587f
 80056ec:	0800587f 	.word	0x0800587f
 80056f0:	0800587f 	.word	0x0800587f
 80056f4:	0800583d 	.word	0x0800583d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 fa5e 	bl	8005bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
      break;
 8005736:	e0a3      	b.n	8005880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 face 	bl	8005ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6999      	ldr	r1, [r3, #24]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	619a      	str	r2, [r3, #24]
      break;
 8005778:	e082      	b.n	8005880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fb37 	bl	8005df4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0208 	orr.w	r2, r2, #8
 8005794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0204 	bic.w	r2, r2, #4
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69d9      	ldr	r1, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
      break;
 80057b8:	e062      	b.n	8005880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fb9d 	bl	8005f00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69d9      	ldr	r1, [r3, #28]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	021a      	lsls	r2, r3, #8
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	61da      	str	r2, [r3, #28]
      break;
 80057fa:	e041      	b.n	8005880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fbe4 	bl	8005fd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0208 	orr.w	r2, r2, #8
 8005816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800583a:	e021      	b.n	8005880 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fc26 	bl	8006094 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005856:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005866:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800587c:	e000      	b.n	8005880 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800587e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_TIM_ConfigClockSource+0x18>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e0b7      	b.n	8005a24 <HAL_TIM_ConfigClockSource+0x188>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4b57      	ldr	r3, [pc, #348]	; (8005a2c <HAL_TIM_ConfigClockSource+0x190>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b70      	cmp	r3, #112	; 0x70
 80058ea:	d02e      	beq.n	800594a <HAL_TIM_ConfigClockSource+0xae>
 80058ec:	2b70      	cmp	r3, #112	; 0x70
 80058ee:	d812      	bhi.n	8005916 <HAL_TIM_ConfigClockSource+0x7a>
 80058f0:	2b30      	cmp	r3, #48	; 0x30
 80058f2:	f000 8084 	beq.w	80059fe <HAL_TIM_ConfigClockSource+0x162>
 80058f6:	2b30      	cmp	r3, #48	; 0x30
 80058f8:	d806      	bhi.n	8005908 <HAL_TIM_ConfigClockSource+0x6c>
 80058fa:	2b10      	cmp	r3, #16
 80058fc:	d07f      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d07d      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
 8005902:	2b00      	cmp	r3, #0
 8005904:	d07b      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005906:	e084      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005908:	2b50      	cmp	r3, #80	; 0x50
 800590a:	d048      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x102>
 800590c:	2b60      	cmp	r3, #96	; 0x60
 800590e:	d056      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x122>
 8005910:	2b40      	cmp	r3, #64	; 0x40
 8005912:	d064      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x142>
      break;
 8005914:	e07d      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005916:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800591a:	d070      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
 800591c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005920:	d809      	bhi.n	8005936 <HAL_TIM_ConfigClockSource+0x9a>
 8005922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005926:	d027      	beq.n	8005978 <HAL_TIM_ConfigClockSource+0xdc>
 8005928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592c:	d067      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	d06d      	beq.n	8005a10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005934:	e06d      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8005936:	4a3e      	ldr	r2, [pc, #248]	; (8005a30 <HAL_TIM_ConfigClockSource+0x194>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d060      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
 800593c:	4a3d      	ldr	r2, [pc, #244]	; (8005a34 <HAL_TIM_ConfigClockSource+0x198>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d05d      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
 8005942:	4a3d      	ldr	r2, [pc, #244]	; (8005a38 <HAL_TIM_ConfigClockSource+0x19c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d05a      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0x162>
      break;
 8005948:	e063      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	6899      	ldr	r1, [r3, #8]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f000 fc7d 	bl	8006258 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800596c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	609a      	str	r2, [r3, #8]
      break;
 8005976:	e04c      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	6899      	ldr	r1, [r3, #8]
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f000 fc66 	bl	8006258 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800599a:	609a      	str	r2, [r3, #8]
      break;
 800599c:	e039      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f000 fbd6 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2150      	movs	r1, #80	; 0x50
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fc30 	bl	800621c <TIM_ITRx_SetConfig>
      break;
 80059bc:	e029      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f000 fbf5 	bl	80061ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2160      	movs	r1, #96	; 0x60
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fc20 	bl	800621c <TIM_ITRx_SetConfig>
      break;
 80059dc:	e019      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6859      	ldr	r1, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	461a      	mov	r2, r3
 80059ec:	f000 fbb6 	bl	800615c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2140      	movs	r1, #64	; 0x40
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fc10 	bl	800621c <TIM_ITRx_SetConfig>
      break;
 80059fc:	e009      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4619      	mov	r1, r3
 8005a08:	4610      	mov	r0, r2
 8005a0a:	f000 fc07 	bl	800621c <TIM_ITRx_SetConfig>
      break;
 8005a0e:	e000      	b.n	8005a12 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8005a10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	ffceff88 	.word	0xffceff88
 8005a30:	00100030 	.word	0x00100030
 8005a34:	00100040 	.word	0x00100040
 8005a38:	00100020 	.word	0x00100020

08005a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a40      	ldr	r2, [pc, #256]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d013      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d00f      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <TIM_Base_SetConfig+0x118>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d00b      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <TIM_Base_SetConfig+0x11c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d007      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a3b      	ldr	r2, [pc, #236]	; (8005bac <TIM_Base_SetConfig+0x120>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a3a      	ldr	r2, [pc, #232]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d108      	bne.n	8005ade <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01f      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aec:	d01b      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a2c      	ldr	r2, [pc, #176]	; (8005ba4 <TIM_Base_SetConfig+0x118>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d017      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a2b      	ldr	r2, [pc, #172]	; (8005ba8 <TIM_Base_SetConfig+0x11c>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d013      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a2a      	ldr	r2, [pc, #168]	; (8005bac <TIM_Base_SetConfig+0x120>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d00f      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a29      	ldr	r2, [pc, #164]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00b      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a28      	ldr	r2, [pc, #160]	; (8005bb4 <TIM_Base_SetConfig+0x128>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d007      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <TIM_Base_SetConfig+0x12c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d003      	beq.n	8005b26 <TIM_Base_SetConfig+0x9a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a26      	ldr	r2, [pc, #152]	; (8005bbc <TIM_Base_SetConfig+0x130>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d108      	bne.n	8005b38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a10      	ldr	r2, [pc, #64]	; (8005ba0 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00f      	beq.n	8005b84 <TIM_Base_SetConfig+0xf8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a12      	ldr	r2, [pc, #72]	; (8005bb0 <TIM_Base_SetConfig+0x124>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <TIM_Base_SetConfig+0xf8>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a11      	ldr	r2, [pc, #68]	; (8005bb4 <TIM_Base_SetConfig+0x128>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d007      	beq.n	8005b84 <TIM_Base_SetConfig+0xf8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <TIM_Base_SetConfig+0x12c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d003      	beq.n	8005b84 <TIM_Base_SetConfig+0xf8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <TIM_Base_SetConfig+0x130>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d103      	bne.n	8005b8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	615a      	str	r2, [r3, #20]
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40000c00 	.word	0x40000c00
 8005bb0:	40010400 	.word	0x40010400
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f023 0201 	bic.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <TIM_OC1_SetConfig+0x108>)
 8005bec:	4013      	ands	r3, r2
 8005bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f023 0302 	bic.w	r3, r3, #2
 8005c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a2d      	ldr	r2, [pc, #180]	; (8005ccc <TIM_OC1_SetConfig+0x10c>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_OC1_SetConfig+0x7c>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2c      	ldr	r2, [pc, #176]	; (8005cd0 <TIM_OC1_SetConfig+0x110>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_OC1_SetConfig+0x7c>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a2b      	ldr	r2, [pc, #172]	; (8005cd4 <TIM_OC1_SetConfig+0x114>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_OC1_SetConfig+0x7c>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <TIM_OC1_SetConfig+0x118>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_OC1_SetConfig+0x7c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a29      	ldr	r2, [pc, #164]	; (8005cdc <TIM_OC1_SetConfig+0x11c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10c      	bne.n	8005c56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0308 	bic.w	r3, r3, #8
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 0304 	bic.w	r3, r3, #4
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a1c      	ldr	r2, [pc, #112]	; (8005ccc <TIM_OC1_SetConfig+0x10c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_OC1_SetConfig+0xbe>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a1b      	ldr	r2, [pc, #108]	; (8005cd0 <TIM_OC1_SetConfig+0x110>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_OC1_SetConfig+0xbe>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a1a      	ldr	r2, [pc, #104]	; (8005cd4 <TIM_OC1_SetConfig+0x114>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_OC1_SetConfig+0xbe>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <TIM_OC1_SetConfig+0x118>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_OC1_SetConfig+0xbe>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a18      	ldr	r2, [pc, #96]	; (8005cdc <TIM_OC1_SetConfig+0x11c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d111      	bne.n	8005ca2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	621a      	str	r2, [r3, #32]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	fffeff8f 	.word	0xfffeff8f
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40010400 	.word	0x40010400
 8005cd4:	40014000 	.word	0x40014000
 8005cd8:	40014400 	.word	0x40014400
 8005cdc:	40014800 	.word	0x40014800

08005ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f023 0210 	bic.w	r2, r3, #16
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	4b34      	ldr	r3, [pc, #208]	; (8005ddc <TIM_OC2_SetConfig+0xfc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	021b      	lsls	r3, r3, #8
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0320 	bic.w	r3, r3, #32
 8005d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a29      	ldr	r2, [pc, #164]	; (8005de0 <TIM_OC2_SetConfig+0x100>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_OC2_SetConfig+0x68>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a28      	ldr	r2, [pc, #160]	; (8005de4 <TIM_OC2_SetConfig+0x104>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d10d      	bne.n	8005d64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1e      	ldr	r2, [pc, #120]	; (8005de0 <TIM_OC2_SetConfig+0x100>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00f      	beq.n	8005d8c <TIM_OC2_SetConfig+0xac>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	; (8005de4 <TIM_OC2_SetConfig+0x104>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_OC2_SetConfig+0xac>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <TIM_OC2_SetConfig+0x108>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_OC2_SetConfig+0xac>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <TIM_OC2_SetConfig+0x10c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_OC2_SetConfig+0xac>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a1a      	ldr	r2, [pc, #104]	; (8005df0 <TIM_OC2_SetConfig+0x110>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d113      	bne.n	8005db4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	621a      	str	r2, [r3, #32]
}
 8005dce:	bf00      	nop
 8005dd0:	371c      	adds	r7, #28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	feff8fff 	.word	0xfeff8fff
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a27      	ldr	r2, [pc, #156]	; (8005eec <TIM_OC3_SetConfig+0xf8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_OC3_SetConfig+0x66>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <TIM_OC3_SetConfig+0xfc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10d      	bne.n	8005e76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <TIM_OC3_SetConfig+0xf8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00f      	beq.n	8005e9e <TIM_OC3_SetConfig+0xaa>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <TIM_OC3_SetConfig+0xfc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <TIM_OC3_SetConfig+0xaa>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <TIM_OC3_SetConfig+0x100>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <TIM_OC3_SetConfig+0xaa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <TIM_OC3_SetConfig+0x104>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_OC3_SetConfig+0xaa>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a18      	ldr	r2, [pc, #96]	; (8005efc <TIM_OC3_SetConfig+0x108>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d113      	bne.n	8005ec6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40010400 	.word	0x40010400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800

08005f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	021b      	lsls	r3, r3, #8
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	031b      	lsls	r3, r3, #12
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <TIM_OC4_SetConfig+0xbc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00f      	beq.n	8005f80 <TIM_OC4_SetConfig+0x80>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <TIM_OC4_SetConfig+0xc0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00b      	beq.n	8005f80 <TIM_OC4_SetConfig+0x80>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a16      	ldr	r2, [pc, #88]	; (8005fc4 <TIM_OC4_SetConfig+0xc4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d007      	beq.n	8005f80 <TIM_OC4_SetConfig+0x80>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <TIM_OC4_SetConfig+0xc8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_OC4_SetConfig+0x80>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <TIM_OC4_SetConfig+0xcc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d109      	bne.n	8005f94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	019b      	lsls	r3, r3, #6
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	621a      	str	r2, [r3, #32]
}
 8005fae:	bf00      	nop
 8005fb0:	371c      	adds	r7, #28
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	40010400 	.word	0x40010400
 8005fc4:	40014000 	.word	0x40014000
 8005fc8:	40014400 	.word	0x40014400
 8005fcc:	40014800 	.word	0x40014800

08005fd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006010:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a17      	ldr	r2, [pc, #92]	; (8006080 <TIM_OC5_SetConfig+0xb0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00f      	beq.n	8006046 <TIM_OC5_SetConfig+0x76>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a16      	ldr	r2, [pc, #88]	; (8006084 <TIM_OC5_SetConfig+0xb4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_OC5_SetConfig+0x76>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a15      	ldr	r2, [pc, #84]	; (8006088 <TIM_OC5_SetConfig+0xb8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_OC5_SetConfig+0x76>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a14      	ldr	r2, [pc, #80]	; (800608c <TIM_OC5_SetConfig+0xbc>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_OC5_SetConfig+0x76>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a13      	ldr	r2, [pc, #76]	; (8006090 <TIM_OC5_SetConfig+0xc0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d109      	bne.n	800605a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	621a      	str	r2, [r3, #32]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	40010000 	.word	0x40010000
 8006084:	40010400 	.word	0x40010400
 8006088:	40014000 	.word	0x40014000
 800608c:	40014400 	.word	0x40014400
 8006090:	40014800 	.word	0x40014800

08006094 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a1b      	ldr	r3, [r3, #32]
 80060ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	051b      	lsls	r3, r3, #20
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a18      	ldr	r2, [pc, #96]	; (8006148 <TIM_OC6_SetConfig+0xb4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00f      	beq.n	800610c <TIM_OC6_SetConfig+0x78>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a17      	ldr	r2, [pc, #92]	; (800614c <TIM_OC6_SetConfig+0xb8>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d00b      	beq.n	800610c <TIM_OC6_SetConfig+0x78>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a16      	ldr	r2, [pc, #88]	; (8006150 <TIM_OC6_SetConfig+0xbc>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d007      	beq.n	800610c <TIM_OC6_SetConfig+0x78>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a15      	ldr	r2, [pc, #84]	; (8006154 <TIM_OC6_SetConfig+0xc0>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d003      	beq.n	800610c <TIM_OC6_SetConfig+0x78>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a14      	ldr	r2, [pc, #80]	; (8006158 <TIM_OC6_SetConfig+0xc4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d109      	bne.n	8006120 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	029b      	lsls	r3, r3, #10
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40010000 	.word	0x40010000
 800614c:	40010400 	.word	0x40010400
 8006150:	40014000 	.word	0x40014000
 8006154:	40014400 	.word	0x40014400
 8006158:	40014800 	.word	0x40014800

0800615c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	f023 0201 	bic.w	r2, r3, #1
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	011b      	lsls	r3, r3, #4
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4313      	orrs	r3, r2
 80061a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	621a      	str	r2, [r3, #32]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b087      	sub	sp, #28
 80061be:	af00      	add	r7, sp, #0
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f023 0210 	bic.w	r2, r3, #16
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	031b      	lsls	r3, r3, #12
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
	...

0800621c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR7: Internal Trigger 7
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4b09      	ldr	r3, [pc, #36]	; (8006254 <TIM_ITRx_SetConfig+0x38>)
 8006230:	4013      	ands	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	f043 0307 	orr.w	r3, r3, #7
 800623e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	609a      	str	r2, [r3, #8]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	ffcfff8f 	.word	0xffcfff8f

08006258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	021a      	lsls	r2, r3, #8
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	431a      	orrs	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4313      	orrs	r3, r2
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	609a      	str	r2, [r3, #8]
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e045      	b.n	800633c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d004      	beq.n	80062e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1b      	ldr	r2, [pc, #108]	; (800634c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d108      	bne.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800630e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	4313      	orrs	r3, r2
 8006318:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3714      	adds	r7, #20
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	40010000 	.word	0x40010000
 800634c:	40010400 	.word	0x40010400

08006350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e042      	b.n	8006424 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d106      	bne.n	80063b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fb f9af 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2224      	movs	r2, #36	; 0x24
 80063ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fa9a 	bl	8006908 <UART_SetConfig>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e022      	b.n	8006424 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f002 fc0c 	bl	8008c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685a      	ldr	r2, [r3, #4]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f002 fc93 	bl	8008d48 <UART_CheckIdleState>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006440:	2b20      	cmp	r3, #32
 8006442:	f040 80bc 	bne.w	80065be <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d002      	beq.n	8006452 <HAL_UART_Receive_IT+0x26>
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0b4      	b.n	80065c0 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_UART_Receive_IT+0x38>
 8006460:	2302      	movs	r3, #2
 8006462:	e0ad      	b.n	80065c0 <HAL_UART_Receive_IT+0x194>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	88fa      	ldrh	r2, [r7, #6]
 8006476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	88fa      	ldrh	r2, [r7, #6]
 800647e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006490:	d10e      	bne.n	80064b0 <HAL_UART_Receive_IT+0x84>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <HAL_UART_Receive_IT+0x7a>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064a4:	e02d      	b.n	8006502 <HAL_UART_Receive_IT+0xd6>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	22ff      	movs	r2, #255	; 0xff
 80064aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ae:	e028      	b.n	8006502 <HAL_UART_Receive_IT+0xd6>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10d      	bne.n	80064d4 <HAL_UART_Receive_IT+0xa8>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <HAL_UART_Receive_IT+0x9e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	22ff      	movs	r2, #255	; 0xff
 80064c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064c8:	e01b      	b.n	8006502 <HAL_UART_Receive_IT+0xd6>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	227f      	movs	r2, #127	; 0x7f
 80064ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d2:	e016      	b.n	8006502 <HAL_UART_Receive_IT+0xd6>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064dc:	d10d      	bne.n	80064fa <HAL_UART_Receive_IT+0xce>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <HAL_UART_Receive_IT+0xc4>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	227f      	movs	r2, #127	; 0x7f
 80064ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ee:	e008      	b.n	8006502 <HAL_UART_Receive_IT+0xd6>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	223f      	movs	r2, #63	; 0x3f
 80064f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064f8:	e003      	b.n	8006502 <HAL_UART_Receive_IT+0xd6>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2222      	movs	r2, #34	; 0x22
 800650e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652a:	d12a      	bne.n	8006582 <HAL_UART_Receive_IT+0x156>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006532:	88fa      	ldrh	r2, [r7, #6]
 8006534:	429a      	cmp	r2, r3
 8006536:	d324      	bcc.n	8006582 <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006540:	d107      	bne.n	8006552 <HAL_UART_Receive_IT+0x126>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <HAL_UART_Receive_IT+0x1a0>)
 800654e:	66da      	str	r2, [r3, #108]	; 0x6c
 8006550:	e002      	b.n	8006558 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <HAL_UART_Receive_IT+0x1a4>)
 8006556:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800656e:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800657e:	609a      	str	r2, [r3, #8]
 8006580:	e01b      	b.n	80065ba <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	d107      	bne.n	800659c <HAL_UART_Receive_IT+0x170>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	4a0f      	ldr	r2, [pc, #60]	; (80065d4 <HAL_UART_Receive_IT+0x1a8>)
 8006598:	66da      	str	r2, [r3, #108]	; 0x6c
 800659a:	e002      	b.n	80065a2 <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a0e      	ldr	r2, [pc, #56]	; (80065d8 <HAL_UART_Receive_IT+0x1ac>)
 80065a0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80065b8:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e000      	b.n	80065c0 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 80065be:	2302      	movs	r3, #2
  }
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	080091dd 	.word	0x080091dd
 80065d0:	080090d5 	.word	0x080090d5
 80065d4:	0800902b 	.word	0x0800902b
 80065d8:	08008f81 	.word	0x08008f81

080065dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8006602:	4013      	ands	r3, r2
 8006604:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d118      	bne.n	800663e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d013      	beq.n	800663e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f003 0320 	and.w	r3, r3, #32
 800661c:	2b00      	cmp	r3, #0
 800661e:	d104      	bne.n	800662a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d009      	beq.n	800663e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8145 	beq.w	80068be <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	4798      	blx	r3
      }
      return;
 800663c:	e13f      	b.n	80068be <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 80e8 	beq.w	8006816 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4ba1      	ldr	r3, [pc, #644]	; (80068d0 <HAL_UART_IRQHandler+0x2f4>)
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4ba0      	ldr	r3, [pc, #640]	; (80068d4 <HAL_UART_IRQHandler+0x2f8>)
 8006654:	4013      	ands	r3, r2
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 80dd 	beq.w	8006816 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d010      	beq.n	8006688 <HAL_UART_IRQHandler+0xac>
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00b      	beq.n	8006688 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2201      	movs	r2, #1
 8006676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	f043 0201 	orr.w	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d010      	beq.n	80066b4 <HAL_UART_IRQHandler+0xd8>
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2202      	movs	r2, #2
 80066a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066aa:	f043 0204 	orr.w	r2, r3, #4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d010      	beq.n	80066e0 <HAL_UART_IRQHandler+0x104>
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2204      	movs	r2, #4
 80066ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066d6:	f043 0202 	orr.w	r2, r3, #2
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f003 0308 	and.w	r3, r3, #8
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d015      	beq.n	8006716 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d104      	bne.n	80066fe <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4b76      	ldr	r3, [pc, #472]	; (80068d0 <HAL_UART_IRQHandler+0x2f4>)
 80066f8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2208      	movs	r2, #8
 8006704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670c:	f043 0208 	orr.w	r2, r3, #8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671c:	2b00      	cmp	r3, #0
 800671e:	d011      	beq.n	8006744 <HAL_UART_IRQHandler+0x168>
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673a:	f043 0220 	orr.w	r2, r3, #32
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674a:	2b00      	cmp	r3, #0
 800674c:	f000 80b9 	beq.w	80068c2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d011      	beq.n	800677e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006784:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	d004      	beq.n	800679e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679a:	2b00      	cmp	r3, #0
 800679c:	d031      	beq.n	8006802 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 fb9a 	bl	8008ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d123      	bne.n	80067fa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ce:	4a42      	ldr	r2, [pc, #264]	; (80068d8 <HAL_UART_IRQHandler+0x2fc>)
 80067d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fb fa8e 	bl	8001cf8 <HAL_DMA_Abort_IT>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	e00f      	b.n	8006812 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f87c 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	e00b      	b.n	8006812 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f878 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	e007      	b.n	8006812 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f874 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006810:	e057      	b.n	80068c2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006812:	bf00      	nop
    return;
 8006814:	e055      	b.n	80068c2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <HAL_UART_IRQHandler+0x260>
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d008      	beq.n	800683c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006832:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f002 fd55 	bl	80092e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800683a:	e045      	b.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b00      	cmp	r3, #0
 8006844:	d012      	beq.n	800686c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d008      	beq.n	800686c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685e:	2b00      	cmp	r3, #0
 8006860:	d031      	beq.n	80068c6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	4798      	blx	r3
    }
    return;
 800686a:	e02c      	b.n	80068c6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <HAL_UART_IRQHandler+0x2ac>
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f002 fb63 	bl	8008f4c <UART_EndTransmit_IT>
    return;
 8006886:	e01f      	b.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_UART_IRQHandler+0x2c8>
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 fd35 	bl	800930c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068a2:	e011      	b.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00c      	beq.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	da09      	bge.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f002 fd1f 	bl	80092f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068ba:	bf00      	nop
 80068bc:	e004      	b.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80068be:	bf00      	nop
 80068c0:	e002      	b.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80068c2:	bf00      	nop
 80068c4:	e000      	b.n	80068c8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80068c6:	bf00      	nop
  }
}
 80068c8:	3720      	adds	r7, #32
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	10000001 	.word	0x10000001
 80068d4:	04000120 	.word	0x04000120
 80068d8:	08008f21 	.word	0x08008f21

080068dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	0000      	movs	r0, r0
	...

08006908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006908:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800690c:	b090      	sub	sp, #64	; 0x40
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006912:	2300      	movs	r3, #0
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800691c:	2300      	movs	r3, #0
 800691e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	69db      	ldr	r3, [r3, #28]
 8006934:	4313      	orrs	r3, r2
 8006936:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800693c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800693e:	4313      	orrs	r3, r2
 8006940:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4bc1      	ldr	r3, [pc, #772]	; (8006c50 <UART_SetConfig+0x348>)
 800694a:	4013      	ands	r3, r2
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006952:	430b      	orrs	r3, r1
 8006954:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4ab7      	ldr	r2, [pc, #732]	; (8006c54 <UART_SetConfig+0x34c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d004      	beq.n	8006986 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006982:	4313      	orrs	r3, r2
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	4bb2      	ldr	r3, [pc, #712]	; (8006c58 <UART_SetConfig+0x350>)
 800698e:	4013      	ands	r3, r2
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006996:	430b      	orrs	r3, r1
 8006998:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a0:	f023 010f 	bic.w	r1, r3, #15
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4aa9      	ldr	r2, [pc, #676]	; (8006c5c <UART_SetConfig+0x354>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d177      	bne.n	8006aaa <UART_SetConfig+0x1a2>
 80069ba:	4ba9      	ldr	r3, [pc, #676]	; (8006c60 <UART_SetConfig+0x358>)
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069c2:	2b28      	cmp	r3, #40	; 0x28
 80069c4:	d86c      	bhi.n	8006aa0 <UART_SetConfig+0x198>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0xc4>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	08006a71 	.word	0x08006a71
 80069d0:	08006aa1 	.word	0x08006aa1
 80069d4:	08006aa1 	.word	0x08006aa1
 80069d8:	08006aa1 	.word	0x08006aa1
 80069dc:	08006aa1 	.word	0x08006aa1
 80069e0:	08006aa1 	.word	0x08006aa1
 80069e4:	08006aa1 	.word	0x08006aa1
 80069e8:	08006aa1 	.word	0x08006aa1
 80069ec:	08006a79 	.word	0x08006a79
 80069f0:	08006aa1 	.word	0x08006aa1
 80069f4:	08006aa1 	.word	0x08006aa1
 80069f8:	08006aa1 	.word	0x08006aa1
 80069fc:	08006aa1 	.word	0x08006aa1
 8006a00:	08006aa1 	.word	0x08006aa1
 8006a04:	08006aa1 	.word	0x08006aa1
 8006a08:	08006aa1 	.word	0x08006aa1
 8006a0c:	08006a81 	.word	0x08006a81
 8006a10:	08006aa1 	.word	0x08006aa1
 8006a14:	08006aa1 	.word	0x08006aa1
 8006a18:	08006aa1 	.word	0x08006aa1
 8006a1c:	08006aa1 	.word	0x08006aa1
 8006a20:	08006aa1 	.word	0x08006aa1
 8006a24:	08006aa1 	.word	0x08006aa1
 8006a28:	08006aa1 	.word	0x08006aa1
 8006a2c:	08006a89 	.word	0x08006a89
 8006a30:	08006aa1 	.word	0x08006aa1
 8006a34:	08006aa1 	.word	0x08006aa1
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006aa1 	.word	0x08006aa1
 8006a40:	08006aa1 	.word	0x08006aa1
 8006a44:	08006aa1 	.word	0x08006aa1
 8006a48:	08006aa1 	.word	0x08006aa1
 8006a4c:	08006a91 	.word	0x08006a91
 8006a50:	08006aa1 	.word	0x08006aa1
 8006a54:	08006aa1 	.word	0x08006aa1
 8006a58:	08006aa1 	.word	0x08006aa1
 8006a5c:	08006aa1 	.word	0x08006aa1
 8006a60:	08006aa1 	.word	0x08006aa1
 8006a64:	08006aa1 	.word	0x08006aa1
 8006a68:	08006aa1 	.word	0x08006aa1
 8006a6c:	08006a99 	.word	0x08006a99
 8006a70:	2301      	movs	r3, #1
 8006a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a76:	e233      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a7e:	e22f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006a80:	2308      	movs	r3, #8
 8006a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a86:	e22b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a8e:	e227      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006a90:	2320      	movs	r3, #32
 8006a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a96:	e223      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006a98:	2340      	movs	r3, #64	; 0x40
 8006a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006a9e:	e21f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006aa0:	2380      	movs	r3, #128	; 0x80
 8006aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aa6:	bf00      	nop
 8006aa8:	e21a      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a6d      	ldr	r2, [pc, #436]	; (8006c64 <UART_SetConfig+0x35c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d132      	bne.n	8006b1a <UART_SetConfig+0x212>
 8006ab4:	4b6a      	ldr	r3, [pc, #424]	; (8006c60 <UART_SetConfig+0x358>)
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	2b05      	cmp	r3, #5
 8006abe:	d827      	bhi.n	8006b10 <UART_SetConfig+0x208>
 8006ac0:	a201      	add	r2, pc, #4	; (adr r2, 8006ac8 <UART_SetConfig+0x1c0>)
 8006ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac6:	bf00      	nop
 8006ac8:	08006ae1 	.word	0x08006ae1
 8006acc:	08006ae9 	.word	0x08006ae9
 8006ad0:	08006af1 	.word	0x08006af1
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ae6:	e1fb      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006ae8:	2304      	movs	r3, #4
 8006aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006aee:	e1f7      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006af0:	2308      	movs	r3, #8
 8006af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006af6:	e1f3      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006af8:	2310      	movs	r3, #16
 8006afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006afe:	e1ef      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b00:	2320      	movs	r3, #32
 8006b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b06:	e1eb      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b08:	2340      	movs	r3, #64	; 0x40
 8006b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b0e:	e1e7      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b10:	2380      	movs	r3, #128	; 0x80
 8006b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b16:	bf00      	nop
 8006b18:	e1e2      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a52      	ldr	r2, [pc, #328]	; (8006c68 <UART_SetConfig+0x360>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d132      	bne.n	8006b8a <UART_SetConfig+0x282>
 8006b24:	4b4e      	ldr	r3, [pc, #312]	; (8006c60 <UART_SetConfig+0x358>)
 8006b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	d827      	bhi.n	8006b80 <UART_SetConfig+0x278>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <UART_SetConfig+0x230>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b51 	.word	0x08006b51
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	08006b61 	.word	0x08006b61
 8006b44:	08006b69 	.word	0x08006b69
 8006b48:	08006b71 	.word	0x08006b71
 8006b4c:	08006b79 	.word	0x08006b79
 8006b50:	2300      	movs	r3, #0
 8006b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b56:	e1c3      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b5e:	e1bf      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b66:	e1bb      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b6e:	e1b7      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b70:	2320      	movs	r3, #32
 8006b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b76:	e1b3      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b78:	2340      	movs	r3, #64	; 0x40
 8006b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b7e:	e1af      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b80:	2380      	movs	r3, #128	; 0x80
 8006b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006b86:	bf00      	nop
 8006b88:	e1aa      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <UART_SetConfig+0x364>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d132      	bne.n	8006bfa <UART_SetConfig+0x2f2>
 8006b94:	4b32      	ldr	r3, [pc, #200]	; (8006c60 <UART_SetConfig+0x358>)
 8006b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	2b05      	cmp	r3, #5
 8006b9e:	d827      	bhi.n	8006bf0 <UART_SetConfig+0x2e8>
 8006ba0:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <UART_SetConfig+0x2a0>)
 8006ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba6:	bf00      	nop
 8006ba8:	08006bc1 	.word	0x08006bc1
 8006bac:	08006bc9 	.word	0x08006bc9
 8006bb0:	08006bd1 	.word	0x08006bd1
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006be1 	.word	0x08006be1
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bc6:	e18b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bce:	e187      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006bd0:	2308      	movs	r3, #8
 8006bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bd6:	e183      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bde:	e17f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006be0:	2320      	movs	r3, #32
 8006be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006be6:	e17b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006be8:	2340      	movs	r3, #64	; 0x40
 8006bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bee:	e177      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006bf0:	2380      	movs	r3, #128	; 0x80
 8006bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006bf6:	bf00      	nop
 8006bf8:	e172      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <UART_SetConfig+0x368>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d144      	bne.n	8006c8e <UART_SetConfig+0x386>
 8006c04:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <UART_SetConfig+0x358>)
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	2b05      	cmp	r3, #5
 8006c0e:	d839      	bhi.n	8006c84 <UART_SetConfig+0x37c>
 8006c10:	a201      	add	r2, pc, #4	; (adr r2, 8006c18 <UART_SetConfig+0x310>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006c31 	.word	0x08006c31
 8006c1c:	08006c39 	.word	0x08006c39
 8006c20:	08006c41 	.word	0x08006c41
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c75 	.word	0x08006c75
 8006c2c:	08006c7d 	.word	0x08006c7d
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c36:	e153      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c3e:	e14f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c46:	e14b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c4e:	e147      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006c50:	cfff69f3 	.word	0xcfff69f3
 8006c54:	58000c00 	.word	0x58000c00
 8006c58:	11fff4ff 	.word	0x11fff4ff
 8006c5c:	40011000 	.word	0x40011000
 8006c60:	58024400 	.word	0x58024400
 8006c64:	40004400 	.word	0x40004400
 8006c68:	40004800 	.word	0x40004800
 8006c6c:	40004c00 	.word	0x40004c00
 8006c70:	40005000 	.word	0x40005000
 8006c74:	2320      	movs	r3, #32
 8006c76:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c7a:	e131      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006c7c:	2340      	movs	r3, #64	; 0x40
 8006c7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c82:	e12d      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006c8a:	bf00      	nop
 8006c8c:	e128      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4ac3      	ldr	r2, [pc, #780]	; (8006fa0 <UART_SetConfig+0x698>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d178      	bne.n	8006d8a <UART_SetConfig+0x482>
 8006c98:	4bc2      	ldr	r3, [pc, #776]	; (8006fa4 <UART_SetConfig+0x69c>)
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca0:	2b28      	cmp	r3, #40	; 0x28
 8006ca2:	d86d      	bhi.n	8006d80 <UART_SetConfig+0x478>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0x3a4>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006d51 	.word	0x08006d51
 8006cb0:	08006d81 	.word	0x08006d81
 8006cb4:	08006d81 	.word	0x08006d81
 8006cb8:	08006d81 	.word	0x08006d81
 8006cbc:	08006d81 	.word	0x08006d81
 8006cc0:	08006d81 	.word	0x08006d81
 8006cc4:	08006d81 	.word	0x08006d81
 8006cc8:	08006d81 	.word	0x08006d81
 8006ccc:	08006d59 	.word	0x08006d59
 8006cd0:	08006d81 	.word	0x08006d81
 8006cd4:	08006d81 	.word	0x08006d81
 8006cd8:	08006d81 	.word	0x08006d81
 8006cdc:	08006d81 	.word	0x08006d81
 8006ce0:	08006d81 	.word	0x08006d81
 8006ce4:	08006d81 	.word	0x08006d81
 8006ce8:	08006d81 	.word	0x08006d81
 8006cec:	08006d61 	.word	0x08006d61
 8006cf0:	08006d81 	.word	0x08006d81
 8006cf4:	08006d81 	.word	0x08006d81
 8006cf8:	08006d81 	.word	0x08006d81
 8006cfc:	08006d81 	.word	0x08006d81
 8006d00:	08006d81 	.word	0x08006d81
 8006d04:	08006d81 	.word	0x08006d81
 8006d08:	08006d81 	.word	0x08006d81
 8006d0c:	08006d69 	.word	0x08006d69
 8006d10:	08006d81 	.word	0x08006d81
 8006d14:	08006d81 	.word	0x08006d81
 8006d18:	08006d81 	.word	0x08006d81
 8006d1c:	08006d81 	.word	0x08006d81
 8006d20:	08006d81 	.word	0x08006d81
 8006d24:	08006d81 	.word	0x08006d81
 8006d28:	08006d81 	.word	0x08006d81
 8006d2c:	08006d71 	.word	0x08006d71
 8006d30:	08006d81 	.word	0x08006d81
 8006d34:	08006d81 	.word	0x08006d81
 8006d38:	08006d81 	.word	0x08006d81
 8006d3c:	08006d81 	.word	0x08006d81
 8006d40:	08006d81 	.word	0x08006d81
 8006d44:	08006d81 	.word	0x08006d81
 8006d48:	08006d81 	.word	0x08006d81
 8006d4c:	08006d79 	.word	0x08006d79
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d56:	e0c3      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d5e:	e0bf      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006d60:	2308      	movs	r3, #8
 8006d62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d66:	e0bb      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d6e:	e0b7      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006d70:	2320      	movs	r3, #32
 8006d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d76:	e0b3      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006d78:	2340      	movs	r3, #64	; 0x40
 8006d7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d7e:	e0af      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006d86:	bf00      	nop
 8006d88:	e0aa      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a86      	ldr	r2, [pc, #536]	; (8006fa8 <UART_SetConfig+0x6a0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d132      	bne.n	8006dfa <UART_SetConfig+0x4f2>
 8006d94:	4b83      	ldr	r3, [pc, #524]	; (8006fa4 <UART_SetConfig+0x69c>)
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	f003 0307 	and.w	r3, r3, #7
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d827      	bhi.n	8006df0 <UART_SetConfig+0x4e8>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x4a0>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006dc1 	.word	0x08006dc1
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006dd1 	.word	0x08006dd1
 8006db4:	08006dd9 	.word	0x08006dd9
 8006db8:	08006de1 	.word	0x08006de1
 8006dbc:	08006de9 	.word	0x08006de9
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dc6:	e08b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006dc8:	2304      	movs	r3, #4
 8006dca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dce:	e087      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dd6:	e083      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006dd8:	2310      	movs	r3, #16
 8006dda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dde:	e07f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006de0:	2320      	movs	r3, #32
 8006de2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006de6:	e07b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006de8:	2340      	movs	r3, #64	; 0x40
 8006dea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006dee:	e077      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006df0:	2380      	movs	r3, #128	; 0x80
 8006df2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006df6:	bf00      	nop
 8006df8:	e072      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6b      	ldr	r2, [pc, #428]	; (8006fac <UART_SetConfig+0x6a4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d132      	bne.n	8006e6a <UART_SetConfig+0x562>
 8006e04:	4b67      	ldr	r3, [pc, #412]	; (8006fa4 <UART_SetConfig+0x69c>)
 8006e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d827      	bhi.n	8006e60 <UART_SetConfig+0x558>
 8006e10:	a201      	add	r2, pc, #4	; (adr r2, 8006e18 <UART_SetConfig+0x510>)
 8006e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e16:	bf00      	nop
 8006e18:	08006e31 	.word	0x08006e31
 8006e1c:	08006e39 	.word	0x08006e39
 8006e20:	08006e41 	.word	0x08006e41
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e36:	e053      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e3e:	e04f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e46:	e04b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e4e:	e047      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006e50:	2320      	movs	r3, #32
 8006e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e56:	e043      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e5e:	e03f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006e60:	2380      	movs	r3, #128	; 0x80
 8006e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006e66:	bf00      	nop
 8006e68:	e03a      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a50      	ldr	r2, [pc, #320]	; (8006fb0 <UART_SetConfig+0x6a8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d132      	bne.n	8006eda <UART_SetConfig+0x5d2>
 8006e74:	4b4b      	ldr	r3, [pc, #300]	; (8006fa4 <UART_SetConfig+0x69c>)
 8006e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e78:	f003 0307 	and.w	r3, r3, #7
 8006e7c:	2b05      	cmp	r3, #5
 8006e7e:	d827      	bhi.n	8006ed0 <UART_SetConfig+0x5c8>
 8006e80:	a201      	add	r2, pc, #4	; (adr r2, 8006e88 <UART_SetConfig+0x580>)
 8006e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e86:	bf00      	nop
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006ea9 	.word	0x08006ea9
 8006e90:	08006eb1 	.word	0x08006eb1
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ea6:	e01b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eae:	e017      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006eb6:	e013      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ebe:	e00f      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ec6:	e00b      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006ec8:	2340      	movs	r3, #64	; 0x40
 8006eca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ece:	e007      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006ed0:	2380      	movs	r3, #128	; 0x80
 8006ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8006ed6:	bf00      	nop
 8006ed8:	e002      	b.n	8006ee0 <UART_SetConfig+0x5d8>
 8006eda:	2380      	movs	r3, #128	; 0x80
 8006edc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a32      	ldr	r2, [pc, #200]	; (8006fb0 <UART_SetConfig+0x6a8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	f040 86f7 	bne.w	8007cda <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eec:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	f000 80c0 	beq.w	8007076 <UART_SetConfig+0x76e>
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	dc04      	bgt.n	8006f04 <UART_SetConfig+0x5fc>
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d00c      	beq.n	8006f18 <UART_SetConfig+0x610>
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d065      	beq.n	8006fce <UART_SetConfig+0x6c6>
 8006f02:	e27a      	b.n	80073fa <UART_SetConfig+0xaf2>
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	f000 81b0 	beq.w	800726a <UART_SetConfig+0x962>
 8006f0a:	2b40      	cmp	r3, #64	; 0x40
 8006f0c:	f000 821e 	beq.w	800734c <UART_SetConfig+0xa44>
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	f000 8104 	beq.w	800711e <UART_SetConfig+0x816>
 8006f16:	e270      	b.n	80073fa <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006f18:	f7fd fdfa 	bl	8004b10 <HAL_RCCEx_GetD3PCLK1Freq>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d04e      	beq.n	8006fc4 <UART_SetConfig+0x6bc>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d048      	beq.n	8006fc0 <UART_SetConfig+0x6b8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d042      	beq.n	8006fbc <UART_SetConfig+0x6b4>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d03c      	beq.n	8006fb8 <UART_SetConfig+0x6b0>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d036      	beq.n	8006fb4 <UART_SetConfig+0x6ac>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	2b05      	cmp	r3, #5
 8006f4c:	d026      	beq.n	8006f9c <UART_SetConfig+0x694>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	2b06      	cmp	r3, #6
 8006f54:	d020      	beq.n	8006f98 <UART_SetConfig+0x690>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5a:	2b07      	cmp	r3, #7
 8006f5c:	d01a      	beq.n	8006f94 <UART_SetConfig+0x68c>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d014      	beq.n	8006f90 <UART_SetConfig+0x688>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	2b09      	cmp	r3, #9
 8006f6c:	d00e      	beq.n	8006f8c <UART_SetConfig+0x684>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	2b0a      	cmp	r3, #10
 8006f74:	d008      	beq.n	8006f88 <UART_SetConfig+0x680>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b0b      	cmp	r3, #11
 8006f7c:	d102      	bne.n	8006f84 <UART_SetConfig+0x67c>
 8006f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f82:	e020      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e01e      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006f88:	2380      	movs	r3, #128	; 0x80
 8006f8a:	e01c      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006f8c:	2340      	movs	r3, #64	; 0x40
 8006f8e:	e01a      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006f90:	2320      	movs	r3, #32
 8006f92:	e018      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006f94:	2310      	movs	r3, #16
 8006f96:	e016      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006f98:	230c      	movs	r3, #12
 8006f9a:	e014      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006f9c:	230a      	movs	r3, #10
 8006f9e:	e012      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006fa0:	40011400 	.word	0x40011400
 8006fa4:	58024400 	.word	0x58024400
 8006fa8:	40007800 	.word	0x40007800
 8006fac:	40007c00 	.word	0x40007c00
 8006fb0:	58000c00 	.word	0x58000c00
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	e006      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006fb8:	2306      	movs	r3, #6
 8006fba:	e004      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006fbc:	2304      	movs	r3, #4
 8006fbe:	e002      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e000      	b.n	8006fc6 <UART_SetConfig+0x6be>
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fcc:	e219      	b.n	8007402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fce:	f107 0318 	add.w	r3, r7, #24
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fd fdb2 	bl	8004b3c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d044      	beq.n	800706c <UART_SetConfig+0x764>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d03e      	beq.n	8007068 <UART_SetConfig+0x760>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d038      	beq.n	8007064 <UART_SetConfig+0x75c>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d032      	beq.n	8007060 <UART_SetConfig+0x758>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d02c      	beq.n	800705c <UART_SetConfig+0x754>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	2b05      	cmp	r3, #5
 8007008:	d026      	beq.n	8007058 <UART_SetConfig+0x750>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	2b06      	cmp	r3, #6
 8007010:	d020      	beq.n	8007054 <UART_SetConfig+0x74c>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b07      	cmp	r3, #7
 8007018:	d01a      	beq.n	8007050 <UART_SetConfig+0x748>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b08      	cmp	r3, #8
 8007020:	d014      	beq.n	800704c <UART_SetConfig+0x744>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	2b09      	cmp	r3, #9
 8007028:	d00e      	beq.n	8007048 <UART_SetConfig+0x740>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2b0a      	cmp	r3, #10
 8007030:	d008      	beq.n	8007044 <UART_SetConfig+0x73c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	2b0b      	cmp	r3, #11
 8007038:	d102      	bne.n	8007040 <UART_SetConfig+0x738>
 800703a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800703e:	e016      	b.n	800706e <UART_SetConfig+0x766>
 8007040:	2301      	movs	r3, #1
 8007042:	e014      	b.n	800706e <UART_SetConfig+0x766>
 8007044:	2380      	movs	r3, #128	; 0x80
 8007046:	e012      	b.n	800706e <UART_SetConfig+0x766>
 8007048:	2340      	movs	r3, #64	; 0x40
 800704a:	e010      	b.n	800706e <UART_SetConfig+0x766>
 800704c:	2320      	movs	r3, #32
 800704e:	e00e      	b.n	800706e <UART_SetConfig+0x766>
 8007050:	2310      	movs	r3, #16
 8007052:	e00c      	b.n	800706e <UART_SetConfig+0x766>
 8007054:	230c      	movs	r3, #12
 8007056:	e00a      	b.n	800706e <UART_SetConfig+0x766>
 8007058:	230a      	movs	r3, #10
 800705a:	e008      	b.n	800706e <UART_SetConfig+0x766>
 800705c:	2308      	movs	r3, #8
 800705e:	e006      	b.n	800706e <UART_SetConfig+0x766>
 8007060:	2306      	movs	r3, #6
 8007062:	e004      	b.n	800706e <UART_SetConfig+0x766>
 8007064:	2304      	movs	r3, #4
 8007066:	e002      	b.n	800706e <UART_SetConfig+0x766>
 8007068:	2302      	movs	r3, #2
 800706a:	e000      	b.n	800706e <UART_SetConfig+0x766>
 800706c:	2301      	movs	r3, #1
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007074:	e1c5      	b.n	8007402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007076:	f107 030c 	add.w	r3, r7, #12
 800707a:	4618      	mov	r0, r3
 800707c:	f7fd feaa 	bl	8004dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007086:	2b00      	cmp	r3, #0
 8007088:	d044      	beq.n	8007114 <UART_SetConfig+0x80c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708e:	2b01      	cmp	r3, #1
 8007090:	d03e      	beq.n	8007110 <UART_SetConfig+0x808>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	2b02      	cmp	r3, #2
 8007098:	d038      	beq.n	800710c <UART_SetConfig+0x804>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d032      	beq.n	8007108 <UART_SetConfig+0x800>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d02c      	beq.n	8007104 <UART_SetConfig+0x7fc>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d026      	beq.n	8007100 <UART_SetConfig+0x7f8>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	2b06      	cmp	r3, #6
 80070b8:	d020      	beq.n	80070fc <UART_SetConfig+0x7f4>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b07      	cmp	r3, #7
 80070c0:	d01a      	beq.n	80070f8 <UART_SetConfig+0x7f0>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d014      	beq.n	80070f4 <UART_SetConfig+0x7ec>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	d00e      	beq.n	80070f0 <UART_SetConfig+0x7e8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	2b0a      	cmp	r3, #10
 80070d8:	d008      	beq.n	80070ec <UART_SetConfig+0x7e4>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	2b0b      	cmp	r3, #11
 80070e0:	d102      	bne.n	80070e8 <UART_SetConfig+0x7e0>
 80070e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070e6:	e016      	b.n	8007116 <UART_SetConfig+0x80e>
 80070e8:	2301      	movs	r3, #1
 80070ea:	e014      	b.n	8007116 <UART_SetConfig+0x80e>
 80070ec:	2380      	movs	r3, #128	; 0x80
 80070ee:	e012      	b.n	8007116 <UART_SetConfig+0x80e>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	e010      	b.n	8007116 <UART_SetConfig+0x80e>
 80070f4:	2320      	movs	r3, #32
 80070f6:	e00e      	b.n	8007116 <UART_SetConfig+0x80e>
 80070f8:	2310      	movs	r3, #16
 80070fa:	e00c      	b.n	8007116 <UART_SetConfig+0x80e>
 80070fc:	230c      	movs	r3, #12
 80070fe:	e00a      	b.n	8007116 <UART_SetConfig+0x80e>
 8007100:	230a      	movs	r3, #10
 8007102:	e008      	b.n	8007116 <UART_SetConfig+0x80e>
 8007104:	2308      	movs	r3, #8
 8007106:	e006      	b.n	8007116 <UART_SetConfig+0x80e>
 8007108:	2306      	movs	r3, #6
 800710a:	e004      	b.n	8007116 <UART_SetConfig+0x80e>
 800710c:	2304      	movs	r3, #4
 800710e:	e002      	b.n	8007116 <UART_SetConfig+0x80e>
 8007110:	2302      	movs	r3, #2
 8007112:	e000      	b.n	8007116 <UART_SetConfig+0x80e>
 8007114:	2301      	movs	r3, #1
 8007116:	fbb2 f3f3 	udiv	r3, r2, r3
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800711c:	e171      	b.n	8007402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800711e:	4b7a      	ldr	r3, [pc, #488]	; (8007308 <UART_SetConfig+0xa00>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d054      	beq.n	80071d4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800712a:	4b77      	ldr	r3, [pc, #476]	; (8007308 <UART_SetConfig+0xa00>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	08db      	lsrs	r3, r3, #3
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	4a75      	ldr	r2, [pc, #468]	; (800730c <UART_SetConfig+0xa04>)
 8007136:	40da      	lsrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	2b00      	cmp	r3, #0
 800713e:	d044      	beq.n	80071ca <UART_SetConfig+0x8c2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	2b01      	cmp	r3, #1
 8007146:	d03e      	beq.n	80071c6 <UART_SetConfig+0x8be>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	2b02      	cmp	r3, #2
 800714e:	d038      	beq.n	80071c2 <UART_SetConfig+0x8ba>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	2b03      	cmp	r3, #3
 8007156:	d032      	beq.n	80071be <UART_SetConfig+0x8b6>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b04      	cmp	r3, #4
 800715e:	d02c      	beq.n	80071ba <UART_SetConfig+0x8b2>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007164:	2b05      	cmp	r3, #5
 8007166:	d026      	beq.n	80071b6 <UART_SetConfig+0x8ae>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	2b06      	cmp	r3, #6
 800716e:	d020      	beq.n	80071b2 <UART_SetConfig+0x8aa>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	2b07      	cmp	r3, #7
 8007176:	d01a      	beq.n	80071ae <UART_SetConfig+0x8a6>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	2b08      	cmp	r3, #8
 800717e:	d014      	beq.n	80071aa <UART_SetConfig+0x8a2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	2b09      	cmp	r3, #9
 8007186:	d00e      	beq.n	80071a6 <UART_SetConfig+0x89e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	2b0a      	cmp	r3, #10
 800718e:	d008      	beq.n	80071a2 <UART_SetConfig+0x89a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	2b0b      	cmp	r3, #11
 8007196:	d102      	bne.n	800719e <UART_SetConfig+0x896>
 8007198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719c:	e016      	b.n	80071cc <UART_SetConfig+0x8c4>
 800719e:	2301      	movs	r3, #1
 80071a0:	e014      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071a2:	2380      	movs	r3, #128	; 0x80
 80071a4:	e012      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071a6:	2340      	movs	r3, #64	; 0x40
 80071a8:	e010      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071aa:	2320      	movs	r3, #32
 80071ac:	e00e      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071ae:	2310      	movs	r3, #16
 80071b0:	e00c      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071b2:	230c      	movs	r3, #12
 80071b4:	e00a      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071b6:	230a      	movs	r3, #10
 80071b8:	e008      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071ba:	2308      	movs	r3, #8
 80071bc:	e006      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071be:	2306      	movs	r3, #6
 80071c0:	e004      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071c2:	2304      	movs	r3, #4
 80071c4:	e002      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e000      	b.n	80071cc <UART_SetConfig+0x8c4>
 80071ca:	2301      	movs	r3, #1
 80071cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80071d2:	e116      	b.n	8007402 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d043      	beq.n	8007264 <UART_SetConfig+0x95c>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d03d      	beq.n	8007260 <UART_SetConfig+0x958>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d037      	beq.n	800725c <UART_SetConfig+0x954>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d031      	beq.n	8007258 <UART_SetConfig+0x950>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	2b04      	cmp	r3, #4
 80071fa:	d02b      	beq.n	8007254 <UART_SetConfig+0x94c>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007200:	2b05      	cmp	r3, #5
 8007202:	d025      	beq.n	8007250 <UART_SetConfig+0x948>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	2b06      	cmp	r3, #6
 800720a:	d01f      	beq.n	800724c <UART_SetConfig+0x944>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	2b07      	cmp	r3, #7
 8007212:	d019      	beq.n	8007248 <UART_SetConfig+0x940>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	2b08      	cmp	r3, #8
 800721a:	d013      	beq.n	8007244 <UART_SetConfig+0x93c>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	2b09      	cmp	r3, #9
 8007222:	d00d      	beq.n	8007240 <UART_SetConfig+0x938>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007228:	2b0a      	cmp	r3, #10
 800722a:	d007      	beq.n	800723c <UART_SetConfig+0x934>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2b0b      	cmp	r3, #11
 8007232:	d101      	bne.n	8007238 <UART_SetConfig+0x930>
 8007234:	4b36      	ldr	r3, [pc, #216]	; (8007310 <UART_SetConfig+0xa08>)
 8007236:	e016      	b.n	8007266 <UART_SetConfig+0x95e>
 8007238:	4b34      	ldr	r3, [pc, #208]	; (800730c <UART_SetConfig+0xa04>)
 800723a:	e014      	b.n	8007266 <UART_SetConfig+0x95e>
 800723c:	4b35      	ldr	r3, [pc, #212]	; (8007314 <UART_SetConfig+0xa0c>)
 800723e:	e012      	b.n	8007266 <UART_SetConfig+0x95e>
 8007240:	4b35      	ldr	r3, [pc, #212]	; (8007318 <UART_SetConfig+0xa10>)
 8007242:	e010      	b.n	8007266 <UART_SetConfig+0x95e>
 8007244:	4b35      	ldr	r3, [pc, #212]	; (800731c <UART_SetConfig+0xa14>)
 8007246:	e00e      	b.n	8007266 <UART_SetConfig+0x95e>
 8007248:	4b35      	ldr	r3, [pc, #212]	; (8007320 <UART_SetConfig+0xa18>)
 800724a:	e00c      	b.n	8007266 <UART_SetConfig+0x95e>
 800724c:	4b35      	ldr	r3, [pc, #212]	; (8007324 <UART_SetConfig+0xa1c>)
 800724e:	e00a      	b.n	8007266 <UART_SetConfig+0x95e>
 8007250:	4b35      	ldr	r3, [pc, #212]	; (8007328 <UART_SetConfig+0xa20>)
 8007252:	e008      	b.n	8007266 <UART_SetConfig+0x95e>
 8007254:	4b35      	ldr	r3, [pc, #212]	; (800732c <UART_SetConfig+0xa24>)
 8007256:	e006      	b.n	8007266 <UART_SetConfig+0x95e>
 8007258:	4b35      	ldr	r3, [pc, #212]	; (8007330 <UART_SetConfig+0xa28>)
 800725a:	e004      	b.n	8007266 <UART_SetConfig+0x95e>
 800725c:	4b35      	ldr	r3, [pc, #212]	; (8007334 <UART_SetConfig+0xa2c>)
 800725e:	e002      	b.n	8007266 <UART_SetConfig+0x95e>
 8007260:	4b35      	ldr	r3, [pc, #212]	; (8007338 <UART_SetConfig+0xa30>)
 8007262:	e000      	b.n	8007266 <UART_SetConfig+0x95e>
 8007264:	4b29      	ldr	r3, [pc, #164]	; (800730c <UART_SetConfig+0xa04>)
 8007266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007268:	e0cb      	b.n	8007402 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	2b00      	cmp	r3, #0
 8007270:	d046      	beq.n	8007300 <UART_SetConfig+0x9f8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007276:	2b01      	cmp	r3, #1
 8007278:	d040      	beq.n	80072fc <UART_SetConfig+0x9f4>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	2b02      	cmp	r3, #2
 8007280:	d03a      	beq.n	80072f8 <UART_SetConfig+0x9f0>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	2b03      	cmp	r3, #3
 8007288:	d034      	beq.n	80072f4 <UART_SetConfig+0x9ec>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	2b04      	cmp	r3, #4
 8007290:	d02e      	beq.n	80072f0 <UART_SetConfig+0x9e8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	2b05      	cmp	r3, #5
 8007298:	d028      	beq.n	80072ec <UART_SetConfig+0x9e4>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729e:	2b06      	cmp	r3, #6
 80072a0:	d022      	beq.n	80072e8 <UART_SetConfig+0x9e0>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b07      	cmp	r3, #7
 80072a8:	d01c      	beq.n	80072e4 <UART_SetConfig+0x9dc>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d016      	beq.n	80072e0 <UART_SetConfig+0x9d8>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	d00f      	beq.n	80072da <UART_SetConfig+0x9d2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	2b0a      	cmp	r3, #10
 80072c0:	d008      	beq.n	80072d4 <UART_SetConfig+0x9cc>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2b0b      	cmp	r3, #11
 80072c8:	d102      	bne.n	80072d0 <UART_SetConfig+0x9c8>
 80072ca:	f643 5309 	movw	r3, #15625	; 0x3d09
 80072ce:	e018      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <UART_SetConfig+0xa18>)
 80072d2:	e016      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072d4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80072d8:	e013      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072da:	f24f 4324 	movw	r3, #62500	; 0xf424
 80072de:	e010      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072e0:	4b16      	ldr	r3, [pc, #88]	; (800733c <UART_SetConfig+0xa34>)
 80072e2:	e00e      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072e4:	4b0a      	ldr	r3, [pc, #40]	; (8007310 <UART_SetConfig+0xa08>)
 80072e6:	e00c      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072e8:	4b15      	ldr	r3, [pc, #84]	; (8007340 <UART_SetConfig+0xa38>)
 80072ea:	e00a      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072ec:	4b15      	ldr	r3, [pc, #84]	; (8007344 <UART_SetConfig+0xa3c>)
 80072ee:	e008      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072f0:	4b08      	ldr	r3, [pc, #32]	; (8007314 <UART_SetConfig+0xa0c>)
 80072f2:	e006      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072f4:	4b14      	ldr	r3, [pc, #80]	; (8007348 <UART_SetConfig+0xa40>)
 80072f6:	e004      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072f8:	4b07      	ldr	r3, [pc, #28]	; (8007318 <UART_SetConfig+0xa10>)
 80072fa:	e002      	b.n	8007302 <UART_SetConfig+0x9fa>
 80072fc:	4b07      	ldr	r3, [pc, #28]	; (800731c <UART_SetConfig+0xa14>)
 80072fe:	e000      	b.n	8007302 <UART_SetConfig+0x9fa>
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <UART_SetConfig+0xa18>)
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007304:	e07d      	b.n	8007402 <UART_SetConfig+0xafa>
 8007306:	bf00      	nop
 8007308:	58024400 	.word	0x58024400
 800730c:	03d09000 	.word	0x03d09000
 8007310:	0003d090 	.word	0x0003d090
 8007314:	0007a120 	.word	0x0007a120
 8007318:	000f4240 	.word	0x000f4240
 800731c:	001e8480 	.word	0x001e8480
 8007320:	003d0900 	.word	0x003d0900
 8007324:	00516155 	.word	0x00516155
 8007328:	0061a800 	.word	0x0061a800
 800732c:	007a1200 	.word	0x007a1200
 8007330:	00a2c2aa 	.word	0x00a2c2aa
 8007334:	00f42400 	.word	0x00f42400
 8007338:	01e84800 	.word	0x01e84800
 800733c:	0001e848 	.word	0x0001e848
 8007340:	00051615 	.word	0x00051615
 8007344:	00061a80 	.word	0x00061a80
 8007348:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d04e      	beq.n	80073f2 <UART_SetConfig+0xaea>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	2b01      	cmp	r3, #1
 800735a:	d047      	beq.n	80073ec <UART_SetConfig+0xae4>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007360:	2b02      	cmp	r3, #2
 8007362:	d040      	beq.n	80073e6 <UART_SetConfig+0xade>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2b03      	cmp	r3, #3
 800736a:	d039      	beq.n	80073e0 <UART_SetConfig+0xad8>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	2b04      	cmp	r3, #4
 8007372:	d032      	beq.n	80073da <UART_SetConfig+0xad2>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007378:	2b05      	cmp	r3, #5
 800737a:	d02b      	beq.n	80073d4 <UART_SetConfig+0xacc>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	2b06      	cmp	r3, #6
 8007382:	d024      	beq.n	80073ce <UART_SetConfig+0xac6>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	2b07      	cmp	r3, #7
 800738a:	d01d      	beq.n	80073c8 <UART_SetConfig+0xac0>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007390:	2b08      	cmp	r3, #8
 8007392:	d016      	beq.n	80073c2 <UART_SetConfig+0xaba>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007398:	2b09      	cmp	r3, #9
 800739a:	d00f      	beq.n	80073bc <UART_SetConfig+0xab4>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a0:	2b0a      	cmp	r3, #10
 80073a2:	d008      	beq.n	80073b6 <UART_SetConfig+0xaae>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a8:	2b0b      	cmp	r3, #11
 80073aa:	d101      	bne.n	80073b0 <UART_SetConfig+0xaa8>
 80073ac:	2380      	movs	r3, #128	; 0x80
 80073ae:	e022      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073b4:	e01f      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ba:	e01c      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073c0:	e019      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073c6:	e016      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073cc:	e013      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80073d2:	e010      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80073d8:	e00d      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073de:	e00a      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80073e4:	e007      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073ea:	e004      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073f0:	e001      	b.n	80073f6 <UART_SetConfig+0xaee>
 80073f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073f8:	e003      	b.n	8007402 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007400:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8007402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	f001 83e8 	beq.w	8008bda <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	4413      	add	r3, r2
 8007414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007416:	429a      	cmp	r2, r3
 8007418:	d305      	bcc.n	8007426 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007422:	429a      	cmp	r2, r3
 8007424:	d904      	bls.n	8007430 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800742c:	f001 bbd5 	b.w	8008bda <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8007430:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007434:	2b08      	cmp	r3, #8
 8007436:	f000 8154 	beq.w	80076e2 <UART_SetConfig+0xdda>
 800743a:	2b08      	cmp	r3, #8
 800743c:	dc06      	bgt.n	800744c <UART_SetConfig+0xb44>
 800743e:	2b02      	cmp	r3, #2
 8007440:	d00f      	beq.n	8007462 <UART_SetConfig+0xb5a>
 8007442:	2b04      	cmp	r3, #4
 8007444:	f000 80ac 	beq.w	80075a0 <UART_SetConfig+0xc98>
 8007448:	f000 bc30 	b.w	8007cac <UART_SetConfig+0x13a4>
 800744c:	2b20      	cmp	r3, #32
 800744e:	f000 832d 	beq.w	8007aac <UART_SetConfig+0x11a4>
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	f000 83a5 	beq.w	8007ba2 <UART_SetConfig+0x129a>
 8007458:	2b10      	cmp	r3, #16
 800745a:	f000 81e3 	beq.w	8007824 <UART_SetConfig+0xf1c>
 800745e:	f000 bc25 	b.w	8007cac <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007462:	f7fd fb55 	bl	8004b10 <HAL_RCCEx_GetD3PCLK1Freq>
 8007466:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746a:	4618      	mov	r0, r3
 800746c:	f04f 0100 	mov.w	r1, #0
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	d067      	beq.n	8007548 <UART_SetConfig+0xc40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	2b01      	cmp	r3, #1
 800747e:	d05e      	beq.n	800753e <UART_SetConfig+0xc36>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	2b02      	cmp	r3, #2
 8007486:	d055      	beq.n	8007534 <UART_SetConfig+0xc2c>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	2b03      	cmp	r3, #3
 800748e:	d04c      	beq.n	800752a <UART_SetConfig+0xc22>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	2b04      	cmp	r3, #4
 8007496:	d043      	beq.n	8007520 <UART_SetConfig+0xc18>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749c:	2b05      	cmp	r3, #5
 800749e:	d03a      	beq.n	8007516 <UART_SetConfig+0xc0e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a4:	2b06      	cmp	r3, #6
 80074a6:	d031      	beq.n	800750c <UART_SetConfig+0xc04>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	2b07      	cmp	r3, #7
 80074ae:	d028      	beq.n	8007502 <UART_SetConfig+0xbfa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d01f      	beq.n	80074f8 <UART_SetConfig+0xbf0>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	2b09      	cmp	r3, #9
 80074be:	d016      	beq.n	80074ee <UART_SetConfig+0xbe6>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c4:	2b0a      	cmp	r3, #10
 80074c6:	d00d      	beq.n	80074e4 <UART_SetConfig+0xbdc>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	2b0b      	cmp	r3, #11
 80074ce:	d104      	bne.n	80074da <UART_SetConfig+0xbd2>
 80074d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d4:	f04f 0400 	mov.w	r4, #0
 80074d8:	e03a      	b.n	8007550 <UART_SetConfig+0xc48>
 80074da:	f04f 0301 	mov.w	r3, #1
 80074de:	f04f 0400 	mov.w	r4, #0
 80074e2:	e035      	b.n	8007550 <UART_SetConfig+0xc48>
 80074e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80074e8:	f04f 0400 	mov.w	r4, #0
 80074ec:	e030      	b.n	8007550 <UART_SetConfig+0xc48>
 80074ee:	f04f 0340 	mov.w	r3, #64	; 0x40
 80074f2:	f04f 0400 	mov.w	r4, #0
 80074f6:	e02b      	b.n	8007550 <UART_SetConfig+0xc48>
 80074f8:	f04f 0320 	mov.w	r3, #32
 80074fc:	f04f 0400 	mov.w	r4, #0
 8007500:	e026      	b.n	8007550 <UART_SetConfig+0xc48>
 8007502:	f04f 0310 	mov.w	r3, #16
 8007506:	f04f 0400 	mov.w	r4, #0
 800750a:	e021      	b.n	8007550 <UART_SetConfig+0xc48>
 800750c:	f04f 030c 	mov.w	r3, #12
 8007510:	f04f 0400 	mov.w	r4, #0
 8007514:	e01c      	b.n	8007550 <UART_SetConfig+0xc48>
 8007516:	f04f 030a 	mov.w	r3, #10
 800751a:	f04f 0400 	mov.w	r4, #0
 800751e:	e017      	b.n	8007550 <UART_SetConfig+0xc48>
 8007520:	f04f 0308 	mov.w	r3, #8
 8007524:	f04f 0400 	mov.w	r4, #0
 8007528:	e012      	b.n	8007550 <UART_SetConfig+0xc48>
 800752a:	f04f 0306 	mov.w	r3, #6
 800752e:	f04f 0400 	mov.w	r4, #0
 8007532:	e00d      	b.n	8007550 <UART_SetConfig+0xc48>
 8007534:	f04f 0304 	mov.w	r3, #4
 8007538:	f04f 0400 	mov.w	r4, #0
 800753c:	e008      	b.n	8007550 <UART_SetConfig+0xc48>
 800753e:	f04f 0302 	mov.w	r3, #2
 8007542:	f04f 0400 	mov.w	r4, #0
 8007546:	e003      	b.n	8007550 <UART_SetConfig+0xc48>
 8007548:	f04f 0301 	mov.w	r3, #1
 800754c:	f04f 0400 	mov.w	r4, #0
 8007550:	461a      	mov	r2, r3
 8007552:	4623      	mov	r3, r4
 8007554:	f7f8 fec0 	bl	80002d8 <__aeabi_uldivmod>
 8007558:	4603      	mov	r3, r0
 800755a:	460c      	mov	r4, r1
 800755c:	4619      	mov	r1, r3
 800755e:	4622      	mov	r2, r4
 8007560:	f04f 0300 	mov.w	r3, #0
 8007564:	f04f 0400 	mov.w	r4, #0
 8007568:	0214      	lsls	r4, r2, #8
 800756a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800756e:	020b      	lsls	r3, r1, #8
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6852      	ldr	r2, [r2, #4]
 8007574:	0852      	lsrs	r2, r2, #1
 8007576:	4611      	mov	r1, r2
 8007578:	f04f 0200 	mov.w	r2, #0
 800757c:	eb13 0b01 	adds.w	fp, r3, r1
 8007580:	eb44 0c02 	adc.w	ip, r4, r2
 8007584:	4658      	mov	r0, fp
 8007586:	4661      	mov	r1, ip
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f04f 0400 	mov.w	r4, #0
 8007590:	461a      	mov	r2, r3
 8007592:	4623      	mov	r3, r4
 8007594:	f7f8 fea0 	bl	80002d8 <__aeabi_uldivmod>
 8007598:	4603      	mov	r3, r0
 800759a:	460c      	mov	r4, r1
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800759e:	e389      	b.n	8007cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a0:	f107 0318 	add.w	r3, r7, #24
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fd fac9 	bl	8004b3c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f04f 0100 	mov.w	r1, #0
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d067      	beq.n	800768a <UART_SetConfig+0xd82>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d05e      	beq.n	8007680 <UART_SetConfig+0xd78>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d055      	beq.n	8007676 <UART_SetConfig+0xd6e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d04c      	beq.n	800766c <UART_SetConfig+0xd64>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d043      	beq.n	8007662 <UART_SetConfig+0xd5a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075de:	2b05      	cmp	r3, #5
 80075e0:	d03a      	beq.n	8007658 <UART_SetConfig+0xd50>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	2b06      	cmp	r3, #6
 80075e8:	d031      	beq.n	800764e <UART_SetConfig+0xd46>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b07      	cmp	r3, #7
 80075f0:	d028      	beq.n	8007644 <UART_SetConfig+0xd3c>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d01f      	beq.n	800763a <UART_SetConfig+0xd32>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b09      	cmp	r3, #9
 8007600:	d016      	beq.n	8007630 <UART_SetConfig+0xd28>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b0a      	cmp	r3, #10
 8007608:	d00d      	beq.n	8007626 <UART_SetConfig+0xd1e>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	2b0b      	cmp	r3, #11
 8007610:	d104      	bne.n	800761c <UART_SetConfig+0xd14>
 8007612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007616:	f04f 0400 	mov.w	r4, #0
 800761a:	e03a      	b.n	8007692 <UART_SetConfig+0xd8a>
 800761c:	f04f 0301 	mov.w	r3, #1
 8007620:	f04f 0400 	mov.w	r4, #0
 8007624:	e035      	b.n	8007692 <UART_SetConfig+0xd8a>
 8007626:	f04f 0380 	mov.w	r3, #128	; 0x80
 800762a:	f04f 0400 	mov.w	r4, #0
 800762e:	e030      	b.n	8007692 <UART_SetConfig+0xd8a>
 8007630:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007634:	f04f 0400 	mov.w	r4, #0
 8007638:	e02b      	b.n	8007692 <UART_SetConfig+0xd8a>
 800763a:	f04f 0320 	mov.w	r3, #32
 800763e:	f04f 0400 	mov.w	r4, #0
 8007642:	e026      	b.n	8007692 <UART_SetConfig+0xd8a>
 8007644:	f04f 0310 	mov.w	r3, #16
 8007648:	f04f 0400 	mov.w	r4, #0
 800764c:	e021      	b.n	8007692 <UART_SetConfig+0xd8a>
 800764e:	f04f 030c 	mov.w	r3, #12
 8007652:	f04f 0400 	mov.w	r4, #0
 8007656:	e01c      	b.n	8007692 <UART_SetConfig+0xd8a>
 8007658:	f04f 030a 	mov.w	r3, #10
 800765c:	f04f 0400 	mov.w	r4, #0
 8007660:	e017      	b.n	8007692 <UART_SetConfig+0xd8a>
 8007662:	f04f 0308 	mov.w	r3, #8
 8007666:	f04f 0400 	mov.w	r4, #0
 800766a:	e012      	b.n	8007692 <UART_SetConfig+0xd8a>
 800766c:	f04f 0306 	mov.w	r3, #6
 8007670:	f04f 0400 	mov.w	r4, #0
 8007674:	e00d      	b.n	8007692 <UART_SetConfig+0xd8a>
 8007676:	f04f 0304 	mov.w	r3, #4
 800767a:	f04f 0400 	mov.w	r4, #0
 800767e:	e008      	b.n	8007692 <UART_SetConfig+0xd8a>
 8007680:	f04f 0302 	mov.w	r3, #2
 8007684:	f04f 0400 	mov.w	r4, #0
 8007688:	e003      	b.n	8007692 <UART_SetConfig+0xd8a>
 800768a:	f04f 0301 	mov.w	r3, #1
 800768e:	f04f 0400 	mov.w	r4, #0
 8007692:	461a      	mov	r2, r3
 8007694:	4623      	mov	r3, r4
 8007696:	f7f8 fe1f 	bl	80002d8 <__aeabi_uldivmod>
 800769a:	4603      	mov	r3, r0
 800769c:	460c      	mov	r4, r1
 800769e:	4619      	mov	r1, r3
 80076a0:	4622      	mov	r2, r4
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	f04f 0400 	mov.w	r4, #0
 80076aa:	0214      	lsls	r4, r2, #8
 80076ac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80076b0:	020b      	lsls	r3, r1, #8
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	6852      	ldr	r2, [r2, #4]
 80076b6:	0852      	lsrs	r2, r2, #1
 80076b8:	4611      	mov	r1, r2
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	eb13 0b01 	adds.w	fp, r3, r1
 80076c2:	eb44 0c02 	adc.w	ip, r4, r2
 80076c6:	4658      	mov	r0, fp
 80076c8:	4661      	mov	r1, ip
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f04f 0400 	mov.w	r4, #0
 80076d2:	461a      	mov	r2, r3
 80076d4:	4623      	mov	r3, r4
 80076d6:	f7f8 fdff 	bl	80002d8 <__aeabi_uldivmod>
 80076da:	4603      	mov	r3, r0
 80076dc:	460c      	mov	r4, r1
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076e0:	e2e8      	b.n	8007cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076e2:	f107 030c 	add.w	r3, r7, #12
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fd fb74 	bl	8004dd4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f04f 0100 	mov.w	r1, #0
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d067      	beq.n	80077cc <UART_SetConfig+0xec4>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	2b01      	cmp	r3, #1
 8007702:	d05e      	beq.n	80077c2 <UART_SetConfig+0xeba>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007708:	2b02      	cmp	r3, #2
 800770a:	d055      	beq.n	80077b8 <UART_SetConfig+0xeb0>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	2b03      	cmp	r3, #3
 8007712:	d04c      	beq.n	80077ae <UART_SetConfig+0xea6>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007718:	2b04      	cmp	r3, #4
 800771a:	d043      	beq.n	80077a4 <UART_SetConfig+0xe9c>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	2b05      	cmp	r3, #5
 8007722:	d03a      	beq.n	800779a <UART_SetConfig+0xe92>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007728:	2b06      	cmp	r3, #6
 800772a:	d031      	beq.n	8007790 <UART_SetConfig+0xe88>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b07      	cmp	r3, #7
 8007732:	d028      	beq.n	8007786 <UART_SetConfig+0xe7e>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007738:	2b08      	cmp	r3, #8
 800773a:	d01f      	beq.n	800777c <UART_SetConfig+0xe74>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	2b09      	cmp	r3, #9
 8007742:	d016      	beq.n	8007772 <UART_SetConfig+0xe6a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2b0a      	cmp	r3, #10
 800774a:	d00d      	beq.n	8007768 <UART_SetConfig+0xe60>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	2b0b      	cmp	r3, #11
 8007752:	d104      	bne.n	800775e <UART_SetConfig+0xe56>
 8007754:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007758:	f04f 0400 	mov.w	r4, #0
 800775c:	e03a      	b.n	80077d4 <UART_SetConfig+0xecc>
 800775e:	f04f 0301 	mov.w	r3, #1
 8007762:	f04f 0400 	mov.w	r4, #0
 8007766:	e035      	b.n	80077d4 <UART_SetConfig+0xecc>
 8007768:	f04f 0380 	mov.w	r3, #128	; 0x80
 800776c:	f04f 0400 	mov.w	r4, #0
 8007770:	e030      	b.n	80077d4 <UART_SetConfig+0xecc>
 8007772:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007776:	f04f 0400 	mov.w	r4, #0
 800777a:	e02b      	b.n	80077d4 <UART_SetConfig+0xecc>
 800777c:	f04f 0320 	mov.w	r3, #32
 8007780:	f04f 0400 	mov.w	r4, #0
 8007784:	e026      	b.n	80077d4 <UART_SetConfig+0xecc>
 8007786:	f04f 0310 	mov.w	r3, #16
 800778a:	f04f 0400 	mov.w	r4, #0
 800778e:	e021      	b.n	80077d4 <UART_SetConfig+0xecc>
 8007790:	f04f 030c 	mov.w	r3, #12
 8007794:	f04f 0400 	mov.w	r4, #0
 8007798:	e01c      	b.n	80077d4 <UART_SetConfig+0xecc>
 800779a:	f04f 030a 	mov.w	r3, #10
 800779e:	f04f 0400 	mov.w	r4, #0
 80077a2:	e017      	b.n	80077d4 <UART_SetConfig+0xecc>
 80077a4:	f04f 0308 	mov.w	r3, #8
 80077a8:	f04f 0400 	mov.w	r4, #0
 80077ac:	e012      	b.n	80077d4 <UART_SetConfig+0xecc>
 80077ae:	f04f 0306 	mov.w	r3, #6
 80077b2:	f04f 0400 	mov.w	r4, #0
 80077b6:	e00d      	b.n	80077d4 <UART_SetConfig+0xecc>
 80077b8:	f04f 0304 	mov.w	r3, #4
 80077bc:	f04f 0400 	mov.w	r4, #0
 80077c0:	e008      	b.n	80077d4 <UART_SetConfig+0xecc>
 80077c2:	f04f 0302 	mov.w	r3, #2
 80077c6:	f04f 0400 	mov.w	r4, #0
 80077ca:	e003      	b.n	80077d4 <UART_SetConfig+0xecc>
 80077cc:	f04f 0301 	mov.w	r3, #1
 80077d0:	f04f 0400 	mov.w	r4, #0
 80077d4:	461a      	mov	r2, r3
 80077d6:	4623      	mov	r3, r4
 80077d8:	f7f8 fd7e 	bl	80002d8 <__aeabi_uldivmod>
 80077dc:	4603      	mov	r3, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	4619      	mov	r1, r3
 80077e2:	4622      	mov	r2, r4
 80077e4:	f04f 0300 	mov.w	r3, #0
 80077e8:	f04f 0400 	mov.w	r4, #0
 80077ec:	0214      	lsls	r4, r2, #8
 80077ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80077f2:	020b      	lsls	r3, r1, #8
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6852      	ldr	r2, [r2, #4]
 80077f8:	0852      	lsrs	r2, r2, #1
 80077fa:	4611      	mov	r1, r2
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	eb13 0b01 	adds.w	fp, r3, r1
 8007804:	eb44 0c02 	adc.w	ip, r4, r2
 8007808:	4658      	mov	r0, fp
 800780a:	4661      	mov	r1, ip
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f04f 0400 	mov.w	r4, #0
 8007814:	461a      	mov	r2, r3
 8007816:	4623      	mov	r3, r4
 8007818:	f7f8 fd5e 	bl	80002d8 <__aeabi_uldivmod>
 800781c:	4603      	mov	r3, r0
 800781e:	460c      	mov	r4, r1
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007822:	e247      	b.n	8007cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007824:	4b96      	ldr	r3, [pc, #600]	; (8007a80 <UART_SetConfig+0x1178>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80a3 	beq.w	8007978 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007832:	4b93      	ldr	r3, [pc, #588]	; (8007a80 <UART_SetConfig+0x1178>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	08db      	lsrs	r3, r3, #3
 8007838:	f003 0303 	and.w	r3, r3, #3
 800783c:	4a91      	ldr	r2, [pc, #580]	; (8007a84 <UART_SetConfig+0x117c>)
 800783e:	fa22 f303 	lsr.w	r3, r2, r3
 8007842:	4618      	mov	r0, r3
 8007844:	f04f 0100 	mov.w	r1, #0
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d067      	beq.n	8007920 <UART_SetConfig+0x1018>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	2b01      	cmp	r3, #1
 8007856:	d05e      	beq.n	8007916 <UART_SetConfig+0x100e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	2b02      	cmp	r3, #2
 800785e:	d055      	beq.n	800790c <UART_SetConfig+0x1004>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	2b03      	cmp	r3, #3
 8007866:	d04c      	beq.n	8007902 <UART_SetConfig+0xffa>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	2b04      	cmp	r3, #4
 800786e:	d043      	beq.n	80078f8 <UART_SetConfig+0xff0>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	2b05      	cmp	r3, #5
 8007876:	d03a      	beq.n	80078ee <UART_SetConfig+0xfe6>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2b06      	cmp	r3, #6
 800787e:	d031      	beq.n	80078e4 <UART_SetConfig+0xfdc>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	2b07      	cmp	r3, #7
 8007886:	d028      	beq.n	80078da <UART_SetConfig+0xfd2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b08      	cmp	r3, #8
 800788e:	d01f      	beq.n	80078d0 <UART_SetConfig+0xfc8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2b09      	cmp	r3, #9
 8007896:	d016      	beq.n	80078c6 <UART_SetConfig+0xfbe>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	2b0a      	cmp	r3, #10
 800789e:	d00d      	beq.n	80078bc <UART_SetConfig+0xfb4>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	2b0b      	cmp	r3, #11
 80078a6:	d104      	bne.n	80078b2 <UART_SetConfig+0xfaa>
 80078a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ac:	f04f 0400 	mov.w	r4, #0
 80078b0:	e03a      	b.n	8007928 <UART_SetConfig+0x1020>
 80078b2:	f04f 0301 	mov.w	r3, #1
 80078b6:	f04f 0400 	mov.w	r4, #0
 80078ba:	e035      	b.n	8007928 <UART_SetConfig+0x1020>
 80078bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80078c0:	f04f 0400 	mov.w	r4, #0
 80078c4:	e030      	b.n	8007928 <UART_SetConfig+0x1020>
 80078c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80078ca:	f04f 0400 	mov.w	r4, #0
 80078ce:	e02b      	b.n	8007928 <UART_SetConfig+0x1020>
 80078d0:	f04f 0320 	mov.w	r3, #32
 80078d4:	f04f 0400 	mov.w	r4, #0
 80078d8:	e026      	b.n	8007928 <UART_SetConfig+0x1020>
 80078da:	f04f 0310 	mov.w	r3, #16
 80078de:	f04f 0400 	mov.w	r4, #0
 80078e2:	e021      	b.n	8007928 <UART_SetConfig+0x1020>
 80078e4:	f04f 030c 	mov.w	r3, #12
 80078e8:	f04f 0400 	mov.w	r4, #0
 80078ec:	e01c      	b.n	8007928 <UART_SetConfig+0x1020>
 80078ee:	f04f 030a 	mov.w	r3, #10
 80078f2:	f04f 0400 	mov.w	r4, #0
 80078f6:	e017      	b.n	8007928 <UART_SetConfig+0x1020>
 80078f8:	f04f 0308 	mov.w	r3, #8
 80078fc:	f04f 0400 	mov.w	r4, #0
 8007900:	e012      	b.n	8007928 <UART_SetConfig+0x1020>
 8007902:	f04f 0306 	mov.w	r3, #6
 8007906:	f04f 0400 	mov.w	r4, #0
 800790a:	e00d      	b.n	8007928 <UART_SetConfig+0x1020>
 800790c:	f04f 0304 	mov.w	r3, #4
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	e008      	b.n	8007928 <UART_SetConfig+0x1020>
 8007916:	f04f 0302 	mov.w	r3, #2
 800791a:	f04f 0400 	mov.w	r4, #0
 800791e:	e003      	b.n	8007928 <UART_SetConfig+0x1020>
 8007920:	f04f 0301 	mov.w	r3, #1
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	461a      	mov	r2, r3
 800792a:	4623      	mov	r3, r4
 800792c:	f7f8 fcd4 	bl	80002d8 <__aeabi_uldivmod>
 8007930:	4603      	mov	r3, r0
 8007932:	460c      	mov	r4, r1
 8007934:	4619      	mov	r1, r3
 8007936:	4622      	mov	r2, r4
 8007938:	f04f 0300 	mov.w	r3, #0
 800793c:	f04f 0400 	mov.w	r4, #0
 8007940:	0214      	lsls	r4, r2, #8
 8007942:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8007946:	020b      	lsls	r3, r1, #8
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6852      	ldr	r2, [r2, #4]
 800794c:	0852      	lsrs	r2, r2, #1
 800794e:	4611      	mov	r1, r2
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	eb13 0b01 	adds.w	fp, r3, r1
 8007958:	eb44 0c02 	adc.w	ip, r4, r2
 800795c:	4658      	mov	r0, fp
 800795e:	4661      	mov	r1, ip
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f04f 0400 	mov.w	r4, #0
 8007968:	461a      	mov	r2, r3
 800796a:	4623      	mov	r3, r4
 800796c:	f7f8 fcb4 	bl	80002d8 <__aeabi_uldivmod>
 8007970:	4603      	mov	r3, r0
 8007972:	460c      	mov	r4, r1
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8007976:	e19d      	b.n	8007cb4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	2b00      	cmp	r3, #0
 800797e:	d05b      	beq.n	8007a38 <UART_SetConfig+0x1130>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	2b01      	cmp	r3, #1
 8007986:	d053      	beq.n	8007a30 <UART_SetConfig+0x1128>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2b02      	cmp	r3, #2
 800798e:	d04b      	beq.n	8007a28 <UART_SetConfig+0x1120>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007994:	2b03      	cmp	r3, #3
 8007996:	d043      	beq.n	8007a20 <UART_SetConfig+0x1118>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799c:	2b04      	cmp	r3, #4
 800799e:	d03b      	beq.n	8007a18 <UART_SetConfig+0x1110>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a4:	2b05      	cmp	r3, #5
 80079a6:	d033      	beq.n	8007a10 <UART_SetConfig+0x1108>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b06      	cmp	r3, #6
 80079ae:	d02b      	beq.n	8007a08 <UART_SetConfig+0x1100>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	2b07      	cmp	r3, #7
 80079b6:	d023      	beq.n	8007a00 <UART_SetConfig+0x10f8>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d01b      	beq.n	80079f8 <UART_SetConfig+0x10f0>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b09      	cmp	r3, #9
 80079c6:	d013      	beq.n	80079f0 <UART_SetConfig+0x10e8>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	2b0a      	cmp	r3, #10
 80079ce:	d00b      	beq.n	80079e8 <UART_SetConfig+0x10e0>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d4:	2b0b      	cmp	r3, #11
 80079d6:	d103      	bne.n	80079e0 <UART_SetConfig+0x10d8>
 80079d8:	4b2a      	ldr	r3, [pc, #168]	; (8007a84 <UART_SetConfig+0x117c>)
 80079da:	f04f 0400 	mov.w	r4, #0
 80079de:	e02e      	b.n	8007a3e <UART_SetConfig+0x1136>
 80079e0:	4b29      	ldr	r3, [pc, #164]	; (8007a88 <UART_SetConfig+0x1180>)
 80079e2:	f04f 0403 	mov.w	r4, #3
 80079e6:	e02a      	b.n	8007a3e <UART_SetConfig+0x1136>
 80079e8:	4b28      	ldr	r3, [pc, #160]	; (8007a8c <UART_SetConfig+0x1184>)
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	e026      	b.n	8007a3e <UART_SetConfig+0x1136>
 80079f0:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <UART_SetConfig+0x1188>)
 80079f2:	f04f 0400 	mov.w	r4, #0
 80079f6:	e022      	b.n	8007a3e <UART_SetConfig+0x1136>
 80079f8:	4b26      	ldr	r3, [pc, #152]	; (8007a94 <UART_SetConfig+0x118c>)
 80079fa:	f04f 0400 	mov.w	r4, #0
 80079fe:	e01e      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a00:	4b25      	ldr	r3, [pc, #148]	; (8007a98 <UART_SetConfig+0x1190>)
 8007a02:	f04f 0400 	mov.w	r4, #0
 8007a06:	e01a      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a08:	a419      	add	r4, pc, #100	; (adr r4, 8007a70 <UART_SetConfig+0x1168>)
 8007a0a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a0e:	e016      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a10:	4b22      	ldr	r3, [pc, #136]	; (8007a9c <UART_SetConfig+0x1194>)
 8007a12:	f04f 0400 	mov.w	r4, #0
 8007a16:	e012      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a18:	4b21      	ldr	r3, [pc, #132]	; (8007aa0 <UART_SetConfig+0x1198>)
 8007a1a:	f04f 0400 	mov.w	r4, #0
 8007a1e:	e00e      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a20:	a415      	add	r4, pc, #84	; (adr r4, 8007a78 <UART_SetConfig+0x1170>)
 8007a22:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007a26:	e00a      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a28:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <UART_SetConfig+0x119c>)
 8007a2a:	f04f 0400 	mov.w	r4, #0
 8007a2e:	e006      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a30:	4b1d      	ldr	r3, [pc, #116]	; (8007aa8 <UART_SetConfig+0x11a0>)
 8007a32:	f04f 0401 	mov.w	r4, #1
 8007a36:	e002      	b.n	8007a3e <UART_SetConfig+0x1136>
 8007a38:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <UART_SetConfig+0x1180>)
 8007a3a:	f04f 0403 	mov.w	r4, #3
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6852      	ldr	r2, [r2, #4]
 8007a42:	0852      	lsrs	r2, r2, #1
 8007a44:	4611      	mov	r1, r2
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	eb13 0b01 	adds.w	fp, r3, r1
 8007a4e:	eb44 0c02 	adc.w	ip, r4, r2
 8007a52:	4658      	mov	r0, fp
 8007a54:	4661      	mov	r1, ip
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f04f 0400 	mov.w	r4, #0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	4623      	mov	r3, r4
 8007a62:	f7f8 fc39 	bl	80002d8 <__aeabi_uldivmod>
 8007a66:	4603      	mov	r3, r0
 8007a68:	460c      	mov	r4, r1
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a6c:	e122      	b.n	8007cb4 <UART_SetConfig+0x13ac>
 8007a6e:	bf00      	nop
 8007a70:	51615500 	.word	0x51615500
 8007a74:	00000000 	.word	0x00000000
 8007a78:	a2c2aa00 	.word	0xa2c2aa00
 8007a7c:	00000000 	.word	0x00000000
 8007a80:	58024400 	.word	0x58024400
 8007a84:	03d09000 	.word	0x03d09000
 8007a88:	d0900000 	.word	0xd0900000
 8007a8c:	07a12000 	.word	0x07a12000
 8007a90:	0f424000 	.word	0x0f424000
 8007a94:	1e848000 	.word	0x1e848000
 8007a98:	3d090000 	.word	0x3d090000
 8007a9c:	61a80000 	.word	0x61a80000
 8007aa0:	7a120000 	.word	0x7a120000
 8007aa4:	f4240000 	.word	0xf4240000
 8007aa8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d05b      	beq.n	8007b6c <UART_SetConfig+0x1264>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d053      	beq.n	8007b64 <UART_SetConfig+0x125c>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d04b      	beq.n	8007b5c <UART_SetConfig+0x1254>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	2b03      	cmp	r3, #3
 8007aca:	d043      	beq.n	8007b54 <UART_SetConfig+0x124c>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d03b      	beq.n	8007b4c <UART_SetConfig+0x1244>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad8:	2b05      	cmp	r3, #5
 8007ada:	d033      	beq.n	8007b44 <UART_SetConfig+0x123c>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	2b06      	cmp	r3, #6
 8007ae2:	d02b      	beq.n	8007b3c <UART_SetConfig+0x1234>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b07      	cmp	r3, #7
 8007aea:	d023      	beq.n	8007b34 <UART_SetConfig+0x122c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d01b      	beq.n	8007b2c <UART_SetConfig+0x1224>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b09      	cmp	r3, #9
 8007afa:	d013      	beq.n	8007b24 <UART_SetConfig+0x121c>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b00:	2b0a      	cmp	r3, #10
 8007b02:	d00b      	beq.n	8007b1c <UART_SetConfig+0x1214>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	2b0b      	cmp	r3, #11
 8007b0a:	d103      	bne.n	8007b14 <UART_SetConfig+0x120c>
 8007b0c:	4bc0      	ldr	r3, [pc, #768]	; (8007e10 <UART_SetConfig+0x1508>)
 8007b0e:	f04f 0400 	mov.w	r4, #0
 8007b12:	e02e      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b14:	4bbf      	ldr	r3, [pc, #764]	; (8007e14 <UART_SetConfig+0x150c>)
 8007b16:	f04f 0400 	mov.w	r4, #0
 8007b1a:	e02a      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b1c:	4bbe      	ldr	r3, [pc, #760]	; (8007e18 <UART_SetConfig+0x1510>)
 8007b1e:	f04f 0400 	mov.w	r4, #0
 8007b22:	e026      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b24:	4bbd      	ldr	r3, [pc, #756]	; (8007e1c <UART_SetConfig+0x1514>)
 8007b26:	f04f 0400 	mov.w	r4, #0
 8007b2a:	e022      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b2c:	4bbc      	ldr	r3, [pc, #752]	; (8007e20 <UART_SetConfig+0x1518>)
 8007b2e:	f04f 0400 	mov.w	r4, #0
 8007b32:	e01e      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b34:	4bbb      	ldr	r3, [pc, #748]	; (8007e24 <UART_SetConfig+0x151c>)
 8007b36:	f04f 0400 	mov.w	r4, #0
 8007b3a:	e01a      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b3c:	a4b0      	add	r4, pc, #704	; (adr r4, 8007e00 <UART_SetConfig+0x14f8>)
 8007b3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b42:	e016      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b44:	4bb8      	ldr	r3, [pc, #736]	; (8007e28 <UART_SetConfig+0x1520>)
 8007b46:	f04f 0400 	mov.w	r4, #0
 8007b4a:	e012      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b4c:	4bb7      	ldr	r3, [pc, #732]	; (8007e2c <UART_SetConfig+0x1524>)
 8007b4e:	f04f 0400 	mov.w	r4, #0
 8007b52:	e00e      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b54:	a4ac      	add	r4, pc, #688	; (adr r4, 8007e08 <UART_SetConfig+0x1500>)
 8007b56:	e9d4 3400 	ldrd	r3, r4, [r4]
 8007b5a:	e00a      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b5c:	4bb4      	ldr	r3, [pc, #720]	; (8007e30 <UART_SetConfig+0x1528>)
 8007b5e:	f04f 0400 	mov.w	r4, #0
 8007b62:	e006      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b64:	4bb3      	ldr	r3, [pc, #716]	; (8007e34 <UART_SetConfig+0x152c>)
 8007b66:	f04f 0400 	mov.w	r4, #0
 8007b6a:	e002      	b.n	8007b72 <UART_SetConfig+0x126a>
 8007b6c:	4ba9      	ldr	r3, [pc, #676]	; (8007e14 <UART_SetConfig+0x150c>)
 8007b6e:	f04f 0400 	mov.w	r4, #0
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6852      	ldr	r2, [r2, #4]
 8007b76:	0852      	lsrs	r2, r2, #1
 8007b78:	4611      	mov	r1, r2
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	eb13 0b01 	adds.w	fp, r3, r1
 8007b82:	eb44 0c02 	adc.w	ip, r4, r2
 8007b86:	4658      	mov	r0, fp
 8007b88:	4661      	mov	r1, ip
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f04f 0400 	mov.w	r4, #0
 8007b92:	461a      	mov	r2, r3
 8007b94:	4623      	mov	r3, r4
 8007b96:	f7f8 fb9f 	bl	80002d8 <__aeabi_uldivmod>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ba0:	e088      	b.n	8007cb4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d064      	beq.n	8007c74 <UART_SetConfig+0x136c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d05b      	beq.n	8007c6a <UART_SetConfig+0x1362>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d052      	beq.n	8007c60 <UART_SetConfig+0x1358>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d04a      	beq.n	8007c58 <UART_SetConfig+0x1350>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d041      	beq.n	8007c4e <UART_SetConfig+0x1346>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bce:	2b05      	cmp	r3, #5
 8007bd0:	d039      	beq.n	8007c46 <UART_SetConfig+0x133e>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	d031      	beq.n	8007c3e <UART_SetConfig+0x1336>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	2b07      	cmp	r3, #7
 8007be0:	d028      	beq.n	8007c34 <UART_SetConfig+0x132c>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d01f      	beq.n	8007c2a <UART_SetConfig+0x1322>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	2b09      	cmp	r3, #9
 8007bf0:	d016      	beq.n	8007c20 <UART_SetConfig+0x1318>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf6:	2b0a      	cmp	r3, #10
 8007bf8:	d00d      	beq.n	8007c16 <UART_SetConfig+0x130e>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfe:	2b0b      	cmp	r3, #11
 8007c00:	d104      	bne.n	8007c0c <UART_SetConfig+0x1304>
 8007c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c06:	f04f 0400 	mov.w	r4, #0
 8007c0a:	e037      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c10:	f04f 0400 	mov.w	r4, #0
 8007c14:	e032      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c1a:	f04f 0400 	mov.w	r4, #0
 8007c1e:	e02d      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c24:	f04f 0400 	mov.w	r4, #0
 8007c28:	e028      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c2e:	f04f 0400 	mov.w	r4, #0
 8007c32:	e023      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c38:	f04f 0400 	mov.w	r4, #0
 8007c3c:	e01e      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c3e:	4b7e      	ldr	r3, [pc, #504]	; (8007e38 <UART_SetConfig+0x1530>)
 8007c40:	f04f 0400 	mov.w	r4, #0
 8007c44:	e01a      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c46:	4b7d      	ldr	r3, [pc, #500]	; (8007e3c <UART_SetConfig+0x1534>)
 8007c48:	f04f 0400 	mov.w	r4, #0
 8007c4c:	e016      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c52:	f04f 0400 	mov.w	r4, #0
 8007c56:	e011      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c58:	4b79      	ldr	r3, [pc, #484]	; (8007e40 <UART_SetConfig+0x1538>)
 8007c5a:	f04f 0400 	mov.w	r4, #0
 8007c5e:	e00d      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c64:	f04f 0400 	mov.w	r4, #0
 8007c68:	e008      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007c6e:	f04f 0400 	mov.w	r4, #0
 8007c72:	e003      	b.n	8007c7c <UART_SetConfig+0x1374>
 8007c74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007c78:	f04f 0400 	mov.w	r4, #0
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6852      	ldr	r2, [r2, #4]
 8007c80:	0852      	lsrs	r2, r2, #1
 8007c82:	4611      	mov	r1, r2
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	eb13 0b01 	adds.w	fp, r3, r1
 8007c8c:	eb44 0c02 	adc.w	ip, r4, r2
 8007c90:	4658      	mov	r0, fp
 8007c92:	4661      	mov	r1, ip
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f04f 0400 	mov.w	r4, #0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4623      	mov	r3, r4
 8007ca0:	f7f8 fb1a 	bl	80002d8 <__aeabi_uldivmod>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	460c      	mov	r4, r1
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007caa:	e003      	b.n	8007cb4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8007cb2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cba:	d309      	bcc.n	8007cd0 <UART_SetConfig+0x13c8>
 8007cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cc2:	d205      	bcs.n	8007cd0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cca:	60da      	str	r2, [r3, #12]
 8007ccc:	f000 bf85 	b.w	8008bda <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007cd6:	f000 bf80 	b.w	8008bda <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce2:	f040 83da 	bne.w	800849a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8007ce6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007cea:	2b40      	cmp	r3, #64	; 0x40
 8007cec:	f200 83b3 	bhi.w	8008456 <UART_SetConfig+0x1b4e>
 8007cf0:	a201      	add	r2, pc, #4	; (adr r2, 8007cf8 <UART_SetConfig+0x13f0>)
 8007cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf6:	bf00      	nop
 8007cf8:	08007e45 	.word	0x08007e45
 8007cfc:	08007efd 	.word	0x08007efd
 8007d00:	08008457 	.word	0x08008457
 8007d04:	08008457 	.word	0x08008457
 8007d08:	08007fb5 	.word	0x08007fb5
 8007d0c:	08008457 	.word	0x08008457
 8007d10:	08008457 	.word	0x08008457
 8007d14:	08008457 	.word	0x08008457
 8007d18:	08008071 	.word	0x08008071
 8007d1c:	08008457 	.word	0x08008457
 8007d20:	08008457 	.word	0x08008457
 8007d24:	08008457 	.word	0x08008457
 8007d28:	08008457 	.word	0x08008457
 8007d2c:	08008457 	.word	0x08008457
 8007d30:	08008457 	.word	0x08008457
 8007d34:	08008457 	.word	0x08008457
 8007d38:	0800812d 	.word	0x0800812d
 8007d3c:	08008457 	.word	0x08008457
 8007d40:	08008457 	.word	0x08008457
 8007d44:	08008457 	.word	0x08008457
 8007d48:	08008457 	.word	0x08008457
 8007d4c:	08008457 	.word	0x08008457
 8007d50:	08008457 	.word	0x08008457
 8007d54:	08008457 	.word	0x08008457
 8007d58:	08008457 	.word	0x08008457
 8007d5c:	08008457 	.word	0x08008457
 8007d60:	08008457 	.word	0x08008457
 8007d64:	08008457 	.word	0x08008457
 8007d68:	08008457 	.word	0x08008457
 8007d6c:	08008457 	.word	0x08008457
 8007d70:	08008457 	.word	0x08008457
 8007d74:	08008457 	.word	0x08008457
 8007d78:	0800829f 	.word	0x0800829f
 8007d7c:	08008457 	.word	0x08008457
 8007d80:	08008457 	.word	0x08008457
 8007d84:	08008457 	.word	0x08008457
 8007d88:	08008457 	.word	0x08008457
 8007d8c:	08008457 	.word	0x08008457
 8007d90:	08008457 	.word	0x08008457
 8007d94:	08008457 	.word	0x08008457
 8007d98:	08008457 	.word	0x08008457
 8007d9c:	08008457 	.word	0x08008457
 8007da0:	08008457 	.word	0x08008457
 8007da4:	08008457 	.word	0x08008457
 8007da8:	08008457 	.word	0x08008457
 8007dac:	08008457 	.word	0x08008457
 8007db0:	08008457 	.word	0x08008457
 8007db4:	08008457 	.word	0x08008457
 8007db8:	08008457 	.word	0x08008457
 8007dbc:	08008457 	.word	0x08008457
 8007dc0:	08008457 	.word	0x08008457
 8007dc4:	08008457 	.word	0x08008457
 8007dc8:	08008457 	.word	0x08008457
 8007dcc:	08008457 	.word	0x08008457
 8007dd0:	08008457 	.word	0x08008457
 8007dd4:	08008457 	.word	0x08008457
 8007dd8:	08008457 	.word	0x08008457
 8007ddc:	08008457 	.word	0x08008457
 8007de0:	08008457 	.word	0x08008457
 8007de4:	08008457 	.word	0x08008457
 8007de8:	08008457 	.word	0x08008457
 8007dec:	08008457 	.word	0x08008457
 8007df0:	08008457 	.word	0x08008457
 8007df4:	08008457 	.word	0x08008457
 8007df8:	08008395 	.word	0x08008395
 8007dfc:	f3af 8000 	nop.w
 8007e00:	05161500 	.word	0x05161500
 8007e04:	00000000 	.word	0x00000000
 8007e08:	0a2c2a00 	.word	0x0a2c2a00
 8007e0c:	00000000 	.word	0x00000000
 8007e10:	003d0900 	.word	0x003d0900
 8007e14:	3d090000 	.word	0x3d090000
 8007e18:	007a1200 	.word	0x007a1200
 8007e1c:	00f42400 	.word	0x00f42400
 8007e20:	01e84800 	.word	0x01e84800
 8007e24:	03d09000 	.word	0x03d09000
 8007e28:	061a8000 	.word	0x061a8000
 8007e2c:	07a12000 	.word	0x07a12000
 8007e30:	0f424000 	.word	0x0f424000
 8007e34:	1e848000 	.word	0x1e848000
 8007e38:	000aaa00 	.word	0x000aaa00
 8007e3c:	000ccc00 	.word	0x000ccc00
 8007e40:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e44:	f7fb ff48 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 8007e48:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d044      	beq.n	8007edc <UART_SetConfig+0x15d4>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d03e      	beq.n	8007ed8 <UART_SetConfig+0x15d0>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d038      	beq.n	8007ed4 <UART_SetConfig+0x15cc>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d032      	beq.n	8007ed0 <UART_SetConfig+0x15c8>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d02c      	beq.n	8007ecc <UART_SetConfig+0x15c4>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	2b05      	cmp	r3, #5
 8007e78:	d026      	beq.n	8007ec8 <UART_SetConfig+0x15c0>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	2b06      	cmp	r3, #6
 8007e80:	d020      	beq.n	8007ec4 <UART_SetConfig+0x15bc>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b07      	cmp	r3, #7
 8007e88:	d01a      	beq.n	8007ec0 <UART_SetConfig+0x15b8>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d014      	beq.n	8007ebc <UART_SetConfig+0x15b4>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e96:	2b09      	cmp	r3, #9
 8007e98:	d00e      	beq.n	8007eb8 <UART_SetConfig+0x15b0>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	2b0a      	cmp	r3, #10
 8007ea0:	d008      	beq.n	8007eb4 <UART_SetConfig+0x15ac>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	2b0b      	cmp	r3, #11
 8007ea8:	d102      	bne.n	8007eb0 <UART_SetConfig+0x15a8>
 8007eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007eae:	e016      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e014      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007eb4:	2380      	movs	r3, #128	; 0x80
 8007eb6:	e012      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007eb8:	2340      	movs	r3, #64	; 0x40
 8007eba:	e010      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	e00e      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ec0:	2310      	movs	r3, #16
 8007ec2:	e00c      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ec4:	230c      	movs	r3, #12
 8007ec6:	e00a      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ec8:	230a      	movs	r3, #10
 8007eca:	e008      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ecc:	2308      	movs	r3, #8
 8007ece:	e006      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ed0:	2306      	movs	r3, #6
 8007ed2:	e004      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	e002      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e000      	b.n	8007ede <UART_SetConfig+0x15d6>
 8007edc:	2301      	movs	r3, #1
 8007ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee4:	005a      	lsls	r2, r3, #1
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	085b      	lsrs	r3, r3, #1
 8007eec:	441a      	add	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007efa:	e2b0      	b.n	800845e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007efc:	f7fb ff02 	bl	8003d04 <HAL_RCC_GetPCLK2Freq>
 8007f00:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d044      	beq.n	8007f94 <UART_SetConfig+0x168c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d03e      	beq.n	8007f90 <UART_SetConfig+0x1688>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d038      	beq.n	8007f8c <UART_SetConfig+0x1684>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d032      	beq.n	8007f88 <UART_SetConfig+0x1680>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	2b04      	cmp	r3, #4
 8007f28:	d02c      	beq.n	8007f84 <UART_SetConfig+0x167c>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b05      	cmp	r3, #5
 8007f30:	d026      	beq.n	8007f80 <UART_SetConfig+0x1678>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b06      	cmp	r3, #6
 8007f38:	d020      	beq.n	8007f7c <UART_SetConfig+0x1674>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	2b07      	cmp	r3, #7
 8007f40:	d01a      	beq.n	8007f78 <UART_SetConfig+0x1670>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	d014      	beq.n	8007f74 <UART_SetConfig+0x166c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	2b09      	cmp	r3, #9
 8007f50:	d00e      	beq.n	8007f70 <UART_SetConfig+0x1668>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b0a      	cmp	r3, #10
 8007f58:	d008      	beq.n	8007f6c <UART_SetConfig+0x1664>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	2b0b      	cmp	r3, #11
 8007f60:	d102      	bne.n	8007f68 <UART_SetConfig+0x1660>
 8007f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f66:	e016      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e014      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f6c:	2380      	movs	r3, #128	; 0x80
 8007f6e:	e012      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f70:	2340      	movs	r3, #64	; 0x40
 8007f72:	e010      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f74:	2320      	movs	r3, #32
 8007f76:	e00e      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	e00c      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f7c:	230c      	movs	r3, #12
 8007f7e:	e00a      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f80:	230a      	movs	r3, #10
 8007f82:	e008      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f84:	2308      	movs	r3, #8
 8007f86:	e006      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f88:	2306      	movs	r3, #6
 8007f8a:	e004      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f8c:	2304      	movs	r3, #4
 8007f8e:	e002      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f90:	2302      	movs	r3, #2
 8007f92:	e000      	b.n	8007f96 <UART_SetConfig+0x168e>
 8007f94:	2301      	movs	r3, #1
 8007f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	005a      	lsls	r2, r3, #1
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	441a      	add	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fb2:	e254      	b.n	800845e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb4:	f107 0318 	add.w	r3, r7, #24
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fc fdbf 	bl	8004b3c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d044      	beq.n	8008052 <UART_SetConfig+0x174a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d03e      	beq.n	800804e <UART_SetConfig+0x1746>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d038      	beq.n	800804a <UART_SetConfig+0x1742>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d032      	beq.n	8008046 <UART_SetConfig+0x173e>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d02c      	beq.n	8008042 <UART_SetConfig+0x173a>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	2b05      	cmp	r3, #5
 8007fee:	d026      	beq.n	800803e <UART_SetConfig+0x1736>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	2b06      	cmp	r3, #6
 8007ff6:	d020      	beq.n	800803a <UART_SetConfig+0x1732>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	2b07      	cmp	r3, #7
 8007ffe:	d01a      	beq.n	8008036 <UART_SetConfig+0x172e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008004:	2b08      	cmp	r3, #8
 8008006:	d014      	beq.n	8008032 <UART_SetConfig+0x172a>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	2b09      	cmp	r3, #9
 800800e:	d00e      	beq.n	800802e <UART_SetConfig+0x1726>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	2b0a      	cmp	r3, #10
 8008016:	d008      	beq.n	800802a <UART_SetConfig+0x1722>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	2b0b      	cmp	r3, #11
 800801e:	d102      	bne.n	8008026 <UART_SetConfig+0x171e>
 8008020:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008024:	e016      	b.n	8008054 <UART_SetConfig+0x174c>
 8008026:	2301      	movs	r3, #1
 8008028:	e014      	b.n	8008054 <UART_SetConfig+0x174c>
 800802a:	2380      	movs	r3, #128	; 0x80
 800802c:	e012      	b.n	8008054 <UART_SetConfig+0x174c>
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	e010      	b.n	8008054 <UART_SetConfig+0x174c>
 8008032:	2320      	movs	r3, #32
 8008034:	e00e      	b.n	8008054 <UART_SetConfig+0x174c>
 8008036:	2310      	movs	r3, #16
 8008038:	e00c      	b.n	8008054 <UART_SetConfig+0x174c>
 800803a:	230c      	movs	r3, #12
 800803c:	e00a      	b.n	8008054 <UART_SetConfig+0x174c>
 800803e:	230a      	movs	r3, #10
 8008040:	e008      	b.n	8008054 <UART_SetConfig+0x174c>
 8008042:	2308      	movs	r3, #8
 8008044:	e006      	b.n	8008054 <UART_SetConfig+0x174c>
 8008046:	2306      	movs	r3, #6
 8008048:	e004      	b.n	8008054 <UART_SetConfig+0x174c>
 800804a:	2304      	movs	r3, #4
 800804c:	e002      	b.n	8008054 <UART_SetConfig+0x174c>
 800804e:	2302      	movs	r3, #2
 8008050:	e000      	b.n	8008054 <UART_SetConfig+0x174c>
 8008052:	2301      	movs	r3, #1
 8008054:	fbb2 f3f3 	udiv	r3, r2, r3
 8008058:	005a      	lsls	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	085b      	lsrs	r3, r3, #1
 8008060:	441a      	add	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	fbb2 f3f3 	udiv	r3, r2, r3
 800806a:	b29b      	uxth	r3, r3
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800806e:	e1f6      	b.n	800845e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008070:	f107 030c 	add.w	r3, r7, #12
 8008074:	4618      	mov	r0, r3
 8008076:	f7fc fead 	bl	8004dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b00      	cmp	r3, #0
 8008082:	d044      	beq.n	800810e <UART_SetConfig+0x1806>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b01      	cmp	r3, #1
 800808a:	d03e      	beq.n	800810a <UART_SetConfig+0x1802>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b02      	cmp	r3, #2
 8008092:	d038      	beq.n	8008106 <UART_SetConfig+0x17fe>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	2b03      	cmp	r3, #3
 800809a:	d032      	beq.n	8008102 <UART_SetConfig+0x17fa>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2b04      	cmp	r3, #4
 80080a2:	d02c      	beq.n	80080fe <UART_SetConfig+0x17f6>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	2b05      	cmp	r3, #5
 80080aa:	d026      	beq.n	80080fa <UART_SetConfig+0x17f2>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	2b06      	cmp	r3, #6
 80080b2:	d020      	beq.n	80080f6 <UART_SetConfig+0x17ee>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b8:	2b07      	cmp	r3, #7
 80080ba:	d01a      	beq.n	80080f2 <UART_SetConfig+0x17ea>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d014      	beq.n	80080ee <UART_SetConfig+0x17e6>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	2b09      	cmp	r3, #9
 80080ca:	d00e      	beq.n	80080ea <UART_SetConfig+0x17e2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	2b0a      	cmp	r3, #10
 80080d2:	d008      	beq.n	80080e6 <UART_SetConfig+0x17de>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d8:	2b0b      	cmp	r3, #11
 80080da:	d102      	bne.n	80080e2 <UART_SetConfig+0x17da>
 80080dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080e0:	e016      	b.n	8008110 <UART_SetConfig+0x1808>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e014      	b.n	8008110 <UART_SetConfig+0x1808>
 80080e6:	2380      	movs	r3, #128	; 0x80
 80080e8:	e012      	b.n	8008110 <UART_SetConfig+0x1808>
 80080ea:	2340      	movs	r3, #64	; 0x40
 80080ec:	e010      	b.n	8008110 <UART_SetConfig+0x1808>
 80080ee:	2320      	movs	r3, #32
 80080f0:	e00e      	b.n	8008110 <UART_SetConfig+0x1808>
 80080f2:	2310      	movs	r3, #16
 80080f4:	e00c      	b.n	8008110 <UART_SetConfig+0x1808>
 80080f6:	230c      	movs	r3, #12
 80080f8:	e00a      	b.n	8008110 <UART_SetConfig+0x1808>
 80080fa:	230a      	movs	r3, #10
 80080fc:	e008      	b.n	8008110 <UART_SetConfig+0x1808>
 80080fe:	2308      	movs	r3, #8
 8008100:	e006      	b.n	8008110 <UART_SetConfig+0x1808>
 8008102:	2306      	movs	r3, #6
 8008104:	e004      	b.n	8008110 <UART_SetConfig+0x1808>
 8008106:	2304      	movs	r3, #4
 8008108:	e002      	b.n	8008110 <UART_SetConfig+0x1808>
 800810a:	2302      	movs	r3, #2
 800810c:	e000      	b.n	8008110 <UART_SetConfig+0x1808>
 800810e:	2301      	movs	r3, #1
 8008110:	fbb2 f3f3 	udiv	r3, r2, r3
 8008114:	005a      	lsls	r2, r3, #1
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	085b      	lsrs	r3, r3, #1
 800811c:	441a      	add	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	fbb2 f3f3 	udiv	r3, r2, r3
 8008126:	b29b      	uxth	r3, r3
 8008128:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800812a:	e198      	b.n	800845e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800812c:	4b87      	ldr	r3, [pc, #540]	; (800834c <UART_SetConfig+0x1a44>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 0320 	and.w	r3, r3, #32
 8008134:	2b00      	cmp	r3, #0
 8008136:	d05e      	beq.n	80081f6 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008138:	4b84      	ldr	r3, [pc, #528]	; (800834c <UART_SetConfig+0x1a44>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	08db      	lsrs	r3, r3, #3
 800813e:	f003 0303 	and.w	r3, r3, #3
 8008142:	4a83      	ldr	r2, [pc, #524]	; (8008350 <UART_SetConfig+0x1a48>)
 8008144:	40da      	lsrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	2b00      	cmp	r3, #0
 800814c:	d044      	beq.n	80081d8 <UART_SetConfig+0x18d0>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008152:	2b01      	cmp	r3, #1
 8008154:	d03e      	beq.n	80081d4 <UART_SetConfig+0x18cc>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	2b02      	cmp	r3, #2
 800815c:	d038      	beq.n	80081d0 <UART_SetConfig+0x18c8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b03      	cmp	r3, #3
 8008164:	d032      	beq.n	80081cc <UART_SetConfig+0x18c4>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2b04      	cmp	r3, #4
 800816c:	d02c      	beq.n	80081c8 <UART_SetConfig+0x18c0>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	2b05      	cmp	r3, #5
 8008174:	d026      	beq.n	80081c4 <UART_SetConfig+0x18bc>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	2b06      	cmp	r3, #6
 800817c:	d020      	beq.n	80081c0 <UART_SetConfig+0x18b8>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	2b07      	cmp	r3, #7
 8008184:	d01a      	beq.n	80081bc <UART_SetConfig+0x18b4>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	2b08      	cmp	r3, #8
 800818c:	d014      	beq.n	80081b8 <UART_SetConfig+0x18b0>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b09      	cmp	r3, #9
 8008194:	d00e      	beq.n	80081b4 <UART_SetConfig+0x18ac>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	2b0a      	cmp	r3, #10
 800819c:	d008      	beq.n	80081b0 <UART_SetConfig+0x18a8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	2b0b      	cmp	r3, #11
 80081a4:	d102      	bne.n	80081ac <UART_SetConfig+0x18a4>
 80081a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081aa:	e016      	b.n	80081da <UART_SetConfig+0x18d2>
 80081ac:	2301      	movs	r3, #1
 80081ae:	e014      	b.n	80081da <UART_SetConfig+0x18d2>
 80081b0:	2380      	movs	r3, #128	; 0x80
 80081b2:	e012      	b.n	80081da <UART_SetConfig+0x18d2>
 80081b4:	2340      	movs	r3, #64	; 0x40
 80081b6:	e010      	b.n	80081da <UART_SetConfig+0x18d2>
 80081b8:	2320      	movs	r3, #32
 80081ba:	e00e      	b.n	80081da <UART_SetConfig+0x18d2>
 80081bc:	2310      	movs	r3, #16
 80081be:	e00c      	b.n	80081da <UART_SetConfig+0x18d2>
 80081c0:	230c      	movs	r3, #12
 80081c2:	e00a      	b.n	80081da <UART_SetConfig+0x18d2>
 80081c4:	230a      	movs	r3, #10
 80081c6:	e008      	b.n	80081da <UART_SetConfig+0x18d2>
 80081c8:	2308      	movs	r3, #8
 80081ca:	e006      	b.n	80081da <UART_SetConfig+0x18d2>
 80081cc:	2306      	movs	r3, #6
 80081ce:	e004      	b.n	80081da <UART_SetConfig+0x18d2>
 80081d0:	2304      	movs	r3, #4
 80081d2:	e002      	b.n	80081da <UART_SetConfig+0x18d2>
 80081d4:	2302      	movs	r3, #2
 80081d6:	e000      	b.n	80081da <UART_SetConfig+0x18d2>
 80081d8:	2301      	movs	r3, #1
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	005a      	lsls	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	441a      	add	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80081f4:	e133      	b.n	800845e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d043      	beq.n	8008286 <UART_SetConfig+0x197e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	2b01      	cmp	r3, #1
 8008204:	d03d      	beq.n	8008282 <UART_SetConfig+0x197a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	2b02      	cmp	r3, #2
 800820c:	d037      	beq.n	800827e <UART_SetConfig+0x1976>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	2b03      	cmp	r3, #3
 8008214:	d031      	beq.n	800827a <UART_SetConfig+0x1972>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	2b04      	cmp	r3, #4
 800821c:	d02b      	beq.n	8008276 <UART_SetConfig+0x196e>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	2b05      	cmp	r3, #5
 8008224:	d025      	beq.n	8008272 <UART_SetConfig+0x196a>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	2b06      	cmp	r3, #6
 800822c:	d01f      	beq.n	800826e <UART_SetConfig+0x1966>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008232:	2b07      	cmp	r3, #7
 8008234:	d019      	beq.n	800826a <UART_SetConfig+0x1962>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	2b08      	cmp	r3, #8
 800823c:	d013      	beq.n	8008266 <UART_SetConfig+0x195e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	2b09      	cmp	r3, #9
 8008244:	d00d      	beq.n	8008262 <UART_SetConfig+0x195a>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800824a:	2b0a      	cmp	r3, #10
 800824c:	d007      	beq.n	800825e <UART_SetConfig+0x1956>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b0b      	cmp	r3, #11
 8008254:	d101      	bne.n	800825a <UART_SetConfig+0x1952>
 8008256:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <UART_SetConfig+0x1a4c>)
 8008258:	e016      	b.n	8008288 <UART_SetConfig+0x1980>
 800825a:	4b3f      	ldr	r3, [pc, #252]	; (8008358 <UART_SetConfig+0x1a50>)
 800825c:	e014      	b.n	8008288 <UART_SetConfig+0x1980>
 800825e:	4b3f      	ldr	r3, [pc, #252]	; (800835c <UART_SetConfig+0x1a54>)
 8008260:	e012      	b.n	8008288 <UART_SetConfig+0x1980>
 8008262:	4b3f      	ldr	r3, [pc, #252]	; (8008360 <UART_SetConfig+0x1a58>)
 8008264:	e010      	b.n	8008288 <UART_SetConfig+0x1980>
 8008266:	4b3f      	ldr	r3, [pc, #252]	; (8008364 <UART_SetConfig+0x1a5c>)
 8008268:	e00e      	b.n	8008288 <UART_SetConfig+0x1980>
 800826a:	4b3f      	ldr	r3, [pc, #252]	; (8008368 <UART_SetConfig+0x1a60>)
 800826c:	e00c      	b.n	8008288 <UART_SetConfig+0x1980>
 800826e:	4b3f      	ldr	r3, [pc, #252]	; (800836c <UART_SetConfig+0x1a64>)
 8008270:	e00a      	b.n	8008288 <UART_SetConfig+0x1980>
 8008272:	4b3f      	ldr	r3, [pc, #252]	; (8008370 <UART_SetConfig+0x1a68>)
 8008274:	e008      	b.n	8008288 <UART_SetConfig+0x1980>
 8008276:	4b3f      	ldr	r3, [pc, #252]	; (8008374 <UART_SetConfig+0x1a6c>)
 8008278:	e006      	b.n	8008288 <UART_SetConfig+0x1980>
 800827a:	4b3f      	ldr	r3, [pc, #252]	; (8008378 <UART_SetConfig+0x1a70>)
 800827c:	e004      	b.n	8008288 <UART_SetConfig+0x1980>
 800827e:	4b3f      	ldr	r3, [pc, #252]	; (800837c <UART_SetConfig+0x1a74>)
 8008280:	e002      	b.n	8008288 <UART_SetConfig+0x1980>
 8008282:	4b33      	ldr	r3, [pc, #204]	; (8008350 <UART_SetConfig+0x1a48>)
 8008284:	e000      	b.n	8008288 <UART_SetConfig+0x1980>
 8008286:	4b34      	ldr	r3, [pc, #208]	; (8008358 <UART_SetConfig+0x1a50>)
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	6852      	ldr	r2, [r2, #4]
 800828c:	0852      	lsrs	r2, r2, #1
 800828e:	441a      	add	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	fbb2 f3f3 	udiv	r3, r2, r3
 8008298:	b29b      	uxth	r3, r3
 800829a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800829c:	e0df      	b.n	800845e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d045      	beq.n	8008332 <UART_SetConfig+0x1a2a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d03f      	beq.n	800832e <UART_SetConfig+0x1a26>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d039      	beq.n	800832a <UART_SetConfig+0x1a22>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d033      	beq.n	8008326 <UART_SetConfig+0x1a1e>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d02d      	beq.n	8008322 <UART_SetConfig+0x1a1a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d027      	beq.n	800831e <UART_SetConfig+0x1a16>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d2:	2b06      	cmp	r3, #6
 80082d4:	d021      	beq.n	800831a <UART_SetConfig+0x1a12>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082da:	2b07      	cmp	r3, #7
 80082dc:	d01b      	beq.n	8008316 <UART_SetConfig+0x1a0e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e2:	2b08      	cmp	r3, #8
 80082e4:	d015      	beq.n	8008312 <UART_SetConfig+0x1a0a>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	2b09      	cmp	r3, #9
 80082ec:	d00f      	beq.n	800830e <UART_SetConfig+0x1a06>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	2b0a      	cmp	r3, #10
 80082f4:	d008      	beq.n	8008308 <UART_SetConfig+0x1a00>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fa:	2b0b      	cmp	r3, #11
 80082fc:	d102      	bne.n	8008304 <UART_SetConfig+0x19fc>
 80082fe:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008302:	e017      	b.n	8008334 <UART_SetConfig+0x1a2c>
 8008304:	4b18      	ldr	r3, [pc, #96]	; (8008368 <UART_SetConfig+0x1a60>)
 8008306:	e015      	b.n	8008334 <UART_SetConfig+0x1a2c>
 8008308:	f24f 4324 	movw	r3, #62500	; 0xf424
 800830c:	e012      	b.n	8008334 <UART_SetConfig+0x1a2c>
 800830e:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <UART_SetConfig+0x1a78>)
 8008310:	e010      	b.n	8008334 <UART_SetConfig+0x1a2c>
 8008312:	4b1c      	ldr	r3, [pc, #112]	; (8008384 <UART_SetConfig+0x1a7c>)
 8008314:	e00e      	b.n	8008334 <UART_SetConfig+0x1a2c>
 8008316:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <UART_SetConfig+0x1a4c>)
 8008318:	e00c      	b.n	8008334 <UART_SetConfig+0x1a2c>
 800831a:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <UART_SetConfig+0x1a80>)
 800831c:	e00a      	b.n	8008334 <UART_SetConfig+0x1a2c>
 800831e:	4b1b      	ldr	r3, [pc, #108]	; (800838c <UART_SetConfig+0x1a84>)
 8008320:	e008      	b.n	8008334 <UART_SetConfig+0x1a2c>
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <UART_SetConfig+0x1a54>)
 8008324:	e006      	b.n	8008334 <UART_SetConfig+0x1a2c>
 8008326:	4b1a      	ldr	r3, [pc, #104]	; (8008390 <UART_SetConfig+0x1a88>)
 8008328:	e004      	b.n	8008334 <UART_SetConfig+0x1a2c>
 800832a:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <UART_SetConfig+0x1a58>)
 800832c:	e002      	b.n	8008334 <UART_SetConfig+0x1a2c>
 800832e:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <UART_SetConfig+0x1a5c>)
 8008330:	e000      	b.n	8008334 <UART_SetConfig+0x1a2c>
 8008332:	4b0d      	ldr	r3, [pc, #52]	; (8008368 <UART_SetConfig+0x1a60>)
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	6852      	ldr	r2, [r2, #4]
 8008338:	0852      	lsrs	r2, r2, #1
 800833a:	441a      	add	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	fbb2 f3f3 	udiv	r3, r2, r3
 8008344:	b29b      	uxth	r3, r3
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008348:	e089      	b.n	800845e <UART_SetConfig+0x1b56>
 800834a:	bf00      	nop
 800834c:	58024400 	.word	0x58024400
 8008350:	03d09000 	.word	0x03d09000
 8008354:	0007a120 	.word	0x0007a120
 8008358:	07a12000 	.word	0x07a12000
 800835c:	000f4240 	.word	0x000f4240
 8008360:	001e8480 	.word	0x001e8480
 8008364:	003d0900 	.word	0x003d0900
 8008368:	007a1200 	.word	0x007a1200
 800836c:	00a2c2aa 	.word	0x00a2c2aa
 8008370:	00c35000 	.word	0x00c35000
 8008374:	00f42400 	.word	0x00f42400
 8008378:	01458554 	.word	0x01458554
 800837c:	01e84800 	.word	0x01e84800
 8008380:	0001e848 	.word	0x0001e848
 8008384:	0003d090 	.word	0x0003d090
 8008388:	000a2c2a 	.word	0x000a2c2a
 800838c:	000c3500 	.word	0x000c3500
 8008390:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	2b00      	cmp	r3, #0
 800839a:	d04f      	beq.n	800843c <UART_SetConfig+0x1b34>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d048      	beq.n	8008436 <UART_SetConfig+0x1b2e>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d041      	beq.n	8008430 <UART_SetConfig+0x1b28>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d03a      	beq.n	800842a <UART_SetConfig+0x1b22>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d033      	beq.n	8008424 <UART_SetConfig+0x1b1c>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	2b05      	cmp	r3, #5
 80083c2:	d02c      	beq.n	800841e <UART_SetConfig+0x1b16>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c8:	2b06      	cmp	r3, #6
 80083ca:	d025      	beq.n	8008418 <UART_SetConfig+0x1b10>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d0:	2b07      	cmp	r3, #7
 80083d2:	d01e      	beq.n	8008412 <UART_SetConfig+0x1b0a>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d017      	beq.n	800840c <UART_SetConfig+0x1b04>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	2b09      	cmp	r3, #9
 80083e2:	d010      	beq.n	8008406 <UART_SetConfig+0x1afe>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	2b0a      	cmp	r3, #10
 80083ea:	d009      	beq.n	8008400 <UART_SetConfig+0x1af8>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f0:	2b0b      	cmp	r3, #11
 80083f2:	d102      	bne.n	80083fa <UART_SetConfig+0x1af2>
 80083f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083f8:	e022      	b.n	8008440 <UART_SetConfig+0x1b38>
 80083fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083fe:	e01f      	b.n	8008440 <UART_SetConfig+0x1b38>
 8008400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008404:	e01c      	b.n	8008440 <UART_SetConfig+0x1b38>
 8008406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800840a:	e019      	b.n	8008440 <UART_SetConfig+0x1b38>
 800840c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008410:	e016      	b.n	8008440 <UART_SetConfig+0x1b38>
 8008412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008416:	e013      	b.n	8008440 <UART_SetConfig+0x1b38>
 8008418:	f241 5354 	movw	r3, #5460	; 0x1554
 800841c:	e010      	b.n	8008440 <UART_SetConfig+0x1b38>
 800841e:	f641 1398 	movw	r3, #6552	; 0x1998
 8008422:	e00d      	b.n	8008440 <UART_SetConfig+0x1b38>
 8008424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008428:	e00a      	b.n	8008440 <UART_SetConfig+0x1b38>
 800842a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800842e:	e007      	b.n	8008440 <UART_SetConfig+0x1b38>
 8008430:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008434:	e004      	b.n	8008440 <UART_SetConfig+0x1b38>
 8008436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843a:	e001      	b.n	8008440 <UART_SetConfig+0x1b38>
 800843c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6852      	ldr	r2, [r2, #4]
 8008444:	0852      	lsrs	r2, r2, #1
 8008446:	441a      	add	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008450:	b29b      	uxth	r3, r3
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008454:	e003      	b.n	800845e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800845c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	2b0f      	cmp	r3, #15
 8008462:	d916      	bls.n	8008492 <UART_SetConfig+0x1b8a>
 8008464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800846a:	d212      	bcs.n	8008492 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800846c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846e:	b29b      	uxth	r3, r3
 8008470:	f023 030f 	bic.w	r3, r3, #15
 8008474:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	b29b      	uxth	r3, r3
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	b29a      	uxth	r2, r3
 8008482:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008484:	4313      	orrs	r3, r2
 8008486:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800848e:	60da      	str	r2, [r3, #12]
 8008490:	e3a3      	b.n	8008bda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008498:	e39f      	b.n	8008bda <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 800849a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800849e:	2b40      	cmp	r3, #64	; 0x40
 80084a0:	f200 8388 	bhi.w	8008bb4 <UART_SetConfig+0x22ac>
 80084a4:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <UART_SetConfig+0x1ba4>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080085b1 	.word	0x080085b1
 80084b0:	08008667 	.word	0x08008667
 80084b4:	08008bb5 	.word	0x08008bb5
 80084b8:	08008bb5 	.word	0x08008bb5
 80084bc:	0800871d 	.word	0x0800871d
 80084c0:	08008bb5 	.word	0x08008bb5
 80084c4:	08008bb5 	.word	0x08008bb5
 80084c8:	08008bb5 	.word	0x08008bb5
 80084cc:	080087d7 	.word	0x080087d7
 80084d0:	08008bb5 	.word	0x08008bb5
 80084d4:	08008bb5 	.word	0x08008bb5
 80084d8:	08008bb5 	.word	0x08008bb5
 80084dc:	08008bb5 	.word	0x08008bb5
 80084e0:	08008bb5 	.word	0x08008bb5
 80084e4:	08008bb5 	.word	0x08008bb5
 80084e8:	08008bb5 	.word	0x08008bb5
 80084ec:	08008891 	.word	0x08008891
 80084f0:	08008bb5 	.word	0x08008bb5
 80084f4:	08008bb5 	.word	0x08008bb5
 80084f8:	08008bb5 	.word	0x08008bb5
 80084fc:	08008bb5 	.word	0x08008bb5
 8008500:	08008bb5 	.word	0x08008bb5
 8008504:	08008bb5 	.word	0x08008bb5
 8008508:	08008bb5 	.word	0x08008bb5
 800850c:	08008bb5 	.word	0x08008bb5
 8008510:	08008bb5 	.word	0x08008bb5
 8008514:	08008bb5 	.word	0x08008bb5
 8008518:	08008bb5 	.word	0x08008bb5
 800851c:	08008bb5 	.word	0x08008bb5
 8008520:	08008bb5 	.word	0x08008bb5
 8008524:	08008bb5 	.word	0x08008bb5
 8008528:	08008bb5 	.word	0x08008bb5
 800852c:	08008a01 	.word	0x08008a01
 8008530:	08008bb5 	.word	0x08008bb5
 8008534:	08008bb5 	.word	0x08008bb5
 8008538:	08008bb5 	.word	0x08008bb5
 800853c:	08008bb5 	.word	0x08008bb5
 8008540:	08008bb5 	.word	0x08008bb5
 8008544:	08008bb5 	.word	0x08008bb5
 8008548:	08008bb5 	.word	0x08008bb5
 800854c:	08008bb5 	.word	0x08008bb5
 8008550:	08008bb5 	.word	0x08008bb5
 8008554:	08008bb5 	.word	0x08008bb5
 8008558:	08008bb5 	.word	0x08008bb5
 800855c:	08008bb5 	.word	0x08008bb5
 8008560:	08008bb5 	.word	0x08008bb5
 8008564:	08008bb5 	.word	0x08008bb5
 8008568:	08008bb5 	.word	0x08008bb5
 800856c:	08008bb5 	.word	0x08008bb5
 8008570:	08008bb5 	.word	0x08008bb5
 8008574:	08008bb5 	.word	0x08008bb5
 8008578:	08008bb5 	.word	0x08008bb5
 800857c:	08008bb5 	.word	0x08008bb5
 8008580:	08008bb5 	.word	0x08008bb5
 8008584:	08008bb5 	.word	0x08008bb5
 8008588:	08008bb5 	.word	0x08008bb5
 800858c:	08008bb5 	.word	0x08008bb5
 8008590:	08008bb5 	.word	0x08008bb5
 8008594:	08008bb5 	.word	0x08008bb5
 8008598:	08008bb5 	.word	0x08008bb5
 800859c:	08008bb5 	.word	0x08008bb5
 80085a0:	08008bb5 	.word	0x08008bb5
 80085a4:	08008bb5 	.word	0x08008bb5
 80085a8:	08008bb5 	.word	0x08008bb5
 80085ac:	08008af5 	.word	0x08008af5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085b0:	f7fb fb92 	bl	8003cd8 <HAL_RCC_GetPCLK1Freq>
 80085b4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d044      	beq.n	8008648 <UART_SetConfig+0x1d40>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d03e      	beq.n	8008644 <UART_SetConfig+0x1d3c>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d038      	beq.n	8008640 <UART_SetConfig+0x1d38>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	d032      	beq.n	800863c <UART_SetConfig+0x1d34>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d02c      	beq.n	8008638 <UART_SetConfig+0x1d30>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d026      	beq.n	8008634 <UART_SetConfig+0x1d2c>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	2b06      	cmp	r3, #6
 80085ec:	d020      	beq.n	8008630 <UART_SetConfig+0x1d28>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085f2:	2b07      	cmp	r3, #7
 80085f4:	d01a      	beq.n	800862c <UART_SetConfig+0x1d24>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	2b08      	cmp	r3, #8
 80085fc:	d014      	beq.n	8008628 <UART_SetConfig+0x1d20>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	2b09      	cmp	r3, #9
 8008604:	d00e      	beq.n	8008624 <UART_SetConfig+0x1d1c>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	2b0a      	cmp	r3, #10
 800860c:	d008      	beq.n	8008620 <UART_SetConfig+0x1d18>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	2b0b      	cmp	r3, #11
 8008614:	d102      	bne.n	800861c <UART_SetConfig+0x1d14>
 8008616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800861a:	e016      	b.n	800864a <UART_SetConfig+0x1d42>
 800861c:	2301      	movs	r3, #1
 800861e:	e014      	b.n	800864a <UART_SetConfig+0x1d42>
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	e012      	b.n	800864a <UART_SetConfig+0x1d42>
 8008624:	2340      	movs	r3, #64	; 0x40
 8008626:	e010      	b.n	800864a <UART_SetConfig+0x1d42>
 8008628:	2320      	movs	r3, #32
 800862a:	e00e      	b.n	800864a <UART_SetConfig+0x1d42>
 800862c:	2310      	movs	r3, #16
 800862e:	e00c      	b.n	800864a <UART_SetConfig+0x1d42>
 8008630:	230c      	movs	r3, #12
 8008632:	e00a      	b.n	800864a <UART_SetConfig+0x1d42>
 8008634:	230a      	movs	r3, #10
 8008636:	e008      	b.n	800864a <UART_SetConfig+0x1d42>
 8008638:	2308      	movs	r3, #8
 800863a:	e006      	b.n	800864a <UART_SetConfig+0x1d42>
 800863c:	2306      	movs	r3, #6
 800863e:	e004      	b.n	800864a <UART_SetConfig+0x1d42>
 8008640:	2304      	movs	r3, #4
 8008642:	e002      	b.n	800864a <UART_SetConfig+0x1d42>
 8008644:	2302      	movs	r3, #2
 8008646:	e000      	b.n	800864a <UART_SetConfig+0x1d42>
 8008648:	2301      	movs	r3, #1
 800864a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800864c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	441a      	add	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008660:	b29b      	uxth	r3, r3
 8008662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008664:	e2aa      	b.n	8008bbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008666:	f7fb fb4d 	bl	8003d04 <HAL_RCC_GetPCLK2Freq>
 800866a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	2b00      	cmp	r3, #0
 8008672:	d044      	beq.n	80086fe <UART_SetConfig+0x1df6>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008678:	2b01      	cmp	r3, #1
 800867a:	d03e      	beq.n	80086fa <UART_SetConfig+0x1df2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	2b02      	cmp	r3, #2
 8008682:	d038      	beq.n	80086f6 <UART_SetConfig+0x1dee>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	2b03      	cmp	r3, #3
 800868a:	d032      	beq.n	80086f2 <UART_SetConfig+0x1dea>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	2b04      	cmp	r3, #4
 8008692:	d02c      	beq.n	80086ee <UART_SetConfig+0x1de6>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008698:	2b05      	cmp	r3, #5
 800869a:	d026      	beq.n	80086ea <UART_SetConfig+0x1de2>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a0:	2b06      	cmp	r3, #6
 80086a2:	d020      	beq.n	80086e6 <UART_SetConfig+0x1dde>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a8:	2b07      	cmp	r3, #7
 80086aa:	d01a      	beq.n	80086e2 <UART_SetConfig+0x1dda>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d014      	beq.n	80086de <UART_SetConfig+0x1dd6>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b8:	2b09      	cmp	r3, #9
 80086ba:	d00e      	beq.n	80086da <UART_SetConfig+0x1dd2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c0:	2b0a      	cmp	r3, #10
 80086c2:	d008      	beq.n	80086d6 <UART_SetConfig+0x1dce>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	2b0b      	cmp	r3, #11
 80086ca:	d102      	bne.n	80086d2 <UART_SetConfig+0x1dca>
 80086cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086d0:	e016      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e014      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086d6:	2380      	movs	r3, #128	; 0x80
 80086d8:	e012      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086da:	2340      	movs	r3, #64	; 0x40
 80086dc:	e010      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086de:	2320      	movs	r3, #32
 80086e0:	e00e      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086e2:	2310      	movs	r3, #16
 80086e4:	e00c      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086e6:	230c      	movs	r3, #12
 80086e8:	e00a      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086ea:	230a      	movs	r3, #10
 80086ec:	e008      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086ee:	2308      	movs	r3, #8
 80086f0:	e006      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086f2:	2306      	movs	r3, #6
 80086f4:	e004      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086f6:	2304      	movs	r3, #4
 80086f8:	e002      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e000      	b.n	8008700 <UART_SetConfig+0x1df8>
 80086fe:	2301      	movs	r3, #1
 8008700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008702:	fbb2 f2f3 	udiv	r2, r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	085b      	lsrs	r3, r3, #1
 800870c:	441a      	add	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	fbb2 f3f3 	udiv	r3, r2, r3
 8008716:	b29b      	uxth	r3, r3
 8008718:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800871a:	e24f      	b.n	8008bbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800871c:	f107 0318 	add.w	r3, r7, #24
 8008720:	4618      	mov	r0, r3
 8008722:	f7fc fa0b 	bl	8004b3c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008726:	69fa      	ldr	r2, [r7, #28]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872c:	2b00      	cmp	r3, #0
 800872e:	d044      	beq.n	80087ba <UART_SetConfig+0x1eb2>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	2b01      	cmp	r3, #1
 8008736:	d03e      	beq.n	80087b6 <UART_SetConfig+0x1eae>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873c:	2b02      	cmp	r3, #2
 800873e:	d038      	beq.n	80087b2 <UART_SetConfig+0x1eaa>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b03      	cmp	r3, #3
 8008746:	d032      	beq.n	80087ae <UART_SetConfig+0x1ea6>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874c:	2b04      	cmp	r3, #4
 800874e:	d02c      	beq.n	80087aa <UART_SetConfig+0x1ea2>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	2b05      	cmp	r3, #5
 8008756:	d026      	beq.n	80087a6 <UART_SetConfig+0x1e9e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	2b06      	cmp	r3, #6
 800875e:	d020      	beq.n	80087a2 <UART_SetConfig+0x1e9a>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008764:	2b07      	cmp	r3, #7
 8008766:	d01a      	beq.n	800879e <UART_SetConfig+0x1e96>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b08      	cmp	r3, #8
 800876e:	d014      	beq.n	800879a <UART_SetConfig+0x1e92>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008774:	2b09      	cmp	r3, #9
 8008776:	d00e      	beq.n	8008796 <UART_SetConfig+0x1e8e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b0a      	cmp	r3, #10
 800877e:	d008      	beq.n	8008792 <UART_SetConfig+0x1e8a>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	2b0b      	cmp	r3, #11
 8008786:	d102      	bne.n	800878e <UART_SetConfig+0x1e86>
 8008788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800878c:	e016      	b.n	80087bc <UART_SetConfig+0x1eb4>
 800878e:	2301      	movs	r3, #1
 8008790:	e014      	b.n	80087bc <UART_SetConfig+0x1eb4>
 8008792:	2380      	movs	r3, #128	; 0x80
 8008794:	e012      	b.n	80087bc <UART_SetConfig+0x1eb4>
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	e010      	b.n	80087bc <UART_SetConfig+0x1eb4>
 800879a:	2320      	movs	r3, #32
 800879c:	e00e      	b.n	80087bc <UART_SetConfig+0x1eb4>
 800879e:	2310      	movs	r3, #16
 80087a0:	e00c      	b.n	80087bc <UART_SetConfig+0x1eb4>
 80087a2:	230c      	movs	r3, #12
 80087a4:	e00a      	b.n	80087bc <UART_SetConfig+0x1eb4>
 80087a6:	230a      	movs	r3, #10
 80087a8:	e008      	b.n	80087bc <UART_SetConfig+0x1eb4>
 80087aa:	2308      	movs	r3, #8
 80087ac:	e006      	b.n	80087bc <UART_SetConfig+0x1eb4>
 80087ae:	2306      	movs	r3, #6
 80087b0:	e004      	b.n	80087bc <UART_SetConfig+0x1eb4>
 80087b2:	2304      	movs	r3, #4
 80087b4:	e002      	b.n	80087bc <UART_SetConfig+0x1eb4>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e000      	b.n	80087bc <UART_SetConfig+0x1eb4>
 80087ba:	2301      	movs	r3, #1
 80087bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	085b      	lsrs	r3, r3, #1
 80087c6:	441a      	add	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087d4:	e1f2      	b.n	8008bbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fc fafa 	bl	8004dd4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d044      	beq.n	8008874 <UART_SetConfig+0x1f6c>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d03e      	beq.n	8008870 <UART_SetConfig+0x1f68>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d038      	beq.n	800886c <UART_SetConfig+0x1f64>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d032      	beq.n	8008868 <UART_SetConfig+0x1f60>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b04      	cmp	r3, #4
 8008808:	d02c      	beq.n	8008864 <UART_SetConfig+0x1f5c>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880e:	2b05      	cmp	r3, #5
 8008810:	d026      	beq.n	8008860 <UART_SetConfig+0x1f58>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	2b06      	cmp	r3, #6
 8008818:	d020      	beq.n	800885c <UART_SetConfig+0x1f54>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b07      	cmp	r3, #7
 8008820:	d01a      	beq.n	8008858 <UART_SetConfig+0x1f50>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008826:	2b08      	cmp	r3, #8
 8008828:	d014      	beq.n	8008854 <UART_SetConfig+0x1f4c>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	2b09      	cmp	r3, #9
 8008830:	d00e      	beq.n	8008850 <UART_SetConfig+0x1f48>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b0a      	cmp	r3, #10
 8008838:	d008      	beq.n	800884c <UART_SetConfig+0x1f44>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b0b      	cmp	r3, #11
 8008840:	d102      	bne.n	8008848 <UART_SetConfig+0x1f40>
 8008842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008846:	e016      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008848:	2301      	movs	r3, #1
 800884a:	e014      	b.n	8008876 <UART_SetConfig+0x1f6e>
 800884c:	2380      	movs	r3, #128	; 0x80
 800884e:	e012      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008850:	2340      	movs	r3, #64	; 0x40
 8008852:	e010      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008854:	2320      	movs	r3, #32
 8008856:	e00e      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008858:	2310      	movs	r3, #16
 800885a:	e00c      	b.n	8008876 <UART_SetConfig+0x1f6e>
 800885c:	230c      	movs	r3, #12
 800885e:	e00a      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008860:	230a      	movs	r3, #10
 8008862:	e008      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008864:	2308      	movs	r3, #8
 8008866:	e006      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008868:	2306      	movs	r3, #6
 800886a:	e004      	b.n	8008876 <UART_SetConfig+0x1f6e>
 800886c:	2304      	movs	r3, #4
 800886e:	e002      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008870:	2302      	movs	r3, #2
 8008872:	e000      	b.n	8008876 <UART_SetConfig+0x1f6e>
 8008874:	2301      	movs	r3, #1
 8008876:	fbb2 f2f3 	udiv	r2, r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	085b      	lsrs	r3, r3, #1
 8008880:	441a      	add	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	fbb2 f3f3 	udiv	r3, r2, r3
 800888a:	b29b      	uxth	r3, r3
 800888c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800888e:	e195      	b.n	8008bbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008890:	4b87      	ldr	r3, [pc, #540]	; (8008ab0 <UART_SetConfig+0x21a8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0320 	and.w	r3, r3, #32
 8008898:	2b00      	cmp	r3, #0
 800889a:	d05d      	beq.n	8008958 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800889c:	4b84      	ldr	r3, [pc, #528]	; (8008ab0 <UART_SetConfig+0x21a8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	08db      	lsrs	r3, r3, #3
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	4a83      	ldr	r2, [pc, #524]	; (8008ab4 <UART_SetConfig+0x21ac>)
 80088a8:	40da      	lsrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d044      	beq.n	800893c <UART_SetConfig+0x2034>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d03e      	beq.n	8008938 <UART_SetConfig+0x2030>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d038      	beq.n	8008934 <UART_SetConfig+0x202c>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d032      	beq.n	8008930 <UART_SetConfig+0x2028>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	2b04      	cmp	r3, #4
 80088d0:	d02c      	beq.n	800892c <UART_SetConfig+0x2024>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	2b05      	cmp	r3, #5
 80088d8:	d026      	beq.n	8008928 <UART_SetConfig+0x2020>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b06      	cmp	r3, #6
 80088e0:	d020      	beq.n	8008924 <UART_SetConfig+0x201c>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e6:	2b07      	cmp	r3, #7
 80088e8:	d01a      	beq.n	8008920 <UART_SetConfig+0x2018>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	2b08      	cmp	r3, #8
 80088f0:	d014      	beq.n	800891c <UART_SetConfig+0x2014>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d00e      	beq.n	8008918 <UART_SetConfig+0x2010>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fe:	2b0a      	cmp	r3, #10
 8008900:	d008      	beq.n	8008914 <UART_SetConfig+0x200c>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	2b0b      	cmp	r3, #11
 8008908:	d102      	bne.n	8008910 <UART_SetConfig+0x2008>
 800890a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800890e:	e016      	b.n	800893e <UART_SetConfig+0x2036>
 8008910:	2301      	movs	r3, #1
 8008912:	e014      	b.n	800893e <UART_SetConfig+0x2036>
 8008914:	2380      	movs	r3, #128	; 0x80
 8008916:	e012      	b.n	800893e <UART_SetConfig+0x2036>
 8008918:	2340      	movs	r3, #64	; 0x40
 800891a:	e010      	b.n	800893e <UART_SetConfig+0x2036>
 800891c:	2320      	movs	r3, #32
 800891e:	e00e      	b.n	800893e <UART_SetConfig+0x2036>
 8008920:	2310      	movs	r3, #16
 8008922:	e00c      	b.n	800893e <UART_SetConfig+0x2036>
 8008924:	230c      	movs	r3, #12
 8008926:	e00a      	b.n	800893e <UART_SetConfig+0x2036>
 8008928:	230a      	movs	r3, #10
 800892a:	e008      	b.n	800893e <UART_SetConfig+0x2036>
 800892c:	2308      	movs	r3, #8
 800892e:	e006      	b.n	800893e <UART_SetConfig+0x2036>
 8008930:	2306      	movs	r3, #6
 8008932:	e004      	b.n	800893e <UART_SetConfig+0x2036>
 8008934:	2304      	movs	r3, #4
 8008936:	e002      	b.n	800893e <UART_SetConfig+0x2036>
 8008938:	2302      	movs	r3, #2
 800893a:	e000      	b.n	800893e <UART_SetConfig+0x2036>
 800893c:	2301      	movs	r3, #1
 800893e:	fbb2 f2f3 	udiv	r2, r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	085b      	lsrs	r3, r3, #1
 8008948:	441a      	add	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008952:	b29b      	uxth	r3, r3
 8008954:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8008956:	e131      	b.n	8008bbc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	2b00      	cmp	r3, #0
 800895e:	d043      	beq.n	80089e8 <UART_SetConfig+0x20e0>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	2b01      	cmp	r3, #1
 8008966:	d03d      	beq.n	80089e4 <UART_SetConfig+0x20dc>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b02      	cmp	r3, #2
 800896e:	d037      	beq.n	80089e0 <UART_SetConfig+0x20d8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	2b03      	cmp	r3, #3
 8008976:	d031      	beq.n	80089dc <UART_SetConfig+0x20d4>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897c:	2b04      	cmp	r3, #4
 800897e:	d02b      	beq.n	80089d8 <UART_SetConfig+0x20d0>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008984:	2b05      	cmp	r3, #5
 8008986:	d025      	beq.n	80089d4 <UART_SetConfig+0x20cc>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	2b06      	cmp	r3, #6
 800898e:	d01f      	beq.n	80089d0 <UART_SetConfig+0x20c8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008994:	2b07      	cmp	r3, #7
 8008996:	d019      	beq.n	80089cc <UART_SetConfig+0x20c4>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800899c:	2b08      	cmp	r3, #8
 800899e:	d013      	beq.n	80089c8 <UART_SetConfig+0x20c0>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	2b09      	cmp	r3, #9
 80089a6:	d00d      	beq.n	80089c4 <UART_SetConfig+0x20bc>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	2b0a      	cmp	r3, #10
 80089ae:	d007      	beq.n	80089c0 <UART_SetConfig+0x20b8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	d101      	bne.n	80089bc <UART_SetConfig+0x20b4>
 80089b8:	4b3f      	ldr	r3, [pc, #252]	; (8008ab8 <UART_SetConfig+0x21b0>)
 80089ba:	e016      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089bc:	4b3d      	ldr	r3, [pc, #244]	; (8008ab4 <UART_SetConfig+0x21ac>)
 80089be:	e014      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089c0:	4b3e      	ldr	r3, [pc, #248]	; (8008abc <UART_SetConfig+0x21b4>)
 80089c2:	e012      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089c4:	4b3e      	ldr	r3, [pc, #248]	; (8008ac0 <UART_SetConfig+0x21b8>)
 80089c6:	e010      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089c8:	4b3e      	ldr	r3, [pc, #248]	; (8008ac4 <UART_SetConfig+0x21bc>)
 80089ca:	e00e      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089cc:	4b3e      	ldr	r3, [pc, #248]	; (8008ac8 <UART_SetConfig+0x21c0>)
 80089ce:	e00c      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089d0:	4b3e      	ldr	r3, [pc, #248]	; (8008acc <UART_SetConfig+0x21c4>)
 80089d2:	e00a      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089d4:	4b3e      	ldr	r3, [pc, #248]	; (8008ad0 <UART_SetConfig+0x21c8>)
 80089d6:	e008      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089d8:	4b3e      	ldr	r3, [pc, #248]	; (8008ad4 <UART_SetConfig+0x21cc>)
 80089da:	e006      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089dc:	4b3e      	ldr	r3, [pc, #248]	; (8008ad8 <UART_SetConfig+0x21d0>)
 80089de:	e004      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089e0:	4b3e      	ldr	r3, [pc, #248]	; (8008adc <UART_SetConfig+0x21d4>)
 80089e2:	e002      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089e4:	4b3e      	ldr	r3, [pc, #248]	; (8008ae0 <UART_SetConfig+0x21d8>)
 80089e6:	e000      	b.n	80089ea <UART_SetConfig+0x20e2>
 80089e8:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <UART_SetConfig+0x21ac>)
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6852      	ldr	r2, [r2, #4]
 80089ee:	0852      	lsrs	r2, r2, #1
 80089f0:	441a      	add	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089fe:	e0dd      	b.n	8008bbc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d046      	beq.n	8008a96 <UART_SetConfig+0x218e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d040      	beq.n	8008a92 <UART_SetConfig+0x218a>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d03a      	beq.n	8008a8e <UART_SetConfig+0x2186>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1c:	2b03      	cmp	r3, #3
 8008a1e:	d034      	beq.n	8008a8a <UART_SetConfig+0x2182>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d02e      	beq.n	8008a86 <UART_SetConfig+0x217e>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2c:	2b05      	cmp	r3, #5
 8008a2e:	d028      	beq.n	8008a82 <UART_SetConfig+0x217a>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	2b06      	cmp	r3, #6
 8008a36:	d022      	beq.n	8008a7e <UART_SetConfig+0x2176>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	2b07      	cmp	r3, #7
 8008a3e:	d01c      	beq.n	8008a7a <UART_SetConfig+0x2172>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d016      	beq.n	8008a76 <UART_SetConfig+0x216e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	2b09      	cmp	r3, #9
 8008a4e:	d00f      	beq.n	8008a70 <UART_SetConfig+0x2168>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	2b0a      	cmp	r3, #10
 8008a56:	d008      	beq.n	8008a6a <UART_SetConfig+0x2162>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5c:	2b0b      	cmp	r3, #11
 8008a5e:	d102      	bne.n	8008a66 <UART_SetConfig+0x215e>
 8008a60:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008a64:	e018      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a66:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <UART_SetConfig+0x21c0>)
 8008a68:	e016      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a6a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008a6e:	e013      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008a74:	e010      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a76:	4b1b      	ldr	r3, [pc, #108]	; (8008ae4 <UART_SetConfig+0x21dc>)
 8008a78:	e00e      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a7a:	4b0f      	ldr	r3, [pc, #60]	; (8008ab8 <UART_SetConfig+0x21b0>)
 8008a7c:	e00c      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <UART_SetConfig+0x21e0>)
 8008a80:	e00a      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a82:	4b1a      	ldr	r3, [pc, #104]	; (8008aec <UART_SetConfig+0x21e4>)
 8008a84:	e008      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a86:	4b0d      	ldr	r3, [pc, #52]	; (8008abc <UART_SetConfig+0x21b4>)
 8008a88:	e006      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a8a:	4b19      	ldr	r3, [pc, #100]	; (8008af0 <UART_SetConfig+0x21e8>)
 8008a8c:	e004      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a8e:	4b0c      	ldr	r3, [pc, #48]	; (8008ac0 <UART_SetConfig+0x21b8>)
 8008a90:	e002      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a92:	4b0c      	ldr	r3, [pc, #48]	; (8008ac4 <UART_SetConfig+0x21bc>)
 8008a94:	e000      	b.n	8008a98 <UART_SetConfig+0x2190>
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <UART_SetConfig+0x21c0>)
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6852      	ldr	r2, [r2, #4]
 8008a9c:	0852      	lsrs	r2, r2, #1
 8008a9e:	441a      	add	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008aac:	e086      	b.n	8008bbc <UART_SetConfig+0x22b4>
 8008aae:	bf00      	nop
 8008ab0:	58024400 	.word	0x58024400
 8008ab4:	03d09000 	.word	0x03d09000
 8008ab8:	0003d090 	.word	0x0003d090
 8008abc:	0007a120 	.word	0x0007a120
 8008ac0:	000f4240 	.word	0x000f4240
 8008ac4:	001e8480 	.word	0x001e8480
 8008ac8:	003d0900 	.word	0x003d0900
 8008acc:	00516155 	.word	0x00516155
 8008ad0:	0061a800 	.word	0x0061a800
 8008ad4:	007a1200 	.word	0x007a1200
 8008ad8:	00a2c2aa 	.word	0x00a2c2aa
 8008adc:	00f42400 	.word	0x00f42400
 8008ae0:	01e84800 	.word	0x01e84800
 8008ae4:	0001e848 	.word	0x0001e848
 8008ae8:	00051615 	.word	0x00051615
 8008aec:	00061a80 	.word	0x00061a80
 8008af0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d04e      	beq.n	8008b9a <UART_SetConfig+0x2292>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d047      	beq.n	8008b94 <UART_SetConfig+0x228c>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d040      	beq.n	8008b8e <UART_SetConfig+0x2286>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	2b03      	cmp	r3, #3
 8008b12:	d039      	beq.n	8008b88 <UART_SetConfig+0x2280>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b04      	cmp	r3, #4
 8008b1a:	d032      	beq.n	8008b82 <UART_SetConfig+0x227a>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b20:	2b05      	cmp	r3, #5
 8008b22:	d02b      	beq.n	8008b7c <UART_SetConfig+0x2274>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	2b06      	cmp	r3, #6
 8008b2a:	d024      	beq.n	8008b76 <UART_SetConfig+0x226e>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	2b07      	cmp	r3, #7
 8008b32:	d01d      	beq.n	8008b70 <UART_SetConfig+0x2268>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d016      	beq.n	8008b6a <UART_SetConfig+0x2262>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	d00f      	beq.n	8008b64 <UART_SetConfig+0x225c>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	2b0a      	cmp	r3, #10
 8008b4a:	d008      	beq.n	8008b5e <UART_SetConfig+0x2256>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b50:	2b0b      	cmp	r3, #11
 8008b52:	d101      	bne.n	8008b58 <UART_SetConfig+0x2250>
 8008b54:	2380      	movs	r3, #128	; 0x80
 8008b56:	e022      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5c:	e01f      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b62:	e01c      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b68:	e019      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6e:	e016      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b74:	e013      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b76:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008b7a:	e010      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b7c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008b80:	e00d      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b86:	e00a      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b88:	f241 5355 	movw	r3, #5461	; 0x1555
 8008b8c:	e007      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b92:	e004      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b98:	e001      	b.n	8008b9e <UART_SetConfig+0x2296>
 8008b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6852      	ldr	r2, [r2, #4]
 8008ba2:	0852      	lsrs	r2, r2, #1
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bb2:	e003      	b.n	8008bbc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008bba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bbe:	2b0f      	cmp	r3, #15
 8008bc0:	d908      	bls.n	8008bd4 <UART_SetConfig+0x22cc>
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d204      	bcs.n	8008bd4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bd0:	60da      	str	r2, [r3, #12]
 8008bd2:	e002      	b.n	8008bda <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008bf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3740      	adds	r7, #64	; 0x40
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08008c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00a      	beq.n	8008c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	430a      	orrs	r2, r1
 8008c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01a      	beq.n	8008d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d02:	d10a      	bne.n	8008d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	605a      	str	r2, [r3, #4]
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b086      	sub	sp, #24
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008d58:	f7f8 fe70 	bl	8001a3c <HAL_GetTick>
 8008d5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d10e      	bne.n	8008d8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f82c 	bl	8008dd8 <UART_WaitOnFlagUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e022      	b.n	8008dd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 0304 	and.w	r3, r3, #4
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d10e      	bne.n	8008db6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 f816 	bl	8008dd8 <UART_WaitOnFlagUntilTimeout>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e00c      	b.n	8008dd0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008dce:	2300      	movs	r3, #0
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	603b      	str	r3, [r7, #0]
 8008de4:	4613      	mov	r3, r2
 8008de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de8:	e062      	b.n	8008eb0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d05e      	beq.n	8008eb0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008df2:	f7f8 fe23 	bl	8001a3c <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	69ba      	ldr	r2, [r7, #24]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d302      	bcc.n	8008e08 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11d      	bne.n	8008e44 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0201 	bic.w	r2, r2, #1
 8008e26:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2220      	movs	r2, #32
 8008e2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2220      	movs	r2, #32
 8008e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e045      	b.n	8008ed0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d02e      	beq.n	8008eb0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e60:	d126      	bne.n	8008eb0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e6a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008e7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2220      	movs	r2, #32
 8008e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2220      	movs	r2, #32
 8008ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e00f      	b.n	8008ed0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	69da      	ldr	r2, [r3, #28]
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	bf0c      	ite	eq
 8008ec0:	2301      	moveq	r3, #1
 8008ec2:	2300      	movne	r3, #0
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	79fb      	ldrb	r3, [r7, #7]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d08d      	beq.n	8008dea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3710      	adds	r7, #16
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008eee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	6899      	ldr	r1, [r3, #8]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	4b08      	ldr	r3, [pc, #32]	; (8008f1c <UART_EndRxTransfer+0x44>)
 8008efc:	400b      	ands	r3, r1
 8008efe:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	effffffe 	.word	0xeffffffe

08008f20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f7fd fcd6 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f44:	bf00      	nop
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f62:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fd fcb2 	bl	80068dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f8e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f96:	2b22      	cmp	r3, #34	; 0x22
 8008f98:	d13b      	bne.n	8009012 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fa2:	89bb      	ldrh	r3, [r7, #12]
 8008fa4:	b2d9      	uxtb	r1, r3
 8008fa6:	89fb      	ldrh	r3, [r7, #14]
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fae:	400a      	ands	r2, r1
 8008fb0:	b2d2      	uxtb	r2, r2
 8008fb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	3b01      	subs	r3, #1
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d122      	bne.n	8009022 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f022 0201 	bic.w	r2, r2, #1
 8008ffa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7f8 fbd4 	bl	80017b8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009010:	e007      	b.n	8009022 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	699a      	ldr	r2, [r3, #24]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0208 	orr.w	r2, r2, #8
 8009020:	619a      	str	r2, [r3, #24]
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b084      	sub	sp, #16
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009038:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009040:	2b22      	cmp	r3, #34	; 0x22
 8009042:	d13b      	bne.n	80090bc <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009050:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009052:	89ba      	ldrh	r2, [r7, #12]
 8009054:	89fb      	ldrh	r3, [r7, #14]
 8009056:	4013      	ands	r3, r2
 8009058:	b29a      	uxth	r2, r3
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	1c9a      	adds	r2, r3, #2
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800906e:	b29b      	uxth	r3, r3
 8009070:	3b01      	subs	r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009080:	b29b      	uxth	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d122      	bne.n	80090cc <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009094:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2220      	movs	r2, #32
 80090aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7f8 fb7f 	bl	80017b8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ba:	e007      	b.n	80090cc <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0208 	orr.w	r2, r2, #8
 80090ca:	619a      	str	r2, [r3, #24]
}
 80090cc:	bf00      	nop
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090e2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ea:	2b22      	cmp	r3, #34	; 0x22
 80090ec:	d166      	bne.n	80091bc <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090f4:	81fb      	strh	r3, [r7, #14]
 80090f6:	e03d      	b.n	8009174 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009100:	893b      	ldrh	r3, [r7, #8]
 8009102:	b2d9      	uxtb	r1, r3
 8009104:	89bb      	ldrh	r3, [r7, #12]
 8009106:	b2da      	uxtb	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800910c:	400a      	ands	r2, r1
 800910e:	b2d2      	uxtb	r2, r2
 8009110:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009116:	1c5a      	adds	r2, r3, #1
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009122:	b29b      	uxth	r3, r3
 8009124:	3b01      	subs	r3, #1
 8009126:	b29a      	uxth	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009134:	b29b      	uxth	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d119      	bne.n	800916e <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009148:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6899      	ldr	r1, [r3, #8]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	4b1f      	ldr	r3, [pc, #124]	; (80091d4 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8009156:	400b      	ands	r3, r1
 8009158:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f7f8 fb25 	bl	80017b8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800916e:	89fb      	ldrh	r3, [r7, #14]
 8009170:	3b01      	subs	r3, #1
 8009172:	81fb      	strh	r3, [r7, #14]
 8009174:	89fb      	ldrh	r3, [r7, #14]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1be      	bne.n	80090f8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009180:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009182:	897b      	ldrh	r3, [r7, #10]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d021      	beq.n	80091cc <UART_RxISR_8BIT_FIFOEN+0xf8>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800918e:	897a      	ldrh	r2, [r7, #10]
 8009190:	429a      	cmp	r2, r3
 8009192:	d21b      	bcs.n	80091cc <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80091a2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a0c      	ldr	r2, [pc, #48]	; (80091d8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80091a8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0220 	orr.w	r2, r2, #32
 80091b8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091ba:	e007      	b.n	80091cc <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	699a      	ldr	r2, [r3, #24]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0208 	orr.w	r2, r2, #8
 80091ca:	619a      	str	r2, [r3, #24]
}
 80091cc:	bf00      	nop
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	effffffe 	.word	0xeffffffe
 80091d8:	08008f81 	.word	0x08008f81

080091dc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091ea:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f2:	2b22      	cmp	r3, #34	; 0x22
 80091f4:	d166      	bne.n	80092c4 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091fc:	82fb      	strh	r3, [r7, #22]
 80091fe:	e03d      	b.n	800927c <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800920e:	8a3a      	ldrh	r2, [r7, #16]
 8009210:	8abb      	ldrh	r3, [r7, #20]
 8009212:	4013      	ands	r3, r2
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921e:	1c9a      	adds	r2, r3, #2
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800922a:	b29b      	uxth	r3, r3
 800922c:	3b01      	subs	r3, #1
 800922e:	b29a      	uxth	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800923c:	b29b      	uxth	r3, r3
 800923e:	2b00      	cmp	r3, #0
 8009240:	d119      	bne.n	8009276 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009250:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6899      	ldr	r1, [r3, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <UART_RxISR_16BIT_FIFOEN+0x100>)
 800925e:	400b      	ands	r3, r1
 8009260:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2220      	movs	r2, #32
 8009266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7f8 faa1 	bl	80017b8 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8009276:	8afb      	ldrh	r3, [r7, #22]
 8009278:	3b01      	subs	r3, #1
 800927a:	82fb      	strh	r3, [r7, #22]
 800927c:	8afb      	ldrh	r3, [r7, #22]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1be      	bne.n	8009200 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009288:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800928a:	8a7b      	ldrh	r3, [r7, #18]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d021      	beq.n	80092d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009296:	8a7a      	ldrh	r2, [r7, #18]
 8009298:	429a      	cmp	r2, r3
 800929a:	d21b      	bcs.n	80092d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	689a      	ldr	r2, [r3, #8]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80092aa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a0c      	ldr	r2, [pc, #48]	; (80092e0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80092b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0220 	orr.w	r2, r2, #32
 80092c0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092c2:	e007      	b.n	80092d4 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	699a      	ldr	r2, [r3, #24]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0208 	orr.w	r2, r2, #8
 80092d2:	619a      	str	r2, [r3, #24]
}
 80092d4:	bf00      	nop
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	effffffe 	.word	0xeffffffe
 80092e0:	0800902b 	.word	0x0800902b

080092e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <HAL_UARTEx_DisableFifoMode+0x16>
 8009332:	2302      	movs	r3, #2
 8009334:	e027      	b.n	8009386 <HAL_UARTEx_DisableFifoMode+0x66>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2224      	movs	r2, #36	; 0x24
 8009342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 0201 	bic.w	r2, r2, #1
 800935c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2220      	movs	r2, #32
 8009378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b084      	sub	sp, #16
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d101      	bne.n	80093aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093a6:	2302      	movs	r3, #2
 80093a8:	e02d      	b.n	8009406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2201      	movs	r2, #1
 80093ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2224      	movs	r2, #36	; 0x24
 80093b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f022 0201 	bic.w	r2, r2, #1
 80093d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f850 	bl	800948c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800941e:	2b01      	cmp	r3, #1
 8009420:	d101      	bne.n	8009426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009422:	2302      	movs	r3, #2
 8009424:	e02d      	b.n	8009482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2224      	movs	r2, #36	; 0x24
 8009432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 0201 	bic.w	r2, r2, #1
 800944c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f812 	bl	800948c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2220      	movs	r2, #32
 8009474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800948c:	b480      	push	{r7}
 800948e:	b089      	sub	sp, #36	; 0x24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009494:	4a2f      	ldr	r2, [pc, #188]	; (8009554 <UARTEx_SetNbDataToProcess+0xc8>)
 8009496:	f107 0314 	add.w	r3, r7, #20
 800949a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800949e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80094a2:	4a2d      	ldr	r2, [pc, #180]	; (8009558 <UARTEx_SetNbDataToProcess+0xcc>)
 80094a4:	f107 030c 	add.w	r3, r7, #12
 80094a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80094ac:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d108      	bne.n	80094ca <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094c8:	e03d      	b.n	8009546 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094ca:	2308      	movs	r3, #8
 80094cc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094ce:	2308      	movs	r3, #8
 80094d0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	0e5b      	lsrs	r3, r3, #25
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	0f5b      	lsrs	r3, r3, #29
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 0307 	and.w	r3, r3, #7
 80094f0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80094f2:	7fbb      	ldrb	r3, [r7, #30]
 80094f4:	7f3a      	ldrb	r2, [r7, #28]
 80094f6:	f107 0120 	add.w	r1, r7, #32
 80094fa:	440a      	add	r2, r1
 80094fc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009500:	fb02 f303 	mul.w	r3, r2, r3
 8009504:	7f3a      	ldrb	r2, [r7, #28]
 8009506:	f107 0120 	add.w	r1, r7, #32
 800950a:	440a      	add	r2, r1
 800950c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8009510:	fb93 f3f2 	sdiv	r3, r3, r2
 8009514:	b29a      	uxth	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800951c:	7ffb      	ldrb	r3, [r7, #31]
 800951e:	7f7a      	ldrb	r2, [r7, #29]
 8009520:	f107 0120 	add.w	r1, r7, #32
 8009524:	440a      	add	r2, r1
 8009526:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800952a:	fb02 f303 	mul.w	r3, r2, r3
 800952e:	7f7a      	ldrb	r2, [r7, #29]
 8009530:	f107 0120 	add.w	r1, r7, #32
 8009534:	440a      	add	r2, r1
 8009536:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800953a:	fb93 f3f2 	sdiv	r3, r3, r2
 800953e:	b29a      	uxth	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009546:	bf00      	nop
 8009548:	3724      	adds	r7, #36	; 0x24
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
 8009552:	bf00      	nop
 8009554:	08009b3c 	.word	0x08009b3c
 8009558:	08009b44 	.word	0x08009b44

0800955c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800955c:	b084      	sub	sp, #16
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	f107 001c 	add.w	r0, r7, #28
 800956a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	2b01      	cmp	r3, #1
 8009572:	d120      	bne.n	80095b6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68da      	ldr	r2, [r3, #12]
 8009584:	4b25      	ldr	r3, [pc, #148]	; (800961c <USB_CoreInit+0xc0>)
 8009586:	4013      	ands	r3, r2
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959a:	2b01      	cmp	r3, #1
 800959c:	d105      	bne.n	80095aa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fa5a 	bl	8009a64 <USB_CoreReset>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]
 80095b4:	e01a      	b.n	80095ec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fa4e 	bl	8009a64 <USB_CoreReset>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d106      	bne.n	80095e0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	639a      	str	r2, [r3, #56]	; 0x38
 80095de:	e005      	b.n	80095ec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d10b      	bne.n	800960a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f043 0208 	orr.w	r2, r3, #8
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f043 0220 	orr.w	r2, r3, #32
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3710      	adds	r7, #16
 8009610:	46bd      	mov	sp, r7
 8009612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009616:	b004      	add	sp, #16
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	ffbdffbf 	.word	0xffbdffbf

08009620 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f023 0201 	bic.w	r2, r3, #1
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	370c      	adds	r7, #12
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800965a:	78fb      	ldrb	r3, [r7, #3]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d106      	bne.n	800966e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	60da      	str	r2, [r3, #12]
 800966c:	e00b      	b.n	8009686 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800966e:	78fb      	ldrb	r3, [r7, #3]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d106      	bne.n	8009682 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	60da      	str	r2, [r3, #12]
 8009680:	e001      	b.n	8009686 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e003      	b.n	800968e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009686:	2032      	movs	r0, #50	; 0x32
 8009688:	f7f8 f9e4 	bl	8001a54 <HAL_Delay>

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009698:	b084      	sub	sp, #16
 800969a:	b580      	push	{r7, lr}
 800969c:	b086      	sub	sp, #24
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80096a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]
 80096b6:	e009      	b.n	80096cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	3340      	adds	r3, #64	; 0x40
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	2200      	movs	r2, #0
 80096c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	3301      	adds	r3, #1
 80096ca:	613b      	str	r3, [r7, #16]
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	2b0e      	cmp	r3, #14
 80096d0:	d9f2      	bls.n	80096b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d112      	bne.n	80096fe <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	601a      	str	r2, [r3, #0]
 80096fc:	e005      	b.n	800970a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009710:	461a      	mov	r2, r3
 8009712:	2300      	movs	r3, #0
 8009714:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971c:	4619      	mov	r1, r3
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009724:	461a      	mov	r2, r3
 8009726:	680b      	ldr	r3, [r1, #0]
 8009728:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	2b01      	cmp	r3, #1
 800972e:	d10c      	bne.n	800974a <USB_DevInit+0xb2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009732:	2b00      	cmp	r3, #0
 8009734:	d104      	bne.n	8009740 <USB_DevInit+0xa8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009736:	2100      	movs	r1, #0
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f000 f961 	bl	8009a00 <USB_SetDevSpeed>
 800973e:	e008      	b.n	8009752 <USB_DevInit+0xba>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009740:	2101      	movs	r1, #1
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f95c 	bl	8009a00 <USB_SetDevSpeed>
 8009748:	e003      	b.n	8009752 <USB_DevInit+0xba>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800974a:	2103      	movs	r1, #3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f957 	bl	8009a00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009752:	2110      	movs	r1, #16
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f90b 	bl	8009970 <USB_FlushTxFifo>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <USB_DevInit+0xcc>
  {
    ret = HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f929 	bl	80099bc <USB_FlushRxFifo>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <USB_DevInit+0xdc>
  {
    ret = HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977a:	461a      	mov	r2, r3
 800977c:	2300      	movs	r3, #0
 800977e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009786:	461a      	mov	r2, r3
 8009788:	2300      	movs	r3, #0
 800978a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009792:	461a      	mov	r2, r3
 8009794:	2300      	movs	r3, #0
 8009796:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009798:	2300      	movs	r3, #0
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	e043      	b.n	8009826 <USB_DevInit+0x18e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097b4:	d118      	bne.n	80097e8 <USB_DevInit+0x150>
    {
      if (i == 0U)
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <USB_DevInit+0x13a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	015a      	lsls	r2, r3, #5
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	4413      	add	r3, r2
 80097c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c8:	461a      	mov	r2, r3
 80097ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80097ce:	6013      	str	r3, [r2, #0]
 80097d0:	e013      	b.n	80097fa <USB_DevInit+0x162>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097de:	461a      	mov	r2, r3
 80097e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80097e4:	6013      	str	r3, [r2, #0]
 80097e6:	e008      	b.n	80097fa <USB_DevInit+0x162>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f4:	461a      	mov	r2, r3
 80097f6:	2300      	movs	r3, #0
 80097f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009806:	461a      	mov	r2, r3
 8009808:	2300      	movs	r3, #0
 800980a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009818:	461a      	mov	r2, r3
 800981a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800981e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	3301      	adds	r3, #1
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	693a      	ldr	r2, [r7, #16]
 800982a:	429a      	cmp	r2, r3
 800982c:	d3b7      	bcc.n	800979e <USB_DevInit+0x106>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800982e:	2300      	movs	r3, #0
 8009830:	613b      	str	r3, [r7, #16]
 8009832:	e043      	b.n	80098bc <USB_DevInit+0x224>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800984a:	d118      	bne.n	800987e <USB_DevInit+0x1e6>
    {
      if (i == 0U)
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <USB_DevInit+0x1d0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985e:	461a      	mov	r2, r3
 8009860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	e013      	b.n	8009890 <USB_DevInit+0x1f8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	015a      	lsls	r2, r3, #5
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009874:	461a      	mov	r2, r3
 8009876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	e008      	b.n	8009890 <USB_DevInit+0x1f8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	015a      	lsls	r2, r3, #5
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988a:	461a      	mov	r2, r3
 800988c:	2300      	movs	r3, #0
 800988e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989c:	461a      	mov	r2, r3
 800989e:	2300      	movs	r3, #0
 80098a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	015a      	lsls	r2, r3, #5
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	4413      	add	r3, r2
 80098aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ae:	461a      	mov	r2, r3
 80098b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	3301      	adds	r3, #1
 80098ba:	613b      	str	r3, [r7, #16]
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d3b7      	bcc.n	8009834 <USB_DevInit+0x19c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	68fa      	ldr	r2, [r7, #12]
 80098ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098d6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d110      	bne.n	8009900 <USB_DevInit+0x268>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e4:	461a      	mov	r2, r3
 80098e6:	4b1e      	ldr	r3, [pc, #120]	; (8009960 <USB_DevInit+0x2c8>)
 80098e8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f8:	4619      	mov	r1, r3
 80098fa:	4b1a      	ldr	r3, [pc, #104]	; (8009964 <USB_DevInit+0x2cc>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800990c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	2b00      	cmp	r3, #0
 8009912:	d105      	bne.n	8009920 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	699b      	ldr	r3, [r3, #24]
 8009918:	f043 0210 	orr.w	r2, r3, #16
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	699a      	ldr	r2, [r3, #24]
 8009924:	4b10      	ldr	r3, [pc, #64]	; (8009968 <USB_DevInit+0x2d0>)
 8009926:	4313      	orrs	r3, r2
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800992c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <USB_DevInit+0x2a6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f043 0208 	orr.w	r2, r3, #8
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800993e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009940:	2b01      	cmp	r3, #1
 8009942:	d105      	bne.n	8009950 <USB_DevInit+0x2b8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699a      	ldr	r2, [r3, #24]
 8009948:	4b08      	ldr	r3, [pc, #32]	; (800996c <USB_DevInit+0x2d4>)
 800994a:	4313      	orrs	r3, r2
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009950:	7dfb      	ldrb	r3, [r7, #23]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800995c:	b004      	add	sp, #16
 800995e:	4770      	bx	lr
 8009960:	00800100 	.word	0x00800100
 8009964:	00010003 	.word	0x00010003
 8009968:	803c3800 	.word	0x803c3800
 800996c:	40000004 	.word	0x40000004

08009970 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800997a:	2300      	movs	r3, #0
 800997c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	019b      	lsls	r3, r3, #6
 8009982:	f043 0220 	orr.w	r2, r3, #32
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3301      	adds	r3, #1
 800998e:	60fb      	str	r3, [r7, #12]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4a09      	ldr	r2, [pc, #36]	; (80099b8 <USB_FlushTxFifo+0x48>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d901      	bls.n	800999c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	e006      	b.n	80099aa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b20      	cmp	r3, #32
 80099a6:	d0f0      	beq.n	800998a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	00030d40 	.word	0x00030d40

080099bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099bc:	b480      	push	{r7}
 80099be:	b085      	sub	sp, #20
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2210      	movs	r2, #16
 80099cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	4a09      	ldr	r2, [pc, #36]	; (80099fc <USB_FlushRxFifo+0x40>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d901      	bls.n	80099e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	e006      	b.n	80099ee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f003 0310 	and.w	r3, r3, #16
 80099e8:	2b10      	cmp	r3, #16
 80099ea:	d0f0      	beq.n	80099ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	00030d40 	.word	0x00030d40

08009a00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	78fb      	ldrb	r3, [r7, #3]
 8009a1a:	68f9      	ldr	r1, [r7, #12]
 8009a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a20:	4313      	orrs	r3, r2
 8009a22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a4c:	f043 0302 	orr.w	r3, r3, #2
 8009a50:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009a52:	2003      	movs	r0, #3
 8009a54:	f7f7 fffe 	bl	8001a54 <HAL_Delay>

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3301      	adds	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4a13      	ldr	r2, [pc, #76]	; (8009ac8 <USB_CoreReset+0x64>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d901      	bls.n	8009a82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e01b      	b.n	8009aba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	daf2      	bge.n	8009a70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f043 0201 	orr.w	r2, r3, #1
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4a09      	ldr	r2, [pc, #36]	; (8009ac8 <USB_CoreReset+0x64>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d901      	bls.n	8009aac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e006      	b.n	8009aba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d0f0      	beq.n	8009a9a <USB_CoreReset+0x36>

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	00030d40 	.word	0x00030d40

08009acc <__libc_init_array>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4e0d      	ldr	r6, [pc, #52]	; (8009b04 <__libc_init_array+0x38>)
 8009ad0:	4c0d      	ldr	r4, [pc, #52]	; (8009b08 <__libc_init_array+0x3c>)
 8009ad2:	1ba4      	subs	r4, r4, r6
 8009ad4:	10a4      	asrs	r4, r4, #2
 8009ad6:	2500      	movs	r5, #0
 8009ad8:	42a5      	cmp	r5, r4
 8009ada:	d109      	bne.n	8009af0 <__libc_init_array+0x24>
 8009adc:	4e0b      	ldr	r6, [pc, #44]	; (8009b0c <__libc_init_array+0x40>)
 8009ade:	4c0c      	ldr	r4, [pc, #48]	; (8009b10 <__libc_init_array+0x44>)
 8009ae0:	f000 f820 	bl	8009b24 <_init>
 8009ae4:	1ba4      	subs	r4, r4, r6
 8009ae6:	10a4      	asrs	r4, r4, #2
 8009ae8:	2500      	movs	r5, #0
 8009aea:	42a5      	cmp	r5, r4
 8009aec:	d105      	bne.n	8009afa <__libc_init_array+0x2e>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}
 8009af0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009af4:	4798      	blx	r3
 8009af6:	3501      	adds	r5, #1
 8009af8:	e7ee      	b.n	8009ad8 <__libc_init_array+0xc>
 8009afa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009afe:	4798      	blx	r3
 8009b00:	3501      	adds	r5, #1
 8009b02:	e7f2      	b.n	8009aea <__libc_init_array+0x1e>
 8009b04:	08009b64 	.word	0x08009b64
 8009b08:	08009b64 	.word	0x08009b64
 8009b0c:	08009b64 	.word	0x08009b64
 8009b10:	08009b68 	.word	0x08009b68

08009b14 <memset>:
 8009b14:	4402      	add	r2, r0
 8009b16:	4603      	mov	r3, r0
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d100      	bne.n	8009b1e <memset+0xa>
 8009b1c:	4770      	bx	lr
 8009b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b22:	e7f9      	b.n	8009b18 <memset+0x4>

08009b24 <_init>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	bf00      	nop
 8009b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2a:	bc08      	pop	{r3}
 8009b2c:	469e      	mov	lr, r3
 8009b2e:	4770      	bx	lr

08009b30 <_fini>:
 8009b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b32:	bf00      	nop
 8009b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b36:	bc08      	pop	{r3}
 8009b38:	469e      	mov	lr, r3
 8009b3a:	4770      	bx	lr
